#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DashAttack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MyAbilityBP_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DashAttack.DashAttack_C
// 0x0088 (0x0180 - 0x00F8)
class UDashAttack_C final : public UMyAbilityBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_DashAttack_C;                       // 0x00F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AMyCharacter_C*                         MyCharOwner;                                       // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        AffectedCells;                                     // 0x0128(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         HowLong;                                           // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233E[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time;                                              // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0148(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartingPos;                                       // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClearAttackRange();
	void ContinueAction();
	void DrawAttackRange();
	void ExecuteUbergraph_DashAttack(int32 EntryPoint);
	void OnAbilitySelected();
	void OnEnd();
	void PreDisplayTarget(const struct FVector& Param_Target);
	void ReceiveBeginPlay();
	void Use(const struct FVector& AbilityTarget);
	void ValidateTarget(const struct FVector& Param_Target, bool* Valid_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DashAttack_C">();
	}
	static class UDashAttack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDashAttack_C>();
	}
};
static_assert(alignof(UDashAttack_C) == 0x000008, "Wrong alignment on UDashAttack_C");
static_assert(sizeof(UDashAttack_C) == 0x000180, "Wrong size on UDashAttack_C");
static_assert(offsetof(UDashAttack_C, UberGraphFrame_DashAttack_C) == 0x0000F8, "Member 'UDashAttack_C::UberGraphFrame_DashAttack_C' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, MyCharOwner) == 0x000100, "Member 'UDashAttack_C::MyCharOwner' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, Timer) == 0x000108, "Member 'UDashAttack_C::Timer' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, Direction) == 0x000110, "Member 'UDashAttack_C::Direction' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, AffectedCells) == 0x000128, "Member 'UDashAttack_C::AffectedCells' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, HowLong) == 0x000138, "Member 'UDashAttack_C::HowLong' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, Time) == 0x000140, "Member 'UDashAttack_C::Time' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, Target) == 0x000148, "Member 'UDashAttack_C::Target' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, StartingPos) == 0x000160, "Member 'UDashAttack_C::StartingPos' has a wrong offset!");
static_assert(offsetof(UDashAttack_C, Length) == 0x000178, "Member 'UDashAttack_C::Length' has a wrong offset!");

}

