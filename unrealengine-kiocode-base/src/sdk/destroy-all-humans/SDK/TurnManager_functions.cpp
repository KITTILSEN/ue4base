#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TurnManager

#include "Basic.hpp"

#include "TurnManager_classes.hpp"
#include "TurnManager_parameters.hpp"


namespace SDK
{

// Function TurnManager.TurnManager_C.ActualEndEnemyTurn
// (Public, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::ActualEndEnemyTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "ActualEndEnemyTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.ActualEndPlayerTurn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::ActualEndPlayerTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "ActualEndPlayerTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.CanPlayerPassTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Can_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATurnManager_C::CanPlayerPassTurn(bool* Can_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "CanPlayerPassTurn");

	Params::TurnManager_C_CanPlayerPassTurn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Can_ != nullptr)
		*Can_ = Parms.Can_;
}


// Function TurnManager.TurnManager_C.EndEnemyTurn
// (Public, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::EndEnemyTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "EndEnemyTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.EndPlayerTurn
// (Public, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::EndPlayerTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "EndPlayerTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.ExecuteUbergraph_TurnManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATurnManager_C::ExecuteUbergraph_TurnManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "ExecuteUbergraph_TurnManager");

	Params::TurnManager_C_ExecuteUbergraph_TurnManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TurnManager.TurnManager_C.HideAllHUDs
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::HideAllHUDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "HideAllHUDs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ATurnManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATurnManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "ReceiveTick");

	Params::TurnManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TurnManager.TurnManager_C.SetLevelSequencePlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequencePlayer*             Which                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ATurnManager_C::SetLevelSequencePlayer(class ULevelSequencePlayer* Which)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "SetLevelSequencePlayer");

	Params::TurnManager_C_SetLevelSequencePlayer Parms{};

	Parms.Which = Which;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TurnManager.TurnManager_C.ShowAllHUDs
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::ShowAllHUDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "ShowAllHUDs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TurnManager.TurnManager_C.SwitchTurn
// (Public, BlueprintCallable, BlueprintEvent)

void ATurnManager_C::SwitchTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TurnManager_C", "SwitchTurn");

	UObject::ProcessEvent(Func, nullptr);
}

}

