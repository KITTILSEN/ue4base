#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnanasAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnanasAnimBP.AnanasAnimBP_C
// 0x07D0 (0x0B20 - 0x0350)
class UAnanasAnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_23A3[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0400(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0428(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0450(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0478(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x04A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x04C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x04F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0518(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0540(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0568(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0590(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x05B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x05E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0608(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x0630(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x0678(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x0698(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x06E0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x0700(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x0748(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0768(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x07B0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x07D0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0818(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0838(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0880(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x08A0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x08E8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0908(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0950(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0970(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x09B8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x09D8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0A20(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0A40(0x00C8)()
	class AMyCharacter_C*                         MyCharacter;                                       // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayTakeDamageAnim;                           // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayAttackAnim;                               // 0x0B11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hastoplaydieanim;                                  // 0x0B12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWalking;                                         // 0x0B13(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMace;                                           // 0x0B14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayShadowStep;                               // 0x0B15(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayGroundSlam;                               // 0x0B16(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayKnifeThorw;                               // 0x0B17(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayTaunt;                                    // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_AnanasDagger();
	void AnimNotify_AnanasDeath();
	void AnimNotify_AnanasStep();
	void AnimNotify_BananasMaceSwoosh();
	void AnimNotify_BananasTaunt();
	void AnimNotify_Damage();
	void AnimNotify_Desintegrate();
	void AnimNotify_Die();
	void AnimNotify_GetDamaged();
	void AnimNotify_GroundSlam();
	void AnimNotify_GroundSlam02();
	void AnimNotify_GroundslamImpact();
	void AnimNotify_Knife_Throw_Sound();
	void AnimNotify_ThrowKnife();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_34AE7C8544C8EE72AD5A5E962BCE6E98();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_4DDCA90948FD2D0E5C4901B861FDA5D7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_71E29BCC4FB5923469EFB2B3E19F46C5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_8C52EF1C4C58C26A55F72E8340CFD3FD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_9132808649E3F81E21AAF68BD182E2FB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_BEF4144B498B31A7A68D4DB16DF08AB6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_D0F053A54C426E86E49CCDA49287887F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_DF8C19834BE826DD4A02878BBFE3DCDD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnanasAnimBP_AnimGraphNode_TransitionResult_E1A5482B41FAFB65B10EB59F42980D75();
	void ExecuteUbergraph_AnanasAnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnanasAnimBP_C">();
	}
	static class UAnanasAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnanasAnimBP_C>();
	}
};
static_assert(alignof(UAnanasAnimBP_C) == 0x000010, "Wrong alignment on UAnanasAnimBP_C");
static_assert(sizeof(UAnanasAnimBP_C) == 0x000B20, "Wrong size on UAnanasAnimBP_C");
static_assert(offsetof(UAnanasAnimBP_C, UberGraphFrame) == 0x000350, "Member 'UAnanasAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UAnanasAnimBP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UAnanasAnimBP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_Root) == 0x000368, "Member 'UAnanasAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_16) == 0x000388, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_15) == 0x0003B0, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_14) == 0x0003D8, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_13) == 0x000400, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_12) == 0x000428, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_11) == 0x000450, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_10) == 0x000478, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_9) == 0x0004A0, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_8) == 0x0004C8, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_7) == 0x0004F0, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000518, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000540, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000568, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x000590, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x0005B8, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0005E0, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_TransitionResult) == 0x000608, "Member 'UAnanasAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_9) == 0x000630, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_9) == 0x000678, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_8) == 0x000698, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_8) == 0x0006E0, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_7) == 0x000700, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_7) == 0x000748, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_6) == 0x000768, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_6) == 0x0007B0, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x0007D0, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_5) == 0x000818, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x000838, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_4) == 0x000880, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x0008A0, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_3) == 0x0008E8, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000908, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_2) == 0x000950, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000970, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult_1) == 0x0009B8, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_SequencePlayer) == 0x0009D8, "Member 'UAnanasAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateResult) == 0x000A20, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, AnimGraphNode_StateMachine) == 0x000A40, "Member 'UAnanasAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, MyCharacter) == 0x000B08, "Member 'UAnanasAnimBP_C::MyCharacter' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasToPlayTakeDamageAnim) == 0x000B10, "Member 'UAnanasAnimBP_C::HasToPlayTakeDamageAnim' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasToPlayAttackAnim) == 0x000B11, "Member 'UAnanasAnimBP_C::HasToPlayAttackAnim' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, Hastoplaydieanim) == 0x000B12, "Member 'UAnanasAnimBP_C::Hastoplaydieanim' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, IsWalking) == 0x000B13, "Member 'UAnanasAnimBP_C::IsWalking' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasMace) == 0x000B14, "Member 'UAnanasAnimBP_C::HasMace' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasToPlayShadowStep) == 0x000B15, "Member 'UAnanasAnimBP_C::HasToPlayShadowStep' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasToPlayGroundSlam) == 0x000B16, "Member 'UAnanasAnimBP_C::HasToPlayGroundSlam' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasToPlayKnifeThorw) == 0x000B17, "Member 'UAnanasAnimBP_C::HasToPlayKnifeThorw' has a wrong offset!");
static_assert(offsetof(UAnanasAnimBP_C, HasToPlayTaunt) == 0x000B18, "Member 'UAnanasAnimBP_C::HasToPlayTaunt' has a wrong offset!");

}

