#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MainCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AlliedCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MainCharacter.MainCharacter_C
// 0x0060 (0x0458 - 0x03F8)
class AMainCharacter_C final : public AAlliedCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MainCharacter_C;                    // 0x03F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      BloodParticles;                                    // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      WindParticles;                                     // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFireballAbilityBP_C*                   FireballAbilityBP;                                 // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PlayerAttack;                                      // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MonkStaff_002;                                  // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStandardAttack_C*                      MeleeEnemyAttack;                                  // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWindAbilityBP_C*                       WindAbilityBP;                                     // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayWindAbility;                              // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreviewingFireball;                              // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CastedFireball;                                    // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271A[0x1];                                     // 0x043B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PassiveHealAmount;                                 // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MyMat;                                             // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeathTimer;                                        // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToStartDesintegrating;                          // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MainCharacter(int32 EntryPoint);
	void GetDeselected();
	void GetSelected();
	void HideAvailableActions();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveDamage(int32 Damage, class AActor* Attacker);
	void ReceiveTick(float DeltaSeconds);
	void ShowAvailableActions();
	void UsePassive(bool* NoMinionsLeft);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MainCharacter_C">();
	}
	static class AMainCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMainCharacter_C>();
	}
};
static_assert(alignof(AMainCharacter_C) == 0x000008, "Wrong alignment on AMainCharacter_C");
static_assert(sizeof(AMainCharacter_C) == 0x000458, "Wrong size on AMainCharacter_C");
static_assert(offsetof(AMainCharacter_C, UberGraphFrame_MainCharacter_C) == 0x0003F8, "Member 'AMainCharacter_C::UberGraphFrame_MainCharacter_C' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, BloodParticles) == 0x000400, "Member 'AMainCharacter_C::BloodParticles' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, WindParticles) == 0x000408, "Member 'AMainCharacter_C::WindParticles' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, FireballAbilityBP) == 0x000410, "Member 'AMainCharacter_C::FireballAbilityBP' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, PlayerAttack) == 0x000418, "Member 'AMainCharacter_C::PlayerAttack' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, SM_MonkStaff_002) == 0x000420, "Member 'AMainCharacter_C::SM_MonkStaff_002' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, MeleeEnemyAttack) == 0x000428, "Member 'AMainCharacter_C::MeleeEnemyAttack' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, WindAbilityBP) == 0x000430, "Member 'AMainCharacter_C::WindAbilityBP' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, HasToPlayWindAbility) == 0x000438, "Member 'AMainCharacter_C::HasToPlayWindAbility' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, IsPreviewingFireball) == 0x000439, "Member 'AMainCharacter_C::IsPreviewingFireball' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, CastedFireball) == 0x00043A, "Member 'AMainCharacter_C::CastedFireball' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, PassiveHealAmount) == 0x00043C, "Member 'AMainCharacter_C::PassiveHealAmount' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, MyMat) == 0x000440, "Member 'AMainCharacter_C::MyMat' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, DeathTimer) == 0x000448, "Member 'AMainCharacter_C::DeathTimer' has a wrong offset!");
static_assert(offsetof(AMainCharacter_C, HasToStartDesintegrating) == 0x000450, "Member 'AMainCharacter_C::HasToStartDesintegrating' has a wrong offset!");

}

