#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KnifeThrowAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MyAbilityBP_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass KnifeThrowAbility.KnifeThrowAbility_C
// 0x0048 (0x0140 - 0x00F8)
class UKnifeThrowAbility_C final : public UMyAbilityBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_KnifeThrowAbility_C;                // 0x00F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Range;                                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyThrown;                                     // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25E6[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CooldownAfterSecondUse;                            // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMinion1Knife_C*                        Knife;                                             // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasReachedThrowKnifeNotify;                        // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ContinueAction();
	void ExecuteUbergraph_KnifeThrowAbility(int32 EntryPoint);
	void FirstUse();
	void LaunchKnife();
	void OnAbilityDeselected();
	void OnAbilitySelected();
	void OnEnd();
	void PreDisplayTarget(const struct FVector& Param_Target);
	void ReceiveBeginPlay();
	void SecondUse();
	void Use(const struct FVector& AbilityTarget);
	void ValidateTarget(const struct FVector& Param_Target, bool* Valid_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KnifeThrowAbility_C">();
	}
	static class UKnifeThrowAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKnifeThrowAbility_C>();
	}
};
static_assert(alignof(UKnifeThrowAbility_C) == 0x000008, "Wrong alignment on UKnifeThrowAbility_C");
static_assert(sizeof(UKnifeThrowAbility_C) == 0x000140, "Wrong size on UKnifeThrowAbility_C");
static_assert(offsetof(UKnifeThrowAbility_C, UberGraphFrame_KnifeThrowAbility_C) == 0x0000F8, "Member 'UKnifeThrowAbility_C::UberGraphFrame_KnifeThrowAbility_C' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, Range) == 0x000100, "Member 'UKnifeThrowAbility_C::Range' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, Damage) == 0x000104, "Member 'UKnifeThrowAbility_C::Damage' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, Timer) == 0x000108, "Member 'UKnifeThrowAbility_C::Timer' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, Target) == 0x000110, "Member 'UKnifeThrowAbility_C::Target' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, AlreadyThrown) == 0x000128, "Member 'UKnifeThrowAbility_C::AlreadyThrown' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, CooldownAfterSecondUse) == 0x00012C, "Member 'UKnifeThrowAbility_C::CooldownAfterSecondUse' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, Knife) == 0x000130, "Member 'UKnifeThrowAbility_C::Knife' has a wrong offset!");
static_assert(offsetof(UKnifeThrowAbility_C, HasReachedThrowKnifeNotify) == 0x000138, "Member 'UKnifeThrowAbility_C::HasReachedThrowKnifeNotify' has a wrong offset!");

}

