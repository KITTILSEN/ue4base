#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindAbilityBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MyAbilityBP_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "StrategyGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WindAbilityBP.WindAbilityBP_C
// 0x00A8 (0x01A0 - 0x00F8)
class UWindAbilityBP_C final : public UMyAbilityBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WindAbilityBP_C;                    // 0x00F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Timer;                                             // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HowLong;                                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HowWide;                                           // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         MyCharOwner;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         XDiff;                                             // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         YDiff;                                             // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewVar_0;                                          // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        AffectedCells;                                     // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AMyCharacter_C*>                 AffectedChars;                                     // 0x0160(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FVector>                        CharPositions;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsPushing;                                         // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273D[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PushSpeed;                                         // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PushPercentage;                                    // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PushTime;                                          // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ContinueAction();
	void ExecuteUbergraph_WindAbilityBP(int32 EntryPoint);
	void MoveEntities();
	void NewFunction_0();
	void OnAbilitySelected();
	void OnEnd();
	void PreDisplayTarget(const struct FVector& Target);
	void PushEnemies();
	void ReceiveBeginPlay();
	void Use(const struct FVector& AbilityTarget);
	void ValidateTarget(const struct FVector& Target, bool* Valid_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WindAbilityBP_C">();
	}
	static class UWindAbilityBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindAbilityBP_C>();
	}
};
static_assert(alignof(UWindAbilityBP_C) == 0x000008, "Wrong alignment on UWindAbilityBP_C");
static_assert(sizeof(UWindAbilityBP_C) == 0x0001A0, "Wrong size on UWindAbilityBP_C");
static_assert(offsetof(UWindAbilityBP_C, UberGraphFrame_WindAbilityBP_C) == 0x0000F8, "Member 'UWindAbilityBP_C::UberGraphFrame_WindAbilityBP_C' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, Timer) == 0x000100, "Member 'UWindAbilityBP_C::Timer' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, HowLong) == 0x000108, "Member 'UWindAbilityBP_C::HowLong' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, HowWide) == 0x00010C, "Member 'UWindAbilityBP_C::HowWide' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, MyCharOwner) == 0x000110, "Member 'UWindAbilityBP_C::MyCharOwner' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, XDiff) == 0x000118, "Member 'UWindAbilityBP_C::XDiff' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, YDiff) == 0x00011C, "Member 'UWindAbilityBP_C::YDiff' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, Direction) == 0x000120, "Member 'UWindAbilityBP_C::Direction' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, NewVar_0) == 0x000138, "Member 'UWindAbilityBP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, AffectedCells) == 0x000150, "Member 'UWindAbilityBP_C::AffectedCells' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, AffectedChars) == 0x000160, "Member 'UWindAbilityBP_C::AffectedChars' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, CharPositions) == 0x000170, "Member 'UWindAbilityBP_C::CharPositions' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, IsPushing) == 0x000180, "Member 'UWindAbilityBP_C::IsPushing' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, PushSpeed) == 0x000188, "Member 'UWindAbilityBP_C::PushSpeed' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, PushPercentage) == 0x000190, "Member 'UWindAbilityBP_C::PushPercentage' has a wrong offset!");
static_assert(offsetof(UWindAbilityBP_C, PushTime) == 0x000198, "Member 'UWindAbilityBP_C::PushTime' has a wrong offset!");

}

