#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AreaHealAbility

#include "Basic.hpp"

#include "MyAbilityBP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AreaHealAbility.AreaHealAbility_C
// 0x0020 (0x0118 - 0x00F8)
class UAreaHealAbility_C final : public UMyAbilityBP_C
{
public:
	int32                                         Range;                                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealAmount;                                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2707[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Timer;                                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealthCost;                                        // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ContinueAction();
	void OnAbilitySelected();
	void OnEnd();
	void Use(const struct FVector& AbilityTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AreaHealAbility_C">();
	}
	static class UAreaHealAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAreaHealAbility_C>();
	}
};
static_assert(alignof(UAreaHealAbility_C) == 0x000008, "Wrong alignment on UAreaHealAbility_C");
static_assert(sizeof(UAreaHealAbility_C) == 0x000118, "Wrong size on UAreaHealAbility_C");
static_assert(offsetof(UAreaHealAbility_C, Range) == 0x0000F8, "Member 'UAreaHealAbility_C::Range' has a wrong offset!");
static_assert(offsetof(UAreaHealAbility_C, HealAmount) == 0x0000FC, "Member 'UAreaHealAbility_C::HealAmount' has a wrong offset!");
static_assert(offsetof(UAreaHealAbility_C, Damage) == 0x000100, "Member 'UAreaHealAbility_C::Damage' has a wrong offset!");
static_assert(offsetof(UAreaHealAbility_C, Timer) == 0x000108, "Member 'UAreaHealAbility_C::Timer' has a wrong offset!");
static_assert(offsetof(UAreaHealAbility_C, HealthCost) == 0x000110, "Member 'UAreaHealAbility_C::HealthCost' has a wrong offset!");

}

