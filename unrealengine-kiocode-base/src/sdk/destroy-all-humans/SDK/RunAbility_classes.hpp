#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RunAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MyAbilityBP_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "StrategyGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass RunAbility.RunAbility_C
// 0x0068 (0x0160 - 0x00F8)
class URunAbility_C final : public UMyAbilityBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_RunAbility_C;                       // 0x00F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                Target;                                            // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Path;                                              // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PathIdx;                                           // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269F[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        T;                                                 // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveVelocity;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotVelocity;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugPath;                                         // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A0[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveRange;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InitMoveRange;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsedByEnemy;                                       // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClearMoveRange();
	void ContinueAction();
	void DecreaseMovementRange();
	void DrawMoveRange();
	void DrawPath(TArray<struct FVector>& Param_Path);
	void ExecuteUbergraph_RunAbility(int32 EntryPoint);
	void FindPath(const struct FVector& End, TArray<struct FVector>* Param_Path);
	void IsValidIdx(int32 NewParam, bool* NewParam1);
	void MoveThroughPath();
	void OnAbilitySelected();
	void OnEnd();
	void PreDisplayTarget(const struct FVector& Param_Target);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetMoveRange();
	void UpdateIdx(double A);
	void UpdateMoveRangeHUD();
	void Use(const struct FVector& AbilityTarget);
	void ValidateTarget(const struct FVector& Param_Target, bool* Valid_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RunAbility_C">();
	}
	static class URunAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URunAbility_C>();
	}
};
static_assert(alignof(URunAbility_C) == 0x000008, "Wrong alignment on URunAbility_C");
static_assert(sizeof(URunAbility_C) == 0x000160, "Wrong size on URunAbility_C");
static_assert(offsetof(URunAbility_C, UberGraphFrame_RunAbility_C) == 0x0000F8, "Member 'URunAbility_C::UberGraphFrame_RunAbility_C' has a wrong offset!");
static_assert(offsetof(URunAbility_C, Target) == 0x000100, "Member 'URunAbility_C::Target' has a wrong offset!");
static_assert(offsetof(URunAbility_C, Path) == 0x000118, "Member 'URunAbility_C::Path' has a wrong offset!");
static_assert(offsetof(URunAbility_C, PathIdx) == 0x000128, "Member 'URunAbility_C::PathIdx' has a wrong offset!");
static_assert(offsetof(URunAbility_C, T) == 0x000130, "Member 'URunAbility_C::T' has a wrong offset!");
static_assert(offsetof(URunAbility_C, MoveVelocity) == 0x000138, "Member 'URunAbility_C::MoveVelocity' has a wrong offset!");
static_assert(offsetof(URunAbility_C, RotVelocity) == 0x000140, "Member 'URunAbility_C::RotVelocity' has a wrong offset!");
static_assert(offsetof(URunAbility_C, Delta_Seconds) == 0x000148, "Member 'URunAbility_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(URunAbility_C, DebugPath) == 0x00014C, "Member 'URunAbility_C::DebugPath' has a wrong offset!");
static_assert(offsetof(URunAbility_C, MoveRange) == 0x000150, "Member 'URunAbility_C::MoveRange' has a wrong offset!");
static_assert(offsetof(URunAbility_C, InitMoveRange) == 0x000154, "Member 'URunAbility_C::InitMoveRange' has a wrong offset!");
static_assert(offsetof(URunAbility_C, UsedByEnemy) == 0x000158, "Member 'URunAbility_C::UsedByEnemy' has a wrong offset!");

}

