#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minion1Knife

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Minion1Knife.Minion1Knife_C
// 0x00B0 (0x0340 - 0x0290)
class AMinion1Knife_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      KnifePreviewParticles;                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      KnifeTrail2;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      KnifeTrail1;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      KnifeTrail;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_AnanasKnife;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245C[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartPos;                                          // 0x02D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Returning;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245D[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveVelocity;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245E[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RotationSpeed;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YRot;                                              // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         EnemiesHitThisTime;                                // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void CheckIfInEnemyCell();
	void ExecuteUbergraph_Minion1Knife(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Rotate_in_Direction(const struct FVector& Direction);
	void SetVariables(bool Param_Active, const struct FVector& Param_StartPos, const struct FVector& EndPos, double Param_Timer, int32 Param_Damage);
	void Update(bool* FinishedMoving);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Minion1Knife_C">();
	}
	static class AMinion1Knife_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinion1Knife_C>();
	}
};
static_assert(alignof(AMinion1Knife_C) == 0x000008, "Wrong alignment on AMinion1Knife_C");
static_assert(sizeof(AMinion1Knife_C) == 0x000340, "Wrong size on AMinion1Knife_C");
static_assert(offsetof(AMinion1Knife_C, UberGraphFrame) == 0x000290, "Member 'AMinion1Knife_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, KnifePreviewParticles) == 0x000298, "Member 'AMinion1Knife_C::KnifePreviewParticles' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, KnifeTrail2) == 0x0002A0, "Member 'AMinion1Knife_C::KnifeTrail2' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, KnifeTrail1) == 0x0002A8, "Member 'AMinion1Knife_C::KnifeTrail1' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, KnifeTrail) == 0x0002B0, "Member 'AMinion1Knife_C::KnifeTrail' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, SM_AnanasKnife) == 0x0002B8, "Member 'AMinion1Knife_C::SM_AnanasKnife' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, DefaultSceneRoot) == 0x0002C0, "Member 'AMinion1Knife_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, Active) == 0x0002C8, "Member 'AMinion1Knife_C::Active' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, StartPos) == 0x0002D0, "Member 'AMinion1Knife_C::StartPos' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, Target) == 0x0002E8, "Member 'AMinion1Knife_C::Target' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, Timer) == 0x000300, "Member 'AMinion1Knife_C::Timer' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, Returning) == 0x000308, "Member 'AMinion1Knife_C::Returning' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, MoveVelocity) == 0x000310, "Member 'AMinion1Knife_C::MoveVelocity' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, Damage) == 0x000318, "Member 'AMinion1Knife_C::Damage' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, RotationSpeed) == 0x000320, "Member 'AMinion1Knife_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, YRot) == 0x000328, "Member 'AMinion1Knife_C::YRot' has a wrong offset!");
static_assert(offsetof(AMinion1Knife_C, EnemiesHitThisTime) == 0x000330, "Member 'AMinion1Knife_C::EnemiesHitThisTime' has a wrong offset!");

}

