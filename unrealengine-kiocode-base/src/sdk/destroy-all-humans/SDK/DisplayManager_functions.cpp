#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DisplayManager

#include "Basic.hpp"

#include "DisplayManager_classes.hpp"
#include "DisplayManager_parameters.hpp"


namespace SDK
{

// Function DisplayManager.DisplayManager_C.ExecuteUbergraph_DisplayManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADisplayManager_C::ExecuteUbergraph_DisplayManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "ExecuteUbergraph_DisplayManager");

	Params::DisplayManager_C_ExecuteUbergraph_DisplayManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DisplayManager.DisplayManager_C.HideCells
// (Public, BlueprintCallable, BlueprintEvent)

void ADisplayManager_C::HideCells()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "HideCells");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DisplayManager.DisplayManager_C.Highlight Cell WP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Cell                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                Mat                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ADisplayManager_C::Highlight_Cell_WP(const struct FVector& Cell, class UMaterialInstance* Mat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "Highlight Cell WP");

	Params::DisplayManager_C_Highlight_Cell_WP Parms{};

	Parms.Cell = std::move(Cell);
	Parms.Mat = Mat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DisplayManager.DisplayManager_C.HighlightFireballCellWP
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Cell                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADisplayManager_C::HighlightFireballCellWP(const struct FVector& Cell)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "HighlightFireballCellWP");

	Params::DisplayManager_C_HighlightFireballCellWP Parms{};

	Parms.Cell = std::move(Cell);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DisplayManager.DisplayManager_C.HiglightEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_HiglightEnemy                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CellXY                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             CellPlane                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ADisplayManager_C::HiglightEnemy(bool Param_HiglightEnemy, const struct FVector& CellXY, class UStaticMeshComponent* CellPlane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "HiglightEnemy");

	Params::DisplayManager_C_HiglightEnemy Parms{};

	Parms.Param_HiglightEnemy = Param_HiglightEnemy;
	Parms.CellXY = std::move(CellXY);
	Parms.CellPlane = CellPlane;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DisplayManager.DisplayManager_C.InitializeArray
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ADisplayManager_C::InitializeArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "InitializeArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DisplayManager.DisplayManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ADisplayManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DisplayManager.DisplayManager_C.ShowCellArea
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Center                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithVision                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HighlightEnemies                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreNotWalkable                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADisplayManager_C::ShowCellArea(const struct FVector& Center, int32 Radius, bool WithVision, bool HighlightEnemies, class UMaterialInstance* Material, bool IgnoreNotWalkable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "ShowCellArea");

	Params::DisplayManager_C_ShowCellArea Parms{};

	Parms.Center = std::move(Center);
	Parms.Radius = Radius;
	Parms.WithVision = WithVision;
	Parms.HighlightEnemies = HighlightEnemies;
	Parms.Material = Material;
	Parms.IgnoreNotWalkable = IgnoreNotWalkable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DisplayManager.DisplayManager_C.ShowCells
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Param_ShowCells                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UMaterialInstance*                Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HiglightEnemy                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADisplayManager_C::ShowCells(TArray<struct FVector>& Param_ShowCells, class UMaterialInstance* Material, bool HiglightEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "ShowCells");

	Params::DisplayManager_C_ShowCells Parms{};

	Parms.Param_ShowCells = std::move(Param_ShowCells);
	Parms.Material = Material;
	Parms.HiglightEnemy = HiglightEnemy;

	UObject::ProcessEvent(Func, &Parms);

	Param_ShowCells = std::move(Parms.Param_ShowCells);
}


// Function DisplayManager.DisplayManager_C.UnHighlightCells
// (Public, BlueprintCallable, BlueprintEvent)

void ADisplayManager_C::UnHighlightCells()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayManager_C", "UnHighlightCells");

	UObject::ProcessEvent(Func, nullptr);
}

}

