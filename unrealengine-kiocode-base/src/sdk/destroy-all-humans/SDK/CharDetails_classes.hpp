#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharDetails

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PlayerStates_structs.hpp"
#include "UMG_classes.hpp"
#include "AbilitySlots_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CharDetails.CharDetails_C
// 0x00E0 (0x0360 - 0x0280)
class UCharDetails_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Ab3Hide;                                           // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Ab2Hide;                                           // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Ab1Hide;                                           // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Ab1_Button;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ab1Image;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Ab2_Button;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ab2Image;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                AttackButton;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 AttackImage;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 AttackType;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CD1;                                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CD2;                                               // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CD3;                                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           HealthBar;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                MoveButton;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MoveImage;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               MovementBar;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Passive;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 CharName;                                          // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CharID;                                            // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2615[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovementPoint_C*                       MovementPointReference;                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMovementPoint_C*                       MovementPointForAnim;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         HighlightedButton;                                 // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2616[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                TooltipTimers;                                     // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AbilityButtonClicked(EAbilitySlots Ability, bool* Selected);
	void BndEvt__CharDetails_Ab1_Button_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_Ab1_Button_K2Node_ComponentBoundEvent_11_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_Ab1_Button_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__CharDetails_Ab2_Button_K2Node_ComponentBoundEvent_12_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_Ab2_Button_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_Ab2_Button_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__CharDetails_AttackButton_K2Node_ComponentBoundEvent_10_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_AttackButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__CharDetails_AttackButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_MoveButton_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__CharDetails_MoveButton_K2Node_ComponentBoundEvent_8_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_MoveButton_K2Node_ComponentBoundEvent_9_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CharDetails_Passive_K2Node_ComponentBoundEvent_6_OnButtonHoverEvent__DelegateSignature();
	void ChangeAbility(EAbilitySlots Ability);
	void ChangeIcon(class UButton* Ability, class UTexture* Param_Icon);
	void CheckHovers();
	void Clear_Ability(class APlayerControllerBP_C* Self2, class AMyCharacter_C** SelectedCharacter);
	void ComputeButtonSize(class UButton* butt, EAbilitySlots Ability);
	void Construct();
	void CreateMovementPoints(int32 NewParam);
	void ExecuteUbergraph_CharDetails(int32 EntryPoint);
	void HideAllSelectedAbilities();
	void IfOnAValidState(class APlayerControllerBP_C* Self2, bool* Valid);
	void InpActEvt_Action_Ability1_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Ability2_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Ability3_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Move_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void ResetAbility();
	void SetAbilityVisibility(bool Condition, class UWidget* SelectedAbilityObject);
	void SetSelected(bool Condition, class UWidget* SelectedAbilityObject);
	void StateChange(class APlayerControllerBP_C** PC);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ToggleAbilityVisibility(bool Visibile, EAbilitySlots Whichability);
	void UpdateCharacter(int32 CharIndex, class UTexture* Image);
	void UpdateCooldown(EAbilitySlots Ability, int32 Value);
	void UpdateMovementPoints(int32 CurrentMovementPoints);
	void UpdateSkillButton(EAbilitySlots Ability, class UTexture* Param_Icon, const class FString& Tooltip);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharDetails_C">();
	}
	static class UCharDetails_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharDetails_C>();
	}
};
static_assert(alignof(UCharDetails_C) == 0x000008, "Wrong alignment on UCharDetails_C");
static_assert(sizeof(UCharDetails_C) == 0x000360, "Wrong size on UCharDetails_C");
static_assert(offsetof(UCharDetails_C, UberGraphFrame) == 0x000280, "Member 'UCharDetails_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab3Hide) == 0x000288, "Member 'UCharDetails_C::Ab3Hide' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab2Hide) == 0x000290, "Member 'UCharDetails_C::Ab2Hide' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab1Hide) == 0x000298, "Member 'UCharDetails_C::Ab1Hide' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab1_Button) == 0x0002A0, "Member 'UCharDetails_C::Ab1_Button' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab1Image) == 0x0002A8, "Member 'UCharDetails_C::Ab1Image' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab2_Button) == 0x0002B0, "Member 'UCharDetails_C::Ab2_Button' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Ab2Image) == 0x0002B8, "Member 'UCharDetails_C::Ab2Image' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, AttackButton) == 0x0002C0, "Member 'UCharDetails_C::AttackButton' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, AttackImage) == 0x0002C8, "Member 'UCharDetails_C::AttackImage' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, AttackType) == 0x0002D0, "Member 'UCharDetails_C::AttackType' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, CD1) == 0x0002D8, "Member 'UCharDetails_C::CD1' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, CD2) == 0x0002E0, "Member 'UCharDetails_C::CD2' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, CD3) == 0x0002E8, "Member 'UCharDetails_C::CD3' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, HealthBar) == 0x0002F0, "Member 'UCharDetails_C::HealthBar' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Icon) == 0x0002F8, "Member 'UCharDetails_C::Icon' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, MoveButton) == 0x000300, "Member 'UCharDetails_C::MoveButton' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, MoveImage) == 0x000308, "Member 'UCharDetails_C::MoveImage' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, MovementBar) == 0x000310, "Member 'UCharDetails_C::MovementBar' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, Passive) == 0x000318, "Member 'UCharDetails_C::Passive' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, CharName) == 0x000320, "Member 'UCharDetails_C::CharName' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, CharID) == 0x000330, "Member 'UCharDetails_C::CharID' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, MovementPointReference) == 0x000338, "Member 'UCharDetails_C::MovementPointReference' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, MovementPointForAnim) == 0x000340, "Member 'UCharDetails_C::MovementPointForAnim' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, HighlightedButton) == 0x000348, "Member 'UCharDetails_C::HighlightedButton' has a wrong offset!");
static_assert(offsetof(UCharDetails_C, TooltipTimers) == 0x000350, "Member 'UCharDetails_C::TooltipTimers' has a wrong offset!");

}

