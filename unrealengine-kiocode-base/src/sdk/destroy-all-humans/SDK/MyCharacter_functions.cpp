#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MyCharacter

#include "Basic.hpp"

#include "MyCharacter_classes.hpp"
#include "MyCharacter_parameters.hpp"


namespace SDK
{

// Function MyCharacter.MyCharacter_C.ContinueAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAbilitySlots                           AbilityIdx                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::ContinueAction(EAbilitySlots AbilityIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "ContinueAction");

	Params::MyCharacter_C_ContinueAction Parms{};

	Parms.AbilityIdx = AbilityIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.Die
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::Die()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "Die");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.DieAndDelete
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::DieAndDelete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "DieAndDelete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.ExecuteUbergraph_MyCharacter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::ExecuteUbergraph_MyCharacter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "ExecuteUbergraph_MyCharacter");

	Params::MyCharacter_C_ExecuteUbergraph_MyCharacter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.Get Clicked
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::Get_Clicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "Get Clicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.GetDeselected
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::GetDeselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "GetDeselected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.GetReady
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::GetReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "GetReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.GetSelected
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::GetSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "GetSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.Idle
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "Idle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.PreDisplayTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAbilitySlots                           Whichability                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::PreDisplayTarget(const struct FVector& Target, EAbilitySlots Whichability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "PreDisplayTarget");

	Params::MyCharacter_C_PreDisplayTarget Parms{};

	Parms.Target = std::move(Target);
	Parms.Whichability = Whichability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMyCharacter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.ReceiveDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::ReceiveDamage(int32 Damage, class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "ReceiveDamage");

	Params::MyCharacter_C_ReceiveDamage Parms{};

	Parms.Damage = Damage;
	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "ReceiveTick");

	Params::MyCharacter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.Remove from Grid
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::Remove_from_Grid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "Remove from Grid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.RotateTowards
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::RotateTowards(const struct FVector& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "RotateTowards");

	Params::MyCharacter_C_RotateTowards Parms{};

	Parms.A = std::move(A);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.SetAbilityArray
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::SetAbilityArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "SetAbilityArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.UpdateAbilityCooldowns
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::UpdateAbilityCooldowns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "UpdateAbilityCooldowns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.UpdateHealthBar
// (Public, BlueprintCallable, BlueprintEvent)

void AMyCharacter_C::UpdateHealthBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "UpdateHealthBar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyCharacter.MyCharacter_C.UseAbility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAbilitySlots                           AbilityIdx                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AbilityTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::UseAbility(EAbilitySlots AbilityIdx, const struct FVector& AbilityTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "UseAbility");

	Params::MyCharacter_C_UseAbility Parms{};

	Parms.AbilityIdx = AbilityIdx;
	Parms.AbilityTarget = std::move(AbilityTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyCharacter.MyCharacter_C.ValidateTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAbilitySlots                           Which_ability                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMyCharacter_C::ValidateTarget(const struct FVector& Target, EAbilitySlots Which_ability, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyCharacter_C", "ValidateTarget");

	Params::MyCharacter_C_ValidateTarget Parms{};

	Parms.Target = std::move(Target);
	Parms.Which_ability = Which_ability;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}

}

