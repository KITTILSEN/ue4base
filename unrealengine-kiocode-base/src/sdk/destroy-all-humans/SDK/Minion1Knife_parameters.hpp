#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minion1Knife

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Minion1Knife.Minion1Knife_C.CheckIfInEnemyCell
// 0x0058 (0x0058 - 0x0000)
struct Minion1Knife_C_CheckIfInEnemyCell final
{
public:
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGridManagerBP_C*                       CallFunc_GetGridManager_grid;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetEntityFromWorldPos_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         K2Node_DynamicCast_AsMy_Character;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245F[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMinion1_C*                             K2Node_DynamicCast_AsMinion_1;                     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2460[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minion1Knife_C_CheckIfInEnemyCell) == 0x000008, "Wrong alignment on Minion1Knife_C_CheckIfInEnemyCell");
static_assert(sizeof(Minion1Knife_C_CheckIfInEnemyCell) == 0x000058, "Wrong size on Minion1Knife_C_CheckIfInEnemyCell");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_GetRefMgr_RefMgr) == 0x000000, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_GetGridManager_grid) == 0x000008, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_GetGridManager_grid' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_GetEntityFromWorldPos_ReturnValue) == 0x000028, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_GetEntityFromWorldPos_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, K2Node_DynamicCast_AsMy_Character) == 0x000030, "Member 'Minion1Knife_C_CheckIfInEnemyCell::K2Node_DynamicCast_AsMy_Character' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'Minion1Knife_C_CheckIfInEnemyCell::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, K2Node_DynamicCast_AsMinion_1) == 0x000040, "Member 'Minion1Knife_C_CheckIfInEnemyCell::K2Node_DynamicCast_AsMinion_1' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'Minion1Knife_C_CheckIfInEnemyCell::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_Array_Find_ReturnValue) == 0x00004C, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_CheckIfInEnemyCell, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000050, "Member 'Minion1Knife_C_CheckIfInEnemyCell::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function Minion1Knife.Minion1Knife_C.ExecuteUbergraph_Minion1Knife
// 0x0008 (0x0008 - 0x0000)
struct Minion1Knife_C_ExecuteUbergraph_Minion1Knife final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minion1Knife_C_ExecuteUbergraph_Minion1Knife) == 0x000004, "Wrong alignment on Minion1Knife_C_ExecuteUbergraph_Minion1Knife");
static_assert(sizeof(Minion1Knife_C_ExecuteUbergraph_Minion1Knife) == 0x000008, "Wrong size on Minion1Knife_C_ExecuteUbergraph_Minion1Knife");
static_assert(offsetof(Minion1Knife_C_ExecuteUbergraph_Minion1Knife, EntryPoint) == 0x000000, "Member 'Minion1Knife_C_ExecuteUbergraph_Minion1Knife::EntryPoint' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_ExecuteUbergraph_Minion1Knife, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'Minion1Knife_C_ExecuteUbergraph_Minion1Knife::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function Minion1Knife.Minion1Knife_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Minion1Knife_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minion1Knife_C_ReceiveTick) == 0x000004, "Wrong alignment on Minion1Knife_C_ReceiveTick");
static_assert(sizeof(Minion1Knife_C_ReceiveTick) == 0x000004, "Wrong size on Minion1Knife_C_ReceiveTick");
static_assert(offsetof(Minion1Knife_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Minion1Knife_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Minion1Knife.Minion1Knife_C.Rotate in Direction
// 0x0140 (0x0140 - 0x0000)
struct Minion1Knife_C_Rotate_in_Direction final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAtan2_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0050(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minion1Knife_C_Rotate_in_Direction) == 0x000008, "Wrong alignment on Minion1Knife_C_Rotate_in_Direction");
static_assert(sizeof(Minion1Knife_C_Rotate_in_Direction) == 0x000140, "Wrong size on Minion1Knife_C_Rotate_in_Direction");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, Direction) == 0x000000, "Member 'Minion1Knife_C_Rotate_in_Direction::Direction' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_BreakVector_X) == 0x000018, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_BreakVector_Y) == 0x000020, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_BreakVector_Z) == 0x000028, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_DegAtan2_ReturnValue) == 0x000030, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000050, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Rotate_in_Direction, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000138, "Member 'Minion1Knife_C_Rotate_in_Direction::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function Minion1Knife.Minion1Knife_C.SetVariables
// 0x0048 (0x0048 - 0x0000)
struct Minion1Knife_C_SetVariables final
{
public:
	bool                                          Param_Active;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2461[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_StartPos;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPos;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Timer;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Damage;                                      // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minion1Knife_C_SetVariables) == 0x000008, "Wrong alignment on Minion1Knife_C_SetVariables");
static_assert(sizeof(Minion1Knife_C_SetVariables) == 0x000048, "Wrong size on Minion1Knife_C_SetVariables");
static_assert(offsetof(Minion1Knife_C_SetVariables, Param_Active) == 0x000000, "Member 'Minion1Knife_C_SetVariables::Param_Active' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_SetVariables, Param_StartPos) == 0x000008, "Member 'Minion1Knife_C_SetVariables::Param_StartPos' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_SetVariables, EndPos) == 0x000020, "Member 'Minion1Knife_C_SetVariables::EndPos' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_SetVariables, Param_Timer) == 0x000038, "Member 'Minion1Knife_C_SetVariables::Param_Timer' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_SetVariables, Param_Damage) == 0x000040, "Member 'Minion1Knife_C_SetVariables::Param_Damage' has a wrong offset!");

// Function Minion1Knife.Minion1Knife_C.Update
// 0x0150 (0x0150 - 0x0000)
struct Minion1Knife_C_Update final
{
public:
	bool                                          FinishedMoving;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2462[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2463[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0060(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2464[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VEase_Alpha_ImplicitCast;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Minion1Knife_C_Update) == 0x000008, "Wrong alignment on Minion1Knife_C_Update");
static_assert(sizeof(Minion1Knife_C_Update) == 0x000150, "Wrong size on Minion1Knife_C_Update");
static_assert(offsetof(Minion1Knife_C_Update, FinishedMoving) == 0x000000, "Member 'Minion1Knife_C_Update::FinishedMoving' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000001, "Member 'Minion1Knife_C_Update::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'Minion1Knife_C_Update::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000010, "Member 'Minion1Knife_C_Update::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'Minion1Knife_C_Update::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'Minion1Knife_C_Update::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_VEase_ReturnValue) == 0x000048, "Member 'Minion1Knife_C_Update::CallFunc_VEase_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000060, "Member 'Minion1Knife_C_Update::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000148, "Member 'Minion1Knife_C_Update::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Minion1Knife_C_Update, CallFunc_VEase_Alpha_ImplicitCast) == 0x00014C, "Member 'Minion1Knife_C_Update::CallFunc_VEase_Alpha_ImplicitCast' has a wrong offset!");

}

