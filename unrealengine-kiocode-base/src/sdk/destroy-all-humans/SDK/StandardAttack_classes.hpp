#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StandardAttack

#include "Basic.hpp"

#include "MyAbilityBP_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass StandardAttack.StandardAttack_C
// 0x0040 (0x0138 - 0x00F8)
class UStandardAttack_C final : public UMyAbilityBP_C
{
public:
	struct FVector                                Target;                                            // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastCell;                                          // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Range;                                             // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClearAttackRange();
	void ContinueAction();
	void DrawAttackRange();
	bool IsACharacter(const struct FVector& WorldPos);
	void OnAbilityDeselected();
	void OnAbilitySelected();
	void OnEnd();
	void PreDisplayTarget(const struct FVector& Param_Target);
	void Use(const struct FVector& AbilityTarget);
	void ValidateTarget(const struct FVector& Param_Target, bool* Valid_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"StandardAttack_C">();
	}
	static class UStandardAttack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStandardAttack_C>();
	}
};
static_assert(alignof(UStandardAttack_C) == 0x000008, "Wrong alignment on UStandardAttack_C");
static_assert(sizeof(UStandardAttack_C) == 0x000138, "Wrong size on UStandardAttack_C");
static_assert(offsetof(UStandardAttack_C, Target) == 0x0000F8, "Member 'UStandardAttack_C::Target' has a wrong offset!");
static_assert(offsetof(UStandardAttack_C, Timer) == 0x000110, "Member 'UStandardAttack_C::Timer' has a wrong offset!");
static_assert(offsetof(UStandardAttack_C, LastCell) == 0x000118, "Member 'UStandardAttack_C::LastCell' has a wrong offset!");
static_assert(offsetof(UStandardAttack_C, Range) == 0x000130, "Member 'UStandardAttack_C::Range' has a wrong offset!");
static_assert(offsetof(UStandardAttack_C, Damage) == 0x000134, "Member 'UStandardAttack_C::Damage' has a wrong offset!");

}

