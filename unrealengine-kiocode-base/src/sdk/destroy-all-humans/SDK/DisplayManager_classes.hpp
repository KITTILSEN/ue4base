#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DisplayManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DisplayManager.DisplayManager_C
// 0x0080 (0x0310 - 0x0290)
class ADisplayManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         ShownCells;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2444[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGridCellDisplayer_C*>           DisplayCells;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxDisplayCells;                                   // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisplayedCells;                                    // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 HighlightedCells;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMeshComponent*>         HighlightedEnemies;                                // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                MapSize;                                           // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGridCellDisplayer_C*>           FireballCells;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         LastUsedFireballIndex;                             // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_DisplayManager(int32 EntryPoint);
	void HideCells();
	void Highlight_Cell_WP(const struct FVector& Cell, class UMaterialInstance* Mat);
	void HighlightFireballCellWP(const struct FVector& Cell);
	void HiglightEnemy(bool Param_HiglightEnemy, const struct FVector& CellXY, class UStaticMeshComponent* CellPlane);
	void InitializeArray();
	void ReceiveBeginPlay();
	void ShowCellArea(const struct FVector& Center, int32 Radius, bool WithVision, bool HighlightEnemies, class UMaterialInstance* Material, bool IgnoreNotWalkable);
	void ShowCells(TArray<struct FVector>& Param_ShowCells, class UMaterialInstance* Material, bool HiglightEnemy);
	void UnHighlightCells();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DisplayManager_C">();
	}
	static class ADisplayManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADisplayManager_C>();
	}
};
static_assert(alignof(ADisplayManager_C) == 0x000008, "Wrong alignment on ADisplayManager_C");
static_assert(sizeof(ADisplayManager_C) == 0x000310, "Wrong size on ADisplayManager_C");
static_assert(offsetof(ADisplayManager_C, UberGraphFrame) == 0x000290, "Member 'ADisplayManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, DefaultSceneRoot) == 0x000298, "Member 'ADisplayManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, ShownCells) == 0x0002A0, "Member 'ADisplayManager_C::ShownCells' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, DisplayCells) == 0x0002A8, "Member 'ADisplayManager_C::DisplayCells' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, MaxDisplayCells) == 0x0002B8, "Member 'ADisplayManager_C::MaxDisplayCells' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, DisplayedCells) == 0x0002BC, "Member 'ADisplayManager_C::DisplayedCells' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, HighlightedCells) == 0x0002C0, "Member 'ADisplayManager_C::HighlightedCells' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, HighlightedEnemies) == 0x0002D0, "Member 'ADisplayManager_C::HighlightedEnemies' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, MapSize) == 0x0002E0, "Member 'ADisplayManager_C::MapSize' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, FireballCells) == 0x0002F8, "Member 'ADisplayManager_C::FireballCells' has a wrong offset!");
static_assert(offsetof(ADisplayManager_C, LastUsedFireballIndex) == 0x000308, "Member 'ADisplayManager_C::LastUsedFireballIndex' has a wrong offset!");

}

