#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TurnManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TurnManager.TurnManager_C
// 0x0058 (0x02E8 - 0x0290)
class ATurnManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerTurn;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2420[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeLeft;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeBetweenTurns;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangingTurn;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2421[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         StartSequence;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         EndSequence;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   LevelSequencePlayer;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BoolIsPlayingCinematic;                            // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasStartCinematic;                                 // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEndCinematic;                                   // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEndingCinematic;                                 // 0x02DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2422[0x4];                                     // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSinceSequencerFound;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActualEndEnemyTurn();
	void ActualEndPlayerTurn();
	void CanPlayerPassTurn(bool* Can_);
	void EndEnemyTurn();
	void EndPlayerTurn();
	void ExecuteUbergraph_TurnManager(int32 EntryPoint);
	void HideAllHUDs();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetLevelSequencePlayer(class ULevelSequencePlayer* Which);
	void ShowAllHUDs();
	void SwitchTurn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TurnManager_C">();
	}
	static class ATurnManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATurnManager_C>();
	}
};
static_assert(alignof(ATurnManager_C) == 0x000008, "Wrong alignment on ATurnManager_C");
static_assert(sizeof(ATurnManager_C) == 0x0002E8, "Wrong size on ATurnManager_C");
static_assert(offsetof(ATurnManager_C, UberGraphFrame) == 0x000290, "Member 'ATurnManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, DefaultSceneRoot) == 0x000298, "Member 'ATurnManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, IsPlayerTurn) == 0x0002A0, "Member 'ATurnManager_C::IsPlayerTurn' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, TimeLeft) == 0x0002A8, "Member 'ATurnManager_C::TimeLeft' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, TimeBetweenTurns) == 0x0002B0, "Member 'ATurnManager_C::TimeBetweenTurns' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, ChangingTurn) == 0x0002B8, "Member 'ATurnManager_C::ChangingTurn' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, StartSequence) == 0x0002C0, "Member 'ATurnManager_C::StartSequence' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, EndSequence) == 0x0002C8, "Member 'ATurnManager_C::EndSequence' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, LevelSequencePlayer) == 0x0002D0, "Member 'ATurnManager_C::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, BoolIsPlayingCinematic) == 0x0002D8, "Member 'ATurnManager_C::BoolIsPlayingCinematic' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, HasStartCinematic) == 0x0002D9, "Member 'ATurnManager_C::HasStartCinematic' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, HasEndCinematic) == 0x0002DA, "Member 'ATurnManager_C::HasEndCinematic' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, IsEndingCinematic) == 0x0002DB, "Member 'ATurnManager_C::IsEndingCinematic' has a wrong offset!");
static_assert(offsetof(ATurnManager_C, TimeSinceSequencerFound) == 0x0002E0, "Member 'ATurnManager_C::TimeSinceSequencerFound' has a wrong offset!");

}

