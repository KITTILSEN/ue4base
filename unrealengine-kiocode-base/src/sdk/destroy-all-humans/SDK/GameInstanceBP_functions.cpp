#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameInstanceBP

#include "Basic.hpp"

#include "GameInstanceBP_classes.hpp"
#include "GameInstanceBP_parameters.hpp"


namespace SDK
{

// Function GameInstanceBP.GameInstanceBP_C.ExecuteUbergraph_GameInstanceBP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::ExecuteUbergraph_GameInstanceBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "ExecuteUbergraph_GameInstanceBP");

	Params::GameInstanceBP_C_ExecuteUbergraph_GameInstanceBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.ReceiveInit
// (Event, Public, BlueprintEvent)

void UGameInstanceBP_C::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameInstanceBP.GameInstanceBP_C.ReceiveShutdown
// (Event, Public, BlueprintEvent)

void UGameInstanceBP_C::ReceiveShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "ReceiveShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GameInstanceBP.GameInstanceBP_C.SetLanguage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELanguageListEnum                       NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetLanguage(ELanguageListEnum NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetLanguage");

	Params::GameInstanceBP_C_SetLanguage Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetMaxReachedLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_MaxReachedLevel                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetMaxReachedLevel(int32 Param_MaxReachedLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetMaxReachedLevel");

	Params::GameInstanceBP_C_SetMaxReachedLevel Parms{};

	Parms.Param_MaxReachedLevel = Param_MaxReachedLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetMusicVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetMusicVolume(double NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetMusicVolume");

	Params::GameInstanceBP_C_SetMusicVolume Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetResolution
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FIntPoint                        Param_CurrentResolution                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetResolution(const struct FIntPoint& Param_CurrentResolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetResolution");

	Params::GameInstanceBP_C_SetResolution Parms{};

	Parms.Param_CurrentResolution = std::move(Param_CurrentResolution);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetScalability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_CurrentScalability                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetScalability(int32 Param_CurrentScalability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetScalability");

	Params::GameInstanceBP_C_SetScalability Parms{};

	Parms.Param_CurrentScalability = Param_CurrentScalability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetSfxVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetSfxVolume(double NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetSfxVolume");

	Params::GameInstanceBP_C_SetSfxVolume Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetVsync
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Vsync                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetVsync(bool Param_Vsync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetVsync");

	Params::GameInstanceBP_C_SetVsync Parms{};

	Parms.Param_Vsync = Param_Vsync;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameInstanceBP.GameInstanceBP_C.SetWindowmode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWindowMode                             Param_CurrentWindowMode                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGameInstanceBP_C::SetWindowmode(EWindowMode Param_CurrentWindowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameInstanceBP_C", "SetWindowmode");

	Params::GameInstanceBP_C_SetWindowmode Parms{};

	Parms.Param_CurrentWindowMode = Param_CurrentWindowMode;

	UObject::ProcessEvent(Func, &Parms);
}

}

