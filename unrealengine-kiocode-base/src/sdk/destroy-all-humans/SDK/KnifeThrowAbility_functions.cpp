#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KnifeThrowAbility

#include "Basic.hpp"

#include "KnifeThrowAbility_classes.hpp"
#include "KnifeThrowAbility_parameters.hpp"


namespace SDK
{

// Function KnifeThrowAbility.KnifeThrowAbility_C.ContinueAction
// (Public, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::ContinueAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "ContinueAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.ExecuteUbergraph_KnifeThrowAbility
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKnifeThrowAbility_C::ExecuteUbergraph_KnifeThrowAbility(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "ExecuteUbergraph_KnifeThrowAbility");

	Params::KnifeThrowAbility_C_ExecuteUbergraph_KnifeThrowAbility Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.FirstUse
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::FirstUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "FirstUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.LaunchKnife
// (Public, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::LaunchKnife()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "LaunchKnife");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.OnAbilityDeselected
// (Public, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::OnAbilityDeselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "OnAbilityDeselected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.OnAbilitySelected
// (Public, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::OnAbilitySelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "OnAbilitySelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.OnEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::OnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "OnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.PreDisplayTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_Target                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKnifeThrowAbility_C::PreDisplayTarget(const struct FVector& Param_Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "PreDisplayTarget");

	Params::KnifeThrowAbility_C_PreDisplayTarget Parms{};

	Parms.Param_Target = std::move(Param_Target);

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UKnifeThrowAbility_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.SecondUse
// (Public, BlueprintCallable, BlueprintEvent)

void UKnifeThrowAbility_C::SecondUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "SecondUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.Use
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          AbilityTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKnifeThrowAbility_C::Use(const struct FVector& AbilityTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "Use");

	Params::KnifeThrowAbility_C_Use Parms{};

	Parms.AbilityTarget = std::move(AbilityTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnifeThrowAbility.KnifeThrowAbility_C.ValidateTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_Target                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UKnifeThrowAbility_C::ValidateTarget(const struct FVector& Param_Target, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeThrowAbility_C", "ValidateTarget");

	Params::KnifeThrowAbility_C_ValidateTarget Parms{};

	Parms.Param_Target = std::move(Param_Target);

	UObject::ProcessEvent(Func, &Parms);

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}

}

