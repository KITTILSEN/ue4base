#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FenceMaster_Simple

#include "Basic.hpp"

#include "FFencePiece_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FenceMaster_Simple.BP_FenceMaster_Simple_C
// 0x00E0 (0x0300 - 0x0220)
class ABP_FenceMaster_Simple_C final : public AActor
{
public:
	class UHierarchicalInstancedStaticMeshComponent* TarpComps;                                      // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* SectionComps;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* EndPostComps;                                   // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FenceEnd;                                          // 0x0238(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFFencePiece                           EndPost;                                           // 0x0248(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SectionToPostGap;                                  // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFFencePiece                           Section;                                           // 0x0270(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Forward;                                           // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FenceRot;                                          // 0x02A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Right;                                             // 0x02AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SectionExtent;                                     // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PostExtent;                                        // 0x02C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SectionCount;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SectionLength;                                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightingChannel0;                                 // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLightingChannel1;                                 // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLightingChannel2;                                 // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseYAxis;                                          // 0x02DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasEndPost;                                        // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasTarp;                                           // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DE[0x2];                                      // 0x02DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFFencePiece                           SectionTarp;                                       // 0x02E0(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void DrawDebug();
	void AddEndPosts();
	void AddSections();
	void SetLightingChannels(class UInstancedStaticMeshComponent* InISMC);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FenceMaster_Simple_C">();
	}
	static class ABP_FenceMaster_Simple_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FenceMaster_Simple_C>();
	}
};
static_assert(alignof(ABP_FenceMaster_Simple_C) == 0x000008, "Wrong alignment on ABP_FenceMaster_Simple_C");
static_assert(sizeof(ABP_FenceMaster_Simple_C) == 0x000300, "Wrong size on ABP_FenceMaster_Simple_C");
static_assert(offsetof(ABP_FenceMaster_Simple_C, TarpComps) == 0x000220, "Member 'ABP_FenceMaster_Simple_C::TarpComps' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, SectionComps) == 0x000228, "Member 'ABP_FenceMaster_Simple_C::SectionComps' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, EndPostComps) == 0x000230, "Member 'ABP_FenceMaster_Simple_C::EndPostComps' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, FenceEnd) == 0x000238, "Member 'ABP_FenceMaster_Simple_C::FenceEnd' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, EndPost) == 0x000248, "Member 'ABP_FenceMaster_Simple_C::EndPost' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, SectionToPostGap) == 0x000268, "Member 'ABP_FenceMaster_Simple_C::SectionToPostGap' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, Section) == 0x000270, "Member 'ABP_FenceMaster_Simple_C::Section' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, Length) == 0x000290, "Member 'ABP_FenceMaster_Simple_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, Forward) == 0x000294, "Member 'ABP_FenceMaster_Simple_C::Forward' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, FenceRot) == 0x0002A0, "Member 'ABP_FenceMaster_Simple_C::FenceRot' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, Right) == 0x0002AC, "Member 'ABP_FenceMaster_Simple_C::Right' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, SectionExtent) == 0x0002B8, "Member 'ABP_FenceMaster_Simple_C::SectionExtent' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, PostExtent) == 0x0002C4, "Member 'ABP_FenceMaster_Simple_C::PostExtent' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, SectionCount) == 0x0002D0, "Member 'ABP_FenceMaster_Simple_C::SectionCount' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, SectionLength) == 0x0002D4, "Member 'ABP_FenceMaster_Simple_C::SectionLength' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, bLightingChannel0) == 0x0002D8, "Member 'ABP_FenceMaster_Simple_C::bLightingChannel0' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, bLightingChannel1) == 0x0002D9, "Member 'ABP_FenceMaster_Simple_C::bLightingChannel1' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, bLightingChannel2) == 0x0002DA, "Member 'ABP_FenceMaster_Simple_C::bLightingChannel2' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, UseYAxis) == 0x0002DB, "Member 'ABP_FenceMaster_Simple_C::UseYAxis' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, HasEndPost) == 0x0002DC, "Member 'ABP_FenceMaster_Simple_C::HasEndPost' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, HasTarp) == 0x0002DD, "Member 'ABP_FenceMaster_Simple_C::HasTarp' has a wrong offset!");
static_assert(offsetof(ABP_FenceMaster_Simple_C, SectionTarp) == 0x0002E0, "Member 'ABP_FenceMaster_Simple_C::SectionTarp' has a wrong offset!");

}

