#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DistanceMatching

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DistanceMatching.DistanceMatchingComponent
// 0x0120 (0x01D0 - 0x00B0)
class UDistanceMatchingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x50];                                      // 0x00B0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 World;                                             // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             Character;                                         // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0110(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterMovementComponent*            MovementComponent;                                 // 0x0118(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x7C];                                     // 0x0120(0x007C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSimulationTime;                                 // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApexSimulationFrequency;                           // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingSimulationFrequency;                        // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPivotAngle;                                     // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x01AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StopLocationTraceHalfHeight;                       // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugSphereRadius;                                 // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDrawTime;                                     // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDrawTime;                                     // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FPredictResult GetApexMarker() const;
	struct FPredictResult GetLandingMarker() const;
	struct FPredictResult GetPivotMarker() const;
	struct FPredictResult GetStartMarker() const;
	struct FPredictResult GetStopMarker() const;
	struct FPredictResult GetTakeOffMarker() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DistanceMatchingComponent">();
	}
	static class UDistanceMatchingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDistanceMatchingComponent>();
	}
};
static_assert(alignof(UDistanceMatchingComponent) == 0x000008, "Wrong alignment on UDistanceMatchingComponent");
static_assert(sizeof(UDistanceMatchingComponent) == 0x0001D0, "Wrong size on UDistanceMatchingComponent");
static_assert(offsetof(UDistanceMatchingComponent, World) == 0x000100, "Member 'UDistanceMatchingComponent::World' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, Character) == 0x000108, "Member 'UDistanceMatchingComponent::Character' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, CapsuleComponent) == 0x000110, "Member 'UDistanceMatchingComponent::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, MovementComponent) == 0x000118, "Member 'UDistanceMatchingComponent::MovementComponent' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, MaxSimulationTime) == 0x00019C, "Member 'UDistanceMatchingComponent::MaxSimulationTime' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, ApexSimulationFrequency) == 0x0001A0, "Member 'UDistanceMatchingComponent::ApexSimulationFrequency' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, LandingSimulationFrequency) == 0x0001A4, "Member 'UDistanceMatchingComponent::LandingSimulationFrequency' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, MinPivotAngle) == 0x0001A8, "Member 'UDistanceMatchingComponent::MinPivotAngle' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, TraceChannel) == 0x0001AC, "Member 'UDistanceMatchingComponent::TraceChannel' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, ActorsToIgnore) == 0x0001B0, "Member 'UDistanceMatchingComponent::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, StopLocationTraceHalfHeight) == 0x0001C0, "Member 'UDistanceMatchingComponent::StopLocationTraceHalfHeight' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, DebugSphereRadius) == 0x0001C4, "Member 'UDistanceMatchingComponent::DebugSphereRadius' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, DebugDrawTime) == 0x0001C8, "Member 'UDistanceMatchingComponent::DebugDrawTime' has a wrong offset!");
static_assert(offsetof(UDistanceMatchingComponent, TraceDrawTime) == 0x0001CC, "Member 'UDistanceMatchingComponent::TraceDrawTime' has a wrong offset!");

}

