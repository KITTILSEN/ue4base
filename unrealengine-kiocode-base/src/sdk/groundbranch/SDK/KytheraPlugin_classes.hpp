#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KytheraPlugin

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "KytheraPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KytheraPlugin.KytNavCost
// 0x0060 (0x0110 - 0x00B0)
class UKytNavCost final : public UActorComponent
{
public:
	class FString                                 AreaLabel;                                         // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytNavMeshAgentGroup*                  AgentTypesData;                                    // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHashData                              SerializationData;                                 // 0x00C8(0x0020)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   CurrentBoundingBox;                                // 0x00F0(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavCost">();
	}
	static class UKytNavCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavCost>();
	}
};
static_assert(alignof(UKytNavCost) == 0x000008, "Wrong alignment on UKytNavCost");
static_assert(sizeof(UKytNavCost) == 0x000110, "Wrong size on UKytNavCost");
static_assert(offsetof(UKytNavCost, AreaLabel) == 0x0000B0, "Member 'UKytNavCost::AreaLabel' has a wrong offset!");
static_assert(offsetof(UKytNavCost, AgentTypesData) == 0x0000C0, "Member 'UKytNavCost::AgentTypesData' has a wrong offset!");
static_assert(offsetof(UKytNavCost, SerializationData) == 0x0000C8, "Member 'UKytNavCost::SerializationData' has a wrong offset!");
static_assert(offsetof(UKytNavCost, CurrentBoundingBox) == 0x0000F0, "Member 'UKytNavCost::CurrentBoundingBox' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytBase
// 0x0000 (0x0050 - 0x0050)
class UEnvQueryGenerator_KytBase : public UEnvQueryGenerator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytBase">();
	}
	static class UEnvQueryGenerator_KytBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytBase>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytBase) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytBase");
static_assert(sizeof(UEnvQueryGenerator_KytBase) == 0x000050, "Wrong size on UEnvQueryGenerator_KytBase");

// Class KytheraPlugin.KytCSNComponent
// 0x0010 (0x00C0 - 0x00B0)
class UKytCSNComponent final : public UActorComponent
{
public:
	class UKytCSNNetworkData*                     CSNNetworkData;                                    // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDefaultDensities;                            // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DefaultVehicleDensityPercentage;                   // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DefaultPedestrianDensityPercentage;                // 0x00BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPedestrianSpawnDensityMultiplier(float Multiplier);
	void SetVehicleSpawnDensityMultiplier(float Multiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCSNComponent">();
	}
	static class UKytCSNComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCSNComponent>();
	}
};
static_assert(alignof(UKytCSNComponent) == 0x000008, "Wrong alignment on UKytCSNComponent");
static_assert(sizeof(UKytCSNComponent) == 0x0000C0, "Wrong size on UKytCSNComponent");
static_assert(offsetof(UKytCSNComponent, CSNNetworkData) == 0x0000B0, "Member 'UKytCSNComponent::CSNNetworkData' has a wrong offset!");
static_assert(offsetof(UKytCSNComponent, bForceDefaultDensities) == 0x0000B8, "Member 'UKytCSNComponent::bForceDefaultDensities' has a wrong offset!");
static_assert(offsetof(UKytCSNComponent, DefaultVehicleDensityPercentage) == 0x0000B9, "Member 'UKytCSNComponent::DefaultVehicleDensityPercentage' has a wrong offset!");
static_assert(offsetof(UKytCSNComponent, DefaultPedestrianDensityPercentage) == 0x0000BA, "Member 'UKytCSNComponent::DefaultPedestrianDensityPercentage' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytCoverRail
// 0x00E0 (0x0130 - 0x0050)
class UEnvQueryGenerator_KytCoverRail final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              Radius;                                            // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              Density;                                           // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     CoverTypes;                                        // 0x00C0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           Origin;                                            // 0x0110(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeClaimed;                                   // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x17];                                     // 0x0119(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytCoverRail">();
	}
	static class UEnvQueryGenerator_KytCoverRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytCoverRail>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytCoverRail) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytCoverRail");
static_assert(sizeof(UEnvQueryGenerator_KytCoverRail) == 0x000130, "Wrong size on UEnvQueryGenerator_KytCoverRail");
static_assert(offsetof(UEnvQueryGenerator_KytCoverRail, Radius) == 0x000050, "Member 'UEnvQueryGenerator_KytCoverRail::Radius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytCoverRail, Density) == 0x000088, "Member 'UEnvQueryGenerator_KytCoverRail::Density' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytCoverRail, CoverTypes) == 0x0000C0, "Member 'UEnvQueryGenerator_KytCoverRail::CoverTypes' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytCoverRail, Origin) == 0x000110, "Member 'UEnvQueryGenerator_KytCoverRail::Origin' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytCoverRail, bIncludeClaimed) == 0x000118, "Member 'UEnvQueryGenerator_KytCoverRail::bIncludeClaimed' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytGridPoint
// 0x0078 (0x00C8 - 0x0050)
class UEnvQueryGenerator_KytGridPoint final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              GridSize;                                          // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              SpaceBetween;                                      // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           GenerateAround;                                    // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytGridPoint">();
	}
	static class UEnvQueryGenerator_KytGridPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytGridPoint>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytGridPoint) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytGridPoint");
static_assert(sizeof(UEnvQueryGenerator_KytGridPoint) == 0x0000C8, "Wrong size on UEnvQueryGenerator_KytGridPoint");
static_assert(offsetof(UEnvQueryGenerator_KytGridPoint, GridSize) == 0x000050, "Member 'UEnvQueryGenerator_KytGridPoint::GridSize' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytGridPoint, SpaceBetween) == 0x000088, "Member 'UEnvQueryGenerator_KytGridPoint::SpaceBetween' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytGridPoint, GenerateAround) == 0x0000C0, "Member 'UEnvQueryGenerator_KytGridPoint::GenerateAround' has a wrong offset!");

// Class KytheraPlugin.KytBTWaitForSignalTask
// 0x0018 (0x00B0 - 0x0098)
class UKytBTWaitForSignalTask final : public UBTTask_BlackboardBase
{
public:
	class FString                                 SignalName;                                        // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTWaitForSignalTask">();
	}
	static class UKytBTWaitForSignalTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTWaitForSignalTask>();
	}
};
static_assert(alignof(UKytBTWaitForSignalTask) == 0x000008, "Wrong alignment on UKytBTWaitForSignalTask");
static_assert(sizeof(UKytBTWaitForSignalTask) == 0x0000B0, "Wrong size on UKytBTWaitForSignalTask");
static_assert(offsetof(UKytBTWaitForSignalTask, SignalName) == 0x000098, "Member 'UKytBTWaitForSignalTask::SignalName' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytOctreeGrid
// 0x0190 (0x01E0 - 0x0050)
class UEnvQueryGenerator_KytOctreeGrid final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              Density;                                           // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              MinRadius;                                         // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              MaxRadius;                                         // 0x00C0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderBoolValue               AvoidDynamicObstacles;                             // 0x00F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderBoolValue               OpenAreasOnly;                                     // 0x0130(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              PointRadius;                                       // 0x0168(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	ERadiusSourceEnum                             RadiusSource;                                      // 0x01A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderFloatValue              ShipRadius;                                        // 0x01A8(0x0038)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytOctreeGrid">();
	}
	static class UEnvQueryGenerator_KytOctreeGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytOctreeGrid>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytOctreeGrid) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytOctreeGrid");
static_assert(sizeof(UEnvQueryGenerator_KytOctreeGrid) == 0x0001E0, "Wrong size on UEnvQueryGenerator_KytOctreeGrid");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, Density) == 0x000050, "Member 'UEnvQueryGenerator_KytOctreeGrid::Density' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, MinRadius) == 0x000088, "Member 'UEnvQueryGenerator_KytOctreeGrid::MinRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, MaxRadius) == 0x0000C0, "Member 'UEnvQueryGenerator_KytOctreeGrid::MaxRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, AvoidDynamicObstacles) == 0x0000F8, "Member 'UEnvQueryGenerator_KytOctreeGrid::AvoidDynamicObstacles' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, OpenAreasOnly) == 0x000130, "Member 'UEnvQueryGenerator_KytOctreeGrid::OpenAreasOnly' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, PointRadius) == 0x000168, "Member 'UEnvQueryGenerator_KytOctreeGrid::PointRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, RadiusSource) == 0x0001A0, "Member 'UEnvQueryGenerator_KytOctreeGrid::RadiusSource' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGrid, ShipRadius) == 0x0001A8, "Member 'UEnvQueryGenerator_KytOctreeGrid::ShipRadius' has a wrong offset!");

// Class KytheraPlugin.KytBlackboardBase
// 0x0008 (0x0038 - 0x0030)
class UKytBlackboardBase : public UPrimaryDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBlackboardBase">();
	}
	static class UKytBlackboardBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBlackboardBase>();
	}
};
static_assert(alignof(UKytBlackboardBase) == 0x000008, "Wrong alignment on UKytBlackboardBase");
static_assert(sizeof(UKytBlackboardBase) == 0x000038, "Wrong size on UKytBlackboardBase");

// Class KytheraPlugin.KytBlackboardImportable
// 0x0000 (0x0038 - 0x0038)
class UKytBlackboardImportable : public UKytBlackboardBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBlackboardImportable">();
	}
	static class UKytBlackboardImportable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBlackboardImportable>();
	}
};
static_assert(alignof(UKytBlackboardImportable) == 0x000008, "Wrong alignment on UKytBlackboardImportable");
static_assert(sizeof(UKytBlackboardImportable) == 0x000038, "Wrong size on UKytBlackboardImportable");

// Class KytheraPlugin.KytFormation2dProfile
// 0x0030 (0x0068 - 0x0038)
class UKytFormation2dProfile final : public UKytBlackboardImportable
{
public:
	class FString                                 DesiredBehavior;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetSelector;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkSpeed;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeed;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRate;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChokepointSlotCullDistance;                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytFormation2dProfile">();
	}
	static class UKytFormation2dProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytFormation2dProfile>();
	}
};
static_assert(alignof(UKytFormation2dProfile) == 0x000008, "Wrong alignment on UKytFormation2dProfile");
static_assert(sizeof(UKytFormation2dProfile) == 0x000068, "Wrong size on UKytFormation2dProfile");
static_assert(offsetof(UKytFormation2dProfile, DesiredBehavior) == 0x000038, "Member 'UKytFormation2dProfile::DesiredBehavior' has a wrong offset!");
static_assert(offsetof(UKytFormation2dProfile, TargetSelector) == 0x000048, "Member 'UKytFormation2dProfile::TargetSelector' has a wrong offset!");
static_assert(offsetof(UKytFormation2dProfile, WalkSpeed) == 0x000058, "Member 'UKytFormation2dProfile::WalkSpeed' has a wrong offset!");
static_assert(offsetof(UKytFormation2dProfile, RunSpeed) == 0x00005C, "Member 'UKytFormation2dProfile::RunSpeed' has a wrong offset!");
static_assert(offsetof(UKytFormation2dProfile, TurnRate) == 0x000060, "Member 'UKytFormation2dProfile::TurnRate' has a wrong offset!");
static_assert(offsetof(UKytFormation2dProfile, ChokepointSlotCullDistance) == 0x000064, "Member 'UKytFormation2dProfile::ChokepointSlotCullDistance' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytOctreeGridNavigable
// 0x0210 (0x0260 - 0x0050)
class UEnvQueryGenerator_KytOctreeGridNavigable final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              Density;                                           // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              MinRadius;                                         // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              MaxRadius;                                         // 0x00C0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              PathDistanceRatio;                                 // 0x00F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              Angle;                                             // 0x0130(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FVector                                ConeDirection;                                     // 0x0168(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderBoolValue               AvoidDynamicObstacles;                             // 0x0178(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderBoolValue               OpenAreasOnly;                                     // 0x01B0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FAIDataProviderFloatValue              PointRadius;                                       // 0x01E8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	ERadiusSourceEnum                             RadiusSource;                                      // 0x0220(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderFloatValue              ShipRadius;                                        // 0x0228(0x0038)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytOctreeGridNavigable">();
	}
	static class UEnvQueryGenerator_KytOctreeGridNavigable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytOctreeGridNavigable>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytOctreeGridNavigable) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytOctreeGridNavigable");
static_assert(sizeof(UEnvQueryGenerator_KytOctreeGridNavigable) == 0x000260, "Wrong size on UEnvQueryGenerator_KytOctreeGridNavigable");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, Density) == 0x000050, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::Density' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, MinRadius) == 0x000088, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::MinRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, MaxRadius) == 0x0000C0, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::MaxRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, PathDistanceRatio) == 0x0000F8, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::PathDistanceRatio' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, Angle) == 0x000130, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::Angle' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, ConeDirection) == 0x000168, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::ConeDirection' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, AvoidDynamicObstacles) == 0x000178, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::AvoidDynamicObstacles' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, OpenAreasOnly) == 0x0001B0, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::OpenAreasOnly' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, PointRadius) == 0x0001E8, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::PointRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, RadiusSource) == 0x000220, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::RadiusSource' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeGridNavigable, ShipRadius) == 0x000228, "Member 'UEnvQueryGenerator_KytOctreeGridNavigable::ShipRadius' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytOctreeRandom
// 0x0030 (0x0080 - 0x0050)
class UEnvQueryGenerator_KytOctreeRandom final : public UEnvQueryGenerator_KytBase
{
public:
	float                                         MinRadius;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRadius;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Angle;                                             // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ConeDirection;                                     // 0x005C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AvoidDynamicObstacles;                             // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          OpenAreasOnly;                                     // 0x0069(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PointRadius;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ERadiusSourceEnum                             RadiusSource;                                      // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShipRadius;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        RequestedPoints;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytOctreeRandom">();
	}
	static class UEnvQueryGenerator_KytOctreeRandom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytOctreeRandom>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytOctreeRandom) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytOctreeRandom");
static_assert(sizeof(UEnvQueryGenerator_KytOctreeRandom) == 0x000080, "Wrong size on UEnvQueryGenerator_KytOctreeRandom");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, MinRadius) == 0x000050, "Member 'UEnvQueryGenerator_KytOctreeRandom::MinRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, MaxRadius) == 0x000054, "Member 'UEnvQueryGenerator_KytOctreeRandom::MaxRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, Angle) == 0x000058, "Member 'UEnvQueryGenerator_KytOctreeRandom::Angle' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, ConeDirection) == 0x00005C, "Member 'UEnvQueryGenerator_KytOctreeRandom::ConeDirection' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, AvoidDynamicObstacles) == 0x000068, "Member 'UEnvQueryGenerator_KytOctreeRandom::AvoidDynamicObstacles' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, OpenAreasOnly) == 0x000069, "Member 'UEnvQueryGenerator_KytOctreeRandom::OpenAreasOnly' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, PointRadius) == 0x00006C, "Member 'UEnvQueryGenerator_KytOctreeRandom::PointRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, RadiusSource) == 0x000070, "Member 'UEnvQueryGenerator_KytOctreeRandom::RadiusSource' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, ShipRadius) == 0x000074, "Member 'UEnvQueryGenerator_KytOctreeRandom::ShipRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandom, RequestedPoints) == 0x000078, "Member 'UEnvQueryGenerator_KytOctreeRandom::RequestedPoints' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytOctreeRandomNavigable
// 0x0208 (0x0258 - 0x0050)
class UEnvQueryGenerator_KytOctreeRandomNavigable final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              MinRadius;                                         // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              MaxRadius;                                         // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              PathDistanceRatio;                                 // 0x00C0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              Angle;                                             // 0x00F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ConeDirection;                                     // 0x0130(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderBoolValue               AvoidDynamicObstacles;                             // 0x0140(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               OpenAreasOnly;                                     // 0x0178(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              PointRadius;                                       // 0x01B0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              ShipRadius;                                        // 0x01E8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderIntValue                RequestedPoints;                                   // 0x0220(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytOctreeRandomNavigable">();
	}
	static class UEnvQueryGenerator_KytOctreeRandomNavigable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytOctreeRandomNavigable>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytOctreeRandomNavigable) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytOctreeRandomNavigable");
static_assert(sizeof(UEnvQueryGenerator_KytOctreeRandomNavigable) == 0x000258, "Wrong size on UEnvQueryGenerator_KytOctreeRandomNavigable");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, MinRadius) == 0x000050, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::MinRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, MaxRadius) == 0x000088, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::MaxRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, PathDistanceRatio) == 0x0000C0, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::PathDistanceRatio' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, Angle) == 0x0000F8, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::Angle' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, ConeDirection) == 0x000130, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::ConeDirection' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, AvoidDynamicObstacles) == 0x000140, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::AvoidDynamicObstacles' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, OpenAreasOnly) == 0x000178, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::OpenAreasOnly' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, PointRadius) == 0x0001B0, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::PointRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, ShipRadius) == 0x0001E8, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::ShipRadius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytOctreeRandomNavigable, RequestedPoints) == 0x000220, "Member 'UEnvQueryGenerator_KytOctreeRandomNavigable::RequestedPoints' has a wrong offset!");

// Class KytheraPlugin.KytCostRanking
// 0x0010 (0x0040 - 0x0030)
class UKytCostRanking final : public UDataAsset
{
public:
	TArray<struct FAreaCostLabelData>             AreaCostRanking;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCostRanking">();
	}
	static class UKytCostRanking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCostRanking>();
	}
};
static_assert(alignof(UKytCostRanking) == 0x000008, "Wrong alignment on UKytCostRanking");
static_assert(sizeof(UKytCostRanking) == 0x000040, "Wrong size on UKytCostRanking");
static_assert(offsetof(UKytCostRanking, AreaCostRanking) == 0x000030, "Member 'UKytCostRanking::AreaCostRanking' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytRadialPoint
// 0x0120 (0x0170 - 0x0050)
class UEnvQueryGenerator_KytRadialPoint final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              Density;                                           // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              Radius;                                            // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderIntValue                Spokes;                                            // 0x00C0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderIntValue                NumberOfRings;                                     // 0x00F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           Origin;                                            // 0x0130(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               Reachable;                                         // 0x0138(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytRadialPoint">();
	}
	static class UEnvQueryGenerator_KytRadialPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytRadialPoint>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytRadialPoint) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytRadialPoint");
static_assert(sizeof(UEnvQueryGenerator_KytRadialPoint) == 0x000170, "Wrong size on UEnvQueryGenerator_KytRadialPoint");
static_assert(offsetof(UEnvQueryGenerator_KytRadialPoint, Density) == 0x000050, "Member 'UEnvQueryGenerator_KytRadialPoint::Density' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRadialPoint, Radius) == 0x000088, "Member 'UEnvQueryGenerator_KytRadialPoint::Radius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRadialPoint, Spokes) == 0x0000C0, "Member 'UEnvQueryGenerator_KytRadialPoint::Spokes' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRadialPoint, NumberOfRings) == 0x0000F8, "Member 'UEnvQueryGenerator_KytRadialPoint::NumberOfRings' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRadialPoint, Origin) == 0x000130, "Member 'UEnvQueryGenerator_KytRadialPoint::Origin' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRadialPoint, Reachable) == 0x000138, "Member 'UEnvQueryGenerator_KytRadialPoint::Reachable' has a wrong offset!");

// Class KytheraPlugin.EnvQueryGenerator_KytRandomPoint
// 0x00B0 (0x0100 - 0x0050)
class UEnvQueryGenerator_KytRandomPoint final : public UEnvQueryGenerator_KytBase
{
public:
	struct FAIDataProviderFloatValue              Radius;                                            // 0x0050(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderIntValue                NumPoints;                                         // 0x0088(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               Reachable;                                         // 0x00C0(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           Origin;                                            // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_KytRandomPoint">();
	}
	static class UEnvQueryGenerator_KytRandomPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_KytRandomPoint>();
	}
};
static_assert(alignof(UEnvQueryGenerator_KytRandomPoint) == 0x000008, "Wrong alignment on UEnvQueryGenerator_KytRandomPoint");
static_assert(sizeof(UEnvQueryGenerator_KytRandomPoint) == 0x000100, "Wrong size on UEnvQueryGenerator_KytRandomPoint");
static_assert(offsetof(UEnvQueryGenerator_KytRandomPoint, Radius) == 0x000050, "Member 'UEnvQueryGenerator_KytRandomPoint::Radius' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRandomPoint, NumPoints) == 0x000088, "Member 'UEnvQueryGenerator_KytRandomPoint::NumPoints' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRandomPoint, Reachable) == 0x0000C0, "Member 'UEnvQueryGenerator_KytRandomPoint::Reachable' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_KytRandomPoint, Origin) == 0x0000F8, "Member 'UEnvQueryGenerator_KytRandomPoint::Origin' has a wrong offset!");

// Class KytheraPlugin.KytCSNNetworkData
// 0x0010 (0x0038 - 0x0028)
class UKytCSNNetworkData final : public UObject
{
public:
	TArray<uint8>                                 Content;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCSNNetworkData">();
	}
	static class UKytCSNNetworkData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCSNNetworkData>();
	}
};
static_assert(alignof(UKytCSNNetworkData) == 0x000008, "Wrong alignment on UKytCSNNetworkData");
static_assert(sizeof(UKytCSNNetworkData) == 0x000038, "Wrong size on UKytCSNNetworkData");
static_assert(offsetof(UKytCSNNetworkData, Content) == 0x000028, "Member 'UKytCSNNetworkData::Content' has a wrong offset!");

// Class KytheraPlugin.EnvQueryTest_KytCoverIsCloseToEdge
// 0x0000 (0x01F8 - 0x01F8)
class UEnvQueryTest_KytCoverIsCloseToEdge final : public UEnvQueryTest
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytCoverIsCloseToEdge">();
	}
	static class UEnvQueryTest_KytCoverIsCloseToEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytCoverIsCloseToEdge>();
	}
};
static_assert(alignof(UEnvQueryTest_KytCoverIsCloseToEdge) == 0x000008, "Wrong alignment on UEnvQueryTest_KytCoverIsCloseToEdge");
static_assert(sizeof(UEnvQueryTest_KytCoverIsCloseToEdge) == 0x0001F8, "Wrong size on UEnvQueryTest_KytCoverIsCloseToEdge");

// Class KytheraPlugin.CSNBubble
// 0x0030 (0x0250 - 0x0220)
class ACSNBubble final : public AActor
{
public:
	class UKytCSNBubbleType*                      BubblePresets;                                     // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivePreset;                                      // 0x0228(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0238(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CSNBubble">();
	}
	static class ACSNBubble* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACSNBubble>();
	}
};
static_assert(alignof(ACSNBubble) == 0x000008, "Wrong alignment on ACSNBubble");
static_assert(sizeof(ACSNBubble) == 0x000250, "Wrong size on ACSNBubble");
static_assert(offsetof(ACSNBubble, BubblePresets) == 0x000220, "Member 'ACSNBubble::BubblePresets' has a wrong offset!");
static_assert(offsetof(ACSNBubble, ActivePreset) == 0x000228, "Member 'ACSNBubble::ActivePreset' has a wrong offset!");
static_assert(offsetof(ACSNBubble, Mesh) == 0x000238, "Member 'ACSNBubble::Mesh' has a wrong offset!");

// Class KytheraPlugin.EnvQueryTest_KytIsCoverInUse
// 0x0008 (0x0200 - 0x01F8)
class UEnvQueryTest_KytIsCoverInUse final : public UEnvQueryTest
{
public:
	EPointIsOccupied                              SearchType;                                        // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytIsCoverInUse">();
	}
	static class UEnvQueryTest_KytIsCoverInUse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytIsCoverInUse>();
	}
};
static_assert(alignof(UEnvQueryTest_KytIsCoverInUse) == 0x000008, "Wrong alignment on UEnvQueryTest_KytIsCoverInUse");
static_assert(sizeof(UEnvQueryTest_KytIsCoverInUse) == 0x000200, "Wrong size on UEnvQueryTest_KytIsCoverInUse");
static_assert(offsetof(UEnvQueryTest_KytIsCoverInUse, SearchType) == 0x0001F8, "Member 'UEnvQueryTest_KytIsCoverInUse::SearchType' has a wrong offset!");

// Class KytheraPlugin.EnvQueryTest_KytIsRailBlocked
// 0x0000 (0x01F8 - 0x01F8)
class UEnvQueryTest_KytIsRailBlocked final : public UEnvQueryTest
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytIsRailBlocked">();
	}
	static class UEnvQueryTest_KytIsRailBlocked* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytIsRailBlocked>();
	}
};
static_assert(alignof(UEnvQueryTest_KytIsRailBlocked) == 0x000008, "Wrong alignment on UEnvQueryTest_KytIsRailBlocked");
static_assert(sizeof(UEnvQueryTest_KytIsRailBlocked) == 0x0001F8, "Wrong size on UEnvQueryTest_KytIsRailBlocked");

// Class KytheraPlugin.EnvQueryTest_KytOctreePathfind
// 0x0088 (0x0280 - 0x01F8)
class UEnvQueryTest_KytOctreePathfind final : public UEnvQueryTest
{
public:
	EEnvTestPathfinding                           TestMode;                                          // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEnvQueryContext>           Context;                                           // 0x0200(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               PathFromContext;                                   // 0x0208(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               SkipUnreachable;                                   // 0x0240(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         MaxNavigationRadius;                               // 0x0278(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytOctreePathfind">();
	}
	static class UEnvQueryTest_KytOctreePathfind* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytOctreePathfind>();
	}
};
static_assert(alignof(UEnvQueryTest_KytOctreePathfind) == 0x000008, "Wrong alignment on UEnvQueryTest_KytOctreePathfind");
static_assert(sizeof(UEnvQueryTest_KytOctreePathfind) == 0x000280, "Wrong size on UEnvQueryTest_KytOctreePathfind");
static_assert(offsetof(UEnvQueryTest_KytOctreePathfind, TestMode) == 0x0001F8, "Member 'UEnvQueryTest_KytOctreePathfind::TestMode' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytOctreePathfind, Context) == 0x000200, "Member 'UEnvQueryTest_KytOctreePathfind::Context' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytOctreePathfind, PathFromContext) == 0x000208, "Member 'UEnvQueryTest_KytOctreePathfind::PathFromContext' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytOctreePathfind, SkipUnreachable) == 0x000240, "Member 'UEnvQueryTest_KytOctreePathfind::SkipUnreachable' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytOctreePathfind, MaxNavigationRadius) == 0x000278, "Member 'UEnvQueryTest_KytOctreePathfind::MaxNavigationRadius' has a wrong offset!");

// Class KytheraPlugin.EnvQueryTest_KytPathfinding
// 0x0080 (0x0278 - 0x01F8)
class UEnvQueryTest_KytPathfinding final : public UEnvQueryTest
{
public:
	EEnvTestPathfinding                           TestMode;                                          // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEnvQueryContext>           Context;                                           // 0x0200(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               PathFromContext;                                   // 0x0208(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderBoolValue               SkipUnreachable;                                   // 0x0240(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytPathfinding">();
	}
	static class UEnvQueryTest_KytPathfinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytPathfinding>();
	}
};
static_assert(alignof(UEnvQueryTest_KytPathfinding) == 0x000008, "Wrong alignment on UEnvQueryTest_KytPathfinding");
static_assert(sizeof(UEnvQueryTest_KytPathfinding) == 0x000278, "Wrong size on UEnvQueryTest_KytPathfinding");
static_assert(offsetof(UEnvQueryTest_KytPathfinding, TestMode) == 0x0001F8, "Member 'UEnvQueryTest_KytPathfinding::TestMode' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytPathfinding, Context) == 0x000200, "Member 'UEnvQueryTest_KytPathfinding::Context' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytPathfinding, PathFromContext) == 0x000208, "Member 'UEnvQueryTest_KytPathfinding::PathFromContext' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytPathfinding, SkipUnreachable) == 0x000240, "Member 'UEnvQueryTest_KytPathfinding::SkipUnreachable' has a wrong offset!");

// Class KytheraPlugin.KytCSNObstacleComponent
// 0x0030 (0x00E0 - 0x00B0)
class UKytCSNObstacleComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x28];                                      // 0x00B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCSNObstacleComponent">();
	}
	static class UKytCSNObstacleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCSNObstacleComponent>();
	}
};
static_assert(alignof(UKytCSNObstacleComponent) == 0x000008, "Wrong alignment on UKytCSNObstacleComponent");
static_assert(sizeof(UKytCSNObstacleComponent) == 0x0000E0, "Wrong size on UKytCSNObstacleComponent");
static_assert(offsetof(UKytCSNObstacleComponent, Radius) == 0x0000D8, "Member 'UKytCSNObstacleComponent::Radius' has a wrong offset!");

// Class KytheraPlugin.EnvQueryTest_KytProject
// 0x0018 (0x0210 - 0x01F8)
class UEnvQueryTest_KytProject final : public UEnvQueryTest
{
public:
	TSubclassOf<class UEnvQueryContext>           Context;                                           // 0x01F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Tolerance;                                         // 0x0200(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytProject">();
	}
	static class UEnvQueryTest_KytProject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytProject>();
	}
};
static_assert(alignof(UEnvQueryTest_KytProject) == 0x000008, "Wrong alignment on UEnvQueryTest_KytProject");
static_assert(sizeof(UEnvQueryTest_KytProject) == 0x000210, "Wrong size on UEnvQueryTest_KytProject");
static_assert(offsetof(UEnvQueryTest_KytProject, Context) == 0x0001F8, "Member 'UEnvQueryTest_KytProject::Context' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytProject, Tolerance) == 0x000200, "Member 'UEnvQueryTest_KytProject::Tolerance' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_ShipPathTo
// 0x0020 (0x00B8 - 0x0098)
class UKytBTTask_ShipPathTo final : public UBTTask_BlackboardBase
{
public:
	float                                         AbsoluteSpeed;                                     // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeed;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsoluteSpeedAtDestination;                        // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedAtDestination;                        // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFromSurface;                            // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAvoidanceStuckTime;                             // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_ShipPathTo">();
	}
	static class UKytBTTask_ShipPathTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_ShipPathTo>();
	}
};
static_assert(alignof(UKytBTTask_ShipPathTo) == 0x000008, "Wrong alignment on UKytBTTask_ShipPathTo");
static_assert(sizeof(UKytBTTask_ShipPathTo) == 0x0000B8, "Wrong size on UKytBTTask_ShipPathTo");
static_assert(offsetof(UKytBTTask_ShipPathTo, AbsoluteSpeed) == 0x000098, "Member 'UKytBTTask_ShipPathTo::AbsoluteSpeed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipPathTo, RelativeSpeed) == 0x00009C, "Member 'UKytBTTask_ShipPathTo::RelativeSpeed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipPathTo, EndDistance) == 0x0000A0, "Member 'UKytBTTask_ShipPathTo::EndDistance' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipPathTo, AbsoluteSpeedAtDestination) == 0x0000A4, "Member 'UKytBTTask_ShipPathTo::AbsoluteSpeedAtDestination' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipPathTo, RelativeSpeedAtDestination) == 0x0000A8, "Member 'UKytBTTask_ShipPathTo::RelativeSpeedAtDestination' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipPathTo, MaxDistanceFromSurface) == 0x0000AC, "Member 'UKytBTTask_ShipPathTo::MaxDistanceFromSurface' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipPathTo, MaxAvoidanceStuckTime) == 0x0000B0, "Member 'UKytBTTask_ShipPathTo::MaxAvoidanceStuckTime' has a wrong offset!");

// Class KytheraPlugin.EnvQueryTest_KytSameRail
// 0x0000 (0x01F8 - 0x01F8)
class UEnvQueryTest_KytSameRail final : public UEnvQueryTest
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytSameRail">();
	}
	static class UEnvQueryTest_KytSameRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytSameRail>();
	}
};
static_assert(alignof(UEnvQueryTest_KytSameRail) == 0x000008, "Wrong alignment on UEnvQueryTest_KytSameRail");
static_assert(sizeof(UEnvQueryTest_KytSameRail) == 0x0001F8, "Wrong size on UEnvQueryTest_KytSameRail");

// Class KytheraPlugin.EnvQueryTest_KytTags
// 0x0018 (0x0210 - 0x01F8)
class UEnvQueryTest_KytTags final : public UEnvQueryTest
{
public:
	TArray<class FName>                           TagToSearch;                                       // 0x01F8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ETagMatchType                                 TagMatchType;                                      // 0x0208(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_KytTags">();
	}
	static class UEnvQueryTest_KytTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_KytTags>();
	}
};
static_assert(alignof(UEnvQueryTest_KytTags) == 0x000008, "Wrong alignment on UEnvQueryTest_KytTags");
static_assert(sizeof(UEnvQueryTest_KytTags) == 0x000210, "Wrong size on UEnvQueryTest_KytTags");
static_assert(offsetof(UEnvQueryTest_KytTags, TagToSearch) == 0x0001F8, "Member 'UEnvQueryTest_KytTags::TagToSearch' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_KytTags, TagMatchType) == 0x000208, "Member 'UEnvQueryTest_KytTags::TagMatchType' has a wrong offset!");

// Class KytheraPlugin.KytBTFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UKytBTFunctionLibrary final : public UBTFunctionLibrary
{
public:
	static class UKytBlackboard* GetBlackboardValueAsKytBlackBoard(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTFunctionLibrary">();
	}
	static class UKytBTFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTFunctionLibrary>();
	}
};
static_assert(alignof(UKytBTFunctionLibrary) == 0x000008, "Wrong alignment on UKytBTFunctionLibrary");
static_assert(sizeof(UKytBTFunctionLibrary) == 0x000028, "Wrong size on UKytBTFunctionLibrary");

// Class KytheraPlugin.KytNavOctree
// 0x0060 (0x0280 - 0x0220)
class AKytNavOctree final : public AActor
{
public:
	float                                         CellSize;                                          // 0x0220(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinShipRadius;                                     // 0x0224(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxShipRadius;                                     // 0x0228(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OctreeCollisionChannel;                            // 0x022C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bHardBoundaries : 1;                               // 0x0230(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRegenerate : 1;                                   // 0x0230(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class AActor>>          NavSeeds;                                          // 0x0238(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UKytNavOctreeRenderingComponent*        KytNavOctreeRenderingComponent;                    // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x8];                                      // 0x0250(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_origin;                                          // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_264[0x1C];                                     // 0x0264(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void IgnoreMeshForNavigation(class UPrimitiveComponent* Mesh, bool Ignore);
	bool QueryNavigablePointInSphere(struct FVector* Result, const struct FVector& Center, float Radius, float NavigationRadius, bool OpenAreasOnly);
	void RegenerateVolume(const struct FVector& Center, const struct FVector& halfExtent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavOctree">();
	}
	static class AKytNavOctree* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavOctree>();
	}
};
static_assert(alignof(AKytNavOctree) == 0x000008, "Wrong alignment on AKytNavOctree");
static_assert(sizeof(AKytNavOctree) == 0x000280, "Wrong size on AKytNavOctree");
static_assert(offsetof(AKytNavOctree, CellSize) == 0x000220, "Member 'AKytNavOctree::CellSize' has a wrong offset!");
static_assert(offsetof(AKytNavOctree, MinShipRadius) == 0x000224, "Member 'AKytNavOctree::MinShipRadius' has a wrong offset!");
static_assert(offsetof(AKytNavOctree, MaxShipRadius) == 0x000228, "Member 'AKytNavOctree::MaxShipRadius' has a wrong offset!");
static_assert(offsetof(AKytNavOctree, OctreeCollisionChannel) == 0x00022C, "Member 'AKytNavOctree::OctreeCollisionChannel' has a wrong offset!");
static_assert(offsetof(AKytNavOctree, NavSeeds) == 0x000238, "Member 'AKytNavOctree::NavSeeds' has a wrong offset!");
static_assert(offsetof(AKytNavOctree, KytNavOctreeRenderingComponent) == 0x000248, "Member 'AKytNavOctree::KytNavOctreeRenderingComponent' has a wrong offset!");
static_assert(offsetof(AKytNavOctree, m_origin) == 0x000258, "Member 'AKytNavOctree::m_origin' has a wrong offset!");

// Class KytheraPlugin.KytAnimationSupport
// 0x0000 (0x0000 - 0x0000)
class IKytAnimationSupport final
{
public:
	bool IsAnimationSupported(const class FString& AnimationName, const class UKytBlackboard* AnimationParameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytAnimationSupport">();
	}
	static class IKytAnimationSupport* GetDefaultObj()
	{
		return GetDefaultObjImpl<IKytAnimationSupport>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IKytAnimationSupport) == 0x000001, "Wrong alignment on IKytAnimationSupport");
static_assert(sizeof(IKytAnimationSupport) == 0x000001, "Wrong size on IKytAnimationSupport");

// Class KytheraPlugin.KytBaseComponent
// 0x0008 (0x00B8 - 0x00B0)
class UKytBaseComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBaseComponent">();
	}
	static class UKytBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBaseComponent>();
	}
};
static_assert(alignof(UKytBaseComponent) == 0x000008, "Wrong alignment on UKytBaseComponent");
static_assert(sizeof(UKytBaseComponent) == 0x0000B8, "Wrong size on UKytBaseComponent");

// Class KytheraPlugin.KytBehavior
// 0x0020 (0x0048 - 0x0028)
class UKytBehavior final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBehavior">();
	}
	static class UKytBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBehavior>();
	}
};
static_assert(alignof(UKytBehavior) == 0x000008, "Wrong alignment on UKytBehavior");
static_assert(sizeof(UKytBehavior) == 0x000048, "Wrong size on UKytBehavior");

// Class KytheraPlugin.KytBTDecorator
// 0x0010 (0x0038 - 0x0028)
class UKytBTDecorator : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EKytBTEnterResult ChildNodeEnter();
	EKytBTUpdateResult ChildNodeUpdate();
	void DoCleanup(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);
	EKytBTEnterResult DoEnter(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);
	EKytBTUpdateResult DoUpdate(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTDecorator">();
	}
	static class UKytBTDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTDecorator>();
	}
};
static_assert(alignof(UKytBTDecorator) == 0x000008, "Wrong alignment on UKytBTDecorator");
static_assert(sizeof(UKytBTDecorator) == 0x000038, "Wrong size on UKytBTDecorator");

// Class KytheraPlugin.KytNavSplineActor
// 0x0020 (0x0240 - 0x0220)
class AKytNavSplineActor final : public AActor
{
public:
	class UKytNavSplineComponent*                 KytNavSplineComponent;                             // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKytheraComponent*                      KytheraComponent;                                  // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* Ship, int32 PointIndex, const class FString& PointName)> OnSplinePointPassed; // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void SplinePointPassed(class APawn* Ship, int32 PointIndex, const class FString& PointName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavSplineActor">();
	}
	static class AKytNavSplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavSplineActor>();
	}
};
static_assert(alignof(AKytNavSplineActor) == 0x000008, "Wrong alignment on AKytNavSplineActor");
static_assert(sizeof(AKytNavSplineActor) == 0x000240, "Wrong size on AKytNavSplineActor");
static_assert(offsetof(AKytNavSplineActor, KytNavSplineComponent) == 0x000220, "Member 'AKytNavSplineActor::KytNavSplineComponent' has a wrong offset!");
static_assert(offsetof(AKytNavSplineActor, KytheraComponent) == 0x000228, "Member 'AKytNavSplineActor::KytheraComponent' has a wrong offset!");
static_assert(offsetof(AKytNavSplineActor, OnSplinePointPassed) == 0x000230, "Member 'AKytNavSplineActor::OnSplinePointPassed' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_ShipTrack
// 0x0020 (0x00B8 - 0x0098)
class UKytBTTask_ShipTrack final : public UBTTask_BlackboardBase
{
public:
	float                                         MinAbsoluteSpeed;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAbsoluteSpeed;                                  // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRelativeSpeed;                                  // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRelativeSpeed;                                  // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LookAtDestination;                                 // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceFromSurface;                            // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAvoidanceStuckTime;                             // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_ShipTrack">();
	}
	static class UKytBTTask_ShipTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_ShipTrack>();
	}
};
static_assert(alignof(UKytBTTask_ShipTrack) == 0x000008, "Wrong alignment on UKytBTTask_ShipTrack");
static_assert(sizeof(UKytBTTask_ShipTrack) == 0x0000B8, "Wrong size on UKytBTTask_ShipTrack");
static_assert(offsetof(UKytBTTask_ShipTrack, MinAbsoluteSpeed) == 0x000098, "Member 'UKytBTTask_ShipTrack::MinAbsoluteSpeed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, MaxAbsoluteSpeed) == 0x00009C, "Member 'UKytBTTask_ShipTrack::MaxAbsoluteSpeed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, MinRelativeSpeed) == 0x0000A0, "Member 'UKytBTTask_ShipTrack::MinRelativeSpeed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, MaxRelativeSpeed) == 0x0000A4, "Member 'UKytBTTask_ShipTrack::MaxRelativeSpeed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, Distance) == 0x0000A8, "Member 'UKytBTTask_ShipTrack::Distance' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, LookAtDestination) == 0x0000AC, "Member 'UKytBTTask_ShipTrack::LookAtDestination' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, MaxDistanceFromSurface) == 0x0000B0, "Member 'UKytBTTask_ShipTrack::MaxDistanceFromSurface' has a wrong offset!");
static_assert(offsetof(UKytBTTask_ShipTrack, MaxAvoidanceStuckTime) == 0x0000B4, "Member 'UKytBTTask_ShipTrack::MaxAvoidanceStuckTime' has a wrong offset!");

// Class KytheraPlugin.KytBlackboard
// 0x0000 (0x0038 - 0x0038)
class UKytBlackboard : public UKytBlackboardBase
{
public:
	static class UKytBlackboard* CreateKytBlackboard();

	void ClearBlackboardValue(const class FString& Key);
	class AActor* GetBlackboardValueAsActor(const class FString& Key);
	class UKytBlackboard* GetBlackboardValueAsBlackboard(const class FString& Key);
	bool GetBlackboardValueAsBool(const class FString& Key);
	float GetBlackboardValueAsFloat(const class FString& Key);
	int32 GetBlackboardValueAsInt(const class FString& Key);
	class FString GetBlackboardValueAsString(const class FString& Key);
	struct FVector GetBlackboardValueAsVector(const class FString& Key);
	class UKytBlackboard* GetOrCreateBlackboardValueAsBlackboard(const class FString& Key);
	bool HasValue(const class FString& Key);
	void SetBlackboardValueAsBlackboard(const class FString& Key, class UKytBlackboard* Value);
	void SetBlackboardValueAsBool(const class FString& Key, bool Value);
	void SetBlackboardValueAsEntityId(const class FString& Key, class AActor* Value);
	void SetBlackboardValueAsFloat(const class FString& Key, float Value);
	void SetBlackboardValueAsInt(const class FString& Key, int32 Value);
	void SetBlackboardValueAsPosition(const class FString& Key, const struct FVector& Value);
	void SetBlackboardValueAsString(const class FString& Key, const class FString& Value);
	void SetBlackboardValueAsStringHash(const class FString& Key, const class FString& Value);
	void SetBlackboardValueAsVector(const class FString& Key, const struct FVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBlackboard">();
	}
	static class UKytBlackboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBlackboard>();
	}
};
static_assert(alignof(UKytBlackboard) == 0x000008, "Wrong alignment on UKytBlackboard");
static_assert(sizeof(UKytBlackboard) == 0x000038, "Wrong size on UKytBlackboard");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueBase
// 0x0068 (0x00D8 - 0x0070)
class UKytBTTask_UnpackKytBBValueBase : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                 KytheraBlackboardPointerKey;                       // 0x0070(0x0028)(Edit, NativeAccessSpecifierPublic)
	class FString                                 KytheraInternalBlackboardPath;                     // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultValue;                                  // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 UnrealResultBlackboardKey;                         // 0x00B0(0x0028)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueBase">();
	}
	static class UKytBTTask_UnpackKytBBValueBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueBase>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueBase) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueBase");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueBase) == 0x0000D8, "Wrong size on UKytBTTask_UnpackKytBBValueBase");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueBase, KytheraBlackboardPointerKey) == 0x000070, "Member 'UKytBTTask_UnpackKytBBValueBase::KytheraBlackboardPointerKey' has a wrong offset!");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueBase, KytheraInternalBlackboardPath) == 0x000098, "Member 'UKytBTTask_UnpackKytBBValueBase::KytheraInternalBlackboardPath' has a wrong offset!");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueBase, bUseDefaultValue) == 0x0000A8, "Member 'UKytBTTask_UnpackKytBBValueBase::bUseDefaultValue' has a wrong offset!");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueBase, UnrealResultBlackboardKey) == 0x0000B0, "Member 'UKytBTTask_UnpackKytBBValueBase::UnrealResultBlackboardKey' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueBool
// 0x0008 (0x00E0 - 0x00D8)
class UKytBTTask_UnpackKytBBValueBool final : public UKytBTTask_UnpackKytBBValueBase
{
public:
	bool                                          DefaultValue;                                      // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueBool">();
	}
	static class UKytBTTask_UnpackKytBBValueBool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueBool>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueBool) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueBool");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueBool) == 0x0000E0, "Wrong size on UKytBTTask_UnpackKytBBValueBool");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueBool, DefaultValue) == 0x0000D8, "Member 'UKytBTTask_UnpackKytBBValueBool::DefaultValue' has a wrong offset!");

// Class KytheraPlugin.KytPatrolRoute
// 0x0008 (0x0228 - 0x0220)
class AKytPatrolRoute final : public AActor
{
public:
	class UKytNavRouteComponent*                  KytNavRouteComponent;                              // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytPatrolRoute">();
	}
	static class AKytPatrolRoute* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytPatrolRoute>();
	}
};
static_assert(alignof(AKytPatrolRoute) == 0x000008, "Wrong alignment on AKytPatrolRoute");
static_assert(sizeof(AKytPatrolRoute) == 0x000228, "Wrong size on AKytPatrolRoute");
static_assert(offsetof(AKytPatrolRoute, KytNavRouteComponent) == 0x000220, "Member 'AKytPatrolRoute::KytNavRouteComponent' has a wrong offset!");

// Class KytheraPlugin.KytBlackboardKeyType_BBPointer
// 0x0000 (0x0030 - 0x0030)
class UKytBlackboardKeyType_BBPointer final : public UBlackboardKeyType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBlackboardKeyType_BBPointer">();
	}
	static class UKytBlackboardKeyType_BBPointer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBlackboardKeyType_BBPointer>();
	}
};
static_assert(alignof(UKytBlackboardKeyType_BBPointer) == 0x000008, "Wrong alignment on UKytBlackboardKeyType_BBPointer");
static_assert(sizeof(UKytBlackboardKeyType_BBPointer) == 0x000030, "Wrong size on UKytBlackboardKeyType_BBPointer");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueFVector
// 0x0010 (0x00E8 - 0x00D8)
class UKytBTTask_UnpackKytBBValueFVector final : public UKytBTTask_UnpackKytBBValueBase
{
public:
	struct FVector                                DefaultValue;                                      // 0x00D8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBBVectorType                              KytBBVectorType;                                   // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueFVector">();
	}
	static class UKytBTTask_UnpackKytBBValueFVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueFVector>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueFVector) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueFVector");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueFVector) == 0x0000E8, "Wrong size on UKytBTTask_UnpackKytBBValueFVector");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueFVector, DefaultValue) == 0x0000D8, "Member 'UKytBTTask_UnpackKytBBValueFVector::DefaultValue' has a wrong offset!");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueFVector, KytBBVectorType) == 0x0000E4, "Member 'UKytBTTask_UnpackKytBBValueFVector::KytBBVectorType' has a wrong offset!");

// Class KytheraPlugin.KytController
// 0x0060 (0x02F8 - 0x0298)
class AKytController : public AController
{
public:
	TMulticastInlineDelegate<void()>              OnAlerted;                                         // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnUnalerted;                                       // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* Target)> OnNewTarget;                                // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class UKytBlackboard*                         m_entityStateBBRef;                                // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D0[0x18];                                     // 0x02D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  m_pDeferredPawnToPossess;                          // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class AKytController* GetKytController(class AActor* ControlledActor);

	void AddTag(const class FString& Tag);
	void ClearPerceptionScaleModifiers();
	void ClearTargetOverride();
	void EraseTag(const class FString& Tag);
	void ForcePerceptionOfActor(class AActor* Actor, float Time);
	class AActor* GetCurrentTarget();
	class UKytBlackboard* GetEntityState();
	class AKytGroup* GetGroup(const class FString& Type);
	bool HasTag(const class FString& Tag);
	void NotifyPerceptionAboutActor(class AActor* Actor);
	void OverrideTarget(class AActor* Override);
	void ReplaceTag(const class FString& oldTag, const class FString& newTag);
	bool RunBehavior(const class FString& BehaviorName, class UKytBlackboard* KytBlackboard);
	void SetPerceptionScaleModifiers(float visualModifier, float audioModifier);
	void UpdateRelationship();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytController">();
	}
	static class AKytController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytController>();
	}
};
static_assert(alignof(AKytController) == 0x000008, "Wrong alignment on AKytController");
static_assert(sizeof(AKytController) == 0x0002F8, "Wrong size on AKytController");
static_assert(offsetof(AKytController, OnAlerted) == 0x000298, "Member 'AKytController::OnAlerted' has a wrong offset!");
static_assert(offsetof(AKytController, OnUnalerted) == 0x0002A8, "Member 'AKytController::OnUnalerted' has a wrong offset!");
static_assert(offsetof(AKytController, OnNewTarget) == 0x0002B8, "Member 'AKytController::OnNewTarget' has a wrong offset!");
static_assert(offsetof(AKytController, m_entityStateBBRef) == 0x0002C8, "Member 'AKytController::m_entityStateBBRef' has a wrong offset!");
static_assert(offsetof(AKytController, m_pDeferredPawnToPossess) == 0x0002E8, "Member 'AKytController::m_pDeferredPawnToPossess' has a wrong offset!");

// Class KytheraPlugin.KytShipController
// 0x0020 (0x0318 - 0x02F8)
class AKytShipController final : public AKytController
{
public:
	TMulticastInlineDelegate<void(bool Result, int32 Correlator)> ReceiveMoveCompleted;              // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelCommand();
	void DisbandFormation();
	void LeadFormation(class UKytFormation* FormationType);
	void MoveToActor(class AActor* Goal, float EndDistance, float Speed);
	void MoveToLocation(const struct FVector& Dest, float EndDistance, float Speed);
	void SplinePointPassed(class AKytNavSplineActor* SplineActor, int32 PointIndex, const class FString& PointName);
	void TrackActor(class AActor* Target, float Distance, bool FireAtTarget);
	void TurnToFace(class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytShipController">();
	}
	static class AKytShipController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytShipController>();
	}
};
static_assert(alignof(AKytShipController) == 0x000008, "Wrong alignment on AKytShipController");
static_assert(sizeof(AKytShipController) == 0x000318, "Wrong size on AKytShipController");
static_assert(offsetof(AKytShipController, ReceiveMoveCompleted) == 0x0002F8, "Member 'AKytShipController::ReceiveMoveCompleted' has a wrong offset!");

// Class KytheraPlugin.KytBTAddSignalDispatchAspect
// 0x0000 (0x0068 - 0x0068)
class UKytBTAddSignalDispatchAspect final : public UBTDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTAddSignalDispatchAspect">();
	}
	static class UKytBTAddSignalDispatchAspect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTAddSignalDispatchAspect>();
	}
};
static_assert(alignof(UKytBTAddSignalDispatchAspect) == 0x000008, "Wrong alignment on UKytBTAddSignalDispatchAspect");
static_assert(sizeof(UKytBTAddSignalDispatchAspect) == 0x000068, "Wrong size on UKytBTAddSignalDispatchAspect");

// Class KytheraPlugin.KytCompareBBValuesCondition
// 0x0030 (0x00C0 - 0x0090)
class UKytCompareBBValuesCondition final : public UBTDecorator_BlackboardBase
{
public:
	class FString                                 LHS;                                               // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBBVariableTypeEnum                        LHSType;                                           // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RHS;                                               // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBBVariableTypeEnum                        RHSType;                                           // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBBCompareFunctionEnum                     Comparison;                                        // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCompareBBValuesCondition">();
	}
	static class UKytCompareBBValuesCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCompareBBValuesCondition>();
	}
};
static_assert(alignof(UKytCompareBBValuesCondition) == 0x000008, "Wrong alignment on UKytCompareBBValuesCondition");
static_assert(sizeof(UKytCompareBBValuesCondition) == 0x0000C0, "Wrong size on UKytCompareBBValuesCondition");
static_assert(offsetof(UKytCompareBBValuesCondition, LHS) == 0x000090, "Member 'UKytCompareBBValuesCondition::LHS' has a wrong offset!");
static_assert(offsetof(UKytCompareBBValuesCondition, LHSType) == 0x0000A0, "Member 'UKytCompareBBValuesCondition::LHSType' has a wrong offset!");
static_assert(offsetof(UKytCompareBBValuesCondition, RHS) == 0x0000A8, "Member 'UKytCompareBBValuesCondition::RHS' has a wrong offset!");
static_assert(offsetof(UKytCompareBBValuesCondition, RHSType) == 0x0000B8, "Member 'UKytCompareBBValuesCondition::RHSType' has a wrong offset!");
static_assert(offsetof(UKytCompareBBValuesCondition, Comparison) == 0x0000BC, "Member 'UKytCompareBBValuesCondition::Comparison' has a wrong offset!");

// Class KytheraPlugin.KytBTDecorator_CmpSignalQueueLen
// 0x0018 (0x0080 - 0x0068)
class UKytBTDecorator_CmpSignalQueueLen final : public UBTDecorator
{
public:
	class FString                                 SignalName;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytSignalLenComparisonOperator               ComparisonOperator;                                // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RHS;                                               // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTDecorator_CmpSignalQueueLen">();
	}
	static class UKytBTDecorator_CmpSignalQueueLen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTDecorator_CmpSignalQueueLen>();
	}
};
static_assert(alignof(UKytBTDecorator_CmpSignalQueueLen) == 0x000008, "Wrong alignment on UKytBTDecorator_CmpSignalQueueLen");
static_assert(sizeof(UKytBTDecorator_CmpSignalQueueLen) == 0x000080, "Wrong size on UKytBTDecorator_CmpSignalQueueLen");
static_assert(offsetof(UKytBTDecorator_CmpSignalQueueLen, SignalName) == 0x000068, "Member 'UKytBTDecorator_CmpSignalQueueLen::SignalName' has a wrong offset!");
static_assert(offsetof(UKytBTDecorator_CmpSignalQueueLen, ComparisonOperator) == 0x000078, "Member 'UKytBTDecorator_CmpSignalQueueLen::ComparisonOperator' has a wrong offset!");
static_assert(offsetof(UKytBTDecorator_CmpSignalQueueLen, RHS) == 0x00007C, "Member 'UKytBTDecorator_CmpSignalQueueLen::RHS' has a wrong offset!");

// Class KytheraPlugin.KytBTHandleRequestSignalDecorator
// 0x0060 (0x00C8 - 0x0068)
class UKytBTHandleRequestSignalDecorator final : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                 SignalBlackboardKey;                               // 0x0068(0x0028)(Edit, NativeAccessSpecifierPublic)
	class FString                                 ResponseOnSuccess;                                 // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResponseOnFail;                                    // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResponseOnEnter;                                   // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEmptyResponses;                               // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTHandleRequestSignalDecorator">();
	}
	static class UKytBTHandleRequestSignalDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTHandleRequestSignalDecorator>();
	}
};
static_assert(alignof(UKytBTHandleRequestSignalDecorator) == 0x000008, "Wrong alignment on UKytBTHandleRequestSignalDecorator");
static_assert(sizeof(UKytBTHandleRequestSignalDecorator) == 0x0000C8, "Wrong size on UKytBTHandleRequestSignalDecorator");
static_assert(offsetof(UKytBTHandleRequestSignalDecorator, SignalBlackboardKey) == 0x000068, "Member 'UKytBTHandleRequestSignalDecorator::SignalBlackboardKey' has a wrong offset!");
static_assert(offsetof(UKytBTHandleRequestSignalDecorator, ResponseOnSuccess) == 0x000090, "Member 'UKytBTHandleRequestSignalDecorator::ResponseOnSuccess' has a wrong offset!");
static_assert(offsetof(UKytBTHandleRequestSignalDecorator, ResponseOnFail) == 0x0000A0, "Member 'UKytBTHandleRequestSignalDecorator::ResponseOnFail' has a wrong offset!");
static_assert(offsetof(UKytBTHandleRequestSignalDecorator, ResponseOnEnter) == 0x0000B0, "Member 'UKytBTHandleRequestSignalDecorator::ResponseOnEnter' has a wrong offset!");
static_assert(offsetof(UKytBTHandleRequestSignalDecorator, AllowEmptyResponses) == 0x0000C0, "Member 'UKytBTHandleRequestSignalDecorator::AllowEmptyResponses' has a wrong offset!");

// Class KytheraPlugin.KytBTNode
// 0x0000 (0x0028 - 0x0028)
class UKytBTNode : public UObject
{
public:
	void DoCleanup(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);
	EKytBTEnterResult DoEnter(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);
	EKytBTUpdateResult DoUpdate(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTNode">();
	}
	static class UKytBTNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTNode>();
	}
};
static_assert(alignof(UKytBTNode) == 0x000008, "Wrong alignment on UKytBTNode");
static_assert(sizeof(UKytBTNode) == 0x000028, "Wrong size on UKytBTNode");

// Class KytheraPlugin.KytBTConditional
// 0x0000 (0x0028 - 0x0028)
class UKytBTConditional : public UObject
{
public:
	EKytBTConditionResult CheckCondition(class AKytController* Controller, class UKytBlackboard* BehaviorBlackboard);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTConditional">();
	}
	static class UKytBTConditional* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTConditional>();
	}
};
static_assert(alignof(UKytBTConditional) == 0x000008, "Wrong alignment on UKytBTConditional");
static_assert(sizeof(UKytBTConditional) == 0x000028, "Wrong size on UKytBTConditional");

// Class KytheraPlugin.KytBTSignalQueueDecorator
// 0x0018 (0x0080 - 0x0068)
class UKytBTSignalQueueDecorator final : public UBTDecorator
{
public:
	int32                                         QueueSize;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiscardPolicyEnum                            DiscardPolicy;                                     // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SignalName;                                        // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTSignalQueueDecorator">();
	}
	static class UKytBTSignalQueueDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTSignalQueueDecorator>();
	}
};
static_assert(alignof(UKytBTSignalQueueDecorator) == 0x000008, "Wrong alignment on UKytBTSignalQueueDecorator");
static_assert(sizeof(UKytBTSignalQueueDecorator) == 0x000080, "Wrong size on UKytBTSignalQueueDecorator");
static_assert(offsetof(UKytBTSignalQueueDecorator, QueueSize) == 0x000068, "Member 'UKytBTSignalQueueDecorator::QueueSize' has a wrong offset!");
static_assert(offsetof(UKytBTSignalQueueDecorator, DiscardPolicy) == 0x00006C, "Member 'UKytBTSignalQueueDecorator::DiscardPolicy' has a wrong offset!");
static_assert(offsetof(UKytBTSignalQueueDecorator, SignalName) == 0x000070, "Member 'UKytBTSignalQueueDecorator::SignalName' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueFloat
// 0x0008 (0x00E0 - 0x00D8)
class UKytBTTask_UnpackKytBBValueFloat final : public UKytBTTask_UnpackKytBBValueBase
{
public:
	float                                         DefaultValue;                                      // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueFloat">();
	}
	static class UKytBTTask_UnpackKytBBValueFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueFloat>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueFloat) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueFloat");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueFloat) == 0x0000E0, "Wrong size on UKytBTTask_UnpackKytBBValueFloat");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueFloat, DefaultValue) == 0x0000D8, "Member 'UKytBTTask_UnpackKytBBValueFloat::DefaultValue' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueInt
// 0x0008 (0x00E0 - 0x00D8)
class UKytBTTask_UnpackKytBBValueInt final : public UKytBTTask_UnpackKytBBValueBase
{
public:
	int32                                         DefaultValue;                                      // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueInt">();
	}
	static class UKytBTTask_UnpackKytBBValueInt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueInt>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueInt) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueInt");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueInt) == 0x0000E0, "Wrong size on UKytBTTask_UnpackKytBBValueInt");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueInt, DefaultValue) == 0x0000D8, "Member 'UKytBTTask_UnpackKytBBValueInt::DefaultValue' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueFString
// 0x0010 (0x00E8 - 0x00D8)
class UKytBTTask_UnpackKytBBValueFString final : public UKytBTTask_UnpackKytBBValueBase
{
public:
	class FString                                 DefaultValue;                                      // 0x00D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueFString">();
	}
	static class UKytBTTask_UnpackKytBBValueFString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueFString>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueFString) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueFString");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueFString) == 0x0000E8, "Wrong size on UKytBTTask_UnpackKytBBValueFString");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueFString, DefaultValue) == 0x0000D8, "Member 'UKytBTTask_UnpackKytBBValueFString::DefaultValue' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_UnpackKytBBValueActor
// 0x0008 (0x00E0 - 0x00D8)
class UKytBTTask_UnpackKytBBValueActor final : public UKytBTTask_UnpackKytBBValueBase
{
public:
	class AActor*                                 DefaultValue;                                      // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_UnpackKytBBValueActor">();
	}
	static class UKytBTTask_UnpackKytBBValueActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_UnpackKytBBValueActor>();
	}
};
static_assert(alignof(UKytBTTask_UnpackKytBBValueActor) == 0x000008, "Wrong alignment on UKytBTTask_UnpackKytBBValueActor");
static_assert(sizeof(UKytBTTask_UnpackKytBBValueActor) == 0x0000E0, "Wrong size on UKytBTTask_UnpackKytBBValueActor");
static_assert(offsetof(UKytBTTask_UnpackKytBBValueActor, DefaultValue) == 0x0000D8, "Member 'UKytBTTask_UnpackKytBBValueActor::DefaultValue' has a wrong offset!");

// Class KytheraPlugin.KytCommandBlueprintProxy
// 0x0038 (0x0060 - 0x0028)
class UKytCommandBlueprintProxy final : public UObject
{
public:
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailure;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UKytCommandBlueprintProxy* CreateCancelCommandProxyObject(class UObject* WorldContextObject, class APawn* Pawn);
	static class UKytCommandBlueprintProxy* CreateFlyInFormationProxyObject(class UObject* WorldContextObject, class APawn* Pawn, class AActor* Leader);
	static class UKytCommandBlueprintProxy* CreateFlySplineProxyObject(class UObject* WorldContextObject, class APawn* Pawn, class AKytNavSplineActor* Spline, bool ClampToSpline, bool AttackHostiles, bool TeleportToStart, bool JoinNearestPoint, bool DisableAvoidance);
	static class UKytCommandBlueprintProxy* CreateHaltProxyObject(class UObject* WorldContextObject, class APawn* Pawn);
	static class UKytCommandBlueprintProxy* CreateMoveToProxyObject(class UObject* WorldContextObject, class APawn* Pawn, class AActor* TargetActor, const struct FVector& Destination);
	static class UKytCommandBlueprintProxy* CreatePathToProxyObject(class UObject* WorldContextObject, class APawn* Pawn, class AActor* TargetActor, const struct FVector& Destination);
	static class UKytCommandBlueprintProxy* CreateTrackActorProxyObject(class UObject* WorldContextObject, class APawn* Pawn, class AActor* TargetActor, float Distance, bool FireAtTarget);
	static class UKytCommandBlueprintProxy* CreateTurnToFaceProxyObject(class UObject* WorldContextObject, class APawn* Pawn, class AActor* TargetActor, const struct FRotator& Rotation, const struct FVector& position);
	static class UKytCommandBlueprintProxy* CreateWaitProxyObject(class UObject* WorldContextObject, class APawn* Pawn, float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCommandBlueprintProxy">();
	}
	static class UKytCommandBlueprintProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCommandBlueprintProxy>();
	}
};
static_assert(alignof(UKytCommandBlueprintProxy) == 0x000008, "Wrong alignment on UKytCommandBlueprintProxy");
static_assert(sizeof(UKytCommandBlueprintProxy) == 0x000060, "Wrong size on UKytCommandBlueprintProxy");
static_assert(offsetof(UKytCommandBlueprintProxy, OnSuccess) == 0x000028, "Member 'UKytCommandBlueprintProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UKytCommandBlueprintProxy, OnFailure) == 0x000038, "Member 'UKytCommandBlueprintProxy::OnFailure' has a wrong offset!");

// Class KytheraPlugin.CostBounds
// 0x0000 (0x0000 - 0x0000)
class ICostBounds final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CostBounds">();
	}
	static class ICostBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICostBounds>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ICostBounds) == 0x000001, "Wrong alignment on ICostBounds");
static_assert(sizeof(ICostBounds) == 0x000001, "Wrong size on ICostBounds");

// Class KytheraPlugin.KytBTTask_CoverEnter
// 0x0000 (0x0070 - 0x0070)
class UKytBTTask_CoverEnter final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_CoverEnter">();
	}
	static class UKytBTTask_CoverEnter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_CoverEnter>();
	}
};
static_assert(alignof(UKytBTTask_CoverEnter) == 0x000008, "Wrong alignment on UKytBTTask_CoverEnter");
static_assert(sizeof(UKytBTTask_CoverEnter) == 0x000070, "Wrong size on UKytBTTask_CoverEnter");

// Class KytheraPlugin.KytBTTask_CoverExit
// 0x0000 (0x0070 - 0x0070)
class UKytBTTask_CoverExit final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_CoverExit">();
	}
	static class UKytBTTask_CoverExit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_CoverExit>();
	}
};
static_assert(alignof(UKytBTTask_CoverExit) == 0x000008, "Wrong alignment on UKytBTTask_CoverExit");
static_assert(sizeof(UKytBTTask_CoverExit) == 0x000070, "Wrong size on UKytBTTask_CoverExit");

// Class KytheraPlugin.KytCSNBubbleType
// 0x0050 (0x0080 - 0x0030)
class UKytCSNBubbleType final : public UDataAsset
{
public:
	TMap<class FString, struct FKytCSNBubblePreset> BubblePresets;                                   // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytCSNBubbleType">();
	}
	static class UKytCSNBubbleType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytCSNBubbleType>();
	}
};
static_assert(alignof(UKytCSNBubbleType) == 0x000008, "Wrong alignment on UKytCSNBubbleType");
static_assert(sizeof(UKytCSNBubbleType) == 0x000080, "Wrong size on UKytCSNBubbleType");
static_assert(offsetof(UKytCSNBubbleType, BubblePresets) == 0x000030, "Member 'UKytCSNBubbleType::BubblePresets' has a wrong offset!");

// Class KytheraPlugin.KytDataAsset
// 0x0000 (0x0030 - 0x0030)
class UKytDataAsset final : public UPrimaryDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytDataAsset">();
	}
	static class UKytDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytDataAsset>();
	}
};
static_assert(alignof(UKytDataAsset) == 0x000008, "Wrong alignment on UKytDataAsset");
static_assert(sizeof(UKytDataAsset) == 0x000030, "Wrong size on UKytDataAsset");

// Class KytheraPlugin.KytDebugDrawActor
// 0x0000 (0x0220 - 0x0220)
class AKytDebugDrawActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytDebugDrawActor">();
	}
	static class AKytDebugDrawActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytDebugDrawActor>();
	}
};
static_assert(alignof(AKytDebugDrawActor) == 0x000008, "Wrong alignment on AKytDebugDrawActor");
static_assert(sizeof(AKytDebugDrawActor) == 0x000220, "Wrong size on AKytDebugDrawActor");

// Class KytheraPlugin.KytDebugDrawComponent
// 0x0060 (0x04B0 - 0x0450)
class UKytDebugDrawComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0x60];                                     // 0x0450(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytDebugDrawComponent">();
	}
	static class UKytDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytDebugDrawComponent>();
	}
};
static_assert(alignof(UKytDebugDrawComponent) == 0x000010, "Wrong alignment on UKytDebugDrawComponent");
static_assert(sizeof(UKytDebugDrawComponent) == 0x0004B0, "Wrong size on UKytDebugDrawComponent");

// Class KytheraPlugin.KytEnvQueryItemType_Point
// 0x0000 (0x0030 - 0x0030)
class UKytEnvQueryItemType_Point final : public UEnvQueryItemType_VectorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytEnvQueryItemType_Point">();
	}
	static class UKytEnvQueryItemType_Point* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytEnvQueryItemType_Point>();
	}
};
static_assert(alignof(UKytEnvQueryItemType_Point) == 0x000008, "Wrong alignment on UKytEnvQueryItemType_Point");
static_assert(sizeof(UKytEnvQueryItemType_Point) == 0x000030, "Wrong size on UKytEnvQueryItemType_Point");

// Class KytheraPlugin.KytBTTask_ShipStop
// 0x0000 (0x0070 - 0x0070)
class UKytBTTask_ShipStop final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_ShipStop">();
	}
	static class UKytBTTask_ShipStop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_ShipStop>();
	}
};
static_assert(alignof(UKytBTTask_ShipStop) == 0x000008, "Wrong alignment on UKytBTTask_ShipStop");
static_assert(sizeof(UKytBTTask_ShipStop) == 0x000070, "Wrong size on UKytBTTask_ShipStop");

// Class KytheraPlugin.KytFormation
// 0x0010 (0x0048 - 0x0038)
class UKytFormation final : public UKytBlackboardImportable
{
public:
	TArray<struct FVector>                        Offsets;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytFormation">();
	}
	static class UKytFormation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytFormation>();
	}
};
static_assert(alignof(UKytFormation) == 0x000008, "Wrong alignment on UKytFormation");
static_assert(sizeof(UKytFormation) == 0x000048, "Wrong size on UKytFormation");
static_assert(offsetof(UKytFormation, Offsets) == 0x000038, "Member 'UKytFormation::Offsets' has a wrong offset!");

// Class KytheraPlugin.KytFormation2d
// 0x0020 (0x0058 - 0x0038)
class UKytFormation2d final : public UKytBlackboardImportable
{
public:
	float                                         FillInThreshold;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKytFormationNode>              Offsets;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UKytFormation2dProfile*                 KytProfile;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytFormation2d">();
	}
	static class UKytFormation2d* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytFormation2d>();
	}
};
static_assert(alignof(UKytFormation2d) == 0x000008, "Wrong alignment on UKytFormation2d");
static_assert(sizeof(UKytFormation2d) == 0x000058, "Wrong size on UKytFormation2d");
static_assert(offsetof(UKytFormation2d, FillInThreshold) == 0x000038, "Member 'UKytFormation2d::FillInThreshold' has a wrong offset!");
static_assert(offsetof(UKytFormation2d, Offsets) == 0x000040, "Member 'UKytFormation2d::Offsets' has a wrong offset!");
static_assert(offsetof(UKytFormation2d, KytProfile) == 0x000050, "Member 'UKytFormation2d::KytProfile' has a wrong offset!");

// Class KytheraPlugin.KytFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UKytFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ChangeFormation(class UKytFormation* NewFormation, class APawn* Leader, bool* bSuccess);
	static void ChangeFormationByName(const class FString& FormationName, class APawn* Leader, bool* bSuccess);
	static struct FUKytPosition Conv_FVectorToKytPosition(const struct FVector& position);
	static struct FVector Conv_KytPositionToFVector(const struct FUKytPosition& KytPosition);
	static struct FUKytPosition ConvertKytPosition(class AActor* Actor, const struct FUKytPosition& KytPosition, ECoordinateSystem CoordSytem);
	static struct FUKytPosition ConvertToKytheraPos(class AActor* Actor, const struct FVector& UnrealPos, ECoordinateSystem CoordSytem);
	static void DebugForceRegenerateNavigationMesh(const struct FVector& Origin, const struct FVector& Extent);
	static void DisableAllEntityUpdates();
	static void DisableEntityUpdates(class AActor* Actor);
	static void DisableMultipleEntityUpdates(const TArray<class AActor*>& Actors);
	static void EnableBehaviourTreeUpdates(class AActor* Actor, bool bEnable);
	static void FollowFormationLeader(class APawn* Leader, class APawn* Follower, bool* bSuccess);
	static class UKytBlackboard* GetGlobalKytheraBlackboard();
	static struct FUKytPosition GetKytPosition(class AActor* Actor, ECoordinateSystem CoordSytem);
	static bool IsNavigationMeshCurrentlyRegenerating(const struct FVector& Origin, const struct FVector& Extent);
	static bool IsNavigationMeshCurrentlyRegeneratingAnywhere();
	static void LinkMovingNavigationMesh(const class AActor* LinkedActor);
	static void PauseAllEntityUpdates(bool bShouldPause);
	static void PauseEntityUpdates(class AActor* Actor, bool bShouldPause);
	static void PauseMultipleEntityUpdates(const TArray<class AActor*>& Actors, bool bShouldPause);
	static void RegenerateNavigationMesh(const struct FVector& Origin, const struct FVector& Extent);
	static void RegisterDamage(class AActor* Actor, float Damage, class AActor* Instigator);
	static void RegisterInstantShot(class AActor* Actor, const struct FVector& Start, const struct FVector& End, float Radius);
	static void RegisterProjectileShot(class AActor* Actor, const struct FVector& Start, const struct FVector& End, float Radius);
	static void ResetAllEntityUpdates();
	static void ResetEntityUpdates(class AActor* Actor);
	static void ResetMultipleEntityUpdates(const TArray<class AActor*>& Actors);
	static void SetAllEntityUpdateFrequenciesInFrames(int32 framesPerUpdate);
	static void SetAllEntityUpdateFrequenciesInTime(float secondsPerUpdate);
	static void SetEntityUpdateFrequencyInFrames(class AActor* Actor, int32 framesPerUpdate);
	static void SetEntityUpdateFrequencyInTime(class AActor* Actor, float secondsPerUpdate);
	static void SetKytheraDebugOption(const class FString& OptionName, bool Enabled);
	static void SetMaxAllowedThreat(class AActor* Target, float MaxThreat);
	static void SetMultipleEntityUpdateFrequenciesInFrames(const TArray<class AActor*>& Actors, int32 framesPerUpdate);
	static void SetMultipleEntityUpdateFrequenciesInTime(const TArray<class AActor*>& Actors, float secondsPerUpdate);
	static void UnlinkMovingNavigationMesh(const class AActor* LinkedActor);
	static void UpdateRelationship(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytFunctionLibrary">();
	}
	static class UKytFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytFunctionLibrary>();
	}
};
static_assert(alignof(UKytFunctionLibrary) == 0x000008, "Wrong alignment on UKytFunctionLibrary");
static_assert(sizeof(UKytFunctionLibrary) == 0x000028, "Wrong size on UKytFunctionLibrary");

// Class KytheraPlugin.KytBTTask_CharacterGoto
// 0x0008 (0x00A0 - 0x0098)
class UKytBTTask_CharacterGoto final : public UBTTask_BlackboardBase
{
public:
	float                                         Speed;                                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_CharacterGoto">();
	}
	static class UKytBTTask_CharacterGoto* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_CharacterGoto>();
	}
};
static_assert(alignof(UKytBTTask_CharacterGoto) == 0x000008, "Wrong alignment on UKytBTTask_CharacterGoto");
static_assert(sizeof(UKytBTTask_CharacterGoto) == 0x0000A0, "Wrong size on UKytBTTask_CharacterGoto");
static_assert(offsetof(UKytBTTask_CharacterGoto, Speed) == 0x000098, "Member 'UKytBTTask_CharacterGoto::Speed' has a wrong offset!");
static_assert(offsetof(UKytBTTask_CharacterGoto, EndDistance) == 0x00009C, "Member 'UKytBTTask_CharacterGoto::EndDistance' has a wrong offset!");

// Class KytheraPlugin.KytGroup
// 0x0020 (0x0240 - 0x0220)
class AKytGroup final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0228(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UKytBlackboard*                         GroupBB;                                           // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class AKytGroup* CreateKytGroup(class UObject* WorldContextObject, const class FString& Type_0);
	static class AKytGroup* GetNamedKytGroup(class UObject* WorldContextObject, const class FString& Name_0, const class FString& Type_0);

	void Add(class AActor* Actor);
	TArray<class AActor*> GetActorsInGroup();
	class UKytBlackboard* GetGroupBlackboard();
	void Remove(class AActor* Actor);
	void SendGroupSignal(const class FString& SignalName);

	class FString GetType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytGroup">();
	}
	static class AKytGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytGroup>();
	}
};
static_assert(alignof(AKytGroup) == 0x000008, "Wrong alignment on AKytGroup");
static_assert(sizeof(AKytGroup) == 0x000240, "Wrong size on AKytGroup");
static_assert(offsetof(AKytGroup, Type) == 0x000228, "Member 'AKytGroup::Type' has a wrong offset!");
static_assert(offsetof(AKytGroup, GroupBB) == 0x000238, "Member 'AKytGroup::GroupBB' has a wrong offset!");

// Class KytheraPlugin.KytheraComponent
// 0x0038 (0x00E8 - 0x00B0)
class UKytheraComponent : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x34];                                      // 0x00B0(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutomaticRegistration;                            // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytheraComponent">();
	}
	static class UKytheraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytheraComponent>();
	}
};
static_assert(alignof(UKytheraComponent) == 0x000008, "Wrong alignment on UKytheraComponent");
static_assert(sizeof(UKytheraComponent) == 0x0000E8, "Wrong size on UKytheraComponent");
static_assert(offsetof(UKytheraComponent, bAutomaticRegistration) == 0x0000E4, "Member 'UKytheraComponent::bAutomaticRegistration' has a wrong offset!");

// Class KytheraPlugin.KytheraComponentListenerInterface
// 0x0000 (0x0000 - 0x0000)
class IKytheraComponentListenerInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytheraComponentListenerInterface">();
	}
	static class IKytheraComponentListenerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IKytheraComponentListenerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IKytheraComponentListenerInterface) == 0x000001, "Wrong alignment on IKytheraComponentListenerInterface");
static_assert(sizeof(IKytheraComponentListenerInterface) == 0x000001, "Wrong size on IKytheraComponentListenerInterface");

// Class KytheraPlugin.KytheraManager
// 0x0130 (0x0350 - 0x0220)
class AKytheraManager final : public AActor
{
public:
	uint8                                         Pad_220[0x18];                                     // 0x0220(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableNavmeshStreamingWithLevel;                  // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytCostRanking*                        AreaCostRanking;                                   // 0x0240(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UKytFormation*>     GlobalFormations;                                  // 0x0248(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, class UKytFormation2d*>   GlobalGroundFormations;                            // 0x0298(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKytNavMeshGenerator*                   NavMeshGenerator;                                  // 0x02E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UKytNavMesh*>       NavMeshes;                                         // 0x02F0(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x10];                                     // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytheraManager">();
	}
	static class AKytheraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytheraManager>();
	}
};
static_assert(alignof(AKytheraManager) == 0x000008, "Wrong alignment on AKytheraManager");
static_assert(sizeof(AKytheraManager) == 0x000350, "Wrong size on AKytheraManager");
static_assert(offsetof(AKytheraManager, bEnableNavmeshStreamingWithLevel) == 0x000238, "Member 'AKytheraManager::bEnableNavmeshStreamingWithLevel' has a wrong offset!");
static_assert(offsetof(AKytheraManager, AreaCostRanking) == 0x000240, "Member 'AKytheraManager::AreaCostRanking' has a wrong offset!");
static_assert(offsetof(AKytheraManager, GlobalFormations) == 0x000248, "Member 'AKytheraManager::GlobalFormations' has a wrong offset!");
static_assert(offsetof(AKytheraManager, GlobalGroundFormations) == 0x000298, "Member 'AKytheraManager::GlobalGroundFormations' has a wrong offset!");
static_assert(offsetof(AKytheraManager, NavMeshGenerator) == 0x0002E8, "Member 'AKytheraManager::NavMeshGenerator' has a wrong offset!");
static_assert(offsetof(AKytheraManager, NavMeshes) == 0x0002F0, "Member 'AKytheraManager::NavMeshes' has a wrong offset!");

// Class KytheraPlugin.KytheraPawnComponent
// 0x0018 (0x0100 - 0x00E8)
class UKytheraPawnComponent final : public UKytheraComponent
{
public:
	bool                                          bPerception;                                       // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnShape                                    eShapeType;                                        // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytProfile*                            Profile;                                           // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UKytBlackboard*                         m_entityStateBBRef;                                // 0x00F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearPerceivedTargets();
	TArray<struct FPerceivedTargetInfo> GetCurrentlyPerceivedTargets();
	class UKytBlackboard* GetEntityState();
	void MarkAlive();
	void MarkDead();
	void SetPerception(bool bEnable);
	void SetProfile(class UKytProfile* NewProfile);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytheraPawnComponent">();
	}
	static class UKytheraPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytheraPawnComponent>();
	}
};
static_assert(alignof(UKytheraPawnComponent) == 0x000008, "Wrong alignment on UKytheraPawnComponent");
static_assert(sizeof(UKytheraPawnComponent) == 0x000100, "Wrong size on UKytheraPawnComponent");
static_assert(offsetof(UKytheraPawnComponent, bPerception) == 0x0000E8, "Member 'UKytheraPawnComponent::bPerception' has a wrong offset!");
static_assert(offsetof(UKytheraPawnComponent, eShapeType) == 0x0000E9, "Member 'UKytheraPawnComponent::eShapeType' has a wrong offset!");
static_assert(offsetof(UKytheraPawnComponent, Profile) == 0x0000F0, "Member 'UKytheraPawnComponent::Profile' has a wrong offset!");
static_assert(offsetof(UKytheraPawnComponent, m_entityStateBBRef) == 0x0000F8, "Member 'UKytheraPawnComponent::m_entityStateBBRef' has a wrong offset!");

// Class KytheraPlugin.KytheraSceneComponent
// 0x0000 (0x0200 - 0x0200)
class UKytheraSceneComponent : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x4];                                      // 0x01F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutomaticRegistration;                            // 0x01FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytheraSceneComponent">();
	}
	static class UKytheraSceneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytheraSceneComponent>();
	}
};
static_assert(alignof(UKytheraSceneComponent) == 0x000010, "Wrong alignment on UKytheraSceneComponent");
static_assert(sizeof(UKytheraSceneComponent) == 0x000200, "Wrong size on UKytheraSceneComponent");
static_assert(offsetof(UKytheraSceneComponent, bAutomaticRegistration) == 0x0001FC, "Member 'UKytheraSceneComponent::bAutomaticRegistration' has a wrong offset!");

// Class KytheraPlugin.KytheraSettings
// 0x0028 (0x0050 - 0x0028)
class UKytheraSettings final : public UObject
{
public:
	TArray<class FString>                         BehaviorDirectories;                               // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         BTNodeDirectories;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	ECollisionChannel                             VisionTraceChannel;                                // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowClientSideNavmesh;                           // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NavMeshAutoGenerationFrozen;                       // 0x004A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowClientSideEntities;                          // 0x004B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExperimentalInspector;                         // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytheraSettings">();
	}
	static class UKytheraSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytheraSettings>();
	}
};
static_assert(alignof(UKytheraSettings) == 0x000008, "Wrong alignment on UKytheraSettings");
static_assert(sizeof(UKytheraSettings) == 0x000050, "Wrong size on UKytheraSettings");
static_assert(offsetof(UKytheraSettings, BehaviorDirectories) == 0x000028, "Member 'UKytheraSettings::BehaviorDirectories' has a wrong offset!");
static_assert(offsetof(UKytheraSettings, BTNodeDirectories) == 0x000038, "Member 'UKytheraSettings::BTNodeDirectories' has a wrong offset!");
static_assert(offsetof(UKytheraSettings, VisionTraceChannel) == 0x000048, "Member 'UKytheraSettings::VisionTraceChannel' has a wrong offset!");
static_assert(offsetof(UKytheraSettings, bAllowClientSideNavmesh) == 0x000049, "Member 'UKytheraSettings::bAllowClientSideNavmesh' has a wrong offset!");
static_assert(offsetof(UKytheraSettings, NavMeshAutoGenerationFrozen) == 0x00004A, "Member 'UKytheraSettings::NavMeshAutoGenerationFrozen' has a wrong offset!");
static_assert(offsetof(UKytheraSettings, bAllowClientSideEntities) == 0x00004B, "Member 'UKytheraSettings::bAllowClientSideEntities' has a wrong offset!");
static_assert(offsetof(UKytheraSettings, bUseExperimentalInspector) == 0x00004C, "Member 'UKytheraSettings::bUseExperimentalInspector' has a wrong offset!");

// Class KytheraPlugin.KytMovableNavMeshComponent
// 0x0090 (0x0140 - 0x00B0)
class alignas(0x10) UKytMovableNavMeshComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x28];                                      // 0x00B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AKytNavBounds*>                  KytNavBounds;                                      // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x58];                                      // 0x00E8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytMovableNavMeshComponent">();
	}
	static class UKytMovableNavMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytMovableNavMeshComponent>();
	}
};
static_assert(alignof(UKytMovableNavMeshComponent) == 0x000010, "Wrong alignment on UKytMovableNavMeshComponent");
static_assert(sizeof(UKytMovableNavMeshComponent) == 0x000140, "Wrong size on UKytMovableNavMeshComponent");
static_assert(offsetof(UKytMovableNavMeshComponent, KytNavBounds) == 0x0000D8, "Member 'UKytMovableNavMeshComponent::KytNavBounds' has a wrong offset!");

// Class KytheraPlugin.KytNavBounds
// 0x0020 (0x0278 - 0x0258)
class AKytNavBounds final : public AVolume
{
public:
	uint8                                         bNavMesh : 1;                                      // 0x0258(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoCover : 1;                                    // 0x0258(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoContextNav : 1;                               // 0x0258(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExclusive : 1;                                    // 0x0258(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytNavMeshAgentGroup*                  AgentTypesData;                                    // 0x0260(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LinkedActor;                                       // 0x0268(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKytNavOctree*                          NavOctree;                                         // 0x0270(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GetAllAgentTypes(class FString* OutGroupName, TMap<class FString, class UKytNavMeshAgentType*>* OutAgentTypes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavBounds">();
	}
	static class AKytNavBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavBounds>();
	}
};
static_assert(alignof(AKytNavBounds) == 0x000008, "Wrong alignment on AKytNavBounds");
static_assert(sizeof(AKytNavBounds) == 0x000278, "Wrong size on AKytNavBounds");
static_assert(offsetof(AKytNavBounds, AgentTypesData) == 0x000260, "Member 'AKytNavBounds::AgentTypesData' has a wrong offset!");
static_assert(offsetof(AKytNavBounds, LinkedActor) == 0x000268, "Member 'AKytNavBounds::LinkedActor' has a wrong offset!");
static_assert(offsetof(AKytNavBounds, NavOctree) == 0x000270, "Member 'AKytNavBounds::NavOctree' has a wrong offset!");

// Class KytheraPlugin.KytNavCostBrush
// 0x0010 (0x0268 - 0x0258)
class AKytNavCostBrush final : public AVolume
{
public:
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytNavCost*                            NavCost;                                           // 0x0260(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void GetAllAgentTypes(class FString* OutGroupName, TMap<class FString, class UKytNavMeshAgentType*>* OutAgentTypes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavCostBrush">();
	}
	static class AKytNavCostBrush* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavCostBrush>();
	}
};
static_assert(alignof(AKytNavCostBrush) == 0x000008, "Wrong alignment on AKytNavCostBrush");
static_assert(sizeof(AKytNavCostBrush) == 0x000268, "Wrong size on AKytNavCostBrush");
static_assert(offsetof(AKytNavCostBrush, NavCost) == 0x000260, "Member 'AKytNavCostBrush::NavCost' has a wrong offset!");

// Class KytheraPlugin.KytNavCostStaticMesh
// 0x0018 (0x0238 - 0x0220)
class AKytNavCostStaticMesh : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytNavCost*                            NavCost;                                           // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void GetAllAgentTypes(class FString* OutGroupName, TMap<class FString, class UKytNavMeshAgentType*>* OutAgentTypes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavCostStaticMesh">();
	}
	static class AKytNavCostStaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavCostStaticMesh>();
	}
};
static_assert(alignof(AKytNavCostStaticMesh) == 0x000008, "Wrong alignment on AKytNavCostStaticMesh");
static_assert(sizeof(AKytNavCostStaticMesh) == 0x000238, "Wrong size on AKytNavCostStaticMesh");
static_assert(offsetof(AKytNavCostStaticMesh, NavCost) == 0x000228, "Member 'AKytNavCostStaticMesh::NavCost' has a wrong offset!");
static_assert(offsetof(AKytNavCostStaticMesh, Mesh) == 0x000230, "Member 'AKytNavCostStaticMesh::Mesh' has a wrong offset!");

// Class KytheraPlugin.KytNavMesh
// 0x0070 (0x0098 - 0x0028)
class UKytNavMesh final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NavMeshName;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytNavMeshAgentType*                   AgentType;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsVisible : 1;                                    // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LinkedActor;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x40];                                      // 0x0058(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavMesh">();
	}
	static class UKytNavMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavMesh>();
	}
};
static_assert(alignof(UKytNavMesh) == 0x000008, "Wrong alignment on UKytNavMesh");
static_assert(sizeof(UKytNavMesh) == 0x000098, "Wrong size on UKytNavMesh");
static_assert(offsetof(UKytNavMesh, NavMeshName) == 0x000030, "Member 'UKytNavMesh::NavMeshName' has a wrong offset!");
static_assert(offsetof(UKytNavMesh, AgentType) == 0x000040, "Member 'UKytNavMesh::AgentType' has a wrong offset!");
static_assert(offsetof(UKytNavMesh, LinkedActor) == 0x000050, "Member 'UKytNavMesh::LinkedActor' has a wrong offset!");

// Class KytheraPlugin.KytNavMeshAgentGroup
// 0x0010 (0x0040 - 0x0030)
class UKytNavMeshAgentGroup final : public UDataAsset
{
public:
	TArray<class UKytNavMeshAgentType*>           AgentTypes;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavMeshAgentGroup">();
	}
	static class UKytNavMeshAgentGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavMeshAgentGroup>();
	}
};
static_assert(alignof(UKytNavMeshAgentGroup) == 0x000008, "Wrong alignment on UKytNavMeshAgentGroup");
static_assert(sizeof(UKytNavMeshAgentGroup) == 0x000040, "Wrong size on UKytNavMeshAgentGroup");
static_assert(offsetof(UKytNavMeshAgentGroup, AgentTypes) == 0x000030, "Member 'UKytNavMeshAgentGroup::AgentTypes' has a wrong offset!");

// Class KytheraPlugin.KytAgentFeature
// 0x0000 (0x0038 - 0x0038)
class UKytAgentFeature : public UKytBlackboardBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytAgentFeature">();
	}
	static class UKytAgentFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytAgentFeature>();
	}
};
static_assert(alignof(UKytAgentFeature) == 0x000008, "Wrong alignment on UKytAgentFeature");
static_assert(sizeof(UKytAgentFeature) == 0x000038, "Wrong size on UKytAgentFeature");

// Class KytheraPlugin.KytAutoContextNavFeature
// 0x0000 (0x0038 - 0x0038)
class UKytAutoContextNavFeature : public UKytAgentFeature
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytAutoContextNavFeature">();
	}
	static class UKytAutoContextNavFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytAutoContextNavFeature>();
	}
};
static_assert(alignof(UKytAutoContextNavFeature) == 0x000008, "Wrong alignment on UKytAutoContextNavFeature");
static_assert(sizeof(UKytAutoContextNavFeature) == 0x000038, "Wrong size on UKytAutoContextNavFeature");

// Class KytheraPlugin.KytAutoCoverFeature
// 0x0018 (0x0050 - 0x0038)
class UKytAutoCoverFeature : public UKytAgentFeature
{
public:
	float                                         BinSize;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCoverHeight;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCoverDepth;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAllowedGap;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromGround;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytAutoCoverFeature">();
	}
	static class UKytAutoCoverFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytAutoCoverFeature>();
	}
};
static_assert(alignof(UKytAutoCoverFeature) == 0x000008, "Wrong alignment on UKytAutoCoverFeature");
static_assert(sizeof(UKytAutoCoverFeature) == 0x000050, "Wrong size on UKytAutoCoverFeature");
static_assert(offsetof(UKytAutoCoverFeature, BinSize) == 0x000038, "Member 'UKytAutoCoverFeature::BinSize' has a wrong offset!");
static_assert(offsetof(UKytAutoCoverFeature, MaxCoverHeight) == 0x00003C, "Member 'UKytAutoCoverFeature::MaxCoverHeight' has a wrong offset!");
static_assert(offsetof(UKytAutoCoverFeature, MaxCoverDepth) == 0x000040, "Member 'UKytAutoCoverFeature::MaxCoverDepth' has a wrong offset!");
static_assert(offsetof(UKytAutoCoverFeature, MaxAllowedGap) == 0x000044, "Member 'UKytAutoCoverFeature::MaxAllowedGap' has a wrong offset!");
static_assert(offsetof(UKytAutoCoverFeature, DistanceFromGround) == 0x000048, "Member 'UKytAutoCoverFeature::DistanceFromGround' has a wrong offset!");

// Class KytheraPlugin.KytNavMeshAgentType
// 0x0040 (0x0070 - 0x0030)
class UKytNavMeshAgentType final : public UDataAsset
{
public:
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentHeight;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentRadius;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentMaxSlope;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentMaxStepHeight;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellHeight;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             NavMeshCollisionChannel;                           // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             AutoCoverCollisionChannel;                         // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UKytAgentFeature*>               AgentFeatures;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavMeshAgentType">();
	}
	static class UKytNavMeshAgentType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavMeshAgentType>();
	}
};
static_assert(alignof(UKytNavMeshAgentType) == 0x000008, "Wrong alignment on UKytNavMeshAgentType");
static_assert(sizeof(UKytNavMeshAgentType) == 0x000070, "Wrong size on UKytNavMeshAgentType");
static_assert(offsetof(UKytNavMeshAgentType, Description) == 0x000030, "Member 'UKytNavMeshAgentType::Description' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, AgentHeight) == 0x000040, "Member 'UKytNavMeshAgentType::AgentHeight' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, AgentRadius) == 0x000044, "Member 'UKytNavMeshAgentType::AgentRadius' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, AgentMaxSlope) == 0x000048, "Member 'UKytNavMeshAgentType::AgentMaxSlope' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, AgentMaxStepHeight) == 0x00004C, "Member 'UKytNavMeshAgentType::AgentMaxStepHeight' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, CellSize) == 0x000050, "Member 'UKytNavMeshAgentType::CellSize' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, CellHeight) == 0x000054, "Member 'UKytNavMeshAgentType::CellHeight' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, NavMeshCollisionChannel) == 0x000058, "Member 'UKytNavMeshAgentType::NavMeshCollisionChannel' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, AutoCoverCollisionChannel) == 0x000059, "Member 'UKytNavMeshAgentType::AutoCoverCollisionChannel' has a wrong offset!");
static_assert(offsetof(UKytNavMeshAgentType, AgentFeatures) == 0x000060, "Member 'UKytNavMeshAgentType::AgentFeatures' has a wrong offset!");

// Class KytheraPlugin.KytNavMeshGenerator
// 0x0020 (0x0048 - 0x0028)
class UKytNavMeshGenerator final : public UObject
{
public:
	bool                                          bEnableNavmeshStreamingWithLevel;                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKytNavMeshData>                GeneratedNavigationMeshes;                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class AKytheraManager*                        KytheraManager;                                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavMeshGenerator">();
	}
	static class UKytNavMeshGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavMeshGenerator>();
	}
};
static_assert(alignof(UKytNavMeshGenerator) == 0x000008, "Wrong alignment on UKytNavMeshGenerator");
static_assert(sizeof(UKytNavMeshGenerator) == 0x000048, "Wrong size on UKytNavMeshGenerator");
static_assert(offsetof(UKytNavMeshGenerator, bEnableNavmeshStreamingWithLevel) == 0x000028, "Member 'UKytNavMeshGenerator::bEnableNavmeshStreamingWithLevel' has a wrong offset!");
static_assert(offsetof(UKytNavMeshGenerator, GeneratedNavigationMeshes) == 0x000030, "Member 'UKytNavMeshGenerator::GeneratedNavigationMeshes' has a wrong offset!");
static_assert(offsetof(UKytNavMeshGenerator, KytheraManager) == 0x000040, "Member 'UKytNavMeshGenerator::KytheraManager' has a wrong offset!");

// Class KytheraPlugin.KytNavObjectActor
// 0x0010 (0x0230 - 0x0220)
class AKytNavObjectActor final : public AActor
{
public:
	class UKytNavObjectComponent*                 KytNavObjectComponent;                             // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKytheraComponent*                      KytComponent;                                      // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavObjectActor">();
	}
	static class AKytNavObjectActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavObjectActor>();
	}
};
static_assert(alignof(AKytNavObjectActor) == 0x000008, "Wrong alignment on AKytNavObjectActor");
static_assert(sizeof(AKytNavObjectActor) == 0x000230, "Wrong size on AKytNavObjectActor");
static_assert(offsetof(AKytNavObjectActor, KytNavObjectComponent) == 0x000220, "Member 'AKytNavObjectActor::KytNavObjectComponent' has a wrong offset!");
static_assert(offsetof(AKytNavObjectActor, KytComponent) == 0x000228, "Member 'AKytNavObjectActor::KytComponent' has a wrong offset!");

// Class KytheraPlugin.KytNavObjectComponent
// 0x0020 (0x0220 - 0x0200)
class UKytNavObjectComponent final : public UKytheraSceneComponent
{
public:
	TArray<struct FKytNavMeshLink>                meshLinks;                                         // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_210[0x10];                                     // 0x0210(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MarkMeshLinksBoxDirty();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavObjectComponent">();
	}
	static class UKytNavObjectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavObjectComponent>();
	}
};
static_assert(alignof(UKytNavObjectComponent) == 0x000010, "Wrong alignment on UKytNavObjectComponent");
static_assert(sizeof(UKytNavObjectComponent) == 0x000220, "Wrong size on UKytNavObjectComponent");
static_assert(offsetof(UKytNavObjectComponent, meshLinks) == 0x000200, "Member 'UKytNavObjectComponent::meshLinks' has a wrong offset!");

// Class KytheraPlugin.KytNavObstacleActor
// 0x0010 (0x0230 - 0x0220)
class AKytNavObstacleActor final : public AActor
{
public:
	class UKytNavObstacleComponent*               KytNavObstacleComponent;                           // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKytheraComponent*                      KytComponent;                                      // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavObstacleActor">();
	}
	static class AKytNavObstacleActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKytNavObstacleActor>();
	}
};
static_assert(alignof(AKytNavObstacleActor) == 0x000008, "Wrong alignment on AKytNavObstacleActor");
static_assert(sizeof(AKytNavObstacleActor) == 0x000230, "Wrong size on AKytNavObstacleActor");
static_assert(offsetof(AKytNavObstacleActor, KytNavObstacleComponent) == 0x000220, "Member 'AKytNavObstacleActor::KytNavObstacleComponent' has a wrong offset!");
static_assert(offsetof(AKytNavObstacleActor, KytComponent) == 0x000228, "Member 'AKytNavObstacleActor::KytComponent' has a wrong offset!");

// Class KytheraPlugin.KytNavObstacleComponent
// 0x0040 (0x0490 - 0x0450)
class UKytNavObstacleComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0x28];                                     // 0x0450(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	EKytShapeType                                 Shape;                                             // 0x0478(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x047C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0480(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavObstacleComponent">();
	}
	static class UKytNavObstacleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavObstacleComponent>();
	}
};
static_assert(alignof(UKytNavObstacleComponent) == 0x000010, "Wrong alignment on UKytNavObstacleComponent");
static_assert(sizeof(UKytNavObstacleComponent) == 0x000490, "Wrong size on UKytNavObstacleComponent");
static_assert(offsetof(UKytNavObstacleComponent, Shape) == 0x000478, "Member 'UKytNavObstacleComponent::Shape' has a wrong offset!");
static_assert(offsetof(UKytNavObstacleComponent, Radius) == 0x00047C, "Member 'UKytNavObstacleComponent::Radius' has a wrong offset!");
static_assert(offsetof(UKytNavObstacleComponent, Size) == 0x000480, "Member 'UKytNavObstacleComponent::Size' has a wrong offset!");

// Class KytheraPlugin.KytNavOctreeRenderingComponent
// 0x00B0 (0x0500 - 0x0450)
class UKytNavOctreeRenderingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0xB0];                                     // 0x0450(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavOctreeRenderingComponent">();
	}
	static class UKytNavOctreeRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavOctreeRenderingComponent>();
	}
};
static_assert(alignof(UKytNavOctreeRenderingComponent) == 0x000010, "Wrong alignment on UKytNavOctreeRenderingComponent");
static_assert(sizeof(UKytNavOctreeRenderingComponent) == 0x000500, "Wrong size on UKytNavOctreeRenderingComponent");

// Class KytheraPlugin.KytNavRouteComponent
// 0x0050 (0x04A0 - 0x0450)
class UKytNavRouteComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0x28];                                     // 0x0450(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Points;                                            // 0x0478(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRouteHasBeenEdited;                               // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0489(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPoints;                                         // 0x048C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPointIndex;                                 // 0x0490(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0xC];                                      // 0x0494(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavRouteComponent">();
	}
	static class UKytNavRouteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavRouteComponent>();
	}
};
static_assert(alignof(UKytNavRouteComponent) == 0x000010, "Wrong alignment on UKytNavRouteComponent");
static_assert(sizeof(UKytNavRouteComponent) == 0x0004A0, "Wrong size on UKytNavRouteComponent");
static_assert(offsetof(UKytNavRouteComponent, Points) == 0x000478, "Member 'UKytNavRouteComponent::Points' has a wrong offset!");
static_assert(offsetof(UKytNavRouteComponent, bRouteHasBeenEdited) == 0x000488, "Member 'UKytNavRouteComponent::bRouteHasBeenEdited' has a wrong offset!");
static_assert(offsetof(UKytNavRouteComponent, bLoop) == 0x000489, "Member 'UKytNavRouteComponent::bLoop' has a wrong offset!");
static_assert(offsetof(UKytNavRouteComponent, NumPoints) == 0x00048C, "Member 'UKytNavRouteComponent::NumPoints' has a wrong offset!");
static_assert(offsetof(UKytNavRouteComponent, CurrentPointIndex) == 0x000490, "Member 'UKytNavRouteComponent::CurrentPointIndex' has a wrong offset!");

// Class KytheraPlugin.KytNavSeedComponent
// 0x0010 (0x0460 - 0x0450)
class UKytNavSeedComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0x10];                                     // 0x0450(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavSeedComponent">();
	}
	static class UKytNavSeedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavSeedComponent>();
	}
};
static_assert(alignof(UKytNavSeedComponent) == 0x000010, "Wrong alignment on UKytNavSeedComponent");
static_assert(sizeof(UKytNavSeedComponent) == 0x000460, "Wrong size on UKytNavSeedComponent");

// Class KytheraPlugin.KytNavSplineComponent
// 0x0080 (0x04D0 - 0x0450)
class UKytNavSplineComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0x28];                                     // 0x0450(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKytNavSplinePoint>             Points;                                            // 0x0478(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSplineHasBeenEdited;                              // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Length;                                            // 0x048C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoints;                                         // 0x0490(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisualizationTime;                                 // 0x0494(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPointIndex;                                 // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentPointName;                                  // 0x04A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPointSpeed;                                 // 0x04B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentPointAutoTangent;                           // 0x04B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentPointLinkTangentTensions;                   // 0x04B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentPointUseUp;                                 // 0x04B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentPointUseFwd;                                // 0x04B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CurrentPointTarget;                                // 0x04B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C0[0x10];                                     // 0x04C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytNavSplineComponent">();
	}
	static class UKytNavSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytNavSplineComponent>();
	}
};
static_assert(alignof(UKytNavSplineComponent) == 0x000010, "Wrong alignment on UKytNavSplineComponent");
static_assert(sizeof(UKytNavSplineComponent) == 0x0004D0, "Wrong size on UKytNavSplineComponent");
static_assert(offsetof(UKytNavSplineComponent, Points) == 0x000478, "Member 'UKytNavSplineComponent::Points' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, bSplineHasBeenEdited) == 0x000488, "Member 'UKytNavSplineComponent::bSplineHasBeenEdited' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, Length) == 0x00048C, "Member 'UKytNavSplineComponent::Length' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, NumPoints) == 0x000490, "Member 'UKytNavSplineComponent::NumPoints' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, VisualizationTime) == 0x000494, "Member 'UKytNavSplineComponent::VisualizationTime' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointIndex) == 0x000498, "Member 'UKytNavSplineComponent::CurrentPointIndex' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointName) == 0x0004A0, "Member 'UKytNavSplineComponent::CurrentPointName' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointSpeed) == 0x0004B0, "Member 'UKytNavSplineComponent::CurrentPointSpeed' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointAutoTangent) == 0x0004B4, "Member 'UKytNavSplineComponent::CurrentPointAutoTangent' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointLinkTangentTensions) == 0x0004B5, "Member 'UKytNavSplineComponent::CurrentPointLinkTangentTensions' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointUseUp) == 0x0004B6, "Member 'UKytNavSplineComponent::CurrentPointUseUp' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointUseFwd) == 0x0004B7, "Member 'UKytNavSplineComponent::CurrentPointUseFwd' has a wrong offset!");
static_assert(offsetof(UKytNavSplineComponent, CurrentPointTarget) == 0x0004B8, "Member 'UKytNavSplineComponent::CurrentPointTarget' has a wrong offset!");

// Class KytheraPlugin.Kyt3DPathFollowingComponent
// 0x0038 (0x00E8 - 0x00B0)
class UKyt3DPathFollowingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x28];                                      // 0x00B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FKytMove& MoveInfo)> OnKytMove;                       // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddActorToExclusion(class AActor* Actor);
	void DisableAvoidance();
	void EnableAvoidance();
	float GetNextCollisionTime();
	struct FVector NextPointOfContact();
	void RemoveActorFromExclusion(class AActor* Actor);
	void SetParams(const struct FKyt3DSteeringParams& SteeringParams);

	struct FKyt3DSteeringParams CopyParams() const;
	float RelativeSpeedFromAbsolute(float AbsoluteSpeed) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Kyt3DPathFollowingComponent">();
	}
	static class UKyt3DPathFollowingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKyt3DPathFollowingComponent>();
	}
};
static_assert(alignof(UKyt3DPathFollowingComponent) == 0x000008, "Wrong alignment on UKyt3DPathFollowingComponent");
static_assert(sizeof(UKyt3DPathFollowingComponent) == 0x0000E8, "Wrong size on UKyt3DPathFollowingComponent");
static_assert(offsetof(UKyt3DPathFollowingComponent, OnKytMove) == 0x0000D8, "Member 'UKyt3DPathFollowingComponent::OnKytMove' has a wrong offset!");

// Class KytheraPlugin.KytPathFollowingComponent
// 0x0058 (0x0108 - 0x00B0)
class UKytPathFollowingComponent final : public UActorComponent
{
public:
	EKyt2DMovementStyle                           MovementStyle;                                     // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bClampToNavMesh : 1;                               // 0x00B4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyRotationDirectlyToPawn : 1;                  // 0x00B4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 RequestID, bool Result)> ReceiveMoveCompleted;               // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FKytAnimRequest& AnimParameters)> AnimationEvent;     // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bUpdateControlRotation;                            // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FKytPathFollow& PathFollowMoveInfo)> OnKytPathFollow; // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPawnMovementComponent*                 m_movementComp;                                    // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimationEnded(bool Succeeded);
	void MoveToActor(class AActor* Goal, float EndDistance, bool bStopOnOverlap, float Speed);
	void MoveToLocation(const struct FVector& Dest, float EndDistance, bool bStopOnOverlap, float Speed);
	void MulticastAnimRequest(const struct FKytAnimRequest& AnimRequest);
	void SendCMCSignal(const class FString& SignalName);
	void StopMovement();
	void UpdateComponent(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytPathFollowingComponent">();
	}
	static class UKytPathFollowingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytPathFollowingComponent>();
	}
};
static_assert(alignof(UKytPathFollowingComponent) == 0x000008, "Wrong alignment on UKytPathFollowingComponent");
static_assert(sizeof(UKytPathFollowingComponent) == 0x000108, "Wrong size on UKytPathFollowingComponent");
static_assert(offsetof(UKytPathFollowingComponent, MovementStyle) == 0x0000B0, "Member 'UKytPathFollowingComponent::MovementStyle' has a wrong offset!");
static_assert(offsetof(UKytPathFollowingComponent, ReceiveMoveCompleted) == 0x0000B8, "Member 'UKytPathFollowingComponent::ReceiveMoveCompleted' has a wrong offset!");
static_assert(offsetof(UKytPathFollowingComponent, AnimationEvent) == 0x0000C8, "Member 'UKytPathFollowingComponent::AnimationEvent' has a wrong offset!");
static_assert(offsetof(UKytPathFollowingComponent, bUpdateControlRotation) == 0x0000D8, "Member 'UKytPathFollowingComponent::bUpdateControlRotation' has a wrong offset!");
static_assert(offsetof(UKytPathFollowingComponent, OnKytPathFollow) == 0x0000E0, "Member 'UKytPathFollowingComponent::OnKytPathFollow' has a wrong offset!");
static_assert(offsetof(UKytPathFollowingComponent, m_movementComp) == 0x0000F0, "Member 'UKytPathFollowingComponent::m_movementComp' has a wrong offset!");

// Class KytheraPlugin.KytProfile
// 0x0000 (0x0038 - 0x0038)
class UKytProfile : public UKytBlackboardImportable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytProfile">();
	}
	static class UKytProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytProfile>();
	}
};
static_assert(alignof(UKytProfile) == 0x000008, "Wrong alignment on UKytProfile");
static_assert(sizeof(UKytProfile) == 0x000038, "Wrong size on UKytProfile");

// Class KytheraPlugin.KytProfileTemplate
// 0x0000 (0x0038 - 0x0038)
class UKytProfileTemplate final : public UKytProfile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytProfileTemplate">();
	}
	static class UKytProfileTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytProfileTemplate>();
	}
};
static_assert(alignof(UKytProfileTemplate) == 0x000008, "Wrong alignment on UKytProfileTemplate");
static_assert(sizeof(UKytProfileTemplate) == 0x000038, "Wrong size on UKytProfileTemplate");

// Class KytheraPlugin.KytBlackboardTemplate
// 0x0000 (0x0038 - 0x0038)
class UKytBlackboardTemplate final : public UKytBlackboard
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBlackboardTemplate">();
	}
	static class UKytBlackboardTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBlackboardTemplate>();
	}
};
static_assert(alignof(UKytBlackboardTemplate) == 0x000008, "Wrong alignment on UKytBlackboardTemplate");
static_assert(sizeof(UKytBlackboardTemplate) == 0x000038, "Wrong size on UKytBlackboardTemplate");

// Class KytheraPlugin.KytSignal
// 0x0008 (0x0030 - 0x0028)
class UKytSignal final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UKytSignal* CreateKytEntitySignal(const class FString& Name_0, class APawn* Entity);
	static class UKytSignal* CreateKytSignal(const class FString& Name_0, EKytSignalDispatchModeEnum DispatchMode);

	void Send();
	void SetSignalValueAsBool(const class FString& Key, bool Value);
	void SetSignalValueAsEntityId(const class FString& Key, class AActor* Entity);
	void SetSignalValueAsFloat(const class FString& Key, float Value);
	void SetSignalValueAsInt(const class FString& Key, int32 Value);
	void SetSignalValueAsPosition(const class FString& Key, const struct FVector& Value);
	void SetSignalValueAsString(const class FString& Key, const class FString& Value);
	void SetSignalValueAsStringHash(const class FString& Key, const class FString& Value);
	void SetSignalValueAsVector(const class FString& Key, const struct FVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytSignal">();
	}
	static class UKytSignal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytSignal>();
	}
};
static_assert(alignof(UKytSignal) == 0x000008, "Wrong alignment on UKytSignal");
static_assert(sizeof(UKytSignal) == 0x000030, "Wrong size on UKytSignal");

// Class KytheraPlugin.KytSpatialQuerierComponent
// 0x0008 (0x00B8 - 0x00B0)
class UKytSpatialQuerierComponent final : public UActorComponent
{
public:
	class UKytBlackboard*                         SqsResult;                                         // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytSpatialQuerierComponent">();
	}
	static class UKytSpatialQuerierComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytSpatialQuerierComponent>();
	}
};
static_assert(alignof(UKytSpatialQuerierComponent) == 0x000008, "Wrong alignment on UKytSpatialQuerierComponent");
static_assert(sizeof(UKytSpatialQuerierComponent) == 0x0000B8, "Wrong size on UKytSpatialQuerierComponent");
static_assert(offsetof(UKytSpatialQuerierComponent, SqsResult) == 0x0000B0, "Member 'UKytSpatialQuerierComponent::SqsResult' has a wrong offset!");

// Class KytheraPlugin.KytSpatialQuery
// 0x0030 (0x0058 - 0x0028)
class UKytSpatialQuery final : public UObject
{
public:
	class FString                                 Filename;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Names;                                             // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 Content;                                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytSpatialQuery">();
	}
	static class UKytSpatialQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytSpatialQuery>();
	}
};
static_assert(alignof(UKytSpatialQuery) == 0x000008, "Wrong alignment on UKytSpatialQuery");
static_assert(sizeof(UKytSpatialQuery) == 0x000058, "Wrong size on UKytSpatialQuery");
static_assert(offsetof(UKytSpatialQuery, Filename) == 0x000028, "Member 'UKytSpatialQuery::Filename' has a wrong offset!");
static_assert(offsetof(UKytSpatialQuery, Names) == 0x000038, "Member 'UKytSpatialQuery::Names' has a wrong offset!");
static_assert(offsetof(UKytSpatialQuery, Content) == 0x000048, "Member 'UKytSpatialQuery::Content' has a wrong offset!");

// Class KytheraPlugin.KytBTTask_RunSqsQuery
// 0x0088 (0x00F8 - 0x0070)
class UKytBTTask_RunSqsQuery final : public UBTTaskNode
{
public:
	class FString                                 QueryName;                                         // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 OutputPosBbKey;                                    // 0x0080(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 ReferenceBbKey;                                    // 0x00A8(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 OutputActorBbKey;                                  // 0x00D0(0x0028)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytBTTask_RunSqsQuery">();
	}
	static class UKytBTTask_RunSqsQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytBTTask_RunSqsQuery>();
	}
};
static_assert(alignof(UKytBTTask_RunSqsQuery) == 0x000008, "Wrong alignment on UKytBTTask_RunSqsQuery");
static_assert(sizeof(UKytBTTask_RunSqsQuery) == 0x0000F8, "Wrong size on UKytBTTask_RunSqsQuery");
static_assert(offsetof(UKytBTTask_RunSqsQuery, QueryName) == 0x000070, "Member 'UKytBTTask_RunSqsQuery::QueryName' has a wrong offset!");
static_assert(offsetof(UKytBTTask_RunSqsQuery, OutputPosBbKey) == 0x000080, "Member 'UKytBTTask_RunSqsQuery::OutputPosBbKey' has a wrong offset!");
static_assert(offsetof(UKytBTTask_RunSqsQuery, ReferenceBbKey) == 0x0000A8, "Member 'UKytBTTask_RunSqsQuery::ReferenceBbKey' has a wrong offset!");
static_assert(offsetof(UKytBTTask_RunSqsQuery, OutputActorBbKey) == 0x0000D0, "Member 'UKytBTTask_RunSqsQuery::OutputActorBbKey' has a wrong offset!");

// Class KytheraPlugin.KytSpatialQueryManagerComponent
// 0x0030 (0x00E0 - 0x00B0)
class UKytSpatialQueryManagerComponent final : public UActorComponent
{
public:
	TArray<class UKytSpatialQuery*>               SpatialQueries;                                    // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x20];                                      // 0x00C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KytSpatialQueryManagerComponent">();
	}
	static class UKytSpatialQueryManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKytSpatialQueryManagerComponent>();
	}
};
static_assert(alignof(UKytSpatialQueryManagerComponent) == 0x000008, "Wrong alignment on UKytSpatialQueryManagerComponent");
static_assert(sizeof(UKytSpatialQueryManagerComponent) == 0x0000E0, "Wrong size on UKytSpatialQueryManagerComponent");
static_assert(offsetof(UKytSpatialQueryManagerComponent, SpatialQueries) == 0x0000B0, "Member 'UKytSpatialQueryManagerComponent::SpatialQueries' has a wrong offset!");

}

