#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BT_GB_Ky_CheckFriendlyOverlap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KytheraPlugin_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BT_GB_Ky_CheckFriendlyOverlap.BT_GB_Ky_CheckFriendlyOverlap_C.DoEnter
// 0x0030 (0x0030 - 0x0000)
struct BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter final
{
public:
	class AKytController*                         Controller_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKytBTEnterResult                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter) == 0x000008, "Wrong alignment on BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter");
static_assert(sizeof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter) == 0x000030, "Wrong size on BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter, Controller_0) == 0x000000, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter::Controller_0' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter, BehaviorBlackboard) == 0x000008, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter, ReturnValue) == 0x000010, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoEnter::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BT_GB_Ky_CheckFriendlyOverlap.BT_GB_Ky_CheckFriendlyOverlap_C.CheckOverlap
// 0x00E0 (0x00E0 - 0x0000)
struct BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap final
{
public:
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ConstParm, ReferenceParm)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0010(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0040)(HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0070(0x0010)(ReferenceParm)
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_2;                          // 0x00B8(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x00C8(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap) == 0x000008, "Wrong alignment on BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap");
static_assert(sizeof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap) == 0x0000E0, "Wrong size on BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, K2Node_MakeArray_Array) == 0x000000, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, CallFunc_Conv_BoolToText_ReturnValue) == 0x000010, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, CallFunc_K2_GetPawn_ReturnValue) == 0x000068, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, K2Node_MakeArray_Array_1) == 0x000070, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, K2Node_DynamicCast_AsGBCharacter) == 0x000080, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, CallFunc_Format_ReturnValue) == 0x000090, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A8, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, K2Node_MakeArray_Array_2) == 0x0000B8, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, CallFunc_SphereOverlapActors_OutActors) == 0x0000C8, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap, CallFunc_SphereOverlapActors_ReturnValue) == 0x0000D8, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_CheckOverlap::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");

// Function BT_GB_Ky_CheckFriendlyOverlap.BT_GB_Ky_CheckFriendlyOverlap_C.DoUpdate
// 0x0030 (0x0030 - 0x0000)
struct BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate final
{
public:
	class AKytController*                         Controller_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKytBTUpdateResult                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate) == 0x000008, "Wrong alignment on BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate");
static_assert(sizeof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate) == 0x000030, "Wrong size on BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate, Controller_0) == 0x000000, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate::Controller_0' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate, BehaviorBlackboard) == 0x000008, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate, ReturnValue) == 0x000010, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate::ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate, CallFunc_GetActorForwardVector_ReturnValue) == 0x000020, "Member 'BT_GB_Ky_CheckFriendlyOverlap_C_DoUpdate::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");

}

