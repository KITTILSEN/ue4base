#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Vote

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Vote.WBP_Vote_C
// 0x0128 (0x0388 - 0x0260)
class UWBP_Vote_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             TextBlock_223;                                     // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_NoCount;                                 // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Time;                                    // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_VoteCaller;                              // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_VotingFor;                               // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text_CalledAVote;                                  // 0x0290(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerState*                           VoteStarter;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 Command;                                           // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 Params_0;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         VoteTime;                                          // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         VoteCommandStrings;                                // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           VoteCommandDisplayNames;                           // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 VotingFor;                                         // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         VotesYes;                                          // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VotesNo;                                           // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVoteEnded;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPassed;                                           // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Passed;                                            // 0x0318(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Failed;                                            // 0x0330(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandle_VoteTimer;                             // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         WhiteSpace;                                        // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapOrPlayerName;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 RhymeOrReason;                                     // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 UnknownPlayer;                                     // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void Parse_Mission_Option(const class FString& OptionString, class FString* Parameter);
	void GetMapAndOptions(class FString* Combined);
	class FText GetVotesNo();
	class FText GetVotesYes();
	class FText GetVotingTimeLeft();
	void Construct();
	void VoteEnded(bool bPassed_0);
	void VoteTimer();
	void SetTimer();
	void SetTexts();
	void AddTargetPlayerText();
	void AddReason();
	void AddMap();
	void ExecuteUbergraph_WBP_Vote(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Vote_C">();
	}
	static class UWBP_Vote_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Vote_C>();
	}
};
static_assert(alignof(UWBP_Vote_C) == 0x000008, "Wrong alignment on UWBP_Vote_C");
static_assert(sizeof(UWBP_Vote_C) == 0x000388, "Wrong size on UWBP_Vote_C");
static_assert(offsetof(UWBP_Vote_C, UberGraphFrame) == 0x000260, "Member 'UWBP_Vote_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, TextBlock_223) == 0x000268, "Member 'UWBP_Vote_C::TextBlock_223' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, TextBlock_NoCount) == 0x000270, "Member 'UWBP_Vote_C::TextBlock_NoCount' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, TextBlock_Time) == 0x000278, "Member 'UWBP_Vote_C::TextBlock_Time' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, TextBlock_VoteCaller) == 0x000280, "Member 'UWBP_Vote_C::TextBlock_VoteCaller' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, TextBlock_VotingFor) == 0x000288, "Member 'UWBP_Vote_C::TextBlock_VotingFor' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, Text_CalledAVote) == 0x000290, "Member 'UWBP_Vote_C::Text_CalledAVote' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VoteStarter) == 0x0002A8, "Member 'UWBP_Vote_C::VoteStarter' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, Command) == 0x0002B0, "Member 'UWBP_Vote_C::Command' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, Params_0) == 0x0002C0, "Member 'UWBP_Vote_C::Params_0' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VoteTime) == 0x0002D0, "Member 'UWBP_Vote_C::VoteTime' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VoteCommandStrings) == 0x0002D8, "Member 'UWBP_Vote_C::VoteCommandStrings' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VoteCommandDisplayNames) == 0x0002E8, "Member 'UWBP_Vote_C::VoteCommandDisplayNames' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VotingFor) == 0x0002F8, "Member 'UWBP_Vote_C::VotingFor' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VotesYes) == 0x000308, "Member 'UWBP_Vote_C::VotesYes' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, VotesNo) == 0x00030C, "Member 'UWBP_Vote_C::VotesNo' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, bVoteEnded) == 0x000310, "Member 'UWBP_Vote_C::bVoteEnded' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, bPassed) == 0x000311, "Member 'UWBP_Vote_C::bPassed' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, Passed) == 0x000318, "Member 'UWBP_Vote_C::Passed' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, Failed) == 0x000330, "Member 'UWBP_Vote_C::Failed' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, TimerHandle_VoteTimer) == 0x000348, "Member 'UWBP_Vote_C::TimerHandle_VoteTimer' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, WhiteSpace) == 0x000350, "Member 'UWBP_Vote_C::WhiteSpace' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, MapOrPlayerName) == 0x000358, "Member 'UWBP_Vote_C::MapOrPlayerName' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, RhymeOrReason) == 0x000368, "Member 'UWBP_Vote_C::RhymeOrReason' has a wrong offset!");
static_assert(offsetof(UWBP_Vote_C, UnknownPlayer) == 0x000378, "Member 'UWBP_Vote_C::UnknownPlayer' has a wrong offset!");

}

