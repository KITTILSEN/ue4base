#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PakLoader

#include "Basic.hpp"


namespace SDK::Params
{

// Function PakLoader.AsyncPakDownloader.DownloadPak
// 0x0028 (0x0028 - 0x0000)
struct AsyncPakDownloader_DownloadPak final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SavePath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncPakDownloader*                    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncPakDownloader_DownloadPak) == 0x000008, "Wrong alignment on AsyncPakDownloader_DownloadPak");
static_assert(sizeof(AsyncPakDownloader_DownloadPak) == 0x000028, "Wrong size on AsyncPakDownloader_DownloadPak");
static_assert(offsetof(AsyncPakDownloader_DownloadPak, URL) == 0x000000, "Member 'AsyncPakDownloader_DownloadPak::URL' has a wrong offset!");
static_assert(offsetof(AsyncPakDownloader_DownloadPak, SavePath) == 0x000010, "Member 'AsyncPakDownloader_DownloadPak::SavePath' has a wrong offset!");
static_assert(offsetof(AsyncPakDownloader_DownloadPak, ReturnValue) == 0x000020, "Member 'AsyncPakDownloader_DownloadPak::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.DoesPakDirectoryExist
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_DoesPakDirectoryExist final
{
public:
	class FString                                 PakDirectory;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_DoesPakDirectoryExist) == 0x000008, "Wrong alignment on PakLoaderLibrary_DoesPakDirectoryExist");
static_assert(sizeof(PakLoaderLibrary_DoesPakDirectoryExist) == 0x000018, "Wrong size on PakLoaderLibrary_DoesPakDirectoryExist");
static_assert(offsetof(PakLoaderLibrary_DoesPakDirectoryExist, PakDirectory) == 0x000000, "Member 'PakLoaderLibrary_DoesPakDirectoryExist::PakDirectory' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_DoesPakDirectoryExist, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_DoesPakDirectoryExist::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.EnableRuntimeLog
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_EnableRuntimeLog final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewLogPath;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_EnableRuntimeLog) == 0x000008, "Wrong alignment on PakLoaderLibrary_EnableRuntimeLog");
static_assert(sizeof(PakLoaderLibrary_EnableRuntimeLog) == 0x000018, "Wrong size on PakLoaderLibrary_EnableRuntimeLog");
static_assert(offsetof(PakLoaderLibrary_EnableRuntimeLog, bEnable) == 0x000000, "Member 'PakLoaderLibrary_EnableRuntimeLog::bEnable' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_EnableRuntimeLog, NewLogPath) == 0x000008, "Member 'PakLoaderLibrary_EnableRuntimeLog::NewLogPath' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetFilesInPak
// 0x0028 (0x0028 - 0x0000)
struct PakLoaderLibrary_GetFilesInPak final
{
public:
	class FString                                 PakFilename;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUAssetOnly;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetFilesInPak) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetFilesInPak");
static_assert(sizeof(PakLoaderLibrary_GetFilesInPak) == 0x000028, "Wrong size on PakLoaderLibrary_GetFilesInPak");
static_assert(offsetof(PakLoaderLibrary_GetFilesInPak, PakFilename) == 0x000000, "Member 'PakLoaderLibrary_GetFilesInPak::PakFilename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetFilesInPak, bUAssetOnly) == 0x000010, "Member 'PakLoaderLibrary_GetFilesInPak::bUAssetOnly' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetFilesInPak, ReturnValue) == 0x000018, "Member 'PakLoaderLibrary_GetFilesInPak::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetFilesInPakDirectory
// 0x0028 (0x0028 - 0x0000)
struct PakLoaderLibrary_GetFilesInPakDirectory final
{
public:
	class FString                                 PakDirectory;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursively;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetFilesInPakDirectory) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetFilesInPakDirectory");
static_assert(sizeof(PakLoaderLibrary_GetFilesInPakDirectory) == 0x000028, "Wrong size on PakLoaderLibrary_GetFilesInPakDirectory");
static_assert(offsetof(PakLoaderLibrary_GetFilesInPakDirectory, PakDirectory) == 0x000000, "Member 'PakLoaderLibrary_GetFilesInPakDirectory::PakDirectory' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetFilesInPakDirectory, bRecursively) == 0x000010, "Member 'PakLoaderLibrary_GetFilesInPakDirectory::bRecursively' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetFilesInPakDirectory, ReturnValue) == 0x000018, "Member 'PakLoaderLibrary_GetFilesInPakDirectory::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetMountedPakFilenames
// 0x0010 (0x0010 - 0x0000)
struct PakLoaderLibrary_GetMountedPakFilenames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetMountedPakFilenames) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetMountedPakFilenames");
static_assert(sizeof(PakLoaderLibrary_GetMountedPakFilenames) == 0x000010, "Wrong size on PakLoaderLibrary_GetMountedPakFilenames");
static_assert(offsetof(PakLoaderLibrary_GetMountedPakFilenames, ReturnValue) == 0x000000, "Member 'PakLoaderLibrary_GetMountedPakFilenames::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileAnimSequence
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileAnimSequence final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileAnimSequence) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileAnimSequence");
static_assert(sizeof(PakLoaderLibrary_GetPakFileAnimSequence) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileAnimSequence");
static_assert(offsetof(PakLoaderLibrary_GetPakFileAnimSequence, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileAnimSequence::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileAnimSequence, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileAnimSequence::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileClass
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileClass final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileClass) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileClass");
static_assert(sizeof(PakLoaderLibrary_GetPakFileClass) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileClass");
static_assert(offsetof(PakLoaderLibrary_GetPakFileClass, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileClass::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileClass, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileClass::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileMaterial
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileMaterial final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileMaterial) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileMaterial");
static_assert(sizeof(PakLoaderLibrary_GetPakFileMaterial) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileMaterial");
static_assert(offsetof(PakLoaderLibrary_GetPakFileMaterial, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileMaterial::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileMaterial, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileMaterial::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileMaterialInstanceConstant
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileMaterialInstanceConstant final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceConstant*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileMaterialInstanceConstant) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileMaterialInstanceConstant");
static_assert(sizeof(PakLoaderLibrary_GetPakFileMaterialInstanceConstant) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileMaterialInstanceConstant");
static_assert(offsetof(PakLoaderLibrary_GetPakFileMaterialInstanceConstant, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileMaterialInstanceConstant::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileMaterialInstanceConstant, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileMaterialInstanceConstant::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileObject
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileObject final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileObject) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileObject");
static_assert(sizeof(PakLoaderLibrary_GetPakFileObject) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileObject");
static_assert(offsetof(PakLoaderLibrary_GetPakFileObject, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileObject::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileObject, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileObject::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileSkeletalMesh
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileSkeletalMesh final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileSkeletalMesh) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileSkeletalMesh");
static_assert(sizeof(PakLoaderLibrary_GetPakFileSkeletalMesh) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileSkeletalMesh");
static_assert(offsetof(PakLoaderLibrary_GetPakFileSkeletalMesh, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileSkeletalMesh::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileSkeletalMesh, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileSkeletalMesh::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileSound
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileSound final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileSound) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileSound");
static_assert(sizeof(PakLoaderLibrary_GetPakFileSound) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileSound");
static_assert(offsetof(PakLoaderLibrary_GetPakFileSound, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileSound::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileSound, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileSound::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileStaticMesh
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileStaticMesh final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileStaticMesh) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileStaticMesh");
static_assert(sizeof(PakLoaderLibrary_GetPakFileStaticMesh) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileStaticMesh");
static_assert(offsetof(PakLoaderLibrary_GetPakFileStaticMesh, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileStaticMesh::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileStaticMesh, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileStaticMesh::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileText
// 0x0028 (0x0028 - 0x0000)
struct PakLoaderLibrary_GetPakFileText final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_GetPakFileText) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileText");
static_assert(sizeof(PakLoaderLibrary_GetPakFileText) == 0x000028, "Wrong size on PakLoaderLibrary_GetPakFileText");
static_assert(offsetof(PakLoaderLibrary_GetPakFileText, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileText::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileText, String) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileText::String' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileText, ReturnValue) == 0x000020, "Member 'PakLoaderLibrary_GetPakFileText::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetPakFileTexture2D
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_GetPakFileTexture2D final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetPakFileTexture2D) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetPakFileTexture2D");
static_assert(sizeof(PakLoaderLibrary_GetPakFileTexture2D) == 0x000018, "Wrong size on PakLoaderLibrary_GetPakFileTexture2D");
static_assert(offsetof(PakLoaderLibrary_GetPakFileTexture2D, Filename) == 0x000000, "Member 'PakLoaderLibrary_GetPakFileTexture2D::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetPakFileTexture2D, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetPakFileTexture2D::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetProjectName
// 0x0010 (0x0010 - 0x0000)
struct PakLoaderLibrary_GetProjectName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetProjectName) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetProjectName");
static_assert(sizeof(PakLoaderLibrary_GetProjectName) == 0x000010, "Wrong size on PakLoaderLibrary_GetProjectName");
static_assert(offsetof(PakLoaderLibrary_GetProjectName, ReturnValue) == 0x000000, "Member 'PakLoaderLibrary_GetProjectName::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.GetShortName
// 0x0020 (0x0020 - 0x0000)
struct PakLoaderLibrary_GetShortName final
{
public:
	class FString                                 LongName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_GetShortName) == 0x000008, "Wrong alignment on PakLoaderLibrary_GetShortName");
static_assert(sizeof(PakLoaderLibrary_GetShortName) == 0x000020, "Wrong size on PakLoaderLibrary_GetShortName");
static_assert(offsetof(PakLoaderLibrary_GetShortName, LongName) == 0x000000, "Member 'PakLoaderLibrary_GetShortName::LongName' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_GetShortName, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_GetShortName::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.IsPackagedBuild
// 0x0001 (0x0001 - 0x0000)
struct PakLoaderLibrary_IsPackagedBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_IsPackagedBuild) == 0x000001, "Wrong alignment on PakLoaderLibrary_IsPackagedBuild");
static_assert(sizeof(PakLoaderLibrary_IsPackagedBuild) == 0x000001, "Wrong size on PakLoaderLibrary_IsPackagedBuild");
static_assert(offsetof(PakLoaderLibrary_IsPackagedBuild, ReturnValue) == 0x000000, "Member 'PakLoaderLibrary_IsPackagedBuild::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.IsValidPakFile
// 0x0020 (0x0020 - 0x0000)
struct PakLoaderLibrary_IsValidPakFile final
{
public:
	class FString                                 PakFilename;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PakSize;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_IsValidPakFile) == 0x000008, "Wrong alignment on PakLoaderLibrary_IsValidPakFile");
static_assert(sizeof(PakLoaderLibrary_IsValidPakFile) == 0x000020, "Wrong size on PakLoaderLibrary_IsValidPakFile");
static_assert(offsetof(PakLoaderLibrary_IsValidPakFile, PakFilename) == 0x000000, "Member 'PakLoaderLibrary_IsValidPakFile::PakFilename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_IsValidPakFile, PakSize) == 0x000010, "Member 'PakLoaderLibrary_IsValidPakFile::PakSize' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_IsValidPakFile, ReturnValue) == 0x000018, "Member 'PakLoaderLibrary_IsValidPakFile::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.LoadPakAssetRegistryFile
// 0x0010 (0x0010 - 0x0000)
struct PakLoaderLibrary_LoadPakAssetRegistryFile final
{
public:
	class FString                                 AssetRegistryFile;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_LoadPakAssetRegistryFile) == 0x000008, "Wrong alignment on PakLoaderLibrary_LoadPakAssetRegistryFile");
static_assert(sizeof(PakLoaderLibrary_LoadPakAssetRegistryFile) == 0x000010, "Wrong size on PakLoaderLibrary_LoadPakAssetRegistryFile");
static_assert(offsetof(PakLoaderLibrary_LoadPakAssetRegistryFile, AssetRegistryFile) == 0x000000, "Member 'PakLoaderLibrary_LoadPakAssetRegistryFile::AssetRegistryFile' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.MountPakFile
// 0x0028 (0x0028 - 0x0000)
struct PakLoaderLibrary_MountPakFile final
{
public:
	class FString                                 PakFilename;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MountPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_MountPakFile) == 0x000008, "Wrong alignment on PakLoaderLibrary_MountPakFile");
static_assert(sizeof(PakLoaderLibrary_MountPakFile) == 0x000028, "Wrong size on PakLoaderLibrary_MountPakFile");
static_assert(offsetof(PakLoaderLibrary_MountPakFile, PakFilename) == 0x000000, "Member 'PakLoaderLibrary_MountPakFile::PakFilename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_MountPakFile, MountPath) == 0x000010, "Member 'PakLoaderLibrary_MountPakFile::MountPath' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_MountPakFile, ReturnValue) == 0x000020, "Member 'PakLoaderLibrary_MountPakFile::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.MountPakFileEasy
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_MountPakFileEasy final
{
public:
	class FString                                 PakFilename;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_MountPakFileEasy) == 0x000008, "Wrong alignment on PakLoaderLibrary_MountPakFileEasy");
static_assert(sizeof(PakLoaderLibrary_MountPakFileEasy) == 0x000018, "Wrong size on PakLoaderLibrary_MountPakFileEasy");
static_assert(offsetof(PakLoaderLibrary_MountPakFileEasy, PakFilename) == 0x000000, "Member 'PakLoaderLibrary_MountPakFileEasy::PakFilename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_MountPakFileEasy, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_MountPakFileEasy::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.ProjectPersistentDownloadDir
// 0x0010 (0x0010 - 0x0000)
struct PakLoaderLibrary_ProjectPersistentDownloadDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_ProjectPersistentDownloadDir) == 0x000008, "Wrong alignment on PakLoaderLibrary_ProjectPersistentDownloadDir");
static_assert(sizeof(PakLoaderLibrary_ProjectPersistentDownloadDir) == 0x000010, "Wrong size on PakLoaderLibrary_ProjectPersistentDownloadDir");
static_assert(offsetof(PakLoaderLibrary_ProjectPersistentDownloadDir, ReturnValue) == 0x000000, "Member 'PakLoaderLibrary_ProjectPersistentDownloadDir::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.RegisterEncryptionKey
// 0x0028 (0x0028 - 0x0000)
struct PakLoaderLibrary_RegisterEncryptionKey final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AesKey;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_RegisterEncryptionKey) == 0x000008, "Wrong alignment on PakLoaderLibrary_RegisterEncryptionKey");
static_assert(sizeof(PakLoaderLibrary_RegisterEncryptionKey) == 0x000028, "Wrong size on PakLoaderLibrary_RegisterEncryptionKey");
static_assert(offsetof(PakLoaderLibrary_RegisterEncryptionKey, Guid) == 0x000000, "Member 'PakLoaderLibrary_RegisterEncryptionKey::Guid' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_RegisterEncryptionKey, AesKey) == 0x000010, "Member 'PakLoaderLibrary_RegisterEncryptionKey::AesKey' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_RegisterEncryptionKey, ReturnValue) == 0x000020, "Member 'PakLoaderLibrary_RegisterEncryptionKey::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.RegisterMountPoint
// 0x0020 (0x0020 - 0x0000)
struct PakLoaderLibrary_RegisterMountPoint final
{
public:
	class FString                                 RootPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentPath;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_RegisterMountPoint) == 0x000008, "Wrong alignment on PakLoaderLibrary_RegisterMountPoint");
static_assert(sizeof(PakLoaderLibrary_RegisterMountPoint) == 0x000020, "Wrong size on PakLoaderLibrary_RegisterMountPoint");
static_assert(offsetof(PakLoaderLibrary_RegisterMountPoint, RootPath) == 0x000000, "Member 'PakLoaderLibrary_RegisterMountPoint::RootPath' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_RegisterMountPoint, ContentPath) == 0x000010, "Member 'PakLoaderLibrary_RegisterMountPoint::ContentPath' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.RuntimeLog
// 0x0010 (0x0010 - 0x0000)
struct PakLoaderLibrary_RuntimeLog final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_RuntimeLog) == 0x000008, "Wrong alignment on PakLoaderLibrary_RuntimeLog");
static_assert(sizeof(PakLoaderLibrary_RuntimeLog) == 0x000010, "Wrong size on PakLoaderLibrary_RuntimeLog");
static_assert(offsetof(PakLoaderLibrary_RuntimeLog, Text) == 0x000000, "Member 'PakLoaderLibrary_RuntimeLog::Text' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.SHA1SUM
// 0x0020 (0x0020 - 0x0000)
struct PakLoaderLibrary_SHA1SUM final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_SHA1SUM) == 0x000008, "Wrong alignment on PakLoaderLibrary_SHA1SUM");
static_assert(sizeof(PakLoaderLibrary_SHA1SUM) == 0x000020, "Wrong size on PakLoaderLibrary_SHA1SUM");
static_assert(offsetof(PakLoaderLibrary_SHA1SUM, Filename) == 0x000000, "Member 'PakLoaderLibrary_SHA1SUM::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_SHA1SUM, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_SHA1SUM::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.TryConvertFilenameToLongPackageName
// 0x0028 (0x0028 - 0x0000)
struct PakLoaderLibrary_TryConvertFilenameToLongPackageName final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_TryConvertFilenameToLongPackageName) == 0x000008, "Wrong alignment on PakLoaderLibrary_TryConvertFilenameToLongPackageName");
static_assert(sizeof(PakLoaderLibrary_TryConvertFilenameToLongPackageName) == 0x000028, "Wrong size on PakLoaderLibrary_TryConvertFilenameToLongPackageName");
static_assert(offsetof(PakLoaderLibrary_TryConvertFilenameToLongPackageName, Filename) == 0x000000, "Member 'PakLoaderLibrary_TryConvertFilenameToLongPackageName::Filename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_TryConvertFilenameToLongPackageName, PackageName) == 0x000010, "Member 'PakLoaderLibrary_TryConvertFilenameToLongPackageName::PackageName' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_TryConvertFilenameToLongPackageName, ReturnValue) == 0x000020, "Member 'PakLoaderLibrary_TryConvertFilenameToLongPackageName::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.UnmountPakFile
// 0x0018 (0x0018 - 0x0000)
struct PakLoaderLibrary_UnmountPakFile final
{
public:
	class FString                                 PakFilename;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PakLoaderLibrary_UnmountPakFile) == 0x000008, "Wrong alignment on PakLoaderLibrary_UnmountPakFile");
static_assert(sizeof(PakLoaderLibrary_UnmountPakFile) == 0x000018, "Wrong size on PakLoaderLibrary_UnmountPakFile");
static_assert(offsetof(PakLoaderLibrary_UnmountPakFile, PakFilename) == 0x000000, "Member 'PakLoaderLibrary_UnmountPakFile::PakFilename' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_UnmountPakFile, ReturnValue) == 0x000010, "Member 'PakLoaderLibrary_UnmountPakFile::ReturnValue' has a wrong offset!");

// Function PakLoader.PakLoaderLibrary.UnRegisterMountPoint
// 0x0020 (0x0020 - 0x0000)
struct PakLoaderLibrary_UnRegisterMountPoint final
{
public:
	class FString                                 RootPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentPath;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PakLoaderLibrary_UnRegisterMountPoint) == 0x000008, "Wrong alignment on PakLoaderLibrary_UnRegisterMountPoint");
static_assert(sizeof(PakLoaderLibrary_UnRegisterMountPoint) == 0x000020, "Wrong size on PakLoaderLibrary_UnRegisterMountPoint");
static_assert(offsetof(PakLoaderLibrary_UnRegisterMountPoint, RootPath) == 0x000000, "Member 'PakLoaderLibrary_UnRegisterMountPoint::RootPath' has a wrong offset!");
static_assert(offsetof(PakLoaderLibrary_UnRegisterMountPoint, ContentPath) == 0x000010, "Member 'PakLoaderLibrary_UnRegisterMountPoint::ContentPath' has a wrong offset!");

}

