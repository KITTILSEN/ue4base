#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightFixture_Dyn

#include "Basic.hpp"

#include "BP_LightFixture_Dyn_classes.hpp"
#include "BP_LightFixture_Dyn_parameters.hpp"


namespace SDK
{

// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.ExecuteUbergraph_BP_LightFixture_Dyn
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::ExecuteUbergraph_BP_LightFixture_Dyn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "ExecuteUbergraph_BP_LightFixture_Dyn");

	Params::BP_LightFixture_Dyn_C_ExecuteUbergraph_BP_LightFixture_Dyn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.SetLightSourceVisibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LightFixture_Dyn_C::SetLightSourceVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "SetLightSourceVisibility");

	Params::BP_LightFixture_Dyn_C_SetLightSourceVisibility Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.BndEvt__BP_LightFixture_Dyn_BP_Power_UserComponent_K2Node_ComponentBoundEvent_0_OnSharedPowerSourceStatusChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EGBPowerSourceStatus                    InSharedPowerSourceStatus                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::BndEvt__BP_LightFixture_Dyn_BP_Power_UserComponent_K2Node_ComponentBoundEvent_0_OnSharedPowerSourceStatusChanged__DelegateSignature(EGBPowerSourceStatus InSharedPowerSourceStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "BndEvt__BP_LightFixture_Dyn_BP_Power_UserComponent_K2Node_ComponentBoundEvent_0_OnSharedPowerSourceStatusChanged__DelegateSignature");

	Params::BP_LightFixture_Dyn_C_BndEvt__BP_LightFixture_Dyn_BP_Power_UserComponent_K2Node_ComponentBoundEvent_0_OnSharedPowerSourceStatusChanged__DelegateSignature Parms{};

	Parms.InSharedPowerSourceStatus = InSharedPowerSourceStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.OnPlayerReadyRoomStatusChanged_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::OnPlayerReadyRoomStatusChanged_Event_0(class AGBPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "OnPlayerReadyRoomStatusChanged_Event_0");

	Params::BP_LightFixture_Dyn_C_OnPlayerReadyRoomStatusChanged_Event_0 Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.BindToReadyRoomDelegate
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::BindToReadyRoomDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "BindToReadyRoomDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.StartSounds
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::StartSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "StartSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.StopSounds
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::StopSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "StopSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.DisableBugs
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::DisableBugs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "DisableBugs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.EnableBugs
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::EnableBugs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "EnableBugs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.MakeAssetsNotBroken
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::MakeAssetsNotBroken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "MakeAssetsNotBroken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.MakeAssetsBroken
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::MakeAssetsBroken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "MakeAssetsBroken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.BindCollisionDelegates
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::BindCollisionDelegates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "BindCollisionDelegates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.OnTakeRadialDamage_1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UDamageType*                DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                HitInfo                                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::OnTakeRadialDamage_1(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "OnTakeRadialDamage_1");

	Params::BP_LightFixture_Dyn_C_OnTakeRadialDamage_1 Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.Origin = std::move(Origin);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.HalfBreak
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::HalfBreak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "HalfBreak");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.OnComponentHit_Event_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_LightFixture_Dyn_C::OnComponentHit_Event_0(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "OnComponentHit_Event_0");

	Params::BP_LightFixture_Dyn_C_OnComponentHit_Event_0 Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.K2_OnReset
// (Event, Public, BlueprintEvent)

void ABP_LightFixture_Dyn_C::K2_OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "K2_OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.UpdateAssetsShared
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::UpdateAssetsShared()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "UpdateAssetsShared");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.Unbreak
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::Unbreak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "Unbreak");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.Break
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::Break()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "Break");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.OnTimeSpanChanged_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Timespan                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::OnTimeSpanChanged_Event_0(class FName Timespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "OnTimeSpanChanged_Event_0");

	Params::BP_LightFixture_Dyn_C_OnTimeSpanChanged_Event_0 Parms{};

	Parms.Timespan = Timespan;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.BindToSkyActor
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::BindToSkyActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "BindToSkyActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.Destruction
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::Destruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "Destruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LightFixture_Dyn_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.GetLightComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ULightComponent**                 OutLightComp                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::GetLightComp(class ULightComponent** OutLightComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "GetLightComp");

	Params::BP_LightFixture_Dyn_C_GetLightComp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLightComp != nullptr)
		*OutLightComp = Parms.OutLightComp;
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.OnRep_bIsBroken
// (BlueprintCallable, BlueprintEvent)

void ABP_LightFixture_Dyn_C::OnRep_bIsBroken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "OnRep_bIsBroken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.AddLightToPortalSystem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULightComponent*                  LightComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::AddLightToPortalSystem(class ULightComponent* LightComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "AddLightToPortalSystem");

	Params::BP_LightFixture_Dyn_C_AddLightToPortalSystem Parms{};

	Parms.LightComponent = LightComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.RemoveLightFromPortalSystem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULightComponent*                  LightComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightFixture_Dyn_C::RemoveLightFromPortalSystem(class ULightComponent* LightComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "RemoveLightFromPortalSystem");

	Params::BP_LightFixture_Dyn_C_RemoveLightFromPortalSystem Parms{};

	Parms.LightComponent = LightComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.DoWeTakeDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   InDamageOrigin                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDamageRadius                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInTrace                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           InDamageCauser                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bOutTakeDamage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LightFixture_Dyn_C::DoWeTakeDamage(const struct FVector& InDamageOrigin, float InDamageRadius, bool bInTrace, class AActor* InDamageCauser, float DamageAmount, bool* bOutTakeDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "DoWeTakeDamage");

	Params::BP_LightFixture_Dyn_C_DoWeTakeDamage Parms{};

	Parms.InDamageOrigin = std::move(InDamageOrigin);
	Parms.InDamageRadius = InDamageRadius;
	Parms.bInTrace = bInTrace;
	Parms.InDamageCauser = InDamageCauser;
	Parms.DamageAmount = DamageAmount;

	UObject::ProcessEvent(Func, &Parms);

	if (bOutTakeDamage != nullptr)
		*bOutTakeDamage = Parms.bOutTakeDamage;
}


// Function BP_LightFixture_Dyn.BP_LightFixture_Dyn_C.IsOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   bIsOn_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LightFixture_Dyn_C::IsOn(bool* bIsOn_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightFixture_Dyn_C", "IsOn");

	Params::BP_LightFixture_Dyn_C_IsOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsOn_0 != nullptr)
		*bIsOn_0 = Parms.bIsOn_0;
}

}

