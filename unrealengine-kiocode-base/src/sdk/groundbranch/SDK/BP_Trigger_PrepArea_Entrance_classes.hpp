#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Trigger_PrepArea_Entrance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Trigger_ReadyRoom_Master_classes.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Trigger_PrepArea_Entrance.BP_Trigger_PrepArea_Entrance_C
// 0x0078 (0x02B0 - 0x0238)
class ABP_Trigger_PrepArea_Entrance_C final : public ABP_Trigger_ReadyRoom_Master_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Trigger_PrepArea_Entrance_C;     // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRenderUnprep;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRenderPrep;                                    // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PrepDirection;                                     // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        UnprepDirection;                                   // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   JoinedTeam;                                        // 0x0268(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   LeftTeam;                                          // 0x0280(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TeamTags;                                          // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         PlayersOldTeamId;                                  // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Trigger_PrepArea_Entrance(int32 EntryPoint);
	void OnPlayerTeamChanged_Event_0(class AGBPlayerState* PlayerState);
	void ExitedOnServer(class AGBPlayerController* GBPlayerController, bool bPositiveExit);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Trigger_PrepArea_Entrance_C">();
	}
	static class ABP_Trigger_PrepArea_Entrance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Trigger_PrepArea_Entrance_C>();
	}
};
static_assert(alignof(ABP_Trigger_PrepArea_Entrance_C) == 0x000008, "Wrong alignment on ABP_Trigger_PrepArea_Entrance_C");
static_assert(sizeof(ABP_Trigger_PrepArea_Entrance_C) == 0x0002B0, "Wrong size on ABP_Trigger_PrepArea_Entrance_C");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, UberGraphFrame_BP_Trigger_PrepArea_Entrance_C) == 0x000238, "Member 'ABP_Trigger_PrepArea_Entrance_C::UberGraphFrame_BP_Trigger_PrepArea_Entrance_C' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, TextRenderUnprep) == 0x000240, "Member 'ABP_Trigger_PrepArea_Entrance_C::TextRenderUnprep' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, TextRenderPrep) == 0x000248, "Member 'ABP_Trigger_PrepArea_Entrance_C::TextRenderPrep' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, PrepDirection) == 0x000250, "Member 'ABP_Trigger_PrepArea_Entrance_C::PrepDirection' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, UnprepDirection) == 0x000258, "Member 'ABP_Trigger_PrepArea_Entrance_C::UnprepDirection' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, TeamId) == 0x000260, "Member 'ABP_Trigger_PrepArea_Entrance_C::TeamId' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, JoinedTeam) == 0x000268, "Member 'ABP_Trigger_PrepArea_Entrance_C::JoinedTeam' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, LeftTeam) == 0x000280, "Member 'ABP_Trigger_PrepArea_Entrance_C::LeftTeam' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, TeamTags) == 0x000298, "Member 'ABP_Trigger_PrepArea_Entrance_C::TeamTags' has a wrong offset!");
static_assert(offsetof(ABP_Trigger_PrepArea_Entrance_C, PlayersOldTeamId) == 0x0002A8, "Member 'ABP_Trigger_PrepArea_Entrance_C::PlayersOldTeamId' has a wrong offset!");

}

