#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModKit

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ModKit_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class ModKit.ModKitBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UModKitBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FUInt64 AddUInt64(const struct FUInt64& First, const struct FUInt64& Second);
	static int32 GetAppID();
	static class FString GetDefaultStagedModPath();
	static class FString GetEditorModPath();
	static struct FUInt64 GetFolderSize(const class FString& Directory);
	static class FString GetStagedModPath();
	static TArray<struct FUInt64> GetSubscribedMods();
	static bool IsFileSizeBelowWorkshopPreviewFileLimit(const class FString& FilePath);
	static bool IsModFullyInstalled(const struct FUInt64& ModID);
	static bool IsModIDForGame(const struct FUInt64& ModID);
	static bool IsModIDForMod(const struct FUInt64& ModID);
	static bool IsModIDForModOrStaging(const struct FUInt64& ModID);
	static bool IsModIDForStaging(const struct FUInt64& ModID);
	static bool IsModKitEditor();
	static bool IsSteamAPIAvailable();
	static bool IsUInt64ValidID(const struct FUInt64& Value);
	static struct FUInt64 MakeModIDForGame();
	static struct FUInt64 MakeModIDForStaging();
	static struct FUInt64 MakeModIDFromString(const class FString& ModIDString);
	static struct FUInt64 MakeZeroUInt64();
	static void ModIDByType(const struct FUInt64& ModID, EModIDBranchPaths* BranchPath);
	static void ModIDByTypeSimple(const struct FUInt64& ModID, EModPathBranchPaths* BranchPath);
	static class FString ModMetadataWorkshopIDToString(const struct FModMetadata& ModMetadata);
	static struct FUInt64 ModMetadataWorkshopIDToUInt64(const struct FModMetadata& ModMetadata);
	static void SetStagedModFolderPath(const class FString& NewPath);
	static bool UInt64Equals(const struct FUInt64& A, const struct FUInt64& B);
	static bool UInt64NotEquals(const struct FUInt64& A, const struct FUInt64& B);
	static class FString UInt64ToFileSizeString(const struct FUInt64& Value);
	static class FString UInt64ToFileSizeStringInGb(const struct FUInt64& Value);
	static float UInt64ToFloat(const struct FUInt64& Value);
	static class FString UInt64ToString(const struct FUInt64& Value);
	static class FText UInt64ToText(const struct FUInt64& Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModKitBlueprintLibrary">();
	}
	static class UModKitBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModKitBlueprintLibrary>();
	}
};
static_assert(alignof(UModKitBlueprintLibrary) == 0x000008, "Wrong alignment on UModKitBlueprintLibrary");
static_assert(sizeof(UModKitBlueprintLibrary) == 0x000028, "Wrong size on UModKitBlueprintLibrary");

// Class ModKit.ModKitCreateWorkshopItem
// 0x0058 (0x0080 - 0x0028)
class UModKitCreateWorkshopItem final : public UObject
{
public:
	TMulticastInlineDelegate<void(const struct FUInt64& WorkshopID, bool bSuccess)> OnFinishCreateWorkshopItemEvent; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ID;                                                // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasSucceeded;                                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasFinished;                                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A[0x16];                                      // 0x006A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateWorkshopItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModKitCreateWorkshopItem">();
	}
	static class UModKitCreateWorkshopItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModKitCreateWorkshopItem>();
	}
};
static_assert(alignof(UModKitCreateWorkshopItem) == 0x000008, "Wrong alignment on UModKitCreateWorkshopItem");
static_assert(sizeof(UModKitCreateWorkshopItem) == 0x000080, "Wrong size on UModKitCreateWorkshopItem");
static_assert(offsetof(UModKitCreateWorkshopItem, OnFinishCreateWorkshopItemEvent) == 0x000028, "Member 'UModKitCreateWorkshopItem::OnFinishCreateWorkshopItemEvent' has a wrong offset!");
static_assert(offsetof(UModKitCreateWorkshopItem, ID) == 0x000060, "Member 'UModKitCreateWorkshopItem::ID' has a wrong offset!");
static_assert(offsetof(UModKitCreateWorkshopItem, bHasSucceeded) == 0x000068, "Member 'UModKitCreateWorkshopItem::bHasSucceeded' has a wrong offset!");
static_assert(offsetof(UModKitCreateWorkshopItem, bHasFinished) == 0x000069, "Member 'UModKitCreateWorkshopItem::bHasFinished' has a wrong offset!");

// Class ModKit.ModKitRuntimeModLibrary
// 0x0000 (0x0028 - 0x0028)
class UModKitRuntimeModLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DeleteWorkshopItemFromWorkshop(const struct FUInt64& WorkshopID);
	static void ShowWorkshopEULA();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModKitRuntimeModLibrary">();
	}
	static class UModKitRuntimeModLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModKitRuntimeModLibrary>();
	}
};
static_assert(alignof(UModKitRuntimeModLibrary) == 0x000008, "Wrong alignment on UModKitRuntimeModLibrary");
static_assert(sizeof(UModKitRuntimeModLibrary) == 0x000028, "Wrong size on UModKitRuntimeModLibrary");

// Class ModKit.ModKitSettings
// 0x0028 (0x0050 - 0x0028)
class UModKitSettings final : public UObject
{
public:
	class FString                                 StagedModFolderPath;                               // 0x0028(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FUInt64>                        DisabledMods;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableAutodownloadedModsLocally;                  // 0x0048(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UModKitSettings* Get();

	void SetDisabledMods(const TArray<struct FUInt64>& InDisabledModList);
	void SetModIsDisabled(const struct FUInt64& ModID, const bool bDisabled);
	void SetStagedModFolderPath(const class FString& NewPath);

	TArray<struct FUInt64> GetDisabledMods() const;
	bool GetEnableAutodownloadedModsLocally() const;
	bool GetModIsDisabled(const struct FUInt64& ModID) const;
	class FString GetStagedModFolderPath() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModKitSettings">();
	}
	static class UModKitSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModKitSettings>();
	}
};
static_assert(alignof(UModKitSettings) == 0x000008, "Wrong alignment on UModKitSettings");
static_assert(sizeof(UModKitSettings) == 0x000050, "Wrong size on UModKitSettings");
static_assert(offsetof(UModKitSettings, StagedModFolderPath) == 0x000028, "Member 'UModKitSettings::StagedModFolderPath' has a wrong offset!");
static_assert(offsetof(UModKitSettings, DisabledMods) == 0x000038, "Member 'UModKitSettings::DisabledMods' has a wrong offset!");
static_assert(offsetof(UModKitSettings, bEnableAutodownloadedModsLocally) == 0x000048, "Member 'UModKitSettings::bEnableAutodownloadedModsLocally' has a wrong offset!");

// Class ModKit.ModKitSubsystem
// 0x0118 (0x0148 - 0x0030)
class UModKitSubsystem final : public UGameInstanceSubsystem
{
public:
	TMap<struct FUInt64, class FString>           MountedModWorkshopIDs;                             // 0x0030(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<struct FAssetData, struct FUInt64>       AssetToWorkshopID;                                 // 0x0080(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<struct FPrimaryAssetId, struct FUInt64>  PrimaryAssetIdToWorkshopID;                        // 0x00D0(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x20];                                     // 0x0120(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UAssetManager*                          AssetManager;                                      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void FindAndMountMods(const bool bEditorModsOnly);
	bool GetAllAssetsInPackage(const struct FUInt64& WorkshopID, TArray<struct FAssetData>* Assets);
	void MountMod(const struct FUInt64& WorkshopID, const bool bEditorModsOnly);
	void UnmountMod(const struct FUInt64& WorkshopID);

	bool GetDirectoryFromWorkshopID(class FString* DirectoryPath, const struct FUInt64& WorkshopID, const bool bForNonAssetFiles) const;
	bool GetMetadataFromWorkshopID(struct FModMetadata* MetaData, const struct FUInt64& WorkshopID) const;
	bool GetModAssetWorkshopID(const struct FAssetData& AssetData, struct FUInt64* WorkshopID) const;
	bool GetModAssetWorkshopIDFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, struct FUInt64* WorkshopID) const;
	bool GetPakFilenameForMod(const struct FUInt64& WorkshopID, class FString* Filename) const;
	bool GetWorkshopIDFromPluginName(struct FUInt64* WorkshopID, const class FString& PluginName) const;
	bool IsModMountable(const struct FUInt64& WorkshopItemID) const;
	bool IsModMounted(const struct FUInt64& WorkshopItemID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModKitSubsystem">();
	}
	static class UModKitSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModKitSubsystem>();
	}
};
static_assert(alignof(UModKitSubsystem) == 0x000008, "Wrong alignment on UModKitSubsystem");
static_assert(sizeof(UModKitSubsystem) == 0x000148, "Wrong size on UModKitSubsystem");
static_assert(offsetof(UModKitSubsystem, MountedModWorkshopIDs) == 0x000030, "Member 'UModKitSubsystem::MountedModWorkshopIDs' has a wrong offset!");
static_assert(offsetof(UModKitSubsystem, AssetToWorkshopID) == 0x000080, "Member 'UModKitSubsystem::AssetToWorkshopID' has a wrong offset!");
static_assert(offsetof(UModKitSubsystem, PrimaryAssetIdToWorkshopID) == 0x0000D0, "Member 'UModKitSubsystem::PrimaryAssetIdToWorkshopID' has a wrong offset!");
static_assert(offsetof(UModKitSubsystem, AssetManager) == 0x000140, "Member 'UModKitSubsystem::AssetManager' has a wrong offset!");

// Class ModKit.ModKitUploadWorkshopItem
// 0x0058 (0x0080 - 0x0028)
class UModKitUploadWorkshopItem final : public UObject
{
public:
	TMulticastInlineDelegate<void(const struct FUInt64& WorkshopID, bool bSuccess)> OnFinishUploadWorkshopItemEvent; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ID;                                                // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasSucceeded;                                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasFinished;                                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A[0x16];                                      // 0x006A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UploadWorkshopItem(const struct FRuntimeModWorkshopInfo& RuntimeModWorkshopInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModKitUploadWorkshopItem">();
	}
	static class UModKitUploadWorkshopItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModKitUploadWorkshopItem>();
	}
};
static_assert(alignof(UModKitUploadWorkshopItem) == 0x000008, "Wrong alignment on UModKitUploadWorkshopItem");
static_assert(sizeof(UModKitUploadWorkshopItem) == 0x000080, "Wrong size on UModKitUploadWorkshopItem");
static_assert(offsetof(UModKitUploadWorkshopItem, OnFinishUploadWorkshopItemEvent) == 0x000028, "Member 'UModKitUploadWorkshopItem::OnFinishUploadWorkshopItemEvent' has a wrong offset!");
static_assert(offsetof(UModKitUploadWorkshopItem, ID) == 0x000060, "Member 'UModKitUploadWorkshopItem::ID' has a wrong offset!");
static_assert(offsetof(UModKitUploadWorkshopItem, bHasSucceeded) == 0x000068, "Member 'UModKitUploadWorkshopItem::bHasSucceeded' has a wrong offset!");
static_assert(offsetof(UModKitUploadWorkshopItem, bHasFinished) == 0x000069, "Member 'UModKitUploadWorkshopItem::bHasFinished' has a wrong offset!");

// Class ModKit.WorkshopItemDataAsset
// 0x0078 (0x00A8 - 0x0030)
class UWorkshopItemDataAsset final : public UDataAsset
{
public:
	class FString                                 Title;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModType                                      ModType;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WorkshopID;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailPath;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Weapon;                                    // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Gear;                                      // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Outfit;                                    // 0x008A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Map;                                       // 0x008B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Mission;                                   // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_GameMode;                                  // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_LuaScript;                                 // 0x008E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Mutator;                                   // 0x008F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Localization;                              // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_Patch;                                     // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_CustomKit;                                 // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_AILoadout;                                 // 0x0093(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTag_DefaultItemBuild;                          // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChangeNotes;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorkshopItemDataAsset">();
	}
	static class UWorkshopItemDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorkshopItemDataAsset>();
	}
};
static_assert(alignof(UWorkshopItemDataAsset) == 0x000008, "Wrong alignment on UWorkshopItemDataAsset");
static_assert(sizeof(UWorkshopItemDataAsset) == 0x0000A8, "Wrong size on UWorkshopItemDataAsset");
static_assert(offsetof(UWorkshopItemDataAsset, Title) == 0x000030, "Member 'UWorkshopItemDataAsset::Title' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, Description) == 0x000040, "Member 'UWorkshopItemDataAsset::Description' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, CreatedBy) == 0x000050, "Member 'UWorkshopItemDataAsset::CreatedBy' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, ModType) == 0x000060, "Member 'UWorkshopItemDataAsset::ModType' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, WorkshopID) == 0x000068, "Member 'UWorkshopItemDataAsset::WorkshopID' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, ThumbnailPath) == 0x000078, "Member 'UWorkshopItemDataAsset::ThumbnailPath' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Weapon) == 0x000088, "Member 'UWorkshopItemDataAsset::bHasTag_Weapon' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Gear) == 0x000089, "Member 'UWorkshopItemDataAsset::bHasTag_Gear' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Outfit) == 0x00008A, "Member 'UWorkshopItemDataAsset::bHasTag_Outfit' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Map) == 0x00008B, "Member 'UWorkshopItemDataAsset::bHasTag_Map' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Mission) == 0x00008C, "Member 'UWorkshopItemDataAsset::bHasTag_Mission' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_GameMode) == 0x00008D, "Member 'UWorkshopItemDataAsset::bHasTag_GameMode' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_LuaScript) == 0x00008E, "Member 'UWorkshopItemDataAsset::bHasTag_LuaScript' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Mutator) == 0x00008F, "Member 'UWorkshopItemDataAsset::bHasTag_Mutator' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Localization) == 0x000090, "Member 'UWorkshopItemDataAsset::bHasTag_Localization' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_Patch) == 0x000091, "Member 'UWorkshopItemDataAsset::bHasTag_Patch' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_CustomKit) == 0x000092, "Member 'UWorkshopItemDataAsset::bHasTag_CustomKit' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_AILoadout) == 0x000093, "Member 'UWorkshopItemDataAsset::bHasTag_AILoadout' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, bHasTag_DefaultItemBuild) == 0x000094, "Member 'UWorkshopItemDataAsset::bHasTag_DefaultItemBuild' has a wrong offset!");
static_assert(offsetof(UWorkshopItemDataAsset, ChangeNotes) == 0x000098, "Member 'UWorkshopItemDataAsset::ChangeNotes' has a wrong offset!");

}

