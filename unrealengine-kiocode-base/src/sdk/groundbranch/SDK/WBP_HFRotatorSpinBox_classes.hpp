#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HFRotatorSpinBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HFRotatorSpinBox.WBP_HFRotatorSpinBox_C
// 0x0108 (0x0368 - 0x0260)
class UWBP_HFRotatorSpinBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_BadPitch;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_BadRoll;                                    // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_BadYaw;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Pitch;                                      // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Roll;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Yaw;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_Pitch;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_Roll;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_Yaw;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   RollToolTipText;                                   // 0x02B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PitchToolTipText;                                  // 0x02C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   YawToolTipText;                                    // 0x02E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bBadRoll;                                          // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadPitch;                                         // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadYaw;                                           // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FB[0x5];                                      // 0x02FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BadText;                                           // 0x0300(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   BadToolTipText;                                    // 0x0318(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(float NewRoll)> OnRollChanged;                                     // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float NewPitch)> OnPitchChanged;                                   // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float NewYaw)>  OnYawChanged;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bBadHoverRoll;                                     // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadHoverPitch;                                    // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadHoverYaw;                                      // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	ESlateVisibility GetVisibility_BadYaw();
	ESlateVisibility GetVisibility_BadPitch();
	ESlateVisibility GetVisibility_BadRoll();
	class FText Get_Border_Yaw_ToolTipText_0();
	class FText Get_Border_Pitch_ToolTipText_0();
	class FText Get_Border_Roll_ToolTipText_0();
	void UpdateFromRotator(const struct FRotator& Rotation);
	void BndEvt__SpinBox_Roll_K2Node_ComponentBoundEvent_0_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__SpinBox_Pitch_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__SpinBox_Yaw_K2Node_ComponentBoundEvent_2_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void ExecuteUbergraph_WBP_HFRotatorSpinBox(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HFRotatorSpinBox_C">();
	}
	static class UWBP_HFRotatorSpinBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HFRotatorSpinBox_C>();
	}
};
static_assert(alignof(UWBP_HFRotatorSpinBox_C) == 0x000008, "Wrong alignment on UWBP_HFRotatorSpinBox_C");
static_assert(sizeof(UWBP_HFRotatorSpinBox_C) == 0x000368, "Wrong size on UWBP_HFRotatorSpinBox_C");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, UberGraphFrame) == 0x000260, "Member 'UWBP_HFRotatorSpinBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, Border_BadPitch) == 0x000268, "Member 'UWBP_HFRotatorSpinBox_C::Border_BadPitch' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, Border_BadRoll) == 0x000270, "Member 'UWBP_HFRotatorSpinBox_C::Border_BadRoll' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, Border_BadYaw) == 0x000278, "Member 'UWBP_HFRotatorSpinBox_C::Border_BadYaw' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, Border_Pitch) == 0x000280, "Member 'UWBP_HFRotatorSpinBox_C::Border_Pitch' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, Border_Roll) == 0x000288, "Member 'UWBP_HFRotatorSpinBox_C::Border_Roll' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, Border_Yaw) == 0x000290, "Member 'UWBP_HFRotatorSpinBox_C::Border_Yaw' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, SpinBox_Pitch) == 0x000298, "Member 'UWBP_HFRotatorSpinBox_C::SpinBox_Pitch' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, SpinBox_Roll) == 0x0002A0, "Member 'UWBP_HFRotatorSpinBox_C::SpinBox_Roll' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, SpinBox_Yaw) == 0x0002A8, "Member 'UWBP_HFRotatorSpinBox_C::SpinBox_Yaw' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, RollToolTipText) == 0x0002B0, "Member 'UWBP_HFRotatorSpinBox_C::RollToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, PitchToolTipText) == 0x0002C8, "Member 'UWBP_HFRotatorSpinBox_C::PitchToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, YawToolTipText) == 0x0002E0, "Member 'UWBP_HFRotatorSpinBox_C::YawToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, bBadRoll) == 0x0002F8, "Member 'UWBP_HFRotatorSpinBox_C::bBadRoll' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, bBadPitch) == 0x0002F9, "Member 'UWBP_HFRotatorSpinBox_C::bBadPitch' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, bBadYaw) == 0x0002FA, "Member 'UWBP_HFRotatorSpinBox_C::bBadYaw' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, BadText) == 0x000300, "Member 'UWBP_HFRotatorSpinBox_C::BadText' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, BadToolTipText) == 0x000318, "Member 'UWBP_HFRotatorSpinBox_C::BadToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, OnRollChanged) == 0x000330, "Member 'UWBP_HFRotatorSpinBox_C::OnRollChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, OnPitchChanged) == 0x000340, "Member 'UWBP_HFRotatorSpinBox_C::OnPitchChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, OnYawChanged) == 0x000350, "Member 'UWBP_HFRotatorSpinBox_C::OnYawChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, bBadHoverRoll) == 0x000360, "Member 'UWBP_HFRotatorSpinBox_C::bBadHoverRoll' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, bBadHoverPitch) == 0x000361, "Member 'UWBP_HFRotatorSpinBox_C::bBadHoverPitch' has a wrong offset!");
static_assert(offsetof(UWBP_HFRotatorSpinBox_C, bBadHoverYaw) == 0x000362, "Member 'UWBP_HFRotatorSpinBox_C::bBadHoverYaw' has a wrong offset!");

}

