#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBSteamworks

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "RBSteamworks_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class RBSteamworks.RBQueryServer
// 0x0098 (0x00C0 - 0x0028)
class URBQueryServer final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamServerDetails                    ReturnedSteamServerDetails;                        // 0x0038(0x0068)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FSteamServerDetails& SteamServerDetails)> OnServerQueryResponseReceivedEvent; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void CancelRequestServerDetails();
	void CheckForQueryResponse();
	void RequestServerDetails(const struct FServerNetAddress& ServerNetAddress);
	void RequestServerDetailsFromConnectionString(const class FString& IPConnectionString);

	bool IsAwaitingQueryResponse() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBQueryServer">();
	}
	static class URBQueryServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBQueryServer>();
	}
};
static_assert(alignof(URBQueryServer) == 0x000008, "Wrong alignment on URBQueryServer");
static_assert(sizeof(URBQueryServer) == 0x0000C0, "Wrong size on URBQueryServer");
static_assert(offsetof(URBQueryServer, ReturnedSteamServerDetails) == 0x000038, "Member 'URBQueryServer::ReturnedSteamServerDetails' has a wrong offset!");
static_assert(offsetof(URBQueryServer, OnServerQueryResponseReceivedEvent) == 0x0000B0, "Member 'URBQueryServer::OnServerQueryResponseReceivedEvent' has a wrong offset!");

// Class RBSteamworks.RBServerList
// 0x0170 (0x0198 - 0x0028)
class URBServerList final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamServerDetails>            QueuedSteamServerDetails;                          // 0x0038(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x120];                                     // 0x0048(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FSteamServerDetails& SteamServerDetails)> OnServerRespondedEvent; // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamServerDetails& SteamServerDetails)> OnServerRefreshCompleteEvent; // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamServerDetailedInfo& SteamServerDetailedInfo)> OnServerRespondedWithDetailedInfoEvent; // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddServerToFavourites(const struct FSteamServerDetails& ServerDetails);
	void CancelRequestDetailedServerInfo(const struct FSteamServerDetails& ServerDetails);
	void CancelRequestServerList();
	bool IsServerFavourited(const struct FSteamServerDetails& ServerDetails);
	void ParseQueuedServerList();
	void RemoveServerFromFavourites(const struct FSteamServerDetails& ServerDetails);
	void RequestDetailedServerInfo(const struct FSteamServerDetails& ServerDetails);
	void RequestServerList(ESteamServerType Type);

	bool IsRefreshing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBServerList">();
	}
	static class URBServerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBServerList>();
	}
};
static_assert(alignof(URBServerList) == 0x000008, "Wrong alignment on URBServerList");
static_assert(sizeof(URBServerList) == 0x000198, "Wrong size on URBServerList");
static_assert(offsetof(URBServerList, QueuedSteamServerDetails) == 0x000038, "Member 'URBServerList::QueuedSteamServerDetails' has a wrong offset!");
static_assert(offsetof(URBServerList, OnServerRespondedEvent) == 0x000168, "Member 'URBServerList::OnServerRespondedEvent' has a wrong offset!");
static_assert(offsetof(URBServerList, OnServerRefreshCompleteEvent) == 0x000178, "Member 'URBServerList::OnServerRefreshCompleteEvent' has a wrong offset!");
static_assert(offsetof(URBServerList, OnServerRespondedWithDetailedInfoEvent) == 0x000188, "Member 'URBServerList::OnServerRespondedWithDetailedInfoEvent' has a wrong offset!");

// Class RBSteamworks.RBSteamworksFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class URBSteamworksFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class URBServerList* CreateRBServerListRef(class UObject* WorldContextObject);
	static class URBWebAPIQuery* CreateRBWebAPIQueryRef(class UObject* WorldContextObject);
	static int32 GetAppID();
	static float GetFileSizeFloat(const struct FSteamWebAPIResponse_ModInfo& ModInfo);
	static class FString GetFileSizeString(const struct FSteamWebAPIResponse_ModInfo& ModInfo);
	static class FString GetFileSizeStringFromFloat(float fileSize);
	static TArray<struct FRBSteamFriendDetails> GetSteamFriendsList();
	static bool InviteUserToGame(const struct FRBSteamID& SteamID, const class FString& ConnectString);
	static bool MatchingSteamID(const struct FRBSteamID& A, const struct FRBSteamID& B);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBSteamworksFunctionLibrary">();
	}
	static class URBSteamworksFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBSteamworksFunctionLibrary>();
	}
};
static_assert(alignof(URBSteamworksFunctionLibrary) == 0x000008, "Wrong alignment on URBSteamworksFunctionLibrary");
static_assert(sizeof(URBSteamworksFunctionLibrary) == 0x000028, "Wrong size on URBSteamworksFunctionLibrary");

// Class RBSteamworks.RBWebAPIQuery
// 0x0080 (0x00A8 - 0x0028)
class URBWebAPIQuery final : public UObject
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FSteamWebAPIResponse_ModInfo>& SteamWebAPIResponse_ModInfo)> OnSteamWebAPIQueryResponseModInfo; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& ConnectionString)> OnSteamWebAPIQueryResponseServerIPLookup; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSteamWebAPIResponse_ModInfo& SteamWebAPIResponse_ModInfo)> OnSteamWebAPIQueryResponseUGCFileDetails; // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void ClearModInfoCache();
	void GetModInfo(const TArray<class FString>& ModIDStrings);
	void GetUGCFileDetails(const class FString& ModIDString, const class FString& WebAPIKey, const int32 AppID, const class FString& SteamID);
	void ServerIPLookup(const struct FServerNetAddress& IPAddress);
	void ServerIPLookupFromConnectionString(const class FString& IPConnectionString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBWebAPIQuery">();
	}
	static class URBWebAPIQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBWebAPIQuery>();
	}
};
static_assert(alignof(URBWebAPIQuery) == 0x000008, "Wrong alignment on URBWebAPIQuery");
static_assert(sizeof(URBWebAPIQuery) == 0x0000A8, "Wrong size on URBWebAPIQuery");
static_assert(offsetof(URBWebAPIQuery, OnSteamWebAPIQueryResponseModInfo) == 0x000028, "Member 'URBWebAPIQuery::OnSteamWebAPIQueryResponseModInfo' has a wrong offset!");
static_assert(offsetof(URBWebAPIQuery, OnSteamWebAPIQueryResponseServerIPLookup) == 0x000088, "Member 'URBWebAPIQuery::OnSteamWebAPIQueryResponseServerIPLookup' has a wrong offset!");
static_assert(offsetof(URBWebAPIQuery, OnSteamWebAPIQueryResponseUGCFileDetails) == 0x000098, "Member 'URBWebAPIQuery::OnSteamWebAPIQueryResponseUGCFileDetails' has a wrong offset!");

}

