#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MissionSettings_TimeOfDay_SimpleTab

#include "Basic.hpp"

#include "GroundBranch_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MissionSettings_TimeOfDay_SimpleTab.WBP_MissionSettings_TimeOfDay_SimpleTab_C
// 0x00E0 (0x0340 - 0x0260)
class UWBP_MissionSettings_TimeOfDay_SimpleTab_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_ComboBox_C*                        ComboBox_InsertionTime;                            // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ComboBox_C*                        ComboBox_WeatherType;                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         CustomInsertionTimeBox;                            // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       CustomTimeEditableText;                            // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_338;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MissionTimeText_1;                                 // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                PickNewDateButton;                                 // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Year, int32 Month, int32 Day, EMissionTimeLabel TimePreset, float TimeOfDay, class FName WeatherCategory, class FName WeatherType)> OnDateTimeChanged; // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentSunriseTime;                                // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSunsetTime;                                 // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentDay;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMonth;                                      // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentYear;                                       // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMissionTimeLabel                             SelectedMissionTimePreset;                         // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelectedMissionTime;                               // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunriseOrSunsetProximityTime;                      // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBSky*                                 GBSkyRef;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBWorldSettings*                       GBWorldSettingsRef;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           AllowedWeatherCategories;                          // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AllWeatherPresetFileNames;                         // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   Current_Weather_Category;                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Current_Weather_Type;                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESeason                                       CurrentSeason;                                     // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyCreatorWeatherPreset*               OnlyAllowedWeatherPreset;                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           MissionTimeList;                                   // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           WeatherCategoryList;                               // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_WBP_MissionSettings_TimeOfDay_SimpleTab(int32 EntryPoint);
	class UWidget* Get_PickNewDateButton_ToolTipWidget_0();
	void GetDayOrNight(float SelectedTime, class FText* DayOrNightText);
	void GetMonthName(int32 MonthNumber_, class FText* MonthName);
	void Get_Validated_Military_Time(const class FString& InputTimeString, class FString* ValidatedInputTime);
	class UWidget* Get_EditableTextBox_String_HintText_0();
	void UpdateMissionTimeFromPreset();
	void DisplayTimeOfDayText();
	void OnTimeUpdated();
	void BndEvt__WBP_MissionSettings_TimeOfDay_SimpleTab_CustomTimeEditableText_K2Node_ComponentBoundEvent_4_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void SetNewCustomMissionTime(float NewMissionTime);
	void BndEvt__WBP_MissionSettings_TimeOfDay_SimpleTab_PickNewDateButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void OnReceivedTabSwitch(int32 CurrentYear_0, int32 CurrentMonth_0, int32 CurrentDay_0, EMissionTimeLabel CurrentTimePreset, float CurrentTimeOfDay, class FName CurrentWeatherCategory, class FName CurrentWeatherType);
	void UpdateCustomTimeText();
	void SetNewDate(int32 NewMonth, int32 NewDay);
	void OnMonthOrDayUpdated();
	void Construct();
	void UpdateWeatherSelectedIndex();
	void BuildWeatherOptions();
	void BuildPreferredMissionTimeList();
	void BndEvt__WBP_MissionSettings_TimeOfDay_SimpleTab_ComboBox_InsertionTime_K2Node_ComponentBoundEvent_2_OnIndexChanged__DelegateSignature(int32 Index_0);
	void BndEvt__WBP_MissionSettings_TimeOfDay_SimpleTab_ComboBox_WeatherType_K2Node_ComponentBoundEvent_5_OnIndexChanged__DelegateSignature(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MissionSettings_TimeOfDay_SimpleTab_C">();
	}
	static class UWBP_MissionSettings_TimeOfDay_SimpleTab_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MissionSettings_TimeOfDay_SimpleTab_C>();
	}
};
static_assert(alignof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C) == 0x000008, "Wrong alignment on UWBP_MissionSettings_TimeOfDay_SimpleTab_C");
static_assert(sizeof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C) == 0x000340, "Wrong size on UWBP_MissionSettings_TimeOfDay_SimpleTab_C");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, UberGraphFrame) == 0x000260, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, ComboBox_InsertionTime) == 0x000268, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::ComboBox_InsertionTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, ComboBox_WeatherType) == 0x000270, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::ComboBox_WeatherType' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CustomInsertionTimeBox) == 0x000278, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CustomInsertionTimeBox' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CustomTimeEditableText) == 0x000280, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CustomTimeEditableText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, Image_338) == 0x000288, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::Image_338' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, MissionTimeText_1) == 0x000290, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::MissionTimeText_1' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, PickNewDateButton) == 0x000298, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::PickNewDateButton' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, OnDateTimeChanged) == 0x0002A0, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::OnDateTimeChanged' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CurrentSunriseTime) == 0x0002B0, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CurrentSunriseTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CurrentSunsetTime) == 0x0002B4, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CurrentSunsetTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CurrentDay) == 0x0002B8, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CurrentDay' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CurrentMonth) == 0x0002BC, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CurrentMonth' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CurrentYear) == 0x0002C0, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CurrentYear' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, SelectedMissionTimePreset) == 0x0002C4, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::SelectedMissionTimePreset' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, SelectedMissionTime) == 0x0002C8, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::SelectedMissionTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, SunriseOrSunsetProximityTime) == 0x0002CC, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::SunriseOrSunsetProximityTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, GBSkyRef) == 0x0002D0, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::GBSkyRef' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, GBWorldSettingsRef) == 0x0002D8, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::GBWorldSettingsRef' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, AllowedWeatherCategories) == 0x0002E0, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::AllowedWeatherCategories' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, AllWeatherPresetFileNames) == 0x0002F0, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::AllWeatherPresetFileNames' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, Current_Weather_Category) == 0x000300, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::Current_Weather_Category' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, Current_Weather_Type) == 0x000308, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::Current_Weather_Type' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, CurrentSeason) == 0x000310, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::CurrentSeason' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, OnlyAllowedWeatherPreset) == 0x000318, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::OnlyAllowedWeatherPreset' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, MissionTimeList) == 0x000320, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::MissionTimeList' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_SimpleTab_C, WeatherCategoryList) == 0x000330, "Member 'UWBP_MissionSettings_TimeOfDay_SimpleTab_C::WeatherCategoryList' has a wrong offset!");

}

