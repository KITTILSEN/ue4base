#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MissionSettings_TimeOfDay_AdvancedTab

#include "Basic.hpp"

#include "GroundBranch_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MissionSettings_TimeOfDay_AdvancedTab.WBP_MissionSettings_TimeOfDay_AdvancedTab_C
// 0x0148 (0x03A8 - 0x0260)
class UWBP_MissionSettings_TimeOfDay_AdvancedTab_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCheckBox*                              CheckBoxSeasonalWeatherOnly;                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ComboBox_C*                        ComboBox_InsertionTime;                            // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ComboBox_C*                        ComboBox_Weather;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         CustomInsertionTimeBox;                            // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       CustomTimeEditableText;                            // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MissionTimeText;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_TODStrip_C*               TODStrip;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Settings_MonthDayStrip_C*          WBP_Settings_MonthDayStrip;                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        WeatherCategory;                                   // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UListView*                              WeatherTypeList;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AGBSky*                                 SkyActorRef;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Year, int32 Month, int32 Day, EMissionTimeLabel TimePreset, float TimeOfDay, class FName WeatherCategory, class FName WeatherType)> OnDateTimeChanged; // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Number_Of_Steps;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBWorldSettings*                       GBWorldSettingsRef;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_WeatherTypeFileObj_C*               SelectedListItemDataObj;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSunriseTime;                                // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSunsetTime;                                 // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartSunBlendPitch;                                // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndSunBlendPitch;                                  // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartMoonBlendPitch;                               // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndMoonBlendPitch;                                 // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunsetOrSunriseProximityTime;                      // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunColour;                                         // 0x0304(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TotalDarkColour;                                   // 0x0314(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FullMoonColour;                                    // 0x0324(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentDay;                                        // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMonth;                                      // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentYear;                                       // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SelectedMissionTime;                               // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMissionTimeLabel                             SelectedMissionTimePreset;                         // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowAllTimePresets;                               // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Current_Weather_Category;                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Current_Weather_Type;                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           AllowedWeatherCategories;                          // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AllWeatherPresetFileNames;                         // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkyCreatorWeatherPreset*>       AllowedWeatherPresets;                             // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	ESeason                                       CurrentSeason;                                     // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyCreatorWeatherPreset*               OnlyAllowedWeatherPreset;                          // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           MissionTimeList;                                   // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void GetDayOrNight(float TimeOfDay, class FText* DayOrNightText);
	void GetMonthName(int32 MonthNumber, class FText* MonthName);
	void GetColourForSunPitch(float SunPitch, float MoonPitch, float MoonPhase, struct FLinearColor* Colour);
	void Get_Validated_Military_Time(const class FString& InputTimeString, class FString* ValidatedInputTime);
	class UWidget* Get_EditableTextBox_String_HintText_0();
	void Construct();
	void UpdateSunBar();
	void DisplayTimeOfDayText();
	void OnMonthOrDayUpdated();
	void SetNewDate(int32 NewMonth, int32 NewDay);
	void OnTimeUpdated();
	void SetNewCustomMissionTime(float NewMissionTime);
	void BndEvt__WBP_MissionSettings_TimeOfDay_AdvancedTab_CustomTimeEditableText_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void UserHasSelectedANewCustomTime(float NewTime);
	void UserHasSelectedANewDate(int32 NewMonth, int32 NewDay);
	void OnReceivedTabSwitch(int32 CurrentYear_0, int32 CurrentMonth_0, int32 CurrentDay_0, EMissionTimeLabel CurrentTimePreset, float CurrentTimeOfDay, class FName CurrentWeatherCategory, class FName CurrentWeatherType);
	void UpdateCustomTimeText();
	void BndEvt__WBP_MissionSettings_TimeOfDay_AdvancedTab_WeatherType_K2Node_ComponentBoundEvent_2_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BuildListOfWeatherCategories();
	void SetCurrentSelectedWeatherCategory();
	void BndEvt__WBP_MissionSettings_TimeOfDay_AdvancedTab_CheckBoxSeasonalWeatherOnly_K2Node_ComponentBoundEvent_3_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BuildWeatherTypeList();
	void BndEvt__WBP_MissionSettings_TimeOfDay_AdvancedTab_WeatherTypeList_K2Node_ComponentBoundEvent_4_SimpleListItemEventDynamic__DelegateSignature(class UObject* Item);
	void EnsureWeHaveWeatherType();
	void BuildPreferredMissionTimeList();
	void BndEvt__WBP_MissionSettings_TimeOfDay_AdvancedTab_ComboBox_Weather_K2Node_ComponentBoundEvent_5_OnIndexChanged__DelegateSignature(int32 Index_0);
	void BndEvt__WBP_MissionSettings_TimeOfDay_AdvancedTab_ComboBox_InsertionTime_K2Node_ComponentBoundEvent_6_OnIndexChanged__DelegateSignature(int32 Index_0);
	void ExecuteUbergraph_WBP_MissionSettings_TimeOfDay_AdvancedTab(int32 EntryPoint);
	void UpdateMissionTimeFromPreset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MissionSettings_TimeOfDay_AdvancedTab_C">();
	}
	static class UWBP_MissionSettings_TimeOfDay_AdvancedTab_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MissionSettings_TimeOfDay_AdvancedTab_C>();
	}
};
static_assert(alignof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C) == 0x000008, "Wrong alignment on UWBP_MissionSettings_TimeOfDay_AdvancedTab_C");
static_assert(sizeof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C) == 0x0003A8, "Wrong size on UWBP_MissionSettings_TimeOfDay_AdvancedTab_C");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, UberGraphFrame) == 0x000260, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CheckBoxSeasonalWeatherOnly) == 0x000268, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CheckBoxSeasonalWeatherOnly' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, ComboBox_InsertionTime) == 0x000270, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::ComboBox_InsertionTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, ComboBox_Weather) == 0x000278, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::ComboBox_Weather' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CustomInsertionTimeBox) == 0x000280, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CustomInsertionTimeBox' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CustomTimeEditableText) == 0x000288, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CustomTimeEditableText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, MissionTimeText) == 0x000290, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::MissionTimeText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, TODStrip) == 0x000298, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::TODStrip' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, WBP_Settings_MonthDayStrip) == 0x0002A0, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::WBP_Settings_MonthDayStrip' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, WeatherCategory) == 0x0002A8, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::WeatherCategory' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, WeatherTypeList) == 0x0002B0, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::WeatherTypeList' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, SkyActorRef) == 0x0002B8, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::SkyActorRef' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, OnDateTimeChanged) == 0x0002C0, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::OnDateTimeChanged' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, Number_Of_Steps) == 0x0002D0, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::Number_Of_Steps' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, GBWorldSettingsRef) == 0x0002D8, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::GBWorldSettingsRef' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, SelectedListItemDataObj) == 0x0002E0, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::SelectedListItemDataObj' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CurrentSunriseTime) == 0x0002E8, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CurrentSunriseTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CurrentSunsetTime) == 0x0002EC, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CurrentSunsetTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, StartSunBlendPitch) == 0x0002F0, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::StartSunBlendPitch' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, EndSunBlendPitch) == 0x0002F4, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::EndSunBlendPitch' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, StartMoonBlendPitch) == 0x0002F8, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::StartMoonBlendPitch' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, EndMoonBlendPitch) == 0x0002FC, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::EndMoonBlendPitch' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, SunsetOrSunriseProximityTime) == 0x000300, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::SunsetOrSunriseProximityTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, SunColour) == 0x000304, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::SunColour' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, TotalDarkColour) == 0x000314, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::TotalDarkColour' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, FullMoonColour) == 0x000324, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::FullMoonColour' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CurrentDay) == 0x000334, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CurrentDay' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CurrentMonth) == 0x000338, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CurrentMonth' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CurrentYear) == 0x00033C, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CurrentYear' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, SelectedMissionTime) == 0x000340, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::SelectedMissionTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, SelectedMissionTimePreset) == 0x000344, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::SelectedMissionTimePreset' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, bShowAllTimePresets) == 0x000345, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::bShowAllTimePresets' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, Current_Weather_Category) == 0x000348, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::Current_Weather_Category' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, Current_Weather_Type) == 0x000350, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::Current_Weather_Type' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, AllowedWeatherCategories) == 0x000358, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::AllowedWeatherCategories' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, AllWeatherPresetFileNames) == 0x000368, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::AllWeatherPresetFileNames' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, AllowedWeatherPresets) == 0x000378, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::AllowedWeatherPresets' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, CurrentSeason) == 0x000388, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::CurrentSeason' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, OnlyAllowedWeatherPreset) == 0x000390, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::OnlyAllowedWeatherPreset' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_AdvancedTab_C, MissionTimeList) == 0x000398, "Member 'UWBP_MissionSettings_TimeOfDay_AdvancedTab_C::MissionTimeList' has a wrong offset!");

}

