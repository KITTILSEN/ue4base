#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CM_HeadCam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CM_HeadCam.CM_HeadCam_C.BlueprintModifyCamera
// 0x0230 (0x0230 - 0x0000)
struct CM_HeadCam_C_BlueprintModifyCamera final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ViewLocation;                                      // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ViewRotation;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FOV;                                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewViewLocation;                                   // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewViewRotation;                                   // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         NewFOV;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalViewLocation;                                 // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLeanRoll;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetViewRotation;                                // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngle_ReturnValue;                   // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngle_ReturnValue_1;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_GetHeadCamSocket_ReturnValue;             // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLeanAlpha_ReturnValue;                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0xC];                                      // 0x0194(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x01A0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CM_HeadCam_C_BlueprintModifyCamera) == 0x000010, "Wrong alignment on CM_HeadCam_C_BlueprintModifyCamera");
static_assert(sizeof(CM_HeadCam_C_BlueprintModifyCamera) == 0x000230, "Wrong size on CM_HeadCam_C_BlueprintModifyCamera");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, DeltaTime) == 0x000000, "Member 'CM_HeadCam_C_BlueprintModifyCamera::DeltaTime' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, ViewLocation) == 0x000004, "Member 'CM_HeadCam_C_BlueprintModifyCamera::ViewLocation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, ViewRotation) == 0x000010, "Member 'CM_HeadCam_C_BlueprintModifyCamera::ViewRotation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, FOV) == 0x00001C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::FOV' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, NewViewLocation) == 0x000020, "Member 'CM_HeadCam_C_BlueprintModifyCamera::NewViewLocation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, NewViewRotation) == 0x00002C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::NewViewRotation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, NewFOV) == 0x000038, "Member 'CM_HeadCam_C_BlueprintModifyCamera::NewFOV' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, LocalViewLocation) == 0x00003C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::LocalViewLocation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, TargetLeanRoll) == 0x000048, "Member 'CM_HeadCam_C_BlueprintModifyCamera::TargetLeanRoll' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, TargetViewRotation) == 0x00004C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::TargetViewRotation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_MakeTransform_ReturnValue_1) == 0x0000A0, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_ComposeTransforms_ReturnValue) == 0x0000D0, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakTransform_Location) == 0x000100, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakTransform_Rotation) == 0x00010C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakTransform_Scale) == 0x000118, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_FInterpTo_ReturnValue) == 0x000124, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Roll) == 0x000128, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Pitch) == 0x00012C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Yaw) == 0x000130, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_Add_FloatFloat_ReturnValue) == 0x000134, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_RInterpTo_ReturnValue) == 0x000138, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000144, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Roll_1) == 0x000148, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Pitch_1) == 0x00014C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Yaw_1) == 0x000150, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_ClampAngle_ReturnValue) == 0x000154, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000158, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00015C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_GetViewTarget_ReturnValue) == 0x000160, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_ClampAngle_ReturnValue_1) == 0x000168, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_ClampAngle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, K2Node_DynamicCast_AsGBCharacter) == 0x000170, "Member 'CM_HeadCam_C_BlueprintModifyCamera::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, K2Node_DynamicCast_bSuccess) == 0x000178, "Member 'CM_HeadCam_C_BlueprintModifyCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_MakeRotator_ReturnValue_1) == 0x00017C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_GetHeadCamSocket_ReturnValue) == 0x000188, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_GetHeadCamSocket_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_GetLeanAlpha_ReturnValue) == 0x000190, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_GetLeanAlpha_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_GetSocketTransform_ReturnValue) == 0x0001A0, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001D0, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakTransform_Location_1) == 0x0001D4, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakTransform_Rotation_1) == 0x0001E0, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakTransform_Scale_1) == 0x0001EC, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x0001F8, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x000204, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Roll_2) == 0x000210, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Pitch_2) == 0x000214, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_BreakRotator_Yaw_2) == 0x000218, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyCamera, CallFunc_MakeRotator_ReturnValue_2) == 0x00021C, "Member 'CM_HeadCam_C_BlueprintModifyCamera::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");

// Function CM_HeadCam.CM_HeadCam_C.BlueprintModifyPostProcess
// 0x0570 (0x0570 - 0x0000)
struct CM_HeadCam_C_BlueprintModifyPostProcess final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostProcessBlendWeight;                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0010(0x0560)(Parm, OutParm)
};
static_assert(alignof(CM_HeadCam_C_BlueprintModifyPostProcess) == 0x000010, "Wrong alignment on CM_HeadCam_C_BlueprintModifyPostProcess");
static_assert(sizeof(CM_HeadCam_C_BlueprintModifyPostProcess) == 0x000570, "Wrong size on CM_HeadCam_C_BlueprintModifyPostProcess");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyPostProcess, DeltaTime) == 0x000000, "Member 'CM_HeadCam_C_BlueprintModifyPostProcess::DeltaTime' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyPostProcess, PostProcessBlendWeight) == 0x000004, "Member 'CM_HeadCam_C_BlueprintModifyPostProcess::PostProcessBlendWeight' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintModifyPostProcess, PostProcessSettings) == 0x000010, "Member 'CM_HeadCam_C_BlueprintModifyPostProcess::PostProcessSettings' has a wrong offset!");

// Function CM_HeadCam.CM_HeadCam_C.BlueprintAddedToCamera
// 0x0008 (0x0008 - 0x0000)
struct CM_HeadCam_C_BlueprintAddedToCamera final
{
public:
	class AGBPlayerCameraManager*                 GBPlayerCameraManager;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CM_HeadCam_C_BlueprintAddedToCamera) == 0x000008, "Wrong alignment on CM_HeadCam_C_BlueprintAddedToCamera");
static_assert(sizeof(CM_HeadCam_C_BlueprintAddedToCamera) == 0x000008, "Wrong size on CM_HeadCam_C_BlueprintAddedToCamera");
static_assert(offsetof(CM_HeadCam_C_BlueprintAddedToCamera, GBPlayerCameraManager) == 0x000000, "Member 'CM_HeadCam_C_BlueprintAddedToCamera::GBPlayerCameraManager' has a wrong offset!");

// Function CM_HeadCam.CM_HeadCam_C.BlueprintRemovedFromCamera
// 0x0008 (0x0008 - 0x0000)
struct CM_HeadCam_C_BlueprintRemovedFromCamera final
{
public:
	class AGBPlayerCameraManager*                 GBPlayerCameraManager;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CM_HeadCam_C_BlueprintRemovedFromCamera) == 0x000008, "Wrong alignment on CM_HeadCam_C_BlueprintRemovedFromCamera");
static_assert(sizeof(CM_HeadCam_C_BlueprintRemovedFromCamera) == 0x000008, "Wrong size on CM_HeadCam_C_BlueprintRemovedFromCamera");
static_assert(offsetof(CM_HeadCam_C_BlueprintRemovedFromCamera, GBPlayerCameraManager) == 0x000000, "Member 'CM_HeadCam_C_BlueprintRemovedFromCamera::GBPlayerCameraManager' has a wrong offset!");

// Function CM_HeadCam.CM_HeadCam_C.BlueprintPreApplyCameraModifier
// 0x0010 (0x0010 - 0x0000)
struct CM_HeadCam_C_BlueprintPreApplyCameraModifier final
{
public:
	class AGBPlayerCameraManager*                 GBPlayerCameraManager;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CM_HeadCam_C_BlueprintPreApplyCameraModifier) == 0x000008, "Wrong alignment on CM_HeadCam_C_BlueprintPreApplyCameraModifier");
static_assert(sizeof(CM_HeadCam_C_BlueprintPreApplyCameraModifier) == 0x000010, "Wrong size on CM_HeadCam_C_BlueprintPreApplyCameraModifier");
static_assert(offsetof(CM_HeadCam_C_BlueprintPreApplyCameraModifier, GBPlayerCameraManager) == 0x000000, "Member 'CM_HeadCam_C_BlueprintPreApplyCameraModifier::GBPlayerCameraManager' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_BlueprintPreApplyCameraModifier, DeltaTime) == 0x000008, "Member 'CM_HeadCam_C_BlueprintPreApplyCameraModifier::DeltaTime' has a wrong offset!");

// Function CM_HeadCam.CM_HeadCam_C.ExecuteUbergraph_CM_HeadCam
// 0x0088 (0x0088 - 0x0000)
struct CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerCameraManager*                 K2Node_Event_GBPlayerCameraManager_2;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBPlayerCameraManager*                 K2Node_Event_GBPlayerCameraManager_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBPlayerCameraManager*                 K2Node_Event_GBPlayerCameraManager;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetLeanAlpha_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam) == 0x000008, "Wrong alignment on CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam");
static_assert(sizeof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam) == 0x000088, "Wrong size on CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, EntryPoint) == 0x000000, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::EntryPoint' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, K2Node_Event_GBPlayerCameraManager_2) == 0x000008, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::K2Node_Event_GBPlayerCameraManager_2' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, K2Node_Event_GBPlayerCameraManager_1) == 0x000010, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::K2Node_Event_GBPlayerCameraManager_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, K2Node_Event_GBPlayerCameraManager) == 0x000018, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::K2Node_Event_GBPlayerCameraManager' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, K2Node_Event_DeltaTime) == 0x000020, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_GetViewTarget_ReturnValue) == 0x000028, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_GetViewTarget_ReturnValue_1) == 0x000030, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_GetViewTarget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, K2Node_DynamicCast_AsGBCharacter) == 0x000040, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x00004C, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x000058, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_GetLeanAlpha_ReturnValue) == 0x000064, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_GetLeanAlpha_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_BreakRotator_Roll) == 0x000068, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_BreakRotator_Pitch) == 0x00006C, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_BreakRotator_Yaw) == 0x000070, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000074, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam, CallFunc_MakeRotator_ReturnValue) == 0x000078, "Member 'CM_HeadCam_C_ExecuteUbergraph_CM_HeadCam::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

}

