#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_FreeLook

#include "Basic.hpp"


namespace SDK::Params
{

// Function GA_FreeLook.GA_FreeLook_C.ExecuteUbergraph_GA_FreeLook
// 0x0030 (0x0030 - 0x0000)
struct GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_TimeHeld;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float TimeHeld)>               K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputRelease*          CallFunc_WaitInputRelease_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook) == 0x000008, "Wrong alignment on GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook");
static_assert(sizeof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook) == 0x000030, "Wrong size on GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook");
static_assert(offsetof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook, EntryPoint) == 0x000000, "Member 'GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook, K2Node_CustomEvent_TimeHeld) == 0x000004, "Member 'GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook::K2Node_CustomEvent_TimeHeld' has a wrong offset!");
static_assert(offsetof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook, Temp_float_Variable) == 0x000018, "Member 'GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook, CallFunc_WaitInputRelease_ReturnValue) == 0x000020, "Member 'GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook::CallFunc_WaitInputRelease_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'GA_FreeLook_C_ExecuteUbergraph_GA_FreeLook::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_FreeLook.GA_FreeLook_C.OnRelease_91401EBD961644DA83927C2C8552EF6D
// 0x0004 (0x0004 - 0x0000)
struct GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D final
{
public:
	float                                         TimeHeld;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D) == 0x000004, "Wrong alignment on GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D");
static_assert(sizeof(GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D) == 0x000004, "Wrong size on GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D");
static_assert(offsetof(GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D, TimeHeld) == 0x000000, "Member 'GA_FreeLook_C_OnRelease_91401EBD961644DA83927C2C8552EF6D::TimeHeld' has a wrong offset!");

}

