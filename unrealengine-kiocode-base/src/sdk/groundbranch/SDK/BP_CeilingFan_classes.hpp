#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CeilingFan

#include "Basic.hpp"

#include "BP_PoweredItem_Dyn_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CeilingFan.BP_CeilingFan_C
// 0x0020 (0x03B8 - 0x0398)
class ABP_CeilingFan_C : public ABP_PoweredItem_Dyn_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CeilingFan_C;                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Blades_SM;                                         // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FanSpeed;                                          // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFanSpeed;                                   // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFanShouldMove;                                    // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CeilingFan(int32 EntryPoint);
	void UpdateFanMotion();
	void BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void UpdateAssetsShared();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CeilingFan_C">();
	}
	static class ABP_CeilingFan_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CeilingFan_C>();
	}
};
static_assert(alignof(ABP_CeilingFan_C) == 0x000008, "Wrong alignment on ABP_CeilingFan_C");
static_assert(sizeof(ABP_CeilingFan_C) == 0x0003B8, "Wrong size on ABP_CeilingFan_C");
static_assert(offsetof(ABP_CeilingFan_C, UberGraphFrame_BP_CeilingFan_C) == 0x000398, "Member 'ABP_CeilingFan_C::UberGraphFrame_BP_CeilingFan_C' has a wrong offset!");
static_assert(offsetof(ABP_CeilingFan_C, Blades_SM) == 0x0003A0, "Member 'ABP_CeilingFan_C::Blades_SM' has a wrong offset!");
static_assert(offsetof(ABP_CeilingFan_C, FanSpeed) == 0x0003A8, "Member 'ABP_CeilingFan_C::FanSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CeilingFan_C, CurrentFanSpeed) == 0x0003AC, "Member 'ABP_CeilingFan_C::CurrentFanSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CeilingFan_C, bFanShouldMove) == 0x0003B0, "Member 'ABP_CeilingFan_C::bFanShouldMove' has a wrong offset!");

}

