#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightZoneController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "EGBPowerSourceStatus_structs.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK::Params
{

// Function BP_LightZoneController.BP_LightZoneController_C.ExecuteUbergraph_BP_LightZoneController
// 0x03D0 (0x03D0 - 0x0000)
struct BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGBPowerSourceStatus                          CallFunc_GetPowerSourceStatus_PowerSourceStatus;   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerState*                         K2Node_DynamicCast_AsGBPlayer_State;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class AGBPlayerState* PlayerState)> K2Node_CreateDelegate_OutputDelegate;         // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	EGBPowerSourceStatus                          CallFunc_GetPowerSourceStatus_PowerSourceStatus_1; // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1; // 0x0058(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0068(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          CallFunc_GetPowerSourceStatus_PowerSourceStatus_2; // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          CallFunc_GetPowerSourceStatus_PowerSourceStatus_3; // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          CallFunc_GetPowerSourceStatus_PowerSourceStatus_4; // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x00A0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_3;     // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_4;     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_5;     // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_Controller_7;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller_6;                         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_UseType_5;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller_5;                         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_UseType_4;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Params_2;                             // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller_4;                         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_UseType_3;                            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller_3;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_UseType_2;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Params_1;                             // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller_2;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller_1;                         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_UseType_1;                            // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Params;                               // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerController*                    K2Node_DynamicCast_AsGBPlayer_Controller;          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Interaction_Highlight_C*           CallFunc_Create_ReturnValue;                       // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBLocalPlayer*                         CallFunc_GetGBLocalPlayer_ReturnValue;             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBLocalPlayer*                         CallFunc_GetGBLocalPlayer_ReturnValue_1;           // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBPlayerSettings*                      CallFunc_GetPlayerSettings_ReturnValue;            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBPlayerSettings*                      CallFunc_GetPlayerSettings_ReturnValue_1;          // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_GenericUse_Prompt_C*               CallFunc_Create_ReturnValue_1;                     // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_Controller;                           // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_UseType;                              // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bPullDown;                      // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_TouchedComponent_1;     // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_TouchedComponent;       // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_HitComponent;                   // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_NormalImpulse;                  // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_CustomEvent_Hit;                            // 0x0214(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBBulletProjectile*                    K2Node_DynamicCast_AsGBBullet_Projectile;          // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_SwitchAngle;                    // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x02D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0358(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerState*                         K2Node_CustomEvent_PlayerState;                    // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EReadyRoomStatus                              CallFunc_GetReadyRoomStatus_ReturnValue;           // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A[0x2];                                      // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExecuteAction_ReturnValue;                // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PowerSourceComponent_C*             K2Node_ComponentBoundEvent_InPowerSourceComp;      // 0x0388(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          CallFunc_GetPowerSourceStatus_PowerSourceStatus_5; // 0x0392(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0393(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          K2Node_ComponentBoundEvent_InSharedPowerStatus;    // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue_1;                   // 0x0395(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x0396(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0397(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> K2Node_CreateDelegate_OutputDelegate_2; // 0x039C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          Temp_byte_Variable;                                // 0x03B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGBPowerSourceStatus                          CallFunc_GetSharedPowerSourceStatus_PowerSourceStatus; // 0x03B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x03B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAkCallbackType                               K2Node_CustomEvent_CallbackType;                   // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        K2Node_CustomEvent_CallbackInfo;                   // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGBPowerSourceStatus                          Temp_byte_Variable_1;                              // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBPowerSourceStatus                          K2Node_Select_Default;                             // 0x03CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController) == 0x000008, "Wrong alignment on BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController");
static_assert(sizeof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController) == 0x0003D0, "Wrong size on BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, EntryPoint) == 0x000000, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, Temp_delegate_Variable) == 0x000008, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPowerSourceStatus_PowerSourceStatus) == 0x000020, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPowerSourceStatus_PowerSourceStatus' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_DynamicCast_AsGBPlayer_State) == 0x000028, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_DynamicCast_AsGBPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsServer_ReturnValue) == 0x000031, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsDedicatedServer_ReturnValue) == 0x000032, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Not_PreBool_ReturnValue) == 0x000033, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CreateDelegate_OutputDelegate) == 0x000034, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPowerSourceStatus_PowerSourceStatus_1) == 0x000044, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPowerSourceStatus_PowerSourceStatus_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000045, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Roll) == 0x000048, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Pitch) == 0x00004C, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Yaw) == 0x000050, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, Temp_delegate_Variable_1) == 0x000058, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CreateDelegate_OutputDelegate_1) == 0x000068, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000078, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Roll_1) == 0x00007C, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Pitch_1) == 0x000080, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Yaw_1) == 0x000084, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000088, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPowerSourceStatus_PowerSourceStatus_2) == 0x000089, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPowerSourceStatus_PowerSourceStatus_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00008A, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPowerSourceStatus_PowerSourceStatus_3) == 0x00008B, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPowerSourceStatus_PowerSourceStatus_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00008C, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPowerSourceStatus_PowerSourceStatus_4) == 0x00008D, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPowerSourceStatus_PowerSourceStatus_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x00008E, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00008F, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Roll_2) == 0x000090, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Pitch_2) == 0x000094, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Yaw_2) == 0x000098, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_InputActionEvent_Key) == 0x0000A0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x0000B8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NearlyEqual_FloatFloat_ReturnValue_3) == 0x0000B9, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NearlyEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BooleanOR_ReturnValue) == 0x0000BA, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Roll_3) == 0x0000BC, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Pitch_3) == 0x0000C0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Yaw_3) == 0x0000C4, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NearlyEqual_FloatFloat_ReturnValue_4) == 0x0000C8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NearlyEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_NearlyEqual_FloatFloat_ReturnValue_5) == 0x0000C9, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_NearlyEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BooleanOR_ReturnValue_1) == 0x0000CA, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_7) == 0x0000D0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_7' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_6) == 0x0000D8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_6' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_UseType_5) == 0x0000E0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_UseType_5' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_5) == 0x0000E8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_5' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_UseType_4) == 0x0000F0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_UseType_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Params_2) == 0x0000F8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Params_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_4) == 0x000108, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_UseType_3) == 0x000110, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_UseType_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_3) == 0x000118, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_UseType_2) == 0x000120, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_UseType_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Params_1) == 0x000128, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Params_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_2) == 0x000138, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller_1) == 0x000140, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_UseType_1) == 0x000148, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_UseType_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Params) == 0x000150, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Params' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPlayerController_ReturnValue_1) == 0x000160, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Add_IntInt_ReturnValue) == 0x000168, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_DynamicCast_AsGBPlayer_Controller) == 0x000170, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_DynamicCast_AsGBPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_DynamicCast_bSuccess_1) == 0x000178, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Create_ReturnValue) == 0x000180, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPlayerController_ReturnValue_2) == 0x000188, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetGBLocalPlayer_ReturnValue) == 0x000190, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetGBLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetGBLocalPlayer_ReturnValue_1) == 0x000198, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetGBLocalPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPlayerSettings_ReturnValue) == 0x0001A0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPlayerSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPlayerSettings_ReturnValue_1) == 0x0001A8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPlayerSettings_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPlayerController_ReturnValue_3) == 0x0001B0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Create_ReturnValue_1) == 0x0001B8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_Controller) == 0x0001C0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Event_UseType) == 0x0001C8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Event_UseType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001D0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_bPullDown) == 0x0001DC, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_bPullDown' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_ComponentBoundEvent_TouchedComponent_1) == 0x0001E0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_ComponentBoundEvent_TouchedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_ComponentBoundEvent_TouchedComponent) == 0x0001E8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_ComponentBoundEvent_TouchedComponent' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_HitComponent) == 0x0001F0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_OtherActor) == 0x0001F8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_OtherComp) == 0x000200, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_NormalImpulse) == 0x000208, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_Hit) == 0x000214, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_DynamicCast_AsGBBullet_Projectile) == 0x0002A0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_DynamicCast_AsGBBullet_Projectile' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_DynamicCast_bSuccess_2) == 0x0002A8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_SwitchAngle) == 0x0002AC, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_SwitchAngle' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Roll_4) == 0x0002B0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Pitch_4) == 0x0002B4, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_BreakRotator_Yaw_4) == 0x0002B8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_SelectFloat_ReturnValue) == 0x0002BC, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002C0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_MakeRotator_ReturnValue) == 0x0002C4, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0002D0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000358, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_PostAkEvent_ReturnValue) == 0x000360, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_PlayerState) == 0x000368, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetReadyRoomStatus_ReturnValue) == 0x000370, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetReadyRoomStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000371, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_SelectFloat_ReturnValue_1) == 0x000374, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000378, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Greater_IntInt_ReturnValue) == 0x000379, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_PostAkEvent_ReturnValue_1) == 0x00037C, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_ExecuteAction_ReturnValue) == 0x000380, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_ExecuteAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_ComponentBoundEvent_InPowerSourceComp) == 0x000388, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_ComponentBoundEvent_InPowerSourceComp' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x000390, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_Not_PreBool_ReturnValue_1) == 0x000391, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetPowerSourceStatus_PowerSourceStatus_5) == 0x000392, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetPowerSourceStatus_PowerSourceStatus_5' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000393, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_ComponentBoundEvent_InSharedPowerStatus) == 0x000394, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_ComponentBoundEvent_InSharedPowerStatus' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsServer_ReturnValue_1) == 0x000395, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x000396, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_HasAuthority_ReturnValue) == 0x000397, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_IsValid_ReturnValue_1) == 0x000398, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CreateDelegate_OutputDelegate_2) == 0x00039C, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_PostAkEvent_ReturnValue_2) == 0x0003AC, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, Temp_int_Variable) == 0x0003B0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0003B4, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, Temp_byte_Variable) == 0x0003B5, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_GetSharedPowerSourceStatus_PowerSourceStatus) == 0x0003B6, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_GetSharedPowerSourceStatus_PowerSourceStatus' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0003B7, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_CallbackType) == 0x0003B8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_CallbackType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_CustomEvent_CallbackInfo) == 0x0003C0, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_CustomEvent_CallbackInfo' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, Temp_byte_Variable_1) == 0x0003C8, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, Temp_bool_Variable) == 0x0003C9, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController, K2Node_Select_Default) == 0x0003CA, "Member 'BP_LightZoneController_C_ExecuteUbergraph_BP_LightZoneController::K2Node_Select_Default' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.OnPostEventCalback
// 0x0010 (0x0010 - 0x0000)
struct BP_LightZoneController_C_OnPostEventCalback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_OnPostEventCalback) == 0x000008, "Wrong alignment on BP_LightZoneController_C_OnPostEventCalback");
static_assert(sizeof(BP_LightZoneController_C_OnPostEventCalback) == 0x000010, "Wrong size on BP_LightZoneController_C_OnPostEventCalback");
static_assert(offsetof(BP_LightZoneController_C_OnPostEventCalback, CallbackType) == 0x000000, "Member 'BP_LightZoneController_C_OnPostEventCalback::CallbackType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_OnPostEventCalback, CallbackInfo) == 0x000008, "Member 'BP_LightZoneController_C_OnPostEventCalback::CallbackInfo' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature final
{
public:
	EGBPowerSourceStatus                          InSharedPowerStatus;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature) == 0x000001, "Wrong alignment on BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature");
static_assert(sizeof(BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature) == 0x000001, "Wrong size on BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature");
static_assert(offsetof(BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature, InSharedPowerStatus) == 0x000000, "Member 'BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature::InSharedPowerStatus' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature final
{
public:
	class UBP_PowerSourceComponent_C*             InPowerSourceComp;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature) == 0x000008, "Wrong alignment on BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature");
static_assert(sizeof(BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature) == 0x000008, "Wrong size on BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature");
static_assert(offsetof(BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature, InPowerSourceComp) == 0x000000, "Member 'BP_LightZoneController_C_BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature::InPowerSourceComp' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.OnPlayerReadyRoomStatusChanged_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0 final
{
public:
	class AGBPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0) == 0x000008, "Wrong alignment on BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0");
static_assert(sizeof(BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0) == 0x000008, "Wrong size on BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0");
static_assert(offsetof(BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0, PlayerState) == 0x000000, "Member 'BP_LightZoneController_C_OnPlayerReadyRoomStatusChanged_Event_0::PlayerState' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.SetSwitchPosition
// 0x0004 (0x0004 - 0x0000)
struct BP_LightZoneController_C_SetSwitchPosition final
{
public:
	float                                         SwitchAngle;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_SetSwitchPosition) == 0x000004, "Wrong alignment on BP_LightZoneController_C_SetSwitchPosition");
static_assert(sizeof(BP_LightZoneController_C_SetSwitchPosition) == 0x000004, "Wrong size on BP_LightZoneController_C_SetSwitchPosition");
static_assert(offsetof(BP_LightZoneController_C_SetSwitchPosition, SwitchAngle) == 0x000000, "Member 'BP_LightZoneController_C_SetSwitchPosition::SwitchAngle' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.OnComponentHit_Event_1
// 0x00B0 (0x00B0 - 0x0000)
struct BP_LightZoneController_C_OnComponentHit_Event_1 final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_LightZoneController_C_OnComponentHit_Event_1) == 0x000008, "Wrong alignment on BP_LightZoneController_C_OnComponentHit_Event_1");
static_assert(sizeof(BP_LightZoneController_C_OnComponentHit_Event_1) == 0x0000B0, "Wrong size on BP_LightZoneController_C_OnComponentHit_Event_1");
static_assert(offsetof(BP_LightZoneController_C_OnComponentHit_Event_1, HitComponent) == 0x000000, "Member 'BP_LightZoneController_C_OnComponentHit_Event_1::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_OnComponentHit_Event_1, OtherActor) == 0x000008, "Member 'BP_LightZoneController_C_OnComponentHit_Event_1::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_OnComponentHit_Event_1, OtherComp) == 0x000010, "Member 'BP_LightZoneController_C_OnComponentHit_Event_1::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_OnComponentHit_Event_1, NormalImpulse) == 0x000018, "Member 'BP_LightZoneController_C_OnComponentHit_Event_1::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_OnComponentHit_Event_1, Hit) == 0x000024, "Member 'BP_LightZoneController_C_OnComponentHit_Event_1::Hit' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature");
static_assert(sizeof(BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature) == 0x000008, "Wrong size on BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature");
static_assert(offsetof(BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature, TouchedComponent) == 0x000000, "Member 'BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature::TouchedComponent' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature");
static_assert(sizeof(BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature) == 0x000008, "Wrong size on BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature");
static_assert(offsetof(BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature, TouchedComponent) == 0x000000, "Member 'BP_LightZoneController_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature::TouchedComponent' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.AnimateMulticast
// 0x0001 (0x0001 - 0x0000)
struct BP_LightZoneController_C_AnimateMulticast final
{
public:
	bool                                          bPullDown;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightZoneController_C_AnimateMulticast) == 0x000001, "Wrong alignment on BP_LightZoneController_C_AnimateMulticast");
static_assert(sizeof(BP_LightZoneController_C_AnimateMulticast) == 0x000001, "Wrong size on BP_LightZoneController_C_AnimateMulticast");
static_assert(offsetof(BP_LightZoneController_C_AnimateMulticast, bPullDown) == 0x000000, "Member 'BP_LightZoneController_C_AnimateMulticast::bPullDown' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.ServerUse
// 0x0010 (0x0010 - 0x0000)
struct BP_LightZoneController_C_ServerUse final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_ServerUse) == 0x000008, "Wrong alignment on BP_LightZoneController_C_ServerUse");
static_assert(sizeof(BP_LightZoneController_C_ServerUse) == 0x000010, "Wrong size on BP_LightZoneController_C_ServerUse");
static_assert(offsetof(BP_LightZoneController_C_ServerUse, Controller) == 0x000000, "Member 'BP_LightZoneController_C_ServerUse::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ServerUse, UseType) == 0x000008, "Member 'BP_LightZoneController_C_ServerUse::UseType' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.ServerUseWithParams
// 0x0020 (0x0020 - 0x0000)
struct BP_LightZoneController_C_ServerUseWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_ServerUseWithParams) == 0x000008, "Wrong alignment on BP_LightZoneController_C_ServerUseWithParams");
static_assert(sizeof(BP_LightZoneController_C_ServerUseWithParams) == 0x000020, "Wrong size on BP_LightZoneController_C_ServerUseWithParams");
static_assert(offsetof(BP_LightZoneController_C_ServerUseWithParams, Controller) == 0x000000, "Member 'BP_LightZoneController_C_ServerUseWithParams::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ServerUseWithParams, UseType) == 0x000008, "Member 'BP_LightZoneController_C_ServerUseWithParams::UseType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ServerUseWithParams, Params_0) == 0x000010, "Member 'BP_LightZoneController_C_ServerUseWithParams::Params_0' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.RemoveUser
// 0x0008 (0x0008 - 0x0000)
struct BP_LightZoneController_C_RemoveUser final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_RemoveUser) == 0x000008, "Wrong alignment on BP_LightZoneController_C_RemoveUser");
static_assert(sizeof(BP_LightZoneController_C_RemoveUser) == 0x000008, "Wrong size on BP_LightZoneController_C_RemoveUser");
static_assert(offsetof(BP_LightZoneController_C_RemoveUser, Controller) == 0x000000, "Member 'BP_LightZoneController_C_RemoveUser::Controller' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.ClientUseWithParams
// 0x0020 (0x0020 - 0x0000)
struct BP_LightZoneController_C_ClientUseWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_ClientUseWithParams) == 0x000008, "Wrong alignment on BP_LightZoneController_C_ClientUseWithParams");
static_assert(sizeof(BP_LightZoneController_C_ClientUseWithParams) == 0x000020, "Wrong size on BP_LightZoneController_C_ClientUseWithParams");
static_assert(offsetof(BP_LightZoneController_C_ClientUseWithParams, Controller) == 0x000000, "Member 'BP_LightZoneController_C_ClientUseWithParams::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ClientUseWithParams, UseType) == 0x000008, "Member 'BP_LightZoneController_C_ClientUseWithParams::UseType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ClientUseWithParams, Params_0) == 0x000010, "Member 'BP_LightZoneController_C_ClientUseWithParams::Params_0' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.ClientUse
// 0x0010 (0x0010 - 0x0000)
struct BP_LightZoneController_C_ClientUse final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_ClientUse) == 0x000008, "Wrong alignment on BP_LightZoneController_C_ClientUse");
static_assert(sizeof(BP_LightZoneController_C_ClientUse) == 0x000010, "Wrong size on BP_LightZoneController_C_ClientUse");
static_assert(offsetof(BP_LightZoneController_C_ClientUse, Controller) == 0x000000, "Member 'BP_LightZoneController_C_ClientUse::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_ClientUse, UseType) == 0x000008, "Member 'BP_LightZoneController_C_ClientUse::UseType' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.AIUseWithParams
// 0x0020 (0x0020 - 0x0000)
struct BP_LightZoneController_C_AIUseWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_AIUseWithParams) == 0x000008, "Wrong alignment on BP_LightZoneController_C_AIUseWithParams");
static_assert(sizeof(BP_LightZoneController_C_AIUseWithParams) == 0x000020, "Wrong size on BP_LightZoneController_C_AIUseWithParams");
static_assert(offsetof(BP_LightZoneController_C_AIUseWithParams, Controller) == 0x000000, "Member 'BP_LightZoneController_C_AIUseWithParams::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIUseWithParams, UseType) == 0x000008, "Member 'BP_LightZoneController_C_AIUseWithParams::UseType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIUseWithParams, Params_0) == 0x000010, "Member 'BP_LightZoneController_C_AIUseWithParams::Params_0' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.AIUse
// 0x0010 (0x0010 - 0x0000)
struct BP_LightZoneController_C_AIUse final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_AIUse) == 0x000008, "Wrong alignment on BP_LightZoneController_C_AIUse");
static_assert(sizeof(BP_LightZoneController_C_AIUse) == 0x000010, "Wrong size on BP_LightZoneController_C_AIUse");
static_assert(offsetof(BP_LightZoneController_C_AIUse, Controller) == 0x000000, "Member 'BP_LightZoneController_C_AIUse::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIUse, UseType) == 0x000008, "Member 'BP_LightZoneController_C_AIUse::UseType' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.AddUser
// 0x0008 (0x0008 - 0x0000)
struct BP_LightZoneController_C_AddUser final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_AddUser) == 0x000008, "Wrong alignment on BP_LightZoneController_C_AddUser");
static_assert(sizeof(BP_LightZoneController_C_AddUser) == 0x000008, "Wrong size on BP_LightZoneController_C_AddUser");
static_assert(offsetof(BP_LightZoneController_C_AddUser, Controller) == 0x000000, "Member 'BP_LightZoneController_C_AddUser::Controller' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.InpActEvt_Interact_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_LightZoneController_C_InpActEvt_Interact_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BP_LightZoneController_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               NewLocalVar_0;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightZoneController_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_LightZoneController_C_UserConstructionScript");
static_assert(sizeof(BP_LightZoneController_C_UserConstructionScript) == 0x000020, "Wrong size on BP_LightZoneController_C_UserConstructionScript");
static_assert(offsetof(BP_LightZoneController_C_UserConstructionScript, NewLocalVar_0) == 0x000000, "Member 'BP_LightZoneController_C_UserConstructionScript::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_UserConstructionScript, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_LightZoneController_C_UserConstructionScript::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_LightZoneController_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_UserConstructionScript, CallFunc_BooleanAND_ReturnValue) == 0x00000D, "Member 'BP_LightZoneController_C_UserConstructionScript::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue) == 0x00000E, "Member 'BP_LightZoneController_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_UserConstructionScript, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000010, "Member 'BP_LightZoneController_C_UserConstructionScript::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.AIQuestionWithParams
// 0x0028 (0x0028 - 0x0000)
struct BP_LightZoneController_C_AIQuestionWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_AIQuestionWithParams) == 0x000008, "Wrong alignment on BP_LightZoneController_C_AIQuestionWithParams");
static_assert(sizeof(BP_LightZoneController_C_AIQuestionWithParams) == 0x000028, "Wrong size on BP_LightZoneController_C_AIQuestionWithParams");
static_assert(offsetof(BP_LightZoneController_C_AIQuestionWithParams, Controller) == 0x000000, "Member 'BP_LightZoneController_C_AIQuestionWithParams::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIQuestionWithParams, UseType) == 0x000008, "Member 'BP_LightZoneController_C_AIQuestionWithParams::UseType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIQuestionWithParams, Params_0) == 0x000010, "Member 'BP_LightZoneController_C_AIQuestionWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIQuestionWithParams, ReturnValue) == 0x000020, "Member 'BP_LightZoneController_C_AIQuestionWithParams::ReturnValue' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.AIQuestion
// 0x0018 (0x0018 - 0x0000)
struct BP_LightZoneController_C_AIQuestion final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseType;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_AIQuestion) == 0x000008, "Wrong alignment on BP_LightZoneController_C_AIQuestion");
static_assert(sizeof(BP_LightZoneController_C_AIQuestion) == 0x000018, "Wrong size on BP_LightZoneController_C_AIQuestion");
static_assert(offsetof(BP_LightZoneController_C_AIQuestion, Controller) == 0x000000, "Member 'BP_LightZoneController_C_AIQuestion::Controller' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIQuestion, UseType) == 0x000008, "Member 'BP_LightZoneController_C_AIQuestion::UseType' has a wrong offset!");
static_assert(offsetof(BP_LightZoneController_C_AIQuestion, ReturnValue) == 0x000010, "Member 'BP_LightZoneController_C_AIQuestion::ReturnValue' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.GetNumUsers
// 0x0004 (0x0004 - 0x0000)
struct BP_LightZoneController_C_GetNumUsers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightZoneController_C_GetNumUsers) == 0x000004, "Wrong alignment on BP_LightZoneController_C_GetNumUsers");
static_assert(sizeof(BP_LightZoneController_C_GetNumUsers) == 0x000004, "Wrong size on BP_LightZoneController_C_GetNumUsers");
static_assert(offsetof(BP_LightZoneController_C_GetNumUsers, ReturnValue) == 0x000000, "Member 'BP_LightZoneController_C_GetNumUsers::ReturnValue' has a wrong offset!");

// Function BP_LightZoneController.BP_LightZoneController_C.IsTeamSpecific
// 0x0001 (0x0001 - 0x0000)
struct BP_LightZoneController_C_IsTeamSpecific final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightZoneController_C_IsTeamSpecific) == 0x000001, "Wrong alignment on BP_LightZoneController_C_IsTeamSpecific");
static_assert(sizeof(BP_LightZoneController_C_IsTeamSpecific) == 0x000001, "Wrong size on BP_LightZoneController_C_IsTeamSpecific");
static_assert(offsetof(BP_LightZoneController_C_IsTeamSpecific, ReturnValue) == 0x000000, "Member 'BP_LightZoneController_C_IsTeamSpecific::ReturnValue' has a wrong offset!");

}

