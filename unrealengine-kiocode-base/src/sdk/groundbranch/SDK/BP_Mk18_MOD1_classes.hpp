#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mk18_MOD1

#include "Basic.hpp"

#include "BP_AR15_Master_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mk18_MOD1.BP_Mk18_MOD1_C
// 0x0030 (0x05E0 - 0x05B0)
class ABP_Mk18_MOD1_C final : public ABP_AR15_Master_C
{
public:
	class UGBRailComponent*                       LeftRail;                                          // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBRailComponent*                       RightRail;                                         // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBRailComponent*                       BottomRail;                                        // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBRailComponent*                       TopRail;                                           // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBRailComponent*                       RearSightRail;                                     // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBSightComponent*                      FailSafeSight;                                     // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mk18_MOD1_C">();
	}
	static class ABP_Mk18_MOD1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mk18_MOD1_C>();
	}
};
static_assert(alignof(ABP_Mk18_MOD1_C) == 0x000008, "Wrong alignment on ABP_Mk18_MOD1_C");
static_assert(sizeof(ABP_Mk18_MOD1_C) == 0x0005E0, "Wrong size on ABP_Mk18_MOD1_C");
static_assert(offsetof(ABP_Mk18_MOD1_C, LeftRail) == 0x0005B0, "Member 'ABP_Mk18_MOD1_C::LeftRail' has a wrong offset!");
static_assert(offsetof(ABP_Mk18_MOD1_C, RightRail) == 0x0005B8, "Member 'ABP_Mk18_MOD1_C::RightRail' has a wrong offset!");
static_assert(offsetof(ABP_Mk18_MOD1_C, BottomRail) == 0x0005C0, "Member 'ABP_Mk18_MOD1_C::BottomRail' has a wrong offset!");
static_assert(offsetof(ABP_Mk18_MOD1_C, TopRail) == 0x0005C8, "Member 'ABP_Mk18_MOD1_C::TopRail' has a wrong offset!");
static_assert(offsetof(ABP_Mk18_MOD1_C, RearSightRail) == 0x0005D0, "Member 'ABP_Mk18_MOD1_C::RearSightRail' has a wrong offset!");
static_assert(offsetof(ABP_Mk18_MOD1_C, FailSafeSight) == 0x0005D8, "Member 'ABP_Mk18_MOD1_C::FailSafeSight' has a wrong offset!");

}

