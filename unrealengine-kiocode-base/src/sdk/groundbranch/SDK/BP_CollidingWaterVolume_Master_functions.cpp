#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollidingWaterVolume_Master

#include "Basic.hpp"

#include "BP_CollidingWaterVolume_Master_classes.hpp"
#include "BP_CollidingWaterVolume_Master_parameters.hpp"


namespace SDK
{

// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ExecuteUbergraph_BP_CollidingWaterVolume_Master
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollidingWaterVolume_Master_C::ExecuteUbergraph_BP_CollidingWaterVolume_Master(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ExecuteUbergraph_BP_CollidingWaterVolume_Master");

	Params::BP_CollidingWaterVolume_Master_C_ExecuteUbergraph_BP_CollidingWaterVolume_Master Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.SetAssociatedWaterSurfaceVis
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollidingWaterVolume_Master_C::SetAssociatedWaterSurfaceVis(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "SetAssociatedWaterSurfaceVis");

	Params::BP_CollidingWaterVolume_Master_C_SetAssociatedWaterSurfaceVis Parms{};

	Parms.bNewVisible = bNewVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.RemoveShared
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::RemoveShared()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "RemoveShared");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.K2_OnReset
// (Event, Public, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::K2_OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "K2_OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollidingWaterVolume_Master_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ReceiveEndPlay");

	Params::BP_CollidingWaterVolume_Master_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ApplyOrDisapplyUnderwaterEffects
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  BP_Character                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpectating                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollidingWaterVolume_Master_C::ApplyOrDisapplyUnderwaterEffects(class ABP_Character_C* BP_Character, bool bSpectating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ApplyOrDisapplyUnderwaterEffects");

	Params::BP_CollidingWaterVolume_Master_C_ApplyOrDisapplyUnderwaterEffects Parms{};

	Parms.BP_Character = BP_Character;
	Parms.bSpectating = bSpectating;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.UnapplyUnderwaterClientFX
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::UnapplyUnderwaterClientFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "UnapplyUnderwaterClientFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ApplyUnderwaterClientFX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSpectating                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollidingWaterVolume_Master_C::ApplyUnderwaterClientFX(bool bSpectating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ApplyUnderwaterClientFX");

	Params::BP_CollidingWaterVolume_Master_C_ApplyUnderwaterClientFX Parms{};

	Parms.bSpectating = bSpectating;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ApplyUnderwaterSoundFilter
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::ApplyUnderwaterSoundFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ApplyUnderwaterSoundFilter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.RemoveUnderwaterSoundFilter
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::RemoveUnderwaterSoundFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "RemoveUnderwaterSoundFilter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollidingWaterVolume_Master_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ReceiveTick");

	Params::BP_CollidingWaterVolume_Master_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ClearBreathEffects
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::ClearBreathEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ClearBreathEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.SetDrownEffectAmount
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EffectAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollidingWaterVolume_Master_C::SetDrownEffectAmount(float EffectAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "SetDrownEffectAmount");

	Params::BP_CollidingWaterVolume_Master_C_SetDrownEffectAmount Parms{};

	Parms.EffectAmount = EffectAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.BreathTimerFinishEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::BreathTimerFinishEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "BreathTimerFinishEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.InitBreathEffects
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::InitBreathEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "InitBreathEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.SetupSoundLeftWater
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::SetupSoundLeftWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "SetupSoundLeftWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.SetupSoundEnteredWater
// (BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::SetupSoundEnteredWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "SetupSoundEnteredWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.ActivateUnderwaterPostProcess
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollidingWaterVolume_Master_C::ActivateUnderwaterPostProcess(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "ActivateUnderwaterPostProcess");

	Params::BP_CollidingWaterVolume_Master_C_ActivateUnderwaterPostProcess Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollidingWaterVolume_Master_C::BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_CollidingWaterVolume_Master_C_BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_CollidingWaterVolume_Master_C::BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_CollidingWaterVolume_Master_C_BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CollidingWaterVolume_Master_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollidingWaterVolume_Master_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

