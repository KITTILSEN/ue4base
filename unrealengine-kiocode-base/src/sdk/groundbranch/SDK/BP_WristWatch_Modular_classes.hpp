#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WristWatch_Modular

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WristWatch_Modular.BP_WristWatch_Modular_C
// 0x0038 (0x0480 - 0x0448)
class ABP_WristWatch_Modular_C final : public AGBInvItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   S_Watch;                                           // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         NonPlayerWatchRedrawInterval;                      // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0468(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_WristWatch_Modular(int32 EntryPoint);
	void OnSelected_Watch_Event(int32 Index_0);
	void AddAttachedUseMenuEntries(class UUserWidget* UsageMenu);
	void OnAddedToInventoryEvent(class AGBCharacter* Character);
	void OnReceivePlayerState_Event_0(class AGBPlayerState* GBPlayerState);
	void OnEndViewTarget_Event_0(class APlayerController* PlayerController, class AGBCharacter* Character);
	void OnBecomeViewTarget_Event_0(class APlayerController* PlayerController, class AGBCharacter* Character);
	void OnLoaded_ACB25BB1431690D222BD5B836B55DB38(TSubclassOf<class UObject> Loaded);
	bool AllowUsageWhileAttached();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WristWatch_Modular_C">();
	}
	static class ABP_WristWatch_Modular_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WristWatch_Modular_C>();
	}
};
static_assert(alignof(ABP_WristWatch_Modular_C) == 0x000008, "Wrong alignment on ABP_WristWatch_Modular_C");
static_assert(sizeof(ABP_WristWatch_Modular_C) == 0x000480, "Wrong size on ABP_WristWatch_Modular_C");
static_assert(offsetof(ABP_WristWatch_Modular_C, UberGraphFrame) == 0x000448, "Member 'ABP_WristWatch_Modular_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WristWatch_Modular_C, S_Watch) == 0x000450, "Member 'ABP_WristWatch_Modular_C::S_Watch' has a wrong offset!");
static_assert(offsetof(ABP_WristWatch_Modular_C, Widget) == 0x000458, "Member 'ABP_WristWatch_Modular_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_WristWatch_Modular_C, NonPlayerWatchRedrawInterval) == 0x000460, "Member 'ABP_WristWatch_Modular_C::NonPlayerWatchRedrawInterval' has a wrong offset!");
static_assert(offsetof(ABP_WristWatch_Modular_C, Text) == 0x000468, "Member 'ABP_WristWatch_Modular_C::Text' has a wrong offset!");

}

