#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DroppedCosmetic

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DroppedCosmetic.BP_DroppedCosmetic_C
// 0x0018 (0x0238 - 0x0220)
class ABP_DroppedCosmetic_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   CostmeticSM;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemCollisionProfile;                              // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DroppedCosmetic(int32 EntryPoint);
	void K2_OnReset();
	void Setup(class UStaticMeshComponent* Target, const struct FVector& NewVel);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DroppedCosmetic_C">();
	}
	static class ABP_DroppedCosmetic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DroppedCosmetic_C>();
	}
};
static_assert(alignof(ABP_DroppedCosmetic_C) == 0x000008, "Wrong alignment on ABP_DroppedCosmetic_C");
static_assert(sizeof(ABP_DroppedCosmetic_C) == 0x000238, "Wrong size on ABP_DroppedCosmetic_C");
static_assert(offsetof(ABP_DroppedCosmetic_C, UberGraphFrame) == 0x000220, "Member 'ABP_DroppedCosmetic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DroppedCosmetic_C, CostmeticSM) == 0x000228, "Member 'ABP_DroppedCosmetic_C::CostmeticSM' has a wrong offset!");
static_assert(offsetof(ABP_DroppedCosmetic_C, ItemCollisionProfile) == 0x000230, "Member 'ABP_DroppedCosmetic_C::ItemCollisionProfile' has a wrong offset!");

}

