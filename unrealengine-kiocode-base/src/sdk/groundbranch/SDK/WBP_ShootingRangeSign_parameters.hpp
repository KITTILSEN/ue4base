#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ShootingRangeSign

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_ShootingRangeSign.WBP_ShootingRangeSign_C.ExecuteUbergraph_WBP_ShootingRangeSign
// 0x0060 (0x0060 - 0x0000)
struct WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign) == 0x000008, "Wrong alignment on WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign");
static_assert(sizeof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign) == 0x000060, "Wrong size on WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, EntryPoint) == 0x000000, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, CallFunc_GetDesiredSize_ReturnValue) == 0x000044, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'WBP_ShootingRangeSign_C_ExecuteUbergraph_WBP_ShootingRangeSign::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_ShootingRangeSign.WBP_ShootingRangeSign_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_ShootingRangeSign_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ShootingRangeSign_C_Tick) == 0x000004, "Wrong alignment on WBP_ShootingRangeSign_C_Tick");
static_assert(sizeof(WBP_ShootingRangeSign_C_Tick) == 0x00003C, "Wrong size on WBP_ShootingRangeSign_C_Tick");
static_assert(offsetof(WBP_ShootingRangeSign_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_ShootingRangeSign_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_ShootingRangeSign_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_ShootingRangeSign_C_Tick::InDeltaTime' has a wrong offset!");

}

