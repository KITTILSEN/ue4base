#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Spectator_PlayerNamePlate

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Spectator_PlayerNamePlate.WBP_Spectator_PlayerNamePlate_C
// 0x00C0 (0x0320 - 0x0260)
class UWBP_Spectator_PlayerNamePlate_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_0;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TeamElementIcon;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_1;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AGBPlayerState*                         PlayerState;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                NameLocation;                                      // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x02A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NonTraceMaxDistanceSq;                             // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRotation;                                    // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinDot;                                            // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceSq;                                        // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceMaxDistanceSq;                                // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckSquadsTimeInterval;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETeamElement, TSoftObjectPtr<class UTexture2D>> TeamElementIcons;                           // 0x02D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	class FText Get_TextBlock_1_Text_0();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void Update();
	void CalcOnScreenPosition();
	void BindElementChanged();
	void CheckSquads();
	void OnTeamElementChanged_Event_0(class AGBPlayerState* PlayerState_0);
	void ExecuteUbergraph_WBP_Spectator_PlayerNamePlate(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Spectator_PlayerNamePlate_C">();
	}
	static class UWBP_Spectator_PlayerNamePlate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Spectator_PlayerNamePlate_C>();
	}
};
static_assert(alignof(UWBP_Spectator_PlayerNamePlate_C) == 0x000008, "Wrong alignment on UWBP_Spectator_PlayerNamePlate_C");
static_assert(sizeof(UWBP_Spectator_PlayerNamePlate_C) == 0x000320, "Wrong size on UWBP_Spectator_PlayerNamePlate_C");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, UberGraphFrame) == 0x000260, "Member 'UWBP_Spectator_PlayerNamePlate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, Border_0) == 0x000268, "Member 'UWBP_Spectator_PlayerNamePlate_C::Border_0' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, TeamElementIcon) == 0x000270, "Member 'UWBP_Spectator_PlayerNamePlate_C::TeamElementIcon' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, TextBlock_1) == 0x000278, "Member 'UWBP_Spectator_PlayerNamePlate_C::TextBlock_1' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, PlayerState) == 0x000280, "Member 'UWBP_Spectator_PlayerNamePlate_C::PlayerState' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, NameLocation) == 0x000288, "Member 'UWBP_Spectator_PlayerNamePlate_C::NameLocation' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, CameraLocation) == 0x000294, "Member 'UWBP_Spectator_PlayerNamePlate_C::CameraLocation' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, Direction) == 0x0002A0, "Member 'UWBP_Spectator_PlayerNamePlate_C::Direction' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, NonTraceMaxDistanceSq) == 0x0002AC, "Member 'UWBP_Spectator_PlayerNamePlate_C::NonTraceMaxDistanceSq' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, CameraRotation) == 0x0002B0, "Member 'UWBP_Spectator_PlayerNamePlate_C::CameraRotation' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, MinDot) == 0x0002BC, "Member 'UWBP_Spectator_PlayerNamePlate_C::MinDot' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, DistanceSq) == 0x0002C0, "Member 'UWBP_Spectator_PlayerNamePlate_C::DistanceSq' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, TraceMaxDistanceSq) == 0x0002C4, "Member 'UWBP_Spectator_PlayerNamePlate_C::TraceMaxDistanceSq' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, CheckSquadsTimeInterval) == 0x0002C8, "Member 'UWBP_Spectator_PlayerNamePlate_C::CheckSquadsTimeInterval' has a wrong offset!");
static_assert(offsetof(UWBP_Spectator_PlayerNamePlate_C, TeamElementIcons) == 0x0002D0, "Member 'UWBP_Spectator_PlayerNamePlate_C::TeamElementIcons' has a wrong offset!");

}

