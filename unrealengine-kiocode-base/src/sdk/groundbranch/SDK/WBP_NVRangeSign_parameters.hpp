#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NVRangeSign

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_NVRangeSign.WBP_NVRangeSign_C.ExecuteUbergraph_WBP_NVRangeSign
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0008(0x0018)()
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0018)()
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00A0(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign) == 0x000008, "Wrong alignment on WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign");
static_assert(sizeof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign) == 0x0000E0, "Wrong size on WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, EntryPoint) == 0x000000, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, K2Node_CustomEvent_InText) == 0x000008, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, K2Node_MakeArray_Array) == 0x000068, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, CallFunc_Format_ReturnValue) == 0x000078, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, CallFunc_GetDesiredSize_ReturnValue) == 0x000090, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, CallFunc_BreakVector2D_X) == 0x000098, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, CallFunc_BreakVector2D_Y) == 0x00009C, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, K2Node_Event_MyGeometry) == 0x0000A0, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, K2Node_Event_InDeltaTime) == 0x0000D8, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign, K2Node_Event_IsDesignTime) == 0x0000DC, "Member 'WBP_NVRangeSign_C_ExecuteUbergraph_WBP_NVRangeSign::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_NVRangeSign.WBP_NVRangeSign_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_NVRangeSign_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_NVRangeSign_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_NVRangeSign_C_PreConstruct");
static_assert(sizeof(WBP_NVRangeSign_C_PreConstruct) == 0x000001, "Wrong size on WBP_NVRangeSign_C_PreConstruct");
static_assert(offsetof(WBP_NVRangeSign_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_NVRangeSign_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_NVRangeSign.WBP_NVRangeSign_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_NVRangeSign_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_NVRangeSign_C_Tick) == 0x000004, "Wrong alignment on WBP_NVRangeSign_C_Tick");
static_assert(sizeof(WBP_NVRangeSign_C_Tick) == 0x00003C, "Wrong size on WBP_NVRangeSign_C_Tick");
static_assert(offsetof(WBP_NVRangeSign_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_NVRangeSign_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_NVRangeSign_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_NVRangeSign_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_NVRangeSign.WBP_NVRangeSign_C.UpdateText
// 0x0018 (0x0018 - 0x0000)
struct WBP_NVRangeSign_C_UpdateText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_NVRangeSign_C_UpdateText) == 0x000008, "Wrong alignment on WBP_NVRangeSign_C_UpdateText");
static_assert(sizeof(WBP_NVRangeSign_C_UpdateText) == 0x000018, "Wrong size on WBP_NVRangeSign_C_UpdateText");
static_assert(offsetof(WBP_NVRangeSign_C_UpdateText, InText) == 0x000000, "Member 'WBP_NVRangeSign_C_UpdateText::InText' has a wrong offset!");

}

