#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MissionSettings_TimeOfDay_Summary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MissionSettings_TimeOfDay_Summary.WBP_MissionSettings_TimeOfDay_Summary_C
// 0x0140 (0x03A0 - 0x0260)
class UWBP_MissionSettings_TimeOfDay_Summary_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             AmbientIntensityText;                              // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ClimateText;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DateText;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LocationText;                                      // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MissionCoordinatesText;                            // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MoonElevation;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MoonlightIntensityText;                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MoonPhaseIndicator;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MoonPhaseText_1;                                   // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         NightLightingInfo;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             NightNVGVisibilityText;                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             NightUnaidedVisibilityText;                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TimeText;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             WeatherForecastText;                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             WeatherVisibilityText;                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Year, int32 Month, int32 Day, EMissionTimeLabel TimePreset, float TimeOfDay, class FName WeatherCategory, class FName WeatherType)> OnDateTimeChanged; // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentSunriseTime;                                // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSunsetTime;                                 // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      MoonPhaseMaterialMI;                               // 0x02F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MoonPhaseMaterialMID;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentDay;                                        // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMonth;                                      // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentYear;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMissionTimeLabel                             SelectedMissionTimePreset;                         // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelectedMissionTime;                               // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunriseOrSunsetProximityTime;                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBSky*                                 GBSkyRef;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBWorldSettings*                       GBWorldSettingsRef;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           AllowedWeatherCategories;                          // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   Current_Weather_Category;                          // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Current_Weather_Type;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CurrentWeatherDescription;                         // 0x0370(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkyCreatorWeatherPreset*               CurrentWeatherPreset;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplaySimpleWeatherOnly;                         // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyCreatorWeatherPreset*               OnlyAllowedWeatherPreset;                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetIsNight(float SelectedTime, bool* IsNight);
	void GetDayOrNight(float SelectedTime, class FText* DayOrNightText);
	void GetMonthName(int32 MonthNumber_, class FText* MonthName);
	void Get_Validated_Military_Time(const class FString& InputTimeString, class FString* ValidatedInputTime);
	class UWidget* Get_EditableTextBox_String_HintText_0();
	void OnLoaded_D517B9A6327241FF93C593E70FA4A5D2(class UObject* Loaded);
	void OnMonthOrDayUpdated();
	void SetNewDate(int32 NewMonth, int32 NewDay);
	void UpdateMissionTimeFromPreset();
	void DisplayTimeOfDayText();
	void OnTimeUpdated();
	void SetNewCustomMissionTime(float NewMissionTime);
	void OnReceivedDataUpdate(int32 CurrentYear_0, int32 CurrentMonth_0, int32 CurrentDay_0, EMissionTimeLabel CurrentTimePreset, float CurrentTimeOfDay, class FName CurrentWeatherCategory, class FName CurrentWeatherType);
	void UpdateMoonPhase();
	void UpdateAllOtherRandomStuff();
	void OneTimeInfoUpdate();
	void LoadWeatherPreset();
	void OnLoadedWeatherPreset(class UObject* LoadedAsset);
	void SetDisplaySimpleWeatherOnly(bool bDisplaySimpleWeatherOnly_0);
	void BuildListOfWeatherCategories();
	void Construct();
	void ExecuteUbergraph_WBP_MissionSettings_TimeOfDay_Summary(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MissionSettings_TimeOfDay_Summary_C">();
	}
	static class UWBP_MissionSettings_TimeOfDay_Summary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MissionSettings_TimeOfDay_Summary_C>();
	}
};
static_assert(alignof(UWBP_MissionSettings_TimeOfDay_Summary_C) == 0x000008, "Wrong alignment on UWBP_MissionSettings_TimeOfDay_Summary_C");
static_assert(sizeof(UWBP_MissionSettings_TimeOfDay_Summary_C) == 0x0003A0, "Wrong size on UWBP_MissionSettings_TimeOfDay_Summary_C");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, UberGraphFrame) == 0x000260, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, AmbientIntensityText) == 0x000268, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::AmbientIntensityText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, ClimateText) == 0x000270, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::ClimateText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, DateText) == 0x000278, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::DateText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, LocationText) == 0x000280, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::LocationText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MissionCoordinatesText) == 0x000288, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MissionCoordinatesText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MoonElevation) == 0x000290, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MoonElevation' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MoonlightIntensityText) == 0x000298, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MoonlightIntensityText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MoonPhaseIndicator) == 0x0002A0, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MoonPhaseIndicator' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MoonPhaseText_1) == 0x0002A8, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MoonPhaseText_1' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, NightLightingInfo) == 0x0002B0, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::NightLightingInfo' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, NightNVGVisibilityText) == 0x0002B8, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::NightNVGVisibilityText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, NightUnaidedVisibilityText) == 0x0002C0, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::NightUnaidedVisibilityText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, TimeText) == 0x0002C8, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::TimeText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, WeatherForecastText) == 0x0002D0, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::WeatherForecastText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, WeatherVisibilityText) == 0x0002D8, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::WeatherVisibilityText' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, OnDateTimeChanged) == 0x0002E0, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::OnDateTimeChanged' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentSunriseTime) == 0x0002F0, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentSunriseTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentSunsetTime) == 0x0002F4, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentSunsetTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MoonPhaseMaterialMI) == 0x0002F8, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MoonPhaseMaterialMI' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, MoonPhaseMaterialMID) == 0x000320, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::MoonPhaseMaterialMID' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentDay) == 0x000328, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentDay' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentMonth) == 0x00032C, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentMonth' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentYear) == 0x000330, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentYear' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, SelectedMissionTimePreset) == 0x000334, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::SelectedMissionTimePreset' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, SelectedMissionTime) == 0x000338, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::SelectedMissionTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, SunriseOrSunsetProximityTime) == 0x00033C, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::SunriseOrSunsetProximityTime' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, GBSkyRef) == 0x000340, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::GBSkyRef' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, GBWorldSettingsRef) == 0x000348, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::GBWorldSettingsRef' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, AllowedWeatherCategories) == 0x000350, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::AllowedWeatherCategories' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, Current_Weather_Category) == 0x000360, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::Current_Weather_Category' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, Current_Weather_Type) == 0x000368, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::Current_Weather_Type' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentWeatherDescription) == 0x000370, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentWeatherDescription' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, CurrentWeatherPreset) == 0x000388, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::CurrentWeatherPreset' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, bDisplaySimpleWeatherOnly) == 0x000390, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::bDisplaySimpleWeatherOnly' has a wrong offset!");
static_assert(offsetof(UWBP_MissionSettings_TimeOfDay_Summary_C, OnlyAllowedWeatherPreset) == 0x000398, "Member 'UWBP_MissionSettings_TimeOfDay_Summary_C::OnlyAllowedWeatherPreset' has a wrong offset!");

}

