#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBSurfaceLink

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class RBSurfaceLink.RBSurfaceLink
// 0x0030 (0x0058 - 0x0028)
class URBSurfaceLink final : public UObject
{
public:
	class FName                                   Type;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LinkedClass;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCosmeticOnly;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBSurfaceLink">();
	}
	static class URBSurfaceLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBSurfaceLink>();
	}
};
static_assert(alignof(URBSurfaceLink) == 0x000008, "Wrong alignment on URBSurfaceLink");
static_assert(sizeof(URBSurfaceLink) == 0x000058, "Wrong size on URBSurfaceLink");
static_assert(offsetof(URBSurfaceLink, Type) == 0x000028, "Member 'URBSurfaceLink::Type' has a wrong offset!");
static_assert(offsetof(URBSurfaceLink, PhysicalMaterial) == 0x000030, "Member 'URBSurfaceLink::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(URBSurfaceLink, LinkedClass) == 0x000038, "Member 'URBSurfaceLink::LinkedClass' has a wrong offset!");
static_assert(offsetof(URBSurfaceLink, bCosmeticOnly) == 0x000050, "Member 'URBSurfaceLink::bCosmeticOnly' has a wrong offset!");

// Class RBSurfaceLink.RBSurfaceLinkActorInterface
// 0x0000 (0x0000 - 0x0000)
class IRBSurfaceLinkActorInterface final
{
public:
	class FName GetSurfaceLinkType(class UPrimitiveComponent* InCollisionComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBSurfaceLinkActorInterface">();
	}
	static class IRBSurfaceLinkActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRBSurfaceLinkActorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IRBSurfaceLinkActorInterface) == 0x000001, "Wrong alignment on IRBSurfaceLinkActorInterface");
static_assert(sizeof(IRBSurfaceLinkActorInterface) == 0x000001, "Wrong size on IRBSurfaceLinkActorInterface");

// Class RBSurfaceLink.RBSurfaceLinkClassInterface
// 0x0000 (0x0000 - 0x0000)
class IRBSurfaceLinkClassInterface final
{
public:
	void SetHitResult(class UObject* InHitResultSource, const struct FHitResult& InHitResult);
	void SetPhysicCollisionInfo(class AActor* InSourceActor, class UPrimitiveComponent* InSourceComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& InContactPosition, const struct FVector& InContactNormal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBSurfaceLinkClassInterface">();
	}
	static class IRBSurfaceLinkClassInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRBSurfaceLinkClassInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IRBSurfaceLinkClassInterface) == 0x000001, "Wrong alignment on IRBSurfaceLinkClassInterface");
static_assert(sizeof(IRBSurfaceLinkClassInterface) == 0x000001, "Wrong size on IRBSurfaceLinkClassInterface");

// Class RBSurfaceLink.RBSurfaceLinkManager
// 0x0140 (0x0168 - 0x0028)
class URBSurfaceLinkManager final : public UObject
{
public:
	class UObjectLibrary*                         SurfaceLinkLibrary;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x138];                                     // 0x0030(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TSubclassOf<class UObject> GetDefaultLinkedClass(const class FName& Type);
	static TSubclassOf<class UObject> GetLinkedClass(const class FName& Type, const class FName& PhysicalMaterialName);
	static TSubclassOf<class UObject> GetLinkedClassFromHitResult(const class FName& Type, const struct FHitResult& HitResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBSurfaceLinkManager">();
	}
	static class URBSurfaceLinkManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBSurfaceLinkManager>();
	}
};
static_assert(alignof(URBSurfaceLinkManager) == 0x000008, "Wrong alignment on URBSurfaceLinkManager");
static_assert(sizeof(URBSurfaceLinkManager) == 0x000168, "Wrong size on URBSurfaceLinkManager");
static_assert(offsetof(URBSurfaceLinkManager, SurfaceLinkLibrary) == 0x000028, "Member 'URBSurfaceLinkManager::SurfaceLinkLibrary' has a wrong offset!");

// Class RBSurfaceLink.RBSurfaceLinkSettings
// 0x0010 (0x0038 - 0x0028)
class URBSurfaceLinkSettings final : public UObject
{
public:
	TArray<class FString>                         Paths;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBSurfaceLinkSettings">();
	}
	static class URBSurfaceLinkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBSurfaceLinkSettings>();
	}
};
static_assert(alignof(URBSurfaceLinkSettings) == 0x000008, "Wrong alignment on URBSurfaceLinkSettings");
static_assert(sizeof(URBSurfaceLinkSettings) == 0x000038, "Wrong size on URBSurfaceLinkSettings");
static_assert(offsetof(URBSurfaceLinkSettings, Paths) == 0x000028, "Member 'URBSurfaceLinkSettings::Paths' has a wrong offset!");

}

