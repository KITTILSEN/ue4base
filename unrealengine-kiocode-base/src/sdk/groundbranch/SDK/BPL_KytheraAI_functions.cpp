#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_KytheraAI

#include "Basic.hpp"

#include "BPL_KytheraAI_classes.hpp"
#include "BPL_KytheraAI_parameters.hpp"


namespace SDK
{

// Function BPL_KytheraAI.BPL_KytheraAI_C.Ky Emit Sound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKytSignalDispatchModeEnum              DispatchMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SignalRange                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SignalPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SignalRadius                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SignalType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SignalCategory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContinuous_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SignalUncertainityRadius                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SignalDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SourcePosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            SourcePawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DrawDebugSpheres                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_KytheraAI_C::Ky_Emit_Sound(EKytSignalDispatchModeEnum DispatchMode, float SignalRange, const struct FVector& SignalPos, float SignalRadius, int32 SignalType, int32 SignalCategory, bool IsContinuous_, float SignalUncertainityRadius, const struct FVector& SignalDirection, const struct FVector& SourcePosition, class APawn* SourcePawn, bool DrawDebugSpheres, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPL_KytheraAI_C", "Ky Emit Sound");

	Params::BPL_KytheraAI_C_Ky_Emit_Sound Parms{};

	Parms.DispatchMode = DispatchMode;
	Parms.SignalRange = SignalRange;
	Parms.SignalPos = std::move(SignalPos);
	Parms.SignalRadius = SignalRadius;
	Parms.SignalType = SignalType;
	Parms.SignalCategory = SignalCategory;
	Parms.IsContinuous_ = IsContinuous_;
	Parms.SignalUncertainityRadius = SignalUncertainityRadius;
	Parms.SignalDirection = std::move(SignalDirection);
	Parms.SourcePosition = std::move(SourcePosition);
	Parms.SourcePawn = SourcePawn;
	Parms.DrawDebugSpheres = DrawDebugSpheres;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);
}

}

