#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightZoneController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EGBPowerSourceStatus_structs.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightZoneController.BP_LightZoneController_C
// 0x00E0 (0x0300 - 0x0220)
class ABP_LightZoneController_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PowerSourceComponent_C*             PowerSourceComponent;                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_sign;                                           // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComp;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Test;                                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Handle;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SWITCH;                                            // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_431503B24CCDB2CC5FD5AF9480D1999B; // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_431503B24CCDB2CC5FD5AF9480D1999B; // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GroupName;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitiallyEnabled;                                 // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hits;                                              // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHits;                                           // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Switch_Destroyed_Mesh;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OriginalHandleRotation;                            // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HandleDisabledRelativeRotation;                    // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshMaxDrawDistance;                               // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         DestructionFX;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          DestructionSound;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayingSound;                                   // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReadyForSounds;                                   // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasSign;                                           // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DB[0x5];                                      // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            SignMesh;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          StopHummingEvent;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          StartHummingEvent;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanPlaySound;                                     // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantsToPlaySound;                                 // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HummingSoundId;                                    // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LightZoneController(int32 EntryPoint);
	void OnPostEventCalback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void TurnOnIfNotDestroyed();
	void TurnOffIfNotDestroyed();
	void BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_1_OnSharedPowerStatusChanged__DelegateSignature(EGBPowerSourceStatus InSharedPowerStatus);
	void BndEvt__BP_LightZoneController_BP_Power_SourceComponent_K2Node_ComponentBoundEvent_0_OnPowerSourceStatucChanged__DelegateSignature(class UBP_PowerSourceComponent_C* InPowerSourceComp);
	void StopSounds();
	void StartSounds();
	void OnPlayerReadyRoomStatusChanged_Event_0(class AGBPlayerState* PlayerState);
	void BindToReadyRoomDelegate();
	void BindCollisionDelegates();
	void UpdateAssetsShared();
	void SetSwitchPosition(float SwitchAngle);
	void Unbreak();
	void K2_OnReset();
	void OnComponentHit_Event_1(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentBeginCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
	void AnimateMulticast(bool bPullDown);
	void ServerUse(class AController* Controller, class FName UseType);
	void Break();
	void ReceiveBeginPlay();
	void ServerUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	void RemoveUser(class AController* Controller);
	void ClientUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	void ClientUse(class AController* Controller, class FName UseType);
	void AIUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	void AIUse(class AController* Controller, class FName UseType);
	void AddUser(class AController* Controller);
	void InpActEvt_Interact_K2Node_InputActionEvent_0(const struct FKey& Key);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	class FName AIQuestionWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	class FName AIQuestion(class AController* Controller, class FName UseType);

	int32 GetNumUsers() const;
	bool IsTeamSpecific() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightZoneController_C">();
	}
	static class ABP_LightZoneController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightZoneController_C>();
	}
};
static_assert(alignof(ABP_LightZoneController_C) == 0x000008, "Wrong alignment on ABP_LightZoneController_C");
static_assert(sizeof(ABP_LightZoneController_C) == 0x000300, "Wrong size on ABP_LightZoneController_C");
static_assert(offsetof(ABP_LightZoneController_C, UberGraphFrame) == 0x000220, "Member 'ABP_LightZoneController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, PowerSourceComponent) == 0x000228, "Member 'ABP_LightZoneController_C::PowerSourceComponent' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, SM_sign) == 0x000230, "Member 'ABP_LightZoneController_C::SM_sign' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, AkComp) == 0x000238, "Member 'ABP_LightZoneController_C::AkComp' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Test) == 0x000240, "Member 'ABP_LightZoneController_C::Test' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Box) == 0x000248, "Member 'ABP_LightZoneController_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, PointLight) == 0x000250, "Member 'ABP_LightZoneController_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Sphere) == 0x000258, "Member 'ABP_LightZoneController_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Handle) == 0x000260, "Member 'ABP_LightZoneController_C::Handle' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, SWITCH) == 0x000268, "Member 'ABP_LightZoneController_C::SWITCH' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_LightZoneController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Timeline_0_NewTrack_0_431503B24CCDB2CC5FD5AF9480D1999B) == 0x000278, "Member 'ABP_LightZoneController_C::Timeline_0_NewTrack_0_431503B24CCDB2CC5FD5AF9480D1999B' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Timeline_0__Direction_431503B24CCDB2CC5FD5AF9480D1999B) == 0x00027C, "Member 'ABP_LightZoneController_C::Timeline_0__Direction_431503B24CCDB2CC5FD5AF9480D1999B' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Timeline_0) == 0x000280, "Member 'ABP_LightZoneController_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, GroupName) == 0x000288, "Member 'ABP_LightZoneController_C::GroupName' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, bInitiallyEnabled) == 0x000290, "Member 'ABP_LightZoneController_C::bInitiallyEnabled' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, OverlappedComp) == 0x000298, "Member 'ABP_LightZoneController_C::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Hits) == 0x0002A0, "Member 'ABP_LightZoneController_C::Hits' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, MaxHits) == 0x0002A4, "Member 'ABP_LightZoneController_C::MaxHits' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, Switch_Destroyed_Mesh) == 0x0002A8, "Member 'ABP_LightZoneController_C::Switch_Destroyed_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, OriginalHandleRotation) == 0x0002B0, "Member 'ABP_LightZoneController_C::OriginalHandleRotation' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, HandleDisabledRelativeRotation) == 0x0002BC, "Member 'ABP_LightZoneController_C::HandleDisabledRelativeRotation' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, MeshMaxDrawDistance) == 0x0002C0, "Member 'ABP_LightZoneController_C::MeshMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, DestructionFX) == 0x0002C8, "Member 'ABP_LightZoneController_C::DestructionFX' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, DestructionSound) == 0x0002D0, "Member 'ABP_LightZoneController_C::DestructionSound' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, bIsPlayingSound) == 0x0002D8, "Member 'ABP_LightZoneController_C::bIsPlayingSound' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, bReadyForSounds) == 0x0002D9, "Member 'ABP_LightZoneController_C::bReadyForSounds' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, HasSign) == 0x0002DA, "Member 'ABP_LightZoneController_C::HasSign' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, SignMesh) == 0x0002E0, "Member 'ABP_LightZoneController_C::SignMesh' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, StopHummingEvent) == 0x0002E8, "Member 'ABP_LightZoneController_C::StopHummingEvent' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, StartHummingEvent) == 0x0002F0, "Member 'ABP_LightZoneController_C::StartHummingEvent' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, bCanPlaySound) == 0x0002F8, "Member 'ABP_LightZoneController_C::bCanPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, bWantsToPlaySound) == 0x0002F9, "Member 'ABP_LightZoneController_C::bWantsToPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_LightZoneController_C, HummingSoundId) == 0x0002FC, "Member 'ABP_LightZoneController_C::HummingSoundId' has a wrong offset!");

}

