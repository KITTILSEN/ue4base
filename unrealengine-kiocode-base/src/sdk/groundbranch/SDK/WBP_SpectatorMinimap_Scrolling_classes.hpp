#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SpectatorMinimap_Scrolling

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SpectatorMinimap_Scrolling.WBP_SpectatorMinimap_Scrolling_C
// 0x0088 (0x02E8 - 0x0260)
class UWBP_SpectatorMinimap_Scrolling_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_Map;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_7;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_4;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector                                LocationFromOrigin;                                // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Minimap_Origin_C*                   MinimapOriginRef;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              Coords;                                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MinimapMID;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ChildScale;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPanMap;                                           // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRotateMap;                                        // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEastWestLayout;                                   // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C3[0x1];                                      // 0x02C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimapRotationOffset;                             // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomLevel;                                         // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomLevelIncrements;                               // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomLevelMin;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomLevelMax;                                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGBPlayerState*>                 Player_List;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	ESlateVisibility GetSpectatorArrowVis();
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetZoomLevel(float Zoom);
	void SetMinimapStyle(class FName NewStyle);
	void UpdateTranslation();
	void UpdateRotation();
	void AdjustZoomLevel(float Direction);
	void BindToSpecatorOverlayUpdate();
	void OnUpdate_Event_0(class UWBP_Spectator_Overlay_C* SpectatorOverlay);
	void ExecuteUbergraph_WBP_SpectatorMinimap_Scrolling(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_SpectatorMinimap_Scrolling_C">();
	}
	static class UWBP_SpectatorMinimap_Scrolling_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_SpectatorMinimap_Scrolling_C>();
	}
};
static_assert(alignof(UWBP_SpectatorMinimap_Scrolling_C) == 0x000008, "Wrong alignment on UWBP_SpectatorMinimap_Scrolling_C");
static_assert(sizeof(UWBP_SpectatorMinimap_Scrolling_C) == 0x0002E8, "Wrong size on UWBP_SpectatorMinimap_Scrolling_C");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, UberGraphFrame) == 0x000260, "Member 'UWBP_SpectatorMinimap_Scrolling_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, CanvasPanel_Map) == 0x000268, "Member 'UWBP_SpectatorMinimap_Scrolling_C::CanvasPanel_Map' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, Image_0) == 0x000270, "Member 'UWBP_SpectatorMinimap_Scrolling_C::Image_0' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, Image_1) == 0x000278, "Member 'UWBP_SpectatorMinimap_Scrolling_C::Image_1' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, Image_7) == 0x000280, "Member 'UWBP_SpectatorMinimap_Scrolling_C::Image_7' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, Overlay_4) == 0x000288, "Member 'UWBP_SpectatorMinimap_Scrolling_C::Overlay_4' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, LocationFromOrigin) == 0x000290, "Member 'UWBP_SpectatorMinimap_Scrolling_C::LocationFromOrigin' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, MinimapOriginRef) == 0x0002A0, "Member 'UWBP_SpectatorMinimap_Scrolling_C::MinimapOriginRef' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, Coords) == 0x0002A8, "Member 'UWBP_SpectatorMinimap_Scrolling_C::Coords' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, MinimapMID) == 0x0002B0, "Member 'UWBP_SpectatorMinimap_Scrolling_C::MinimapMID' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, ChildScale) == 0x0002B8, "Member 'UWBP_SpectatorMinimap_Scrolling_C::ChildScale' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, bPanMap) == 0x0002C0, "Member 'UWBP_SpectatorMinimap_Scrolling_C::bPanMap' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, bRotateMap) == 0x0002C1, "Member 'UWBP_SpectatorMinimap_Scrolling_C::bRotateMap' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, bEastWestLayout) == 0x0002C2, "Member 'UWBP_SpectatorMinimap_Scrolling_C::bEastWestLayout' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, MinimapRotationOffset) == 0x0002C4, "Member 'UWBP_SpectatorMinimap_Scrolling_C::MinimapRotationOffset' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, ZoomLevel) == 0x0002C8, "Member 'UWBP_SpectatorMinimap_Scrolling_C::ZoomLevel' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, ZoomLevelIncrements) == 0x0002CC, "Member 'UWBP_SpectatorMinimap_Scrolling_C::ZoomLevelIncrements' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, ZoomLevelMin) == 0x0002D0, "Member 'UWBP_SpectatorMinimap_Scrolling_C::ZoomLevelMin' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, ZoomLevelMax) == 0x0002D4, "Member 'UWBP_SpectatorMinimap_Scrolling_C::ZoomLevelMax' has a wrong offset!");
static_assert(offsetof(UWBP_SpectatorMinimap_Scrolling_C, Player_List) == 0x0002D8, "Member 'UWBP_SpectatorMinimap_Scrolling_C::Player_List' has a wrong offset!");

}

