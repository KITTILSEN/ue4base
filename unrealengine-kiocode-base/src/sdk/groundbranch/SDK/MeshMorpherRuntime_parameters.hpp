#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshMorpherRuntime

#include "Basic.hpp"

#include "MeshMorpherRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.DoBakeMultiple
// 0x0080 (0x0080 - 0x0000)
struct MeshMorpherRuntimeLibrary_DoBakeMultiple final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UMorphTarget*, float>              MorphTargets;                                      // 0x0028(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMeshMorpherBakeBranches                      Out;                                               // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherRuntimeLibrary_DoBakeMultiple) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_DoBakeMultiple");
static_assert(sizeof(MeshMorpherRuntimeLibrary_DoBakeMultiple) == 0x000080, "Wrong size on MeshMorpherRuntimeLibrary_DoBakeMultiple");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultiple, WorldContextObject) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultiple::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultiple, LatentInfo) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultiple::LatentInfo' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultiple, SkeletalMesh) == 0x000020, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultiple::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultiple, MorphTargets) == 0x000028, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultiple::MorphTargets' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultiple, Out) == 0x000078, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultiple::Out' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.DoBakeMultipleStandalone
// 0x0080 (0x0080 - 0x0000)
struct MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UStandaloneMorphTarget*, float>    MorphTargets;                                      // 0x0028(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMeshMorpherBakeBranches                      Out;                                               // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone");
static_assert(sizeof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone) == 0x000080, "Wrong size on MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone, WorldContextObject) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone, LatentInfo) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone::LatentInfo' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone, SkeletalMesh) == 0x000020, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone, MorphTargets) == 0x000028, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone::MorphTargets' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone, Out) == 0x000078, "Member 'MeshMorpherRuntimeLibrary_DoBakeMultipleStandalone::Out' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.DoBakeSingle
// 0x0038 (0x0038 - 0x0000)
struct MeshMorpherRuntimeLibrary_DoBakeSingle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMorphTarget*                           MorphTarget;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshMorpherBakeBranches                      Out;                                               // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherRuntimeLibrary_DoBakeSingle) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_DoBakeSingle");
static_assert(sizeof(MeshMorpherRuntimeLibrary_DoBakeSingle) == 0x000038, "Wrong size on MeshMorpherRuntimeLibrary_DoBakeSingle");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingle, WorldContextObject) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingle, LatentInfo) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingle::LatentInfo' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingle, SkeletalMesh) == 0x000020, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingle::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingle, MorphTarget) == 0x000028, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingle::MorphTarget' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingle, Weight) == 0x000030, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingle::Weight' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingle, Out) == 0x000034, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingle::Out' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.DoBakeSingleStandalone
// 0x0038 (0x0038 - 0x0000)
struct MeshMorpherRuntimeLibrary_DoBakeSingleStandalone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStandaloneMorphTarget*                 MorphTarget;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshMorpherBakeBranches                      Out;                                               // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_DoBakeSingleStandalone");
static_assert(sizeof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone) == 0x000038, "Wrong size on MeshMorpherRuntimeLibrary_DoBakeSingleStandalone");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone, WorldContextObject) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingleStandalone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone, LatentInfo) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingleStandalone::LatentInfo' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone, SkeletalMesh) == 0x000020, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingleStandalone::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone, MorphTarget) == 0x000028, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingleStandalone::MorphTarget' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone, Weight) == 0x000030, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingleStandalone::Weight' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_DoBakeSingleStandalone, Out) == 0x000034, "Member 'MeshMorpherRuntimeLibrary_DoBakeSingleStandalone::Out' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.FindMorphTarget
// 0x0018 (0x0018 - 0x0000)
struct MeshMorpherRuntimeLibrary_FindMorphTarget final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMorphTarget*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshMorpherRuntimeLibrary_FindMorphTarget) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_FindMorphTarget");
static_assert(sizeof(MeshMorpherRuntimeLibrary_FindMorphTarget) == 0x000018, "Wrong size on MeshMorpherRuntimeLibrary_FindMorphTarget");
static_assert(offsetof(MeshMorpherRuntimeLibrary_FindMorphTarget, SkeletalMesh) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_FindMorphTarget::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_FindMorphTarget, Name_0) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_FindMorphTarget::Name_0' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_FindMorphTarget, ReturnValue) == 0x000010, "Member 'MeshMorpherRuntimeLibrary_FindMorphTarget::ReturnValue' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.GetMorphTargetsNames
// 0x0018 (0x0018 - 0x0000)
struct MeshMorpherRuntimeLibrary_GetMorphTargetsNames final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Names;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshMorpherRuntimeLibrary_GetMorphTargetsNames) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_GetMorphTargetsNames");
static_assert(sizeof(MeshMorpherRuntimeLibrary_GetMorphTargetsNames) == 0x000018, "Wrong size on MeshMorpherRuntimeLibrary_GetMorphTargetsNames");
static_assert(offsetof(MeshMorpherRuntimeLibrary_GetMorphTargetsNames, SkeletalMesh) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_GetMorphTargetsNames::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_GetMorphTargetsNames, Names) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_GetMorphTargetsNames::Names' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherRuntimeLibrary.RemoveMorphTarget
// 0x0018 (0x0018 - 0x0000)
struct MeshMorpherRuntimeLibrary_RemoveMorphTarget final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherRuntimeLibrary_RemoveMorphTarget) == 0x000008, "Wrong alignment on MeshMorpherRuntimeLibrary_RemoveMorphTarget");
static_assert(sizeof(MeshMorpherRuntimeLibrary_RemoveMorphTarget) == 0x000018, "Wrong size on MeshMorpherRuntimeLibrary_RemoveMorphTarget");
static_assert(offsetof(MeshMorpherRuntimeLibrary_RemoveMorphTarget, SkeletalMesh) == 0x000000, "Member 'MeshMorpherRuntimeLibrary_RemoveMorphTarget::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_RemoveMorphTarget, Name_0) == 0x000008, "Member 'MeshMorpherRuntimeLibrary_RemoveMorphTarget::Name_0' has a wrong offset!");
static_assert(offsetof(MeshMorpherRuntimeLibrary_RemoveMorphTarget, ReturnValue) == 0x000010, "Member 'MeshMorpherRuntimeLibrary_RemoveMorphTarget::ReturnValue' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherWorkerLibrary.Cancel
// 0x0020 (0x0020 - 0x0000)
struct MeshMorpherWorkerLibrary_Cancel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMorpherWorkerRef                  WorkerReference;                                   // 0x0008(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSuccess;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherWorkerLibrary_Cancel) == 0x000008, "Wrong alignment on MeshMorpherWorkerLibrary_Cancel");
static_assert(sizeof(MeshMorpherWorkerLibrary_Cancel) == 0x000020, "Wrong size on MeshMorpherWorkerLibrary_Cancel");
static_assert(offsetof(MeshMorpherWorkerLibrary_Cancel, WorldContextObject) == 0x000000, "Member 'MeshMorpherWorkerLibrary_Cancel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_Cancel, WorkerReference) == 0x000008, "Member 'MeshMorpherWorkerLibrary_Cancel::WorkerReference' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_Cancel, bIsSuccess) == 0x000018, "Member 'MeshMorpherWorkerLibrary_Cancel::bIsSuccess' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherWorkerLibrary.IsCanceled
// 0x0020 (0x0020 - 0x0000)
struct MeshMorpherWorkerLibrary_IsCanceled final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMorpherWorkerRef                  WorkerReference;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherWorkerLibrary_IsCanceled) == 0x000008, "Wrong alignment on MeshMorpherWorkerLibrary_IsCanceled");
static_assert(sizeof(MeshMorpherWorkerLibrary_IsCanceled) == 0x000020, "Wrong size on MeshMorpherWorkerLibrary_IsCanceled");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsCanceled, WorldContextObject) == 0x000000, "Member 'MeshMorpherWorkerLibrary_IsCanceled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsCanceled, WorkerReference) == 0x000008, "Member 'MeshMorpherWorkerLibrary_IsCanceled::WorkerReference' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsCanceled, ReturnValue) == 0x000018, "Member 'MeshMorpherWorkerLibrary_IsCanceled::ReturnValue' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherWorkerLibrary.IsRunning
// 0x0020 (0x0020 - 0x0000)
struct MeshMorpherWorkerLibrary_IsRunning final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMorpherWorkerRef                  WorkerReference;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherWorkerLibrary_IsRunning) == 0x000008, "Wrong alignment on MeshMorpherWorkerLibrary_IsRunning");
static_assert(sizeof(MeshMorpherWorkerLibrary_IsRunning) == 0x000020, "Wrong size on MeshMorpherWorkerLibrary_IsRunning");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsRunning, WorldContextObject) == 0x000000, "Member 'MeshMorpherWorkerLibrary_IsRunning::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsRunning, WorkerReference) == 0x000008, "Member 'MeshMorpherWorkerLibrary_IsRunning::WorkerReference' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsRunning, ReturnValue) == 0x000018, "Member 'MeshMorpherWorkerLibrary_IsRunning::ReturnValue' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherWorkerLibrary.IsValid
// 0x0020 (0x0020 - 0x0000)
struct MeshMorpherWorkerLibrary_IsValid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMorpherWorkerRef                  WorkerReference;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshMorpherWorkerLibrary_IsValid) == 0x000008, "Wrong alignment on MeshMorpherWorkerLibrary_IsValid");
static_assert(sizeof(MeshMorpherWorkerLibrary_IsValid) == 0x000020, "Wrong size on MeshMorpherWorkerLibrary_IsValid");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsValid, WorldContextObject) == 0x000000, "Member 'MeshMorpherWorkerLibrary_IsValid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsValid, WorkerReference) == 0x000008, "Member 'MeshMorpherWorkerLibrary_IsValid::WorkerReference' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_IsValid, ReturnValue) == 0x000018, "Member 'MeshMorpherWorkerLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function MeshMorpherRuntime.MeshMorpherWorkerLibrary.WaitToFinish
// 0x0018 (0x0018 - 0x0000)
struct MeshMorpherWorkerLibrary_WaitToFinish final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMorpherWorkerRef                  WorkerReference;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshMorpherWorkerLibrary_WaitToFinish) == 0x000008, "Wrong alignment on MeshMorpherWorkerLibrary_WaitToFinish");
static_assert(sizeof(MeshMorpherWorkerLibrary_WaitToFinish) == 0x000018, "Wrong size on MeshMorpherWorkerLibrary_WaitToFinish");
static_assert(offsetof(MeshMorpherWorkerLibrary_WaitToFinish, WorldContextObject) == 0x000000, "Member 'MeshMorpherWorkerLibrary_WaitToFinish::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MeshMorpherWorkerLibrary_WaitToFinish, WorkerReference) == 0x000008, "Member 'MeshMorpherWorkerLibrary_WaitToFinish::WorkerReference' has a wrong offset!");

}

