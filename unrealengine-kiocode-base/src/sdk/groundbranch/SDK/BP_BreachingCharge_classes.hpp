#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BreachingCharge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BreachingCharge.BP_BreachingCharge_C
// 0x0118 (0x0560 - 0x0448)
class ABP_BreachingCharge_C final : public AGBInvItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BreachingChargeMesh;                               // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MaxBlastRadius;                                    // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectionalDamage;                                 // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DirectionalDamageType;                             // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDotAngle;                                       // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadialDamage;                                      // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RadialDamageType;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DoorAttachedTo;                                    // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypesToDamage;                               // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                ExplosionOrigin;                                   // 0x04A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExplosionDirection;                                // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDetonationDelay;                                // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDetonationDelay;                                // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToArm;                                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_ArmCharge;                             // 0x04D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Detonator_C*                        DetonatorRef;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDamageRadius;                                   // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDamageRadius;                                   // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckForTeamKills;                                // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      SurfaceTpesToIgnore;                               // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   BreachSocketNamePrefix;                            // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageConeHalfAngle;                               // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageConeRadius;                                  // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageClipDistance;                                // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NoAttachWhileProneMessge;                          // 0x0518(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           NoAttachWhileProneTags;                            // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMeshComponent*                         AttachTargetComp;                                  // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTargetDistanceChangeSquared;                    // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DanagedCharacters;                                 // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_BreachingCharge(int32 EntryPoint);
	void BindToDetonator(class ABP_Detonator_C* InDetonator);
	void OnDetonatorUse_Event_0(class ABP_Detonator_C* Detonator);
	void Detonate();
	void K2_OnReset();
	void ServerUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	void ServerUse(class AController* Controller, class FName UseType);
	void RemoveUser(class AController* Controller);
	void ClientUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	void ClientUse(class AController* Controller, class FName UseType);
	void AIUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	void AIUse(class AController* Controller, class FName UseType);
	void AddUser(class AController* Controller);
	void DamageCharacter(class AGBCharacter* InGBCharacter);
	class FName AIQuestionWithParams(class AController* Controller, class FName UseType, const class FString& Params_0);
	class FName AIQuestion(class AController* Controller, class FName UseType);

	int32 GetNumUsers() const;
	bool IsTeamSpecific() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BreachingCharge_C">();
	}
	static class ABP_BreachingCharge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BreachingCharge_C>();
	}
};
static_assert(alignof(ABP_BreachingCharge_C) == 0x000008, "Wrong alignment on ABP_BreachingCharge_C");
static_assert(sizeof(ABP_BreachingCharge_C) == 0x000560, "Wrong size on ABP_BreachingCharge_C");
static_assert(offsetof(ABP_BreachingCharge_C, UberGraphFrame) == 0x000448, "Member 'ABP_BreachingCharge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, Arrow) == 0x000450, "Member 'ABP_BreachingCharge_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, BreachingChargeMesh) == 0x000458, "Member 'ABP_BreachingCharge_C::BreachingChargeMesh' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MaxBlastRadius) == 0x000460, "Member 'ABP_BreachingCharge_C::MaxBlastRadius' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DirectionalDamage) == 0x000464, "Member 'ABP_BreachingCharge_C::DirectionalDamage' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DirectionalDamageType) == 0x000468, "Member 'ABP_BreachingCharge_C::DirectionalDamageType' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MinDotAngle) == 0x000470, "Member 'ABP_BreachingCharge_C::MinDotAngle' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, RadialDamage) == 0x000474, "Member 'ABP_BreachingCharge_C::RadialDamage' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, RadialDamageType) == 0x000478, "Member 'ABP_BreachingCharge_C::RadialDamageType' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DoorAttachedTo) == 0x000480, "Member 'ABP_BreachingCharge_C::DoorAttachedTo' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, ObjectTypesToDamage) == 0x000488, "Member 'ABP_BreachingCharge_C::ObjectTypesToDamage' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, ActorsToIgnore) == 0x000498, "Member 'ABP_BreachingCharge_C::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, ExplosionOrigin) == 0x0004A8, "Member 'ABP_BreachingCharge_C::ExplosionOrigin' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, ExplosionDirection) == 0x0004B4, "Member 'ABP_BreachingCharge_C::ExplosionDirection' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MinDetonationDelay) == 0x0004C0, "Member 'ABP_BreachingCharge_C::MinDetonationDelay' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MaxDetonationDelay) == 0x0004C4, "Member 'ABP_BreachingCharge_C::MaxDetonationDelay' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, TimeToArm) == 0x0004C8, "Member 'ABP_BreachingCharge_C::TimeToArm' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, TimerHandle_ArmCharge) == 0x0004D0, "Member 'ABP_BreachingCharge_C::TimerHandle_ArmCharge' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DetonatorRef) == 0x0004D8, "Member 'ABP_BreachingCharge_C::DetonatorRef' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MinDamageRadius) == 0x0004E0, "Member 'ABP_BreachingCharge_C::MinDamageRadius' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MaxDamageRadius) == 0x0004E4, "Member 'ABP_BreachingCharge_C::MaxDamageRadius' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, bCheckForTeamKills) == 0x0004E8, "Member 'ABP_BreachingCharge_C::bCheckForTeamKills' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, SurfaceTpesToIgnore) == 0x0004F0, "Member 'ABP_BreachingCharge_C::SurfaceTpesToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, BreachSocketNamePrefix) == 0x000500, "Member 'ABP_BreachingCharge_C::BreachSocketNamePrefix' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DamageConeHalfAngle) == 0x000508, "Member 'ABP_BreachingCharge_C::DamageConeHalfAngle' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DamageConeRadius) == 0x00050C, "Member 'ABP_BreachingCharge_C::DamageConeRadius' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DamageClipDistance) == 0x000510, "Member 'ABP_BreachingCharge_C::DamageClipDistance' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, NoAttachWhileProneMessge) == 0x000518, "Member 'ABP_BreachingCharge_C::NoAttachWhileProneMessge' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, NoAttachWhileProneTags) == 0x000530, "Member 'ABP_BreachingCharge_C::NoAttachWhileProneTags' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, AttachTargetComp) == 0x000540, "Member 'ABP_BreachingCharge_C::AttachTargetComp' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, MaxTargetDistanceChangeSquared) == 0x000548, "Member 'ABP_BreachingCharge_C::MaxTargetDistanceChangeSquared' has a wrong offset!");
static_assert(offsetof(ABP_BreachingCharge_C, DanagedCharacters) == 0x000550, "Member 'ABP_BreachingCharge_C::DanagedCharacters' has a wrong offset!");

}

