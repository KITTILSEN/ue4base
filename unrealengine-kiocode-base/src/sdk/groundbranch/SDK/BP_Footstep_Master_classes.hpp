#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Footstep_Master

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Footstep_Master.BP_Footstep_Master_C
// 0x00D0 (0x02F0 - 0x0220)
class ABP_Footstep_Master_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 SwitchGroup;                                       // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 MaterialSwitch;                                    // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                ParticleFXScale;                                   // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalSize;                                         // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalLife;                                         // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactNormal;                                      // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceStart;                                        // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           CharacterRef;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxParticleDistanceSq;                             // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSoundDistanceSq;                                // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDecalDistanceSq;                                // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceSquared;                                   // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         WalkingNiagaraFX;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         RunningNiagaraFX;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootstepSprintLoudness;                            // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootstepRunLoudness;                               // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootstepCrouchWalkLoudness;                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootstepWalkLoudness;                              // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedRange;                                     // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSprinting;                                        // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRunning;                                          // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D6[0x2];                                      // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ThirdPersonEvent;                                  // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          FirstPersonEvent;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Footstep_Master(int32 EntryPoint);
	void PostFootstepEvent(class UAkAudioEvent* AkEvent);
	void DebugFootstep();
	void ReportToAI();
	void K2_OnReset();
	void SetHitResult(class UObject* InHitResultSource, const struct FHitResult& InHitResult);
	void PlaceDecal();
	void PlaySound();
	void ShowFX();
	void ReceiveBeginPlay();
	void SetPhysicCollisionInfo(class AActor* InSourceActor, class UPrimitiveComponent* InSourceComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& InContactPosition, const struct FVector& InContactNormal);
	class FString GetMaterialSwitch();
	void DetermineLoudness(float* OutLoudness);
	struct FVector GetParticleFXScale();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Footstep_Master_C">();
	}
	static class ABP_Footstep_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Footstep_Master_C>();
	}
};
static_assert(alignof(ABP_Footstep_Master_C) == 0x000008, "Wrong alignment on ABP_Footstep_Master_C");
static_assert(sizeof(ABP_Footstep_Master_C) == 0x0002F0, "Wrong size on ABP_Footstep_Master_C");
static_assert(offsetof(ABP_Footstep_Master_C, UberGraphFrame) == 0x000220, "Member 'ABP_Footstep_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_Footstep_Master_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, SwitchGroup) == 0x000230, "Member 'ABP_Footstep_Master_C::SwitchGroup' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, MaterialSwitch) == 0x000240, "Member 'ABP_Footstep_Master_C::MaterialSwitch' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, ParticleFXScale) == 0x000250, "Member 'ABP_Footstep_Master_C::ParticleFXScale' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, DecalMaterial) == 0x000260, "Member 'ABP_Footstep_Master_C::DecalMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, DecalSize) == 0x000268, "Member 'ABP_Footstep_Master_C::DecalSize' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, DecalLife) == 0x00026C, "Member 'ABP_Footstep_Master_C::DecalLife' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, ImpactPoint) == 0x000270, "Member 'ABP_Footstep_Master_C::ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, ImpactNormal) == 0x00027C, "Member 'ABP_Footstep_Master_C::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, TraceStart) == 0x000288, "Member 'ABP_Footstep_Master_C::TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, CharacterRef) == 0x000298, "Member 'ABP_Footstep_Master_C::CharacterRef' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, MaxParticleDistanceSq) == 0x0002A0, "Member 'ABP_Footstep_Master_C::MaxParticleDistanceSq' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, MaxSoundDistanceSq) == 0x0002A4, "Member 'ABP_Footstep_Master_C::MaxSoundDistanceSq' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, MaxDecalDistanceSq) == 0x0002A8, "Member 'ABP_Footstep_Master_C::MaxDecalDistanceSq' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, DistanceSquared) == 0x0002AC, "Member 'ABP_Footstep_Master_C::DistanceSquared' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, WalkingNiagaraFX) == 0x0002B0, "Member 'ABP_Footstep_Master_C::WalkingNiagaraFX' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, RunningNiagaraFX) == 0x0002B8, "Member 'ABP_Footstep_Master_C::RunningNiagaraFX' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, FootstepSprintLoudness) == 0x0002C0, "Member 'ABP_Footstep_Master_C::FootstepSprintLoudness' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, FootstepRunLoudness) == 0x0002C4, "Member 'ABP_Footstep_Master_C::FootstepRunLoudness' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, FootstepCrouchWalkLoudness) == 0x0002C8, "Member 'ABP_Footstep_Master_C::FootstepCrouchWalkLoudness' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, FootstepWalkLoudness) == 0x0002CC, "Member 'ABP_Footstep_Master_C::FootstepWalkLoudness' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, MaxSpeedRange) == 0x0002D0, "Member 'ABP_Footstep_Master_C::MaxSpeedRange' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, bSprinting) == 0x0002D4, "Member 'ABP_Footstep_Master_C::bSprinting' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, bRunning) == 0x0002D5, "Member 'ABP_Footstep_Master_C::bRunning' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, ThirdPersonEvent) == 0x0002D8, "Member 'ABP_Footstep_Master_C::ThirdPersonEvent' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, FirstPersonEvent) == 0x0002E0, "Member 'ABP_Footstep_Master_C::FirstPersonEvent' has a wrong offset!");
static_assert(offsetof(ABP_Footstep_Master_C, NewVar_0) == 0x0002E8, "Member 'ABP_Footstep_Master_C::NewVar_0' has a wrong offset!");

}

