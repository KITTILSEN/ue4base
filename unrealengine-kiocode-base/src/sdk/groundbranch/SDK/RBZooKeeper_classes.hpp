#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBZooKeeper

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "RBZooKeeper_structs.hpp"


namespace SDK
{

// Class RBZooKeeper.ZKCore
// 0x0018 (0x0040 - 0x0028)
class UZKCore : public UObject
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKCore">();
	}
	static class UZKCore* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKCore>();
	}
};
static_assert(alignof(UZKCore) == 0x000008, "Wrong alignment on UZKCore");
static_assert(sizeof(UZKCore) == 0x000040, "Wrong size on UZKCore");
static_assert(offsetof(UZKCore, GameInstance) == 0x000028, "Member 'UZKCore::GameInstance' has a wrong offset!");

// Class RBZooKeeper.ZKAdmin
// 0x0028 (0x0068 - 0x0040)
class UZKAdmin final : public UZKCore
{
public:
	TArray<struct FZKAdminGroupInfo>              AdminGroups;                                       // 0x0040(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<struct FZKAdminInfo>                   Admins;                                            // 0x0050(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableSetupCommand;                               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UZKAdmin* Get();

	EZKAdminCommandResult AdminCommand(const class FString& UniqueId, const class FString& Parameters);
	bool AllowPlayerName(const class FString& PlayerName, const class FString& UniqueId);

	TArray<class FString> GetAdminCommands(const class FString& UniqueId) const;
	TArray<class FString> GetAdminGroupCommands(const class FString& AdminGroupName) const;
	bool GetAdminInfo(const class FString& UniqueId, struct FZKAdminInfo* OutAdminInfo) const;
	bool IsAnyAdminOnline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKAdmin">();
	}
	static class UZKAdmin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKAdmin>();
	}
};
static_assert(alignof(UZKAdmin) == 0x000008, "Wrong alignment on UZKAdmin");
static_assert(sizeof(UZKAdmin) == 0x000068, "Wrong size on UZKAdmin");
static_assert(offsetof(UZKAdmin, AdminGroups) == 0x000040, "Member 'UZKAdmin::AdminGroups' has a wrong offset!");
static_assert(offsetof(UZKAdmin, Admins) == 0x000050, "Member 'UZKAdmin::Admins' has a wrong offset!");
static_assert(offsetof(UZKAdmin, bEnableSetupCommand) == 0x000060, "Member 'UZKAdmin::bEnableSetupCommand' has a wrong offset!");

// Class RBZooKeeper.ZKAFKDetection
// 0x0080 (0x00C0 - 0x0040)
class UZKAFKDetection final : public UZKCore
{
public:
	TMap<class APlayerController*, struct FZKAFKInfo> AFKInfoMap;                                    // 0x0040(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x20];                                      // 0x0090(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerController* PlayerController)> AFKDetected;           // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKAFKDetection">();
	}
	static class UZKAFKDetection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKAFKDetection>();
	}
};
static_assert(alignof(UZKAFKDetection) == 0x000008, "Wrong alignment on UZKAFKDetection");
static_assert(sizeof(UZKAFKDetection) == 0x0000C0, "Wrong size on UZKAFKDetection");
static_assert(offsetof(UZKAFKDetection, AFKInfoMap) == 0x000040, "Member 'UZKAFKDetection::AFKInfoMap' has a wrong offset!");
static_assert(offsetof(UZKAFKDetection, AFKDetected) == 0x0000B0, "Member 'UZKAFKDetection::AFKDetected' has a wrong offset!");

// Class RBZooKeeper.ZKBan
// 0x0018 (0x0058 - 0x0040)
class UZKBan final : public UZKCore
{
public:
	uint8                                         Pad_40[0x4];                                       // 0x0040(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultBanDuration;                                // 0x0044(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FZKBanInfo>                     Banned;                                            // 0x0048(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)

public:
	static class UZKBan* Get();

	bool IsBanned(const class FString& UniqueId, class FString* OutBanReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKBan">();
	}
	static class UZKBan* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKBan>();
	}
};
static_assert(alignof(UZKBan) == 0x000008, "Wrong alignment on UZKBan");
static_assert(sizeof(UZKBan) == 0x000058, "Wrong size on UZKBan");
static_assert(offsetof(UZKBan, DefaultBanDuration) == 0x000044, "Member 'UZKBan::DefaultBanDuration' has a wrong offset!");
static_assert(offsetof(UZKBan, Banned) == 0x000048, "Member 'UZKBan::Banned' has a wrong offset!");

// Class RBZooKeeper.ZKCommands
// 0x0020 (0x0060 - 0x0040)
class UZKCommands final : public UZKCore
{
public:
	TMulticastInlineDelegate<void(class APlayerController* InvokerPlayerController, const class FString& Command, const class FString& Params)> OnProcessCommand; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* Player)> MutePlayer;                           // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UZKCommands* Get();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKCommands">();
	}
	static class UZKCommands* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKCommands>();
	}
};
static_assert(alignof(UZKCommands) == 0x000008, "Wrong alignment on UZKCommands");
static_assert(sizeof(UZKCommands) == 0x000060, "Wrong size on UZKCommands");
static_assert(offsetof(UZKCommands, OnProcessCommand) == 0x000040, "Member 'UZKCommands::OnProcessCommand' has a wrong offset!");
static_assert(offsetof(UZKCommands, MutePlayer) == 0x000050, "Member 'UZKCommands::MutePlayer' has a wrong offset!");

// Class RBZooKeeper.ZKKitRestrictions
// 0x0018 (0x0058 - 0x0040)
class UZKKitRestrictions final : public UZKCore
{
public:
	TArray<class FString>                         KitRestrictions;                                   // 0x0040(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKKitRestrictions">();
	}
	static class UZKKitRestrictions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKKitRestrictions>();
	}
};
static_assert(alignof(UZKKitRestrictions) == 0x000008, "Wrong alignment on UZKKitRestrictions");
static_assert(sizeof(UZKKitRestrictions) == 0x000058, "Wrong size on UZKKitRestrictions");
static_assert(offsetof(UZKKitRestrictions, KitRestrictions) == 0x000040, "Member 'UZKKitRestrictions::KitRestrictions' has a wrong offset!");

// Class RBZooKeeper.ZKMapList
// 0x0088 (0x00C8 - 0x0040)
class UZKMapList final : public UZKCore
{
public:
	TArray<class FString>                         MapList;                                           // 0x0040(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x78];                                      // 0x0050(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UZKMapList* Get();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKMapList">();
	}
	static class UZKMapList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKMapList>();
	}
};
static_assert(alignof(UZKMapList) == 0x000008, "Wrong alignment on UZKMapList");
static_assert(sizeof(UZKMapList) == 0x0000C8, "Wrong size on UZKMapList");
static_assert(offsetof(UZKMapList, MapList) == 0x000040, "Member 'UZKMapList::MapList' has a wrong offset!");

// Class RBZooKeeper.ZKServer
// 0x0168 (0x01A8 - 0x0040)
class UZKServer final : public UZKCore
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0050(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ServerMOTD;                                        // 0x0060(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ServerWebBanner;                                   // 0x0070(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ServerPassword;                                    // 0x0080(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SpectatorOnlyPassword;                             // 0x0090(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxPlayers;                                        // 0x00A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSpectators;                                     // 0x00A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, bool>                       GameRules;                                         // 0x00A8(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	class FString                                 PVEMatchType;                                      // 0x00F8(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         PVERoundLimit;                                     // 0x0108(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PVPMatchType;                                      // 0x0110(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         PVPRoundLimit;                                     // 0x0120(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PVPFFAMatchType;                                   // 0x0128(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         PVPFFARoundLimit;                                  // 0x0138(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReadyCountdownTime;                                // 0x013C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ServerShutdownType;                                // 0x0140(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ServerShutdownHour;                                // 0x0144(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ServerShutdownTimeLimit;                           // 0x0148(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ServerShutdownGracePeriod;                         // 0x014C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BadWordCountLimit;                                 // 0x0150(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BadWordTimeLimit;                                  // 0x0154(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x30];                                     // 0x0158(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnServerSettingsUpdated;                           // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnServerGameRulesUpdated;                          // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UZKServer* Get();

	TArray<class FString> GetMatchInfoSettingsAsLines();
	bool HasWhiteList();
	void SetMatchInfoSettingsAsLines(const TArray<class FString>& Lines);

	int32 GetMaxPlayers() const;
	int32 GetMaxSpectators() const;
	int32 GetReadyCountdownTime() const;
	class FString GetServerMOTD() const;
	class FString GetServerName() const;
	class FString GetServerPassword() const;
	struct FGBServerShutdownSchedule GetServerShutdownSchedule() const;
	class FString GetServerWebBanner() const;
	class FString GetSpectatorOnlyPassword() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKServer">();
	}
	static class UZKServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKServer>();
	}
};
static_assert(alignof(UZKServer) == 0x000008, "Wrong alignment on UZKServer");
static_assert(sizeof(UZKServer) == 0x0001A8, "Wrong size on UZKServer");
static_assert(offsetof(UZKServer, ServerName) == 0x000050, "Member 'UZKServer::ServerName' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerMOTD) == 0x000060, "Member 'UZKServer::ServerMOTD' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerWebBanner) == 0x000070, "Member 'UZKServer::ServerWebBanner' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerPassword) == 0x000080, "Member 'UZKServer::ServerPassword' has a wrong offset!");
static_assert(offsetof(UZKServer, SpectatorOnlyPassword) == 0x000090, "Member 'UZKServer::SpectatorOnlyPassword' has a wrong offset!");
static_assert(offsetof(UZKServer, MaxPlayers) == 0x0000A0, "Member 'UZKServer::MaxPlayers' has a wrong offset!");
static_assert(offsetof(UZKServer, MaxSpectators) == 0x0000A4, "Member 'UZKServer::MaxSpectators' has a wrong offset!");
static_assert(offsetof(UZKServer, GameRules) == 0x0000A8, "Member 'UZKServer::GameRules' has a wrong offset!");
static_assert(offsetof(UZKServer, PVEMatchType) == 0x0000F8, "Member 'UZKServer::PVEMatchType' has a wrong offset!");
static_assert(offsetof(UZKServer, PVERoundLimit) == 0x000108, "Member 'UZKServer::PVERoundLimit' has a wrong offset!");
static_assert(offsetof(UZKServer, PVPMatchType) == 0x000110, "Member 'UZKServer::PVPMatchType' has a wrong offset!");
static_assert(offsetof(UZKServer, PVPRoundLimit) == 0x000120, "Member 'UZKServer::PVPRoundLimit' has a wrong offset!");
static_assert(offsetof(UZKServer, PVPFFAMatchType) == 0x000128, "Member 'UZKServer::PVPFFAMatchType' has a wrong offset!");
static_assert(offsetof(UZKServer, PVPFFARoundLimit) == 0x000138, "Member 'UZKServer::PVPFFARoundLimit' has a wrong offset!");
static_assert(offsetof(UZKServer, ReadyCountdownTime) == 0x00013C, "Member 'UZKServer::ReadyCountdownTime' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerShutdownType) == 0x000140, "Member 'UZKServer::ServerShutdownType' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerShutdownHour) == 0x000144, "Member 'UZKServer::ServerShutdownHour' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerShutdownTimeLimit) == 0x000148, "Member 'UZKServer::ServerShutdownTimeLimit' has a wrong offset!");
static_assert(offsetof(UZKServer, ServerShutdownGracePeriod) == 0x00014C, "Member 'UZKServer::ServerShutdownGracePeriod' has a wrong offset!");
static_assert(offsetof(UZKServer, BadWordCountLimit) == 0x000150, "Member 'UZKServer::BadWordCountLimit' has a wrong offset!");
static_assert(offsetof(UZKServer, BadWordTimeLimit) == 0x000154, "Member 'UZKServer::BadWordTimeLimit' has a wrong offset!");
static_assert(offsetof(UZKServer, OnServerSettingsUpdated) == 0x000188, "Member 'UZKServer::OnServerSettingsUpdated' has a wrong offset!");
static_assert(offsetof(UZKServer, OnServerGameRulesUpdated) == 0x000198, "Member 'UZKServer::OnServerGameRulesUpdated' has a wrong offset!");

// Class RBZooKeeper.ZKSettings
// 0x00D0 (0x00F8 - 0x0028)
class UZKSettings final : public UObject
{
public:
	class FString                                 ConfigPath;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAdminSetup;                                 // 0x0038(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         RequiredGameOptions;                               // 0x0040(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, bool>                       DefaultGameRules;                                  // 0x0050(0x0050)(Edit, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	TArray<struct FZKCommandInfo>                 CommandList;                                       // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	TArray<struct FZKAdminGroupInfo>              DefaultAdminGroups;                                // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         DefaultVotingCommands;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         DefaultPermittedGameModes;                         // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         DefaultMapList;                                    // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	int32                                         KickBanTime;                                       // 0x00F0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKSettings">();
	}
	static class UZKSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKSettings>();
	}
};
static_assert(alignof(UZKSettings) == 0x000008, "Wrong alignment on UZKSettings");
static_assert(sizeof(UZKSettings) == 0x0000F8, "Wrong size on UZKSettings");
static_assert(offsetof(UZKSettings, ConfigPath) == 0x000028, "Member 'UZKSettings::ConfigPath' has a wrong offset!");
static_assert(offsetof(UZKSettings, bEnableAdminSetup) == 0x000038, "Member 'UZKSettings::bEnableAdminSetup' has a wrong offset!");
static_assert(offsetof(UZKSettings, RequiredGameOptions) == 0x000040, "Member 'UZKSettings::RequiredGameOptions' has a wrong offset!");
static_assert(offsetof(UZKSettings, DefaultGameRules) == 0x000050, "Member 'UZKSettings::DefaultGameRules' has a wrong offset!");
static_assert(offsetof(UZKSettings, CommandList) == 0x0000A0, "Member 'UZKSettings::CommandList' has a wrong offset!");
static_assert(offsetof(UZKSettings, DefaultAdminGroups) == 0x0000B0, "Member 'UZKSettings::DefaultAdminGroups' has a wrong offset!");
static_assert(offsetof(UZKSettings, DefaultVotingCommands) == 0x0000C0, "Member 'UZKSettings::DefaultVotingCommands' has a wrong offset!");
static_assert(offsetof(UZKSettings, DefaultPermittedGameModes) == 0x0000D0, "Member 'UZKSettings::DefaultPermittedGameModes' has a wrong offset!");
static_assert(offsetof(UZKSettings, DefaultMapList) == 0x0000E0, "Member 'UZKSettings::DefaultMapList' has a wrong offset!");
static_assert(offsetof(UZKSettings, KickBanTime) == 0x0000F0, "Member 'UZKSettings::KickBanTime' has a wrong offset!");

// Class RBZooKeeper.ZKTeamKill
// 0x0030 (0x0070 - 0x0040)
class UZKTeamKill final : public UZKCore
{
public:
	int32                                         MaxTeamKills;                                      // 0x0040(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BanTime;                                           // 0x0044(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TeamKillExpireTime;                                // 0x0048(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FZKTeamKillerInfo>              TeamKillers;                                       // 0x0050(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UZKTeamKill* Get();

	void AddTeamKill(const class FString& TeamKillerUniqueId, const class FString& TeamKillerName, const class FString& VictimUniqueId, const class FString& VictimName);
	void ForgiveTeamKill(const class FString& TeamKillerUniqueId, const class FString& VictimUniqueId);
	void ReportTeamKill(const class FString& TeamKillerUniqueId, const class FString& VictimUniqueId);

	int32 GetTeamKills(const class FString& TeamKillerUniqueId, const class FString& VictimUniqueId, bool bMinusForgives) const;
	int32 GetTotalTeamKills(const class FString& TeamKillerUniqueId, bool bMinusForgives) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKTeamKill">();
	}
	static class UZKTeamKill* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKTeamKill>();
	}
};
static_assert(alignof(UZKTeamKill) == 0x000008, "Wrong alignment on UZKTeamKill");
static_assert(sizeof(UZKTeamKill) == 0x000070, "Wrong size on UZKTeamKill");
static_assert(offsetof(UZKTeamKill, MaxTeamKills) == 0x000040, "Member 'UZKTeamKill::MaxTeamKills' has a wrong offset!");
static_assert(offsetof(UZKTeamKill, BanTime) == 0x000044, "Member 'UZKTeamKill::BanTime' has a wrong offset!");
static_assert(offsetof(UZKTeamKill, TeamKillExpireTime) == 0x000048, "Member 'UZKTeamKill::TeamKillExpireTime' has a wrong offset!");
static_assert(offsetof(UZKTeamKill, TeamKillers) == 0x000050, "Member 'UZKTeamKill::TeamKillers' has a wrong offset!");

// Class RBZooKeeper.ZKVote
// 0x0190 (0x01D0 - 0x0040)
class UZKVote final : public UZKCore
{
public:
	TMap<class APlayerState*, bool>               VoterChoiceMap;                                    // 0x0040(0x0050)(Protected, NativeAccessSpecifierProtected)
	int32                                         VoteDuration;                                      // 0x0090(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VoteSucceededTimeout;                              // 0x0094(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VoteFailedTimeout;                                 // 0x0098(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MapVoteTimeout;                                    // 0x009C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinPlayers;                                        // 0x00A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         VotingCommands;                                    // 0x00A8(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	int32                                         VoteDelayFromRoundStart;                           // 0x00B8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowVotesWhenAdminPresent;                       // 0x00BC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BD[0x43];                                      // 0x00BD(0x0043)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerState* VoteStarter, const class FString& Command, const class FString& Params, int32 VoteTime)> OnVoteStarted; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bPassed, int32 NextVoteDelay)> OnVoteEnded;                   // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 YesVotes, int32 NoVotes)> OnVoteCountUpdated;                // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerController* PlayerController, const class FString& Command, const class FString& Params)> OnVoteCommand; // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bAllowVotingOffMapList;                            // 0x0140(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PermittedGameModes;                                // 0x0148(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerState* PlayerState, const int32& MapListIndex)> OnPlayerCastNextMapVote; // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class APlayerState*, int32>              VoterNextMapIndexMap;                              // 0x0170(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnVoteSettingsUpdated;                             // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UZKVote* Get();

	void EndVote(bool bPassed);
	void ReportPlayStateChanged(bool bPlaying);
	void StartVote(class APlayerController* PlayerController, const class FString& Command, const class FString& Parameters);
	void VoteCommand(class APlayerController* PlayerController, const class FString& Parameters);
	void VotePassed();

	bool GetAllowVotesWhenAdminPresent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZKVote">();
	}
	static class UZKVote* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZKVote>();
	}
};
static_assert(alignof(UZKVote) == 0x000008, "Wrong alignment on UZKVote");
static_assert(sizeof(UZKVote) == 0x0001D0, "Wrong size on UZKVote");
static_assert(offsetof(UZKVote, VoterChoiceMap) == 0x000040, "Member 'UZKVote::VoterChoiceMap' has a wrong offset!");
static_assert(offsetof(UZKVote, VoteDuration) == 0x000090, "Member 'UZKVote::VoteDuration' has a wrong offset!");
static_assert(offsetof(UZKVote, VoteSucceededTimeout) == 0x000094, "Member 'UZKVote::VoteSucceededTimeout' has a wrong offset!");
static_assert(offsetof(UZKVote, VoteFailedTimeout) == 0x000098, "Member 'UZKVote::VoteFailedTimeout' has a wrong offset!");
static_assert(offsetof(UZKVote, MapVoteTimeout) == 0x00009C, "Member 'UZKVote::MapVoteTimeout' has a wrong offset!");
static_assert(offsetof(UZKVote, MinPlayers) == 0x0000A0, "Member 'UZKVote::MinPlayers' has a wrong offset!");
static_assert(offsetof(UZKVote, VotingCommands) == 0x0000A8, "Member 'UZKVote::VotingCommands' has a wrong offset!");
static_assert(offsetof(UZKVote, VoteDelayFromRoundStart) == 0x0000B8, "Member 'UZKVote::VoteDelayFromRoundStart' has a wrong offset!");
static_assert(offsetof(UZKVote, bAllowVotesWhenAdminPresent) == 0x0000BC, "Member 'UZKVote::bAllowVotesWhenAdminPresent' has a wrong offset!");
static_assert(offsetof(UZKVote, OnVoteStarted) == 0x000100, "Member 'UZKVote::OnVoteStarted' has a wrong offset!");
static_assert(offsetof(UZKVote, OnVoteEnded) == 0x000110, "Member 'UZKVote::OnVoteEnded' has a wrong offset!");
static_assert(offsetof(UZKVote, OnVoteCountUpdated) == 0x000120, "Member 'UZKVote::OnVoteCountUpdated' has a wrong offset!");
static_assert(offsetof(UZKVote, OnVoteCommand) == 0x000130, "Member 'UZKVote::OnVoteCommand' has a wrong offset!");
static_assert(offsetof(UZKVote, bAllowVotingOffMapList) == 0x000140, "Member 'UZKVote::bAllowVotingOffMapList' has a wrong offset!");
static_assert(offsetof(UZKVote, PermittedGameModes) == 0x000148, "Member 'UZKVote::PermittedGameModes' has a wrong offset!");
static_assert(offsetof(UZKVote, OnPlayerCastNextMapVote) == 0x000160, "Member 'UZKVote::OnPlayerCastNextMapVote' has a wrong offset!");
static_assert(offsetof(UZKVote, VoterNextMapIndexMap) == 0x000170, "Member 'UZKVote::VoterNextMapIndexMap' has a wrong offset!");
static_assert(offsetof(UZKVote, OnVoteSettingsUpdated) == 0x0001C0, "Member 'UZKVote::OnVoteSettingsUpdated' has a wrong offset!");

}

