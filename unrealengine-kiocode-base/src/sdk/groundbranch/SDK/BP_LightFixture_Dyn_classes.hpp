#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightFixture_Dyn

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EGBPowerSourceStatus_structs.hpp"
#include "Enum_LightType_structs.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightFixture_Dyn.BP_LightFixture_Dyn_C
// 0x0218 (0x0438 - 0x0220)
class ABP_LightFixture_Dyn_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           AK;                                                // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      BugsNiagaraEffect;                                 // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PowerUserComponent_C*               PowerUserComponent;                                // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CustomCollision;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULXRSourceComponent*                    LXRSource;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightFixture;                                      // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_LightFixture;                                   // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MAT_Index;                                         // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MAT_On;                                            // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MAT_Off;                                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightFixtureScale;                                 // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       TimeOfDayStatuses;                                 // 0x02A0(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, bool>                       LightSourceStatuses;                               // 0x02F0(0x0050)(Edit, BlueprintVisible)
	float                                         MeshMaxDrawDistance;                               // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOn;                                             // 0x0344(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DestroyedMaterial;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_Destroyed;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class USoundCue*                              DestructionSound;                                  // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle_Destruction_On;                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle_Destruction_Off;                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasLingeringEmitter;                               // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Particle_Linger;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletHits;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxBulletHits;                                     // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBroken;                                         // 0x0388(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Destructible;                                      // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_LightType                                LightSelection;                                    // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightingChannel_0;                                 // 0x038B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LightingChannel_1;                                 // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LightingChannel_2;                                 // 0x038D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38E[0x2];                                      // 0x038E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Contact_Shadow_Length;                             // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flicker;                                           // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunction;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LightFlickerMaterial;                              // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentTimeSpan;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFluorescent;                                    // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkComponent;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFluroSoundPlaying;                                // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExcludeFromPortalSystemTag;                        // 0x03C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricScatteringIntensity;                     // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GroupName;                                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NiagaraFX;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NiagaraFX_Linger;                                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableBugs;                                       // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraBugs;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCustomCollision;                               // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         NiagaraFX_OffBreak;                                // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFlickering;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TimeSpan_Night;                                    // 0x040C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BugsIntensity;                                     // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadialDamageThreshold;                             // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadialDamageMaxDistance;                           // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideLightIntensity;                            // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanPlaySound;                                     // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantsToPlaySound;                                 // 0x0425(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426[0x2];                                      // 0x0426(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverwhelmingDamageMaxDistance;                     // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverwhelmingDamageAmount;                          // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Event;                                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LightFixture_Dyn(int32 EntryPoint);
	void SetLightSourceVisibility(bool bVisible);
	void BndEvt__BP_LightFixture_Dyn_BP_Power_UserComponent_K2Node_ComponentBoundEvent_0_OnSharedPowerSourceStatusChanged__DelegateSignature(EGBPowerSourceStatus InSharedPowerSourceStatus);
	void OnPlayerReadyRoomStatusChanged_Event_0(class AGBPlayerState* PlayerState);
	void BindToReadyRoomDelegate();
	void StartSounds();
	void StopSounds();
	void DisableBugs();
	void EnableBugs();
	void MakeAssetsNotBroken();
	void MakeAssetsBroken();
	void BindCollisionDelegates();
	void OnTakeRadialDamage_1(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void HalfBreak();
	void OnComponentHit_Event_0(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void K2_OnReset();
	void UpdateAssetsShared();
	void Unbreak();
	void Break();
	void OnTimeSpanChanged_Event_0(class FName Timespan);
	void BindToSkyActor();
	void Destruction();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetLightComp(class ULightComponent** OutLightComp);
	void OnRep_bIsBroken();
	void AddLightToPortalSystem(class ULightComponent* LightComponent);
	void RemoveLightFromPortalSystem(class ULightComponent* LightComponent);
	void DoWeTakeDamage(const struct FVector& InDamageOrigin, float InDamageRadius, bool bInTrace, class AActor* InDamageCauser, float DamageAmount, bool* bOutTakeDamage);

	void IsOn(bool* bIsOn_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightFixture_Dyn_C">();
	}
	static class ABP_LightFixture_Dyn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightFixture_Dyn_C>();
	}
};
static_assert(alignof(ABP_LightFixture_Dyn_C) == 0x000008, "Wrong alignment on ABP_LightFixture_Dyn_C");
static_assert(sizeof(ABP_LightFixture_Dyn_C) == 0x000438, "Wrong size on ABP_LightFixture_Dyn_C");
static_assert(offsetof(ABP_LightFixture_Dyn_C, UberGraphFrame) == 0x000220, "Member 'ABP_LightFixture_Dyn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, AK) == 0x000228, "Member 'ABP_LightFixture_Dyn_C::AK' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, BugsNiagaraEffect) == 0x000230, "Member 'ABP_LightFixture_Dyn_C::BugsNiagaraEffect' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, PowerUserComponent) == 0x000238, "Member 'ABP_LightFixture_Dyn_C::PowerUserComponent' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, CustomCollision) == 0x000240, "Member 'ABP_LightFixture_Dyn_C::CustomCollision' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LXRSource) == 0x000248, "Member 'ABP_LightFixture_Dyn_C::LXRSource' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, SpotLight) == 0x000250, "Member 'ABP_LightFixture_Dyn_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, RectLight) == 0x000258, "Member 'ABP_LightFixture_Dyn_C::RectLight' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, PointLight) == 0x000260, "Member 'ABP_LightFixture_Dyn_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightFixture) == 0x000268, "Member 'ABP_LightFixture_Dyn_C::LightFixture' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, SM_LightFixture) == 0x000270, "Member 'ABP_LightFixture_Dyn_C::SM_LightFixture' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, MAT_Index) == 0x000278, "Member 'ABP_LightFixture_Dyn_C::MAT_Index' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, MAT_On) == 0x000280, "Member 'ABP_LightFixture_Dyn_C::MAT_On' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, MAT_Off) == 0x000288, "Member 'ABP_LightFixture_Dyn_C::MAT_Off' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightFixtureScale) == 0x000290, "Member 'ABP_LightFixture_Dyn_C::LightFixtureScale' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, TimeOfDayStatuses) == 0x0002A0, "Member 'ABP_LightFixture_Dyn_C::TimeOfDayStatuses' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightSourceStatuses) == 0x0002F0, "Member 'ABP_LightFixture_Dyn_C::LightSourceStatuses' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, MeshMaxDrawDistance) == 0x000340, "Member 'ABP_LightFixture_Dyn_C::MeshMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bIsOn) == 0x000344, "Member 'ABP_LightFixture_Dyn_C::bIsOn' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, DestroyedMaterial) == 0x000348, "Member 'ABP_LightFixture_Dyn_C::DestroyedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, SM_Destroyed) == 0x000350, "Member 'ABP_LightFixture_Dyn_C::SM_Destroyed' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, DestructionSound) == 0x000358, "Member 'ABP_LightFixture_Dyn_C::DestructionSound' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Particle_Destruction_On) == 0x000360, "Member 'ABP_LightFixture_Dyn_C::Particle_Destruction_On' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Particle_Destruction_Off) == 0x000368, "Member 'ABP_LightFixture_Dyn_C::Particle_Destruction_Off' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, HasLingeringEmitter) == 0x000370, "Member 'ABP_LightFixture_Dyn_C::HasLingeringEmitter' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Particle_Linger) == 0x000378, "Member 'ABP_LightFixture_Dyn_C::Particle_Linger' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, BulletHits) == 0x000380, "Member 'ABP_LightFixture_Dyn_C::BulletHits' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, MaxBulletHits) == 0x000384, "Member 'ABP_LightFixture_Dyn_C::MaxBulletHits' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bIsBroken) == 0x000388, "Member 'ABP_LightFixture_Dyn_C::bIsBroken' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Destructible) == 0x000389, "Member 'ABP_LightFixture_Dyn_C::Destructible' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightSelection) == 0x00038A, "Member 'ABP_LightFixture_Dyn_C::LightSelection' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightingChannel_0) == 0x00038B, "Member 'ABP_LightFixture_Dyn_C::LightingChannel_0' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightingChannel_1) == 0x00038C, "Member 'ABP_LightFixture_Dyn_C::LightingChannel_1' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightingChannel_2) == 0x00038D, "Member 'ABP_LightFixture_Dyn_C::LightingChannel_2' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Contact_Shadow_Length) == 0x000390, "Member 'ABP_LightFixture_Dyn_C::Contact_Shadow_Length' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Flicker) == 0x000394, "Member 'ABP_LightFixture_Dyn_C::Flicker' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightFunction) == 0x000398, "Member 'ABP_LightFixture_Dyn_C::LightFunction' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, LightFlickerMaterial) == 0x0003A0, "Member 'ABP_LightFixture_Dyn_C::LightFlickerMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, CurrentTimeSpan) == 0x0003A8, "Member 'ABP_LightFixture_Dyn_C::CurrentTimeSpan' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bIsFluorescent) == 0x0003B0, "Member 'ABP_LightFixture_Dyn_C::bIsFluorescent' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, AkComponent) == 0x0003B8, "Member 'ABP_LightFixture_Dyn_C::AkComponent' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bFluroSoundPlaying) == 0x0003C0, "Member 'ABP_LightFixture_Dyn_C::bFluroSoundPlaying' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, ExcludeFromPortalSystemTag) == 0x0003C4, "Member 'ABP_LightFixture_Dyn_C::ExcludeFromPortalSystemTag' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, VolumetricScatteringIntensity) == 0x0003CC, "Member 'ABP_LightFixture_Dyn_C::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, GroupName) == 0x0003D0, "Member 'ABP_LightFixture_Dyn_C::GroupName' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, NiagaraFX) == 0x0003D8, "Member 'ABP_LightFixture_Dyn_C::NiagaraFX' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, NiagaraFX_Linger) == 0x0003E0, "Member 'ABP_LightFixture_Dyn_C::NiagaraFX_Linger' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bEnableBugs) == 0x0003E8, "Member 'ABP_LightFixture_Dyn_C::bEnableBugs' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, NiagaraBugs) == 0x0003F0, "Member 'ABP_LightFixture_Dyn_C::NiagaraBugs' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bUseCustomCollision) == 0x0003F8, "Member 'ABP_LightFixture_Dyn_C::bUseCustomCollision' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, NiagaraFX_OffBreak) == 0x000400, "Member 'ABP_LightFixture_Dyn_C::NiagaraFX_OffBreak' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bIsFlickering) == 0x000408, "Member 'ABP_LightFixture_Dyn_C::bIsFlickering' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, TimeSpan_Night) == 0x00040C, "Member 'ABP_LightFixture_Dyn_C::TimeSpan_Night' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, BugsIntensity) == 0x000414, "Member 'ABP_LightFixture_Dyn_C::BugsIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, RadialDamageThreshold) == 0x000418, "Member 'ABP_LightFixture_Dyn_C::RadialDamageThreshold' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, RadialDamageMaxDistance) == 0x00041C, "Member 'ABP_LightFixture_Dyn_C::RadialDamageMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, OverrideLightIntensity) == 0x000420, "Member 'ABP_LightFixture_Dyn_C::OverrideLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bCanPlaySound) == 0x000424, "Member 'ABP_LightFixture_Dyn_C::bCanPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, bWantsToPlaySound) == 0x000425, "Member 'ABP_LightFixture_Dyn_C::bWantsToPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, OverwhelmingDamageMaxDistance) == 0x000428, "Member 'ABP_LightFixture_Dyn_C::OverwhelmingDamageMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, OverwhelmingDamageAmount) == 0x00042C, "Member 'ABP_LightFixture_Dyn_C::OverwhelmingDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_Dyn_C, Ak_Event) == 0x000430, "Member 'ABP_LightFixture_Dyn_C::Ak_Event' has a wrong offset!");

}

