#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBZooKeeper

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RBZooKeeper.EZKAdminCommandResult
// NumValues: 0x0008
enum class EZKAdminCommandResult : uint8
{
	Rejected                                 = 0,
	Invalid                                  = 1,
	Denied                                   = 2,
	Ok                                       = 3,
	ShowMenu                                 = 4,
	SetupFailed                              = 5,
	SetupPassed                              = 6,
	EZKAdminCommandResult_MAX                = 7,
};

// Enum RBZooKeeper.EGBServerShutdownType
// NumValues: 0x0003
enum class EGBServerShutdownType : uint8
{
	AfterTime                                = 0,
	AtTime                                   = 1,
	EGBServerShutdownType_MAX                = 2,
};

// ScriptStruct RBZooKeeper.ZKBanInfo
// 0x0038 (0x0038 - 0x0000)
struct FZKBanInfo final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expiry;                                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKBanInfo) == 0x000008, "Wrong alignment on FZKBanInfo");
static_assert(sizeof(FZKBanInfo) == 0x000038, "Wrong size on FZKBanInfo");
static_assert(offsetof(FZKBanInfo, PlayerName) == 0x000000, "Member 'FZKBanInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FZKBanInfo, UniqueId) == 0x000010, "Member 'FZKBanInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FZKBanInfo, Reason) == 0x000020, "Member 'FZKBanInfo::Reason' has a wrong offset!");
static_assert(offsetof(FZKBanInfo, Expiry) == 0x000030, "Member 'FZKBanInfo::Expiry' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKReplicatedContent
// 0x0018 (0x0018 - 0x0000)
struct FZKReplicatedContent final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lines;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKReplicatedContent) == 0x000008, "Wrong alignment on FZKReplicatedContent");
static_assert(sizeof(FZKReplicatedContent) == 0x000018, "Wrong size on FZKReplicatedContent");
static_assert(offsetof(FZKReplicatedContent, Type) == 0x000000, "Member 'FZKReplicatedContent::Type' has a wrong offset!");
static_assert(offsetof(FZKReplicatedContent, Lines) == 0x000008, "Member 'FZKReplicatedContent::Lines' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKAdminInfo
// 0x0040 (0x0040 - 0x0000)
struct FZKAdminInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContactInfo;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKAdminInfo) == 0x000008, "Wrong alignment on FZKAdminInfo");
static_assert(sizeof(FZKAdminInfo) == 0x000040, "Wrong size on FZKAdminInfo");
static_assert(offsetof(FZKAdminInfo, Name) == 0x000000, "Member 'FZKAdminInfo::Name' has a wrong offset!");
static_assert(offsetof(FZKAdminInfo, UniqueId) == 0x000010, "Member 'FZKAdminInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FZKAdminInfo, ContactInfo) == 0x000020, "Member 'FZKAdminInfo::ContactInfo' has a wrong offset!");
static_assert(offsetof(FZKAdminInfo, Group) == 0x000030, "Member 'FZKAdminInfo::Group' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKAdminGroupInfo
// 0x0020 (0x0020 - 0x0000)
struct FZKAdminGroupInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Commands;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKAdminGroupInfo) == 0x000008, "Wrong alignment on FZKAdminGroupInfo");
static_assert(sizeof(FZKAdminGroupInfo) == 0x000020, "Wrong size on FZKAdminGroupInfo");
static_assert(offsetof(FZKAdminGroupInfo, Name) == 0x000000, "Member 'FZKAdminGroupInfo::Name' has a wrong offset!");
static_assert(offsetof(FZKAdminGroupInfo, Commands) == 0x000010, "Member 'FZKAdminGroupInfo::Commands' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKAFKInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FZKAFKInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZKAFKInfo) == 0x000008, "Wrong alignment on FZKAFKInfo");
static_assert(sizeof(FZKAFKInfo) == 0x000030, "Wrong size on FZKAFKInfo");

// ScriptStruct RBZooKeeper.GBServerShutdownSchedule
// 0x0010 (0x0010 - 0x0000)
struct FGBServerShutdownSchedule final
{
public:
	EGBServerShutdownType                         ShutdownType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShutdownHour;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShutdownTimeLimit;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShutdownGracePeriod;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGBServerShutdownSchedule) == 0x000004, "Wrong alignment on FGBServerShutdownSchedule");
static_assert(sizeof(FGBServerShutdownSchedule) == 0x000010, "Wrong size on FGBServerShutdownSchedule");
static_assert(offsetof(FGBServerShutdownSchedule, ShutdownType) == 0x000000, "Member 'FGBServerShutdownSchedule::ShutdownType' has a wrong offset!");
static_assert(offsetof(FGBServerShutdownSchedule, ShutdownHour) == 0x000004, "Member 'FGBServerShutdownSchedule::ShutdownHour' has a wrong offset!");
static_assert(offsetof(FGBServerShutdownSchedule, ShutdownTimeLimit) == 0x000008, "Member 'FGBServerShutdownSchedule::ShutdownTimeLimit' has a wrong offset!");
static_assert(offsetof(FGBServerShutdownSchedule, ShutdownGracePeriod) == 0x00000C, "Member 'FGBServerShutdownSchedule::ShutdownGracePeriod' has a wrong offset!");

// ScriptStruct RBZooKeeper.GBMatchInfoSettings
// 0x0048 (0x0048 - 0x0000)
struct FGBMatchInfoSettings final
{
public:
	class FString                                 PVEMatchType;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PVERoundLimit;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PVPMatchType;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PVPRoundLimit;                                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PVPFFAMatchType;                                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PVPFFARoundLimit;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGBMatchInfoSettings) == 0x000008, "Wrong alignment on FGBMatchInfoSettings");
static_assert(sizeof(FGBMatchInfoSettings) == 0x000048, "Wrong size on FGBMatchInfoSettings");
static_assert(offsetof(FGBMatchInfoSettings, PVEMatchType) == 0x000000, "Member 'FGBMatchInfoSettings::PVEMatchType' has a wrong offset!");
static_assert(offsetof(FGBMatchInfoSettings, PVERoundLimit) == 0x000010, "Member 'FGBMatchInfoSettings::PVERoundLimit' has a wrong offset!");
static_assert(offsetof(FGBMatchInfoSettings, PVPMatchType) == 0x000018, "Member 'FGBMatchInfoSettings::PVPMatchType' has a wrong offset!");
static_assert(offsetof(FGBMatchInfoSettings, PVPRoundLimit) == 0x000028, "Member 'FGBMatchInfoSettings::PVPRoundLimit' has a wrong offset!");
static_assert(offsetof(FGBMatchInfoSettings, PVPFFAMatchType) == 0x000030, "Member 'FGBMatchInfoSettings::PVPFFAMatchType' has a wrong offset!");
static_assert(offsetof(FGBMatchInfoSettings, PVPFFARoundLimit) == 0x000040, "Member 'FGBMatchInfoSettings::PVPFFARoundLimit' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKCommandInfo
// 0x0020 (0x0020 - 0x0000)
struct FZKCommandInfo final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKCommandInfo) == 0x000008, "Wrong alignment on FZKCommandInfo");
static_assert(sizeof(FZKCommandInfo) == 0x000020, "Wrong size on FZKCommandInfo");
static_assert(offsetof(FZKCommandInfo, Command) == 0x000000, "Member 'FZKCommandInfo::Command' has a wrong offset!");
static_assert(offsetof(FZKCommandInfo, Desc) == 0x000010, "Member 'FZKCommandInfo::Desc' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKTeamKillRecord
// 0x0020 (0x0020 - 0x0000)
struct FZKTeamKillRecord final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Forgives;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModified;                                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKTeamKillRecord) == 0x000008, "Wrong alignment on FZKTeamKillRecord");
static_assert(sizeof(FZKTeamKillRecord) == 0x000020, "Wrong size on FZKTeamKillRecord");
static_assert(offsetof(FZKTeamKillRecord, UniqueId) == 0x000000, "Member 'FZKTeamKillRecord::UniqueId' has a wrong offset!");
static_assert(offsetof(FZKTeamKillRecord, Count) == 0x000010, "Member 'FZKTeamKillRecord::Count' has a wrong offset!");
static_assert(offsetof(FZKTeamKillRecord, Forgives) == 0x000014, "Member 'FZKTeamKillRecord::Forgives' has a wrong offset!");
static_assert(offsetof(FZKTeamKillRecord, LastModified) == 0x000018, "Member 'FZKTeamKillRecord::LastModified' has a wrong offset!");

// ScriptStruct RBZooKeeper.ZKTeamKillerInfo
// 0x0038 (0x0038 - 0x0000)
struct FZKTeamKillerInfo final
{
public:
	class FString                                 LastKnownName;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastKicked;                                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZKTeamKillRecord>              TeamKillRecords;                                   // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZKTeamKillerInfo) == 0x000008, "Wrong alignment on FZKTeamKillerInfo");
static_assert(sizeof(FZKTeamKillerInfo) == 0x000038, "Wrong size on FZKTeamKillerInfo");
static_assert(offsetof(FZKTeamKillerInfo, LastKnownName) == 0x000000, "Member 'FZKTeamKillerInfo::LastKnownName' has a wrong offset!");
static_assert(offsetof(FZKTeamKillerInfo, LastKicked) == 0x000010, "Member 'FZKTeamKillerInfo::LastKicked' has a wrong offset!");
static_assert(offsetof(FZKTeamKillerInfo, UniqueId) == 0x000018, "Member 'FZKTeamKillerInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(FZKTeamKillerInfo, TeamKillRecords) == 0x000028, "Member 'FZKTeamKillerInfo::TeamKillRecords' has a wrong offset!");

}

