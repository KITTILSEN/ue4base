#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LuaMachine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LuaMachine.ELuaValueType
// NumValues: 0x000C
enum class ELuaValueType : uint8
{
	Nil                                      = 0,
	Bool                                     = 1,
	Integer                                  = 2,
	Number                                   = 3,
	String                                   = 4,
	Function                                 = 5,
	Table                                    = 6,
	UFunction                                = 7,
	UObject                                  = 8,
	Thread                                   = 9,
	MulticastDelegate                        = 10,
	ELuaValueType_MAX                        = 11,
};

// Enum LuaMachine.ELuaReflectionType
// NumValues: 0x0004
enum class ELuaReflectionType : uint8
{
	Unknown                                  = 0,
	Property                                 = 1,
	Function                                 = 2,
	ELuaReflectionType_MAX                   = 3,
};

// Enum LuaMachine.ELuaThreadStatus
// NumValues: 0x0005
enum class ELuaThreadStatus : uint8
{
	Invalid                                  = 0,
	Ok                                       = 1,
	Suspended                                = 2,
	Error                                    = 3,
	ELuaThreadStatus_MAX                     = 4,
};

// ScriptStruct LuaMachine.LuaValue
// 0x0048 (0x0048 - 0x0000)
struct FLuaValue final
{
public:
	ELuaValueType                                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bool;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Integer;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Number;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULuaState*                              LuaState;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuaValue) == 0x000008, "Wrong alignment on FLuaValue");
static_assert(sizeof(FLuaValue) == 0x000048, "Wrong size on FLuaValue");
static_assert(offsetof(FLuaValue, Type) == 0x000000, "Member 'FLuaValue::Type' has a wrong offset!");
static_assert(offsetof(FLuaValue, Bool) == 0x000001, "Member 'FLuaValue::Bool' has a wrong offset!");
static_assert(offsetof(FLuaValue, Integer) == 0x000004, "Member 'FLuaValue::Integer' has a wrong offset!");
static_assert(offsetof(FLuaValue, Number) == 0x000008, "Member 'FLuaValue::Number' has a wrong offset!");
static_assert(offsetof(FLuaValue, String) == 0x000010, "Member 'FLuaValue::String' has a wrong offset!");
static_assert(offsetof(FLuaValue, Object) == 0x000020, "Member 'FLuaValue::Object' has a wrong offset!");
static_assert(offsetof(FLuaValue, FunctionName) == 0x000028, "Member 'FLuaValue::FunctionName' has a wrong offset!");
static_assert(offsetof(FLuaValue, LuaState) == 0x000038, "Member 'FLuaValue::LuaState' has a wrong offset!");

// ScriptStruct LuaMachine.LuaCustomHighlighter
// 0x0020 (0x0020 - 0x0000)
struct FLuaCustomHighlighter final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tokens;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuaCustomHighlighter) == 0x000008, "Wrong alignment on FLuaCustomHighlighter");
static_assert(sizeof(FLuaCustomHighlighter) == 0x000020, "Wrong size on FLuaCustomHighlighter");
static_assert(offsetof(FLuaCustomHighlighter, Color) == 0x000000, "Member 'FLuaCustomHighlighter::Color' has a wrong offset!");
static_assert(offsetof(FLuaCustomHighlighter, Tokens) == 0x000010, "Member 'FLuaCustomHighlighter::Tokens' has a wrong offset!");

// ScriptStruct LuaMachine.LuaDelegateGroup
// 0x0010 (0x0010 - 0x0000)
struct FLuaDelegateGroup final
{
public:
	TArray<class ULuaDelegate*>                   LuaDelegates;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuaDelegateGroup) == 0x000008, "Wrong alignment on FLuaDelegateGroup");
static_assert(sizeof(FLuaDelegateGroup) == 0x000010, "Wrong size on FLuaDelegateGroup");
static_assert(offsetof(FLuaDelegateGroup, LuaDelegates) == 0x000000, "Member 'FLuaDelegateGroup::LuaDelegates' has a wrong offset!");

// ScriptStruct LuaMachine.LuaDebug
// 0x0048 (0x0048 - 0x0000)
struct FLuaDebug final
{
public:
	int32                                         CurrentLine;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Source;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameWhat;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuaDebug) == 0x000008, "Wrong alignment on FLuaDebug");
static_assert(sizeof(FLuaDebug) == 0x000048, "Wrong size on FLuaDebug");
static_assert(offsetof(FLuaDebug, CurrentLine) == 0x000000, "Member 'FLuaDebug::CurrentLine' has a wrong offset!");
static_assert(offsetof(FLuaDebug, Source) == 0x000008, "Member 'FLuaDebug::Source' has a wrong offset!");
static_assert(offsetof(FLuaDebug, Name) == 0x000018, "Member 'FLuaDebug::Name' has a wrong offset!");
static_assert(offsetof(FLuaDebug, NameWhat) == 0x000028, "Member 'FLuaDebug::NameWhat' has a wrong offset!");
static_assert(offsetof(FLuaDebug, What) == 0x000038, "Member 'FLuaDebug::What' has a wrong offset!");

// ScriptStruct LuaMachine.LuaLibsLoader
// 0x0009 (0x0009 - 0x0000)
struct FLuaLibsLoader final
{
public:
	bool                                          bLoadBase;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadCoroutine;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadTable;                                        // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadIO;                                           // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadOS;                                           // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadString;                                       // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadMath;                                         // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadUTF8;                                         // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadDebug;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuaLibsLoader) == 0x000001, "Wrong alignment on FLuaLibsLoader");
static_assert(sizeof(FLuaLibsLoader) == 0x000009, "Wrong size on FLuaLibsLoader");
static_assert(offsetof(FLuaLibsLoader, bLoadBase) == 0x000000, "Member 'FLuaLibsLoader::bLoadBase' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadCoroutine) == 0x000001, "Member 'FLuaLibsLoader::bLoadCoroutine' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadTable) == 0x000002, "Member 'FLuaLibsLoader::bLoadTable' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadIO) == 0x000003, "Member 'FLuaLibsLoader::bLoadIO' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadOS) == 0x000004, "Member 'FLuaLibsLoader::bLoadOS' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadString) == 0x000005, "Member 'FLuaLibsLoader::bLoadString' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadMath) == 0x000006, "Member 'FLuaLibsLoader::bLoadMath' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadUTF8) == 0x000007, "Member 'FLuaLibsLoader::bLoadUTF8' has a wrong offset!");
static_assert(offsetof(FLuaLibsLoader, bLoadDebug) == 0x000008, "Member 'FLuaLibsLoader::bLoadDebug' has a wrong offset!");

}

