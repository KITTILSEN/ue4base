#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ObjectiveMarker_Hotspot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ObjectiveMarker_Hotspot.WBP_ObjectiveMarker_Hotspot_C
// 0x01E0 (0x0440 - 0x0260)
class UWBP_ObjectiveMarker_Hotspot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Extraction;                                        // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pulse2;                                            // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pulse;                                             // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Hotspot;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Main;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AGBObjectiveMarker*                     ObjectiveMarkerRef;                                // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_Minimap_Origin_C*                   MinimapOriginRef;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BorderBrushModifiers;                              // 0x02A8(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            BorderBrushMainText;                               // 0x0330(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HotspotMarkerOversizeAmount;                       // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ParentCanvasPanelSize;                             // 0x03BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            DefaultHotspotColor;                               // 0x03C8(0x0028)(Edit, BlueprintVisible)
	TMap<class FName, struct FLinearColor>        HotspotColourLookup;                               // 0x03F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_WBP_ObjectiveMarker_Hotspot(int32 EntryPoint);
	void Construct();
	void CalcPosition(const struct FVector& InLocation, struct FVector2D* OutCanvasPosition);
	struct FSlateBrush GetBackground_Border();
	void ParseObjectiveNameForModifier(const class FString& ObjectiveName, class FString* CleanObjectiveName, class UTexture2D** ModifierSprite, bool* DisplayStaircaseIcon, bool* DisplayLevelNumberText, int32* LevelNumber, float* ModifierSpriteRotation);
	void GetHotspotMatchingHotspotName(class FName HotspotName, class AGBAIHotspot** HotspotRef);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ObjectiveMarker_Hotspot_C">();
	}
	static class UWBP_ObjectiveMarker_Hotspot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ObjectiveMarker_Hotspot_C>();
	}
};
static_assert(alignof(UWBP_ObjectiveMarker_Hotspot_C) == 0x000008, "Wrong alignment on UWBP_ObjectiveMarker_Hotspot_C");
static_assert(sizeof(UWBP_ObjectiveMarker_Hotspot_C) == 0x000440, "Wrong size on UWBP_ObjectiveMarker_Hotspot_C");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, UberGraphFrame) == 0x000260, "Member 'UWBP_ObjectiveMarker_Hotspot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, Extraction) == 0x000268, "Member 'UWBP_ObjectiveMarker_Hotspot_C::Extraction' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, Pulse2) == 0x000270, "Member 'UWBP_ObjectiveMarker_Hotspot_C::Pulse2' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, Pulse) == 0x000278, "Member 'UWBP_ObjectiveMarker_Hotspot_C::Pulse' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, Hotspot) == 0x000280, "Member 'UWBP_ObjectiveMarker_Hotspot_C::Hotspot' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, SizeBox_Main) == 0x000288, "Member 'UWBP_ObjectiveMarker_Hotspot_C::SizeBox_Main' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, ObjectiveMarkerRef) == 0x000290, "Member 'UWBP_ObjectiveMarker_Hotspot_C::ObjectiveMarkerRef' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, MinimapOriginRef) == 0x000298, "Member 'UWBP_ObjectiveMarker_Hotspot_C::MinimapOriginRef' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, TeamId) == 0x0002A0, "Member 'UWBP_ObjectiveMarker_Hotspot_C::TeamId' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, BorderBrushModifiers) == 0x0002A8, "Member 'UWBP_ObjectiveMarker_Hotspot_C::BorderBrushModifiers' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, BorderBrushMainText) == 0x000330, "Member 'UWBP_ObjectiveMarker_Hotspot_C::BorderBrushMainText' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, HotspotMarkerOversizeAmount) == 0x0003B8, "Member 'UWBP_ObjectiveMarker_Hotspot_C::HotspotMarkerOversizeAmount' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, ParentCanvasPanelSize) == 0x0003BC, "Member 'UWBP_ObjectiveMarker_Hotspot_C::ParentCanvasPanelSize' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, DefaultHotspotColor) == 0x0003C8, "Member 'UWBP_ObjectiveMarker_Hotspot_C::DefaultHotspotColor' has a wrong offset!");
static_assert(offsetof(UWBP_ObjectiveMarker_Hotspot_C, HotspotColourLookup) == 0x0003F0, "Member 'UWBP_ObjectiveMarker_Hotspot_C::HotspotColourLookup' has a wrong offset!");

}

