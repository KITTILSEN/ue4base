#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModKit

#include "Basic.hpp"

#include "ModKit_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ModKit.ModKitBlueprintLibrary.AddUInt64
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_AddUInt64 final
{
public:
	struct FUInt64                                First;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                Second;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_AddUInt64) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_AddUInt64");
static_assert(sizeof(ModKitBlueprintLibrary_AddUInt64) == 0x000018, "Wrong size on ModKitBlueprintLibrary_AddUInt64");
static_assert(offsetof(ModKitBlueprintLibrary_AddUInt64, First) == 0x000000, "Member 'ModKitBlueprintLibrary_AddUInt64::First' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_AddUInt64, Second) == 0x000008, "Member 'ModKitBlueprintLibrary_AddUInt64::Second' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_AddUInt64, ReturnValue) == 0x000010, "Member 'ModKitBlueprintLibrary_AddUInt64::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.GetAppID
// 0x0004 (0x0004 - 0x0000)
struct ModKitBlueprintLibrary_GetAppID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_GetAppID) == 0x000004, "Wrong alignment on ModKitBlueprintLibrary_GetAppID");
static_assert(sizeof(ModKitBlueprintLibrary_GetAppID) == 0x000004, "Wrong size on ModKitBlueprintLibrary_GetAppID");
static_assert(offsetof(ModKitBlueprintLibrary_GetAppID, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_GetAppID::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.GetDefaultStagedModPath
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_GetDefaultStagedModPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_GetDefaultStagedModPath) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_GetDefaultStagedModPath");
static_assert(sizeof(ModKitBlueprintLibrary_GetDefaultStagedModPath) == 0x000010, "Wrong size on ModKitBlueprintLibrary_GetDefaultStagedModPath");
static_assert(offsetof(ModKitBlueprintLibrary_GetDefaultStagedModPath, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_GetDefaultStagedModPath::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.GetEditorModPath
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_GetEditorModPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_GetEditorModPath) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_GetEditorModPath");
static_assert(sizeof(ModKitBlueprintLibrary_GetEditorModPath) == 0x000010, "Wrong size on ModKitBlueprintLibrary_GetEditorModPath");
static_assert(offsetof(ModKitBlueprintLibrary_GetEditorModPath, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_GetEditorModPath::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.GetFolderSize
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_GetFolderSize final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_GetFolderSize) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_GetFolderSize");
static_assert(sizeof(ModKitBlueprintLibrary_GetFolderSize) == 0x000018, "Wrong size on ModKitBlueprintLibrary_GetFolderSize");
static_assert(offsetof(ModKitBlueprintLibrary_GetFolderSize, Directory) == 0x000000, "Member 'ModKitBlueprintLibrary_GetFolderSize::Directory' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_GetFolderSize, ReturnValue) == 0x000010, "Member 'ModKitBlueprintLibrary_GetFolderSize::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.GetStagedModPath
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_GetStagedModPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_GetStagedModPath) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_GetStagedModPath");
static_assert(sizeof(ModKitBlueprintLibrary_GetStagedModPath) == 0x000010, "Wrong size on ModKitBlueprintLibrary_GetStagedModPath");
static_assert(offsetof(ModKitBlueprintLibrary_GetStagedModPath, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_GetStagedModPath::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.GetSubscribedMods
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_GetSubscribedMods final
{
public:
	TArray<struct FUInt64>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_GetSubscribedMods) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_GetSubscribedMods");
static_assert(sizeof(ModKitBlueprintLibrary_GetSubscribedMods) == 0x000010, "Wrong size on ModKitBlueprintLibrary_GetSubscribedMods");
static_assert(offsetof(ModKitBlueprintLibrary_GetSubscribedMods, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_GetSubscribedMods::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsFileSizeBelowWorkshopPreviewFileLimit
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit");
static_assert(sizeof(ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit) == 0x000018, "Wrong size on ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit");
static_assert(offsetof(ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit, FilePath) == 0x000000, "Member 'ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit::FilePath' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit, ReturnValue) == 0x000010, "Member 'ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsModFullyInstalled
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_IsModFullyInstalled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsModFullyInstalled) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsModFullyInstalled");
static_assert(sizeof(ModKitBlueprintLibrary_IsModFullyInstalled) == 0x000010, "Wrong size on ModKitBlueprintLibrary_IsModFullyInstalled");
static_assert(offsetof(ModKitBlueprintLibrary_IsModFullyInstalled, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_IsModFullyInstalled::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsModFullyInstalled, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_IsModFullyInstalled::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsModIDForGame
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_IsModIDForGame final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsModIDForGame) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsModIDForGame");
static_assert(sizeof(ModKitBlueprintLibrary_IsModIDForGame) == 0x000010, "Wrong size on ModKitBlueprintLibrary_IsModIDForGame");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForGame, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_IsModIDForGame::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForGame, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_IsModIDForGame::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsModIDForMod
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_IsModIDForMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsModIDForMod) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsModIDForMod");
static_assert(sizeof(ModKitBlueprintLibrary_IsModIDForMod) == 0x000010, "Wrong size on ModKitBlueprintLibrary_IsModIDForMod");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForMod, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_IsModIDForMod::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForMod, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_IsModIDForMod::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsModIDForModOrStaging
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_IsModIDForModOrStaging final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsModIDForModOrStaging) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsModIDForModOrStaging");
static_assert(sizeof(ModKitBlueprintLibrary_IsModIDForModOrStaging) == 0x000010, "Wrong size on ModKitBlueprintLibrary_IsModIDForModOrStaging");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForModOrStaging, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_IsModIDForModOrStaging::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForModOrStaging, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_IsModIDForModOrStaging::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsModIDForStaging
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_IsModIDForStaging final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsModIDForStaging) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsModIDForStaging");
static_assert(sizeof(ModKitBlueprintLibrary_IsModIDForStaging) == 0x000010, "Wrong size on ModKitBlueprintLibrary_IsModIDForStaging");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForStaging, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_IsModIDForStaging::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsModIDForStaging, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_IsModIDForStaging::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsModKitEditor
// 0x0001 (0x0001 - 0x0000)
struct ModKitBlueprintLibrary_IsModKitEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_IsModKitEditor) == 0x000001, "Wrong alignment on ModKitBlueprintLibrary_IsModKitEditor");
static_assert(sizeof(ModKitBlueprintLibrary_IsModKitEditor) == 0x000001, "Wrong size on ModKitBlueprintLibrary_IsModKitEditor");
static_assert(offsetof(ModKitBlueprintLibrary_IsModKitEditor, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_IsModKitEditor::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsSteamAPIAvailable
// 0x0001 (0x0001 - 0x0000)
struct ModKitBlueprintLibrary_IsSteamAPIAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_IsSteamAPIAvailable) == 0x000001, "Wrong alignment on ModKitBlueprintLibrary_IsSteamAPIAvailable");
static_assert(sizeof(ModKitBlueprintLibrary_IsSteamAPIAvailable) == 0x000001, "Wrong size on ModKitBlueprintLibrary_IsSteamAPIAvailable");
static_assert(offsetof(ModKitBlueprintLibrary_IsSteamAPIAvailable, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_IsSteamAPIAvailable::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.IsUInt64ValidID
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_IsUInt64ValidID final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_IsUInt64ValidID) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_IsUInt64ValidID");
static_assert(sizeof(ModKitBlueprintLibrary_IsUInt64ValidID) == 0x000010, "Wrong size on ModKitBlueprintLibrary_IsUInt64ValidID");
static_assert(offsetof(ModKitBlueprintLibrary_IsUInt64ValidID, Value) == 0x000000, "Member 'ModKitBlueprintLibrary_IsUInt64ValidID::Value' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_IsUInt64ValidID, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_IsUInt64ValidID::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.MakeModIDForGame
// 0x0008 (0x0008 - 0x0000)
struct ModKitBlueprintLibrary_MakeModIDForGame final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_MakeModIDForGame) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_MakeModIDForGame");
static_assert(sizeof(ModKitBlueprintLibrary_MakeModIDForGame) == 0x000008, "Wrong size on ModKitBlueprintLibrary_MakeModIDForGame");
static_assert(offsetof(ModKitBlueprintLibrary_MakeModIDForGame, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_MakeModIDForGame::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.MakeModIDForStaging
// 0x0008 (0x0008 - 0x0000)
struct ModKitBlueprintLibrary_MakeModIDForStaging final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_MakeModIDForStaging) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_MakeModIDForStaging");
static_assert(sizeof(ModKitBlueprintLibrary_MakeModIDForStaging) == 0x000008, "Wrong size on ModKitBlueprintLibrary_MakeModIDForStaging");
static_assert(offsetof(ModKitBlueprintLibrary_MakeModIDForStaging, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_MakeModIDForStaging::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.MakeModIDFromString
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_MakeModIDFromString final
{
public:
	class FString                                 ModIDString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_MakeModIDFromString) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_MakeModIDFromString");
static_assert(sizeof(ModKitBlueprintLibrary_MakeModIDFromString) == 0x000018, "Wrong size on ModKitBlueprintLibrary_MakeModIDFromString");
static_assert(offsetof(ModKitBlueprintLibrary_MakeModIDFromString, ModIDString) == 0x000000, "Member 'ModKitBlueprintLibrary_MakeModIDFromString::ModIDString' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_MakeModIDFromString, ReturnValue) == 0x000010, "Member 'ModKitBlueprintLibrary_MakeModIDFromString::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.MakeZeroUInt64
// 0x0008 (0x0008 - 0x0000)
struct ModKitBlueprintLibrary_MakeZeroUInt64 final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_MakeZeroUInt64) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_MakeZeroUInt64");
static_assert(sizeof(ModKitBlueprintLibrary_MakeZeroUInt64) == 0x000008, "Wrong size on ModKitBlueprintLibrary_MakeZeroUInt64");
static_assert(offsetof(ModKitBlueprintLibrary_MakeZeroUInt64, ReturnValue) == 0x000000, "Member 'ModKitBlueprintLibrary_MakeZeroUInt64::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.ModIDByType
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_ModIDByType final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModIDBranchPaths                             BranchPath;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_ModIDByType) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_ModIDByType");
static_assert(sizeof(ModKitBlueprintLibrary_ModIDByType) == 0x000010, "Wrong size on ModKitBlueprintLibrary_ModIDByType");
static_assert(offsetof(ModKitBlueprintLibrary_ModIDByType, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_ModIDByType::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_ModIDByType, BranchPath) == 0x000008, "Member 'ModKitBlueprintLibrary_ModIDByType::BranchPath' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.ModIDByTypeSimple
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_ModIDByTypeSimple final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModPathBranchPaths                           BranchPath;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_ModIDByTypeSimple) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_ModIDByTypeSimple");
static_assert(sizeof(ModKitBlueprintLibrary_ModIDByTypeSimple) == 0x000010, "Wrong size on ModKitBlueprintLibrary_ModIDByTypeSimple");
static_assert(offsetof(ModKitBlueprintLibrary_ModIDByTypeSimple, ModID) == 0x000000, "Member 'ModKitBlueprintLibrary_ModIDByTypeSimple::ModID' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_ModIDByTypeSimple, BranchPath) == 0x000008, "Member 'ModKitBlueprintLibrary_ModIDByTypeSimple::BranchPath' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.ModMetadataWorkshopIDToString
// 0x0070 (0x0070 - 0x0000)
struct ModKitBlueprintLibrary_ModMetadataWorkshopIDToString final
{
public:
	struct FModMetadata                           ModMetadata;                                       // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToString) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_ModMetadataWorkshopIDToString");
static_assert(sizeof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToString) == 0x000070, "Wrong size on ModKitBlueprintLibrary_ModMetadataWorkshopIDToString");
static_assert(offsetof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToString, ModMetadata) == 0x000000, "Member 'ModKitBlueprintLibrary_ModMetadataWorkshopIDToString::ModMetadata' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToString, ReturnValue) == 0x000060, "Member 'ModKitBlueprintLibrary_ModMetadataWorkshopIDToString::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.ModMetadataWorkshopIDToUInt64
// 0x0068 (0x0068 - 0x0000)
struct ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64 final
{
public:
	struct FModMetadata                           ModMetadata;                                       // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64");
static_assert(sizeof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64) == 0x000068, "Wrong size on ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64");
static_assert(offsetof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64, ModMetadata) == 0x000000, "Member 'ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64::ModMetadata' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64, ReturnValue) == 0x000060, "Member 'ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.SetStagedModFolderPath
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_SetStagedModFolderPath final
{
public:
	class FString                                 NewPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_SetStagedModFolderPath) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_SetStagedModFolderPath");
static_assert(sizeof(ModKitBlueprintLibrary_SetStagedModFolderPath) == 0x000010, "Wrong size on ModKitBlueprintLibrary_SetStagedModFolderPath");
static_assert(offsetof(ModKitBlueprintLibrary_SetStagedModFolderPath, NewPath) == 0x000000, "Member 'ModKitBlueprintLibrary_SetStagedModFolderPath::NewPath' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64Equals
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_UInt64Equals final
{
public:
	struct FUInt64                                A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64Equals) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64Equals");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64Equals) == 0x000018, "Wrong size on ModKitBlueprintLibrary_UInt64Equals");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64Equals, A) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64Equals::A' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64Equals, B) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64Equals::B' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64Equals, ReturnValue) == 0x000010, "Member 'ModKitBlueprintLibrary_UInt64Equals::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64NotEquals
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_UInt64NotEquals final
{
public:
	struct FUInt64                                A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64NotEquals) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64NotEquals");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64NotEquals) == 0x000018, "Wrong size on ModKitBlueprintLibrary_UInt64NotEquals");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64NotEquals, A) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64NotEquals::A' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64NotEquals, B) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64NotEquals::B' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64NotEquals, ReturnValue) == 0x000010, "Member 'ModKitBlueprintLibrary_UInt64NotEquals::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64ToFileSizeString
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_UInt64ToFileSizeString final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64ToFileSizeString) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64ToFileSizeString");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64ToFileSizeString) == 0x000018, "Wrong size on ModKitBlueprintLibrary_UInt64ToFileSizeString");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToFileSizeString, Value) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64ToFileSizeString::Value' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToFileSizeString, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64ToFileSizeString::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64ToFileSizeStringInGb
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb) == 0x000018, "Wrong size on ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb, Value) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb::Value' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64ToFloat
// 0x0010 (0x0010 - 0x0000)
struct ModKitBlueprintLibrary_UInt64ToFloat final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64ToFloat) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64ToFloat");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64ToFloat) == 0x000010, "Wrong size on ModKitBlueprintLibrary_UInt64ToFloat");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToFloat, Value) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64ToFloat::Value' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToFloat, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64ToFloat::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64ToString
// 0x0018 (0x0018 - 0x0000)
struct ModKitBlueprintLibrary_UInt64ToString final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64ToString) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64ToString");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64ToString) == 0x000018, "Wrong size on ModKitBlueprintLibrary_UInt64ToString");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToString, Value) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64ToString::Value' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToString, ReturnValue) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64ToString::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitBlueprintLibrary.UInt64ToText
// 0x0030 (0x0030 - 0x0000)
struct ModKitBlueprintLibrary_UInt64ToText final
{
public:
	struct FUInt64                                Value;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysSign;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGrouping;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumIntegralDigits;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumIntegralDigits;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitBlueprintLibrary_UInt64ToText) == 0x000008, "Wrong alignment on ModKitBlueprintLibrary_UInt64ToText");
static_assert(sizeof(ModKitBlueprintLibrary_UInt64ToText) == 0x000030, "Wrong size on ModKitBlueprintLibrary_UInt64ToText");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToText, Value) == 0x000000, "Member 'ModKitBlueprintLibrary_UInt64ToText::Value' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToText, bAlwaysSign) == 0x000008, "Member 'ModKitBlueprintLibrary_UInt64ToText::bAlwaysSign' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToText, bUseGrouping) == 0x000009, "Member 'ModKitBlueprintLibrary_UInt64ToText::bUseGrouping' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToText, MinimumIntegralDigits) == 0x00000C, "Member 'ModKitBlueprintLibrary_UInt64ToText::MinimumIntegralDigits' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToText, MaximumIntegralDigits) == 0x000010, "Member 'ModKitBlueprintLibrary_UInt64ToText::MaximumIntegralDigits' has a wrong offset!");
static_assert(offsetof(ModKitBlueprintLibrary_UInt64ToText, ReturnValue) == 0x000018, "Member 'ModKitBlueprintLibrary_UInt64ToText::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitRuntimeModLibrary.DeleteWorkshopItemFromWorkshop
// 0x0008 (0x0008 - 0x0000)
struct ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop) == 0x000008, "Wrong alignment on ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop");
static_assert(sizeof(ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop) == 0x000008, "Wrong size on ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop");
static_assert(offsetof(ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop, WorkshopID) == 0x000000, "Member 'ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop::WorkshopID' has a wrong offset!");

// Function ModKit.ModKitSettings.Get
// 0x0008 (0x0008 - 0x0000)
struct ModKitSettings_Get final
{
public:
	class UModKitSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSettings_Get) == 0x000008, "Wrong alignment on ModKitSettings_Get");
static_assert(sizeof(ModKitSettings_Get) == 0x000008, "Wrong size on ModKitSettings_Get");
static_assert(offsetof(ModKitSettings_Get, ReturnValue) == 0x000000, "Member 'ModKitSettings_Get::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSettings.SetDisabledMods
// 0x0010 (0x0010 - 0x0000)
struct ModKitSettings_SetDisabledMods final
{
public:
	TArray<struct FUInt64>                        InDisabledModList;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSettings_SetDisabledMods) == 0x000008, "Wrong alignment on ModKitSettings_SetDisabledMods");
static_assert(sizeof(ModKitSettings_SetDisabledMods) == 0x000010, "Wrong size on ModKitSettings_SetDisabledMods");
static_assert(offsetof(ModKitSettings_SetDisabledMods, InDisabledModList) == 0x000000, "Member 'ModKitSettings_SetDisabledMods::InDisabledModList' has a wrong offset!");

// Function ModKit.ModKitSettings.SetModIsDisabled
// 0x0010 (0x0010 - 0x0000)
struct ModKitSettings_SetModIsDisabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSettings_SetModIsDisabled) == 0x000008, "Wrong alignment on ModKitSettings_SetModIsDisabled");
static_assert(sizeof(ModKitSettings_SetModIsDisabled) == 0x000010, "Wrong size on ModKitSettings_SetModIsDisabled");
static_assert(offsetof(ModKitSettings_SetModIsDisabled, ModID) == 0x000000, "Member 'ModKitSettings_SetModIsDisabled::ModID' has a wrong offset!");
static_assert(offsetof(ModKitSettings_SetModIsDisabled, bDisabled) == 0x000008, "Member 'ModKitSettings_SetModIsDisabled::bDisabled' has a wrong offset!");

// Function ModKit.ModKitSettings.SetStagedModFolderPath
// 0x0010 (0x0010 - 0x0000)
struct ModKitSettings_SetStagedModFolderPath final
{
public:
	class FString                                 NewPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSettings_SetStagedModFolderPath) == 0x000008, "Wrong alignment on ModKitSettings_SetStagedModFolderPath");
static_assert(sizeof(ModKitSettings_SetStagedModFolderPath) == 0x000010, "Wrong size on ModKitSettings_SetStagedModFolderPath");
static_assert(offsetof(ModKitSettings_SetStagedModFolderPath, NewPath) == 0x000000, "Member 'ModKitSettings_SetStagedModFolderPath::NewPath' has a wrong offset!");

// Function ModKit.ModKitSettings.GetDisabledMods
// 0x0010 (0x0010 - 0x0000)
struct ModKitSettings_GetDisabledMods final
{
public:
	TArray<struct FUInt64>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSettings_GetDisabledMods) == 0x000008, "Wrong alignment on ModKitSettings_GetDisabledMods");
static_assert(sizeof(ModKitSettings_GetDisabledMods) == 0x000010, "Wrong size on ModKitSettings_GetDisabledMods");
static_assert(offsetof(ModKitSettings_GetDisabledMods, ReturnValue) == 0x000000, "Member 'ModKitSettings_GetDisabledMods::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSettings.GetEnableAutodownloadedModsLocally
// 0x0001 (0x0001 - 0x0000)
struct ModKitSettings_GetEnableAutodownloadedModsLocally final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSettings_GetEnableAutodownloadedModsLocally) == 0x000001, "Wrong alignment on ModKitSettings_GetEnableAutodownloadedModsLocally");
static_assert(sizeof(ModKitSettings_GetEnableAutodownloadedModsLocally) == 0x000001, "Wrong size on ModKitSettings_GetEnableAutodownloadedModsLocally");
static_assert(offsetof(ModKitSettings_GetEnableAutodownloadedModsLocally, ReturnValue) == 0x000000, "Member 'ModKitSettings_GetEnableAutodownloadedModsLocally::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSettings.GetModIsDisabled
// 0x0010 (0x0010 - 0x0000)
struct ModKitSettings_GetModIsDisabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSettings_GetModIsDisabled) == 0x000008, "Wrong alignment on ModKitSettings_GetModIsDisabled");
static_assert(sizeof(ModKitSettings_GetModIsDisabled) == 0x000010, "Wrong size on ModKitSettings_GetModIsDisabled");
static_assert(offsetof(ModKitSettings_GetModIsDisabled, ModID) == 0x000000, "Member 'ModKitSettings_GetModIsDisabled::ModID' has a wrong offset!");
static_assert(offsetof(ModKitSettings_GetModIsDisabled, ReturnValue) == 0x000008, "Member 'ModKitSettings_GetModIsDisabled::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSettings.GetStagedModFolderPath
// 0x0010 (0x0010 - 0x0000)
struct ModKitSettings_GetStagedModFolderPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSettings_GetStagedModFolderPath) == 0x000008, "Wrong alignment on ModKitSettings_GetStagedModFolderPath");
static_assert(sizeof(ModKitSettings_GetStagedModFolderPath) == 0x000010, "Wrong size on ModKitSettings_GetStagedModFolderPath");
static_assert(offsetof(ModKitSettings_GetStagedModFolderPath, ReturnValue) == 0x000000, "Member 'ModKitSettings_GetStagedModFolderPath::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.FindAndMountMods
// 0x0001 (0x0001 - 0x0000)
struct ModKitSubsystem_FindAndMountMods final
{
public:
	bool                                          bEditorModsOnly;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSubsystem_FindAndMountMods) == 0x000001, "Wrong alignment on ModKitSubsystem_FindAndMountMods");
static_assert(sizeof(ModKitSubsystem_FindAndMountMods) == 0x000001, "Wrong size on ModKitSubsystem_FindAndMountMods");
static_assert(offsetof(ModKitSubsystem_FindAndMountMods, bEditorModsOnly) == 0x000000, "Member 'ModKitSubsystem_FindAndMountMods::bEditorModsOnly' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetAllAssetsInPackage
// 0x0020 (0x0020 - 0x0000)
struct ModKitSubsystem_GetAllAssetsInPackage final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     Assets;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetAllAssetsInPackage) == 0x000008, "Wrong alignment on ModKitSubsystem_GetAllAssetsInPackage");
static_assert(sizeof(ModKitSubsystem_GetAllAssetsInPackage) == 0x000020, "Wrong size on ModKitSubsystem_GetAllAssetsInPackage");
static_assert(offsetof(ModKitSubsystem_GetAllAssetsInPackage, WorkshopID) == 0x000000, "Member 'ModKitSubsystem_GetAllAssetsInPackage::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetAllAssetsInPackage, Assets) == 0x000008, "Member 'ModKitSubsystem_GetAllAssetsInPackage::Assets' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetAllAssetsInPackage, ReturnValue) == 0x000018, "Member 'ModKitSubsystem_GetAllAssetsInPackage::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.MountMod
// 0x0010 (0x0010 - 0x0000)
struct ModKitSubsystem_MountMod final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEditorModsOnly;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_MountMod) == 0x000008, "Wrong alignment on ModKitSubsystem_MountMod");
static_assert(sizeof(ModKitSubsystem_MountMod) == 0x000010, "Wrong size on ModKitSubsystem_MountMod");
static_assert(offsetof(ModKitSubsystem_MountMod, WorkshopID) == 0x000000, "Member 'ModKitSubsystem_MountMod::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_MountMod, bEditorModsOnly) == 0x000008, "Member 'ModKitSubsystem_MountMod::bEditorModsOnly' has a wrong offset!");

// Function ModKit.ModKitSubsystem.UnmountMod
// 0x0008 (0x0008 - 0x0000)
struct ModKitSubsystem_UnmountMod final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitSubsystem_UnmountMod) == 0x000008, "Wrong alignment on ModKitSubsystem_UnmountMod");
static_assert(sizeof(ModKitSubsystem_UnmountMod) == 0x000008, "Wrong size on ModKitSubsystem_UnmountMod");
static_assert(offsetof(ModKitSubsystem_UnmountMod, WorkshopID) == 0x000000, "Member 'ModKitSubsystem_UnmountMod::WorkshopID' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetDirectoryFromWorkshopID
// 0x0020 (0x0020 - 0x0000)
struct ModKitSubsystem_GetDirectoryFromWorkshopID final
{
public:
	class FString                                 DirectoryPath;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                WorkshopID;                                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForNonAssetFiles;                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetDirectoryFromWorkshopID) == 0x000008, "Wrong alignment on ModKitSubsystem_GetDirectoryFromWorkshopID");
static_assert(sizeof(ModKitSubsystem_GetDirectoryFromWorkshopID) == 0x000020, "Wrong size on ModKitSubsystem_GetDirectoryFromWorkshopID");
static_assert(offsetof(ModKitSubsystem_GetDirectoryFromWorkshopID, DirectoryPath) == 0x000000, "Member 'ModKitSubsystem_GetDirectoryFromWorkshopID::DirectoryPath' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetDirectoryFromWorkshopID, WorkshopID) == 0x000010, "Member 'ModKitSubsystem_GetDirectoryFromWorkshopID::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetDirectoryFromWorkshopID, bForNonAssetFiles) == 0x000018, "Member 'ModKitSubsystem_GetDirectoryFromWorkshopID::bForNonAssetFiles' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetDirectoryFromWorkshopID, ReturnValue) == 0x000019, "Member 'ModKitSubsystem_GetDirectoryFromWorkshopID::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetMetadataFromWorkshopID
// 0x0070 (0x0070 - 0x0000)
struct ModKitSubsystem_GetMetadataFromWorkshopID final
{
public:
	struct FModMetadata                           MetaData;                                          // 0x0000(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FUInt64                                WorkshopID;                                        // 0x0060(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetMetadataFromWorkshopID) == 0x000008, "Wrong alignment on ModKitSubsystem_GetMetadataFromWorkshopID");
static_assert(sizeof(ModKitSubsystem_GetMetadataFromWorkshopID) == 0x000070, "Wrong size on ModKitSubsystem_GetMetadataFromWorkshopID");
static_assert(offsetof(ModKitSubsystem_GetMetadataFromWorkshopID, MetaData) == 0x000000, "Member 'ModKitSubsystem_GetMetadataFromWorkshopID::MetaData' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetMetadataFromWorkshopID, WorkshopID) == 0x000060, "Member 'ModKitSubsystem_GetMetadataFromWorkshopID::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetMetadataFromWorkshopID, ReturnValue) == 0x000068, "Member 'ModKitSubsystem_GetMetadataFromWorkshopID::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetModAssetWorkshopID
// 0x0070 (0x0070 - 0x0000)
struct ModKitSubsystem_GetModAssetWorkshopID final
{
public:
	struct FAssetData                             AssetData;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                WorkshopID;                                        // 0x0060(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetModAssetWorkshopID) == 0x000008, "Wrong alignment on ModKitSubsystem_GetModAssetWorkshopID");
static_assert(sizeof(ModKitSubsystem_GetModAssetWorkshopID) == 0x000070, "Wrong size on ModKitSubsystem_GetModAssetWorkshopID");
static_assert(offsetof(ModKitSubsystem_GetModAssetWorkshopID, AssetData) == 0x000000, "Member 'ModKitSubsystem_GetModAssetWorkshopID::AssetData' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetModAssetWorkshopID, WorkshopID) == 0x000060, "Member 'ModKitSubsystem_GetModAssetWorkshopID::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetModAssetWorkshopID, ReturnValue) == 0x000068, "Member 'ModKitSubsystem_GetModAssetWorkshopID::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetModAssetWorkshopIDFromPrimaryAssetId
// 0x0020 (0x0020 - 0x0000)
struct ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                WorkshopID;                                        // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId) == 0x000008, "Wrong alignment on ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId");
static_assert(sizeof(ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId) == 0x000020, "Wrong size on ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId");
static_assert(offsetof(ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId, PrimaryAssetId) == 0x000000, "Member 'ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId, WorkshopID) == 0x000010, "Member 'ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId, ReturnValue) == 0x000018, "Member 'ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetPakFilenameForMod
// 0x0020 (0x0020 - 0x0000)
struct ModKitSubsystem_GetPakFilenameForMod final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetPakFilenameForMod) == 0x000008, "Wrong alignment on ModKitSubsystem_GetPakFilenameForMod");
static_assert(sizeof(ModKitSubsystem_GetPakFilenameForMod) == 0x000020, "Wrong size on ModKitSubsystem_GetPakFilenameForMod");
static_assert(offsetof(ModKitSubsystem_GetPakFilenameForMod, WorkshopID) == 0x000000, "Member 'ModKitSubsystem_GetPakFilenameForMod::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetPakFilenameForMod, Filename) == 0x000008, "Member 'ModKitSubsystem_GetPakFilenameForMod::Filename' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetPakFilenameForMod, ReturnValue) == 0x000018, "Member 'ModKitSubsystem_GetPakFilenameForMod::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.GetWorkshopIDFromPluginName
// 0x0020 (0x0020 - 0x0000)
struct ModKitSubsystem_GetWorkshopIDFromPluginName final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PluginName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_GetWorkshopIDFromPluginName) == 0x000008, "Wrong alignment on ModKitSubsystem_GetWorkshopIDFromPluginName");
static_assert(sizeof(ModKitSubsystem_GetWorkshopIDFromPluginName) == 0x000020, "Wrong size on ModKitSubsystem_GetWorkshopIDFromPluginName");
static_assert(offsetof(ModKitSubsystem_GetWorkshopIDFromPluginName, WorkshopID) == 0x000000, "Member 'ModKitSubsystem_GetWorkshopIDFromPluginName::WorkshopID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetWorkshopIDFromPluginName, PluginName) == 0x000008, "Member 'ModKitSubsystem_GetWorkshopIDFromPluginName::PluginName' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_GetWorkshopIDFromPluginName, ReturnValue) == 0x000018, "Member 'ModKitSubsystem_GetWorkshopIDFromPluginName::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.IsModMountable
// 0x0010 (0x0010 - 0x0000)
struct ModKitSubsystem_IsModMountable final
{
public:
	struct FUInt64                                WorkshopItemID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_IsModMountable) == 0x000008, "Wrong alignment on ModKitSubsystem_IsModMountable");
static_assert(sizeof(ModKitSubsystem_IsModMountable) == 0x000010, "Wrong size on ModKitSubsystem_IsModMountable");
static_assert(offsetof(ModKitSubsystem_IsModMountable, WorkshopItemID) == 0x000000, "Member 'ModKitSubsystem_IsModMountable::WorkshopItemID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_IsModMountable, ReturnValue) == 0x000008, "Member 'ModKitSubsystem_IsModMountable::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitSubsystem.IsModMounted
// 0x0010 (0x0010 - 0x0000)
struct ModKitSubsystem_IsModMounted final
{
public:
	struct FUInt64                                WorkshopItemID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModKitSubsystem_IsModMounted) == 0x000008, "Wrong alignment on ModKitSubsystem_IsModMounted");
static_assert(sizeof(ModKitSubsystem_IsModMounted) == 0x000010, "Wrong size on ModKitSubsystem_IsModMounted");
static_assert(offsetof(ModKitSubsystem_IsModMounted, WorkshopItemID) == 0x000000, "Member 'ModKitSubsystem_IsModMounted::WorkshopItemID' has a wrong offset!");
static_assert(offsetof(ModKitSubsystem_IsModMounted, ReturnValue) == 0x000008, "Member 'ModKitSubsystem_IsModMounted::ReturnValue' has a wrong offset!");

// Function ModKit.ModKitUploadWorkshopItem.UploadWorkshopItem
// 0x00A0 (0x00A0 - 0x0000)
struct ModKitUploadWorkshopItem_UploadWorkshopItem final
{
public:
	struct FRuntimeModWorkshopInfo                RuntimeModWorkshopInfo;                            // 0x0000(0x00A0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModKitUploadWorkshopItem_UploadWorkshopItem) == 0x000008, "Wrong alignment on ModKitUploadWorkshopItem_UploadWorkshopItem");
static_assert(sizeof(ModKitUploadWorkshopItem_UploadWorkshopItem) == 0x0000A0, "Wrong size on ModKitUploadWorkshopItem_UploadWorkshopItem");
static_assert(offsetof(ModKitUploadWorkshopItem_UploadWorkshopItem, RuntimeModWorkshopInfo) == 0x000000, "Member 'ModKitUploadWorkshopItem_UploadWorkshopItem::RuntimeModWorkshopInfo' has a wrong offset!");

}

