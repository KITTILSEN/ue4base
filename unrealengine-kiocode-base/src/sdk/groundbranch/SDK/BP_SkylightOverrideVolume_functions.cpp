#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkylightOverrideVolume

#include "Basic.hpp"

#include "BP_SkylightOverrideVolume_classes.hpp"
#include "BP_SkylightOverrideVolume_parameters.hpp"


namespace SDK
{

// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ExecuteUbergraph_BP_SkylightOverrideVolume
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::ExecuteUbergraph_BP_SkylightOverrideVolume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ExecuteUbergraph_BP_SkylightOverrideVolume");

	Params::BP_SkylightOverrideVolume_C_ExecuteUbergraph_BP_SkylightOverrideVolume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.OnTimeOfDayChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBSky*                           SkyActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::OnTimeOfDayChanged(class AGBSky* SkyActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "OnTimeOfDayChanged");

	Params::BP_SkylightOverrideVolume_C_OnTimeOfDayChanged Parms{};

	Parms.SkyActor = SkyActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ServerUnbindCharacterEnteredPlayArea
// (BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::ServerUnbindCharacterEnteredPlayArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ServerUnbindCharacterEnteredPlayArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.OnCharacterEnteredPlayArea
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBGameMode*                      GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AGBCharacter*                     GBCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::OnCharacterEnteredPlayArea(class AGBGameMode* GameMode, class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "OnCharacterEnteredPlayArea");

	Params::BP_SkylightOverrideVolume_C_OnCharacterEnteredPlayArea Parms{};

	Parms.GameMode = GameMode;
	Parms.GBCharacter = GBCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ServerBindCharacterEnteredPlayArea
// (BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::ServerBindCharacterEnteredPlayArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ServerBindCharacterEnteredPlayArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ClientProcessNewSkylightAlphaIntensity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewSkylightAlphaIntensity                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             VolumeName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::ClientProcessNewSkylightAlphaIntensity(float NewSkylightAlphaIntensity, class FName VolumeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ClientProcessNewSkylightAlphaIntensity");

	Params::BP_SkylightOverrideVolume_C_ClientProcessNewSkylightAlphaIntensity Parms{};

	Parms.NewSkylightAlphaIntensity = NewSkylightAlphaIntensity;
	Parms.VolumeName = VolumeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ServerProcessNewMinLightLevel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewMinLightLevelForCharacter                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             VolumeName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AGBCharacter*                     GBCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::ServerProcessNewMinLightLevel(float NewMinLightLevelForCharacter, class FName VolumeName, class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ServerProcessNewMinLightLevel");

	Params::BP_SkylightOverrideVolume_C_ServerProcessNewMinLightLevel Parms{};

	Parms.NewMinLightLevelForCharacter = NewMinLightLevelForCharacter;
	Parms.VolumeName = VolumeName;
	Parms.GBCharacter = GBCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ClientCheckOverlaps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CallingVolumeName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::ClientCheckOverlaps(class FName CallingVolumeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ClientCheckOverlaps");

	Params::BP_SkylightOverrideVolume_C_ClientCheckOverlaps Parms{};

	Parms.CallingVolumeName = CallingVolumeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ServerCheckOverlaps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             CallingVolumeName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::ServerCheckOverlaps(class AGBCharacter* GBCharacter, class FName CallingVolumeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ServerCheckOverlaps");

	Params::BP_SkylightOverrideVolume_C_ServerCheckOverlaps Parms{};

	Parms.GBCharacter = GBCharacter;
	Parms.CallingVolumeName = CallingVolumeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.UnbindLocalPlayerEvents
// (BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::UnbindLocalPlayerEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "UnbindLocalPlayerEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.OnReadyRoomStatusChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::OnReadyRoomStatusChanged(class AGBPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "OnReadyRoomStatusChanged");

	Params::BP_SkylightOverrideVolume_C_OnReadyRoomStatusChanged Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ReceiveEndPlay");

	Params::BP_SkylightOverrideVolume_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.OnComponentEndOverlap_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::OnComponentEndOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "OnComponentEndOverlap_Event_0");

	Params::BP_SkylightOverrideVolume_C_OnComponentEndOverlap_Event_0 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.OnComponentBeginOverlap_Event_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_SkylightOverrideVolume_C::OnComponentBeginOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "OnComponentBeginOverlap_Event_0");

	Params::BP_SkylightOverrideVolume_C_OnComponentBeginOverlap_Event_0 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.LocalPlayerCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::LocalPlayerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "LocalPlayerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.BindLocalPlayerEvents
// (BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::BindLocalPlayerEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "BindLocalPlayerEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.OnPlayerControllerStateChanged_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::OnPlayerControllerStateChanged_Event_0(class FName OldState, class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "OnPlayerControllerStateChanged_Event_0");

	Params::BP_SkylightOverrideVolume_C_OnPlayerControllerStateChanged_Event_0 Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.SetFadeValues
// (BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::SetFadeValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "SetFadeValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SkylightOverrideVolume_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C.GetVolumeDataFromOverlaps
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  MinLightLevel_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  SkylightFadeIntensity                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            VolumeName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  FadeSpeed_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SkylightOverrideVolume_C::GetVolumeDataFromOverlaps(class AActor* Actor, float* MinLightLevel_0, float* SkylightFadeIntensity, class FName* VolumeName, float* FadeSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkylightOverrideVolume_C", "GetVolumeDataFromOverlaps");

	Params::BP_SkylightOverrideVolume_C_GetVolumeDataFromOverlaps Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (MinLightLevel_0 != nullptr)
		*MinLightLevel_0 = Parms.MinLightLevel_0;

	if (SkylightFadeIntensity != nullptr)
		*SkylightFadeIntensity = Parms.SkylightFadeIntensity;

	if (VolumeName != nullptr)
		*VolumeName = Parms.VolumeName;

	if (FadeSpeed_0 != nullptr)
		*FadeSpeed_0 = Parms.FadeSpeed_0;
}

}

