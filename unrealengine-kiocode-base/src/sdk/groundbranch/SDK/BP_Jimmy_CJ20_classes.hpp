#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Jimmy_CJ20

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Jimmy_CJ20.BP_Jimmy_CJ20_C
// 0x0090 (0x02B0 - 0x0220)
class ABP_Jimmy_CJ20_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   ChildActor;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   DoorGlass_RF;                                      // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   DoorGlass_LF;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Jimmy_SJ20_Top;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Door_RF;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Door_LF;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Wheel_RR;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Wheel_RF;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Wheel_LR;                                        // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Wheel_LF;                                        // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightR;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightL;                                       // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_L;                                       // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_R;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Main;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HeadlightsON;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Door_RightFront;                                   // 0x02A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Door_LeftFront;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasTop;                                            // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Jimmy_CJ20(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Jimmy_CJ20_C">();
	}
	static class ABP_Jimmy_CJ20_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Jimmy_CJ20_C>();
	}
};
static_assert(alignof(ABP_Jimmy_CJ20_C) == 0x000008, "Wrong alignment on ABP_Jimmy_CJ20_C");
static_assert(sizeof(ABP_Jimmy_CJ20_C) == 0x0002B0, "Wrong size on ABP_Jimmy_CJ20_C");
static_assert(offsetof(ABP_Jimmy_CJ20_C, UberGraphFrame) == 0x000220, "Member 'ABP_Jimmy_CJ20_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, ChildActor) == 0x000228, "Member 'ABP_Jimmy_CJ20_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, DoorGlass_RF) == 0x000230, "Member 'ABP_Jimmy_CJ20_C::DoorGlass_RF' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, DoorGlass_LF) == 0x000238, "Member 'ABP_Jimmy_CJ20_C::DoorGlass_LF' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Jimmy_SJ20_Top) == 0x000240, "Member 'ABP_Jimmy_CJ20_C::S_Jimmy_SJ20_Top' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Door_RF) == 0x000248, "Member 'ABP_Jimmy_CJ20_C::S_Door_RF' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Door_LF) == 0x000250, "Member 'ABP_Jimmy_CJ20_C::S_Door_LF' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Wheel_RR) == 0x000258, "Member 'ABP_Jimmy_CJ20_C::S_Wheel_RR' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Wheel_RF) == 0x000260, "Member 'ABP_Jimmy_CJ20_C::S_Wheel_RF' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Wheel_LR) == 0x000268, "Member 'ABP_Jimmy_CJ20_C::S_Wheel_LR' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Wheel_LF) == 0x000270, "Member 'ABP_Jimmy_CJ20_C::S_Wheel_LF' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, PointLightR) == 0x000278, "Member 'ABP_Jimmy_CJ20_C::PointLightR' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, PointLightL) == 0x000280, "Member 'ABP_Jimmy_CJ20_C::PointLightL' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, SpotLight_L) == 0x000288, "Member 'ABP_Jimmy_CJ20_C::SpotLight_L' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, SpotLight_R) == 0x000290, "Member 'ABP_Jimmy_CJ20_C::SpotLight_R' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, S_Main) == 0x000298, "Member 'ABP_Jimmy_CJ20_C::S_Main' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, HeadlightsON) == 0x0002A0, "Member 'ABP_Jimmy_CJ20_C::HeadlightsON' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, Door_RightFront) == 0x0002A4, "Member 'ABP_Jimmy_CJ20_C::Door_RightFront' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, Door_LeftFront) == 0x0002A8, "Member 'ABP_Jimmy_CJ20_C::Door_LeftFront' has a wrong offset!");
static_assert(offsetof(ABP_Jimmy_CJ20_C, HasTop) == 0x0002AC, "Member 'ABP_Jimmy_CJ20_C::HasTop' has a wrong offset!");

}

