#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InGameMap_PlayerBlip

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_InGameMap_PlayerBlip.WBP_InGameMap_PlayerBlip_C
// 0x0130 (0x0390 - 0x0260)
class UWBP_InGameMap_PlayerBlip_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Pulse;                                             // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_Inner;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABP_Minimap_Origin_C*                   MinimapOriginRef;                                  // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AGBPlayerState*                         PlayerState;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsTeammate;                                       // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InfoCanvasPosition;                                // 0x028C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            HoveredOuter;                                      // 0x0298(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            NormalOuter;                                       // 0x02C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LastLocation;                                      // 0x02E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastRotation;                                      // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasLastLocation;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLocation;                                   // 0x02FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRotation;                                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CurrentPlayerIcon;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightThresholdForUpOrDown;                        // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             TeammateIcon;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             TeammateIconUp;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             TeammateIconDown;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<ETeamElement, struct FLinearColor>       TeamElementColours;                                // 0x0338(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         UpdateTime;                                        // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamElement                                  CurrentTeamElement;                                // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_InGameMap_PlayerBlip(int32 EntryPoint);
	void SetTeamElementColour();
	void Construct();
	void UpdatePosition();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void GetIconForTeammate(const struct FVector& TeammateLocation, class UTexture2D** NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_InGameMap_PlayerBlip_C">();
	}
	static class UWBP_InGameMap_PlayerBlip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_InGameMap_PlayerBlip_C>();
	}
};
static_assert(alignof(UWBP_InGameMap_PlayerBlip_C) == 0x000008, "Wrong alignment on UWBP_InGameMap_PlayerBlip_C");
static_assert(sizeof(UWBP_InGameMap_PlayerBlip_C) == 0x000390, "Wrong size on UWBP_InGameMap_PlayerBlip_C");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, UberGraphFrame) == 0x000260, "Member 'UWBP_InGameMap_PlayerBlip_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, Pulse) == 0x000268, "Member 'UWBP_InGameMap_PlayerBlip_C::Pulse' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, Image_Inner) == 0x000270, "Member 'UWBP_InGameMap_PlayerBlip_C::Image_Inner' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, MinimapOriginRef) == 0x000278, "Member 'UWBP_InGameMap_PlayerBlip_C::MinimapOriginRef' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, PlayerState) == 0x000280, "Member 'UWBP_InGameMap_PlayerBlip_C::PlayerState' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, TeamId) == 0x000288, "Member 'UWBP_InGameMap_PlayerBlip_C::TeamId' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, bIsTeammate) == 0x000289, "Member 'UWBP_InGameMap_PlayerBlip_C::bIsTeammate' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, InfoCanvasPosition) == 0x00028C, "Member 'UWBP_InGameMap_PlayerBlip_C::InfoCanvasPosition' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, HoveredOuter) == 0x000298, "Member 'UWBP_InGameMap_PlayerBlip_C::HoveredOuter' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, NormalOuter) == 0x0002C0, "Member 'UWBP_InGameMap_PlayerBlip_C::NormalOuter' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, LastLocation) == 0x0002E8, "Member 'UWBP_InGameMap_PlayerBlip_C::LastLocation' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, LastRotation) == 0x0002F4, "Member 'UWBP_InGameMap_PlayerBlip_C::LastRotation' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, bHasLastLocation) == 0x0002F8, "Member 'UWBP_InGameMap_PlayerBlip_C::bHasLastLocation' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, CurrentLocation) == 0x0002FC, "Member 'UWBP_InGameMap_PlayerBlip_C::CurrentLocation' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, CurrentRotation) == 0x000308, "Member 'UWBP_InGameMap_PlayerBlip_C::CurrentRotation' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, CurrentPlayerIcon) == 0x000310, "Member 'UWBP_InGameMap_PlayerBlip_C::CurrentPlayerIcon' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, HeightThresholdForUpOrDown) == 0x000318, "Member 'UWBP_InGameMap_PlayerBlip_C::HeightThresholdForUpOrDown' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, TeammateIcon) == 0x000320, "Member 'UWBP_InGameMap_PlayerBlip_C::TeammateIcon' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, TeammateIconUp) == 0x000328, "Member 'UWBP_InGameMap_PlayerBlip_C::TeammateIconUp' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, TeammateIconDown) == 0x000330, "Member 'UWBP_InGameMap_PlayerBlip_C::TeammateIconDown' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, TeamElementColours) == 0x000338, "Member 'UWBP_InGameMap_PlayerBlip_C::TeamElementColours' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, UpdateTime) == 0x000388, "Member 'UWBP_InGameMap_PlayerBlip_C::UpdateTime' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_PlayerBlip_C, CurrentTeamElement) == 0x00038C, "Member 'UWBP_InGameMap_PlayerBlip_C::CurrentTeamElement' has a wrong offset!");

}

