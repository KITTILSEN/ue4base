#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KytheraPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KytheraPlugin.KytMotionType
// NumValues: 0x0007
enum class EKytMotionType : uint8
{
	None                                     = 0,
	Goto                                     = 1,
	ExactGoto                                = 2,
	SteeringGoto                             = 3,
	Animation                                = 4,
	Orient                                   = 5,
	KytMotionType_MAX                        = 6,
};

// Enum KytheraPlugin.RadiusSourceEnum
// NumValues: 0x0003
enum class ERadiusSourceEnum : uint8
{
	ShipRadius                               = 0,
	QuerierBoundsRadius                      = 1,
	RadiusSourceEnum_MAX                     = 2,
};

// Enum KytheraPlugin.EPointIsOccupied
// NumValues: 0x0003
enum class EPointIsOccupied : uint8
{
	EPIO_PointOccupied                       = 0,
	EPIO_PointVacant                         = 1,
	EPIO_MAX                                 = 2,
};

// Enum KytheraPlugin.ETagMatchType
// NumValues: 0x0003
enum class ETagMatchType : uint8
{
	ETMT_MatchAll                            = 0,
	ETMT_MatchAny                            = 1,
	ETMT_MAX                                 = 2,
};

// Enum KytheraPlugin.KytBBVariableTypeEnum
// NumValues: 0x0003
enum class EKytBBVariableTypeEnum : uint32
{
	CONSTANT                                 = 0,
	VARIABLE                                 = 1,
	KytBBVariableTypeEnum_MAX                = 2,
};

// Enum KytheraPlugin.KytBBCompareFunctionEnum
// NumValues: 0x0003
enum class EKytBBCompareFunctionEnum : uint32
{
	EQUALS                                   = 0,
	NOT_EQUAL                                = 1,
	KytBBCompareFunctionEnum_MAX             = 2,
};

// Enum KytheraPlugin.KytSignalLenComparisonOperator
// NumValues: 0x0005
enum class EKytSignalLenComparisonOperator : uint8
{
	EQUAL                                    = 0,
	NOT_EQUAL                                = 1,
	GREATER_THAN                             = 2,
	LESS_THAN                                = 3,
	KytSignalLenComparisonOperator_MAX       = 4,
};

// Enum KytheraPlugin.EKytBTConditionResult
// NumValues: 0x0004
enum class EKytBTConditionResult : uint8
{
	CONDITION_FALSE                          = 0,
	CONDITION_TRUE                           = 1,
	CONDITION_ERROR                          = 2,
	CONDITION_MAX                            = 3,
};

// Enum KytheraPlugin.EKytBTUpdateResult
// NumValues: 0x0006
enum class EKytBTUpdateResult : uint8
{
	NODE_ERROR                               = 0,
	NODE_EXCEPTION                           = 1,
	NODE_SUCCEEDED                           = 2,
	NODE_FAILED                              = 3,
	NODE_IN_PROGRESS                         = 4,
	NODE_MAX                                 = 5,
};

// Enum KytheraPlugin.EKytBTEnterResult
// NumValues: 0x0004
enum class EKytBTEnterResult : uint8
{
	ENTER_ERROR                              = 0,
	ENTER_OK                                 = 1,
	ENTER_FAILED                             = 2,
	ENTER_MAX                                = 3,
};

// Enum KytheraPlugin.DiscardPolicyEnum
// NumValues: 0x0003
enum class EDiscardPolicyEnum : uint32
{
	DISCARD_OLDEST                           = 0,
	DISCARD_NEWEST                           = 1,
	DISCARD_MAX                              = 2,
};

// Enum KytheraPlugin.EKytBBVectorType
// NumValues: 0x0003
enum class EKytBBVectorType : uint8
{
	POSITION                                 = 0,
	VEC3                                     = 1,
	EKytBBVectorType_MAX                     = 2,
};

// Enum KytheraPlugin.EKyt2DMovementStyle
// NumValues: 0x0005
enum class EKyt2DMovementStyle : uint8
{
	NoAvoidance                              = 0,
	ORCAAvoidance                            = 1,
	LocalAvoidanceNavmesh                    = 2,
	ContextSteering                          = 3,
	EKyt2DMovementStyle_MAX                  = 4,
};

// Enum KytheraPlugin.ECoordinateSystem
// NumValues: 0x0003
enum class ECoordinateSystem : uint8
{
	WORLD                                    = 0,
	TILESET                                  = 1,
	ECoordinateSystem_MAX                    = 2,
};

// Enum KytheraPlugin.PawnShape
// NumValues: 0x0003
enum class EPawnShape : uint8
{
	BOX                                      = 0,
	SPHERE                                   = 1,
	PawnShape_MAX                            = 2,
};

// Enum KytheraPlugin.EKytShapeType
// NumValues: 0x0003
enum class EKytShapeType : uint8
{
	BOX                                      = 0,
	SPHERE                                   = 1,
	EKytShapeType_MAX                        = 2,
};

// Enum KytheraPlugin.EKytSignalDispatchModeEnum
// NumValues: 0x0006
enum class EKytSignalDispatchModeEnum : uint8
{
	EKSDM_GLOBAL                             = 0,
	EKSDM_ENTITY                             = 1,
	EKSDM_GROUP                              = 2,
	EKSDM_BROADCAST                          = 3,
	EKSDM_ENTITIES_IN_RANGE                  = 4,
	EKSDM_MAX                                = 5,
};

// ScriptStruct KytheraPlugin.KytMove
// 0x0038 (0x0038 - 0x0000)
struct FKytMove final
{
public:
	bool                                          bUseAcceleration;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForwardDirection;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpDirection;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardDir;                                        // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpDir;                                             // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKytMove) == 0x000004, "Wrong alignment on FKytMove");
static_assert(sizeof(FKytMove) == 0x000038, "Wrong size on FKytMove");
static_assert(offsetof(FKytMove, bUseAcceleration) == 0x000000, "Member 'FKytMove::bUseAcceleration' has a wrong offset!");
static_assert(offsetof(FKytMove, bIsForwardDirection) == 0x000001, "Member 'FKytMove::bIsForwardDirection' has a wrong offset!");
static_assert(offsetof(FKytMove, bIsUpDirection) == 0x000002, "Member 'FKytMove::bIsUpDirection' has a wrong offset!");
static_assert(offsetof(FKytMove, Velocity) == 0x000004, "Member 'FKytMove::Velocity' has a wrong offset!");
static_assert(offsetof(FKytMove, Acceleration) == 0x000010, "Member 'FKytMove::Acceleration' has a wrong offset!");
static_assert(offsetof(FKytMove, ForwardDir) == 0x00001C, "Member 'FKytMove::ForwardDir' has a wrong offset!");
static_assert(offsetof(FKytMove, UpDir) == 0x000028, "Member 'FKytMove::UpDir' has a wrong offset!");
static_assert(offsetof(FKytMove, DeltaTime) == 0x000034, "Member 'FKytMove::DeltaTime' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytCSNBubbleSingleLodPreset
// 0x0010 (0x0010 - 0x0000)
struct FKytCSNBubbleSingleLodPreset final
{
public:
	float                                         LOD0;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LOD1;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LOD2;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LOD3;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKytCSNBubbleSingleLodPreset) == 0x000004, "Wrong alignment on FKytCSNBubbleSingleLodPreset");
static_assert(sizeof(FKytCSNBubbleSingleLodPreset) == 0x000010, "Wrong size on FKytCSNBubbleSingleLodPreset");
static_assert(offsetof(FKytCSNBubbleSingleLodPreset, LOD0) == 0x000000, "Member 'FKytCSNBubbleSingleLodPreset::LOD0' has a wrong offset!");
static_assert(offsetof(FKytCSNBubbleSingleLodPreset, LOD1) == 0x000004, "Member 'FKytCSNBubbleSingleLodPreset::LOD1' has a wrong offset!");
static_assert(offsetof(FKytCSNBubbleSingleLodPreset, LOD2) == 0x000008, "Member 'FKytCSNBubbleSingleLodPreset::LOD2' has a wrong offset!");
static_assert(offsetof(FKytCSNBubbleSingleLodPreset, LOD3) == 0x00000C, "Member 'FKytCSNBubbleSingleLodPreset::LOD3' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytCSNBubblePreset
// 0x0050 (0x0050 - 0x0000)
struct FKytCSNBubblePreset final
{
public:
	TMap<class FString, struct FKytCSNBubbleSingleLodPreset> LODs;                                   // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKytCSNBubblePreset) == 0x000008, "Wrong alignment on FKytCSNBubblePreset");
static_assert(sizeof(FKytCSNBubblePreset) == 0x000050, "Wrong size on FKytCSNBubblePreset");
static_assert(offsetof(FKytCSNBubblePreset, LODs) == 0x000000, "Member 'FKytCSNBubblePreset::LODs' has a wrong offset!");

// ScriptStruct KytheraPlugin.UKytPosition
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FUKytPosition final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUKytPosition) == 0x000008, "Wrong alignment on FUKytPosition");
static_assert(sizeof(FUKytPosition) == 0x000020, "Wrong size on FUKytPosition");

// ScriptStruct KytheraPlugin.KytAnimRequest
// 0x0058 (0x0058 - 0x0000)
struct FKytAnimRequest final
{
public:
	struct FUKytPosition                          StartPos;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUKytPosition                          EndPos;                                            // 0x0020(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AnimationName;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         AnimParams;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKytAnimRequest) == 0x000008, "Wrong alignment on FKytAnimRequest");
static_assert(sizeof(FKytAnimRequest) == 0x000058, "Wrong size on FKytAnimRequest");
static_assert(offsetof(FKytAnimRequest, StartPos) == 0x000000, "Member 'FKytAnimRequest::StartPos' has a wrong offset!");
static_assert(offsetof(FKytAnimRequest, EndPos) == 0x000020, "Member 'FKytAnimRequest::EndPos' has a wrong offset!");
static_assert(offsetof(FKytAnimRequest, AnimationName) == 0x000040, "Member 'FKytAnimRequest::AnimationName' has a wrong offset!");
static_assert(offsetof(FKytAnimRequest, AnimParams) == 0x000050, "Member 'FKytAnimRequest::AnimParams' has a wrong offset!");

// ScriptStruct KytheraPlugin.HashData
// 0x0020 (0x0020 - 0x0000)
struct FHashData final
{
public:
	TArray<uint64>                                InclusionHashes;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint64>                                ExclusionHashes;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHashData) == 0x000008, "Wrong alignment on FHashData");
static_assert(sizeof(FHashData) == 0x000020, "Wrong size on FHashData");
static_assert(offsetof(FHashData, InclusionHashes) == 0x000000, "Member 'FHashData::InclusionHashes' has a wrong offset!");
static_assert(offsetof(FHashData, ExclusionHashes) == 0x000010, "Member 'FHashData::ExclusionHashes' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytMotionGoal
// 0x0070 (0x0070 - 0x0000)
struct FKytMotionGoal final
{
public:
	EKytMotionType                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUKytPosition                          Pos;                                               // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                dir;                                               // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dirTolerance;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 speedCategory;                                     // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 stance;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pathDistance;                                      // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         exactFinalSpeed;                                   // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isNavLink;                                         // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMakingProgress;                                  // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          smoothVelocity;                                    // 0x006A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isModifiedByAvoidance;                             // 0x006B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKytMotionGoal) == 0x000008, "Wrong alignment on FKytMotionGoal");
static_assert(sizeof(FKytMotionGoal) == 0x000070, "Wrong size on FKytMotionGoal");
static_assert(offsetof(FKytMotionGoal, Type) == 0x000000, "Member 'FKytMotionGoal::Type' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, Pos) == 0x000008, "Member 'FKytMotionGoal::Pos' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, dir) == 0x000028, "Member 'FKytMotionGoal::dir' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, dirTolerance) == 0x000034, "Member 'FKytMotionGoal::dirTolerance' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, Speed) == 0x000038, "Member 'FKytMotionGoal::Speed' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, speedCategory) == 0x000040, "Member 'FKytMotionGoal::speedCategory' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, stance) == 0x000050, "Member 'FKytMotionGoal::stance' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, pathDistance) == 0x000060, "Member 'FKytMotionGoal::pathDistance' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, exactFinalSpeed) == 0x000064, "Member 'FKytMotionGoal::exactFinalSpeed' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, isNavLink) == 0x000068, "Member 'FKytMotionGoal::isNavLink' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, isMakingProgress) == 0x000069, "Member 'FKytMotionGoal::isMakingProgress' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, smoothVelocity) == 0x00006A, "Member 'FKytMotionGoal::smoothVelocity' has a wrong offset!");
static_assert(offsetof(FKytMotionGoal, isModifiedByAvoidance) == 0x00006B, "Member 'FKytMotionGoal::isModifiedByAvoidance' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytPathFollow
// 0x00E0 (0x00E0 - 0x0000)
struct FKytPathFollow final
{
public:
	struct FKytMotionGoal                         CurrentGoal;                                       // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKytMotionGoal                         NextGoal;                                          // 0x0070(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKytPathFollow) == 0x000008, "Wrong alignment on FKytPathFollow");
static_assert(sizeof(FKytPathFollow) == 0x0000E0, "Wrong size on FKytPathFollow");
static_assert(offsetof(FKytPathFollow, CurrentGoal) == 0x000000, "Member 'FKytPathFollow::CurrentGoal' has a wrong offset!");
static_assert(offsetof(FKytPathFollow, NextGoal) == 0x000070, "Member 'FKytPathFollow::NextGoal' has a wrong offset!");

// ScriptStruct KytheraPlugin.AreaCostLabelData
// 0x0010 (0x0010 - 0x0000)
struct FAreaCostLabelData final
{
public:
	class FString                                 AreaLabel;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaCostLabelData) == 0x000008, "Wrong alignment on FAreaCostLabelData");
static_assert(sizeof(FAreaCostLabelData) == 0x000010, "Wrong size on FAreaCostLabelData");
static_assert(offsetof(FAreaCostLabelData, AreaLabel) == 0x000000, "Member 'FAreaCostLabelData::AreaLabel' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytFormationNode
// 0x0020 (0x0020 - 0x0000)
struct FKytFormationNode final
{
public:
	class FString                                 RequiredTag;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetVec;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKytFormationNode) == 0x000008, "Wrong alignment on FKytFormationNode");
static_assert(sizeof(FKytFormationNode) == 0x000020, "Wrong size on FKytFormationNode");
static_assert(offsetof(FKytFormationNode, RequiredTag) == 0x000000, "Member 'FKytFormationNode::RequiredTag' has a wrong offset!");
static_assert(offsetof(FKytFormationNode, OffsetVec) == 0x000010, "Member 'FKytFormationNode::OffsetVec' has a wrong offset!");
static_assert(offsetof(FKytFormationNode, Rotation) == 0x000018, "Member 'FKytFormationNode::Rotation' has a wrong offset!");

// ScriptStruct KytheraPlugin.PerceivedTargetInfo
// 0x0010 (0x0010 - 0x0000)
struct FPerceivedTargetInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHostile;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInLineOfSight;                                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerceivedTargetInfo) == 0x000008, "Wrong alignment on FPerceivedTargetInfo");
static_assert(sizeof(FPerceivedTargetInfo) == 0x000010, "Wrong size on FPerceivedTargetInfo");
static_assert(offsetof(FPerceivedTargetInfo, Actor) == 0x000000, "Member 'FPerceivedTargetInfo::Actor' has a wrong offset!");
static_assert(offsetof(FPerceivedTargetInfo, IsHostile) == 0x000008, "Member 'FPerceivedTargetInfo::IsHostile' has a wrong offset!");
static_assert(offsetof(FPerceivedTargetInfo, IsInLineOfSight) == 0x000009, "Member 'FPerceivedTargetInfo::IsInLineOfSight' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytNavMeshData
// 0x0018 (0x0018 - 0x0000)
struct FKytNavMeshData final
{
public:
	class UKytNavMesh*                            NavigationMesh;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AKytNavBounds*>                  NavigationBounds;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKytNavMeshData) == 0x000008, "Wrong alignment on FKytNavMeshData");
static_assert(sizeof(FKytNavMeshData) == 0x000018, "Wrong size on FKytNavMeshData");
static_assert(offsetof(FKytNavMeshData, NavigationMesh) == 0x000000, "Member 'FKytNavMeshData::NavigationMesh' has a wrong offset!");
static_assert(offsetof(FKytNavMeshData, NavigationBounds) == 0x000008, "Member 'FKytNavMeshData::NavigationBounds' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytNavMeshLink
// 0x0060 (0x0060 - 0x0000)
struct FKytNavMeshLink final
{
public:
	struct FTransform                             Start;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Animation;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 linkCostIdentifier;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKytNavMeshLink) == 0x000010, "Wrong alignment on FKytNavMeshLink");
static_assert(sizeof(FKytNavMeshLink) == 0x000060, "Wrong size on FKytNavMeshLink");
static_assert(offsetof(FKytNavMeshLink, Start) == 0x000000, "Member 'FKytNavMeshLink::Start' has a wrong offset!");
static_assert(offsetof(FKytNavMeshLink, End) == 0x000030, "Member 'FKytNavMeshLink::End' has a wrong offset!");
static_assert(offsetof(FKytNavMeshLink, Animation) == 0x000040, "Member 'FKytNavMeshLink::Animation' has a wrong offset!");
static_assert(offsetof(FKytNavMeshLink, linkCostIdentifier) == 0x000050, "Member 'FKytNavMeshLink::linkCostIdentifier' has a wrong offset!");

// ScriptStruct KytheraPlugin.API_KytheraNavSplinePoint
// 0x0060 (0x0060 - 0x0000)
struct FAPI_KytheraNavSplinePoint final
{
public:
	struct FVector                                position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Orientation;                                       // 0x0010(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         preTension;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         postTension;                                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Index;                                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  vehicleOrientation;                                // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          useUpVector;                                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useFwdVector;                                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAPI_KytheraNavSplinePoint) == 0x000010, "Wrong alignment on FAPI_KytheraNavSplinePoint");
static_assert(sizeof(FAPI_KytheraNavSplinePoint) == 0x000060, "Wrong size on FAPI_KytheraNavSplinePoint");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, position) == 0x000000, "Member 'FAPI_KytheraNavSplinePoint::position' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, Orientation) == 0x000010, "Member 'FAPI_KytheraNavSplinePoint::Orientation' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, preTension) == 0x000020, "Member 'FAPI_KytheraNavSplinePoint::preTension' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, postTension) == 0x000024, "Member 'FAPI_KytheraNavSplinePoint::postTension' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, Speed) == 0x000028, "Member 'FAPI_KytheraNavSplinePoint::Speed' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, Index) == 0x00002C, "Member 'FAPI_KytheraNavSplinePoint::Index' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, vehicleOrientation) == 0x000030, "Member 'FAPI_KytheraNavSplinePoint::vehicleOrientation' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, useUpVector) == 0x000040, "Member 'FAPI_KytheraNavSplinePoint::useUpVector' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, useFwdVector) == 0x000041, "Member 'FAPI_KytheraNavSplinePoint::useFwdVector' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, Target) == 0x000048, "Member 'FAPI_KytheraNavSplinePoint::Target' has a wrong offset!");
static_assert(offsetof(FAPI_KytheraNavSplinePoint, Name) == 0x000050, "Member 'FAPI_KytheraNavSplinePoint::Name' has a wrong offset!");

// ScriptStruct KytheraPlugin.KytNavSplinePoint
// 0x0070 (0x0070 - 0x0000)
struct FKytNavSplinePoint final
{
public:
	struct FAPI_KytheraNavSplinePoint             pt;                                                // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	bool                                          bAutoTangent;                                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinkTangentTensions;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0xE];                                       // 0x0062(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKytNavSplinePoint) == 0x000010, "Wrong alignment on FKytNavSplinePoint");
static_assert(sizeof(FKytNavSplinePoint) == 0x000070, "Wrong size on FKytNavSplinePoint");
static_assert(offsetof(FKytNavSplinePoint, pt) == 0x000000, "Member 'FKytNavSplinePoint::pt' has a wrong offset!");
static_assert(offsetof(FKytNavSplinePoint, bAutoTangent) == 0x000060, "Member 'FKytNavSplinePoint::bAutoTangent' has a wrong offset!");
static_assert(offsetof(FKytNavSplinePoint, bLinkTangentTensions) == 0x000061, "Member 'FKytNavSplinePoint::bLinkTangentTensions' has a wrong offset!");

// ScriptStruct KytheraPlugin.Kyt3DSteeringParams
// 0x001C (0x001C - 0x0000)
struct FKyt3DSteeringParams final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalSpeed;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccel;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDecel;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxManeuver;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUnboostedManeuver;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKyt3DSteeringParams) == 0x000004, "Wrong alignment on FKyt3DSteeringParams");
static_assert(sizeof(FKyt3DSteeringParams) == 0x00001C, "Wrong size on FKyt3DSteeringParams");
static_assert(offsetof(FKyt3DSteeringParams, MaxSpeed) == 0x000000, "Member 'FKyt3DSteeringParams::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKyt3DSteeringParams, NormalSpeed) == 0x000004, "Member 'FKyt3DSteeringParams::NormalSpeed' has a wrong offset!");
static_assert(offsetof(FKyt3DSteeringParams, MinSpeed) == 0x000008, "Member 'FKyt3DSteeringParams::MinSpeed' has a wrong offset!");
static_assert(offsetof(FKyt3DSteeringParams, MaxAccel) == 0x00000C, "Member 'FKyt3DSteeringParams::MaxAccel' has a wrong offset!");
static_assert(offsetof(FKyt3DSteeringParams, MaxDecel) == 0x000010, "Member 'FKyt3DSteeringParams::MaxDecel' has a wrong offset!");
static_assert(offsetof(FKyt3DSteeringParams, MaxManeuver) == 0x000014, "Member 'FKyt3DSteeringParams::MaxManeuver' has a wrong offset!");
static_assert(offsetof(FKyt3DSteeringParams, MaxUnboostedManeuver) == 0x000018, "Member 'FKyt3DSteeringParams::MaxUnboostedManeuver' has a wrong offset!");

}

