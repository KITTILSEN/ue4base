#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PortalSystem_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PortalSystem.BoxRenderableComponent
// 0x0010 (0x0460 - 0x0450)
class UBoxRenderableComponent final : public UPrimitiveComponent
{
public:
	struct FColor                                 ShapeColor;                                        // 0x0450(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0454(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_455[0xB];                                      // 0x0455(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BoxRenderableComponent">();
	}
	static class UBoxRenderableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoxRenderableComponent>();
	}
};
static_assert(alignof(UBoxRenderableComponent) == 0x000010, "Wrong alignment on UBoxRenderableComponent");
static_assert(sizeof(UBoxRenderableComponent) == 0x000460, "Wrong size on UBoxRenderableComponent");
static_assert(offsetof(UBoxRenderableComponent, ShapeColor) == 0x000450, "Member 'UBoxRenderableComponent::ShapeColor' has a wrong offset!");
static_assert(offsetof(UBoxRenderableComponent, Visible) == 0x000454, "Member 'UBoxRenderableComponent::Visible' has a wrong offset!");

// Class PortalSystem.EmptyRenderableComponent
// 0x0000 (0x0450 - 0x0450)
class UEmptyRenderableComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmptyRenderableComponent">();
	}
	static class UEmptyRenderableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmptyRenderableComponent>();
	}
};
static_assert(alignof(UEmptyRenderableComponent) == 0x000010, "Wrong alignment on UEmptyRenderableComponent");
static_assert(sizeof(UEmptyRenderableComponent) == 0x000450, "Wrong size on UEmptyRenderableComponent");

// Class PortalSystem.PortalSystemManager
// 0x0118 (0x0338 - 0x0220)
class APortalSystemManager : public AActor
{
public:
	bool                                          _occluderInitHasStarted;                           // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPortalZonesGrid                       Grid;                                              // 0x0228(0x0020)(NativeAccessSpecifierPublic)
	TArray<class APortalSystemPortal*>            Portals;                                           // 0x0248(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APortalSystemPortal*>            OutsidePortals;                                    // 0x0258(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APortalSystemZone*>              Zones;                                             // 0x0268(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class ULightComponent*, class APortalSystemZone*> LightToZoneMap;                           // 0x0278(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPortalSystemOccluderComponent*> Occluders;                                         // 0x02C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSet<class APortalSystemZone*>                LastRenderedZones;                                 // 0x02D8(0x0050)(NativeAccessSpecifierPublic)
	bool                                          ShowDebugLines;                                    // 0x0328(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableOptimisation;                                // 0x0329(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableOptimisationInEditor;                        // 0x032A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualRebuildOnly;                                 // 0x032B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateForAllViewLocations;                         // 0x032C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogWarningsOnRebuild;                              // 0x032D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogVerboseWarnings;                                // 0x032E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogGlobalInfosOfInternalState;                     // 0x032F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogVerboseInfosOfInternalState;                    // 0x0330(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class APortalSystemManager* GetPortalSystemManagerInstance(class UObject* WorldContextObject);

	void AddLight(class ULightComponent* LightComponent);
	void AddLightFromActor(class AActor* Actor);
	void ForceUpdatePortalSystem();
	void NotifyLightMoved(class ULightComponent* LightComponent);
	void OnZonesVisibilityChanged(const TArray<class APortalSystemZone*>& zonesNewlyEnabled, const TArray<class APortalSystemZone*>& zonesNewlyDisabled);
	void RebuildPortalSystemData(bool fromBeginPlay);
	void RegisterOccluder(class UPortalSystemOccluderComponent* occluder);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalSystemManager">();
	}
	static class APortalSystemManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalSystemManager>();
	}
};
static_assert(alignof(APortalSystemManager) == 0x000008, "Wrong alignment on APortalSystemManager");
static_assert(sizeof(APortalSystemManager) == 0x000338, "Wrong size on APortalSystemManager");
static_assert(offsetof(APortalSystemManager, _occluderInitHasStarted) == 0x000220, "Member 'APortalSystemManager::_occluderInitHasStarted' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, Grid) == 0x000228, "Member 'APortalSystemManager::Grid' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, Portals) == 0x000248, "Member 'APortalSystemManager::Portals' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, OutsidePortals) == 0x000258, "Member 'APortalSystemManager::OutsidePortals' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, Zones) == 0x000268, "Member 'APortalSystemManager::Zones' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, LightToZoneMap) == 0x000278, "Member 'APortalSystemManager::LightToZoneMap' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, Occluders) == 0x0002C8, "Member 'APortalSystemManager::Occluders' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, LastRenderedZones) == 0x0002D8, "Member 'APortalSystemManager::LastRenderedZones' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, ShowDebugLines) == 0x000328, "Member 'APortalSystemManager::ShowDebugLines' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, EnableOptimisation) == 0x000329, "Member 'APortalSystemManager::EnableOptimisation' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, EnableOptimisationInEditor) == 0x00032A, "Member 'APortalSystemManager::EnableOptimisationInEditor' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, ManualRebuildOnly) == 0x00032B, "Member 'APortalSystemManager::ManualRebuildOnly' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, UpdateForAllViewLocations) == 0x00032C, "Member 'APortalSystemManager::UpdateForAllViewLocations' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, LogWarningsOnRebuild) == 0x00032D, "Member 'APortalSystemManager::LogWarningsOnRebuild' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, LogVerboseWarnings) == 0x00032E, "Member 'APortalSystemManager::LogVerboseWarnings' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, LogGlobalInfosOfInternalState) == 0x00032F, "Member 'APortalSystemManager::LogGlobalInfosOfInternalState' has a wrong offset!");
static_assert(offsetof(APortalSystemManager, LogVerboseInfosOfInternalState) == 0x000330, "Member 'APortalSystemManager::LogVerboseInfosOfInternalState' has a wrong offset!");

// Class PortalSystem.PortalSystemOccluderComponent
// 0x0030 (0x0480 - 0x0450)
class UPortalSystemOccluderComponent final : public UPrimitiveComponent
{
public:
	struct FColor                                 ShapeColor;                                        // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   _box;                                              // 0x0454(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_470[0x1];                                      // 0x0470(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          FollowThisOccluderForPortalDetection;              // 0x0471(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0472(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_473[0xD];                                      // 0x0473(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalSystemOccluderComponent">();
	}
	static class UPortalSystemOccluderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortalSystemOccluderComponent>();
	}
};
static_assert(alignof(UPortalSystemOccluderComponent) == 0x000010, "Wrong alignment on UPortalSystemOccluderComponent");
static_assert(sizeof(UPortalSystemOccluderComponent) == 0x000480, "Wrong size on UPortalSystemOccluderComponent");
static_assert(offsetof(UPortalSystemOccluderComponent, ShapeColor) == 0x000450, "Member 'UPortalSystemOccluderComponent::ShapeColor' has a wrong offset!");
static_assert(offsetof(UPortalSystemOccluderComponent, _box) == 0x000454, "Member 'UPortalSystemOccluderComponent::_box' has a wrong offset!");
static_assert(offsetof(UPortalSystemOccluderComponent, FollowThisOccluderForPortalDetection) == 0x000471, "Member 'UPortalSystemOccluderComponent::FollowThisOccluderForPortalDetection' has a wrong offset!");
static_assert(offsetof(UPortalSystemOccluderComponent, Visible) == 0x000472, "Member 'UPortalSystemOccluderComponent::Visible' has a wrong offset!");

// Class PortalSystem.PortalSystemPortal
// 0x0060 (0x0280 - 0x0220)
class APortalSystemPortal final : public AActor
{
public:
	bool                                          IsOutsidePortal;                                   // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   _localBox;                                         // 0x0224(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _radiusBounds;                                     // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        _points;                                           // 0x0248(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBasicLine>                     _lines;                                            // 0x0258(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          ManualZoneDetection;                               // 0x0268(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APortalSystemZone*>              Zones;                                             // 0x0270(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalSystemPortal">();
	}
	static class APortalSystemPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalSystemPortal>();
	}
};
static_assert(alignof(APortalSystemPortal) == 0x000008, "Wrong alignment on APortalSystemPortal");
static_assert(sizeof(APortalSystemPortal) == 0x000280, "Wrong size on APortalSystemPortal");
static_assert(offsetof(APortalSystemPortal, IsOutsidePortal) == 0x000220, "Member 'APortalSystemPortal::IsOutsidePortal' has a wrong offset!");
static_assert(offsetof(APortalSystemPortal, _localBox) == 0x000224, "Member 'APortalSystemPortal::_localBox' has a wrong offset!");
static_assert(offsetof(APortalSystemPortal, _radiusBounds) == 0x000240, "Member 'APortalSystemPortal::_radiusBounds' has a wrong offset!");
static_assert(offsetof(APortalSystemPortal, _points) == 0x000248, "Member 'APortalSystemPortal::_points' has a wrong offset!");
static_assert(offsetof(APortalSystemPortal, _lines) == 0x000258, "Member 'APortalSystemPortal::_lines' has a wrong offset!");
static_assert(offsetof(APortalSystemPortal, ManualZoneDetection) == 0x000268, "Member 'APortalSystemPortal::ManualZoneDetection' has a wrong offset!");
static_assert(offsetof(APortalSystemPortal, Zones) == 0x000270, "Member 'APortalSystemPortal::Zones' has a wrong offset!");

// Class PortalSystem.PortalSystemZone
// 0x0068 (0x0288 - 0x0220)
class APortalSystemZone final : public AActor
{
public:
	struct FBox                                   _box;                                              // 0x0220(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        _points;                                           // 0x0240(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBasicLine>                     _lines;                                            // 0x0250(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponent*>                Lights;                                            // 0x0268(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class APortalSystemPortal*>            Portals;                                           // 0x0278(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	bool IsZoneVisible();
	void OnZoneVisibilityChange(bool newVisibility);

	bool ContainPoint(const struct FVector& Point) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalSystemZone">();
	}
	static class APortalSystemZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalSystemZone>();
	}
};
static_assert(alignof(APortalSystemZone) == 0x000008, "Wrong alignment on APortalSystemZone");
static_assert(sizeof(APortalSystemZone) == 0x000288, "Wrong size on APortalSystemZone");
static_assert(offsetof(APortalSystemZone, _box) == 0x000220, "Member 'APortalSystemZone::_box' has a wrong offset!");
static_assert(offsetof(APortalSystemZone, _points) == 0x000240, "Member 'APortalSystemZone::_points' has a wrong offset!");
static_assert(offsetof(APortalSystemZone, _lines) == 0x000250, "Member 'APortalSystemZone::_lines' has a wrong offset!");
static_assert(offsetof(APortalSystemZone, Lights) == 0x000268, "Member 'APortalSystemZone::Lights' has a wrong offset!");
static_assert(offsetof(APortalSystemZone, Portals) == 0x000278, "Member 'APortalSystemZone::Portals' has a wrong offset!");

}

