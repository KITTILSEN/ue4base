#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_HeadUnderWater

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GCN_HeadUnderWater.GCN_HeadUnderWater_C
// 0x0030 (0x02B0 - 0x0280)
class AGCN_HeadUnderWater_C final : public AGameplayCueNotify_Actor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          ProneIntoWaterEvent;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          ProneOutOfWaterEvent;                              // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          GaspEvent;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GCN_HeadUnderWater(int32 EntryPoint);
	void UpdateCameraModifier(class UCameraModifier* InCameraModifier);
	void OnEndViewTarget_Event_0(class APlayerController* PlayerController, class AGBCharacter* Character);
	void OnBecomeViewTarget_Event_0(class APlayerController* PlayerController, class AGBCharacter* Character);
	void UnbindViewTargetEvents(class AGBCharacter* InGBCharacter);
	void BindViewTargetEvents(class AGBCharacter* InGBCharacter);
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GCN_HeadUnderWater_C">();
	}
	static class AGCN_HeadUnderWater_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGCN_HeadUnderWater_C>();
	}
};
static_assert(alignof(AGCN_HeadUnderWater_C) == 0x000008, "Wrong alignment on AGCN_HeadUnderWater_C");
static_assert(sizeof(AGCN_HeadUnderWater_C) == 0x0002B0, "Wrong size on AGCN_HeadUnderWater_C");
static_assert(offsetof(AGCN_HeadUnderWater_C, UberGraphFrame) == 0x000280, "Member 'AGCN_HeadUnderWater_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGCN_HeadUnderWater_C, DefaultSceneRoot) == 0x000288, "Member 'AGCN_HeadUnderWater_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGCN_HeadUnderWater_C, ProneIntoWaterEvent) == 0x000290, "Member 'AGCN_HeadUnderWater_C::ProneIntoWaterEvent' has a wrong offset!");
static_assert(offsetof(AGCN_HeadUnderWater_C, ProneOutOfWaterEvent) == 0x000298, "Member 'AGCN_HeadUnderWater_C::ProneOutOfWaterEvent' has a wrong offset!");
static_assert(offsetof(AGCN_HeadUnderWater_C, GaspEvent) == 0x0002A0, "Member 'AGCN_HeadUnderWater_C::GaspEvent' has a wrong offset!");
static_assert(offsetof(AGCN_HeadUnderWater_C, StartTime) == 0x0002A8, "Member 'AGCN_HeadUnderWater_C::StartTime' has a wrong offset!");

}

