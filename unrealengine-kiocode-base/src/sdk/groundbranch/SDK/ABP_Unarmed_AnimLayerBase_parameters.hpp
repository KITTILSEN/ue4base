#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Unarmed_AnimLayerBase

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.ExecuteUbergraph_ABP_Unarmed_AnimLayerBase
// 0x0028 (0x0028 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Base_C*                            K2Node_DynamicCast_AsABP_Base;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase) == 0x000028, "Wrong size on ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase, EntryPoint) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase, CallFunc_GetOwningComponent_ReturnValue) == 0x000008, "Member 'ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase, K2Node_DynamicCast_AsABP_Base) == 0x000018, "Member 'ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase::K2Node_DynamicCast_AsABP_Base' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ABP_Unarmed_AnimLayerBase_C_ExecuteUbergraph_ABP_Unarmed_AnimLayerBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_AnimGraph");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_AnimGraph) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_AnimGraph");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              FullBody_CycleState_0;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState, FullBody_CycleState_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_CycleState::FullBody_CycleState_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              FullBody_IdleState_0;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState, FullBody_IdleState_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_IdleState::FullBody_IdleState_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.HandPose_OverrideState
// 0x0020 (0x0020 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState final
{
public:
	struct FPoseLink                              InLocomotion;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandPose_OverrideState_0;                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState) == 0x000020, "Wrong size on ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState, InLocomotion) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState::InLocomotion' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState, HandPose_OverrideState_0) == 0x000010, "Member 'ABP_Unarmed_AnimLayerBase_C_HandPose_OverrideState::HandPose_OverrideState_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_Aiming
// 0x0020 (0x0020 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              InUpperbodyLowerbodySplit;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_Aiming_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming) == 0x000020, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming, InUpperbodyLowerbodySplit) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming::InUpperbodyLowerbodySplit' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming, FullBody_Aiming_0) == 0x000010, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_Aiming::FullBody_Aiming_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_Additives
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_Additives final
{
public:
	struct FPoseLink                              FullBody_Additives_0;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_Additives) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_Additives");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_Additives) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_Additives");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_Additives, FullBody_Additives_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_Additives::FullBody_Additives_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_SkeletalControls
// 0x0020 (0x0020 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls final
{
public:
	struct FPoseLink                              InNearFinal;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_SkeletalControls_0;                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls) == 0x000020, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls, InNearFinal) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls::InNearFinal' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls, FullBody_SkeletalControls_0) == 0x000010, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_SkeletalControls::FullBody_SkeletalControls_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_PreAim
// 0x0020 (0x0020 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim final
{
public:
	struct FPoseLink                              InPreAim;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_PreAim_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim) == 0x000020, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim, InPreAim) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim::InPreAim' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim, FullBody_PreAim_0) == 0x000010, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_PreAim::FullBody_PreAim_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_ProneIdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState final
{
public:
	struct FPoseLink                              FullBody_ProneIdleState_0;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState, FullBody_ProneIdleState_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_ProneIdleState::FullBody_ProneIdleState_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_ProneCycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState final
{
public:
	struct FPoseLink                              FullBody_ProneCycleState_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState, FullBody_ProneCycleState_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_ProneCycleState::FullBody_ProneCycleState_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.FullBody_SprintCycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState final
{
public:
	struct FPoseLink                              FullBody_SprintCycleState_0;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState) == 0x000010, "Wrong size on ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState, FullBody_SprintCycleState_0) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_FullBody_SprintCycleState::FullBody_SprintCycleState_0' has a wrong offset!");

// Function ABP_Unarmed_AnimLayerBase.ABP_Unarmed_AnimLayerBase_C.GetMontageFromLinkedLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer) == 0x000008, "Wrong alignment on ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer");
static_assert(sizeof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer) == 0x000020, "Wrong size on ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, MontageName) == 0x000000, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::MontageName' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, ReturnValue) == 0x000008, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, Temp_bool_Variable) == 0x000010, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, K2Node_SwitchName_CmpSuccess) == 0x000011, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000013, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer, K2Node_Select_Default) == 0x000018, "Member 'ABP_Unarmed_AnimLayerBase_C_GetMontageFromLinkedLayer::K2Node_Select_Default' has a wrong offset!");

}

