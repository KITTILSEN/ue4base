#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBHotFoot

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "InteractiveToolsFramework_classes.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "RBHotFoot_structs.hpp"


namespace SDK
{

// Class RBHotFoot.HFActorInterface
// 0x0000 (0x0000 - 0x0000)
class IHFActorInterface final
{
public:
	TArray<TSoftClassPtr<class UClass>> GetCustomDetailWidgets();
	TSoftClassPtr<class UClass> GetCustomPropertyWidget(const class FString& PropertyName);
	struct FVector GetPlacementTranslate();
	void OnBeginEdit();
	void OnDeselected();
	void OnEndEdit();
	void OnLoaded();
	void OnSaved();
	void OnSelected();
	void PostEditProperty(const class FString& PropertyName, const class FString& PropertyValue);
	void PreEditProperty(const class FString& PropertyName, const class FString& PropertyValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFActorInterface">();
	}
	static class IHFActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHFActorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHFActorInterface) == 0x000001, "Wrong alignment on IHFActorInterface");
static_assert(sizeof(IHFActorInterface) == 0x000001, "Wrong size on IHFActorInterface");

// Class RBHotFoot.HFSelectActorTool
// 0x0020 (0x00A8 - 0x0088)
class UHFSelectActorTool final : public USingleClickTool
{
public:
	class UWorld*                                 TargetWorld;                                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CachedSelectedActors;                              // 0x0098(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFSelectActorTool">();
	}
	static class UHFSelectActorTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFSelectActorTool>();
	}
};
static_assert(alignof(UHFSelectActorTool) == 0x000008, "Wrong alignment on UHFSelectActorTool");
static_assert(sizeof(UHFSelectActorTool) == 0x0000A8, "Wrong size on UHFSelectActorTool");
static_assert(offsetof(UHFSelectActorTool, TargetWorld) == 0x000088, "Member 'UHFSelectActorTool::TargetWorld' has a wrong offset!");
static_assert(offsetof(UHFSelectActorTool, CachedSelectedActors) == 0x000098, "Member 'UHFSelectActorTool::CachedSelectedActors' has a wrong offset!");

// Class RBHotFoot.HFDragDropOperation
// 0x0008 (0x0090 - 0x0088)
class UHFDragDropOperation final : public UDragDropOperation
{
public:
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector2D GetViewportPosition() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFDragDropOperation">();
	}
	static class UHFDragDropOperation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFDragDropOperation>();
	}
};
static_assert(alignof(UHFDragDropOperation) == 0x000008, "Wrong alignment on UHFDragDropOperation");
static_assert(sizeof(UHFDragDropOperation) == 0x000090, "Wrong size on UHFDragDropOperation");

// Class RBHotFoot.HFFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UHFFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AsyncSave(class UObject* WorldContextObject, class UHFSave* SaveObject, const class FString& Filename, class FName ActorTag, TDelegate<void(bool bSuccess)> SavedDelegate);
	static void ClearActors(class UObject* WorldContextObject, class FName ActorTag);
	static void DebugGameViewportClient(class UObject* WorldContextObject);
	static bool DirectSave(class UHFSave* SaveObject, const class FString& Filename);
	static void DrawArrow(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& Color, float ArrowSize, const float Thickness);
	static void DrawLine(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& Color, const float Thickness);
	static void DrawLines(class UObject* WorldContextObject, const TArray<struct FVector>& Starts, const TArray<struct FVector>& Ends, const struct FLinearColor& Color, const float Thickness);
	static void DrawSolidBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FRotator& Rotation, const struct FColor& Color);
	static class UHFSave* LoadFile(const class FString& Filename, bool bIgnoreSaveGameVersion);
	static class FName MakeUniqueActorName(const class FString& BaseActorName, const TArray<class FString>& ExistingActorNames);
	static void SetShapeColour(class UShapeComponent* Target, const struct FColor& NewColour);
	static void SetShapeDrawOnlyIfSelected(class UShapeComponent* Target, bool bNewDrawOnlyIfSelected);
	static void SortActorArray(TArray<class AActor*>& ActorArray, bool bAscendingOrder, bool bByClass, TArray<class AActor*>* ActorArrayRef);
	static TArray<class AActor*> SpawnActorsFromFile(class UObject* WorldContextObject, class UHFSave* SaveFile, class FName ActorTag, const TSubclassOf<class AActor> OnlySpawnThisClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFFunctionLibrary">();
	}
	static class UHFFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFFunctionLibrary>();
	}
};
static_assert(alignof(UHFFunctionLibrary) == 0x000008, "Wrong alignment on UHFFunctionLibrary");
static_assert(sizeof(UHFFunctionLibrary) == 0x000028, "Wrong size on UHFFunctionLibrary");

// Class RBHotFoot.HFManager
// 0x0220 (0x0440 - 0x0220)
class alignas(0x10) AHFManager final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  PreviousPawn;                                      // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerController*                      PlayerController;                                  // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_238[0x20];                                     // 0x0238(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSnapToWorldGrid;                                  // 0x0258(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridSize;                                          // 0x025C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractiveToolsContext*               ToolsContext;                                      // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FText& Message)> OnToolNotificationMessage;            // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FText& Message)> OnToolWarningMessage;                 // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0xF0];                                     // 0x0298(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         SelectedActors;                                    // 0x0388(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UTransformGizmo*                        TransformGizmo;                                    // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnSelectionChanged;                                // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnActorSpawned;                              // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnActorDeleted;                              // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnRenameSelected;                                  // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bPlayerInputEnabled)> OnPlayerInputChanged;                   // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ActorClassToSpawn;                                 // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x18];                                     // 0x0408(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Direction)> OnSpeedChangeRequested;                          // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_430[0x10];                                     // 0x0430(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSelectedActor(class AActor* Actor);
	void ClearSelectedActors();
	void EnablePlayerInput(bool bNewValue);
	void Exit();
	void FocusOnSelected();
	float GetGridSize();
	TArray<class AActor*> GetSelectedActors();
	TArray<TSoftClassPtr<class UClass>> GetSharedCustomDetailWidgets();
	TArray<struct FHFSharedProperty> GetSharedProperties();
	bool GetSnapToWorldGrid();
	void InputCopySelectedActors();
	void InputCutSelectedActors();
	void InputDeleteSelectedActors();
	void InputFocusOnSelected();
	void InputPasteSelectedActors(bool bAtLocation);
	void InputRenameSelected();
	void InputSnapSelectedToFloor();
	void InternalUpdateGizmos();
	void OnInputAxis(const struct FPointerEvent& PointerEvent);
	bool OnInputKey(const struct FKeyEvent& KeyEvent, EInputEvent Event);
	bool OnMouseButtonInput(const struct FPointerEvent& PointerEvent, EInputEvent Event);
	void RefreshLoadedActors(class FName ActorTag);
	void RemoveSelectedActor(class AActor* Actor);
	bool RenameSelected(const class FString& NewName, class FString* OutError);
	void SetActorClassToSpawn(TSubclassOf<class AActor> ActorClass);
	void SetAxisScreenPos(const struct FVector2D& Pos);
	void SetFlyingSpeed(float NewSpeed);
	void SetGizmoMethod(EHGGizmoMethod Method);
	void SetGridSize(float NewGridSize);
	void SetLocalCoordinateSystem(bool bEnable);
	void SetSelectActorEnabled(bool bEnabled);
	void SetSelectedActor(class AActor* NewSelectedActor);
	void SetSelectedActorsSharedPropertyValue(const class FString& PropertyName, const class FString& PropertyValue);
	void SetShowBlockalls(bool bShow);
	void SetSnapToWorldGrid(bool bNewSnapToWorldGrid);
	void SnapSelectedToFloor();
	bool SpawnPlaceableActorAt(TSubclassOf<class AActor> ActorClass, const struct FVector2D& ScreenPosition, class FName ActorTag);
	void UpdateGizmos();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFManager">();
	}
	static class AHFManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHFManager>();
	}
};
static_assert(alignof(AHFManager) == 0x000010, "Wrong alignment on AHFManager");
static_assert(sizeof(AHFManager) == 0x000440, "Wrong size on AHFManager");
static_assert(offsetof(AHFManager, PreviousPawn) == 0x000228, "Member 'AHFManager::PreviousPawn' has a wrong offset!");
static_assert(offsetof(AHFManager, PlayerController) == 0x000230, "Member 'AHFManager::PlayerController' has a wrong offset!");
static_assert(offsetof(AHFManager, bSnapToWorldGrid) == 0x000258, "Member 'AHFManager::bSnapToWorldGrid' has a wrong offset!");
static_assert(offsetof(AHFManager, GridSize) == 0x00025C, "Member 'AHFManager::GridSize' has a wrong offset!");
static_assert(offsetof(AHFManager, ToolsContext) == 0x000260, "Member 'AHFManager::ToolsContext' has a wrong offset!");
static_assert(offsetof(AHFManager, OnToolNotificationMessage) == 0x000278, "Member 'AHFManager::OnToolNotificationMessage' has a wrong offset!");
static_assert(offsetof(AHFManager, OnToolWarningMessage) == 0x000288, "Member 'AHFManager::OnToolWarningMessage' has a wrong offset!");
static_assert(offsetof(AHFManager, SelectedActors) == 0x000388, "Member 'AHFManager::SelectedActors' has a wrong offset!");
static_assert(offsetof(AHFManager, TransformGizmo) == 0x000398, "Member 'AHFManager::TransformGizmo' has a wrong offset!");
static_assert(offsetof(AHFManager, OnSelectionChanged) == 0x0003A8, "Member 'AHFManager::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(AHFManager, OnActorSpawned) == 0x0003B8, "Member 'AHFManager::OnActorSpawned' has a wrong offset!");
static_assert(offsetof(AHFManager, OnActorDeleted) == 0x0003C8, "Member 'AHFManager::OnActorDeleted' has a wrong offset!");
static_assert(offsetof(AHFManager, OnRenameSelected) == 0x0003D8, "Member 'AHFManager::OnRenameSelected' has a wrong offset!");
static_assert(offsetof(AHFManager, OnPlayerInputChanged) == 0x0003E8, "Member 'AHFManager::OnPlayerInputChanged' has a wrong offset!");
static_assert(offsetof(AHFManager, ActorClassToSpawn) == 0x000400, "Member 'AHFManager::ActorClassToSpawn' has a wrong offset!");
static_assert(offsetof(AHFManager, OnSpeedChangeRequested) == 0x000420, "Member 'AHFManager::OnSpeedChangeRequested' has a wrong offset!");

// Class RBHotFoot.HFPawn
// 0x0008 (0x02B0 - 0x02A8)
class AHFPawn final : public ADefaultPawn
{
public:
	class AHFManager*                             HFManager;                                         // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFPawn">();
	}
	static class AHFPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHFPawn>();
	}
};
static_assert(alignof(AHFPawn) == 0x000008, "Wrong alignment on AHFPawn");
static_assert(sizeof(AHFPawn) == 0x0002B0, "Wrong size on AHFPawn");
static_assert(offsetof(AHFPawn, HFManager) == 0x0002A8, "Member 'AHFPawn::HFManager' has a wrong offset!");

// Class RBHotFoot.HFSave
// 0x0018 (0x0040 - 0x0028)
class UHFSave : public USaveGame
{
public:
	TArray<struct FHFActorSaveData>               SavedActors;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SaveGameVersion;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPostSave(bool bSuccess);
	void OnPreSave();

	int32 GetLatestSaveGameVersion() const;
	int32 GetSaveGameVersion() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFSave">();
	}
	static class UHFSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFSave>();
	}
};
static_assert(alignof(UHFSave) == 0x000008, "Wrong alignment on UHFSave");
static_assert(sizeof(UHFSave) == 0x000040, "Wrong size on UHFSave");
static_assert(offsetof(UHFSave, SavedActors) == 0x000028, "Member 'UHFSave::SavedActors' has a wrong offset!");
static_assert(offsetof(UHFSave, SaveGameVersion) == 0x000038, "Member 'UHFSave::SaveGameVersion' has a wrong offset!");

// Class RBHotFoot.HFSelectActorToolBuilder
// 0x0000 (0x0028 - 0x0028)
class UHFSelectActorToolBuilder final : public USingleClickToolBuilder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFSelectActorToolBuilder">();
	}
	static class UHFSelectActorToolBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFSelectActorToolBuilder>();
	}
};
static_assert(alignof(UHFSelectActorToolBuilder) == 0x000008, "Wrong alignment on UHFSelectActorToolBuilder");
static_assert(sizeof(UHFSelectActorToolBuilder) == 0x000028, "Wrong size on UHFSelectActorToolBuilder");

// Class RBHotFoot.HFSpawnActorToolBuilder
// 0x0000 (0x0028 - 0x0028)
class UHFSpawnActorToolBuilder final : public USingleClickToolBuilder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFSpawnActorToolBuilder">();
	}
	static class UHFSpawnActorToolBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFSpawnActorToolBuilder>();
	}
};
static_assert(alignof(UHFSpawnActorToolBuilder) == 0x000008, "Wrong alignment on UHFSpawnActorToolBuilder");
static_assert(sizeof(UHFSpawnActorToolBuilder) == 0x000028, "Wrong size on UHFSpawnActorToolBuilder");

// Class RBHotFoot.HFSpawnActorTool
// 0x0010 (0x0098 - 0x0088)
class UHFSpawnActorTool final : public USingleClickTool
{
public:
	class UWorld*                                 TargetWorld;                                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HFSpawnActorTool">();
	}
	static class UHFSpawnActorTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHFSpawnActorTool>();
	}
};
static_assert(alignof(UHFSpawnActorTool) == 0x000008, "Wrong alignment on UHFSpawnActorTool");
static_assert(sizeof(UHFSpawnActorTool) == 0x000098, "Wrong size on UHFSpawnActorTool");
static_assert(offsetof(UHFSpawnActorTool, TargetWorld) == 0x000088, "Member 'UHFSpawnActorTool::TargetWorld' has a wrong offset!");

}

