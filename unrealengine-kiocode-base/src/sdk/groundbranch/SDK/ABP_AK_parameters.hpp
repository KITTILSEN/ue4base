#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_AK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_AK.ABP_AK_C.ExecuteUbergraph_ABP_AK
// 0x0080 (0x0080 - 0x0000)
struct ABP_AK_C_ExecuteUbergraph_ABP_AK final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBSightComponent*                      CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBFirearm*                             K2Node_DynamicCast_AsGBFirearm;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_FiringModeIndex;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_FrontSightPostHeightOffset;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_ZeroRelativeToSight;                  // 0x0048(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_SightLocationOffset;                  // 0x0054(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_SightRotationOffset;                  // 0x0060(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLeafSightAngle_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AK_C_ExecuteUbergraph_ABP_AK) == 0x000008, "Wrong alignment on ABP_AK_C_ExecuteUbergraph_ABP_AK");
static_assert(sizeof(ABP_AK_C_ExecuteUbergraph_ABP_AK) == 0x000080, "Wrong size on ABP_AK_C_ExecuteUbergraph_ABP_AK");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, EntryPoint) == 0x000000, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_GetOwningComponent_ReturnValue) == 0x000008, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_GetSocketLocation_ReturnValue) == 0x000010, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_GetOwningActor_ReturnValue) == 0x000020, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_DynamicCast_AsGBFirearm) == 0x000030, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_DynamicCast_AsGBFirearm' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_Event_FiringModeIndex) == 0x000039, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_Event_FiringModeIndex' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_Event_FrontSightPostHeightOffset) == 0x00003C, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_Event_FrontSightPostHeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000040, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000044, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_Event_ZeroRelativeToSight) == 0x000048, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_Event_ZeroRelativeToSight' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_Event_SightLocationOffset) == 0x000054, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_Event_SightLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, K2Node_Event_SightRotationOffset) == 0x000060, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::K2Node_Event_SightRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_BreakVector_X) == 0x00006C, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_BreakVector_Y) == 0x000070, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_BreakVector_Z) == 0x000074, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_ExecuteUbergraph_ABP_AK, CallFunc_GetLeafSightAngle_ReturnValue) == 0x000078, "Member 'ABP_AK_C_ExecuteUbergraph_ABP_AK::CallFunc_GetLeafSightAngle_ReturnValue' has a wrong offset!");

// Function ABP_AK.ABP_AK_C.OnFiringModeIndexChanged
// 0x0001 (0x0001 - 0x0000)
struct ABP_AK_C_OnFiringModeIndexChanged final
{
public:
	uint8                                         FiringModeIndex;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AK_C_OnFiringModeIndexChanged) == 0x000001, "Wrong alignment on ABP_AK_C_OnFiringModeIndexChanged");
static_assert(sizeof(ABP_AK_C_OnFiringModeIndexChanged) == 0x000001, "Wrong size on ABP_AK_C_OnFiringModeIndexChanged");
static_assert(offsetof(ABP_AK_C_OnFiringModeIndexChanged, FiringModeIndex) == 0x000000, "Member 'ABP_AK_C_OnFiringModeIndexChanged::FiringModeIndex' has a wrong offset!");

// Function ABP_AK.ABP_AK_C.OnSetFrontSightPostHeightOffset
// 0x0004 (0x0004 - 0x0000)
struct ABP_AK_C_OnSetFrontSightPostHeightOffset final
{
public:
	float                                         FrontSightPostHeightOffset_0;                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AK_C_OnSetFrontSightPostHeightOffset) == 0x000004, "Wrong alignment on ABP_AK_C_OnSetFrontSightPostHeightOffset");
static_assert(sizeof(ABP_AK_C_OnSetFrontSightPostHeightOffset) == 0x000004, "Wrong size on ABP_AK_C_OnSetFrontSightPostHeightOffset");
static_assert(offsetof(ABP_AK_C_OnSetFrontSightPostHeightOffset, FrontSightPostHeightOffset_0) == 0x000000, "Member 'ABP_AK_C_OnSetFrontSightPostHeightOffset::FrontSightPostHeightOffset_0' has a wrong offset!");

// Function ABP_AK.ABP_AK_C.OnIronSightZeroing
// 0x0024 (0x0024 - 0x0000)
struct ABP_AK_C_OnIronSightZeroing final
{
public:
	struct FVector                                ZeroRelativeToSight;                               // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightLocationOffset;                               // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SightRotationOffset;                               // 0x0018(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AK_C_OnIronSightZeroing) == 0x000004, "Wrong alignment on ABP_AK_C_OnIronSightZeroing");
static_assert(sizeof(ABP_AK_C_OnIronSightZeroing) == 0x000024, "Wrong size on ABP_AK_C_OnIronSightZeroing");
static_assert(offsetof(ABP_AK_C_OnIronSightZeroing, ZeroRelativeToSight) == 0x000000, "Member 'ABP_AK_C_OnIronSightZeroing::ZeroRelativeToSight' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_OnIronSightZeroing, SightLocationOffset) == 0x00000C, "Member 'ABP_AK_C_OnIronSightZeroing::SightLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_AK_C_OnIronSightZeroing, SightRotationOffset) == 0x000018, "Member 'ABP_AK_C_OnIronSightZeroing::SightRotationOffset' has a wrong offset!");

// Function ABP_AK.ABP_AK_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_AK_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_AK_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_AK_C_AnimGraph");
static_assert(sizeof(ABP_AK_C_AnimGraph) == 0x000010, "Wrong size on ABP_AK_C_AnimGraph");
static_assert(offsetof(ABP_AK_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_AK_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

