#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBHotFoot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RBHotFoot.EHGGizmoMethod
// NumValues: 0x0004
enum class EHGGizmoMethod : uint8
{
	GM_Translate                             = 0,
	GM_Rotate                                = 1,
	GM_Scale                                 = 2,
	GM_MAX                                   = 3,
};

// ScriptStruct RBHotFoot.HFActorSaveData
// 0x0070 (0x0070 - 0x0000)
struct FHFActorSaveData final
{
public:
	class FString                                 ActorClass;                                        // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActorTags;                                         // 0x0050(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ActorData;                                         // 0x0060(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHFActorSaveData) == 0x000010, "Wrong alignment on FHFActorSaveData");
static_assert(sizeof(FHFActorSaveData) == 0x000070, "Wrong size on FHFActorSaveData");
static_assert(offsetof(FHFActorSaveData, ActorClass) == 0x000000, "Member 'FHFActorSaveData::ActorClass' has a wrong offset!");
static_assert(offsetof(FHFActorSaveData, ActorName) == 0x000010, "Member 'FHFActorSaveData::ActorName' has a wrong offset!");
static_assert(offsetof(FHFActorSaveData, ActorTransform) == 0x000020, "Member 'FHFActorSaveData::ActorTransform' has a wrong offset!");
static_assert(offsetof(FHFActorSaveData, ActorTags) == 0x000050, "Member 'FHFActorSaveData::ActorTags' has a wrong offset!");
static_assert(offsetof(FHFActorSaveData, ActorData) == 0x000060, "Member 'FHFActorSaveData::ActorData' has a wrong offset!");

// ScriptStruct RBHotFoot.HFSharedProperty
// 0x0060 (0x0060 - 0x0000)
struct FHFSharedProperty final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedValue;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0030(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleValues;                                   // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHFSharedProperty) == 0x000008, "Wrong alignment on FHFSharedProperty");
static_assert(sizeof(FHFSharedProperty) == 0x000060, "Wrong size on FHFSharedProperty");
static_assert(offsetof(FHFSharedProperty, Name) == 0x000000, "Member 'FHFSharedProperty::Name' has a wrong offset!");
static_assert(offsetof(FHFSharedProperty, Type) == 0x000010, "Member 'FHFSharedProperty::Type' has a wrong offset!");
static_assert(offsetof(FHFSharedProperty, SharedValue) == 0x000020, "Member 'FHFSharedProperty::SharedValue' has a wrong offset!");
static_assert(offsetof(FHFSharedProperty, Widget) == 0x000030, "Member 'FHFSharedProperty::Widget' has a wrong offset!");
static_assert(offsetof(FHFSharedProperty, bMultipleValues) == 0x000058, "Member 'FHFSharedProperty::bMultipleValues' has a wrong offset!");

}

