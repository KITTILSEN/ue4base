#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMModdingPlugin

#include "Basic.hpp"

#include "FMModdingPlugin_classes.hpp"
#include "FMModdingPlugin_parameters.hpp"


namespace SDK
{

// Function FMModdingPlugin.FMModdingAdmin.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFMModdingAdmin*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingAdmin* UFMModdingAdmin::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingAdmin", "Get");

	Params::FMModdingAdmin_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingAdmin.AdminSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    UniqueId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FZKReplicatedContent&      Content                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingAdmin::AdminSet(const class FString& UniqueId, const struct FZKReplicatedContent& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingAdmin", "AdminSet");

	Params::FMModdingAdmin_AdminSet Parms{};

	Parms.UniqueId = std::move(UniqueId);
	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingAdmin.FillRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    UniqueId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      RequestType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FZKReplicatedContent*            FilledRequest                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingAdmin::FillRequest(const class FString& UniqueId, const class FName& RequestType, struct FZKReplicatedContent* FilledRequest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingAdmin", "FillRequest");

	Params::FMModdingAdmin_FillRequest Parms{};

	Parms.UniqueId = std::move(UniqueId);
	Parms.RequestType = RequestType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FilledRequest != nullptr)
		*FilledRequest = std::move(Parms.FilledRequest);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.BlueprintLuaCall
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 ScriptTable                                            (Parm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingFunctionLibrary::BlueprintLuaCall(class UObject* WorldContextObject, const struct FLuaValue& ScriptTable, const class FString& FunctionName, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "BlueprintLuaCall");

	Params::FMModdingFunctionLibrary_BlueprintLuaCall Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ScriptTable = std::move(ScriptTable);
	Parms.FunctionName = std::move(FunctionName);
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.BlueprintLuaCallWithArgs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 ScriptTable                                            (Parm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingFunctionLibrary::BlueprintLuaCallWithArgs(class UObject* WorldContextObject, const struct FLuaValue& ScriptTable, const class FString& FunctionName, const class FString& Filename, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "BlueprintLuaCallWithArgs");

	Params::FMModdingFunctionLibrary_BlueprintLuaCallWithArgs Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ScriptTable = std::move(ScriptTable);
	Parms.FunctionName = std::move(FunctionName);
	Parms.Filename = std::move(Filename);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CondenseModReferencesInFileName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemoveDotExt                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemoveGame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::CondenseModReferencesInFileName(const class UObject* WorldContextObject, const class FString& InFilename, bool bRemoveDotExt, bool bRemoveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CondenseModReferencesInFileName");

	Params::FMModdingFunctionLibrary_CondenseModReferencesInFileName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InFilename = std::move(InFilename);
	Parms.bRemoveDotExt = bRemoveDotExt;
	Parms.bRemoveGame = bRemoveGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModDetailsQueryRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMModdingModDetailsQuery*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingModDetailsQuery* UFMModdingFunctionLibrary::CreateModDetailsQueryRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateModDetailsQueryRef");

	Params::FMModdingFunctionLibrary_CreateModDetailsQueryRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModKitCreateWorkshopItemRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModKitCreateWorkshopItem*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModKitCreateWorkshopItem* UFMModdingFunctionLibrary::CreateModKitCreateWorkshopItemRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateModKitCreateWorkshopItemRef");

	Params::FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModKitUploadWorkshopItemRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModKitUploadWorkshopItem*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModKitUploadWorkshopItem* UFMModdingFunctionLibrary::CreateModKitUploadWorkshopItemRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateModKitUploadWorkshopItemRef");

	Params::FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   WorkshopID                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CreatedBy                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EModType                          ModType                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FModMetadata                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModMetadata UFMModdingFunctionLibrary::CreateModMetadata(const struct FUInt64& WorkshopID, const class FString& Title, const class FString& Description, const class FString& CreatedBy, const EModType ModType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateModMetadata");

	Params::FMModdingFunctionLibrary_CreateModMetadata Parms{};

	Parms.WorkshopID = std::move(WorkshopID);
	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);
	Parms.CreatedBy = std::move(CreatedBy);
	Parms.ModType = ModType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateNonAssetFoldersForMod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::CreateNonAssetFoldersForMod(const class UObject* WorldContextObject, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateNonAssetFoldersForMod");

	Params::FMModdingFunctionLibrary_CreateNonAssetFoldersForMod Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateServerPlayersQueryRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMModdingServerPlayersQuery*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingServerPlayersQuery* UFMModdingFunctionLibrary::CreateServerPlayersQueryRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateServerPlayersQueryRef");

	Params::FMModdingFunctionLibrary_CreateServerPlayersQueryRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateTitleQueryRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMModdingTitleQuery*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingTitleQuery* UFMModdingFunctionLibrary::CreateTitleQueryRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateTitleQueryRef");

	Params::FMModdingFunctionLibrary_CreateTitleQueryRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateUserModsQueryRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMModdingUserModsQuery*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingUserModsQuery* UFMModdingFunctionLibrary::CreateUserModsQueryRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "CreateUserModsQueryRef");

	Params::FMModdingFunctionLibrary_CreateUserModsQueryRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.DeleteStagedModFolder
// (Final, Native, Static, Public, BlueprintCallable)

void UFMModdingFunctionLibrary::DeleteStagedModFolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "DeleteStagedModFolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.DoesHostAllowAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           AssetId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::DoesHostAllowAsset(const class UObject* WorldContextObject, const struct FPrimaryAssetId& AssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "DoesHostAllowAsset");

	Params::FMModdingFunctionLibrary_DoesHostAllowAsset Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AssetId = std::move(AssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.ExpandModReferencesInFileName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DotExt                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddProjectDir                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMakeRelativeToProjectContentDir                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::ExpandModReferencesInFileName(const class UObject* WorldContextObject, const class FString& InFilename, const class FString& DotExt, bool bAddProjectDir, bool bMakeRelativeToProjectContentDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "ExpandModReferencesInFileName");

	Params::FMModdingFunctionLibrary_ExpandModReferencesInFileName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InFilename = std::move(InFilename);
	Parms.DotExt = std::move(DotExt);
	Parms.bAddProjectDir = bAddProjectDir;
	Parms.bMakeRelativeToProjectContentDir = bMakeRelativeToProjectContentDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GenerateCallSignsFromPlayerName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UFMModdingFunctionLibrary::GenerateCallSignsFromPlayerName(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GenerateCallSignsFromPlayerName");

	Params::FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetAllWorkshopTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UFMModdingFunctionLibrary::GetAllWorkshopTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetAllWorkshopTags");

	Params::FMModdingFunctionLibrary_GetAllWorkshopTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetAssetsByPathIncludingMods
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>*              OutAssetData                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PartialFilePathOverride                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeOnlyOnDiskAssets                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeMods                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetAssetsByPathIncludingMods(const class UObject* WorldContextObject, EGBResourceType GBResourceType, TArray<struct FAssetData>* OutAssetData, bool bRecursive, const class FString& PartialFilePathOverride, bool bIncludeOnlyOnDiskAssets, bool bExcludeMods)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetAssetsByPathIncludingMods");

	Params::FMModdingFunctionLibrary_GetAssetsByPathIncludingMods Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GBResourceType = GBResourceType;
	Parms.bRecursive = bRecursive;
	Parms.PartialFilePathOverride = std::move(PartialFilePathOverride);
	Parms.bIncludeOnlyOnDiskAssets = bIncludeOnlyOnDiskAssets;
	Parms.bExcludeMods = bExcludeMods;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAssetData != nullptr)
		*OutAssetData = std::move(Parms.OutAssetData);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetBaseGameOrModFileNameFromPartial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InPartialFilePath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LeafName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FileExtension                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bRelativePath                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetBaseGameOrModFileNameFromPartial(const class FString& InPartialFilePath, const class FString& LeafName, const class FString& FileExtension, const bool bRelativePath, const struct FUInt64& ModID, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetBaseGameOrModFileNameFromPartial");

	Params::FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial Parms{};

	Parms.InPartialFilePath = std::move(InPartialFilePath);
	Parms.LeafName = std::move(LeafName);
	Parms.FileExtension = std::move(FileExtension);
	Parms.bRelativePath = bRelativePath;
	Parms.ModID = std::move(ModID);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetCurrentPlayerSteamID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingFunctionLibrary::GetCurrentPlayerSteamID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetCurrentPlayerSteamID");

	Params::FMModdingFunctionLibrary_GetCurrentPlayerSteamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetDirectoryFromWorkshopID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString*                          DirectoryPath                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetDirectoryFromWorkshopID(class FString* DirectoryPath, const struct FUInt64& WorkshopID, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetDirectoryFromWorkshopID");

	Params::FMModdingFunctionLibrary_GetDirectoryFromWorkshopID Parms{};

	Parms.WorkshopID = std::move(WorkshopID);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DirectoryPath != nullptr)
		*DirectoryPath = std::move(Parms.DirectoryPath);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileExtensionForGBResourceType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGBResourceType                         InGBResourceType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetFileExtensionForGBResourceType(EGBResourceType InGBResourceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFileExtensionForGBResourceType");

	Params::FMModdingFunctionLibrary_GetFileExtensionForGBResourceType Parms{};

	Parms.InGBResourceType = InGBResourceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Extension                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimPathAndExt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FileList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetFileList(const class FString& FilePath, const class FString& Extension, bool bTrimPathAndExt, TArray<class FString>* FileList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFileList");

	Params::FMModdingFunctionLibrary_GetFileList Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Extension = std::move(Extension);
	Parms.bTrimPathAndExt = bTrimPathAndExt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileList != nullptr)
		*FileList = std::move(Parms.FileList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileListIncludingModIDList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimmed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FileList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FUInt64>&           ModIDList                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    PartialFilePathOverride                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetFileListIncludingModIDList(const class UObject* WorldContextObject, EGBResourceType GBResourceType, bool bTrimmed, TArray<class FString>* FileList, const TArray<struct FUInt64>& ModIDList, const class FString& PartialFilePathOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFileListIncludingModIDList");

	Params::FMModdingFunctionLibrary_GetFileListIncludingModIDList Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GBResourceType = GBResourceType;
	Parms.bTrimmed = bTrimmed;
	Parms.ModIDList = std::move(ModIDList);
	Parms.PartialFilePathOverride = std::move(PartialFilePathOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileList != nullptr)
		*FileList = std::move(Parms.FileList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileListIncludingMods
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimmed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FileList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    PartialFilePathOverride                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetFileListIncludingMods(const class UObject* WorldContextObject, EGBResourceType GBResourceType, bool bTrimmed, TArray<class FString>* FileList, const class FString& PartialFilePathOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFileListIncludingMods");

	Params::FMModdingFunctionLibrary_GetFileListIncludingMods Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GBResourceType = GBResourceType;
	Parms.bTrimmed = bTrimmed;
	Parms.PartialFilePathOverride = std::move(PartialFilePathOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileList != nullptr)
		*FileList = std::move(Parms.FileList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFolderList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FolderList                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    RecurseIntoFolders                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetFolderList(const class FString& FilePath, TArray<class FString>* FolderList, bool RecurseIntoFolders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFolderList");

	Params::FMModdingFunctionLibrary_GetFolderList Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.RecurseIntoFolders = RecurseIntoFolders;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FolderList != nullptr)
		*FolderList = std::move(Parms.FolderList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFolderListIncludingModIDList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FolderList                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FUInt64>&           ModIDList                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    PartialFilePathOverride                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecurseIntoFolders                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetFolderListIncludingModIDList(const class UObject* WorldContextObject, EGBResourceType GBResourceType, TArray<class FString>* FolderList, const TArray<struct FUInt64>& ModIDList, const class FString& PartialFilePathOverride, bool RecurseIntoFolders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFolderListIncludingModIDList");

	Params::FMModdingFunctionLibrary_GetFolderListIncludingModIDList Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GBResourceType = GBResourceType;
	Parms.ModIDList = std::move(ModIDList);
	Parms.PartialFilePathOverride = std::move(PartialFilePathOverride);
	Parms.RecurseIntoFolders = RecurseIntoFolders;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FolderList != nullptr)
		*FolderList = std::move(Parms.FolderList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFolderListIncludingMods
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FolderList                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    PartialFilePathOverride                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecurseIntoFolders                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetFolderListIncludingMods(const class UObject* WorldContextObject, EGBResourceType GBResourceType, TArray<class FString>* FolderList, const class FString& PartialFilePathOverride, bool RecurseIntoFolders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFolderListIncludingMods");

	Params::FMModdingFunctionLibrary_GetFolderListIncludingMods Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GBResourceType = GBResourceType;
	Parms.PartialFilePathOverride = std::move(PartialFilePathOverride);
	Parms.RecurseIntoFolders = RecurseIntoFolders;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FolderList != nullptr)
		*FolderList = std::move(Parms.FolderList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFullFilePathFromPartial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InPartialFilePath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bRelativePath                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetFullFilePathFromPartial(const class FString& InPartialFilePath, const bool bRelativePath, const struct FUInt64& ModID, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetFullFilePathFromPartial");

	Params::FMModdingFunctionLibrary_GetFullFilePathFromPartial Parms{};

	Parms.InPartialFilePath = std::move(InPartialFilePath);
	Parms.bRelativePath = bRelativePath;
	Parms.ModID = std::move(ModID);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetIsUsingServerMods
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetIsUsingServerMods(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetIsUsingServerMods");

	Params::FMModdingFunctionLibrary_GetIsUsingServerMods Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDForAssetData
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAssetData&                AssetData                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingFunctionLibrary::GetModIDForAssetData(const struct FAssetData& AssetData, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModIDForAssetData");

	Params::FMModdingFunctionLibrary_GetModIDForAssetData Parms{};

	Parms.AssetData = std::move(AssetData);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDForPrimaryAssetId
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingFunctionLibrary::GetModIDForPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModIDForPrimaryAssetId");

	Params::FMModdingFunctionLibrary_GetModIDForPrimaryAssetId Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDFromFileName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCondensed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingFunctionLibrary::GetModIDFromFileName(const class UObject* WorldContextObject, const class FString& InFilename, bool bIsCondensed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModIDFromFileName");

	Params::FMModdingFunctionLibrary_GetModIDFromFileName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InFilename = std::move(InFilename);
	Parms.bIsCondensed = bIsCondensed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDFromStringTableName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      InStringTableName                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingFunctionLibrary::GetModIDFromStringTableName(const class FName& InStringTableName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModIDFromStringTableName");

	Params::FMModdingFunctionLibrary_GetModIDFromStringTableName Parms{};

	Parms.InStringTableName = InStringTableName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModInfoFromModList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FGBModBasicInfo>&   ModList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bMustBeActive                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBModBasicInfo                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBModBasicInfo UFMModdingFunctionLibrary::GetModInfoFromModList(const struct FUInt64& ModID, const TArray<struct FGBModBasicInfo>& ModList, const bool bMustBeActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModInfoFromModList");

	Params::FMModdingFunctionLibrary_GetModInfoFromModList Parms{};

	Parms.ModID = std::move(ModID);
	Parms.ModList = std::move(ModList);
	Parms.bMustBeActive = bMustBeActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIsActiveInModList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FGBModBasicInfo>&   ModList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetModIsActiveInModList(const struct FUInt64& ModID, const TArray<struct FGBModBasicInfo>& ModList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModIsActiveInModList");

	Params::FMModdingFunctionLibrary_GetModIsActiveInModList Parms{};

	Parms.ModID = std::move(ModID);
	Parms.ModList = std::move(ModList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIsEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bServer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::GetModIsEnabled(const struct FUInt64& ModID, const bool bServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModIsEnabled");

	Params::FMModdingFunctionLibrary_GetModIsEnabled Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bServer = bServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModKitSubsystem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UModKitSubsystem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModKitSubsystem* UFMModdingFunctionLibrary::GetModKitSubsystem(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModKitSubsystem");

	Params::FMModdingFunctionLibrary_GetModKitSubsystem Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModNameFromModID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetModNameFromModID(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModNameFromModID");

	Params::FMModdingFunctionLibrary_GetModNameFromModID Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMakePathRelativeToContentDir                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetModPath(const class UObject* WorldContextObject, const struct FUInt64& ModID, bool bMakePathRelativeToContentDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModPath");

	Params::FMModdingFunctionLibrary_GetModPath Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ModID = std::move(ModID);
	Parms.bMakePathRelativeToContentDir = bMakePathRelativeToContentDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModPriority
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMModdingFunctionLibrary::GetModPriority(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModPriority");

	Params::FMModdingFunctionLibrary_GetModPriority Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModsPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMakePathRelativeToContentDir                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetModsPath(const class UObject* WorldContextObject, const struct FUInt64& ModID, bool bMakePathRelativeToContentDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetModsPath");

	Params::FMModdingFunctionLibrary_GetModsPath Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ModID = std::move(ModID);
	Parms.bMakePathRelativeToContentDir = bMakePathRelativeToContentDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetNonAssetResourcesForMod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimmed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGBResourceList>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBResourceList> UFMModdingFunctionLibrary::GetNonAssetResourcesForMod(const class UObject* WorldContextObject, const struct FUInt64& ModID, bool bTrimmed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetNonAssetResourcesForMod");

	Params::FMModdingFunctionLibrary_GetNonAssetResourcesForMod Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ModID = std::move(ModID);
	Parms.bTrimmed = bTrimmed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetPartialFilePathForGBResourceType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGBResourceType                         InGBResourceType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetPartialFilePathForGBResourceType(EGBResourceType InGBResourceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetPartialFilePathForGBResourceType");

	Params::FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType Parms{};

	Parms.InGBResourceType = InGBResourceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetStringNameSpaceFromModID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InStringNameSpace                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingFunctionLibrary::GetStringNameSpaceFromModID(const class FString& InStringNameSpace, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetStringNameSpaceFromModID");

	Params::FMModdingFunctionLibrary_GetStringNameSpaceFromModID Parms{};

	Parms.InStringNameSpace = std::move(InStringNameSpace);
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetStringTableNameFromModID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InStringTableId                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFMModdingFunctionLibrary::GetStringTableNameFromModID(const class FName InStringTableId, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetStringTableNameFromModID");

	Params::FMModdingFunctionLibrary_GetStringTableNameFromModID Parms{};

	Parms.InStringTableId = InStringTableId;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetWorkshopIDForPluginName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    PluginName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingFunctionLibrary::GetWorkshopIDForPluginName(const class FString& PluginName, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetWorkshopIDForPluginName");

	Params::FMModdingFunctionLibrary_GetWorkshopIDForPluginName Parms{};

	Parms.PluginName = std::move(PluginName);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.GetWorkshopTagForResourceType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EGBResourceType                   GBResourceType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFMModdingFunctionLibrary::GetWorkshopTagForResourceType(const EGBResourceType GBResourceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "GetWorkshopTagForResourceType");

	Params::FMModdingFunctionLibrary_GetWorkshopTagForResourceType Parms{};

	Parms.GBResourceType = GBResourceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.MakeSteamStrings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            StringsToEncode                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutLabels                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutStrings                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    StringPrefix                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EGBSteamBufferType                SteamBufferType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::MakeSteamStrings(const TArray<class FString>& StringsToEncode, TArray<class FString>* OutLabels, TArray<class FString>* OutStrings, const class FString& StringPrefix, const EGBSteamBufferType SteamBufferType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "MakeSteamStrings");

	Params::FMModdingFunctionLibrary_MakeSteamStrings Parms{};

	Parms.StringsToEncode = std::move(StringsToEncode);
	Parms.StringPrefix = std::move(StringPrefix);
	Parms.SteamBufferType = SteamBufferType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLabels != nullptr)
		*OutLabels = std::move(Parms.OutLabels);

	if (OutStrings != nullptr)
		*OutStrings = std::move(Parms.OutStrings);
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.MakeSteamStringsFromUInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUInt64>&           IDsToEncode                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutLabels                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutStrings                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    StringPrefix                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EGBSteamBufferType                SteamBufferType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::MakeSteamStringsFromUInt64(const TArray<struct FUInt64>& IDsToEncode, TArray<class FString>* OutLabels, TArray<class FString>* OutStrings, const class FString& StringPrefix, const EGBSteamBufferType SteamBufferType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "MakeSteamStringsFromUInt64");

	Params::FMModdingFunctionLibrary_MakeSteamStringsFromUInt64 Parms{};

	Parms.IDsToEncode = std::move(IDsToEncode);
	Parms.StringPrefix = std::move(StringPrefix);
	Parms.SteamBufferType = SteamBufferType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLabels != nullptr)
		*OutLabels = std::move(Parms.OutLabels);

	if (OutStrings != nullptr)
		*OutStrings = std::move(Parms.OutStrings);
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.ModListContainsMod
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FGBModBasicInfo>&   ModList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bMustBeActive                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::ModListContainsMod(const struct FUInt64& ModID, const TArray<struct FGBModBasicInfo>& ModList, const bool bMustBeActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "ModListContainsMod");

	Params::FMModdingFunctionLibrary_ModListContainsMod Parms{};

	Parms.ModID = std::move(ModID);
	Parms.ModList = std::move(ModList);
	Parms.bMustBeActive = bMustBeActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.ReadLobbyDataStrings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>*                  OutDecodedStrings                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    StringPrefix                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   LobbyID                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::ReadLobbyDataStrings(TArray<class FString>* OutDecodedStrings, const class FString& StringPrefix, const struct FUInt64& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "ReadLobbyDataStrings");

	Params::FMModdingFunctionLibrary_ReadLobbyDataStrings Parms{};

	Parms.StringPrefix = std::move(StringPrefix);
	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDecodedStrings != nullptr)
		*OutDecodedStrings = std::move(Parms.OutDecodedStrings);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.ReadLobbyDataStringsIntoUInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FUInt64>*                 OutDecodedIDs                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    StringPrefix                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   LobbyID                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::ReadLobbyDataStringsIntoUInt64(TArray<struct FUInt64>* OutDecodedIDs, const class FString& StringPrefix, const struct FUInt64& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "ReadLobbyDataStringsIntoUInt64");

	Params::FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64 Parms{};

	Parms.StringPrefix = std::move(StringPrefix);
	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDecodedIDs != nullptr)
		*OutDecodedIDs = std::move(Parms.OutDecodedIDs);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.RemoveModFromModList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGBModBasicInfo>&         ModList                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::RemoveModFromModList(const struct FUInt64& ModID, TArray<struct FGBModBasicInfo>& ModList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "RemoveModFromModList");

	Params::FMModdingFunctionLibrary_RemoveModFromModList Parms{};

	Parms.ModID = std::move(ModID);
	Parms.ModList = std::move(ModList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModList = std::move(Parms.ModList);
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.RemoveModIDFromStringTableName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InStringTableName                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFMModdingFunctionLibrary::RemoveModIDFromStringTableName(const class FName InStringTableName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "RemoveModIDFromStringTableName");

	Params::FMModdingFunctionLibrary_RemoveModIDFromStringTableName Parms{};

	Parms.InStringTableName = InStringTableName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.RunLuaFileInEnvironment
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class ULuaState>      LuaStateClass                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingFunctionLibrary::RunLuaFileInEnvironment(class UObject* WorldContextObject, const class FString& Filename, const TSubclassOf<class ULuaState> LuaStateClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "RunLuaFileInEnvironment");

	Params::FMModdingFunctionLibrary_RunLuaFileInEnvironment Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Filename = std::move(Filename);
	Parms.LuaStateClass = LuaStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.SetModIsActiveInModList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGBModBasicInfo>&         ModList                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bSetActive                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::SetModIsActiveInModList(const struct FUInt64& ModID, TArray<struct FGBModBasicInfo>& ModList, const bool bSetActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "SetModIsActiveInModList");

	Params::FMModdingFunctionLibrary_SetModIsActiveInModList Parms{};

	Parms.ModID = std::move(ModID);
	Parms.ModList = std::move(ModList);
	Parms.bSetActive = bSetActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModList = std::move(Parms.ModList);
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.SetModIsEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsEnabled                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bServer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::SetModIsEnabled(const struct FUInt64& ModID, const bool bIsEnabled, const bool bServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "SetModIsEnabled");

	Params::FMModdingFunctionLibrary_SetModIsEnabled Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bIsEnabled = bIsEnabled;
	Parms.bServer = bServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.SetModPriority
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NewModPriority                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingFunctionLibrary::SetModPriority(const struct FUInt64& ModID, const int32 NewModPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "SetModPriority");

	Params::FMModdingFunctionLibrary_SetModPriority Parms{};

	Parms.ModID = std::move(ModID);
	Parms.NewModPriority = NewModPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingFunctionLibrary.UInt64ListContainsMod
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FUInt64>&           ModList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingFunctionLibrary::UInt64ListContainsMod(const struct FUInt64& ModID, const TArray<struct FUInt64>& ModList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingFunctionLibrary", "UInt64ListContainsMod");

	Params::FMModdingFunctionLibrary_UInt64ListContainsMod Parms{};

	Parms.ModID = std::move(ModID);
	Parms.ModList = std::move(ModList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.Config_AddToArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::Config_AddToArray(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_AddToArray");

	Params::FMModdingManager_Config_AddToArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.Config_DeleteArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::Config_DeleteArray(const class FString& Filename, const class FString& Section, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_DeleteArray");

	Params::FMModdingManager_Config_DeleteArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.Config_GetArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRawFilename                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UFMModdingManager::Config_GetArray(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid, bool bRawFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_GetArray");

	Params::FMModdingManager_Config_GetArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.bRawFilename = bRawFilename;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.Config_GetInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMModdingManager::Config_GetInt(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_GetInt");

	Params::FMModdingManager_Config_GetInt Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.Config_RemoveFromArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::Config_RemoveFromArray(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_RemoveFromArray");

	Params::FMModdingManager_Config_RemoveFromArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.Config_Save
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRawFilename                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::Config_Save(const class FString& Filename, bool bRawFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_Save");

	Params::FMModdingManager_Config_Save Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bRawFilename = bRawFilename;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.Config_SetArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRawFilename                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::Config_SetArray(const class FString& Filename, const class FString& Section, const class FString& Key, const TArray<class FString>& Values, bool bRawFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_SetArray");

	Params::FMModdingManager_Config_SetArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);
	Parms.bRawFilename = bRawFilename;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.Config_SetInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::Config_SetInt(const class FString& Filename, const class FString& Section, const class FString& Key, const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Config_SetInt");

	Params::FMModdingManager_Config_SetInt Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFMModdingManager*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingManager* UFMModdingManager::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "Get");

	Params::FMModdingManager_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetConfigFilename
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConfigFile                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMModdingManager::GetConfigFilename(const class FString& ConfigFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingManager", "GetConfigFilename");

	Params::FMModdingManager_GetConfigFilename Parms{};

	Parms.ConfigFile = std::move(ConfigFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallGameModeFunction(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunction");

	Params::FMModdingManager_AttemptToCallGameModeFunction Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutators
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFMModdingManager::AttemptToCallGameModeFunctionAndMutators(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunctionAndMutators");

	Params::FMModdingManager_AttemptToCallGameModeFunctionAndMutators Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool");

	Params::FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger");

	Params::FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString");

	Params::FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsCanIntercept
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::AttemptToCallGameModeFunctionAndMutatorsCanIntercept(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunctionAndMutatorsCanIntercept");

	Params::FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsReversed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            GameModeScriptInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFMModdingManager::AttemptToCallGameModeFunctionAndMutatorsReversed(const struct FLuaScriptInfo& GameModeScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallGameModeFunctionAndMutatorsReversed");

	Params::FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed Parms{};

	Parms.GameModeScriptInfo = std::move(GameModeScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallLuaFunction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaScriptInfo&            LuaScriptInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallLuaFunction(const struct FLuaScriptInfo& LuaScriptInfo, const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallLuaFunction");

	Params::FMModdingManager_AttemptToCallLuaFunction Parms{};

	Parms.LuaScriptInfo = std::move(LuaScriptInfo);
	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionInMod
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallMutatorFunctionInMod(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctionInMod");

	Params::FMModdingManager_AttemptToCallMutatorFunctionInMod Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFMModdingManager::AttemptToCallMutatorFunctions(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctions");

	Params::FMModdingManager_AttemptToCallMutatorFunctions Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsAbortOnAnyInteger
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallMutatorFunctionsAbortOnAnyInteger(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctionsAbortOnAnyInteger");

	Params::FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsAbortOnAnyString
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallMutatorFunctionsAbortOnAnyString(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctionsAbortOnAnyString");

	Params::FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsAbortOnAnyTable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::AttemptToCallMutatorFunctionsAbortOnAnyTable(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctionsAbortOnAnyTable");

	Params::FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsCanIntercept
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::AttemptToCallMutatorFunctionsCanIntercept(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctionsCanIntercept");

	Params::FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsReversed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FunctionName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLuaValue>&         InArgs                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFMModdingManager::AttemptToCallMutatorFunctionsReversed(const class FString& FunctionName, const TArray<struct FLuaValue>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "AttemptToCallMutatorFunctionsReversed");

	Params::FMModdingManager_AttemptToCallMutatorFunctionsReversed Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.CreateInstanceOfScript
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class ULuaState>      LuaStateClass                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScriptFilename                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::CreateInstanceOfScript(class UObject* WorldContextObject, const TSubclassOf<class ULuaState> LuaStateClass, const class FString& ScriptFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "CreateInstanceOfScript");

	Params::FMModdingManager_CreateInstanceOfScript Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LuaStateClass = LuaStateClass;
	Parms.ScriptFilename = std::move(ScriptFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.FindLuaMutator
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaScriptInfo*                  OutLuaScriptInfo                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MutatorName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::FindLuaMutator(struct FLuaScriptInfo* OutLuaScriptInfo, const struct FUInt64& ModID, const class FString& MutatorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "FindLuaMutator");

	Params::FMModdingManager_FindLuaMutator Parms{};

	Parms.ModID = std::move(ModID);
	Parms.MutatorName = std::move(MutatorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLuaScriptInfo != nullptr)
		*OutLuaScriptInfo = std::move(Parms.OutLuaScriptInfo);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GenerateInstalledModList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::GenerateInstalledModList(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GenerateInstalledModList");

	Params::FMModdingManager_GenerateInstalledModList Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.GetActiveLuaMutators
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FLuaScriptInfo>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLuaScriptInfo> UFMModdingManager::GetActiveLuaMutators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetActiveLuaMutators");

	Params::FMModdingManager_GetActiveLuaMutators Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetCachedFileListIncludingModIDList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimmed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FileList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FUInt64>&           ModIDList                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::GetCachedFileListIncludingModIDList(EGBResourceType GBResourceType, bool bTrimmed, TArray<class FString>* FileList, const TArray<struct FUInt64>& ModIDList, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetCachedFileListIncludingModIDList");

	Params::FMModdingManager_GetCachedFileListIncludingModIDList Parms{};

	Parms.GBResourceType = GBResourceType;
	Parms.bTrimmed = bTrimmed;
	Parms.ModIDList = std::move(ModIDList);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileList != nullptr)
		*FileList = std::move(Parms.FileList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetCachedFileListIncludingMods
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimmed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FileList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::GetCachedFileListIncludingMods(EGBResourceType GBResourceType, bool bTrimmed, TArray<class FString>* FileList, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetCachedFileListIncludingMods");

	Params::FMModdingManager_GetCachedFileListIncludingMods Parms{};

	Parms.GBResourceType = GBResourceType;
	Parms.bTrimmed = bTrimmed;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileList != nullptr)
		*FileList = std::move(Parms.FileList);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetCurrentExecutingModID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UFMModdingManager::GetCurrentExecutingModID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetCurrentExecutingModID");

	Params::FMModdingManager_GetCurrentExecutingModID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetLuaScriptInfoForMutatorFileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaScriptInfo                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaScriptInfo UFMModdingManager::GetLuaScriptInfoForMutatorFileName(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetLuaScriptInfoForMutatorFileName");

	Params::FMModdingManager_GetLuaScriptInfoForMutatorFileName Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetModDetails
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FUGCFileInfo& ModDetails, bool bSuccess)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UFMModdingManager::GetModDetails(const struct FUInt64& ModID, TDelegate<void(const struct FUGCFileInfo& ModDetails, bool bSuccess)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetModDetails");

	Params::FMModdingManager_GetModDetails Parms{};

	Parms.ModID = std::move(ModID);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.GetModListForServer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSteamServerDetails&       SteamServerDetails                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FUInt64>& ModList, bool bSuccess)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UFMModdingManager::GetModListForServer(const struct FSteamServerDetails& SteamServerDetails, TDelegate<void(const TArray<struct FUInt64>& ModList, bool bSuccess)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetModListForServer");

	Params::FMModdingManager_GetModListForServer Parms{};

	Parms.SteamServerDetails = std::move(SteamServerDetails);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.GetMutatorOption
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaScriptInfo&                  ScriptInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       OptionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseConfig                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaScriptOption                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLuaScriptOption UFMModdingManager::GetMutatorOption(struct FLuaScriptInfo& ScriptInfo, const class FName OptionName, bool bUseConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetMutatorOption");

	Params::FMModdingManager_GetMutatorOption Parms{};

	Parms.ScriptInfo = std::move(ScriptInfo);
	Parms.OptionName = OptionName;
	Parms.bUseConfig = bUseConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ScriptInfo = std::move(Parms.ScriptInfo);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetMutatorOptionByFilename
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       OptionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseConfig                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaScriptOption                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLuaScriptOption UFMModdingManager::GetMutatorOptionByFilename(const class FString& Filename, const class FName OptionName, bool bUseConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetMutatorOptionByFilename");

	Params::FMModdingManager_GetMutatorOptionByFilename Parms{};

	Parms.Filename = std::move(Filename);
	Parms.OptionName = OptionName;
	Parms.bUseConfig = bUseConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetMutatorOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaScriptInfo&                  ScriptInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUseConfig                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLuaScriptOption>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLuaScriptOption> UFMModdingManager::GetMutatorOptions(struct FLuaScriptInfo& ScriptInfo, bool bUseConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetMutatorOptions");

	Params::FMModdingManager_GetMutatorOptions Parms{};

	Parms.ScriptInfo = std::move(ScriptInfo);
	Parms.bUseConfig = bUseConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ScriptInfo = std::move(Parms.ScriptInfo);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetMutatorOptionsByFilename
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseConfig                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLuaScriptOption>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLuaScriptOption> UFMModdingManager::GetMutatorOptionsByFilename(const class FString& Filename, bool bUseConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetMutatorOptionsByFilename");

	Params::FMModdingManager_GetMutatorOptionsByFilename Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bUseConfig = bUseConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.PrepAllLuaMutators
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::PrepAllLuaMutators(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "PrepAllLuaMutators");

	Params::FMModdingManager_PrepAllLuaMutators Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.PrepLuaMutatorsForMod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::PrepLuaMutatorsForMod(const struct FUInt64& ModID, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "PrepLuaMutatorsForMod");

	Params::FMModdingManager_PrepLuaMutatorsForMod Parms{};

	Parms.ModID = std::move(ModID);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.RunLuaFileInEnvironment
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class ULuaState>      LuaStateClass                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaScriptInfo*                  LuaScriptInfo                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UFMModdingManager::RunLuaFileInEnvironment(class UObject* WorldContextObject, const TSubclassOf<class ULuaState> LuaStateClass, struct FLuaScriptInfo* LuaScriptInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "RunLuaFileInEnvironment");

	Params::FMModdingManager_RunLuaFileInEnvironment Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LuaStateClass = LuaStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LuaScriptInfo != nullptr)
		*LuaScriptInfo = std::move(Parms.LuaScriptInfo);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.SetActiveLuaMutators
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FLuaScriptInfo>&    UpdatedActiveLuaMutators                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFMModdingManager::SetActiveLuaMutators(const TArray<struct FLuaScriptInfo>& UpdatedActiveLuaMutators)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetActiveLuaMutators");

	Params::FMModdingManager_SetActiveLuaMutators Parms{};

	Parms.UpdatedActiveLuaMutators = std::move(UpdatedActiveLuaMutators);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.SetCurrentExecutingModID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::SetCurrentExecutingModID(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetCurrentExecutingModID");

	Params::FMModdingManager_SetCurrentExecutingModID Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.SetModDisabled
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bDisabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::SetModDisabled(const struct FUInt64& ModID, const bool bDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetModDisabled");

	Params::FMModdingManager_SetModDisabled Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bDisabled = bDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.SetMutatorOptionsFromMissionSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::SetMutatorOptionsFromMissionSettings(const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetMutatorOptionsFromMissionSettings");

	Params::FMModdingManager_SetMutatorOptionsFromMissionSettings Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.SetMutatorOptionValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLuaScriptInfo&                  ScriptInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             OptionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetConfig                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::SetMutatorOptionValue(struct FLuaScriptInfo& ScriptInfo, class FName OptionName, int32 NewValue, bool bSetConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetMutatorOptionValue");

	Params::FMModdingManager_SetMutatorOptionValue Parms{};

	Parms.ScriptInfo = std::move(ScriptInfo);
	Parms.OptionName = OptionName;
	Parms.NewValue = NewValue;
	Parms.bSetConfig = bSetConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ScriptInfo = std::move(Parms.ScriptInfo);

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.SetMutatorOptionValueByFilename
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OptionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetConfig                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::SetMutatorOptionValueByFilename(const class FString& Filename, class FName OptionName, int32 NewValue, bool bSetConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetMutatorOptionValueByFilename");

	Params::FMModdingManager_SetMutatorOptionValueByFilename Parms{};

	Parms.Filename = std::move(Filename);
	Parms.OptionName = OptionName;
	Parms.NewValue = NewValue;
	Parms.bSetConfig = bSetConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.SetServerAuthoritative
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLuaScriptInfo&                  ScriptInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bNewServerAuthoritative                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::SetServerAuthoritative(struct FLuaScriptInfo& ScriptInfo, bool bNewServerAuthoritative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetServerAuthoritative");

	Params::FMModdingManager_SetServerAuthoritative Parms{};

	Parms.ScriptInfo = std::move(ScriptInfo);
	Parms.bNewServerAuthoritative = bNewServerAuthoritative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ScriptInfo = std::move(Parms.ScriptInfo);
}


// Function FMModdingPlugin.FMModdingManager.SetServerModListForClient
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FUInt64>&           InServerModListForClient                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFMModdingManager::SetServerModListForClient(const TArray<struct FUInt64>& InServerModListForClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetServerModListForClient");

	Params::FMModdingManager_SetServerModListForClient Parms{};

	Parms.InServerModListForClient = std::move(InServerModListForClient);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.SetupPackagePath
// (Final, Native, Private)

void UFMModdingManager::SetupPackagePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SetupPackagePath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.SubscribeToMod
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::SubscribeToMod(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "SubscribeToMod");

	Params::FMModdingManager_SubscribeToMod Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.UnloadAllLuaMutators
// (Final, Native, Public, BlueprintCallable)

void UFMModdingManager::UnloadAllLuaMutators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "UnloadAllLuaMutators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.UnloadLuaMutatorsForMod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::UnloadLuaMutatorsForMod(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "UnloadLuaMutatorsForMod");

	Params::FMModdingManager_UnloadLuaMutatorsForMod Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.UnsubscribeFromMod
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::UnsubscribeFromMod(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "UnsubscribeFromMod");

	Params::FMModdingManager_UnsubscribeFromMod Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.UpdateCachedFileList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBResourceType                         GBResourceType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingManager::UpdateCachedFileList(EGBResourceType GBResourceType, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "UpdateCachedFileList");

	Params::FMModdingManager_UpdateCachedFileList Parms{};

	Parms.GBResourceType = GBResourceType;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingManager.GetActiveModList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FUInt64>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUInt64> UFMModdingManager::GetActiveModList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetActiveModList");

	Params::FMModdingManager_GetActiveModList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetInstalledModList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FUInt64>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUInt64> UFMModdingManager::GetInstalledModList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetInstalledModList");

	Params::FMModdingManager_GetInstalledModList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.GetSubscribedModList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FUInt64>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUInt64> UFMModdingManager::GetSubscribedModList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "GetSubscribedModList");

	Params::FMModdingManager_GetSubscribedModList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.IsModActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bServer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::IsModActive(const struct FUInt64& ModID, const bool bServer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "IsModActive");

	Params::FMModdingManager_IsModActive Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bServer = bServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.IsModDisabled
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bServer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::IsModDisabled(const struct FUInt64& ModID, const bool bServer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "IsModDisabled");

	Params::FMModdingManager_IsModDisabled Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bServer = bServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.IsModInstalled
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::IsModInstalled(const struct FUInt64& ModID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "IsModInstalled");

	Params::FMModdingManager_IsModInstalled Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingManager.IsModSubscribed
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingManager::IsModSubscribed(const struct FUInt64& ModID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingManager", "IsModSubscribed");

	Params::FMModdingManager_IsModSubscribed Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingModDetailsQuery.CancelQuery
// (Final, Native, Public, BlueprintCallable)

void UFMModdingModDetailsQuery::CancelQuery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModDetailsQuery", "CancelQuery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModDetailsQuery.RequestModDetails
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   InID                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingModDetailsQuery::RequestModDetails(const struct FUInt64& InID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModDetailsQuery", "RequestModDetails");

	Params::FMModdingModDetailsQuery_RequestModDetails Parms{};

	Parms.InID = std::move(InID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.AdvanceSyncStatus
// (Final, Native, Protected)

void AFMModdingModSync::AdvanceSyncStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "AdvanceSyncStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.BypassSync
// (Final, Native, Protected, BlueprintCallable)

void AFMModdingModSync::BypassSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "BypassSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.CancelSync
// (Final, Native, Public, BlueprintCallable)

void AFMModdingModSync::CancelSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "CancelSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.HideUI
// (Event, Public, BlueprintEvent)

void AFMModdingModSync::HideUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "HideUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FMModdingPlugin.FMModdingModSync.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FUInt64>&           InModList                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const bool                              bInUseUI                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFMModdingModSync::Initialize(const TArray<struct FUInt64>& InModList, const bool bInUseUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "Initialize");

	Params::FMModdingModSync_Initialize Parms{};

	Parms.InModList = std::move(InModList);
	Parms.bInUseUI = bInUseUI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.OnModGlobalSyncStatusUpdatedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EFMSyncStatus                     NewSyncStatus                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFMModdingModSync::OnModGlobalSyncStatusUpdatedEvent(const EFMSyncStatus NewSyncStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "OnModGlobalSyncStatusUpdatedEvent");

	Params::FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent Parms{};

	Parms.NewSyncStatus = NewSyncStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMModdingPlugin.FMModdingModSync.OnModSyncEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bWasSyncSuccessful                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFMModdingModSync::OnModSyncEvent(const struct FUInt64& ModID, const bool bWasSyncSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "OnModSyncEvent");

	Params::FMModdingModSync_OnModSyncEvent Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bWasSyncSuccessful = bWasSyncSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMModdingPlugin.FMModdingModSync.OnModSyncFinishedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bWasSyncSuccessful                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFMModdingModSync::OnModSyncFinishedEvent(const bool bWasSyncSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "OnModSyncFinishedEvent");

	Params::FMModdingModSync_OnModSyncFinishedEvent Parms{};

	Parms.bWasSyncSuccessful = bWasSyncSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMModdingPlugin.FMModdingModSync.OnModSyncMountUnmountEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             NumModsRemaining                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TotalModsToMountOrUnmount                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bMounting                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFMModdingModSync::OnModSyncMountUnmountEvent(const int32 NumModsRemaining, const int32 TotalModsToMountOrUnmount, const bool bMounting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "OnModSyncMountUnmountEvent");

	Params::FMModdingModSync_OnModSyncMountUnmountEvent Parms{};

	Parms.NumModsRemaining = NumModsRemaining;
	Parms.TotalModsToMountOrUnmount = TotalModsToMountOrUnmount;
	Parms.bMounting = bMounting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMModdingPlugin.FMModdingModSync.SetGlobalSyncStatus
// (Final, Native, Protected)
// Parameters:
// const EFMSyncStatus                     NewSyncStatus                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFMModdingModSync::SetGlobalSyncStatus(const EFMSyncStatus NewSyncStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "SetGlobalSyncStatus");

	Params::FMModdingModSync_SetGlobalSyncStatus Parms{};

	Parms.NewSyncStatus = NewSyncStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.ShowUI
// (Event, Public, BlueprintEvent)

void AFMModdingModSync::ShowUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "ShowUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FMModdingPlugin.FMModdingModSync.StartSync
// (Final, Native, Public, BlueprintCallable)

void AFMModdingModSync::StartSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "StartSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingModSync.AreModDetailsLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFMModdingModSync::AreModDetailsLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "AreModDetailsLoaded");

	Params::FMModdingModSync_AreModDetailsLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingModSync.GetGlobalSyncStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFMSyncStatus                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFMSyncStatus AFMModdingModSync::GetGlobalSyncStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "GetGlobalSyncStatus");

	Params::FMModdingModSync_GetGlobalSyncStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingModSync.IsAnySyncRequired
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFMModdingModSync::IsAnySyncRequired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "IsAnySyncRequired");

	Params::FMModdingModSync_IsAnySyncRequired Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingModSync.IsModSyncRequired
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFMModdingModSync::IsModSyncRequired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingModSync", "IsModSyncRequired");

	Params::FMModdingModSync_IsModSyncRequired Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingServerPlayersQuery.CancelRequestPlayersList
// (Final, Native, Public, BlueprintCallable)

void UFMModdingServerPlayersQuery::CancelRequestPlayersList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingServerPlayersQuery", "CancelRequestPlayersList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingServerPlayersQuery.RequestPlayersList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSteamServerDetails&       SteamServerDetails                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class FString>& PlayerNameList, bool bSuccess)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UFMModdingServerPlayersQuery::RequestPlayersList(const struct FSteamServerDetails& SteamServerDetails, TDelegate<void(const TArray<class FString>& PlayerNameList, bool bSuccess)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingServerPlayersQuery", "RequestPlayersList");

	Params::FMModdingServerPlayersQuery_RequestPlayersList Parms{};

	Parms.SteamServerDetails = std::move(SteamServerDetails);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingServerPlayersQuery.ReturnPlayersList
// (Final, Native, Protected)
// Parameters:
// const bool                              bSuccess                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingServerPlayersQuery::ReturnPlayersList(const bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingServerPlayersQuery", "ReturnPlayersList");

	Params::FMModdingServerPlayersQuery_ReturnPlayersList Parms{};

	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingServerPlayersQuery.IsRefreshing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingServerPlayersQuery::IsRefreshing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingServerPlayersQuery", "IsRefreshing");

	Params::FMModdingServerPlayersQuery_IsRefreshing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFMModdingSettings*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMModdingSettings* UFMModdingSettings::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMModdingSettings", "Get");

	Params::FMModdingSettings_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.AddCensoredPatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PatchFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingSettings::AddCensoredPatch(const class FString& PatchFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "AddCensoredPatch");

	Params::FMModdingSettings_AddCensoredPatch Parms{};

	Parms.PatchFilename = std::move(PatchFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.ClearAllCensoredPatches
// (Final, Native, Public, BlueprintCallable)

void UFMModdingSettings::ClearAllCensoredPatches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "ClearAllCensoredPatches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.LoadConfigClient
// (Final, Native, Public, BlueprintCallable)

void UFMModdingSettings::LoadConfigClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "LoadConfigClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.LoadConfigServer
// (Final, Native, Public, BlueprintCallable)

void UFMModdingSettings::LoadConfigServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "LoadConfigServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.RemoveCensoredPatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PatchFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingSettings::RemoveCensoredPatch(const class FString& PatchFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "RemoveCensoredPatch");

	Params::FMModdingSettings_RemoveCensoredPatch Parms{};

	Parms.PatchFilename = std::move(PatchFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.SaveConfigClient
// (Final, Native, Public, BlueprintCallable)

void UFMModdingSettings::SaveConfigClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "SaveConfigClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.SaveConfigServer
// (Final, Native, Public, BlueprintCallable)

void UFMModdingSettings::SaveConfigServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "SaveConfigServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingSettings.GetAreAnyPatchesCensored
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingSettings::GetAreAnyPatchesCensored() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetAreAnyPatchesCensored");

	Params::FMModdingSettings_GetAreAnyPatchesCensored Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.GetDisabledMods
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FUInt64>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUInt64> UFMModdingSettings::GetDisabledMods() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetDisabledMods");

	Params::FMModdingSettings_GetDisabledMods Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.GetIsPatchCensored
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    PatchFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingSettings::GetIsPatchCensored(const class FString& PatchFilename) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetIsPatchCensored");

	Params::FMModdingSettings_GetIsPatchCensored Parms{};

	Parms.PatchFilename = std::move(PatchFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.GetModIsDisabled
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingSettings::GetModIsDisabled(const struct FUInt64& ModID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetModIsDisabled");

	Params::FMModdingSettings_GetModIsDisabled Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.GetPatchVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBPatchVisibility                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBPatchVisibility UFMModdingSettings::GetPatchVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetPatchVisibility");

	Params::FMModdingSettings_GetPatchVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.GetServerMods
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBModBasicInfo>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBModBasicInfo> UFMModdingSettings::GetServerMods() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetServerMods");

	Params::FMModdingSettings_GetServerMods Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingSettings.GetUseLocalModListForServer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMModdingSettings::GetUseLocalModListForServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingSettings", "GetUseLocalModListForServer");

	Params::FMModdingSettings_GetUseLocalModListForServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMModdingPlugin.FMModdingTitleQuery.RequestModList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InSearchText                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       InWorkshopTag                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bOnlyCurrentGameVersion                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingTitleQuery::RequestModList(const class FString& InSearchText, const class FName InWorkshopTag, const bool bOnlyCurrentGameVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingTitleQuery", "RequestModList");

	Params::FMModdingTitleQuery_RequestModList Parms{};

	Parms.InSearchText = std::move(InSearchText);
	Parms.InWorkshopTag = InWorkshopTag;
	Parms.bOnlyCurrentGameVersion = bOnlyCurrentGameVersion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMModdingPlugin.FMModdingUserModsQuery.RequestUserModList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   InSteamUserID                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMModdingUserModsQuery::RequestUserModList(const struct FUInt64& InSteamUserID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMModdingUserModsQuery", "RequestUserModList");

	Params::FMModdingUserModsQuery_RequestUserModList Parms{};

	Parms.InSteamUserID = std::move(InSteamUserID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

