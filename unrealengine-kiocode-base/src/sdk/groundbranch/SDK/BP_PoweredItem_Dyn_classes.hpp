#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PoweredItem_Dyn

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EGBPowerSourceStatus_structs.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PoweredItem_Dyn.BP_PoweredItem_Dyn_C
// 0x0178 (0x0398 - 0x0220)
class ABP_PoweredItem_Dyn_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PowerUserComponent_C*               PowerUserComponent;                                // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComp;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VFXEmitterLocation;                                // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CustomCollision;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULXRSourceComponent*                    LXRSource;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PoweredItemMesh;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_PoweredItem;                                    // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MAT_Index;                                         // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MAT_On;                                            // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MAT_Off;                                           // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MAT_Flicker;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlicker;                                          // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       TimeOfDayPoweredStatus;                            // 0x0288(0x0050)(Edit, BlueprintVisible)
	float                                         MeshMaxDrawDistance;                               // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DestroyedMaterial;                                 // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_Destroyed;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle_Destruction_On;                           // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle_Destruction_Off;                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasLingeringEmitter;                              // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Particle_Linger;                                   // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletHits;                                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxBulletHits;                                     // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBroken;                                         // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bDestructible;                                     // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A[0x2];                                      // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentTimeSpan;                                   // 0x031C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkComponent;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GroupName;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NiagaraFX;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NiagaraFX_Linger;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NiagaraBugs;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCustomCollision;                               // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         NiagaraFX_OffBreak;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadialDamageThreshold;                             // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadialDamageMaxDistance;                           // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDifferentBreakFXIfOn;                             // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          DestructionSound;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          RunningSound;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RunningSoundId;                                    // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoVFXIfHalfBroken;                                // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoVFXIfUnpowered;                                 // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_386[0x2];                                      // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            SM_Off;                                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanPlaySound;                                     // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantsToPlaySound;                                 // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PoweredItem_Dyn(int32 EntryPoint);
	void SharedBreakFX();
	void PlayFX(class UNiagaraSystem* SystemTemplate);
	void BndEvt__BP_PoweredItem_Dyn_PowerUserComponent_K2Node_ComponentBoundEvent_0_OnSharedPowerSourceStatusChanged__DelegateSignature(EGBPowerSourceStatus InSharedPowerSourceStatus);
	void OnPlayerReadyRoomStatusChanged_Event_0(class AGBPlayerState* PlayerState);
	void BindToReadyRoomDelegate();
	void StopSounds();
	void StartSounds();
	void MakeAssetsNotBroken();
	void MakeAssetsBroken();
	void BindCollisionDelegates();
	void OnTakeRadialDamage_PoweredItem(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void HalfBreak();
	void OnComponentHit_Event_PoweredItem(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void K2_OnReset();
	void UpdateAssetsShared();
	void Unbreak();
	void Break();
	void OnTimeSpanChanged_Event_0(class FName Timespan);
	void BindToSkyActor();
	void Destruction();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void OnRep_IsOn();
	void OnRep_bIsBroken();
	void DoWeTakeDamage(const struct FVector& InDamageOrigin, float InDamageRadius, bool bInTrace, class AActor* InDamageCauser, bool* bInTakeDamage);

	void IsOn(bool* bIsOn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PoweredItem_Dyn_C">();
	}
	static class ABP_PoweredItem_Dyn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PoweredItem_Dyn_C>();
	}
};
static_assert(alignof(ABP_PoweredItem_Dyn_C) == 0x000008, "Wrong alignment on ABP_PoweredItem_Dyn_C");
static_assert(sizeof(ABP_PoweredItem_Dyn_C) == 0x000398, "Wrong size on ABP_PoweredItem_Dyn_C");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, UberGraphFrame) == 0x000220, "Member 'ABP_PoweredItem_Dyn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, PowerUserComponent) == 0x000228, "Member 'ABP_PoweredItem_Dyn_C::PowerUserComponent' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, AkComp) == 0x000230, "Member 'ABP_PoweredItem_Dyn_C::AkComp' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, VFXEmitterLocation) == 0x000238, "Member 'ABP_PoweredItem_Dyn_C::VFXEmitterLocation' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, CustomCollision) == 0x000240, "Member 'ABP_PoweredItem_Dyn_C::CustomCollision' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, LXRSource) == 0x000248, "Member 'ABP_PoweredItem_Dyn_C::LXRSource' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, PoweredItemMesh) == 0x000250, "Member 'ABP_PoweredItem_Dyn_C::PoweredItemMesh' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, SM_PoweredItem) == 0x000258, "Member 'ABP_PoweredItem_Dyn_C::SM_PoweredItem' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, MAT_Index) == 0x000260, "Member 'ABP_PoweredItem_Dyn_C::MAT_Index' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, MAT_On) == 0x000268, "Member 'ABP_PoweredItem_Dyn_C::MAT_On' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, MAT_Off) == 0x000270, "Member 'ABP_PoweredItem_Dyn_C::MAT_Off' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, MAT_Flicker) == 0x000278, "Member 'ABP_PoweredItem_Dyn_C::MAT_Flicker' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bFlicker) == 0x000280, "Member 'ABP_PoweredItem_Dyn_C::bFlicker' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, TimeOfDayPoweredStatus) == 0x000288, "Member 'ABP_PoweredItem_Dyn_C::TimeOfDayPoweredStatus' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, MeshMaxDrawDistance) == 0x0002D8, "Member 'ABP_PoweredItem_Dyn_C::MeshMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, DestroyedMaterial) == 0x0002E0, "Member 'ABP_PoweredItem_Dyn_C::DestroyedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, SM_Destroyed) == 0x0002E8, "Member 'ABP_PoweredItem_Dyn_C::SM_Destroyed' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, Particle_Destruction_On) == 0x0002F0, "Member 'ABP_PoweredItem_Dyn_C::Particle_Destruction_On' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, Particle_Destruction_Off) == 0x0002F8, "Member 'ABP_PoweredItem_Dyn_C::Particle_Destruction_Off' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bHasLingeringEmitter) == 0x000300, "Member 'ABP_PoweredItem_Dyn_C::bHasLingeringEmitter' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, Particle_Linger) == 0x000308, "Member 'ABP_PoweredItem_Dyn_C::Particle_Linger' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, BulletHits) == 0x000310, "Member 'ABP_PoweredItem_Dyn_C::BulletHits' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, MaxBulletHits) == 0x000314, "Member 'ABP_PoweredItem_Dyn_C::MaxBulletHits' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bIsBroken) == 0x000318, "Member 'ABP_PoweredItem_Dyn_C::bIsBroken' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bDestructible) == 0x000319, "Member 'ABP_PoweredItem_Dyn_C::bDestructible' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, CurrentTimeSpan) == 0x00031C, "Member 'ABP_PoweredItem_Dyn_C::CurrentTimeSpan' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, AkComponent) == 0x000328, "Member 'ABP_PoweredItem_Dyn_C::AkComponent' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, GroupName) == 0x000330, "Member 'ABP_PoweredItem_Dyn_C::GroupName' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, NiagaraFX) == 0x000338, "Member 'ABP_PoweredItem_Dyn_C::NiagaraFX' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, NiagaraFX_Linger) == 0x000340, "Member 'ABP_PoweredItem_Dyn_C::NiagaraFX_Linger' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, NiagaraBugs) == 0x000348, "Member 'ABP_PoweredItem_Dyn_C::NiagaraBugs' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bUseCustomCollision) == 0x000350, "Member 'ABP_PoweredItem_Dyn_C::bUseCustomCollision' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, NiagaraFX_OffBreak) == 0x000358, "Member 'ABP_PoweredItem_Dyn_C::NiagaraFX_OffBreak' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, RadialDamageThreshold) == 0x000360, "Member 'ABP_PoweredItem_Dyn_C::RadialDamageThreshold' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, RadialDamageMaxDistance) == 0x000364, "Member 'ABP_PoweredItem_Dyn_C::RadialDamageMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bDifferentBreakFXIfOn) == 0x000368, "Member 'ABP_PoweredItem_Dyn_C::bDifferentBreakFXIfOn' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, DestructionSound) == 0x000370, "Member 'ABP_PoweredItem_Dyn_C::DestructionSound' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, RunningSound) == 0x000378, "Member 'ABP_PoweredItem_Dyn_C::RunningSound' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, RunningSoundId) == 0x000380, "Member 'ABP_PoweredItem_Dyn_C::RunningSoundId' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bNoVFXIfHalfBroken) == 0x000384, "Member 'ABP_PoweredItem_Dyn_C::bNoVFXIfHalfBroken' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bNoVFXIfUnpowered) == 0x000385, "Member 'ABP_PoweredItem_Dyn_C::bNoVFXIfUnpowered' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, SM_Off) == 0x000388, "Member 'ABP_PoweredItem_Dyn_C::SM_Off' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bCanPlaySound) == 0x000390, "Member 'ABP_PoweredItem_Dyn_C::bCanPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_PoweredItem_Dyn_C, bWantsToPlaySound) == 0x000391, "Member 'ABP_PoweredItem_Dyn_C::bWantsToPlaySound' has a wrong offset!");

}

