#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GamepadPlugin_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "EnhancedInput_classes.hpp"


namespace SDK
{

// Class GamepadPlugin.VirtualCursorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVirtualCursorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DisableVirtualCursor(class APlayerController* PC);
	static void EnableVirtualCursor(class APlayerController* PC);
	static bool IsCursorOverInteractableWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualCursorFunctionLibrary">();
	}
	static class UVirtualCursorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualCursorFunctionLibrary>();
	}
};
static_assert(alignof(UVirtualCursorFunctionLibrary) == 0x000008, "Wrong alignment on UVirtualCursorFunctionLibrary");
static_assert(sizeof(UVirtualCursorFunctionLibrary) == 0x000028, "Wrong size on UVirtualCursorFunctionLibrary");

// Class GamepadPlugin.AimAssistPlayerComponent
// 0x0000 (0x00B0 - 0x00B0)
class UAimAssistPlayerComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimAssistPlayerComponent">();
	}
	static class UAimAssistPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimAssistPlayerComponent>();
	}
};
static_assert(alignof(UAimAssistPlayerComponent) == 0x000008, "Wrong alignment on UAimAssistPlayerComponent");
static_assert(sizeof(UAimAssistPlayerComponent) == 0x0000B0, "Wrong size on UAimAssistPlayerComponent");

// Class GamepadPlugin.AimAssistTargetComponent
// 0x0020 (0x0490 - 0x0470)
class UAimAssistTargetComponent final : public UCapsuleComponent
{
public:
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAimAssistTargetOptions                AimTargetData;                                     // 0x0478(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimAssistTargetComponent">();
	}
	static class UAimAssistTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimAssistTargetComponent>();
	}
};
static_assert(alignof(UAimAssistTargetComponent) == 0x000010, "Wrong alignment on UAimAssistTargetComponent");
static_assert(sizeof(UAimAssistTargetComponent) == 0x000490, "Wrong size on UAimAssistTargetComponent");
static_assert(offsetof(UAimAssistTargetComponent, AimTargetData) == 0x000478, "Member 'UAimAssistTargetComponent::AimTargetData' has a wrong offset!");

// Class GamepadPlugin.GamepadCursorSettings
// 0x00C0 (0x00F8 - 0x0038)
class UGamepadCursorSettings final : public UDeveloperSettings
{
public:
	struct FRuntimeFloatCurve                     AnalogCursorAccelerationCurve;                     // 0x0038(0x0088)(Edit, Config, NativeAccessSpecifierPrivate)
	float                                         MaxAnalogCursorSpeed;                              // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAnalogCursorSpeedWhenHovered;                   // 0x00C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDragCoefficient;                       // 0x00C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDragCoefficientWhenHovered;            // 0x00CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinAnalogCursorSpeed;                              // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDeadZone;                              // 0x00D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorAccelerationMultiplier;                // 0x00D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorSize;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseEngineAnalogCursor;                            // 0x00E0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAnalogCursorNoAcceleration;                       // 0x00E1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E2[0x16];                                      // 0x00E2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GamepadCursorSettings">();
	}
	static class UGamepadCursorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGamepadCursorSettings>();
	}
};
static_assert(alignof(UGamepadCursorSettings) == 0x000008, "Wrong alignment on UGamepadCursorSettings");
static_assert(sizeof(UGamepadCursorSettings) == 0x0000F8, "Wrong size on UGamepadCursorSettings");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorAccelerationCurve) == 0x000038, "Member 'UGamepadCursorSettings::AnalogCursorAccelerationCurve' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, MaxAnalogCursorSpeed) == 0x0000C0, "Member 'UGamepadCursorSettings::MaxAnalogCursorSpeed' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, MaxAnalogCursorSpeedWhenHovered) == 0x0000C4, "Member 'UGamepadCursorSettings::MaxAnalogCursorSpeedWhenHovered' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorDragCoefficient) == 0x0000C8, "Member 'UGamepadCursorSettings::AnalogCursorDragCoefficient' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorDragCoefficientWhenHovered) == 0x0000CC, "Member 'UGamepadCursorSettings::AnalogCursorDragCoefficientWhenHovered' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, MinAnalogCursorSpeed) == 0x0000D0, "Member 'UGamepadCursorSettings::MinAnalogCursorSpeed' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorDeadZone) == 0x0000D4, "Member 'UGamepadCursorSettings::AnalogCursorDeadZone' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorAccelerationMultiplier) == 0x0000D8, "Member 'UGamepadCursorSettings::AnalogCursorAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorSize) == 0x0000DC, "Member 'UGamepadCursorSettings::AnalogCursorSize' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, bUseEngineAnalogCursor) == 0x0000E0, "Member 'UGamepadCursorSettings::bUseEngineAnalogCursor' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, bAnalogCursorNoAcceleration) == 0x0000E1, "Member 'UGamepadCursorSettings::bAnalogCursorNoAcceleration' has a wrong offset!");

// Class GamepadPlugin.GamepadInputSubsystem
// 0x0010 (0x0040 - 0x0030)
class UGamepadInputSubsystem final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrentInputType(EPlayerInputType NewInputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GamepadInputSubsystem">();
	}
	static class UGamepadInputSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGamepadInputSubsystem>();
	}
};
static_assert(alignof(UGamepadInputSubsystem) == 0x000008, "Wrong alignment on UGamepadInputSubsystem");
static_assert(sizeof(UGamepadInputSubsystem) == 0x000040, "Wrong size on UGamepadInputSubsystem");

// Class GamepadPlugin.AimAssistTarget
// 0x0000 (0x0000 - 0x0000)
class IAimAssistTarget final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimAssistTarget">();
	}
	static class IAimAssistTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAimAssistTarget>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IAimAssistTarget) == 0x000001, "Wrong alignment on IAimAssistTarget");
static_assert(sizeof(IAimAssistTarget) == 0x000001, "Wrong size on IAimAssistTarget");

// Class GamepadPlugin.InputModifierAimAssist
// 0x0010 (0x0038 - 0x0028)
class UInputModifierAimAssist final : public UInputModifier
{
public:
	float                                         AimSlowDown;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierAimAssist">();
	}
	static class UInputModifierAimAssist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierAimAssist>();
	}
};
static_assert(alignof(UInputModifierAimAssist) == 0x000008, "Wrong alignment on UInputModifierAimAssist");
static_assert(sizeof(UInputModifierAimAssist) == 0x000038, "Wrong size on UInputModifierAimAssist");
static_assert(offsetof(UInputModifierAimAssist, AimSlowDown) == 0x000028, "Member 'UInputModifierAimAssist::AimSlowDown' has a wrong offset!");
static_assert(offsetof(UInputModifierAimAssist, Range) == 0x00002C, "Member 'UInputModifierAimAssist::Range' has a wrong offset!");

}

