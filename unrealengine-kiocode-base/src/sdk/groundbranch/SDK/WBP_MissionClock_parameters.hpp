#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MissionClock

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_MissionClock.WBP_MissionClock_C.ExecuteUbergraph_WBP_MissionClock
// 0x0058 (0x0058 - 0x0000)
struct WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetRoundTimeText_ReturnValue;             // 0x0040(0x0018)()
};
static_assert(alignof(WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock) == 0x000008, "Wrong alignment on WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock");
static_assert(sizeof(WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock) == 0x000058, "Wrong size on WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock");
static_assert(offsetof(WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock, EntryPoint) == 0x000000, "Member 'WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock, CallFunc_GetRoundTimeText_ReturnValue) == 0x000040, "Member 'WBP_MissionClock_C_ExecuteUbergraph_WBP_MissionClock::CallFunc_GetRoundTimeText_ReturnValue' has a wrong offset!");

// Function WBP_MissionClock.WBP_MissionClock_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_MissionClock_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MissionClock_C_Tick) == 0x000004, "Wrong alignment on WBP_MissionClock_C_Tick");
static_assert(sizeof(WBP_MissionClock_C_Tick) == 0x00003C, "Wrong size on WBP_MissionClock_C_Tick");
static_assert(offsetof(WBP_MissionClock_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_MissionClock_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_MissionClock_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_MissionClock.WBP_MissionClock_C.GetRoundTimeText
// 0x0270 (0x0270 - 0x0000)
struct WBP_MissionClock_C_GetRoundTimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	float                                         RoundTime;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seconds;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minutes;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hours;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBGameState*                           K2Node_DynamicCast_AsGBGame_State;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRoundStageTime_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0060(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0078(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0090(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00D0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x0120(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0138(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0150(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_3;             // 0x0190(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_4;             // 0x01A8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01C0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0200(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0240(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0258(0x0018)()
};
static_assert(alignof(WBP_MissionClock_C_GetRoundTimeText) == 0x000008, "Wrong alignment on WBP_MissionClock_C_GetRoundTimeText");
static_assert(sizeof(WBP_MissionClock_C_GetRoundTimeText) == 0x000270, "Wrong size on WBP_MissionClock_C_GetRoundTimeText");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, ReturnValue) == 0x000000, "Member 'WBP_MissionClock_C_GetRoundTimeText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, RoundTime) == 0x000018, "Member 'WBP_MissionClock_C_GetRoundTimeText::RoundTime' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, Seconds) == 0x00001C, "Member 'WBP_MissionClock_C_GetRoundTimeText::Seconds' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, Minutes) == 0x000020, "Member 'WBP_MissionClock_C_GetRoundTimeText::Minutes' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, Hours) == 0x000024, "Member 'WBP_MissionClock_C_GetRoundTimeText::Hours' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_DynamicCast_AsGBGame_State) == 0x000030, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_DynamicCast_AsGBGame_State' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_GetRoundStageTime_ReturnValue) == 0x00003C, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_GetRoundStageTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_FromSeconds_ReturnValue) == 0x000040, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_BreakTimespan_Days) == 0x000048, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_BreakTimespan_Hours) == 0x00004C, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_BreakTimespan_Minutes) == 0x000050, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_BreakTimespan_Seconds) == 0x000054, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_BreakTimespan_Milliseconds) == 0x000058, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Conv_IntToText_ReturnValue) == 0x000060, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000078, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeStruct_FormatArgumentData) == 0x000090, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000D0, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeArray_Array) == 0x000110, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Conv_IntToText_ReturnValue_2) == 0x000120, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Format_ReturnValue) == 0x000138, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeStruct_FormatArgumentData_2) == 0x000150, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Conv_IntToText_ReturnValue_3) == 0x000190, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Conv_IntToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Conv_IntToText_ReturnValue_4) == 0x0001A8, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Conv_IntToText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001C0, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeStruct_FormatArgumentData_4) == 0x000200, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, K2Node_MakeArray_Array_1) == 0x000240, "Member 'WBP_MissionClock_C_GetRoundTimeText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Greater_IntInt_ReturnValue) == 0x000250, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MissionClock_C_GetRoundTimeText, CallFunc_Format_ReturnValue_1) == 0x000258, "Member 'WBP_MissionClock_C_GetRoundTimeText::CallFunc_Format_ReturnValue_1' has a wrong offset!");

}

