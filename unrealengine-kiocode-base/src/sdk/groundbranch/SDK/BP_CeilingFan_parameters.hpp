#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CeilingFan

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_CeilingFan.BP_CeilingFan_C.ExecuteUbergraph_BP_CeilingFan
// 0x0170 (0x0170 - 0x0000)
struct BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0034(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x00D4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOn_bIsOn;                               // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x015F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan) == 0x000008, "Wrong alignment on BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan");
static_assert(sizeof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan) == 0x000170, "Wrong size on BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, EntryPoint) == 0x000000, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, K2Node_Event_DeltaSeconds) == 0x00000C, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, K2Node_ComponentBoundEvent_HitComponent) == 0x000010, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, K2Node_ComponentBoundEvent_OtherActor) == 0x000018, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, K2Node_ComponentBoundEvent_OtherComp) == 0x000020, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000028, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, K2Node_ComponentBoundEvent_Hit) == 0x000034, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Not_PreBool_ReturnValue) == 0x0000BC, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000BD, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_BooleanOR_ReturnValue) == 0x0000C4, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_MakeRotator_ReturnValue) == 0x0000C8, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x0000D4, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Less_FloatFloat_ReturnValue) == 0x00015C, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_IsOn_bIsOn) == 0x00015D, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_IsOn_bIsOn' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_BooleanAND_ReturnValue) == 0x00015E, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00015F, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000160, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_Add_FloatFloat_ReturnValue) == 0x000164, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan, CallFunc_FMin_ReturnValue) == 0x000168, "Member 'BP_CeilingFan_C_ExecuteUbergraph_BP_CeilingFan::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_CeilingFan.BP_CeilingFan_C.BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'BP_CeilingFan_C_BndEvt__BP_CeilingFan_Blades_SM_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_CeilingFan.BP_CeilingFan_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CeilingFan_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CeilingFan_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CeilingFan_C_ReceiveTick");
static_assert(sizeof(BP_CeilingFan_C_ReceiveTick) == 0x000004, "Wrong size on BP_CeilingFan_C_ReceiveTick");
static_assert(offsetof(BP_CeilingFan_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CeilingFan_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

