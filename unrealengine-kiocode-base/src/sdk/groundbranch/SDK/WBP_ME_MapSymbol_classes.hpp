#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ME_MapSymbol

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ME_MapSymbol.WBP_ME_MapSymbol_C
// 0x01D8 (0x0438 - 0x0260)
class UWBP_ME_MapSymbol_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimateSelected;                                   // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeIn;                                            // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	struct FGBMapMarker                           MapMarkerInfo;                                     // 0x0278(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          bUsesText;                                         // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconRef;                                           // 0x0330(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         MapWidgetIndex;                                    // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_ME_MapAnnotator_C*                 MapAnnotatorWidgetRef;                             // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDragging;                                         // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseDownStartTime;                                // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClicked;                                          // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               ParentOverlayRef;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDoFadeIn;                                         // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           NormalColour;                                      // 0x0384(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FailedColour;                                      // 0x0394(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CompletedColour;                                   // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InactiveColour;                                    // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGBMissionObjectiveStatus                     LastStatusUpdate;                                  // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MapZoom;                                           // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MapTranslation;                                    // 0x03CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGBMapMarker& MapMarkerInfo, int32 MapWidgetIndex)> OnHoveredStart; // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 MapWidgetIndex)> OnHoveredEnd;                               // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UImage*                                 Hovered_Image_Ref;                                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TooltipTimerHandle;                                // 0x0400(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 ObjectiveTitle;                                    // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   HotspotCodename;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MissionSequenceNo;                                 // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsPrimaryObjective;                               // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bShowOnTablet;                                     // 0x0425(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bShowOnOpsBoard;                                   // 0x0426(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTooltipOnOpsBoard;                                // 0x0427(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bShowOnCampaignMap;                                // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTooltipOnCampaignMap;                             // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bFloatIsImageIndex;                                // 0x042A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsOnOpsBoard;                                     // 0x042B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsOnCampaignMap;                                  // 0x042C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsOnTablet;                                       // 0x042D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42E[0x2];                                      // 0x042E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseScale;                                         // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleOverride;                                     // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void MakeMissionObjectiveTooltip(const class FText& TooltipTitle, class UImage* HoveredImageRef, const class FText& OptionalText, class UTexture2D* OptionalImage, class UUserWidget** CreatedWidget);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void Construct();
	void PositionSelf(class UOverlay* ParentOverlay);
	void BindDragDropOperation(class UDragDropOperation* DragDropOp);
	void OnDragged(class UDragDropOperation* Operation);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnPropertiesUpdated();
	void SetSelected(bool bIsSelected);
	void UpdateParentWidget();
	void CheckObjectiveStatusChangeTimer();
	void SetupObjectiveStatusChangeTimer();
	void OnMissionObjectiveStatusUpdate();
	void StartTooltipTimer();
	void TooltipTimer();
	void NotifyHoveredEnded();
	void NotifyHoveredStarted();
	void SetNewScale(float NewScale);
	void UpdateScaling();
	void ExecuteUbergraph_WBP_ME_MapSymbol(int32 EntryPoint);

	bool IsInteractable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ME_MapSymbol_C">();
	}
	static class UWBP_ME_MapSymbol_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ME_MapSymbol_C>();
	}
};
static_assert(alignof(UWBP_ME_MapSymbol_C) == 0x000008, "Wrong alignment on UWBP_ME_MapSymbol_C");
static_assert(sizeof(UWBP_ME_MapSymbol_C) == 0x000438, "Wrong size on UWBP_ME_MapSymbol_C");
static_assert(offsetof(UWBP_ME_MapSymbol_C, UberGraphFrame) == 0x000260, "Member 'UWBP_ME_MapSymbol_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, AnimateSelected) == 0x000268, "Member 'UWBP_ME_MapSymbol_C::AnimateSelected' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, FadeIn) == 0x000270, "Member 'UWBP_ME_MapSymbol_C::FadeIn' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MapMarkerInfo) == 0x000278, "Member 'UWBP_ME_MapSymbol_C::MapMarkerInfo' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bUsesText) == 0x000328, "Member 'UWBP_ME_MapSymbol_C::bUsesText' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, IconRef) == 0x000330, "Member 'UWBP_ME_MapSymbol_C::IconRef' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MapWidgetIndex) == 0x000358, "Member 'UWBP_ME_MapSymbol_C::MapWidgetIndex' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MapAnnotatorWidgetRef) == 0x000360, "Member 'UWBP_ME_MapSymbol_C::MapAnnotatorWidgetRef' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bDragging) == 0x000368, "Member 'UWBP_ME_MapSymbol_C::bDragging' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MouseDownStartTime) == 0x00036C, "Member 'UWBP_ME_MapSymbol_C::MouseDownStartTime' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bClicked) == 0x000370, "Member 'UWBP_ME_MapSymbol_C::bClicked' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, ParentOverlayRef) == 0x000378, "Member 'UWBP_ME_MapSymbol_C::ParentOverlayRef' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bDoFadeIn) == 0x000380, "Member 'UWBP_ME_MapSymbol_C::bDoFadeIn' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, NormalColour) == 0x000384, "Member 'UWBP_ME_MapSymbol_C::NormalColour' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, FailedColour) == 0x000394, "Member 'UWBP_ME_MapSymbol_C::FailedColour' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, CompletedColour) == 0x0003A4, "Member 'UWBP_ME_MapSymbol_C::CompletedColour' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, InactiveColour) == 0x0003B4, "Member 'UWBP_ME_MapSymbol_C::InactiveColour' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, LastStatusUpdate) == 0x0003C4, "Member 'UWBP_ME_MapSymbol_C::LastStatusUpdate' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MapZoom) == 0x0003C8, "Member 'UWBP_ME_MapSymbol_C::MapZoom' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MapTranslation) == 0x0003CC, "Member 'UWBP_ME_MapSymbol_C::MapTranslation' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, OnHoveredStart) == 0x0003D8, "Member 'UWBP_ME_MapSymbol_C::OnHoveredStart' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, OnHoveredEnd) == 0x0003E8, "Member 'UWBP_ME_MapSymbol_C::OnHoveredEnd' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, Hovered_Image_Ref) == 0x0003F8, "Member 'UWBP_ME_MapSymbol_C::Hovered_Image_Ref' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, TooltipTimerHandle) == 0x000400, "Member 'UWBP_ME_MapSymbol_C::TooltipTimerHandle' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, ObjectiveTitle) == 0x000408, "Member 'UWBP_ME_MapSymbol_C::ObjectiveTitle' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, HotspotCodename) == 0x000418, "Member 'UWBP_ME_MapSymbol_C::HotspotCodename' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, MissionSequenceNo) == 0x000420, "Member 'UWBP_ME_MapSymbol_C::MissionSequenceNo' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bIsPrimaryObjective) == 0x000424, "Member 'UWBP_ME_MapSymbol_C::bIsPrimaryObjective' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bShowOnTablet) == 0x000425, "Member 'UWBP_ME_MapSymbol_C::bShowOnTablet' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bShowOnOpsBoard) == 0x000426, "Member 'UWBP_ME_MapSymbol_C::bShowOnOpsBoard' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bTooltipOnOpsBoard) == 0x000427, "Member 'UWBP_ME_MapSymbol_C::bTooltipOnOpsBoard' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bShowOnCampaignMap) == 0x000428, "Member 'UWBP_ME_MapSymbol_C::bShowOnCampaignMap' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bTooltipOnCampaignMap) == 0x000429, "Member 'UWBP_ME_MapSymbol_C::bTooltipOnCampaignMap' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bFloatIsImageIndex) == 0x00042A, "Member 'UWBP_ME_MapSymbol_C::bFloatIsImageIndex' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bIsOnOpsBoard) == 0x00042B, "Member 'UWBP_ME_MapSymbol_C::bIsOnOpsBoard' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bIsOnCampaignMap) == 0x00042C, "Member 'UWBP_ME_MapSymbol_C::bIsOnCampaignMap' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, bIsOnTablet) == 0x00042D, "Member 'UWBP_ME_MapSymbol_C::bIsOnTablet' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, BaseScale) == 0x000430, "Member 'UWBP_ME_MapSymbol_C::BaseScale' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapSymbol_C, ScaleOverride) == 0x000434, "Member 'UWBP_ME_MapSymbol_C::ScaleOverride' has a wrong offset!");

}

