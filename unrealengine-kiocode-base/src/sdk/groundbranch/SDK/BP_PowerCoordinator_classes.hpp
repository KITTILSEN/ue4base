#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PowerCoordinator

#include "Basic.hpp"

#include "EGBPowerSourceStatus_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PowerCoordinator.BP_PowerCoordinator_C
// 0x0080 (0x02A0 - 0x0220)
class ABP_PowerCoordinator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   PowerGroup;                                        // 0x0230(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EGBPowerSourceStatus                          SharedPowerSourceStatus;                           // 0x0238(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UBP_PowerSourceComponent_C*, EGBPowerSourceStatus> PowerSourceStatusMap;              // 0x0240(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMulticastInlineDelegate<void(EGBPowerSourceStatus InSharedPowerSourceStatus)> OnSharedPowerSourceStatusChanged; // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_PowerCoordinator(int32 EntryPoint);
	void OnPowerSourceStatucChanged_Event_0(class UBP_PowerSourceComponent_C* InPowerSourceComp);
	void ClientAssociatedWithGroup();
	void ReceiveBeginPlay();
	void BindPowerSourceComponent(class UBP_PowerSourceComponent_C* InPowerSourceComp);
	void InernalClientAssociatedWithGroup();
	void UpdatePowerSourceStatus(class UBP_PowerSourceComponent_C* InPowerSource);
	void OnRep_SharedPowerSourceStatus();

	void GetSharedPowerSourceStatus(EGBPowerSourceStatus* PowerSourceStatus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PowerCoordinator_C">();
	}
	static class ABP_PowerCoordinator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PowerCoordinator_C>();
	}
};
static_assert(alignof(ABP_PowerCoordinator_C) == 0x000008, "Wrong alignment on ABP_PowerCoordinator_C");
static_assert(sizeof(ABP_PowerCoordinator_C) == 0x0002A0, "Wrong size on ABP_PowerCoordinator_C");
static_assert(offsetof(ABP_PowerCoordinator_C, UberGraphFrame) == 0x000220, "Member 'ABP_PowerCoordinator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PowerCoordinator_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_PowerCoordinator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PowerCoordinator_C, PowerGroup) == 0x000230, "Member 'ABP_PowerCoordinator_C::PowerGroup' has a wrong offset!");
static_assert(offsetof(ABP_PowerCoordinator_C, SharedPowerSourceStatus) == 0x000238, "Member 'ABP_PowerCoordinator_C::SharedPowerSourceStatus' has a wrong offset!");
static_assert(offsetof(ABP_PowerCoordinator_C, PowerSourceStatusMap) == 0x000240, "Member 'ABP_PowerCoordinator_C::PowerSourceStatusMap' has a wrong offset!");
static_assert(offsetof(ABP_PowerCoordinator_C, OnSharedPowerSourceStatusChanged) == 0x000290, "Member 'ABP_PowerCoordinator_C::OnSharedPowerSourceStatusChanged' has a wrong offset!");

}

