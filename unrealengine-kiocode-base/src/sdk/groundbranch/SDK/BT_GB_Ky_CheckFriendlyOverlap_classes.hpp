#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BT_GB_Ky_CheckFriendlyOverlap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "KytheraPlugin_structs.hpp"
#include "KytheraPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BT_GB_Ky_CheckFriendlyOverlap.BT_GB_Ky_CheckFriendlyOverlap_C
// 0x0018 (0x0040 - 0x0028)
class UBT_GB_Ky_CheckFriendlyOverlap_C final : public UKytBTNode
{
public:
	class AKytController*                         Controller;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasOverlap;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	EKytBTEnterResult DoEnter(class AKytController* Controller_0, class UKytBlackboard* BehaviorBlackboard);
	void CheckOverlap();
	EKytBTUpdateResult DoUpdate(class AKytController* Controller_0, class UKytBlackboard* BehaviorBlackboard);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BT_GB_Ky_CheckFriendlyOverlap_C">();
	}
	static class UBT_GB_Ky_CheckFriendlyOverlap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBT_GB_Ky_CheckFriendlyOverlap_C>();
	}
};
static_assert(alignof(UBT_GB_Ky_CheckFriendlyOverlap_C) == 0x000008, "Wrong alignment on UBT_GB_Ky_CheckFriendlyOverlap_C");
static_assert(sizeof(UBT_GB_Ky_CheckFriendlyOverlap_C) == 0x000040, "Wrong size on UBT_GB_Ky_CheckFriendlyOverlap_C");
static_assert(offsetof(UBT_GB_Ky_CheckFriendlyOverlap_C, Controller) == 0x000028, "Member 'UBT_GB_Ky_CheckFriendlyOverlap_C::Controller' has a wrong offset!");
static_assert(offsetof(UBT_GB_Ky_CheckFriendlyOverlap_C, bHasOverlap) == 0x000030, "Member 'UBT_GB_Ky_CheckFriendlyOverlap_C::bHasOverlap' has a wrong offset!");
static_assert(offsetof(UBT_GB_Ky_CheckFriendlyOverlap_C, Timer) == 0x000038, "Member 'UBT_GB_Ky_CheckFriendlyOverlap_C::Timer' has a wrong offset!");

}

