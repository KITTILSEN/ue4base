#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollidingWaterVolume_Master

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CollidingWaterVolume_Master.BP_CollidingWaterVolume_Master_C
// 0x00B0 (0x02D0 - 0x0220)
class ABP_CollidingWaterVolume_Master_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  UnderwaterPostProcess;                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          WaterCollision;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WaterSurface;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterVolumeSize;                                   // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     UnderwaterPostProcessMaterial;                     // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WaterSurfaceMesh;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     WaterSurfaceMaterial;                              // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NVGWasDeployed;                                    // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBreathDuration;                                 // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreathStartEffectsTime;                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BreathFinishTimer;                                 // 0x0278(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HeartBeatInterval;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionVolumeOffset;                             // 0x0284(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionVolumeScale;                              // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AssociatedWaterSurface;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Event_ProneIntoWater;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Event_ProneOutOfWater;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Event_GaspForAir;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UnderwaterTag;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ForceRaiseNightVisionGogglesTag;                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CollidingWaterVolume_Master(int32 EntryPoint);
	void SetAssociatedWaterSurfaceVis(bool bNewVisible);
	void RemoveShared();
	void K2_OnReset();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ApplyOrDisapplyUnderwaterEffects(class ABP_Character_C* BP_Character, bool bSpectating);
	void UnapplyUnderwaterClientFX();
	void ApplyUnderwaterClientFX(bool bSpectating);
	void ApplyUnderwaterSoundFilter();
	void RemoveUnderwaterSoundFilter();
	void ReceiveTick(float DeltaSeconds);
	void ClearBreathEffects();
	void SetDrownEffectAmount(float EffectAmount);
	void BreathTimerFinishEvent();
	void InitBreathEffects();
	void SetupSoundLeftWater();
	void SetupSoundEnteredWater();
	void ActivateUnderwaterPostProcess(bool bEnabled);
	void BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_CollidingWaterVolume_WaterExtent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CollidingWaterVolume_Master_C">();
	}
	static class ABP_CollidingWaterVolume_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CollidingWaterVolume_Master_C>();
	}
};
static_assert(alignof(ABP_CollidingWaterVolume_Master_C) == 0x000008, "Wrong alignment on ABP_CollidingWaterVolume_Master_C");
static_assert(sizeof(ABP_CollidingWaterVolume_Master_C) == 0x0002D0, "Wrong size on ABP_CollidingWaterVolume_Master_C");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, UberGraphFrame) == 0x000220, "Member 'ABP_CollidingWaterVolume_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, UnderwaterPostProcess) == 0x000228, "Member 'ABP_CollidingWaterVolume_Master_C::UnderwaterPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, WaterCollision) == 0x000230, "Member 'ABP_CollidingWaterVolume_Master_C::WaterCollision' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, WaterSurface) == 0x000238, "Member 'ABP_CollidingWaterVolume_Master_C::WaterSurface' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, WaterVolumeSize) == 0x000240, "Member 'ABP_CollidingWaterVolume_Master_C::WaterVolumeSize' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, UnderwaterPostProcessMaterial) == 0x000250, "Member 'ABP_CollidingWaterVolume_Master_C::UnderwaterPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, WaterSurfaceMesh) == 0x000258, "Member 'ABP_CollidingWaterVolume_Master_C::WaterSurfaceMesh' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, WaterSurfaceMaterial) == 0x000260, "Member 'ABP_CollidingWaterVolume_Master_C::WaterSurfaceMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, NVGWasDeployed) == 0x000268, "Member 'ABP_CollidingWaterVolume_Master_C::NVGWasDeployed' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, MaxBreathDuration) == 0x00026C, "Member 'ABP_CollidingWaterVolume_Master_C::MaxBreathDuration' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, BreathStartEffectsTime) == 0x000270, "Member 'ABP_CollidingWaterVolume_Master_C::BreathStartEffectsTime' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, BreathFinishTimer) == 0x000278, "Member 'ABP_CollidingWaterVolume_Master_C::BreathFinishTimer' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, HeartBeatInterval) == 0x000280, "Member 'ABP_CollidingWaterVolume_Master_C::HeartBeatInterval' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, CollisionVolumeOffset) == 0x000284, "Member 'ABP_CollidingWaterVolume_Master_C::CollisionVolumeOffset' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, CollisionVolumeScale) == 0x000290, "Member 'ABP_CollidingWaterVolume_Master_C::CollisionVolumeScale' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, AssociatedWaterSurface) == 0x0002A0, "Member 'ABP_CollidingWaterVolume_Master_C::AssociatedWaterSurface' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, Event_ProneIntoWater) == 0x0002A8, "Member 'ABP_CollidingWaterVolume_Master_C::Event_ProneIntoWater' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, Event_ProneOutOfWater) == 0x0002B0, "Member 'ABP_CollidingWaterVolume_Master_C::Event_ProneOutOfWater' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, Event_GaspForAir) == 0x0002B8, "Member 'ABP_CollidingWaterVolume_Master_C::Event_GaspForAir' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, UnderwaterTag) == 0x0002C0, "Member 'ABP_CollidingWaterVolume_Master_C::UnderwaterTag' has a wrong offset!");
static_assert(offsetof(ABP_CollidingWaterVolume_Master_C, ForceRaiseNightVisionGogglesTag) == 0x0002C8, "Member 'ABP_CollidingWaterVolume_Master_C::ForceRaiseNightVisionGogglesTag' has a wrong offset!");

}

