#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InGameMap_TeamElement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_InGameMap_TeamElement.WBP_InGameMap_TeamElement_C
// 0x00C0 (0x0320 - 0x0260)
class UWBP_InGameMap_TeamElement_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             ElementName;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_1;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_1;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TeamElementIcon;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Players;                               // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamElement                                  TeamElement;                                       // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_292[0x2];                                      // 0x0292(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PlayerColour;                                      // 0x0294(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TeammateColour;                                    // 0x02A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETeamElement, TSoftObjectPtr<class UTexture2D>> TeamElementIcons;                           // 0x02B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWBP_InGameMap_PlayerName_C*>    Entries;                                           // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         DisplayDurationPlayerName;                         // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayDurationCallSign;                           // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_InGameMap_TeamElement(int32 EntryPoint);
	void DisplayPlayerNames();
	void DisplayCallSigns();
	void Construct();
	void TickStyleEvent();
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void FindOrCreatePlayerEntry(class AGBPlayerState* InGBPlayerState, class UWBP_InGameMap_PlayerName_C** OutPlayerInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_InGameMap_TeamElement_C">();
	}
	static class UWBP_InGameMap_TeamElement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_InGameMap_TeamElement_C>();
	}
};
static_assert(alignof(UWBP_InGameMap_TeamElement_C) == 0x000008, "Wrong alignment on UWBP_InGameMap_TeamElement_C");
static_assert(sizeof(UWBP_InGameMap_TeamElement_C) == 0x000320, "Wrong size on UWBP_InGameMap_TeamElement_C");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, UberGraphFrame) == 0x000260, "Member 'UWBP_InGameMap_TeamElement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, ElementName) == 0x000268, "Member 'UWBP_InGameMap_TeamElement_C::ElementName' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, HorizontalBox_1) == 0x000270, "Member 'UWBP_InGameMap_TeamElement_C::HorizontalBox_1' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, SizeBox_1) == 0x000278, "Member 'UWBP_InGameMap_TeamElement_C::SizeBox_1' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, TeamElementIcon) == 0x000280, "Member 'UWBP_InGameMap_TeamElement_C::TeamElementIcon' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, VerticalBox_Players) == 0x000288, "Member 'UWBP_InGameMap_TeamElement_C::VerticalBox_Players' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, TeamId) == 0x000290, "Member 'UWBP_InGameMap_TeamElement_C::TeamId' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, TeamElement) == 0x000291, "Member 'UWBP_InGameMap_TeamElement_C::TeamElement' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, PlayerColour) == 0x000294, "Member 'UWBP_InGameMap_TeamElement_C::PlayerColour' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, TeammateColour) == 0x0002A4, "Member 'UWBP_InGameMap_TeamElement_C::TeammateColour' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, TeamElementIcons) == 0x0002B8, "Member 'UWBP_InGameMap_TeamElement_C::TeamElementIcons' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, Entries) == 0x000308, "Member 'UWBP_InGameMap_TeamElement_C::Entries' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, DisplayDurationPlayerName) == 0x000318, "Member 'UWBP_InGameMap_TeamElement_C::DisplayDurationPlayerName' has a wrong offset!");
static_assert(offsetof(UWBP_InGameMap_TeamElement_C, DisplayDurationCallSign) == 0x00031C, "Member 'UWBP_InGameMap_TeamElement_C::DisplayDurationCallSign' has a wrong offset!");

}

