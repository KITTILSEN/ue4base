#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DBAL_PL

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DBAL_PL.BP_DBAL_PL_C
// 0x0070 (0x04E8 - 0x0478)
class ABP_DBAL_PL_C final : public AGBRailAttachment
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GBItemFlashLightComponent_C*        IlluminatorSpotLight;                              // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GBItemFlashLightComponent_C*        FlashLightComp;                                    // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_LensFlare_Torch;                                // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GBItemBeamComponent_C*              Laser;                                             // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GBItemBeamComponent_C*              IRLaser;                                           // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DBAL_PL;                                           // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   IR;                                                // 0x04B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   VIS;                                               // 0x04C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               LghtMID;                                           // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DBAL_PL(int32 EntryPoint);
	void CreateMIDsEvent();
	void BndEvt__BP_DBAL_PL_IlluminatorSpotLight_K2Node_ComponentBoundEvent_1_OnLightUpdate__DelegateSignature(bool bLightActive, bool bLightVisibility);
	void BndEvt__BP_DBAL_PL_FlashLightComp_K2Node_ComponentBoundEvent_0_OnLightUpdate__DelegateSignature(bool bLightActive, bool bLightVisibility);
	void OnBeingUnequipped();
	void AddIR(class UUserWidget* UsageMenu);
	void OnSelected_IR_Event(int32 Index_0);
	void AddVIS(class UUserWidget* UsageMenu);
	void OnSelected_VIS_Event(int32 Index_0);
	void OnBeingEquipped();
	void OnRemovedFromInventoryEvent(class AGBCharacter* Character);
	void OnAddedToInventoryEvent(class AGBCharacter* Character);
	void AddAttachedUseMenuEntries(class UUserWidget* UsageMenu);
	bool AllowUsageWhileAttached();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DBAL_PL_C">();
	}
	static class ABP_DBAL_PL_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DBAL_PL_C>();
	}
};
static_assert(alignof(ABP_DBAL_PL_C) == 0x000008, "Wrong alignment on ABP_DBAL_PL_C");
static_assert(sizeof(ABP_DBAL_PL_C) == 0x0004E8, "Wrong size on ABP_DBAL_PL_C");
static_assert(offsetof(ABP_DBAL_PL_C, UberGraphFrame) == 0x000478, "Member 'ABP_DBAL_PL_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, IlluminatorSpotLight) == 0x000480, "Member 'ABP_DBAL_PL_C::IlluminatorSpotLight' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, FlashLightComp) == 0x000488, "Member 'ABP_DBAL_PL_C::FlashLightComp' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, NS_LensFlare_Torch) == 0x000490, "Member 'ABP_DBAL_PL_C::NS_LensFlare_Torch' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, Laser) == 0x000498, "Member 'ABP_DBAL_PL_C::Laser' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, IRLaser) == 0x0004A0, "Member 'ABP_DBAL_PL_C::IRLaser' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, DBAL_PL) == 0x0004A8, "Member 'ABP_DBAL_PL_C::DBAL_PL' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, IR) == 0x0004B0, "Member 'ABP_DBAL_PL_C::IR' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, VIS) == 0x0004C8, "Member 'ABP_DBAL_PL_C::VIS' has a wrong offset!");
static_assert(offsetof(ABP_DBAL_PL_C, LghtMID) == 0x0004E0, "Member 'ABP_DBAL_PL_C::LghtMID' has a wrong offset!");

}

