#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBSteamworks

#include "Basic.hpp"

#include "RBSteamworks_classes.hpp"
#include "RBSteamworks_parameters.hpp"


namespace SDK
{

// Function RBSteamworks.RBQueryServer.CancelRequestServerDetails
// (Final, Native, Public, BlueprintCallable)

void URBQueryServer::CancelRequestServerDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBQueryServer", "CancelRequestServerDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBQueryServer.CheckForQueryResponse
// (Final, Native, Protected)

void URBQueryServer::CheckForQueryResponse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBQueryServer", "CheckForQueryResponse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBQueryServer.RequestServerDetails
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FServerNetAddress&         ServerNetAddress                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URBQueryServer::RequestServerDetails(const struct FServerNetAddress& ServerNetAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBQueryServer", "RequestServerDetails");

	Params::RBQueryServer_RequestServerDetails Parms{};

	Parms.ServerNetAddress = std::move(ServerNetAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBQueryServer.RequestServerDetailsFromConnectionString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IPConnectionString                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URBQueryServer::RequestServerDetailsFromConnectionString(const class FString& IPConnectionString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBQueryServer", "RequestServerDetailsFromConnectionString");

	Params::RBQueryServer_RequestServerDetailsFromConnectionString Parms{};

	Parms.IPConnectionString = std::move(IPConnectionString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBQueryServer.IsAwaitingQueryResponse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URBQueryServer::IsAwaitingQueryResponse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBQueryServer", "IsAwaitingQueryResponse");

	Params::RBQueryServer_IsAwaitingQueryResponse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBServerList.AddServerToFavourites
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSteamServerDetails&       ServerDetails                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void URBServerList::AddServerToFavourites(const struct FSteamServerDetails& ServerDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "AddServerToFavourites");

	Params::RBServerList_AddServerToFavourites Parms{};

	Parms.ServerDetails = std::move(ServerDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.CancelRequestDetailedServerInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSteamServerDetails&       ServerDetails                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void URBServerList::CancelRequestDetailedServerInfo(const struct FSteamServerDetails& ServerDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "CancelRequestDetailedServerInfo");

	Params::RBServerList_CancelRequestDetailedServerInfo Parms{};

	Parms.ServerDetails = std::move(ServerDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.CancelRequestServerList
// (Final, Native, Public, BlueprintCallable)

void URBServerList::CancelRequestServerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "CancelRequestServerList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.IsServerFavourited
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSteamServerDetails&       ServerDetails                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URBServerList::IsServerFavourited(const struct FSteamServerDetails& ServerDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "IsServerFavourited");

	Params::RBServerList_IsServerFavourited Parms{};

	Parms.ServerDetails = std::move(ServerDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBServerList.ParseQueuedServerList
// (Final, Native, Protected)

void URBServerList::ParseQueuedServerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "ParseQueuedServerList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.RemoveServerFromFavourites
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSteamServerDetails&       ServerDetails                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void URBServerList::RemoveServerFromFavourites(const struct FSteamServerDetails& ServerDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "RemoveServerFromFavourites");

	Params::RBServerList_RemoveServerFromFavourites Parms{};

	Parms.ServerDetails = std::move(ServerDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.RequestDetailedServerInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSteamServerDetails&       ServerDetails                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void URBServerList::RequestDetailedServerInfo(const struct FSteamServerDetails& ServerDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "RequestDetailedServerInfo");

	Params::RBServerList_RequestDetailedServerInfo Parms{};

	Parms.ServerDetails = std::move(ServerDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.RequestServerList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESteamServerType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URBServerList::RequestServerList(ESteamServerType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "RequestServerList");

	Params::RBServerList_RequestServerList Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBServerList.IsRefreshing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URBServerList::IsRefreshing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBServerList", "IsRefreshing");

	Params::RBServerList_IsRefreshing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.CreateRBServerListRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URBServerList*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URBServerList* URBSteamworksFunctionLibrary::CreateRBServerListRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "CreateRBServerListRef");

	Params::RBSteamworksFunctionLibrary_CreateRBServerListRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.CreateRBWebAPIQueryRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URBWebAPIQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URBWebAPIQuery* URBSteamworksFunctionLibrary::CreateRBWebAPIQueryRef(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "CreateRBWebAPIQueryRef");

	Params::RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.GetAppID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URBSteamworksFunctionLibrary::GetAppID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "GetAppID");

	Params::RBSteamworksFunctionLibrary_GetAppID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.GetFileSizeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSteamWebAPIResponse_ModInfo&ModInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URBSteamworksFunctionLibrary::GetFileSizeFloat(const struct FSteamWebAPIResponse_ModInfo& ModInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "GetFileSizeFloat");

	Params::RBSteamworksFunctionLibrary_GetFileSizeFloat Parms{};

	Parms.ModInfo = std::move(ModInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.GetFileSizeString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSteamWebAPIResponse_ModInfo&ModInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URBSteamworksFunctionLibrary::GetFileSizeString(const struct FSteamWebAPIResponse_ModInfo& ModInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "GetFileSizeString");

	Params::RBSteamworksFunctionLibrary_GetFileSizeString Parms{};

	Parms.ModInfo = std::move(ModInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.GetFileSizeStringFromFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   fileSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URBSteamworksFunctionLibrary::GetFileSizeStringFromFloat(float fileSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "GetFileSizeStringFromFloat");

	Params::RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat Parms{};

	Parms.fileSize = fileSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.GetSteamFriendsList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FRBSteamFriendDetails>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FRBSteamFriendDetails> URBSteamworksFunctionLibrary::GetSteamFriendsList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "GetSteamFriendsList");

	Params::RBSteamworksFunctionLibrary_GetSteamFriendsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.InviteUserToGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FRBSteamID&                SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ConnectString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URBSteamworksFunctionLibrary::InviteUserToGame(const struct FRBSteamID& SteamID, const class FString& ConnectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "InviteUserToGame");

	Params::RBSteamworksFunctionLibrary_InviteUserToGame Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.ConnectString = std::move(ConnectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBSteamworksFunctionLibrary.MatchingSteamID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRBSteamID&                A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRBSteamID&                B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URBSteamworksFunctionLibrary::MatchingSteamID(const struct FRBSteamID& A, const struct FRBSteamID& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RBSteamworksFunctionLibrary", "MatchingSteamID");

	Params::RBSteamworksFunctionLibrary_MatchingSteamID Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RBSteamworks.RBWebAPIQuery.ClearModInfoCache
// (Final, Native, Public, BlueprintCallable)

void URBWebAPIQuery::ClearModInfoCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBWebAPIQuery", "ClearModInfoCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBWebAPIQuery.GetModInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            ModIDStrings                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URBWebAPIQuery::GetModInfo(const TArray<class FString>& ModIDStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBWebAPIQuery", "GetModInfo");

	Params::RBWebAPIQuery_GetModInfo Parms{};

	Parms.ModIDStrings = std::move(ModIDStrings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBWebAPIQuery.GetUGCFileDetails
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ModIDString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    WebAPIKey                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AppID                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SteamID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URBWebAPIQuery::GetUGCFileDetails(const class FString& ModIDString, const class FString& WebAPIKey, const int32 AppID, const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBWebAPIQuery", "GetUGCFileDetails");

	Params::RBWebAPIQuery_GetUGCFileDetails Parms{};

	Parms.ModIDString = std::move(ModIDString);
	Parms.WebAPIKey = std::move(WebAPIKey);
	Parms.AppID = AppID;
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBWebAPIQuery.ServerIPLookup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FServerNetAddress&         IPAddress                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URBWebAPIQuery::ServerIPLookup(const struct FServerNetAddress& IPAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBWebAPIQuery", "ServerIPLookup");

	Params::RBWebAPIQuery_ServerIPLookup Parms{};

	Parms.IPAddress = std::move(IPAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RBSteamworks.RBWebAPIQuery.ServerIPLookupFromConnectionString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IPConnectionString                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URBWebAPIQuery::ServerIPLookupFromConnectionString(const class FString& IPConnectionString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RBWebAPIQuery", "ServerIPLookupFromConnectionString");

	Params::RBWebAPIQuery_ServerIPLookupFromConnectionString Parms{};

	Parms.IPConnectionString = std::move(IPConnectionString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

