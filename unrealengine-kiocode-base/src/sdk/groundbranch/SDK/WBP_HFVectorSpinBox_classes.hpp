#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HFVectorSpinBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HFVectorSpinBox.WBP_HFVectorSpinBox_C
// 0x0118 (0x0378 - 0x0260)
class UWBP_HFVectorSpinBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_BadX;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_BadY;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_BadZ;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_X;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Y;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Z;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_X;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_Y;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_Z;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_3;                                       // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_5;                                       // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   XToolTipText;                                      // 0x02C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   YToolTipText;                                      // 0x02D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ZToolTipText;                                      // 0x02F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bBadX;                                             // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadY;                                             // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadZ;                                             // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30B[0x5];                                      // 0x030B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BadText;                                           // 0x0310(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   BadToolTipText;                                    // 0x0328(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(float NewX)>    OnXChanged;                                        // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float NewY)>    OnYChanged;                                        // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float NewZ)>    OnZChanged;                                        // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bBadHoverX;                                        // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadHoverY;                                        // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBadHoverZ;                                        // 0x0372(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	ESlateVisibility GetVisibility_BadZ();
	ESlateVisibility GetVisibility_BadY();
	ESlateVisibility GetVisibility_BadX();
	class FText Get_Border_Z_ToolTipText_0();
	class FText Get_Border_Y_ToolTipText_0();
	class FText Get_Border_X_ToolTipText_0();
	void UpdateFromVector(const struct FVector& Vector);
	void BndEvt__SpinBox_X_K2Node_ComponentBoundEvent_0_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__SpinBox_Y_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__SpinBox_Z_K2Node_ComponentBoundEvent_2_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void ClearBadValues();
	void ExecuteUbergraph_WBP_HFVectorSpinBox(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HFVectorSpinBox_C">();
	}
	static class UWBP_HFVectorSpinBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HFVectorSpinBox_C>();
	}
};
static_assert(alignof(UWBP_HFVectorSpinBox_C) == 0x000008, "Wrong alignment on UWBP_HFVectorSpinBox_C");
static_assert(sizeof(UWBP_HFVectorSpinBox_C) == 0x000378, "Wrong size on UWBP_HFVectorSpinBox_C");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, UberGraphFrame) == 0x000260, "Member 'UWBP_HFVectorSpinBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, Border_BadX) == 0x000268, "Member 'UWBP_HFVectorSpinBox_C::Border_BadX' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, Border_BadY) == 0x000270, "Member 'UWBP_HFVectorSpinBox_C::Border_BadY' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, Border_BadZ) == 0x000278, "Member 'UWBP_HFVectorSpinBox_C::Border_BadZ' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, Border_X) == 0x000280, "Member 'UWBP_HFVectorSpinBox_C::Border_X' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, Border_Y) == 0x000288, "Member 'UWBP_HFVectorSpinBox_C::Border_Y' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, Border_Z) == 0x000290, "Member 'UWBP_HFVectorSpinBox_C::Border_Z' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, SpinBox_X) == 0x000298, "Member 'UWBP_HFVectorSpinBox_C::SpinBox_X' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, SpinBox_Y) == 0x0002A0, "Member 'UWBP_HFVectorSpinBox_C::SpinBox_Y' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, SpinBox_Z) == 0x0002A8, "Member 'UWBP_HFVectorSpinBox_C::SpinBox_Z' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, TextBlock_3) == 0x0002B0, "Member 'UWBP_HFVectorSpinBox_C::TextBlock_3' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, TextBlock_5) == 0x0002B8, "Member 'UWBP_HFVectorSpinBox_C::TextBlock_5' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, XToolTipText) == 0x0002C0, "Member 'UWBP_HFVectorSpinBox_C::XToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, YToolTipText) == 0x0002D8, "Member 'UWBP_HFVectorSpinBox_C::YToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, ZToolTipText) == 0x0002F0, "Member 'UWBP_HFVectorSpinBox_C::ZToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, bBadX) == 0x000308, "Member 'UWBP_HFVectorSpinBox_C::bBadX' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, bBadY) == 0x000309, "Member 'UWBP_HFVectorSpinBox_C::bBadY' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, bBadZ) == 0x00030A, "Member 'UWBP_HFVectorSpinBox_C::bBadZ' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, BadText) == 0x000310, "Member 'UWBP_HFVectorSpinBox_C::BadText' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, BadToolTipText) == 0x000328, "Member 'UWBP_HFVectorSpinBox_C::BadToolTipText' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, OnXChanged) == 0x000340, "Member 'UWBP_HFVectorSpinBox_C::OnXChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, OnYChanged) == 0x000350, "Member 'UWBP_HFVectorSpinBox_C::OnYChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, OnZChanged) == 0x000360, "Member 'UWBP_HFVectorSpinBox_C::OnZChanged' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, bBadHoverX) == 0x000370, "Member 'UWBP_HFVectorSpinBox_C::bBadHoverX' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, bBadHoverY) == 0x000371, "Member 'UWBP_HFVectorSpinBox_C::bBadHoverY' has a wrong offset!");
static_assert(offsetof(UWBP_HFVectorSpinBox_C, bBadHoverZ) == 0x000372, "Member 'UWBP_HFVectorSpinBox_C::bBadHoverZ' has a wrong offset!");

}

