#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AN_PEQ_Master

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AN_PEQ_Master.BP_AN_PEQ_Master_C
// 0x0170 (0x05E8 - 0x0478)
class ABP_AN_PEQ_Master_C : public AGBRailAttachment
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GBItemFlashLightComponent_C*        IlluminatorSpotLight;                              // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_LensFlare_Torch;                                // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GBItemBeamComponent_C*              Laser;                                             // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GBItemBeamComponent_C*              IRLaser;                                           // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PEQSM;                                             // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIlluminatorHigh;                                  // 0x04A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LaserUse;                                          // 0x04B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              LaserUseIcon;                                      // 0x04C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   LaserChangeMode;                                   // 0x04F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              LaserChangeModeIcon;                               // 0x0508(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   Illuminator;                                       // 0x0530(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              IRIlluminatorIcon;                                 // 0x0548(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         IlluminatorBrightness_High;                        // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IlluminatorBrightness_Low;                         // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IlluminatorOuterCone_High;                         // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IlluminatorOuterCone_Low;                          // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IlluminatorInnerCone_High;                         // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IlluminatorInnerCone_Low;                          // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   IluminatorChangeMode;                              // 0x0588(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         IlluminatorAttenuationRadius_High;                 // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IlluminatorAttenuationRadius_Low;                  // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIRMode;                                           // 0x05A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VisibleLaserPortSocketName;                        // 0x05AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   IRLaserPortSocketName;                             // 0x05B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LEDIndicatorMID;                                   // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool bIRMode)>  OnIRModeChanged;                                   // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInstanceDynamic*               LghtMID;                                           // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_PEQLaserModeIndicator_C*           PEQLaserModeIndicator;                             // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AN_PEQ_Master(int32 EntryPoint);
	void CreateMIDsEvent();
	void BndEvt__BP_AN_PEQ_Master_IlluminatorSpotLight_K2Node_ComponentBoundEvent_1_OnLightUpdate__DelegateSignature(bool bLightActive, bool bLightVisibility);
	void RemoveLaserModeIndicatorMaybe();
	void AddLaserModeInidicatorMaybe();
	void OnAddedToInventoryEvent(class AGBCharacter* Character);
	void OnBeingUnequipped();
	void OnSelected_IlluminatorUse_Event(int32 Index_0);
	void AddIlluminatorUseEntry(class UWBP_RadialMenu_C* UsageMenu);
	void OnSelected_LaserUse_Event(int32 Index_0);
	void AddLaserUseEntry(class UWBP_RadialMenu_C* UsageMenu);
	void OnSelected_IlluminatorChangeMode_Event(int32 Index_0);
	void AddIlluminatorChangeModeEntry(class UWBP_RadialMenu_C* UsageMenu);
	void OnSelected_LaserMode_Event(int32 Index_0);
	void AddLaseMode(class UWBP_RadialMenu_C* UsageMenu);
	void OnBeingEquipped();
	void OnRemovedFromInventoryEvent(class AGBCharacter* Character);
	void MulticastSetIlluminatorHigh(bool bIlluminator_High);
	void InternalUpdateIlluminatorStatus();
	void AddAttachedUseMenuEntries(class UUserWidget* UsageMenu);
	void UserConstructionScript();
	bool AllowUsageWhileAttached();
	void GetAreWeADS(bool* WeAreADS);
	void OnRep_bIlluminatorHigh();
	void SetIRMode(bool bNewIRMode);

	void GetIlluminatorActive(bool* OutActive) const;
	void GetIlluminatorHigh(bool* OutHigh) const;
	void GetIRMode(bool* bOutIRMode) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AN_PEQ_Master_C">();
	}
	static class ABP_AN_PEQ_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AN_PEQ_Master_C>();
	}
};
static_assert(alignof(ABP_AN_PEQ_Master_C) == 0x000008, "Wrong alignment on ABP_AN_PEQ_Master_C");
static_assert(sizeof(ABP_AN_PEQ_Master_C) == 0x0005E8, "Wrong size on ABP_AN_PEQ_Master_C");
static_assert(offsetof(ABP_AN_PEQ_Master_C, UberGraphFrame) == 0x000478, "Member 'ABP_AN_PEQ_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorSpotLight) == 0x000480, "Member 'ABP_AN_PEQ_Master_C::IlluminatorSpotLight' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, NS_LensFlare_Torch) == 0x000488, "Member 'ABP_AN_PEQ_Master_C::NS_LensFlare_Torch' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, Laser) == 0x000490, "Member 'ABP_AN_PEQ_Master_C::Laser' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IRLaser) == 0x000498, "Member 'ABP_AN_PEQ_Master_C::IRLaser' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, PEQSM) == 0x0004A0, "Member 'ABP_AN_PEQ_Master_C::PEQSM' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, bIlluminatorHigh) == 0x0004A8, "Member 'ABP_AN_PEQ_Master_C::bIlluminatorHigh' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, LaserUse) == 0x0004B0, "Member 'ABP_AN_PEQ_Master_C::LaserUse' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, LaserUseIcon) == 0x0004C8, "Member 'ABP_AN_PEQ_Master_C::LaserUseIcon' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, LaserChangeMode) == 0x0004F0, "Member 'ABP_AN_PEQ_Master_C::LaserChangeMode' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, LaserChangeModeIcon) == 0x000508, "Member 'ABP_AN_PEQ_Master_C::LaserChangeModeIcon' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, Illuminator) == 0x000530, "Member 'ABP_AN_PEQ_Master_C::Illuminator' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IRIlluminatorIcon) == 0x000548, "Member 'ABP_AN_PEQ_Master_C::IRIlluminatorIcon' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorBrightness_High) == 0x000570, "Member 'ABP_AN_PEQ_Master_C::IlluminatorBrightness_High' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorBrightness_Low) == 0x000574, "Member 'ABP_AN_PEQ_Master_C::IlluminatorBrightness_Low' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorOuterCone_High) == 0x000578, "Member 'ABP_AN_PEQ_Master_C::IlluminatorOuterCone_High' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorOuterCone_Low) == 0x00057C, "Member 'ABP_AN_PEQ_Master_C::IlluminatorOuterCone_Low' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorInnerCone_High) == 0x000580, "Member 'ABP_AN_PEQ_Master_C::IlluminatorInnerCone_High' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorInnerCone_Low) == 0x000584, "Member 'ABP_AN_PEQ_Master_C::IlluminatorInnerCone_Low' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IluminatorChangeMode) == 0x000588, "Member 'ABP_AN_PEQ_Master_C::IluminatorChangeMode' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorAttenuationRadius_High) == 0x0005A0, "Member 'ABP_AN_PEQ_Master_C::IlluminatorAttenuationRadius_High' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IlluminatorAttenuationRadius_Low) == 0x0005A4, "Member 'ABP_AN_PEQ_Master_C::IlluminatorAttenuationRadius_Low' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, bIRMode) == 0x0005A8, "Member 'ABP_AN_PEQ_Master_C::bIRMode' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, VisibleLaserPortSocketName) == 0x0005AC, "Member 'ABP_AN_PEQ_Master_C::VisibleLaserPortSocketName' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, IRLaserPortSocketName) == 0x0005B4, "Member 'ABP_AN_PEQ_Master_C::IRLaserPortSocketName' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, LEDIndicatorMID) == 0x0005C0, "Member 'ABP_AN_PEQ_Master_C::LEDIndicatorMID' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, OnIRModeChanged) == 0x0005C8, "Member 'ABP_AN_PEQ_Master_C::OnIRModeChanged' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, LghtMID) == 0x0005D8, "Member 'ABP_AN_PEQ_Master_C::LghtMID' has a wrong offset!");
static_assert(offsetof(ABP_AN_PEQ_Master_C, PEQLaserModeIndicator) == 0x0005E0, "Member 'ABP_AN_PEQ_Master_C::PEQLaserModeIndicator' has a wrong offset!");

}

