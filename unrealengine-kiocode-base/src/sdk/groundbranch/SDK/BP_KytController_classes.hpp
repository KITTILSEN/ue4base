#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KytController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_KytController_Master_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KytController.BP_KytController_C
// 0x0040 (0x0500 - 0x04C0)
class ABP_KytController_C final : public ABP_KytController_Master_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_KytController_C;                 // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UKytPathFollowingComponent*             KytPathFollowing;                                  // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKytBlackboard*                         CommonBB_0;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GBLadder_C*                         CurrentLadder;                                     // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        MoveGoals;                                         // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           MoveTimer;                                         // 0x04F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_DoorSwinging_Generic_C*             CurrentDoor;                                       // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_KytController(int32 EntryPoint);
	void ReceiveROEChanged(EAIRulesEngage NewROE);
	void ReceiveMoveCommand(const struct FAIMoveCommand& MoveCommand);
	void UseDoor();
	void BndEvt__BP_KytController_KytPathFollowing_K2Node_ComponentBoundEvent_0_KytAnimationEvent__DelegateSignature(const struct FKytAnimRequest& AnimParameters);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveGoCodeChanged(EAIGoCodes NewGoCode);
	void CommandIssued(int32 CommandIdx, class AActor* Commander, const struct FVector& OptLocation, class AActor* OptTargetActor);
	void MoveCommandUpdated(const struct FAIMoveCommand& NextMoveCommand);
	void OnCompleted_435553D6405285B0F762D6B6D71F98E0(class FName NotifyName);
	void OnBlendOut_435553D6405285B0F762D6B6D71F98E0(class FName NotifyName);
	void OnInterrupted_435553D6405285B0F762D6B6D71F98E0(class FName NotifyName);
	void OnNotifyBegin_435553D6405285B0F762D6B6D71F98E0(class FName NotifyName);
	void OnNotifyEnd_435553D6405285B0F762D6B6D71F98E0(class FName NotifyName);
	void GetCommandBlackboard(class UKytBlackboard** BB);
	void CheckUseDoor(bool* bDoorFound);
	void CheckUseLadder(bool* bDoorFound);
	void MoveTowards();
	bool IsAnimationSupported(const class FString& AnimationName, const class UKytBlackboard* AnimationParameters);
	float GetVisibilityModifier(class AGBCharacter* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KytController_C">();
	}
	static class ABP_KytController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KytController_C>();
	}
};
static_assert(alignof(ABP_KytController_C) == 0x000008, "Wrong alignment on ABP_KytController_C");
static_assert(sizeof(ABP_KytController_C) == 0x000500, "Wrong size on ABP_KytController_C");
static_assert(offsetof(ABP_KytController_C, UberGraphFrame_BP_KytController_C) == 0x0004C0, "Member 'ABP_KytController_C::UberGraphFrame_BP_KytController_C' has a wrong offset!");
static_assert(offsetof(ABP_KytController_C, KytPathFollowing) == 0x0004C8, "Member 'ABP_KytController_C::KytPathFollowing' has a wrong offset!");
static_assert(offsetof(ABP_KytController_C, CommonBB_0) == 0x0004D0, "Member 'ABP_KytController_C::CommonBB_0' has a wrong offset!");
static_assert(offsetof(ABP_KytController_C, CurrentLadder) == 0x0004D8, "Member 'ABP_KytController_C::CurrentLadder' has a wrong offset!");
static_assert(offsetof(ABP_KytController_C, MoveGoals) == 0x0004E0, "Member 'ABP_KytController_C::MoveGoals' has a wrong offset!");
static_assert(offsetof(ABP_KytController_C, MoveTimer) == 0x0004F0, "Member 'ABP_KytController_C::MoveTimer' has a wrong offset!");
static_assert(offsetof(ABP_KytController_C, CurrentDoor) == 0x0004F8, "Member 'ABP_KytController_C::CurrentDoor' has a wrong offset!");

}

