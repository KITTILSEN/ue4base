#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerController.BP_PlayerController_C
// 0x0148 (0x0C68 - 0x0B20)
class ABP_PlayerController_C final : public AGBPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B20(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PlayerCommandComponent_C*           BP_PlayerCommandComponent;                         // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_LxrCanvas_C*                        LightDetectorWidget;                               // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FailedKitValidationTitle;                          // 0x0B38(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedKitValidationMessage;                        // 0x0B50(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedKitValidationOkText;                         // 0x0B68(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedKitValidationCancelText;                     // 0x0B80(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedKitValidationOkToolTipText;                  // 0x0B98(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedKitValidationCancelToolTipText;              // 0x0BB0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedJsonTitle;                                   // 0x0BC8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedJsonMessage;                                 // 0x0BE0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedJsonInEditorMessage;                         // 0x0BF8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAlreadyAttemptedRemoveOrReplace;                  // 0x0C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C11[0x7];                                      // 0x0C11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AlreadyAttemptedRemoveOrReplaceTitle;              // 0x0C18(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AlreadyAttemptedRemoveOrReplaceMessage;            // 0x0C30(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_AIControls_C*                      AIRadialMenu;                                      // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGBRadialMenuOption>            Menu_Options;                                      // 0x0C50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BlackOutPP;                                        // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	bool TraceFwd(struct FVector* ImpactPoint, class AActor** HitActor);
	void HasKitWithFailedJson(bool* bOutJsonWasInvalid);
	void ToggleDebugLightDetector();
	void OnLoaded_20127F524F4779842409348BE6B7D46D(TSubclassOf<class UObject> Loaded);
	void OnPreSeamlessTravelEvent();
	void ShowAdminMenuEvent();
	void ShowTransitionScreenEvent(class FName TransitionType);
	void HideTransitionScreenEvent(class UUserWidget* LoadingScreenUserWidget);
	void OnAFKPromptEvent(float ReponseTime);
	void OpenMissionEditorEvent();
	void OnShowWorldPromptEvent(const struct FVector& PromptLocation, class FName Tag, float Duration, const struct FUInt64& ModID);
	void ReceiveBeginPlay();
	void AddEditorDebugMenu();
	void OnFailedKitValidationsUpdateEvent();
	void OnFailedValidationOkClicked_Event(class UWBP_DialogueBox_C* Dialogue);
	void OnFailedValidationCancelClicked_Event();
	void OnInvalidItemsOrSkins();
	void OnFailedJsonOkClicked_Event(class UWBP_DialogueBox_C* Dialogue);
	void OnFailedJson();
	void OnCustomiseOperatorCheatEvent();
	void OnDone_Event_0();
	void OnAlreadyAttemptedRemoveOrReplaceOkClient_Event(class UWBP_DialogueBox_C* Dialogue);
	void OnMissionObjectiveStatusUpdateEvent(const EGBMissionObjectiveStatusUpdateType StatusUpdateType, class AGBMissionObjective* MissionObjective, float FloatParam);
	void ReceivePossess(class APawn* PossessedPawn);
	void ExecuteUbergraph_BP_PlayerController(int32 EntryPoint);

	void RemoveBlackOutEvent(const bool bFadeOut) const;
	void CreateBlackOutEvent(const bool bFadeIn) const;
	void GetFailedKitNames(class FText* OutFailedLoadouts) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_C">();
	}
	static class ABP_PlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_C>();
	}
};
static_assert(alignof(ABP_PlayerController_C) == 0x000008, "Wrong alignment on ABP_PlayerController_C");
static_assert(sizeof(ABP_PlayerController_C) == 0x000C68, "Wrong size on ABP_PlayerController_C");
static_assert(offsetof(ABP_PlayerController_C, UberGraphFrame) == 0x000B20, "Member 'ABP_PlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BP_PlayerCommandComponent) == 0x000B28, "Member 'ABP_PlayerController_C::BP_PlayerCommandComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, LightDetectorWidget) == 0x000B30, "Member 'ABP_PlayerController_C::LightDetectorWidget' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedKitValidationTitle) == 0x000B38, "Member 'ABP_PlayerController_C::FailedKitValidationTitle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedKitValidationMessage) == 0x000B50, "Member 'ABP_PlayerController_C::FailedKitValidationMessage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedKitValidationOkText) == 0x000B68, "Member 'ABP_PlayerController_C::FailedKitValidationOkText' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedKitValidationCancelText) == 0x000B80, "Member 'ABP_PlayerController_C::FailedKitValidationCancelText' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedKitValidationOkToolTipText) == 0x000B98, "Member 'ABP_PlayerController_C::FailedKitValidationOkToolTipText' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedKitValidationCancelToolTipText) == 0x000BB0, "Member 'ABP_PlayerController_C::FailedKitValidationCancelToolTipText' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedJsonTitle) == 0x000BC8, "Member 'ABP_PlayerController_C::FailedJsonTitle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedJsonMessage) == 0x000BE0, "Member 'ABP_PlayerController_C::FailedJsonMessage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, FailedJsonInEditorMessage) == 0x000BF8, "Member 'ABP_PlayerController_C::FailedJsonInEditorMessage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, bAlreadyAttemptedRemoveOrReplace) == 0x000C10, "Member 'ABP_PlayerController_C::bAlreadyAttemptedRemoveOrReplace' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, AlreadyAttemptedRemoveOrReplaceTitle) == 0x000C18, "Member 'ABP_PlayerController_C::AlreadyAttemptedRemoveOrReplaceTitle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, AlreadyAttemptedRemoveOrReplaceMessage) == 0x000C30, "Member 'ABP_PlayerController_C::AlreadyAttemptedRemoveOrReplaceMessage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, AIRadialMenu) == 0x000C48, "Member 'ABP_PlayerController_C::AIRadialMenu' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, Menu_Options) == 0x000C50, "Member 'ABP_PlayerController_C::Menu_Options' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BlackOutPP) == 0x000C60, "Member 'ABP_PlayerController_C::BlackOutPP' has a wrong offset!");

}

