#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CM_HeadCam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CM_HeadCam.CM_HeadCam_C
// 0x05A8 (0x05F0 - 0x0048)
class UCM_HeadCam_C final : public UGBCameraModifier
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FPostProcessSettings                   HeadCamPostProcessSettings;                        // 0x0050(0x0560)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HeadCamFOV;                                        // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CVarUpscalePaniniD;                                // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         HeadCamCameraPaniniValue;                          // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentViewRotation;                               // 0x05CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AngleClamp;                                        // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLeanRoll;                                       // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLeanRoll;                                   // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                LastViewTarget;                                    // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintAddedToCamera(class AGBPlayerCameraManager* GBPlayerCameraManager);
	void BlueprintRemovedFromCamera(class AGBPlayerCameraManager* GBPlayerCameraManager);
	void BlueprintPreApplyCameraModifier(class AGBPlayerCameraManager* GBPlayerCameraManager, float DeltaTime);
	void ExecuteUbergraph_CM_HeadCam(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CM_HeadCam_C">();
	}
	static class UCM_HeadCam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCM_HeadCam_C>();
	}
};
static_assert(alignof(UCM_HeadCam_C) == 0x000010, "Wrong alignment on UCM_HeadCam_C");
static_assert(sizeof(UCM_HeadCam_C) == 0x0005F0, "Wrong size on UCM_HeadCam_C");
static_assert(offsetof(UCM_HeadCam_C, UberGraphFrame) == 0x000048, "Member 'UCM_HeadCam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, HeadCamPostProcessSettings) == 0x000050, "Member 'UCM_HeadCam_C::HeadCamPostProcessSettings' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, HeadCamFOV) == 0x0005B0, "Member 'UCM_HeadCam_C::HeadCamFOV' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, CVarUpscalePaniniD) == 0x0005B8, "Member 'UCM_HeadCam_C::CVarUpscalePaniniD' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, HeadCamCameraPaniniValue) == 0x0005C8, "Member 'UCM_HeadCam_C::HeadCamCameraPaniniValue' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, CurrentViewRotation) == 0x0005CC, "Member 'UCM_HeadCam_C::CurrentViewRotation' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, AngleClamp) == 0x0005D8, "Member 'UCM_HeadCam_C::AngleClamp' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, MaxLeanRoll) == 0x0005DC, "Member 'UCM_HeadCam_C::MaxLeanRoll' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, CurrentLeanRoll) == 0x0005E0, "Member 'UCM_HeadCam_C::CurrentLeanRoll' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, InterpSpeed) == 0x0005E4, "Member 'UCM_HeadCam_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(UCM_HeadCam_C, LastViewTarget) == 0x0005E8, "Member 'UCM_HeadCam_C::LastViewTarget' has a wrong offset!");

}

