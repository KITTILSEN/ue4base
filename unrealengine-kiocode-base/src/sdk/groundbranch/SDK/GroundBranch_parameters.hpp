#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GroundBranch

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "RBZooKeeper_structs.hpp"
#include "ModKit_structs.hpp"
#include "InputCore_structs.hpp"
#include "LuaMachine_structs.hpp"
#include "FMModdingPlugin_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function GroundBranch.GBInvItem.SpawnInvItem
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_SpawnInvItem final
{
public:
	TSubclassOf<class AGBInvItem>                 InvItemClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InvItemOwner;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_SpawnInvItem) == 0x000008, "Wrong alignment on GBInvItem_SpawnInvItem");
static_assert(sizeof(GBInvItem_SpawnInvItem) == 0x000018, "Wrong size on GBInvItem_SpawnInvItem");
static_assert(offsetof(GBInvItem_SpawnInvItem, InvItemClass) == 0x000000, "Member 'GBInvItem_SpawnInvItem::InvItemClass' has a wrong offset!");
static_assert(offsetof(GBInvItem_SpawnInvItem, InvItemOwner) == 0x000008, "Member 'GBInvItem_SpawnInvItem::InvItemOwner' has a wrong offset!");
static_assert(offsetof(GBInvItem_SpawnInvItem, ReturnValue) == 0x000010, "Member 'GBInvItem_SpawnInvItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.AddAttachedUseMenuEntries
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_AddAttachedUseMenuEntries final
{
public:
	class UUserWidget*                            UsageMenu;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_AddAttachedUseMenuEntries) == 0x000008, "Wrong alignment on GBInvItem_AddAttachedUseMenuEntries");
static_assert(sizeof(GBInvItem_AddAttachedUseMenuEntries) == 0x000008, "Wrong size on GBInvItem_AddAttachedUseMenuEntries");
static_assert(offsetof(GBInvItem_AddAttachedUseMenuEntries, UsageMenu) == 0x000000, "Member 'GBInvItem_AddAttachedUseMenuEntries::UsageMenu' has a wrong offset!");

// Function GroundBranch.GBInvItem.AddedToCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_AddedToCharacter final
{
public:
	class AGBCharacter*                           NewParentCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_AddedToCharacter) == 0x000008, "Wrong alignment on GBInvItem_AddedToCharacter");
static_assert(sizeof(GBInvItem_AddedToCharacter) == 0x000008, "Wrong size on GBInvItem_AddedToCharacter");
static_assert(offsetof(GBInvItem_AddedToCharacter, NewParentCharacter) == 0x000000, "Member 'GBInvItem_AddedToCharacter::NewParentCharacter' has a wrong offset!");

// Function GroundBranch.GBInvItem.AddedToItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_AddedToItem final
{
public:
	class AGBInvItem*                             NewParentItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_AddedToItem) == 0x000008, "Wrong alignment on GBInvItem_AddedToItem");
static_assert(sizeof(GBInvItem_AddedToItem) == 0x000008, "Wrong size on GBInvItem_AddedToItem");
static_assert(offsetof(GBInvItem_AddedToItem, NewParentItem) == 0x000000, "Member 'GBInvItem_AddedToItem::NewParentItem' has a wrong offset!");

// Function GroundBranch.GBInvItem.AddNewItemCameraModifier
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_AddNewItemCameraModifier final
{
public:
	TSubclassOf<class UGBItemCameraModifier>      ItemCameraModifierClass;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBItemCameraModifier*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_AddNewItemCameraModifier) == 0x000008, "Wrong alignment on GBInvItem_AddNewItemCameraModifier");
static_assert(sizeof(GBInvItem_AddNewItemCameraModifier) == 0x000010, "Wrong size on GBInvItem_AddNewItemCameraModifier");
static_assert(offsetof(GBInvItem_AddNewItemCameraModifier, ItemCameraModifierClass) == 0x000000, "Member 'GBInvItem_AddNewItemCameraModifier::ItemCameraModifierClass' has a wrong offset!");
static_assert(offsetof(GBInvItem_AddNewItemCameraModifier, ReturnValue) == 0x000008, "Member 'GBInvItem_AddNewItemCameraModifier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.AddToInventory
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_AddToInventory final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_AddToInventory) == 0x000008, "Wrong alignment on GBInvItem_AddToInventory");
static_assert(sizeof(GBInvItem_AddToInventory) == 0x000008, "Wrong size on GBInvItem_AddToInventory");
static_assert(offsetof(GBInvItem_AddToInventory, Character) == 0x000000, "Member 'GBInvItem_AddToInventory::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.AllowUsageWhileAttached
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_AllowUsageWhileAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_AllowUsageWhileAttached) == 0x000001, "Wrong alignment on GBInvItem_AllowUsageWhileAttached");
static_assert(sizeof(GBInvItem_AllowUsageWhileAttached) == 0x000001, "Wrong size on GBInvItem_AllowUsageWhileAttached");
static_assert(offsetof(GBInvItem_AllowUsageWhileAttached, ReturnValue) == 0x000000, "Member 'GBInvItem_AllowUsageWhileAttached::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.ApplyPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_ApplyPlayerSettings final
{
public:
	class UGBPlayerSettings*                      GBPlayerSettings;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_ApplyPlayerSettings) == 0x000008, "Wrong alignment on GBInvItem_ApplyPlayerSettings");
static_assert(sizeof(GBInvItem_ApplyPlayerSettings) == 0x000008, "Wrong size on GBInvItem_ApplyPlayerSettings");
static_assert(offsetof(GBInvItem_ApplyPlayerSettings, GBPlayerSettings) == 0x000000, "Member 'GBInvItem_ApplyPlayerSettings::GBPlayerSettings' has a wrong offset!");

// Function GroundBranch.GBInvItem.BP_AttachItemTo
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_BP_AttachItemTo final
{
public:
	class USceneComponent*                        Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               LocationRule;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               RotationRule;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_BP_AttachItemTo) == 0x000008, "Wrong alignment on GBInvItem_BP_AttachItemTo");
static_assert(sizeof(GBInvItem_BP_AttachItemTo) == 0x000018, "Wrong size on GBInvItem_BP_AttachItemTo");
static_assert(offsetof(GBInvItem_BP_AttachItemTo, Parent) == 0x000000, "Member 'GBInvItem_BP_AttachItemTo::Parent' has a wrong offset!");
static_assert(offsetof(GBInvItem_BP_AttachItemTo, SocketName) == 0x000008, "Member 'GBInvItem_BP_AttachItemTo::SocketName' has a wrong offset!");
static_assert(offsetof(GBInvItem_BP_AttachItemTo, LocationRule) == 0x000010, "Member 'GBInvItem_BP_AttachItemTo::LocationRule' has a wrong offset!");
static_assert(offsetof(GBInvItem_BP_AttachItemTo, RotationRule) == 0x000011, "Member 'GBInvItem_BP_AttachItemTo::RotationRule' has a wrong offset!");
static_assert(offsetof(GBInvItem_BP_AttachItemTo, ReturnValue) == 0x000012, "Member 'GBInvItem_BP_AttachItemTo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.BP_DetachItemFrom
// 0x0002 (0x0002 - 0x0000)
struct GBInvItem_BP_DetachItemFrom final
{
public:
	EDetachmentRule                               LocationRule;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               RotationRule;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_BP_DetachItemFrom) == 0x000001, "Wrong alignment on GBInvItem_BP_DetachItemFrom");
static_assert(sizeof(GBInvItem_BP_DetachItemFrom) == 0x000002, "Wrong size on GBInvItem_BP_DetachItemFrom");
static_assert(offsetof(GBInvItem_BP_DetachItemFrom, LocationRule) == 0x000000, "Member 'GBInvItem_BP_DetachItemFrom::LocationRule' has a wrong offset!");
static_assert(offsetof(GBInvItem_BP_DetachItemFrom, RotationRule) == 0x000001, "Member 'GBInvItem_BP_DetachItemFrom::RotationRule' has a wrong offset!");

// Function GroundBranch.GBInvItem.CanAddChild
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_CanAddChild final
{
public:
	class AGBInvItem*                             PotentialChild;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_CanAddChild) == 0x000008, "Wrong alignment on GBInvItem_CanAddChild");
static_assert(sizeof(GBInvItem_CanAddChild) == 0x000010, "Wrong size on GBInvItem_CanAddChild");
static_assert(offsetof(GBInvItem_CanAddChild, PotentialChild) == 0x000000, "Member 'GBInvItem_CanAddChild::PotentialChild' has a wrong offset!");
static_assert(offsetof(GBInvItem_CanAddChild, ReturnValue) == 0x000008, "Member 'GBInvItem_CanAddChild::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.CanAddToCharacter
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_CanAddToCharacter final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_CanAddToCharacter) == 0x000008, "Wrong alignment on GBInvItem_CanAddToCharacter");
static_assert(sizeof(GBInvItem_CanAddToCharacter) == 0x000010, "Wrong size on GBInvItem_CanAddToCharacter");
static_assert(offsetof(GBInvItem_CanAddToCharacter, Character) == 0x000000, "Member 'GBInvItem_CanAddToCharacter::Character' has a wrong offset!");
static_assert(offsetof(GBInvItem_CanAddToCharacter, ReturnValue) == 0x000008, "Member 'GBInvItem_CanAddToCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.CanBeAddedAsChild
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_CanBeAddedAsChild final
{
public:
	class AGBInvItem*                             PotentialParent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_CanBeAddedAsChild) == 0x000008, "Wrong alignment on GBInvItem_CanBeAddedAsChild");
static_assert(sizeof(GBInvItem_CanBeAddedAsChild) == 0x000010, "Wrong size on GBInvItem_CanBeAddedAsChild");
static_assert(offsetof(GBInvItem_CanBeAddedAsChild, PotentialParent) == 0x000000, "Member 'GBInvItem_CanBeAddedAsChild::PotentialParent' has a wrong offset!");
static_assert(offsetof(GBInvItem_CanBeAddedAsChild, ReturnValue) == 0x000008, "Member 'GBInvItem_CanBeAddedAsChild::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.ChangeOwnerOnlyRelevancy
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_ChangeOwnerOnlyRelevancy final
{
public:
	bool                                          bOnlyOwner;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_ChangeOwnerOnlyRelevancy) == 0x000001, "Wrong alignment on GBInvItem_ChangeOwnerOnlyRelevancy");
static_assert(sizeof(GBInvItem_ChangeOwnerOnlyRelevancy) == 0x000001, "Wrong size on GBInvItem_ChangeOwnerOnlyRelevancy");
static_assert(offsetof(GBInvItem_ChangeOwnerOnlyRelevancy, bOnlyOwner) == 0x000000, "Member 'GBInvItem_ChangeOwnerOnlyRelevancy::bOnlyOwner' has a wrong offset!");

// Function GroundBranch.GBInvItem.CharacterDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_CharacterDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_CharacterDestroyed) == 0x000008, "Wrong alignment on GBInvItem_CharacterDestroyed");
static_assert(sizeof(GBInvItem_CharacterDestroyed) == 0x000008, "Wrong size on GBInvItem_CharacterDestroyed");
static_assert(offsetof(GBInvItem_CharacterDestroyed, DestroyedActor) == 0x000000, "Member 'GBInvItem_CharacterDestroyed::DestroyedActor' has a wrong offset!");

// Function GroundBranch.GBInvItem.ClientAddToInventory
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_ClientAddToInventory final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_ClientAddToInventory) == 0x000008, "Wrong alignment on GBInvItem_ClientAddToInventory");
static_assert(sizeof(GBInvItem_ClientAddToInventory) == 0x000008, "Wrong size on GBInvItem_ClientAddToInventory");
static_assert(offsetof(GBInvItem_ClientAddToInventory, Character) == 0x000000, "Member 'GBInvItem_ClientAddToInventory::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.ClientRemoveFromInventory
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_ClientRemoveFromInventory final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_ClientRemoveFromInventory) == 0x000008, "Wrong alignment on GBInvItem_ClientRemoveFromInventory");
static_assert(sizeof(GBInvItem_ClientRemoveFromInventory) == 0x000008, "Wrong size on GBInvItem_ClientRemoveFromInventory");
static_assert(offsetof(GBInvItem_ClientRemoveFromInventory, Character) == 0x000000, "Member 'GBInvItem_ClientRemoveFromInventory::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.CreateClientsideProxy
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_CreateClientsideProxy final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_CreateClientsideProxy) == 0x000008, "Wrong alignment on GBInvItem_CreateClientsideProxy");
static_assert(sizeof(GBInvItem_CreateClientsideProxy) == 0x000008, "Wrong size on GBInvItem_CreateClientsideProxy");
static_assert(offsetof(GBInvItem_CreateClientsideProxy, ReturnValue) == 0x000000, "Member 'GBInvItem_CreateClientsideProxy::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.DecodeKit
// 0x0028 (0x0028 - 0x0000)
struct GBInvItem_DecodeKit final
{
public:
	class UVaRestJsonObject*                      ItemAsJson;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DecodedOwner;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             DecodedParentItem;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_DecodeKit) == 0x000008, "Wrong alignment on GBInvItem_DecodeKit");
static_assert(sizeof(GBInvItem_DecodeKit) == 0x000028, "Wrong size on GBInvItem_DecodeKit");
static_assert(offsetof(GBInvItem_DecodeKit, ItemAsJson) == 0x000000, "Member 'GBInvItem_DecodeKit::ItemAsJson' has a wrong offset!");
static_assert(offsetof(GBInvItem_DecodeKit, DecodedOwner) == 0x000008, "Member 'GBInvItem_DecodeKit::DecodedOwner' has a wrong offset!");
static_assert(offsetof(GBInvItem_DecodeKit, DecodedParentItem) == 0x000010, "Member 'GBInvItem_DecodeKit::DecodedParentItem' has a wrong offset!");
static_assert(offsetof(GBInvItem_DecodeKit, ProfileName) == 0x000018, "Member 'GBInvItem_DecodeKit::ProfileName' has a wrong offset!");
static_assert(offsetof(GBInvItem_DecodeKit, ReturnValue) == 0x000020, "Member 'GBInvItem_DecodeKit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.DenyDrop
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_DenyDrop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_DenyDrop) == 0x000001, "Wrong alignment on GBInvItem_DenyDrop");
static_assert(sizeof(GBInvItem_DenyDrop) == 0x000001, "Wrong size on GBInvItem_DenyDrop");
static_assert(offsetof(GBInvItem_DenyDrop, ReturnValue) == 0x000000, "Member 'GBInvItem_DenyDrop::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.DenyUnequip
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_DenyUnequip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_DenyUnequip) == 0x000001, "Wrong alignment on GBInvItem_DenyUnequip");
static_assert(sizeof(GBInvItem_DenyUnequip) == 0x000001, "Wrong size on GBInvItem_DenyUnequip");
static_assert(offsetof(GBInvItem_DenyUnequip, ReturnValue) == 0x000000, "Member 'GBInvItem_DenyUnequip::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.DoDropFrom
// 0x0038 (0x0038 - 0x0000)
struct GBInvItem_DoDropFrom final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InVelocity;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InAngularVelocity;                                 // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBDroppedInvItem*                      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_DoDropFrom) == 0x000008, "Wrong alignment on GBInvItem_DoDropFrom");
static_assert(sizeof(GBInvItem_DoDropFrom) == 0x000038, "Wrong size on GBInvItem_DoDropFrom");
static_assert(offsetof(GBInvItem_DoDropFrom, InLocation) == 0x000000, "Member 'GBInvItem_DoDropFrom::InLocation' has a wrong offset!");
static_assert(offsetof(GBInvItem_DoDropFrom, InRotation) == 0x00000C, "Member 'GBInvItem_DoDropFrom::InRotation' has a wrong offset!");
static_assert(offsetof(GBInvItem_DoDropFrom, InVelocity) == 0x000018, "Member 'GBInvItem_DoDropFrom::InVelocity' has a wrong offset!");
static_assert(offsetof(GBInvItem_DoDropFrom, InAngularVelocity) == 0x000024, "Member 'GBInvItem_DoDropFrom::InAngularVelocity' has a wrong offset!");
static_assert(offsetof(GBInvItem_DoDropFrom, ReturnValue) == 0x000030, "Member 'GBInvItem_DoDropFrom::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.EditItemSetup
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_EditItemSetup final
{
public:
	class AGBCharacter*                           UICharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_EditItemSetup) == 0x000008, "Wrong alignment on GBInvItem_EditItemSetup");
static_assert(sizeof(GBInvItem_EditItemSetup) == 0x000008, "Wrong size on GBInvItem_EditItemSetup");
static_assert(offsetof(GBInvItem_EditItemSetup, UICharacter) == 0x000000, "Member 'GBInvItem_EditItemSetup::UICharacter' has a wrong offset!");

// Function GroundBranch.GBInvItem.EncodeKit
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_EncodeKit final
{
public:
	class UVaRestJsonObject*                      ItemAsJson;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_EncodeKit) == 0x000008, "Wrong alignment on GBInvItem_EncodeKit");
static_assert(sizeof(GBInvItem_EncodeKit) == 0x000008, "Wrong size on GBInvItem_EncodeKit");
static_assert(offsetof(GBInvItem_EncodeKit, ItemAsJson) == 0x000000, "Member 'GBInvItem_EncodeKit::ItemAsJson' has a wrong offset!");

// Function GroundBranch.GBInvItem.FindParentItems
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_FindParentItems final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_FindParentItems) == 0x000008, "Wrong alignment on GBInvItem_FindParentItems");
static_assert(sizeof(GBInvItem_FindParentItems) == 0x000018, "Wrong size on GBInvItem_FindParentItems");
static_assert(offsetof(GBInvItem_FindParentItems, Character) == 0x000000, "Member 'GBInvItem_FindParentItems::Character' has a wrong offset!");
static_assert(offsetof(GBInvItem_FindParentItems, ReturnValue) == 0x000008, "Member 'GBInvItem_FindParentItems::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetChildInvItemsOfClass
// 0x0020 (0x0020 - 0x0000)
struct GBInvItem_GetChildInvItemsOfClass final
{
public:
	TSubclassOf<class AGBInvItem>                 InvItemClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetChildInvItemsOfClass) == 0x000008, "Wrong alignment on GBInvItem_GetChildInvItemsOfClass");
static_assert(sizeof(GBInvItem_GetChildInvItemsOfClass) == 0x000020, "Wrong size on GBInvItem_GetChildInvItemsOfClass");
static_assert(offsetof(GBInvItem_GetChildInvItemsOfClass, InvItemClass) == 0x000000, "Member 'GBInvItem_GetChildInvItemsOfClass::InvItemClass' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsOfClass, bAllChildren) == 0x000008, "Member 'GBInvItem_GetChildInvItemsOfClass::bAllChildren' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsOfClass, ReturnValue) == 0x000010, "Member 'GBInvItem_GetChildInvItemsOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetEquipMontageSection
// 0x0030 (0x0030 - 0x0000)
struct GBInvItem_GetEquipMontageSection final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBChangeEquippedInfo                  ChangeEquippedInfo;                                // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetEquipMontageSection) == 0x000008, "Wrong alignment on GBInvItem_GetEquipMontageSection");
static_assert(sizeof(GBInvItem_GetEquipMontageSection) == 0x000030, "Wrong size on GBInvItem_GetEquipMontageSection");
static_assert(offsetof(GBInvItem_GetEquipMontageSection, TargetHand) == 0x000000, "Member 'GBInvItem_GetEquipMontageSection::TargetHand' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetEquipMontageSection, ChangeEquippedInfo) == 0x000008, "Member 'GBInvItem_GetEquipMontageSection::ChangeEquippedInfo' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetEquipMontageSection, ReturnValue) == 0x000028, "Member 'GBInvItem_GetEquipMontageSection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetHiddenComponents
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetHiddenComponents final
{
public:
	TArray<class UPrimitiveComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetHiddenComponents) == 0x000008, "Wrong alignment on GBInvItem_GetHiddenComponents");
static_assert(sizeof(GBInvItem_GetHiddenComponents) == 0x000010, "Wrong size on GBInvItem_GetHiddenComponents");
static_assert(offsetof(GBInvItem_GetHiddenComponents, ReturnValue) == 0x000000, "Member 'GBInvItem_GetHiddenComponents::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetPatchSocketNameMap
// 0x0060 (0x0060 - 0x0000)
struct GBInvItem_GetPatchSocketNameMap final
{
public:
	class USceneComponent*                        SceneComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGameplayTag>        OutSocketToPatchNameTagMap;                        // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_GetPatchSocketNameMap) == 0x000008, "Wrong alignment on GBInvItem_GetPatchSocketNameMap");
static_assert(sizeof(GBInvItem_GetPatchSocketNameMap) == 0x000060, "Wrong size on GBInvItem_GetPatchSocketNameMap");
static_assert(offsetof(GBInvItem_GetPatchSocketNameMap, SceneComp) == 0x000000, "Member 'GBInvItem_GetPatchSocketNameMap::SceneComp' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetPatchSocketNameMap, OutSocketToPatchNameTagMap) == 0x000008, "Member 'GBInvItem_GetPatchSocketNameMap::OutSocketToPatchNameTagMap' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetPatchSocketNameMap, ReturnValue) == 0x000058, "Member 'GBInvItem_GetPatchSocketNameMap::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetPositionAlphaTargets
// 0x0014 (0x0014 - 0x0000)
struct GBInvItem_GetPositionAlphaTargets final
{
public:
	float                                         TargetEngagedAlpha;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOffTargetAlpha;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTargetEngagedAlpha;                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTargetOffTargetAlpha;                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutOffTargetInterpSpeed;                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetPositionAlphaTargets) == 0x000004, "Wrong alignment on GBInvItem_GetPositionAlphaTargets");
static_assert(sizeof(GBInvItem_GetPositionAlphaTargets) == 0x000014, "Wrong size on GBInvItem_GetPositionAlphaTargets");
static_assert(offsetof(GBInvItem_GetPositionAlphaTargets, TargetEngagedAlpha) == 0x000000, "Member 'GBInvItem_GetPositionAlphaTargets::TargetEngagedAlpha' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetPositionAlphaTargets, TargetOffTargetAlpha) == 0x000004, "Member 'GBInvItem_GetPositionAlphaTargets::TargetOffTargetAlpha' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetPositionAlphaTargets, OutTargetEngagedAlpha) == 0x000008, "Member 'GBInvItem_GetPositionAlphaTargets::OutTargetEngagedAlpha' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetPositionAlphaTargets, OutTargetOffTargetAlpha) == 0x00000C, "Member 'GBInvItem_GetPositionAlphaTargets::OutTargetOffTargetAlpha' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetPositionAlphaTargets, OutOffTargetInterpSpeed) == 0x000010, "Member 'GBInvItem_GetPositionAlphaTargets::OutOffTargetInterpSpeed' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetStaminaMultipliers
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetStaminaMultipliers final
{
public:
	float                                         RecoveryMultiplier;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhaustionMultiplier;                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetStaminaMultipliers) == 0x000004, "Wrong alignment on GBInvItem_GetStaminaMultipliers");
static_assert(sizeof(GBInvItem_GetStaminaMultipliers) == 0x000008, "Wrong size on GBInvItem_GetStaminaMultipliers");
static_assert(offsetof(GBInvItem_GetStaminaMultipliers, RecoveryMultiplier) == 0x000000, "Member 'GBInvItem_GetStaminaMultipliers::RecoveryMultiplier' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetStaminaMultipliers, ExhaustionMultiplier) == 0x000004, "Member 'GBInvItem_GetStaminaMultipliers::ExhaustionMultiplier' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetStaticMeshPatchMaterial
// 0x0028 (0x0028 - 0x0000)
struct GBInvItem_GetStaticMeshPatchMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetStaticMeshPatchMaterial) == 0x000008, "Wrong alignment on GBInvItem_GetStaticMeshPatchMaterial");
static_assert(sizeof(GBInvItem_GetStaticMeshPatchMaterial) == 0x000028, "Wrong size on GBInvItem_GetStaticMeshPatchMaterial");
static_assert(offsetof(GBInvItem_GetStaticMeshPatchMaterial, ReturnValue) == 0x000000, "Member 'GBInvItem_GetStaticMeshPatchMaterial::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetStatKey
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetStatKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetStatKey) == 0x000008, "Wrong alignment on GBInvItem_GetStatKey");
static_assert(sizeof(GBInvItem_GetStatKey) == 0x000010, "Wrong size on GBInvItem_GetStatKey");
static_assert(offsetof(GBInvItem_GetStatKey, ReturnValue) == 0x000000, "Member 'GBInvItem_GetStatKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetUnequipInfo
// 0x0050 (0x0050 - 0x0000)
struct GBInvItem_GetUnequipInfo final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBUnequipInfo                         ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetUnequipInfo) == 0x000010, "Wrong alignment on GBInvItem_GetUnequipInfo");
static_assert(sizeof(GBInvItem_GetUnequipInfo) == 0x000050, "Wrong size on GBInvItem_GetUnequipInfo");
static_assert(offsetof(GBInvItem_GetUnequipInfo, TargetHand) == 0x000000, "Member 'GBInvItem_GetUnequipInfo::TargetHand' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetUnequipInfo, ReturnValue) == 0x000010, "Member 'GBInvItem_GetUnequipInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetUnequipMontageSection
// 0x00C0 (0x00C0 - 0x0000)
struct GBInvItem_GetUnequipMontageSection final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBChangeEquippedInfo                  ChangeEquippedInfo;                                // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBUnequipInfo                         LeftUnequipInfo;                                   // 0x0030(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGBUnequipInfo                         RightUnequipInfo;                                  // 0x0070(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_GetUnequipMontageSection) == 0x000010, "Wrong alignment on GBInvItem_GetUnequipMontageSection");
static_assert(sizeof(GBInvItem_GetUnequipMontageSection) == 0x0000C0, "Wrong size on GBInvItem_GetUnequipMontageSection");
static_assert(offsetof(GBInvItem_GetUnequipMontageSection, TargetHand) == 0x000000, "Member 'GBInvItem_GetUnequipMontageSection::TargetHand' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetUnequipMontageSection, ChangeEquippedInfo) == 0x000008, "Member 'GBInvItem_GetUnequipMontageSection::ChangeEquippedInfo' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetUnequipMontageSection, LeftUnequipInfo) == 0x000030, "Member 'GBInvItem_GetUnequipMontageSection::LeftUnequipInfo' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetUnequipMontageSection, RightUnequipInfo) == 0x000070, "Member 'GBInvItem_GetUnequipMontageSection::RightUnequipInfo' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetUnequipMontageSection, ReturnValue) == 0x0000B0, "Member 'GBInvItem_GetUnequipMontageSection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetWeaponsPositionTransitionTime
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetWeaponsPositionTransitionTime final
{
public:
	EGBWeaponPosition                             FromPosition;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBWeaponPosition                             ToPosition;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetWeaponsPositionTransitionTime) == 0x000004, "Wrong alignment on GBInvItem_GetWeaponsPositionTransitionTime");
static_assert(sizeof(GBInvItem_GetWeaponsPositionTransitionTime) == 0x000008, "Wrong size on GBInvItem_GetWeaponsPositionTransitionTime");
static_assert(offsetof(GBInvItem_GetWeaponsPositionTransitionTime, FromPosition) == 0x000000, "Member 'GBInvItem_GetWeaponsPositionTransitionTime::FromPosition' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetWeaponsPositionTransitionTime, ToPosition) == 0x000001, "Member 'GBInvItem_GetWeaponsPositionTransitionTime::ToPosition' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetWeaponsPositionTransitionTime, ReturnValue) == 0x000004, "Member 'GBInvItem_GetWeaponsPositionTransitionTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnAddedToCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnAddedToCharacter final
{
public:
	class AGBCharacter*                           NewParentCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnAddedToCharacter) == 0x000008, "Wrong alignment on GBInvItem_OnAddedToCharacter");
static_assert(sizeof(GBInvItem_OnAddedToCharacter) == 0x000008, "Wrong size on GBInvItem_OnAddedToCharacter");
static_assert(offsetof(GBInvItem_OnAddedToCharacter, NewParentCharacter) == 0x000000, "Member 'GBInvItem_OnAddedToCharacter::NewParentCharacter' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnAddedToInventoryEvent
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnAddedToInventoryEvent final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnAddedToInventoryEvent) == 0x000008, "Wrong alignment on GBInvItem_OnAddedToInventoryEvent");
static_assert(sizeof(GBInvItem_OnAddedToInventoryEvent) == 0x000008, "Wrong size on GBInvItem_OnAddedToInventoryEvent");
static_assert(offsetof(GBInvItem_OnAddedToInventoryEvent, Character) == 0x000000, "Member 'GBInvItem_OnAddedToInventoryEvent::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnAddedToItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnAddedToItem final
{
public:
	class AGBInvItem*                             NewParentItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnAddedToItem) == 0x000008, "Wrong alignment on GBInvItem_OnAddedToItem");
static_assert(sizeof(GBInvItem_OnAddedToItem) == 0x000008, "Wrong size on GBInvItem_OnAddedToItem");
static_assert(offsetof(GBInvItem_OnAddedToItem, NewParentItem) == 0x000000, "Member 'GBInvItem_OnAddedToItem::NewParentItem' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnAddingChild
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnAddingChild final
{
public:
	class AGBInvItem*                             AddedChild;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnAddingChild) == 0x000008, "Wrong alignment on GBInvItem_OnAddingChild");
static_assert(sizeof(GBInvItem_OnAddingChild) == 0x000008, "Wrong size on GBInvItem_OnAddingChild");
static_assert(offsetof(GBInvItem_OnAddingChild, AddedChild) == 0x000000, "Member 'GBInvItem_OnAddingChild::AddedChild' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnClientsideProxyCreatedEvent
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnClientsideProxyCreatedEvent final
{
public:
	class AGBInvItem*                             Proxy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnClientsideProxyCreatedEvent) == 0x000008, "Wrong alignment on GBInvItem_OnClientsideProxyCreatedEvent");
static_assert(sizeof(GBInvItem_OnClientsideProxyCreatedEvent) == 0x000008, "Wrong size on GBInvItem_OnClientsideProxyCreatedEvent");
static_assert(offsetof(GBInvItem_OnClientsideProxyCreatedEvent, Proxy) == 0x000000, "Member 'GBInvItem_OnClientsideProxyCreatedEvent::Proxy' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnCosmeticTagsUpdated
// 0x0020 (0x0020 - 0x0000)
struct GBInvItem_OnCosmeticTagsUpdated final
{
public:
	struct FGameplayTagContainer                  InCosmeticTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnCosmeticTagsUpdated) == 0x000008, "Wrong alignment on GBInvItem_OnCosmeticTagsUpdated");
static_assert(sizeof(GBInvItem_OnCosmeticTagsUpdated) == 0x000020, "Wrong size on GBInvItem_OnCosmeticTagsUpdated");
static_assert(offsetof(GBInvItem_OnCosmeticTagsUpdated, InCosmeticTags) == 0x000000, "Member 'GBInvItem_OnCosmeticTagsUpdated::InCosmeticTags' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnRemovedFromCharacter
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_OnRemovedFromCharacter final
{
public:
	class AGBCharacter*                           OldParentCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OldSocketName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnRemovedFromCharacter) == 0x000008, "Wrong alignment on GBInvItem_OnRemovedFromCharacter");
static_assert(sizeof(GBInvItem_OnRemovedFromCharacter) == 0x000010, "Wrong size on GBInvItem_OnRemovedFromCharacter");
static_assert(offsetof(GBInvItem_OnRemovedFromCharacter, OldParentCharacter) == 0x000000, "Member 'GBInvItem_OnRemovedFromCharacter::OldParentCharacter' has a wrong offset!");
static_assert(offsetof(GBInvItem_OnRemovedFromCharacter, OldSocketName) == 0x000008, "Member 'GBInvItem_OnRemovedFromCharacter::OldSocketName' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnRemovedFromInventoryEvent
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnRemovedFromInventoryEvent final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnRemovedFromInventoryEvent) == 0x000008, "Wrong alignment on GBInvItem_OnRemovedFromInventoryEvent");
static_assert(sizeof(GBInvItem_OnRemovedFromInventoryEvent) == 0x000008, "Wrong size on GBInvItem_OnRemovedFromInventoryEvent");
static_assert(offsetof(GBInvItem_OnRemovedFromInventoryEvent, Character) == 0x000000, "Member 'GBInvItem_OnRemovedFromInventoryEvent::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnRemovedFromItem
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_OnRemovedFromItem final
{
public:
	class AGBInvItem*                             OldParentItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        OldParentComp;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OldParentSocket;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnRemovedFromItem) == 0x000008, "Wrong alignment on GBInvItem_OnRemovedFromItem");
static_assert(sizeof(GBInvItem_OnRemovedFromItem) == 0x000018, "Wrong size on GBInvItem_OnRemovedFromItem");
static_assert(offsetof(GBInvItem_OnRemovedFromItem, OldParentItem) == 0x000000, "Member 'GBInvItem_OnRemovedFromItem::OldParentItem' has a wrong offset!");
static_assert(offsetof(GBInvItem_OnRemovedFromItem, OldParentComp) == 0x000008, "Member 'GBInvItem_OnRemovedFromItem::OldParentComp' has a wrong offset!");
static_assert(offsetof(GBInvItem_OnRemovedFromItem, OldParentSocket) == 0x000010, "Member 'GBInvItem_OnRemovedFromItem::OldParentSocket' has a wrong offset!");

// Function GroundBranch.GBInvItem.OnRemovingChild
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_OnRemovingChild final
{
public:
	class AGBInvItem*                             RemovedChild;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_OnRemovingChild) == 0x000008, "Wrong alignment on GBInvItem_OnRemovingChild");
static_assert(sizeof(GBInvItem_OnRemovingChild) == 0x000008, "Wrong size on GBInvItem_OnRemovingChild");
static_assert(offsetof(GBInvItem_OnRemovingChild, RemovedChild) == 0x000000, "Member 'GBInvItem_OnRemovingChild::RemovedChild' has a wrong offset!");

// Function GroundBranch.GBInvItem.OtherTagsSatisfied
// 0x0028 (0x0028 - 0x0000)
struct GBInvItem_OtherTagsSatisfied final
{
public:
	struct FGameplayTagContainer                  InCosmeticTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_OtherTagsSatisfied) == 0x000008, "Wrong alignment on GBInvItem_OtherTagsSatisfied");
static_assert(sizeof(GBInvItem_OtherTagsSatisfied) == 0x000028, "Wrong size on GBInvItem_OtherTagsSatisfied");
static_assert(offsetof(GBInvItem_OtherTagsSatisfied, InCosmeticTags) == 0x000000, "Member 'GBInvItem_OtherTagsSatisfied::InCosmeticTags' has a wrong offset!");
static_assert(offsetof(GBInvItem_OtherTagsSatisfied, ReturnValue) == 0x000020, "Member 'GBInvItem_OtherTagsSatisfied::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.PlaceAt
// 0x0020 (0x0020 - 0x0000)
struct GBInvItem_PlaceAt final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AGBDroppedInvItem*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_PlaceAt) == 0x000008, "Wrong alignment on GBInvItem_PlaceAt");
static_assert(sizeof(GBInvItem_PlaceAt) == 0x000020, "Wrong size on GBInvItem_PlaceAt");
static_assert(offsetof(GBInvItem_PlaceAt, InLocation) == 0x000000, "Member 'GBInvItem_PlaceAt::InLocation' has a wrong offset!");
static_assert(offsetof(GBInvItem_PlaceAt, InRotation) == 0x00000C, "Member 'GBInvItem_PlaceAt::InRotation' has a wrong offset!");
static_assert(offsetof(GBInvItem_PlaceAt, ReturnValue) == 0x000018, "Member 'GBInvItem_PlaceAt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.PostDecode
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_PostDecode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_PostDecode) == 0x000001, "Wrong alignment on GBInvItem_PostDecode");
static_assert(sizeof(GBInvItem_PostDecode) == 0x000001, "Wrong size on GBInvItem_PostDecode");
static_assert(offsetof(GBInvItem_PostDecode, ReturnValue) == 0x000000, "Member 'GBInvItem_PostDecode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.RemovedFromCharacter
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_RemovedFromCharacter final
{
public:
	class AGBCharacter*                           OldParentCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OldSocketName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_RemovedFromCharacter) == 0x000008, "Wrong alignment on GBInvItem_RemovedFromCharacter");
static_assert(sizeof(GBInvItem_RemovedFromCharacter) == 0x000010, "Wrong size on GBInvItem_RemovedFromCharacter");
static_assert(offsetof(GBInvItem_RemovedFromCharacter, OldParentCharacter) == 0x000000, "Member 'GBInvItem_RemovedFromCharacter::OldParentCharacter' has a wrong offset!");
static_assert(offsetof(GBInvItem_RemovedFromCharacter, OldSocketName) == 0x000008, "Member 'GBInvItem_RemovedFromCharacter::OldSocketName' has a wrong offset!");

// Function GroundBranch.GBInvItem.RemovedFromItem
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_RemovedFromItem final
{
public:
	class AGBInvItem*                             OldParentItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        OldParentComp;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OldParentSocket;                                   // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_RemovedFromItem) == 0x000008, "Wrong alignment on GBInvItem_RemovedFromItem");
static_assert(sizeof(GBInvItem_RemovedFromItem) == 0x000018, "Wrong size on GBInvItem_RemovedFromItem");
static_assert(offsetof(GBInvItem_RemovedFromItem, OldParentItem) == 0x000000, "Member 'GBInvItem_RemovedFromItem::OldParentItem' has a wrong offset!");
static_assert(offsetof(GBInvItem_RemovedFromItem, OldParentComp) == 0x000008, "Member 'GBInvItem_RemovedFromItem::OldParentComp' has a wrong offset!");
static_assert(offsetof(GBInvItem_RemovedFromItem, OldParentSocket) == 0x000010, "Member 'GBInvItem_RemovedFromItem::OldParentSocket' has a wrong offset!");

// Function GroundBranch.GBInvItem.RemoveFromInventory
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_RemoveFromInventory final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_RemoveFromInventory) == 0x000008, "Wrong alignment on GBInvItem_RemoveFromInventory");
static_assert(sizeof(GBInvItem_RemoveFromInventory) == 0x000008, "Wrong size on GBInvItem_RemoveFromInventory");
static_assert(offsetof(GBInvItem_RemoveFromInventory, Character) == 0x000000, "Member 'GBInvItem_RemoveFromInventory::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.RemoveFromSkinnedDecalSampler
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_RemoveFromSkinnedDecalSampler final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_RemoveFromSkinnedDecalSampler) == 0x000008, "Wrong alignment on GBInvItem_RemoveFromSkinnedDecalSampler");
static_assert(sizeof(GBInvItem_RemoveFromSkinnedDecalSampler) == 0x000008, "Wrong size on GBInvItem_RemoveFromSkinnedDecalSampler");
static_assert(offsetof(GBInvItem_RemoveFromSkinnedDecalSampler, Character) == 0x000000, "Member 'GBInvItem_RemoveFromSkinnedDecalSampler::Character' has a wrong offset!");

// Function GroundBranch.GBInvItem.RemoveItemCameraModifier
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_RemoveItemCameraModifier final
{
public:
	class UGBItemCameraModifier*                  ItemCameraModifierToRemove;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_RemoveItemCameraModifier) == 0x000008, "Wrong alignment on GBInvItem_RemoveItemCameraModifier");
static_assert(sizeof(GBInvItem_RemoveItemCameraModifier) == 0x000008, "Wrong size on GBInvItem_RemoveItemCameraModifier");
static_assert(offsetof(GBInvItem_RemoveItemCameraModifier, ItemCameraModifierToRemove) == 0x000000, "Member 'GBInvItem_RemoveItemCameraModifier::ItemCameraModifierToRemove' has a wrong offset!");

// Function GroundBranch.GBInvItem.SetInvItemSkinId
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_SetInvItemSkinId final
{
public:
	struct FPrimaryAssetId                        NewInvItemSkinId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_SetInvItemSkinId) == 0x000004, "Wrong alignment on GBInvItem_SetInvItemSkinId");
static_assert(sizeof(GBInvItem_SetInvItemSkinId) == 0x000010, "Wrong size on GBInvItem_SetInvItemSkinId");
static_assert(offsetof(GBInvItem_SetInvItemSkinId, NewInvItemSkinId) == 0x000000, "Member 'GBInvItem_SetInvItemSkinId::NewInvItemSkinId' has a wrong offset!");

// Function GroundBranch.GBInvItem.SyncMontageWithOtherItem
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_SyncMontageWithOtherItem final
{
public:
	class AGBInvItem*                             OtherItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_SyncMontageWithOtherItem) == 0x000008, "Wrong alignment on GBInvItem_SyncMontageWithOtherItem");
static_assert(sizeof(GBInvItem_SyncMontageWithOtherItem) == 0x000010, "Wrong size on GBInvItem_SyncMontageWithOtherItem");
static_assert(offsetof(GBInvItem_SyncMontageWithOtherItem, OtherItem) == 0x000000, "Member 'GBInvItem_SyncMontageWithOtherItem::OtherItem' has a wrong offset!");
static_assert(offsetof(GBInvItem_SyncMontageWithOtherItem, MontageName) == 0x000008, "Member 'GBInvItem_SyncMontageWithOtherItem::MontageName' has a wrong offset!");

// Function GroundBranch.GBInvItem.TryActivateItemAbilityByTag
// 0x000C (0x000C - 0x0000)
struct GBInvItem_TryActivateItemAbilityByTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_TryActivateItemAbilityByTag) == 0x000004, "Wrong alignment on GBInvItem_TryActivateItemAbilityByTag");
static_assert(sizeof(GBInvItem_TryActivateItemAbilityByTag) == 0x00000C, "Wrong size on GBInvItem_TryActivateItemAbilityByTag");
static_assert(offsetof(GBInvItem_TryActivateItemAbilityByTag, GameplayTag) == 0x000000, "Member 'GBInvItem_TryActivateItemAbilityByTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBInvItem_TryActivateItemAbilityByTag, ReturnValue) == 0x000008, "Member 'GBInvItem_TryActivateItemAbilityByTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.TryActivateItemAbilityByTagWithPayload
// 0x00C0 (0x00C0 - 0x0000)
struct GBInvItem_TryActivateItemAbilityByTagWithPayload final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0008(0x00B0)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_TryActivateItemAbilityByTagWithPayload) == 0x000008, "Wrong alignment on GBInvItem_TryActivateItemAbilityByTagWithPayload");
static_assert(sizeof(GBInvItem_TryActivateItemAbilityByTagWithPayload) == 0x0000C0, "Wrong size on GBInvItem_TryActivateItemAbilityByTagWithPayload");
static_assert(offsetof(GBInvItem_TryActivateItemAbilityByTagWithPayload, GameplayTag) == 0x000000, "Member 'GBInvItem_TryActivateItemAbilityByTagWithPayload::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBInvItem_TryActivateItemAbilityByTagWithPayload, Payload) == 0x000008, "Member 'GBInvItem_TryActivateItemAbilityByTagWithPayload::Payload' has a wrong offset!");
static_assert(offsetof(GBInvItem_TryActivateItemAbilityByTagWithPayload, ReturnValue) == 0x0000B8, "Member 'GBInvItem_TryActivateItemAbilityByTagWithPayload::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.UpdateWetness
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_UpdateWetness final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_UpdateWetness) == 0x000004, "Wrong alignment on GBInvItem_UpdateWetness");
static_assert(sizeof(GBInvItem_UpdateWetness) == 0x000010, "Wrong size on GBInvItem_UpdateWetness");
static_assert(offsetof(GBInvItem_UpdateWetness, InRadius) == 0x000000, "Member 'GBInvItem_UpdateWetness::InRadius' has a wrong offset!");
static_assert(offsetof(GBInvItem_UpdateWetness, InLocation) == 0x000004, "Member 'GBInvItem_UpdateWetness::InLocation' has a wrong offset!");

// Function GroundBranch.GBInvItem.ValidateDecodedItem
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_ValidateDecodedItem final
{
public:
	class FString                                 OutFailureReason;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_ValidateDecodedItem) == 0x000008, "Wrong alignment on GBInvItem_ValidateDecodedItem");
static_assert(sizeof(GBInvItem_ValidateDecodedItem) == 0x000018, "Wrong size on GBInvItem_ValidateDecodedItem");
static_assert(offsetof(GBInvItem_ValidateDecodedItem, OutFailureReason) == 0x000000, "Member 'GBInvItem_ValidateDecodedItem::OutFailureReason' has a wrong offset!");
static_assert(offsetof(GBInvItem_ValidateDecodedItem, ReturnValue) == 0x000010, "Member 'GBInvItem_ValidateDecodedItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetAnimLayerClassRef
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetAnimLayerClassRef final
{
public:
	TSubclassOf<class UAnimInstance>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetAnimLayerClassRef) == 0x000008, "Wrong alignment on GBInvItem_GetAnimLayerClassRef");
static_assert(sizeof(GBInvItem_GetAnimLayerClassRef) == 0x000008, "Wrong size on GBInvItem_GetAnimLayerClassRef");
static_assert(offsetof(GBInvItem_GetAnimLayerClassRef, ReturnValue) == 0x000000, "Member 'GBInvItem_GetAnimLayerClassRef::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetBaseItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetBaseItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetBaseItem) == 0x000008, "Wrong alignment on GBInvItem_GetBaseItem");
static_assert(sizeof(GBInvItem_GetBaseItem) == 0x000008, "Wrong size on GBInvItem_GetBaseItem");
static_assert(offsetof(GBInvItem_GetBaseItem, ReturnValue) == 0x000000, "Member 'GBInvItem_GetBaseItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetCharMontage
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetCharMontage final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetCharMontage) == 0x000008, "Wrong alignment on GBInvItem_GetCharMontage");
static_assert(sizeof(GBInvItem_GetCharMontage) == 0x000010, "Wrong size on GBInvItem_GetCharMontage");
static_assert(offsetof(GBInvItem_GetCharMontage, MontageName) == 0x000000, "Member 'GBInvItem_GetCharMontage::MontageName' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetCharMontage, ReturnValue) == 0x000008, "Member 'GBInvItem_GetCharMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetChildInvItems
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_GetChildInvItems final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetChildInvItems) == 0x000008, "Wrong alignment on GBInvItem_GetChildInvItems");
static_assert(sizeof(GBInvItem_GetChildInvItems) == 0x000018, "Wrong size on GBInvItem_GetChildInvItems");
static_assert(offsetof(GBInvItem_GetChildInvItems, bAllChildren) == 0x000000, "Member 'GBInvItem_GetChildInvItems::bAllChildren' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItems, ReturnValue) == 0x000008, "Member 'GBInvItem_GetChildInvItems::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetChildInvItemsAttachedTo
// 0x0020 (0x0020 - 0x0000)
struct GBInvItem_GetChildInvItemsAttachedTo final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetChildInvItemsAttachedTo) == 0x000008, "Wrong alignment on GBInvItem_GetChildInvItemsAttachedTo");
static_assert(sizeof(GBInvItem_GetChildInvItemsAttachedTo) == 0x000020, "Wrong size on GBInvItem_GetChildInvItemsAttachedTo");
static_assert(offsetof(GBInvItem_GetChildInvItemsAttachedTo, Component) == 0x000000, "Member 'GBInvItem_GetChildInvItemsAttachedTo::Component' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsAttachedTo, SocketName) == 0x000008, "Member 'GBInvItem_GetChildInvItemsAttachedTo::SocketName' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsAttachedTo, ReturnValue) == 0x000010, "Member 'GBInvItem_GetChildInvItemsAttachedTo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetChildInvItemsWithTags
// 0x0038 (0x0038 - 0x0000)
struct GBInvItem_GetChildInvItemsWithTags final
{
public:
	struct FGameplayTagContainer                  WithTags;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetChildInvItemsWithTags) == 0x000008, "Wrong alignment on GBInvItem_GetChildInvItemsWithTags");
static_assert(sizeof(GBInvItem_GetChildInvItemsWithTags) == 0x000038, "Wrong size on GBInvItem_GetChildInvItemsWithTags");
static_assert(offsetof(GBInvItem_GetChildInvItemsWithTags, WithTags) == 0x000000, "Member 'GBInvItem_GetChildInvItemsWithTags::WithTags' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsWithTags, bExactMatch) == 0x000020, "Member 'GBInvItem_GetChildInvItemsWithTags::bExactMatch' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsWithTags, bAllChildren) == 0x000021, "Member 'GBInvItem_GetChildInvItemsWithTags::bAllChildren' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetChildInvItemsWithTags, ReturnValue) == 0x000028, "Member 'GBInvItem_GetChildInvItemsWithTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetCosmeticTags
// 0x0020 (0x0020 - 0x0000)
struct GBInvItem_GetCosmeticTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetCosmeticTags) == 0x000008, "Wrong alignment on GBInvItem_GetCosmeticTags");
static_assert(sizeof(GBInvItem_GetCosmeticTags) == 0x000020, "Wrong size on GBInvItem_GetCosmeticTags");
static_assert(offsetof(GBInvItem_GetCosmeticTags, ReturnValue) == 0x000000, "Member 'GBInvItem_GetCosmeticTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetCurrentSight
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetCurrentSight final
{
public:
	class UGBSightComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetCurrentSight) == 0x000008, "Wrong alignment on GBInvItem_GetCurrentSight");
static_assert(sizeof(GBInvItem_GetCurrentSight) == 0x000008, "Wrong size on GBInvItem_GetCurrentSight");
static_assert(offsetof(GBInvItem_GetCurrentSight, ReturnValue) == 0x000000, "Member 'GBInvItem_GetCurrentSight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetCustomisationWidget
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetCustomisationWidget final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetCustomisationWidget) == 0x000008, "Wrong alignment on GBInvItem_GetCustomisationWidget");
static_assert(sizeof(GBInvItem_GetCustomisationWidget) == 0x000008, "Wrong size on GBInvItem_GetCustomisationWidget");
static_assert(offsetof(GBInvItem_GetCustomisationWidget, ReturnValue) == 0x000000, "Member 'GBInvItem_GetCustomisationWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetDisplayName) == 0x000008, "Wrong alignment on GBInvItem_GetDisplayName");
static_assert(sizeof(GBInvItem_GetDisplayName) == 0x000018, "Wrong size on GBInvItem_GetDisplayName");
static_assert(offsetof(GBInvItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'GBInvItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetDragDropOperation
// 0x0028 (0x0028 - 0x0000)
struct GBInvItem_GetDragDropOperation final
{
public:
	struct FGameplayTagContainer                  DragOpTags;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGBInvItemDragDropOperation> ReturnValue;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetDragDropOperation) == 0x000008, "Wrong alignment on GBInvItem_GetDragDropOperation");
static_assert(sizeof(GBInvItem_GetDragDropOperation) == 0x000028, "Wrong size on GBInvItem_GetDragDropOperation");
static_assert(offsetof(GBInvItem_GetDragDropOperation, DragOpTags) == 0x000000, "Member 'GBInvItem_GetDragDropOperation::DragOpTags' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetDragDropOperation, ReturnValue) == 0x000020, "Member 'GBInvItem_GetDragDropOperation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetEffect
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetEffect final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetEffect) == 0x000008, "Wrong alignment on GBInvItem_GetEffect");
static_assert(sizeof(GBInvItem_GetEffect) == 0x000010, "Wrong size on GBInvItem_GetEffect");
static_assert(offsetof(GBInvItem_GetEffect, EffectName) == 0x000000, "Member 'GBInvItem_GetEffect::EffectName' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetEffect, ReturnValue) == 0x000008, "Member 'GBInvItem_GetEffect::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetFirstChildInvItemAttachedTo
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_GetFirstChildInvItemAttachedTo final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetFirstChildInvItemAttachedTo) == 0x000008, "Wrong alignment on GBInvItem_GetFirstChildInvItemAttachedTo");
static_assert(sizeof(GBInvItem_GetFirstChildInvItemAttachedTo) == 0x000018, "Wrong size on GBInvItem_GetFirstChildInvItemAttachedTo");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemAttachedTo, Component) == 0x000000, "Member 'GBInvItem_GetFirstChildInvItemAttachedTo::Component' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemAttachedTo, SocketName) == 0x000008, "Member 'GBInvItem_GetFirstChildInvItemAttachedTo::SocketName' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemAttachedTo, ReturnValue) == 0x000010, "Member 'GBInvItem_GetFirstChildInvItemAttachedTo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetFirstChildInvItemOfClass
// 0x0018 (0x0018 - 0x0000)
struct GBInvItem_GetFirstChildInvItemOfClass final
{
public:
	TSubclassOf<class AGBInvItem>                 InvItemClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetFirstChildInvItemOfClass) == 0x000008, "Wrong alignment on GBInvItem_GetFirstChildInvItemOfClass");
static_assert(sizeof(GBInvItem_GetFirstChildInvItemOfClass) == 0x000018, "Wrong size on GBInvItem_GetFirstChildInvItemOfClass");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemOfClass, InvItemClass) == 0x000000, "Member 'GBInvItem_GetFirstChildInvItemOfClass::InvItemClass' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemOfClass, bAllChildren) == 0x000008, "Member 'GBInvItem_GetFirstChildInvItemOfClass::bAllChildren' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemOfClass, ReturnValue) == 0x000010, "Member 'GBInvItem_GetFirstChildInvItemOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetFirstChildInvItemWithTags
// 0x0030 (0x0030 - 0x0000)
struct GBInvItem_GetFirstChildInvItemWithTags final
{
public:
	struct FGameplayTagContainer                  WithTags;                                          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetFirstChildInvItemWithTags) == 0x000008, "Wrong alignment on GBInvItem_GetFirstChildInvItemWithTags");
static_assert(sizeof(GBInvItem_GetFirstChildInvItemWithTags) == 0x000030, "Wrong size on GBInvItem_GetFirstChildInvItemWithTags");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemWithTags, WithTags) == 0x000000, "Member 'GBInvItem_GetFirstChildInvItemWithTags::WithTags' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemWithTags, bExactMatch) == 0x000020, "Member 'GBInvItem_GetFirstChildInvItemWithTags::bExactMatch' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemWithTags, bAllChildren) == 0x000021, "Member 'GBInvItem_GetFirstChildInvItemWithTags::bAllChildren' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetFirstChildInvItemWithTags, ReturnValue) == 0x000028, "Member 'GBInvItem_GetFirstChildInvItemWithTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetGameplayAbilitySpecHandles
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetGameplayAbilitySpecHandles final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetGameplayAbilitySpecHandles) == 0x000008, "Wrong alignment on GBInvItem_GetGameplayAbilitySpecHandles");
static_assert(sizeof(GBInvItem_GetGameplayAbilitySpecHandles) == 0x000010, "Wrong size on GBInvItem_GetGameplayAbilitySpecHandles");
static_assert(offsetof(GBInvItem_GetGameplayAbilitySpecHandles, ReturnValue) == 0x000000, "Member 'GBInvItem_GetGameplayAbilitySpecHandles::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetGBInstigator
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetGBInstigator final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetGBInstigator) == 0x000008, "Wrong alignment on GBInvItem_GetGBInstigator");
static_assert(sizeof(GBInvItem_GetGBInstigator) == 0x000008, "Wrong size on GBInvItem_GetGBInstigator");
static_assert(offsetof(GBInvItem_GetGBInstigator, ReturnValue) == 0x000000, "Member 'GBInvItem_GetGBInstigator::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetHandEnum
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_GetHandEnum final
{
public:
	EHand                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetHandEnum) == 0x000001, "Wrong alignment on GBInvItem_GetHandEnum");
static_assert(sizeof(GBInvItem_GetHandEnum) == 0x000001, "Wrong size on GBInvItem_GetHandEnum");
static_assert(offsetof(GBInvItem_GetHandEnum, ReturnValue) == 0x000000, "Member 'GBInvItem_GetHandEnum::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetIcon
// 0x0028 (0x0028 - 0x0000)
struct GBInvItem_GetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetIcon) == 0x000008, "Wrong alignment on GBInvItem_GetIcon");
static_assert(sizeof(GBInvItem_GetIcon) == 0x000028, "Wrong size on GBInvItem_GetIcon");
static_assert(offsetof(GBInvItem_GetIcon, ReturnValue) == 0x000000, "Member 'GBInvItem_GetIcon::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetInventorySlot
// 0x0004 (0x0004 - 0x0000)
struct GBInvItem_GetInventorySlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetInventorySlot) == 0x000004, "Wrong alignment on GBInvItem_GetInventorySlot");
static_assert(sizeof(GBInvItem_GetInventorySlot) == 0x000004, "Wrong size on GBInvItem_GetInventorySlot");
static_assert(offsetof(GBInvItem_GetInventorySlot, ReturnValue) == 0x000000, "Member 'GBInvItem_GetInventorySlot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetInventorySlotWidget
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetInventorySlotWidget final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetInventorySlotWidget) == 0x000008, "Wrong alignment on GBInvItem_GetInventorySlotWidget");
static_assert(sizeof(GBInvItem_GetInventorySlotWidget) == 0x000008, "Wrong size on GBInvItem_GetInventorySlotWidget");
static_assert(offsetof(GBInvItem_GetInventorySlotWidget, ReturnValue) == 0x000000, "Member 'GBInvItem_GetInventorySlotWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetInvItemSkinId
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetInvItemSkinId final
{
public:
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetInvItemSkinId) == 0x000004, "Wrong alignment on GBInvItem_GetInvItemSkinId");
static_assert(sizeof(GBInvItem_GetInvItemSkinId) == 0x000010, "Wrong size on GBInvItem_GetInvItemSkinId");
static_assert(offsetof(GBInvItem_GetInvItemSkinId, ReturnValue) == 0x000000, "Member 'GBInvItem_GetInvItemSkinId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetInvItemTags
// 0x0020 (0x0020 - 0x0000)
struct GBInvItem_GetInvItemTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetInvItemTags) == 0x000008, "Wrong alignment on GBInvItem_GetInvItemTags");
static_assert(sizeof(GBInvItem_GetInvItemTags) == 0x000020, "Wrong size on GBInvItem_GetInvItemTags");
static_assert(offsetof(GBInvItem_GetInvItemTags, ReturnValue) == 0x000000, "Member 'GBInvItem_GetInvItemTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetItemWeight
// 0x0004 (0x0004 - 0x0000)
struct GBInvItem_GetItemWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetItemWeight) == 0x000004, "Wrong alignment on GBInvItem_GetItemWeight");
static_assert(sizeof(GBInvItem_GetItemWeight) == 0x000004, "Wrong size on GBInvItem_GetItemWeight");
static_assert(offsetof(GBInvItem_GetItemWeight, ReturnValue) == 0x000000, "Member 'GBInvItem_GetItemWeight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetMontage
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetMontage final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetMontage) == 0x000008, "Wrong alignment on GBInvItem_GetMontage");
static_assert(sizeof(GBInvItem_GetMontage) == 0x000010, "Wrong size on GBInvItem_GetMontage");
static_assert(offsetof(GBInvItem_GetMontage, MontageName) == 0x000000, "Member 'GBInvItem_GetMontage::MontageName' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetMontage, ReturnValue) == 0x000008, "Member 'GBInvItem_GetMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetParentItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItem_GetParentItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetParentItem) == 0x000008, "Wrong alignment on GBInvItem_GetParentItem");
static_assert(sizeof(GBInvItem_GetParentItem) == 0x000008, "Wrong size on GBInvItem_GetParentItem");
static_assert(offsetof(GBInvItem_GetParentItem, ReturnValue) == 0x000000, "Member 'GBInvItem_GetParentItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.GetSound
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_GetSound final
{
public:
	class FName                                   SoundName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_GetSound) == 0x000008, "Wrong alignment on GBInvItem_GetSound");
static_assert(sizeof(GBInvItem_GetSound) == 0x000010, "Wrong size on GBInvItem_GetSound");
static_assert(offsetof(GBInvItem_GetSound, SoundName) == 0x000000, "Member 'GBInvItem_GetSound::SoundName' has a wrong offset!");
static_assert(offsetof(GBInvItem_GetSound, ReturnValue) == 0x000008, "Member 'GBInvItem_GetSound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.IsClientsideProxy
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_IsClientsideProxy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_IsClientsideProxy) == 0x000001, "Wrong alignment on GBInvItem_IsClientsideProxy");
static_assert(sizeof(GBInvItem_IsClientsideProxy) == 0x000001, "Wrong size on GBInvItem_IsClientsideProxy");
static_assert(offsetof(GBInvItem_IsClientsideProxy, ReturnValue) == 0x000000, "Member 'GBInvItem_IsClientsideProxy::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct GBInvItem_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItem_IsEquipped) == 0x000001, "Wrong alignment on GBInvItem_IsEquipped");
static_assert(sizeof(GBInvItem_IsEquipped) == 0x000001, "Wrong size on GBInvItem_IsEquipped");
static_assert(offsetof(GBInvItem_IsEquipped, ReturnValue) == 0x000000, "Member 'GBInvItem_IsEquipped::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItem.UsesGameplayAbilityByClass
// 0x0010 (0x0010 - 0x0000)
struct GBInvItem_UsesGameplayAbilityByClass final
{
public:
	TSubclassOf<class UGBGameplayAbility>         GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItem_UsesGameplayAbilityByClass) == 0x000008, "Wrong alignment on GBInvItem_UsesGameplayAbilityByClass");
static_assert(sizeof(GBInvItem_UsesGameplayAbilityByClass) == 0x000010, "Wrong size on GBInvItem_UsesGameplayAbilityByClass");
static_assert(offsetof(GBInvItem_UsesGameplayAbilityByClass, GameplayAbilityClass) == 0x000000, "Member 'GBInvItem_UsesGameplayAbilityByClass::GameplayAbilityClass' has a wrong offset!");
static_assert(offsetof(GBInvItem_UsesGameplayAbilityByClass, ReturnValue) == 0x000008, "Member 'GBInvItem_UsesGameplayAbilityByClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletItem.GetBulletProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct GBBulletItem_GetBulletProjectileClass final
{
public:
	TSubclassOf<class AGBBulletProjectile>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletItem_GetBulletProjectileClass) == 0x000008, "Wrong alignment on GBBulletItem_GetBulletProjectileClass");
static_assert(sizeof(GBBulletItem_GetBulletProjectileClass) == 0x000008, "Wrong size on GBBulletItem_GetBulletProjectileClass");
static_assert(offsetof(GBBulletItem_GetBulletProjectileClass, ReturnValue) == 0x000000, "Member 'GBBulletItem_GetBulletProjectileClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_AddGameplayEffect final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_AddGameplayEffect) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_AddGameplayEffect");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_AddGameplayEffect) == 0x000010, "Wrong size on GBAbilitySystemBlueprintLibrary_AddGameplayEffect");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddGameplayEffect, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_AddGameplayEffect::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddGameplayEffect, GameplayEffectClass) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_AddGameplayEffect::GameplayEffectClass' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddGameplayEffectWithDuration
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration, GameplayEffectClass) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration, Duration) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration::Duration' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag, GameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag, bShouldReplicate) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag, ReturnValue) == 0x000011, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddLooseGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags) == 0x000030, "Wrong size on GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags, GameplayTags) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags, bShouldReplicate) == 0x000028, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags, ReturnValue) == 0x000029, "Member 'GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.CancelAbilities
// 0x0050 (0x0050 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_CancelAbilities final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithTags;                                          // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WithoutTags;                                       // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       Ignore;                                            // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_CancelAbilities) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_CancelAbilities");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_CancelAbilities) == 0x000050, "Wrong size on GBAbilitySystemBlueprintLibrary_CancelAbilities");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_CancelAbilities, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_CancelAbilities::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_CancelAbilities, WithTags) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_CancelAbilities::WithTags' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_CancelAbilities, WithoutTags) == 0x000028, "Member 'GBAbilitySystemBlueprintLibrary_CancelAbilities::WithoutTags' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_CancelAbilities, Ignore) == 0x000048, "Member 'GBAbilitySystemBlueprintLibrary_CancelAbilities::Ignore' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ClearLooseGameplayTagsByParent
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ParentGameplayTag;                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent, ParentGameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent::ParentGameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent, bShouldReplicate) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent::bShouldReplicate' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConditionalAddLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag, GameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag, bShouldReplicate) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag, ReturnValue) == 0x000011, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConditionalRemoveLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag, GameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag, bShouldReplicate) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag, ReturnValue) == 0x000011, "Member 'GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConvertNameToGameplayTag
// 0x0014 (0x0014 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorIfNotFound;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag) == 0x000004, "Wrong alignment on GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag) == 0x000014, "Wrong size on GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag, TagName) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag::TagName' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag, ErrorIfNotFound) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag::ErrorIfNotFound' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag, ReturnValue) == 0x00000C, "Member 'GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConvertStringToGameplayTag
// 0x0020 (0x0020 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag final
{
public:
	class FString                                 TagString;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorIfNotFound;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag) == 0x000020, "Wrong size on GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag, TagString) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag::TagString' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag, ErrorIfNotFound) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag::ErrorIfNotFound' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag, ReturnValue) == 0x000014, "Member 'GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayEffect_IsValidHandle
// 0x000C (0x000C - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle final
{
public:
	struct FActiveGameplayEffectHandle            GameplayEffectHandle;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle) == 0x000004, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle) == 0x00000C, "Wrong size on GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle, GameplayEffectHandle) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle::GameplayEffectHandle' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle, ReturnValue) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTag_FromSocketName
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ParentGameplayTag;                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName) == 0x000004, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName, SocketName) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName::SocketName' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName, ParentGameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName::ParentGameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName, ReturnValue) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTag_ToSocketName
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ParentGameplayTag;                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName) == 0x000004, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName, GameplayTag) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName, ParentGameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName::ParentGameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName, ReturnValue) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTagContainer_Filter
// 0x0068 (0x0068 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter final
{
public:
	struct FGameplayTagContainer                  SourceContainer;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OtherContainer;                                    // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OutFilteredContainer;                              // 0x0040(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter) == 0x000068, "Wrong size on GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter, SourceContainer) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter::SourceContainer' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter, OtherContainer) == 0x000020, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter::OtherContainer' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter, OutFilteredContainer) == 0x000040, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter::OutFilteredContainer' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter, ReturnValue) == 0x000060, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTagContainer_FilterExact
// 0x0068 (0x0068 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact final
{
public:
	struct FGameplayTagContainer                  SourceContainer;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OtherContainer;                                    // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OutFilteredContainer;                              // 0x0040(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact) == 0x000068, "Wrong size on GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact, SourceContainer) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact::SourceContainer' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact, OtherContainer) == 0x000020, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact::OtherContainer' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact, OutFilteredContainer) == 0x000040, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact::OutFilteredContainer' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact, ReturnValue) == 0x000060, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTagContainer_IsValid
// 0x0028 (0x0028 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid) == 0x000028, "Wrong size on GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid, Container) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid::Container' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid, ReturnValue) == 0x000020, "Member 'GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GetPrimaryFirearmTypeTags
// 0x0020 (0x0020 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags) == 0x000020, "Wrong size on GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags, ReturnValue) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GetSidearmFirearmTypeTags
// 0x0020 (0x0020 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags) == 0x000020, "Wrong size on GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags, ReturnValue) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RegisterGameplayTagEvent
// 0x0038 (0x0038 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 NewCount)>               OnGameplayTagChanged;                              // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FGBGameplayTagEventHandle              ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent) == 0x000038, "Wrong size on GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent, Tag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent::Tag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent, OnGameplayTagChanged) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent::OnGameplayTagChanged' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent, ReturnValue) == 0x000020, "Member 'GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RemoveGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect) == 0x000010, "Wrong size on GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect, GameplayEffectClass) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect::GameplayEffectClass' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RemoveLooseGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag, GameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag, bShouldReplicate) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag, ReturnValue) == 0x000011, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RemoveLooseGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags) == 0x000030, "Wrong size on GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, GameplayTags) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, bShouldReplicate) == 0x000028, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags, ReturnValue) == 0x000029, "Member 'GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RequestGameplayTagChildren
// 0x0028 (0x0028 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren final
{
public:
	struct FGameplayTag                           ParentTag;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren) == 0x000028, "Wrong size on GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren, ParentTag) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren::ParentTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren, ReturnValue) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.SetLooseGameplayTagCount
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplicate;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, GameplayTag) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, NewCount) == 0x000010, "Member 'GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::NewCount' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, bShouldReplicate) == 0x000014, "Member 'GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount, ReturnValue) == 0x000015, "Member 'GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.SetRemoveAbilityOnEnd
// 0x0010 (0x0010 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       Ability;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd) == 0x000010, "Wrong size on GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd, Actor) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd::Actor' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd, Ability) == 0x000008, "Member 'GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd::Ability' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemBlueprintLibrary.UnregisterGameplayTagEvent
// 0x0018 (0x0018 - 0x0000)
struct GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent final
{
public:
	struct FGBGameplayTagEventHandle              Handle;                                            // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent) == 0x000008, "Wrong alignment on GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent");
static_assert(sizeof(GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent) == 0x000018, "Wrong size on GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent");
static_assert(offsetof(GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent, Handle) == 0x000000, "Member 'GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent::Handle' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemComponent.BlockAbilitiesWithoutTags
// 0x0020 (0x0020 - 0x0000)
struct GBAbilitySystemComponent_BlockAbilitiesWithoutTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemComponent_BlockAbilitiesWithoutTags) == 0x000008, "Wrong alignment on GBAbilitySystemComponent_BlockAbilitiesWithoutTags");
static_assert(sizeof(GBAbilitySystemComponent_BlockAbilitiesWithoutTags) == 0x000020, "Wrong size on GBAbilitySystemComponent_BlockAbilitiesWithoutTags");
static_assert(offsetof(GBAbilitySystemComponent_BlockAbilitiesWithoutTags, Tags) == 0x000000, "Member 'GBAbilitySystemComponent_BlockAbilitiesWithoutTags::Tags' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemComponent.CancelAbilityByClass
// 0x0010 (0x0010 - 0x0000)
struct GBAbilitySystemComponent_CancelAbilityByClass final
{
public:
	TSubclassOf<class UGameplayAbility>           InAbilityToCancel;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemComponent_CancelAbilityByClass) == 0x000008, "Wrong alignment on GBAbilitySystemComponent_CancelAbilityByClass");
static_assert(sizeof(GBAbilitySystemComponent_CancelAbilityByClass) == 0x000010, "Wrong size on GBAbilitySystemComponent_CancelAbilityByClass");
static_assert(offsetof(GBAbilitySystemComponent_CancelAbilityByClass, InAbilityToCancel) == 0x000000, "Member 'GBAbilitySystemComponent_CancelAbilityByClass::InAbilityToCancel' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemComponent_CancelAbilityByClass, ReturnValue) == 0x000008, "Member 'GBAbilitySystemComponent_CancelAbilityByClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemComponent.SetGameplayEffectDurationHandle
// 0x0010 (0x0010 - 0x0000)
struct GBAbilitySystemComponent_SetGameplayEffectDurationHandle final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDuration;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAbilitySystemComponent_SetGameplayEffectDurationHandle) == 0x000004, "Wrong alignment on GBAbilitySystemComponent_SetGameplayEffectDurationHandle");
static_assert(sizeof(GBAbilitySystemComponent_SetGameplayEffectDurationHandle) == 0x000010, "Wrong size on GBAbilitySystemComponent_SetGameplayEffectDurationHandle");
static_assert(offsetof(GBAbilitySystemComponent_SetGameplayEffectDurationHandle, Handle) == 0x000000, "Member 'GBAbilitySystemComponent_SetGameplayEffectDurationHandle::Handle' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemComponent_SetGameplayEffectDurationHandle, NewDuration) == 0x000008, "Member 'GBAbilitySystemComponent_SetGameplayEffectDurationHandle::NewDuration' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemComponent_SetGameplayEffectDurationHandle, ReturnValue) == 0x00000C, "Member 'GBAbilitySystemComponent_SetGameplayEffectDurationHandle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemComponent.UnBlockAbilitiesWithoutTags
// 0x0020 (0x0020 - 0x0000)
struct GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags) == 0x000008, "Wrong alignment on GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags");
static_assert(sizeof(GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags) == 0x000020, "Wrong size on GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags");
static_assert(offsetof(GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags, Tags) == 0x000000, "Member 'GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags::Tags' has a wrong offset!");

// Function GroundBranch.GBAbilitySystemComponent.GetFirstActiveGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct GBAbilitySystemComponent_GetFirstActiveGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilitySystemComponent_GetFirstActiveGameplayEffect) == 0x000008, "Wrong alignment on GBAbilitySystemComponent_GetFirstActiveGameplayEffect");
static_assert(sizeof(GBAbilitySystemComponent_GetFirstActiveGameplayEffect) == 0x000010, "Wrong size on GBAbilitySystemComponent_GetFirstActiveGameplayEffect");
static_assert(offsetof(GBAbilitySystemComponent_GetFirstActiveGameplayEffect, GameplayEffectClass) == 0x000000, "Member 'GBAbilitySystemComponent_GetFirstActiveGameplayEffect::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(GBAbilitySystemComponent_GetFirstActiveGameplayEffect, ReturnValue) == 0x000008, "Member 'GBAbilitySystemComponent_GetFirstActiveGameplayEffect::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletMovementComponent.GetDragCoefficient
// 0x0008 (0x0008 - 0x0000)
struct GBBulletMovementComponent_GetDragCoefficient final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletMovementComponent_GetDragCoefficient) == 0x000004, "Wrong alignment on GBBulletMovementComponent_GetDragCoefficient");
static_assert(sizeof(GBBulletMovementComponent_GetDragCoefficient) == 0x000008, "Wrong size on GBBulletMovementComponent_GetDragCoefficient");
static_assert(offsetof(GBBulletMovementComponent_GetDragCoefficient, Speed) == 0x000000, "Member 'GBBulletMovementComponent_GetDragCoefficient::Speed' has a wrong offset!");
static_assert(offsetof(GBBulletMovementComponent_GetDragCoefficient, ReturnValue) == 0x000004, "Member 'GBBulletMovementComponent_GetDragCoefficient::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_CharacterWalkTo.CharacterWalkTo
// 0x0040 (0x0040 - 0x0000)
struct GBAbilityTask_CharacterWalkTo_CharacterWalkTo final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationRate;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFailedMoveTime;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGBAbilityTask_CharacterWalkTo*         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo) == 0x000008, "Wrong alignment on GBAbilityTask_CharacterWalkTo_CharacterWalkTo");
static_assert(sizeof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo) == 0x000040, "Wrong size on GBAbilityTask_CharacterWalkTo_CharacterWalkTo");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, OwningAbility) == 0x000000, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, TaskInstanceName) == 0x000008, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, Location) == 0x000010, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::Location' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, Radius) == 0x00001C, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::Radius' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, Rotation) == 0x000020, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::Rotation' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, RotationRate) == 0x00002C, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::RotationRate' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, MaxFailedMoveTime) == 0x000030, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::MaxFailedMoveTime' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_CharacterWalkTo_CharacterWalkTo, ReturnValue) == 0x000038, "Member 'GBAbilityTask_CharacterWalkTo_CharacterWalkTo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SpawnBullet
// 0x0038 (0x0038 - 0x0000)
struct GBBulletProjectile_SpawnBullet final
{
public:
	class AActor*                                 BulletOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGBBulletProjectile>        BulletClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotDirection;                                     // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityModifier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulated;                                        // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBBulletProjectile*                    ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SpawnBullet) == 0x000008, "Wrong alignment on GBBulletProjectile_SpawnBullet");
static_assert(sizeof(GBBulletProjectile_SpawnBullet) == 0x000038, "Wrong size on GBBulletProjectile_SpawnBullet");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, BulletOwner) == 0x000000, "Member 'GBBulletProjectile_SpawnBullet::BulletOwner' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, BulletClass) == 0x000008, "Member 'GBBulletProjectile_SpawnBullet::BulletClass' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, SpawnLocation) == 0x000010, "Member 'GBBulletProjectile_SpawnBullet::SpawnLocation' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, ShotDirection) == 0x00001C, "Member 'GBBulletProjectile_SpawnBullet::ShotDirection' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, VelocityModifier) == 0x000028, "Member 'GBBulletProjectile_SpawnBullet::VelocityModifier' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, bSimulated) == 0x00002C, "Member 'GBBulletProjectile_SpawnBullet::bSimulated' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SpawnBullet, ReturnValue) == 0x000030, "Member 'GBBulletProjectile_SpawnBullet::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.CharacterImpact
// 0x0090 (0x0090 - 0x0000)
struct GBBulletProjectile_CharacterImpact final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_CharacterImpact) == 0x000008, "Wrong alignment on GBBulletProjectile_CharacterImpact");
static_assert(sizeof(GBBulletProjectile_CharacterImpact) == 0x000090, "Wrong size on GBBulletProjectile_CharacterImpact");
static_assert(offsetof(GBBulletProjectile_CharacterImpact, Character) == 0x000000, "Member 'GBBulletProjectile_CharacterImpact::Character' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_CharacterImpact, HitResult) == 0x000008, "Member 'GBBulletProjectile_CharacterImpact::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.ImpactDamage
// 0x0088 (0x0088 - 0x0000)
struct GBBulletProjectile_ImpactDamage final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_ImpactDamage) == 0x000004, "Wrong alignment on GBBulletProjectile_ImpactDamage");
static_assert(sizeof(GBBulletProjectile_ImpactDamage) == 0x000088, "Wrong size on GBBulletProjectile_ImpactDamage");
static_assert(offsetof(GBBulletProjectile_ImpactDamage, HitResult) == 0x000000, "Member 'GBBulletProjectile_ImpactDamage::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.ImpactEffect
// 0x008C (0x008C - 0x0000)
struct GBBulletProjectile_ImpactEffect final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bExiting;                                          // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBBulletProjectile_ImpactEffect) == 0x000004, "Wrong alignment on GBBulletProjectile_ImpactEffect");
static_assert(sizeof(GBBulletProjectile_ImpactEffect) == 0x00008C, "Wrong size on GBBulletProjectile_ImpactEffect");
static_assert(offsetof(GBBulletProjectile_ImpactEffect, HitResult) == 0x000000, "Member 'GBBulletProjectile_ImpactEffect::HitResult' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_ImpactEffect, bExiting) == 0x000088, "Member 'GBBulletProjectile_ImpactEffect::bExiting' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.OnBulletWarnSphereEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct GBBulletProjectile_OnBulletWarnSphereEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBBulletProjectile_OnBulletWarnSphereEndOverlap) == 0x000008, "Wrong alignment on GBBulletProjectile_OnBulletWarnSphereEndOverlap");
static_assert(sizeof(GBBulletProjectile_OnBulletWarnSphereEndOverlap) == 0x000020, "Wrong size on GBBulletProjectile_OnBulletWarnSphereEndOverlap");
static_assert(offsetof(GBBulletProjectile_OnBulletWarnSphereEndOverlap, OverlappedComponent) == 0x000000, "Member 'GBBulletProjectile_OnBulletWarnSphereEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_OnBulletWarnSphereEndOverlap, OtherActor) == 0x000008, "Member 'GBBulletProjectile_OnBulletWarnSphereEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_OnBulletWarnSphereEndOverlap, OtherComp) == 0x000010, "Member 'GBBulletProjectile_OnBulletWarnSphereEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_OnBulletWarnSphereEndOverlap, OtherBodyIndex) == 0x000018, "Member 'GBBulletProjectile_OnBulletWarnSphereEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.OnExit
// 0x0088 (0x0088 - 0x0000)
struct GBBulletProjectile_OnExit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_OnExit) == 0x000004, "Wrong alignment on GBBulletProjectile_OnExit");
static_assert(sizeof(GBBulletProjectile_OnExit) == 0x000088, "Wrong size on GBBulletProjectile_OnExit");
static_assert(offsetof(GBBulletProjectile_OnExit, HitResult) == 0x000000, "Member 'GBBulletProjectile_OnExit::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.OnExitEvent
// 0x0088 (0x0088 - 0x0000)
struct GBBulletProjectile_OnExitEvent final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_OnExitEvent) == 0x000004, "Wrong alignment on GBBulletProjectile_OnExitEvent");
static_assert(sizeof(GBBulletProjectile_OnExitEvent) == 0x000088, "Wrong size on GBBulletProjectile_OnExitEvent");
static_assert(offsetof(GBBulletProjectile_OnExitEvent, HitResult) == 0x000000, "Member 'GBBulletProjectile_OnExitEvent::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.OnImpact
// 0x0088 (0x0088 - 0x0000)
struct GBBulletProjectile_OnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_OnImpact) == 0x000004, "Wrong alignment on GBBulletProjectile_OnImpact");
static_assert(sizeof(GBBulletProjectile_OnImpact) == 0x000088, "Wrong size on GBBulletProjectile_OnImpact");
static_assert(offsetof(GBBulletProjectile_OnImpact, HitResult) == 0x000000, "Member 'GBBulletProjectile_OnImpact::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.OnStop
// 0x0088 (0x0088 - 0x0000)
struct GBBulletProjectile_OnStop final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_OnStop) == 0x000004, "Wrong alignment on GBBulletProjectile_OnStop");
static_assert(sizeof(GBBulletProjectile_OnStop) == 0x000088, "Wrong size on GBBulletProjectile_OnStop");
static_assert(offsetof(GBBulletProjectile_OnStop, HitResult) == 0x000000, "Member 'GBBulletProjectile_OnStop::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.OnStopEvent
// 0x0088 (0x0088 - 0x0000)
struct GBBulletProjectile_OnStopEvent final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_OnStopEvent) == 0x000004, "Wrong alignment on GBBulletProjectile_OnStopEvent");
static_assert(sizeof(GBBulletProjectile_OnStopEvent) == 0x000088, "Wrong size on GBBulletProjectile_OnStopEvent");
static_assert(offsetof(GBBulletProjectile_OnStopEvent, HitResult) == 0x000000, "Member 'GBBulletProjectile_OnStopEvent::HitResult' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetBulletIndex
// 0x0001 (0x0001 - 0x0000)
struct GBBulletProjectile_SetBulletIndex final
{
public:
	uint8                                         NewBulletIndex;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetBulletIndex) == 0x000001, "Wrong alignment on GBBulletProjectile_SetBulletIndex");
static_assert(sizeof(GBBulletProjectile_SetBulletIndex) == 0x000001, "Wrong size on GBBulletProjectile_SetBulletIndex");
static_assert(offsetof(GBBulletProjectile_SetBulletIndex, NewBulletIndex) == 0x000000, "Member 'GBBulletProjectile_SetBulletIndex::NewBulletIndex' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetDragCoefficientOverride
// 0x0004 (0x0004 - 0x0000)
struct GBBulletProjectile_SetDragCoefficientOverride final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetDragCoefficientOverride) == 0x000004, "Wrong alignment on GBBulletProjectile_SetDragCoefficientOverride");
static_assert(sizeof(GBBulletProjectile_SetDragCoefficientOverride) == 0x000004, "Wrong size on GBBulletProjectile_SetDragCoefficientOverride");
static_assert(offsetof(GBBulletProjectile_SetDragCoefficientOverride, NewValue) == 0x000000, "Member 'GBBulletProjectile_SetDragCoefficientOverride::NewValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetDumpedKEToDamageScale
// 0x0004 (0x0004 - 0x0000)
struct GBBulletProjectile_SetDumpedKEToDamageScale final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetDumpedKEToDamageScale) == 0x000004, "Wrong alignment on GBBulletProjectile_SetDumpedKEToDamageScale");
static_assert(sizeof(GBBulletProjectile_SetDumpedKEToDamageScale) == 0x000004, "Wrong size on GBBulletProjectile_SetDumpedKEToDamageScale");
static_assert(offsetof(GBBulletProjectile_SetDumpedKEToDamageScale, NewValue) == 0x000000, "Member 'GBBulletProjectile_SetDumpedKEToDamageScale::NewValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetDumpedKEToDamageScaleDeviation
// 0x0004 (0x0004 - 0x0000)
struct GBBulletProjectile_SetDumpedKEToDamageScaleDeviation final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetDumpedKEToDamageScaleDeviation) == 0x000004, "Wrong alignment on GBBulletProjectile_SetDumpedKEToDamageScaleDeviation");
static_assert(sizeof(GBBulletProjectile_SetDumpedKEToDamageScaleDeviation) == 0x000004, "Wrong size on GBBulletProjectile_SetDumpedKEToDamageScaleDeviation");
static_assert(offsetof(GBBulletProjectile_SetDumpedKEToDamageScaleDeviation, NewValue) == 0x000000, "Member 'GBBulletProjectile_SetDumpedKEToDamageScaleDeviation::NewValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetParentBullet
// 0x0008 (0x0008 - 0x0000)
struct GBBulletProjectile_SetParentBullet final
{
public:
	class AGBBulletProjectile*                    NewParentBullet;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetParentBullet) == 0x000008, "Wrong alignment on GBBulletProjectile_SetParentBullet");
static_assert(sizeof(GBBulletProjectile_SetParentBullet) == 0x000008, "Wrong size on GBBulletProjectile_SetParentBullet");
static_assert(offsetof(GBBulletProjectile_SetParentBullet, NewParentBullet) == 0x000000, "Member 'GBBulletProjectile_SetParentBullet::NewParentBullet' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetStatKey
// 0x0010 (0x0010 - 0x0000)
struct GBBulletProjectile_SetStatKey final
{
public:
	class FString                                 NewStatKey;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetStatKey) == 0x000008, "Wrong alignment on GBBulletProjectile_SetStatKey");
static_assert(sizeof(GBBulletProjectile_SetStatKey) == 0x000010, "Wrong size on GBBulletProjectile_SetStatKey");
static_assert(offsetof(GBBulletProjectile_SetStatKey, NewStatKey) == 0x000000, "Member 'GBBulletProjectile_SetStatKey::NewStatKey' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SetTracerColourIndex
// 0x0001 (0x0001 - 0x0000)
struct GBBulletProjectile_SetTracerColourIndex final
{
public:
	uint8                                         NewTracerColourIndex;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_SetTracerColourIndex) == 0x000001, "Wrong alignment on GBBulletProjectile_SetTracerColourIndex");
static_assert(sizeof(GBBulletProjectile_SetTracerColourIndex) == 0x000001, "Wrong size on GBBulletProjectile_SetTracerColourIndex");
static_assert(offsetof(GBBulletProjectile_SetTracerColourIndex, NewTracerColourIndex) == 0x000000, "Member 'GBBulletProjectile_SetTracerColourIndex::NewTracerColourIndex' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.SimulateTrajectory
// 0x0060 (0x0060 - 0x0000)
struct GBBulletProjectile_SimulateTrajectory final
{
public:
	struct FTransform                             SimTM;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SimTime;                                           // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimTimeStep;                                       // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        OutTrajectoryPoints;                               // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOutSimulatedImpact;                               // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBBulletProjectile_SimulateTrajectory) == 0x000010, "Wrong alignment on GBBulletProjectile_SimulateTrajectory");
static_assert(sizeof(GBBulletProjectile_SimulateTrajectory) == 0x000060, "Wrong size on GBBulletProjectile_SimulateTrajectory");
static_assert(offsetof(GBBulletProjectile_SimulateTrajectory, SimTM) == 0x000000, "Member 'GBBulletProjectile_SimulateTrajectory::SimTM' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SimulateTrajectory, SimTime) == 0x000030, "Member 'GBBulletProjectile_SimulateTrajectory::SimTime' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SimulateTrajectory, SimTimeStep) == 0x000034, "Member 'GBBulletProjectile_SimulateTrajectory::SimTimeStep' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SimulateTrajectory, MaxDistance) == 0x000038, "Member 'GBBulletProjectile_SimulateTrajectory::MaxDistance' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SimulateTrajectory, OutTrajectoryPoints) == 0x000040, "Member 'GBBulletProjectile_SimulateTrajectory::OutTrajectoryPoints' has a wrong offset!");
static_assert(offsetof(GBBulletProjectile_SimulateTrajectory, bOutSimulatedImpact) == 0x000050, "Member 'GBBulletProjectile_SimulateTrajectory::bOutSimulatedImpact' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetBulletIndex
// 0x0001 (0x0001 - 0x0000)
struct GBBulletProjectile_GetBulletIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetBulletIndex) == 0x000001, "Wrong alignment on GBBulletProjectile_GetBulletIndex");
static_assert(sizeof(GBBulletProjectile_GetBulletIndex) == 0x000001, "Wrong size on GBBulletProjectile_GetBulletIndex");
static_assert(offsetof(GBBulletProjectile_GetBulletIndex, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetBulletIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetBulletMovementComp
// 0x0008 (0x0008 - 0x0000)
struct GBBulletProjectile_GetBulletMovementComp final
{
public:
	class UGBBulletMovementComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetBulletMovementComp) == 0x000008, "Wrong alignment on GBBulletProjectile_GetBulletMovementComp");
static_assert(sizeof(GBBulletProjectile_GetBulletMovementComp) == 0x000008, "Wrong size on GBBulletProjectile_GetBulletMovementComp");
static_assert(offsetof(GBBulletProjectile_GetBulletMovementComp, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetBulletMovementComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetDumpedKEToDamageScale
// 0x0004 (0x0004 - 0x0000)
struct GBBulletProjectile_GetDumpedKEToDamageScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetDumpedKEToDamageScale) == 0x000004, "Wrong alignment on GBBulletProjectile_GetDumpedKEToDamageScale");
static_assert(sizeof(GBBulletProjectile_GetDumpedKEToDamageScale) == 0x000004, "Wrong size on GBBulletProjectile_GetDumpedKEToDamageScale");
static_assert(offsetof(GBBulletProjectile_GetDumpedKEToDamageScale, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetDumpedKEToDamageScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetDumpedKEToDamageScaleDeviation
// 0x0004 (0x0004 - 0x0000)
struct GBBulletProjectile_GetDumpedKEToDamageScaleDeviation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetDumpedKEToDamageScaleDeviation) == 0x000004, "Wrong alignment on GBBulletProjectile_GetDumpedKEToDamageScaleDeviation");
static_assert(sizeof(GBBulletProjectile_GetDumpedKEToDamageScaleDeviation) == 0x000004, "Wrong size on GBBulletProjectile_GetDumpedKEToDamageScaleDeviation");
static_assert(offsetof(GBBulletProjectile_GetDumpedKEToDamageScaleDeviation, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetDumpedKEToDamageScaleDeviation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetImpactComp
// 0x0008 (0x0008 - 0x0000)
struct GBBulletProjectile_GetImpactComp final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetImpactComp) == 0x000008, "Wrong alignment on GBBulletProjectile_GetImpactComp");
static_assert(sizeof(GBBulletProjectile_GetImpactComp) == 0x000008, "Wrong size on GBBulletProjectile_GetImpactComp");
static_assert(offsetof(GBBulletProjectile_GetImpactComp, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetImpactComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetStatKey
// 0x0010 (0x0010 - 0x0000)
struct GBBulletProjectile_GetStatKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetStatKey) == 0x000008, "Wrong alignment on GBBulletProjectile_GetStatKey");
static_assert(sizeof(GBBulletProjectile_GetStatKey) == 0x000010, "Wrong size on GBBulletProjectile_GetStatKey");
static_assert(offsetof(GBBulletProjectile_GetStatKey, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetStatKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.GetTracerColourIndex
// 0x0001 (0x0001 - 0x0000)
struct GBBulletProjectile_GetTracerColourIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_GetTracerColourIndex) == 0x000001, "Wrong alignment on GBBulletProjectile_GetTracerColourIndex");
static_assert(sizeof(GBBulletProjectile_GetTracerColourIndex) == 0x000001, "Wrong size on GBBulletProjectile_GetTracerColourIndex");
static_assert(offsetof(GBBulletProjectile_GetTracerColourIndex, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_GetTracerColourIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.IsDebuggingBullets
// 0x0001 (0x0001 - 0x0000)
struct GBBulletProjectile_IsDebuggingBullets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_IsDebuggingBullets) == 0x000001, "Wrong alignment on GBBulletProjectile_IsDebuggingBullets");
static_assert(sizeof(GBBulletProjectile_IsDebuggingBullets) == 0x000001, "Wrong size on GBBulletProjectile_IsDebuggingBullets");
static_assert(offsetof(GBBulletProjectile_IsDebuggingBullets, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_IsDebuggingBullets::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBulletProjectile.IsSimulatedOnly
// 0x0001 (0x0001 - 0x0000)
struct GBBulletProjectile_IsSimulatedOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBulletProjectile_IsSimulatedOnly) == 0x000001, "Wrong alignment on GBBulletProjectile_IsSimulatedOnly");
static_assert(sizeof(GBBulletProjectile_IsSimulatedOnly) == 0x000001, "Wrong size on GBBulletProjectile_IsSimulatedOnly");
static_assert(offsetof(GBBulletProjectile_IsSimulatedOnly, ReturnValue) == 0x000000, "Member 'GBBulletProjectile_IsSimulatedOnly::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_Tick.Tick
// 0x0018 (0x0018 - 0x0000)
struct GBAbilityTask_Tick_Tick final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBAbilityTask_Tick*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_Tick_Tick) == 0x000008, "Wrong alignment on GBAbilityTask_Tick_Tick");
static_assert(sizeof(GBAbilityTask_Tick_Tick) == 0x000018, "Wrong size on GBAbilityTask_Tick_Tick");
static_assert(offsetof(GBAbilityTask_Tick_Tick, OwningAbility) == 0x000000, "Member 'GBAbilityTask_Tick_Tick::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_Tick_Tick, TaskInstanceName) == 0x000008, "Member 'GBAbilityTask_Tick_Tick::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_Tick_Tick, ReturnValue) == 0x000010, "Member 'GBAbilityTask_Tick_Tick::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.WaitForAbilityEnded
// 0x0028 (0x0028 - 0x0000)
struct GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGBAbilityTask_WaitAbilityEnded*        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded) == 0x000008, "Wrong alignment on GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded");
static_assert(sizeof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded) == 0x000028, "Wrong size on GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded, OwningAbility) == 0x000000, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded, WithTag) == 0x000008, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded::WithTag' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded, WithoutTag) == 0x000010, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded::WithoutTag' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded, IncludeTriggeredAbilities) == 0x000018, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded::IncludeTriggeredAbilities' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded, TriggerOnce) == 0x000019, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded::TriggerOnce' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded, ReturnValue) == 0x000020, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.WaitForAbilityEnded_Query
// 0x0060 (0x0060 - 0x0000)
struct GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Query;                                             // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGBAbilityTask_WaitAbilityEnded*        ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query) == 0x000008, "Wrong alignment on GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query");
static_assert(sizeof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query) == 0x000060, "Wrong size on GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query, OwningAbility) == 0x000000, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query, Query) == 0x000008, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query::Query' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query, IncludeTriggeredAbilities) == 0x000050, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query::IncludeTriggeredAbilities' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query, TriggerOnce) == 0x000051, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query::TriggerOnce' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query, ReturnValue) == 0x000058, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.WaitForAbilityEndedWithTagRequirements
// 0x0058 (0x0058 - 0x0000)
struct GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGBAbilityTask_WaitAbilityEnded*        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements) == 0x000008, "Wrong alignment on GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements");
static_assert(sizeof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements) == 0x000058, "Wrong size on GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements, OwningAbility) == 0x000000, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements, TagRequirements) == 0x000008, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements::TagRequirements' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements, IncludeTriggeredAbilities) == 0x000048, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements::IncludeTriggeredAbilities' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements, TriggerOnce) == 0x000049, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements::TriggerOnce' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements, ReturnValue) == 0x000050, "Member 'GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.OnAbilityEnded
// 0x0008 (0x0008 - 0x0000)
struct GBAbilityTask_WaitAbilityEnded_OnAbilityEnded final
{
public:
	class UGameplayAbility*                       EndedAbility;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitAbilityEnded_OnAbilityEnded) == 0x000008, "Wrong alignment on GBAbilityTask_WaitAbilityEnded_OnAbilityEnded");
static_assert(sizeof(GBAbilityTask_WaitAbilityEnded_OnAbilityEnded) == 0x000008, "Wrong size on GBAbilityTask_WaitAbilityEnded_OnAbilityEnded");
static_assert(offsetof(GBAbilityTask_WaitAbilityEnded_OnAbilityEnded, EndedAbility) == 0x000000, "Member 'GBAbilityTask_WaitAbilityEnded_OnAbilityEnded::EndedAbility' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.BlueprintAddedToCamera
// 0x0008 (0x0008 - 0x0000)
struct GBCameraModifier_BlueprintAddedToCamera final
{
public:
	class AGBPlayerCameraManager*                 GBPlayerCameraManager;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCameraModifier_BlueprintAddedToCamera) == 0x000008, "Wrong alignment on GBCameraModifier_BlueprintAddedToCamera");
static_assert(sizeof(GBCameraModifier_BlueprintAddedToCamera) == 0x000008, "Wrong size on GBCameraModifier_BlueprintAddedToCamera");
static_assert(offsetof(GBCameraModifier_BlueprintAddedToCamera, GBPlayerCameraManager) == 0x000000, "Member 'GBCameraModifier_BlueprintAddedToCamera::GBPlayerCameraManager' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.BlueprintPreApplyCameraModifier
// 0x0010 (0x0010 - 0x0000)
struct GBCameraModifier_BlueprintPreApplyCameraModifier final
{
public:
	class AGBPlayerCameraManager*                 GBPlayerCameraManager;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCameraModifier_BlueprintPreApplyCameraModifier) == 0x000008, "Wrong alignment on GBCameraModifier_BlueprintPreApplyCameraModifier");
static_assert(sizeof(GBCameraModifier_BlueprintPreApplyCameraModifier) == 0x000010, "Wrong size on GBCameraModifier_BlueprintPreApplyCameraModifier");
static_assert(offsetof(GBCameraModifier_BlueprintPreApplyCameraModifier, GBPlayerCameraManager) == 0x000000, "Member 'GBCameraModifier_BlueprintPreApplyCameraModifier::GBPlayerCameraManager' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_BlueprintPreApplyCameraModifier, DeltaTime) == 0x000008, "Member 'GBCameraModifier_BlueprintPreApplyCameraModifier::DeltaTime' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.BlueprintProcessViewRotation
// 0x0028 (0x0028 - 0x0000)
struct GBCameraModifier_BlueprintProcessViewRotation final
{
public:
	class AActor*                                 ViewTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutViewRotation;                                   // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OutDeltaRot;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCameraModifier_BlueprintProcessViewRotation) == 0x000008, "Wrong alignment on GBCameraModifier_BlueprintProcessViewRotation");
static_assert(sizeof(GBCameraModifier_BlueprintProcessViewRotation) == 0x000028, "Wrong size on GBCameraModifier_BlueprintProcessViewRotation");
static_assert(offsetof(GBCameraModifier_BlueprintProcessViewRotation, ViewTarget) == 0x000000, "Member 'GBCameraModifier_BlueprintProcessViewRotation::ViewTarget' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_BlueprintProcessViewRotation, DeltaTime) == 0x000008, "Member 'GBCameraModifier_BlueprintProcessViewRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_BlueprintProcessViewRotation, OutViewRotation) == 0x00000C, "Member 'GBCameraModifier_BlueprintProcessViewRotation::OutViewRotation' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_BlueprintProcessViewRotation, OutDeltaRot) == 0x000018, "Member 'GBCameraModifier_BlueprintProcessViewRotation::OutDeltaRot' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_BlueprintProcessViewRotation, ReturnValue) == 0x000024, "Member 'GBCameraModifier_BlueprintProcessViewRotation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.BlueprintRemovedFromCamera
// 0x0008 (0x0008 - 0x0000)
struct GBCameraModifier_BlueprintRemovedFromCamera final
{
public:
	class AGBPlayerCameraManager*                 GBPlayerCameraManager;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCameraModifier_BlueprintRemovedFromCamera) == 0x000008, "Wrong alignment on GBCameraModifier_BlueprintRemovedFromCamera");
static_assert(sizeof(GBCameraModifier_BlueprintRemovedFromCamera) == 0x000008, "Wrong size on GBCameraModifier_BlueprintRemovedFromCamera");
static_assert(offsetof(GBCameraModifier_BlueprintRemovedFromCamera, GBPlayerCameraManager) == 0x000000, "Member 'GBCameraModifier_BlueprintRemovedFromCamera::GBPlayerCameraManager' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.OnCameraStyleChanged
// 0x0010 (0x0010 - 0x0000)
struct GBCameraModifier_OnCameraStyleChanged final
{
public:
	class FName                                   OldCameraStyle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewCameraStyle;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCameraModifier_OnCameraStyleChanged) == 0x000004, "Wrong alignment on GBCameraModifier_OnCameraStyleChanged");
static_assert(sizeof(GBCameraModifier_OnCameraStyleChanged) == 0x000010, "Wrong size on GBCameraModifier_OnCameraStyleChanged");
static_assert(offsetof(GBCameraModifier_OnCameraStyleChanged, OldCameraStyle) == 0x000000, "Member 'GBCameraModifier_OnCameraStyleChanged::OldCameraStyle' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_OnCameraStyleChanged, NewCameraStyle) == 0x000008, "Member 'GBCameraModifier_OnCameraStyleChanged::NewCameraStyle' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.OnCameraStyleChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GBCameraModifier_OnCameraStyleChangedEvent final
{
public:
	class FName                                   OldCameraStyle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewCameraStyle;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCameraModifier_OnCameraStyleChangedEvent) == 0x000004, "Wrong alignment on GBCameraModifier_OnCameraStyleChangedEvent");
static_assert(sizeof(GBCameraModifier_OnCameraStyleChangedEvent) == 0x000010, "Wrong size on GBCameraModifier_OnCameraStyleChangedEvent");
static_assert(offsetof(GBCameraModifier_OnCameraStyleChangedEvent, OldCameraStyle) == 0x000000, "Member 'GBCameraModifier_OnCameraStyleChangedEvent::OldCameraStyle' has a wrong offset!");
static_assert(offsetof(GBCameraModifier_OnCameraStyleChangedEvent, NewCameraStyle) == 0x000008, "Member 'GBCameraModifier_OnCameraStyleChangedEvent::NewCameraStyle' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.GetGBPlayerCameraManager
// 0x0008 (0x0008 - 0x0000)
struct GBCameraModifier_GetGBPlayerCameraManager final
{
public:
	class AGBPlayerCameraManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCameraModifier_GetGBPlayerCameraManager) == 0x000008, "Wrong alignment on GBCameraModifier_GetGBPlayerCameraManager");
static_assert(sizeof(GBCameraModifier_GetGBPlayerCameraManager) == 0x000008, "Wrong size on GBCameraModifier_GetGBPlayerCameraManager");
static_assert(offsetof(GBCameraModifier_GetGBPlayerCameraManager, ReturnValue) == 0x000000, "Member 'GBCameraModifier_GetGBPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCameraModifier.GetGBPlayerController
// 0x0008 (0x0008 - 0x0000)
struct GBCameraModifier_GetGBPlayerController final
{
public:
	class AGBPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCameraModifier_GetGBPlayerController) == 0x000008, "Wrong alignment on GBCameraModifier_GetGBPlayerController");
static_assert(sizeof(GBCameraModifier_GetGBPlayerController) == 0x000008, "Wrong size on GBCameraModifier_GetGBPlayerController");
static_assert(offsetof(GBCameraModifier_GetGBPlayerController, ReturnValue) == 0x000000, "Member 'GBCameraModifier_GetGBPlayerController::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitActionPress.WaitActionPress
// 0x0020 (0x0020 - 0x0000)
struct GBAbilityTask_WaitActionPress_WaitActionPress final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestAlreadyPressed;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGBAbilityTask_WaitActionPress*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitActionPress_WaitActionPress) == 0x000008, "Wrong alignment on GBAbilityTask_WaitActionPress_WaitActionPress");
static_assert(sizeof(GBAbilityTask_WaitActionPress_WaitActionPress) == 0x000020, "Wrong size on GBAbilityTask_WaitActionPress_WaitActionPress");
static_assert(offsetof(GBAbilityTask_WaitActionPress_WaitActionPress, OwningAbility) == 0x000000, "Member 'GBAbilityTask_WaitActionPress_WaitActionPress::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitActionPress_WaitActionPress, ActionName) == 0x000008, "Member 'GBAbilityTask_WaitActionPress_WaitActionPress::ActionName' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitActionPress_WaitActionPress, bTestAlreadyPressed) == 0x000010, "Member 'GBAbilityTask_WaitActionPress_WaitActionPress::bTestAlreadyPressed' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitActionPress_WaitActionPress, ReturnValue) == 0x000018, "Member 'GBAbilityTask_WaitActionPress_WaitActionPress::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.Get
// 0x0008 (0x0008 - 0x0000)
struct GBCampaignSettings_Get final
{
public:
	class UGBCampaignSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_Get) == 0x000008, "Wrong alignment on GBCampaignSettings_Get");
static_assert(sizeof(GBCampaignSettings_Get) == 0x000008, "Wrong size on GBCampaignSettings_Get");
static_assert(offsetof(GBCampaignSettings_Get, ReturnValue) == 0x000000, "Member 'GBCampaignSettings_Get::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.AddOperatorToRoster
// 0x00B0 (0x00B0 - 0x0000)
struct GBCampaignSettings_AddOperatorToRoster final
{
public:
	struct FGBOperatorDetails                     OperatorDetails;                                   // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUpdateConfig;                                     // 0x00A8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCampaignSettings_AddOperatorToRoster) == 0x000008, "Wrong alignment on GBCampaignSettings_AddOperatorToRoster");
static_assert(sizeof(GBCampaignSettings_AddOperatorToRoster) == 0x0000B0, "Wrong size on GBCampaignSettings_AddOperatorToRoster");
static_assert(offsetof(GBCampaignSettings_AddOperatorToRoster, OperatorDetails) == 0x000000, "Member 'GBCampaignSettings_AddOperatorToRoster::OperatorDetails' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_AddOperatorToRoster, bUpdateConfig) == 0x0000A8, "Member 'GBCampaignSettings_AddOperatorToRoster::bUpdateConfig' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetAvailableCodenames
// 0x0010 (0x0010 - 0x0000)
struct GBCampaignSettings_GetAvailableCodenames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_GetAvailableCodenames) == 0x000008, "Wrong alignment on GBCampaignSettings_GetAvailableCodenames");
static_assert(sizeof(GBCampaignSettings_GetAvailableCodenames) == 0x000010, "Wrong size on GBCampaignSettings_GetAvailableCodenames");
static_assert(offsetof(GBCampaignSettings_GetAvailableCodenames, ReturnValue) == 0x000000, "Member 'GBCampaignSettings_GetAvailableCodenames::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetCompletionDetailsForMission
// 0x0020 (0x0020 - 0x0000)
struct GBCampaignSettings_GetCompletionDetailsForMission final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBMissionCompletionDetails            ReturnValue;                                       // 0x000C(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_GetCompletionDetailsForMission) == 0x000004, "Wrong alignment on GBCampaignSettings_GetCompletionDetailsForMission");
static_assert(sizeof(GBCampaignSettings_GetCompletionDetailsForMission) == 0x000020, "Wrong size on GBCampaignSettings_GetCompletionDetailsForMission");
static_assert(offsetof(GBCampaignSettings_GetCompletionDetailsForMission, InHotspotCodename) == 0x000000, "Member 'GBCampaignSettings_GetCompletionDetailsForMission::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_GetCompletionDetailsForMission, InMissionSequenceNumber) == 0x000008, "Member 'GBCampaignSettings_GetCompletionDetailsForMission::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_GetCompletionDetailsForMission, ReturnValue) == 0x00000C, "Member 'GBCampaignSettings_GetCompletionDetailsForMission::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetCompletionForHotspot
// 0x0010 (0x0010 - 0x0000)
struct GBCampaignSettings_GetCompletionForHotspot final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSinglePlayerCompletion;                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCoopCompletion;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_GetCompletionForHotspot) == 0x000004, "Wrong alignment on GBCampaignSettings_GetCompletionForHotspot");
static_assert(sizeof(GBCampaignSettings_GetCompletionForHotspot) == 0x000010, "Wrong size on GBCampaignSettings_GetCompletionForHotspot");
static_assert(offsetof(GBCampaignSettings_GetCompletionForHotspot, InHotspotCodename) == 0x000000, "Member 'GBCampaignSettings_GetCompletionForHotspot::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_GetCompletionForHotspot, OutSinglePlayerCompletion) == 0x000008, "Member 'GBCampaignSettings_GetCompletionForHotspot::OutSinglePlayerCompletion' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_GetCompletionForHotspot, OutCoopCompletion) == 0x00000C, "Member 'GBCampaignSettings_GetCompletionForHotspot::OutCoopCompletion' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetIndexInOperatorDetailsList
// 0x00C0 (0x00C0 - 0x0000)
struct GBCampaignSettings_GetIndexInOperatorDetailsList final
{
public:
	TArray<struct FGBOperatorDetails>             OperatorList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGBOperatorDetails                     OperatorDetails;                                   // 0x0010(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCampaignSettings_GetIndexInOperatorDetailsList) == 0x000008, "Wrong alignment on GBCampaignSettings_GetIndexInOperatorDetailsList");
static_assert(sizeof(GBCampaignSettings_GetIndexInOperatorDetailsList) == 0x0000C0, "Wrong size on GBCampaignSettings_GetIndexInOperatorDetailsList");
static_assert(offsetof(GBCampaignSettings_GetIndexInOperatorDetailsList, OperatorList) == 0x000000, "Member 'GBCampaignSettings_GetIndexInOperatorDetailsList::OperatorList' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_GetIndexInOperatorDetailsList, OperatorDetails) == 0x000010, "Member 'GBCampaignSettings_GetIndexInOperatorDetailsList::OperatorDetails' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_GetIndexInOperatorDetailsList, ReturnValue) == 0x0000B8, "Member 'GBCampaignSettings_GetIndexInOperatorDetailsList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetKIAList
// 0x0010 (0x0010 - 0x0000)
struct GBCampaignSettings_GetKIAList final
{
public:
	TArray<struct FGBOperatorDetails>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_GetKIAList) == 0x000008, "Wrong alignment on GBCampaignSettings_GetKIAList");
static_assert(sizeof(GBCampaignSettings_GetKIAList) == 0x000010, "Wrong size on GBCampaignSettings_GetKIAList");
static_assert(offsetof(GBCampaignSettings_GetKIAList, ReturnValue) == 0x000000, "Member 'GBCampaignSettings_GetKIAList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetNewOperator
// 0x00A8 (0x00A8 - 0x0000)
struct GBCampaignSettings_GetNewOperator final
{
public:
	struct FGBOperatorDetails                     ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_GetNewOperator) == 0x000008, "Wrong alignment on GBCampaignSettings_GetNewOperator");
static_assert(sizeof(GBCampaignSettings_GetNewOperator) == 0x0000A8, "Wrong size on GBCampaignSettings_GetNewOperator");
static_assert(offsetof(GBCampaignSettings_GetNewOperator, ReturnValue) == 0x000000, "Member 'GBCampaignSettings_GetNewOperator::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.GetOperatorRoster
// 0x0010 (0x0010 - 0x0000)
struct GBCampaignSettings_GetOperatorRoster final
{
public:
	TArray<struct FGBOperatorDetails>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_GetOperatorRoster) == 0x000008, "Wrong alignment on GBCampaignSettings_GetOperatorRoster");
static_assert(sizeof(GBCampaignSettings_GetOperatorRoster) == 0x000010, "Wrong size on GBCampaignSettings_GetOperatorRoster");
static_assert(offsetof(GBCampaignSettings_GetOperatorRoster, ReturnValue) == 0x000000, "Member 'GBCampaignSettings_GetOperatorRoster::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.MarkOperatorKIA
// 0x00A8 (0x00A8 - 0x0000)
struct GBCampaignSettings_MarkOperatorKIA final
{
public:
	struct FGBOperatorDetails                     OperatorDetails;                                   // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_MarkOperatorKIA) == 0x000008, "Wrong alignment on GBCampaignSettings_MarkOperatorKIA");
static_assert(sizeof(GBCampaignSettings_MarkOperatorKIA) == 0x0000A8, "Wrong size on GBCampaignSettings_MarkOperatorKIA");
static_assert(offsetof(GBCampaignSettings_MarkOperatorKIA, OperatorDetails) == 0x000000, "Member 'GBCampaignSettings_MarkOperatorKIA::OperatorDetails' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.ResetCompletionDetailsForHotspot
// 0x0008 (0x0008 - 0x0000)
struct GBCampaignSettings_ResetCompletionDetailsForHotspot final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_ResetCompletionDetailsForHotspot) == 0x000004, "Wrong alignment on GBCampaignSettings_ResetCompletionDetailsForHotspot");
static_assert(sizeof(GBCampaignSettings_ResetCompletionDetailsForHotspot) == 0x000008, "Wrong size on GBCampaignSettings_ResetCompletionDetailsForHotspot");
static_assert(offsetof(GBCampaignSettings_ResetCompletionDetailsForHotspot, InHotspotCodename) == 0x000000, "Member 'GBCampaignSettings_ResetCompletionDetailsForHotspot::InHotspotCodename' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.ResetCompletionDetailsForMission
// 0x000C (0x000C - 0x0000)
struct GBCampaignSettings_ResetCompletionDetailsForMission final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_ResetCompletionDetailsForMission) == 0x000004, "Wrong alignment on GBCampaignSettings_ResetCompletionDetailsForMission");
static_assert(sizeof(GBCampaignSettings_ResetCompletionDetailsForMission) == 0x00000C, "Wrong size on GBCampaignSettings_ResetCompletionDetailsForMission");
static_assert(offsetof(GBCampaignSettings_ResetCompletionDetailsForMission, InHotspotCodename) == 0x000000, "Member 'GBCampaignSettings_ResetCompletionDetailsForMission::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_ResetCompletionDetailsForMission, InMissionSequenceNumber) == 0x000008, "Member 'GBCampaignSettings_ResetCompletionDetailsForMission::InMissionSequenceNumber' has a wrong offset!");

// Function GroundBranch.GBCampaignSettings.SetCompletionDetailsForMission
// 0x0014 (0x0014 - 0x0000)
struct GBCampaignSettings_SetCompletionDetailsForMission final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSinglePlayer;                                     // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CompletionAmount;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCampaignSettings_SetCompletionDetailsForMission) == 0x000004, "Wrong alignment on GBCampaignSettings_SetCompletionDetailsForMission");
static_assert(sizeof(GBCampaignSettings_SetCompletionDetailsForMission) == 0x000014, "Wrong size on GBCampaignSettings_SetCompletionDetailsForMission");
static_assert(offsetof(GBCampaignSettings_SetCompletionDetailsForMission, InHotspotCodename) == 0x000000, "Member 'GBCampaignSettings_SetCompletionDetailsForMission::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_SetCompletionDetailsForMission, InMissionSequenceNumber) == 0x000008, "Member 'GBCampaignSettings_SetCompletionDetailsForMission::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_SetCompletionDetailsForMission, bSinglePlayer) == 0x00000C, "Member 'GBCampaignSettings_SetCompletionDetailsForMission::bSinglePlayer' has a wrong offset!");
static_assert(offsetof(GBCampaignSettings_SetCompletionDetailsForMission, CompletionAmount) == 0x000010, "Member 'GBCampaignSettings_SetCompletionDetailsForMission::CompletionAmount' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitActionRelease.WaitActionRelease
// 0x0020 (0x0020 - 0x0000)
struct GBAbilityTask_WaitActionRelease_WaitActionRelease final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestAlreadyReleased;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGBAbilityTask_WaitActionRelease*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitActionRelease_WaitActionRelease) == 0x000008, "Wrong alignment on GBAbilityTask_WaitActionRelease_WaitActionRelease");
static_assert(sizeof(GBAbilityTask_WaitActionRelease_WaitActionRelease) == 0x000020, "Wrong size on GBAbilityTask_WaitActionRelease_WaitActionRelease");
static_assert(offsetof(GBAbilityTask_WaitActionRelease_WaitActionRelease, OwningAbility) == 0x000000, "Member 'GBAbilityTask_WaitActionRelease_WaitActionRelease::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitActionRelease_WaitActionRelease, ActionName) == 0x000008, "Member 'GBAbilityTask_WaitActionRelease_WaitActionRelease::ActionName' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitActionRelease_WaitActionRelease, bTestAlreadyReleased) == 0x000010, "Member 'GBAbilityTask_WaitActionRelease_WaitActionRelease::bTestAlreadyReleased' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitActionRelease_WaitActionRelease, ReturnValue) == 0x000018, "Member 'GBAbilityTask_WaitActionRelease_WaitActionRelease::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAbilityTask_WaitForNextTick.WaitForNextTick
// 0x0010 (0x0010 - 0x0000)
struct GBAbilityTask_WaitForNextTick_WaitForNextTick final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBAbilityTask_WaitForNextTick*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAbilityTask_WaitForNextTick_WaitForNextTick) == 0x000008, "Wrong alignment on GBAbilityTask_WaitForNextTick_WaitForNextTick");
static_assert(sizeof(GBAbilityTask_WaitForNextTick_WaitForNextTick) == 0x000010, "Wrong size on GBAbilityTask_WaitForNextTick_WaitForNextTick");
static_assert(offsetof(GBAbilityTask_WaitForNextTick_WaitForNextTick, OwningAbility) == 0x000000, "Member 'GBAbilityTask_WaitForNextTick_WaitForNextTick::OwningAbility' has a wrong offset!");
static_assert(offsetof(GBAbilityTask_WaitForNextTick_WaitForNextTick, ReturnValue) == 0x000008, "Member 'GBAbilityTask_WaitForNextTick_WaitForNextTick::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetOppositeHandEnum
// 0x0002 (0x0002 - 0x0000)
struct GBCharacter_GetOppositeHandEnum final
{
public:
	EHand                                         EquippedType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHand                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetOppositeHandEnum) == 0x000001, "Wrong alignment on GBCharacter_GetOppositeHandEnum");
static_assert(sizeof(GBCharacter_GetOppositeHandEnum) == 0x000002, "Wrong size on GBCharacter_GetOppositeHandEnum");
static_assert(offsetof(GBCharacter_GetOppositeHandEnum, EquippedType) == 0x000000, "Member 'GBCharacter_GetOppositeHandEnum::EquippedType' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetOppositeHandEnum, ReturnValue) == 0x000001, "Member 'GBCharacter_GetOppositeHandEnum::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.AddArmStrengthInstantLoss
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_AddArmStrengthInstantLoss final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_AddArmStrengthInstantLoss) == 0x000004, "Wrong alignment on GBCharacter_AddArmStrengthInstantLoss");
static_assert(sizeof(GBCharacter_AddArmStrengthInstantLoss) == 0x000004, "Wrong size on GBCharacter_AddArmStrengthInstantLoss");
static_assert(offsetof(GBCharacter_AddArmStrengthInstantLoss, Amount) == 0x000000, "Member 'GBCharacter_AddArmStrengthInstantLoss::Amount' has a wrong offset!");

// Function GroundBranch.GBCharacter.AddRecoil
// 0x0018 (0x0018 - 0x0000)
struct GBCharacter_AddRecoil final
{
public:
	struct FGBRecoilData                          RecoilData;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_AddRecoil) == 0x000004, "Wrong alignment on GBCharacter_AddRecoil");
static_assert(sizeof(GBCharacter_AddRecoil) == 0x000018, "Wrong size on GBCharacter_AddRecoil");
static_assert(offsetof(GBCharacter_AddRecoil, RecoilData) == 0x000000, "Member 'GBCharacter_AddRecoil::RecoilData' has a wrong offset!");

// Function GroundBranch.GBCharacter.AddStaminaInstantLoss
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_AddStaminaInstantLoss final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_AddStaminaInstantLoss) == 0x000004, "Wrong alignment on GBCharacter_AddStaminaInstantLoss");
static_assert(sizeof(GBCharacter_AddStaminaInstantLoss) == 0x000004, "Wrong size on GBCharacter_AddStaminaInstantLoss");
static_assert(offsetof(GBCharacter_AddStaminaInstantLoss, Amount) == 0x000000, "Member 'GBCharacter_AddStaminaInstantLoss::Amount' has a wrong offset!");

// Function GroundBranch.GBCharacter.AnimNotifyFootstep
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_AnimNotifyFootstep final
{
public:
	bool                                          bInLeftFoot;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_AnimNotifyFootstep) == 0x000001, "Wrong alignment on GBCharacter_AnimNotifyFootstep");
static_assert(sizeof(GBCharacter_AnimNotifyFootstep) == 0x000001, "Wrong size on GBCharacter_AnimNotifyFootstep");
static_assert(offsetof(GBCharacter_AnimNotifyFootstep, bInLeftFoot) == 0x000000, "Member 'GBCharacter_AnimNotifyFootstep::bInLeftFoot' has a wrong offset!");

// Function GroundBranch.GBCharacter.CanDamageRadial
// 0x00C8 (0x00C8 - 0x0000)
struct GBCharacter_CanDamageRadial final
{
public:
	struct FVector                                DamageOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      SurfaceTypesToIgnore;                              // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0038(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_CanDamageRadial) == 0x000008, "Wrong alignment on GBCharacter_CanDamageRadial");
static_assert(sizeof(GBCharacter_CanDamageRadial) == 0x0000C8, "Wrong size on GBCharacter_CanDamageRadial");
static_assert(offsetof(GBCharacter_CanDamageRadial, DamageOrigin) == 0x000000, "Member 'GBCharacter_CanDamageRadial::DamageOrigin' has a wrong offset!");
static_assert(offsetof(GBCharacter_CanDamageRadial, IgnoreActors) == 0x000010, "Member 'GBCharacter_CanDamageRadial::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBCharacter_CanDamageRadial, TraceChannel) == 0x000020, "Member 'GBCharacter_CanDamageRadial::TraceChannel' has a wrong offset!");
static_assert(offsetof(GBCharacter_CanDamageRadial, SurfaceTypesToIgnore) == 0x000028, "Member 'GBCharacter_CanDamageRadial::SurfaceTypesToIgnore' has a wrong offset!");
static_assert(offsetof(GBCharacter_CanDamageRadial, OutHit) == 0x000038, "Member 'GBCharacter_CanDamageRadial::OutHit' has a wrong offset!");
static_assert(offsetof(GBCharacter_CanDamageRadial, ReturnValue) == 0x0000C0, "Member 'GBCharacter_CanDamageRadial::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.ClearSimilarItems
// 0x0038 (0x0038 - 0x0000)
struct GBCharacter_ClearSimilarItems final
{
public:
	struct FGameplayTagContainer                  InvItemTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             Exclude;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_ClearSimilarItems) == 0x000008, "Wrong alignment on GBCharacter_ClearSimilarItems");
static_assert(sizeof(GBCharacter_ClearSimilarItems) == 0x000038, "Wrong size on GBCharacter_ClearSimilarItems");
static_assert(offsetof(GBCharacter_ClearSimilarItems, InvItemTags) == 0x000000, "Member 'GBCharacter_ClearSimilarItems::InvItemTags' has a wrong offset!");
static_assert(offsetof(GBCharacter_ClearSimilarItems, bExactMatch) == 0x000020, "Member 'GBCharacter_ClearSimilarItems::bExactMatch' has a wrong offset!");
static_assert(offsetof(GBCharacter_ClearSimilarItems, Exclude) == 0x000028, "Member 'GBCharacter_ClearSimilarItems::Exclude' has a wrong offset!");
static_assert(offsetof(GBCharacter_ClearSimilarItems, ReturnValue) == 0x000030, "Member 'GBCharacter_ClearSimilarItems::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.ClientSyncEquipped
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_ClientSyncEquipped final
{
public:
	class AGBInvItem*                             ServerEquippedLeft;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ServerEquippedRight;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ClientSyncEquipped) == 0x000008, "Wrong alignment on GBCharacter_ClientSyncEquipped");
static_assert(sizeof(GBCharacter_ClientSyncEquipped) == 0x000010, "Wrong size on GBCharacter_ClientSyncEquipped");
static_assert(offsetof(GBCharacter_ClientSyncEquipped, ServerEquippedLeft) == 0x000000, "Member 'GBCharacter_ClientSyncEquipped::ServerEquippedLeft' has a wrong offset!");
static_assert(offsetof(GBCharacter_ClientSyncEquipped, ServerEquippedRight) == 0x000008, "Member 'GBCharacter_ClientSyncEquipped::ServerEquippedRight' has a wrong offset!");

// Function GroundBranch.GBCharacter.DestroyInventory
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_DestroyInventory final
{
public:
	bool                                          bForceClient;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_DestroyInventory) == 0x000001, "Wrong alignment on GBCharacter_DestroyInventory");
static_assert(sizeof(GBCharacter_DestroyInventory) == 0x000001, "Wrong size on GBCharacter_DestroyInventory");
static_assert(offsetof(GBCharacter_DestroyInventory, bForceClient) == 0x000000, "Member 'GBCharacter_DestroyInventory::bForceClient' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetInvItemAttachedToSocket
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetInvItemAttachedToSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetInvItemAttachedToSocket) == 0x000008, "Wrong alignment on GBCharacter_GetInvItemAttachedToSocket");
static_assert(sizeof(GBCharacter_GetInvItemAttachedToSocket) == 0x000010, "Wrong size on GBCharacter_GetInvItemAttachedToSocket");
static_assert(offsetof(GBCharacter_GetInvItemAttachedToSocket, SocketName) == 0x000000, "Member 'GBCharacter_GetInvItemAttachedToSocket::SocketName' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetInvItemAttachedToSocket, ReturnValue) == 0x000008, "Member 'GBCharacter_GetInvItemAttachedToSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetInvItemsAttachedToSocket
// 0x0018 (0x0018 - 0x0000)
struct GBCharacter_GetInvItemsAttachedToSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetInvItemsAttachedToSocket) == 0x000008, "Wrong alignment on GBCharacter_GetInvItemsAttachedToSocket");
static_assert(sizeof(GBCharacter_GetInvItemsAttachedToSocket) == 0x000018, "Wrong size on GBCharacter_GetInvItemsAttachedToSocket");
static_assert(offsetof(GBCharacter_GetInvItemsAttachedToSocket, SocketName) == 0x000000, "Member 'GBCharacter_GetInvItemsAttachedToSocket::SocketName' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetInvItemsAttachedToSocket, ReturnValue) == 0x000008, "Member 'GBCharacter_GetInvItemsAttachedToSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetItemAttachedToSocket
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetItemAttachedToSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetItemAttachedToSocket) == 0x000008, "Wrong alignment on GBCharacter_GetItemAttachedToSocket");
static_assert(sizeof(GBCharacter_GetItemAttachedToSocket) == 0x000010, "Wrong size on GBCharacter_GetItemAttachedToSocket");
static_assert(offsetof(GBCharacter_GetItemAttachedToSocket, SocketName) == 0x000000, "Member 'GBCharacter_GetItemAttachedToSocket::SocketName' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetItemAttachedToSocket, ReturnValue) == 0x000008, "Member 'GBCharacter_GetItemAttachedToSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetMinLightLevel
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetMinLightLevel final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetMinLightLevel) == 0x000004, "Wrong alignment on GBCharacter_GetMinLightLevel");
static_assert(sizeof(GBCharacter_GetMinLightLevel) == 0x00000C, "Wrong size on GBCharacter_GetMinLightLevel");
static_assert(offsetof(GBCharacter_GetMinLightLevel, Type) == 0x000000, "Member 'GBCharacter_GetMinLightLevel::Type' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetMinLightLevel, ReturnValue) == 0x000008, "Member 'GBCharacter_GetMinLightLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IncrementBulletIndex
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IncrementBulletIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IncrementBulletIndex) == 0x000001, "Wrong alignment on GBCharacter_IncrementBulletIndex");
static_assert(sizeof(GBCharacter_IncrementBulletIndex) == 0x000001, "Wrong size on GBCharacter_IncrementBulletIndex");
static_assert(offsetof(GBCharacter_IncrementBulletIndex, ReturnValue) == 0x000000, "Member 'GBCharacter_IncrementBulletIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsFrozen
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsFrozen) == 0x000001, "Wrong alignment on GBCharacter_IsFrozen");
static_assert(sizeof(GBCharacter_IsFrozen) == 0x000001, "Wrong size on GBCharacter_IsFrozen");
static_assert(offsetof(GBCharacter_IsFrozen, ReturnValue) == 0x000000, "Member 'GBCharacter_IsFrozen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.ModifyDamageCaused
// 0x00C8 (0x00C8 - 0x0000)
struct GBCharacter_ModifyDamageCaused final
{
public:
	int32                                         AppliedDamage;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0014(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Victim;                                            // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_ModifyDamageCaused) == 0x000008, "Wrong alignment on GBCharacter_ModifyDamageCaused");
static_assert(sizeof(GBCharacter_ModifyDamageCaused) == 0x0000C8, "Wrong size on GBCharacter_ModifyDamageCaused");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, AppliedDamage) == 0x000000, "Member 'GBCharacter_ModifyDamageCaused::AppliedDamage' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, Damage) == 0x000004, "Member 'GBCharacter_ModifyDamageCaused::Damage' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, Momentum) == 0x000008, "Member 'GBCharacter_ModifyDamageCaused::Momentum' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, HitInfo) == 0x000014, "Member 'GBCharacter_ModifyDamageCaused::HitInfo' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, Victim) == 0x0000A0, "Member 'GBCharacter_ModifyDamageCaused::Victim' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, EventInstigator) == 0x0000A8, "Member 'GBCharacter_ModifyDamageCaused::EventInstigator' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, DamageCauser) == 0x0000B0, "Member 'GBCharacter_ModifyDamageCaused::DamageCauser' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, DamageType) == 0x0000B8, "Member 'GBCharacter_ModifyDamageCaused::DamageType' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageCaused, ReturnValue) == 0x0000C0, "Member 'GBCharacter_ModifyDamageCaused::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.ModifyDamageTaken
// 0x00C0 (0x00C0 - 0x0000)
struct GBCharacter_ModifyDamageTaken final
{
public:
	int32                                         AppliedDamage;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0014(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            EventInstigator;                                   // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_ModifyDamageTaken) == 0x000008, "Wrong alignment on GBCharacter_ModifyDamageTaken");
static_assert(sizeof(GBCharacter_ModifyDamageTaken) == 0x0000C0, "Wrong size on GBCharacter_ModifyDamageTaken");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, AppliedDamage) == 0x000000, "Member 'GBCharacter_ModifyDamageTaken::AppliedDamage' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, Damage) == 0x000004, "Member 'GBCharacter_ModifyDamageTaken::Damage' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, Momentum) == 0x000008, "Member 'GBCharacter_ModifyDamageTaken::Momentum' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, HitInfo) == 0x000014, "Member 'GBCharacter_ModifyDamageTaken::HitInfo' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, EventInstigator) == 0x0000A0, "Member 'GBCharacter_ModifyDamageTaken::EventInstigator' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, DamageCauser) == 0x0000A8, "Member 'GBCharacter_ModifyDamageTaken::DamageCauser' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, DamageType) == 0x0000B0, "Member 'GBCharacter_ModifyDamageTaken::DamageType' has a wrong offset!");
static_assert(offsetof(GBCharacter_ModifyDamageTaken, ReturnValue) == 0x0000B8, "Member 'GBCharacter_ModifyDamageTaken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.NetMulticastPlayVoice
// 0x000C (0x000C - 0x0000)
struct GBCharacter_NetMulticastPlayVoice final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadioMessage;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_NetMulticastPlayVoice) == 0x000004, "Wrong alignment on GBCharacter_NetMulticastPlayVoice");
static_assert(sizeof(GBCharacter_NetMulticastPlayVoice) == 0x00000C, "Wrong size on GBCharacter_NetMulticastPlayVoice");
static_assert(offsetof(GBCharacter_NetMulticastPlayVoice, Key) == 0x000000, "Member 'GBCharacter_NetMulticastPlayVoice::Key' has a wrong offset!");
static_assert(offsetof(GBCharacter_NetMulticastPlayVoice, bIsRadioMessage) == 0x000008, "Member 'GBCharacter_NetMulticastPlayVoice::bIsRadioMessage' has a wrong offset!");

// Function GroundBranch.GBCharacter.NetworkedMontageJumpToSection
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_NetworkedMontageJumpToSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_NetworkedMontageJumpToSection) == 0x000004, "Wrong alignment on GBCharacter_NetworkedMontageJumpToSection");
static_assert(sizeof(GBCharacter_NetworkedMontageJumpToSection) == 0x000008, "Wrong size on GBCharacter_NetworkedMontageJumpToSection");
static_assert(offsetof(GBCharacter_NetworkedMontageJumpToSection, SectionName) == 0x000000, "Member 'GBCharacter_NetworkedMontageJumpToSection::SectionName' has a wrong offset!");

// Function GroundBranch.GBCharacter.NotifyPlayerHasFired
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_NotifyPlayerHasFired final
{
public:
	float                                         ShotSoundLevel;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_NotifyPlayerHasFired) == 0x000004, "Wrong alignment on GBCharacter_NotifyPlayerHasFired");
static_assert(sizeof(GBCharacter_NotifyPlayerHasFired) == 0x000004, "Wrong size on GBCharacter_NotifyPlayerHasFired");
static_assert(offsetof(GBCharacter_NotifyPlayerHasFired, ShotSoundLevel) == 0x000000, "Member 'GBCharacter_NotifyPlayerHasFired::ShotSoundLevel' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnEndProneEvent
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_OnEndProneEvent final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnEndProneEvent) == 0x000004, "Wrong alignment on GBCharacter_OnEndProneEvent");
static_assert(sizeof(GBCharacter_OnEndProneEvent) == 0x000008, "Wrong size on GBCharacter_OnEndProneEvent");
static_assert(offsetof(GBCharacter_OnEndProneEvent, HalfHeightAdjust) == 0x000000, "Member 'GBCharacter_OnEndProneEvent::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnEndProneEvent, ScaledHalfHeightAdjust) == 0x000004, "Member 'GBCharacter_OnEndProneEvent::ScaledHalfHeightAdjust' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnLandedEffects
// 0x008C (0x008C - 0x0000)
struct GBCharacter_OnLandedEffects final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         FallingSpeed;                                      // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnLandedEffects) == 0x000004, "Wrong alignment on GBCharacter_OnLandedEffects");
static_assert(sizeof(GBCharacter_OnLandedEffects) == 0x00008C, "Wrong size on GBCharacter_OnLandedEffects");
static_assert(offsetof(GBCharacter_OnLandedEffects, Hit) == 0x000000, "Member 'GBCharacter_OnLandedEffects::Hit' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnLandedEffects, FallingSpeed) == 0x000088, "Member 'GBCharacter_OnLandedEffects::FallingSpeed' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnPhysicsCollision
// 0x00B0 (0x00B0 - 0x0000)
struct GBCharacter_OnPhysicsCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_OnPhysicsCollision) == 0x000008, "Wrong alignment on GBCharacter_OnPhysicsCollision");
static_assert(sizeof(GBCharacter_OnPhysicsCollision) == 0x0000B0, "Wrong size on GBCharacter_OnPhysicsCollision");
static_assert(offsetof(GBCharacter_OnPhysicsCollision, OverlappedComponent) == 0x000000, "Member 'GBCharacter_OnPhysicsCollision::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnPhysicsCollision, OtherActor) == 0x000008, "Member 'GBCharacter_OnPhysicsCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnPhysicsCollision, OtherComp) == 0x000010, "Member 'GBCharacter_OnPhysicsCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnPhysicsCollision, NormalImpulse) == 0x000018, "Member 'GBCharacter_OnPhysicsCollision::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnPhysicsCollision, Hit) == 0x000024, "Member 'GBCharacter_OnPhysicsCollision::Hit' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnPlayVoiceEvent
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_OnPlayVoiceEvent final
{
public:
	class UAkAudioEvent*                          VoiceAudioEvent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_OnPlayVoiceEvent) == 0x000008, "Wrong alignment on GBCharacter_OnPlayVoiceEvent");
static_assert(sizeof(GBCharacter_OnPlayVoiceEvent) == 0x000010, "Wrong size on GBCharacter_OnPlayVoiceEvent");
static_assert(offsetof(GBCharacter_OnPlayVoiceEvent, VoiceAudioEvent) == 0x000000, "Member 'GBCharacter_OnPlayVoiceEvent::VoiceAudioEvent' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnPlayVoiceEvent, bIsLocalPlayer) == 0x000008, "Member 'GBCharacter_OnPlayVoiceEvent::bIsLocalPlayer' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnRep_DeathState
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_OnRep_DeathState final
{
public:
	EGBDeathState                                 OldDeathState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnRep_DeathState) == 0x000001, "Wrong alignment on GBCharacter_OnRep_DeathState");
static_assert(sizeof(GBCharacter_OnRep_DeathState) == 0x000001, "Wrong size on GBCharacter_OnRep_DeathState");
static_assert(offsetof(GBCharacter_OnRep_DeathState, OldDeathState) == 0x000000, "Member 'GBCharacter_OnRep_DeathState::OldDeathState' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnRep_EquippedLeft
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_OnRep_EquippedLeft final
{
public:
	class AGBInvItem*                             LastLeftEquipped;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnRep_EquippedLeft) == 0x000008, "Wrong alignment on GBCharacter_OnRep_EquippedLeft");
static_assert(sizeof(GBCharacter_OnRep_EquippedLeft) == 0x000008, "Wrong size on GBCharacter_OnRep_EquippedLeft");
static_assert(offsetof(GBCharacter_OnRep_EquippedLeft, LastLeftEquipped) == 0x000000, "Member 'GBCharacter_OnRep_EquippedLeft::LastLeftEquipped' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnRep_EquippedRight
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_OnRep_EquippedRight final
{
public:
	class AGBInvItem*                             LastRightEquipped;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnRep_EquippedRight) == 0x000008, "Wrong alignment on GBCharacter_OnRep_EquippedRight");
static_assert(sizeof(GBCharacter_OnRep_EquippedRight) == 0x000008, "Wrong size on GBCharacter_OnRep_EquippedRight");
static_assert(offsetof(GBCharacter_OnRep_EquippedRight, LastRightEquipped) == 0x000000, "Member 'GBCharacter_OnRep_EquippedRight::LastRightEquipped' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnStaminaChangedEvent
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_OnStaminaChangedEvent final
{
public:
	float                                         OldStamina;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnStaminaChangedEvent) == 0x000004, "Wrong alignment on GBCharacter_OnStaminaChangedEvent");
static_assert(sizeof(GBCharacter_OnStaminaChangedEvent) == 0x000004, "Wrong size on GBCharacter_OnStaminaChangedEvent");
static_assert(offsetof(GBCharacter_OnStaminaChangedEvent, OldStamina) == 0x000000, "Member 'GBCharacter_OnStaminaChangedEvent::OldStamina' has a wrong offset!");

// Function GroundBranch.GBCharacter.OnStartProneEvent
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_OnStartProneEvent final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_OnStartProneEvent) == 0x000004, "Wrong alignment on GBCharacter_OnStartProneEvent");
static_assert(sizeof(GBCharacter_OnStartProneEvent) == 0x000008, "Wrong size on GBCharacter_OnStartProneEvent");
static_assert(offsetof(GBCharacter_OnStartProneEvent, HalfHeightAdjust) == 0x000000, "Member 'GBCharacter_OnStartProneEvent::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(GBCharacter_OnStartProneEvent, ScaledHalfHeightAdjust) == 0x000004, "Member 'GBCharacter_OnStartProneEvent::ScaledHalfHeightAdjust' has a wrong offset!");

// Function GroundBranch.GBCharacter.PlayNetworkedMontage
// 0x0030 (0x0030 - 0x0000)
struct GBCharacter_PlayNetworkedMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              AnimLayerClass;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateToOwner;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_PlayNetworkedMontage) == 0x000008, "Wrong alignment on GBCharacter_PlayNetworkedMontage");
static_assert(sizeof(GBCharacter_PlayNetworkedMontage) == 0x000030, "Wrong size on GBCharacter_PlayNetworkedMontage");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, AnimMontage) == 0x000000, "Member 'GBCharacter_PlayNetworkedMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, SyncName) == 0x000008, "Member 'GBCharacter_PlayNetworkedMontage::SyncName' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, PlayRate) == 0x000010, "Member 'GBCharacter_PlayNetworkedMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, StartSectionName) == 0x000014, "Member 'GBCharacter_PlayNetworkedMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, AnimLayerClass) == 0x000020, "Member 'GBCharacter_PlayNetworkedMontage::AnimLayerClass' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, bReplicateToOwner) == 0x000028, "Member 'GBCharacter_PlayNetworkedMontage::bReplicateToOwner' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayNetworkedMontage, ReturnValue) == 0x00002C, "Member 'GBCharacter_PlayNetworkedMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.PlayVoice
// 0x000C (0x000C - 0x0000)
struct GBCharacter_PlayVoice final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadioMessage;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_PlayVoice) == 0x000004, "Wrong alignment on GBCharacter_PlayVoice");
static_assert(sizeof(GBCharacter_PlayVoice) == 0x00000C, "Wrong size on GBCharacter_PlayVoice");
static_assert(offsetof(GBCharacter_PlayVoice, Key) == 0x000000, "Member 'GBCharacter_PlayVoice::Key' has a wrong offset!");
static_assert(offsetof(GBCharacter_PlayVoice, bIsRadioMessage) == 0x000008, "Member 'GBCharacter_PlayVoice::bIsRadioMessage' has a wrong offset!");

// Function GroundBranch.GBCharacter.Prone
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_Prone final
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_Prone) == 0x000001, "Wrong alignment on GBCharacter_Prone");
static_assert(sizeof(GBCharacter_Prone) == 0x000001, "Wrong size on GBCharacter_Prone");
static_assert(offsetof(GBCharacter_Prone, bClientSimulation) == 0x000000, "Member 'GBCharacter_Prone::bClientSimulation' has a wrong offset!");

// Function GroundBranch.GBCharacter.RemoveMeshComponentFromSkinnedDecalSampler
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler final
{
public:
	class USkeletalMeshComponent*                 MeshToRemove;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler) == 0x000008, "Wrong alignment on GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler");
static_assert(sizeof(GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler) == 0x000008, "Wrong size on GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler");
static_assert(offsetof(GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler, MeshToRemove) == 0x000000, "Member 'GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler::MeshToRemove' has a wrong offset!");

// Function GroundBranch.GBCharacter.SeededFRandRange
// 0x000C (0x000C - 0x0000)
struct GBCharacter_SeededFRandRange final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SeededFRandRange) == 0x000004, "Wrong alignment on GBCharacter_SeededFRandRange");
static_assert(sizeof(GBCharacter_SeededFRandRange) == 0x00000C, "Wrong size on GBCharacter_SeededFRandRange");
static_assert(offsetof(GBCharacter_SeededFRandRange, InMin) == 0x000000, "Member 'GBCharacter_SeededFRandRange::InMin' has a wrong offset!");
static_assert(offsetof(GBCharacter_SeededFRandRange, InMax) == 0x000004, "Member 'GBCharacter_SeededFRandRange::InMax' has a wrong offset!");
static_assert(offsetof(GBCharacter_SeededFRandRange, ReturnValue) == 0x000008, "Member 'GBCharacter_SeededFRandRange::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetBraceLocation
// 0x000C (0x000C - 0x0000)
struct GBCharacter_ServerSetBraceLocation final
{
public:
	struct FVector                                NewBraceLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetBraceLocation) == 0x000004, "Wrong alignment on GBCharacter_ServerSetBraceLocation");
static_assert(sizeof(GBCharacter_ServerSetBraceLocation) == 0x00000C, "Wrong size on GBCharacter_ServerSetBraceLocation");
static_assert(offsetof(GBCharacter_ServerSetBraceLocation, NewBraceLocation) == 0x000000, "Member 'GBCharacter_ServerSetBraceLocation::NewBraceLocation' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetDesiredEngagedAlpha
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_ServerSetDesiredEngagedAlpha final
{
public:
	uint8                                         AlphaAsByte;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetDesiredEngagedAlpha) == 0x000001, "Wrong alignment on GBCharacter_ServerSetDesiredEngagedAlpha");
static_assert(sizeof(GBCharacter_ServerSetDesiredEngagedAlpha) == 0x000001, "Wrong size on GBCharacter_ServerSetDesiredEngagedAlpha");
static_assert(offsetof(GBCharacter_ServerSetDesiredEngagedAlpha, AlphaAsByte) == 0x000000, "Member 'GBCharacter_ServerSetDesiredEngagedAlpha::AlphaAsByte' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetDesiredLeanAlpha
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_ServerSetDesiredLeanAlpha final
{
public:
	uint8                                         AlphaAsByte;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetDesiredLeanAlpha) == 0x000001, "Wrong alignment on GBCharacter_ServerSetDesiredLeanAlpha");
static_assert(sizeof(GBCharacter_ServerSetDesiredLeanAlpha) == 0x000001, "Wrong size on GBCharacter_ServerSetDesiredLeanAlpha");
static_assert(offsetof(GBCharacter_ServerSetDesiredLeanAlpha, AlphaAsByte) == 0x000000, "Member 'GBCharacter_ServerSetDesiredLeanAlpha::AlphaAsByte' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetDesiredOffTargetAlpha
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_ServerSetDesiredOffTargetAlpha final
{
public:
	uint8                                         AlphaAsByte;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetDesiredOffTargetAlpha) == 0x000001, "Wrong alignment on GBCharacter_ServerSetDesiredOffTargetAlpha");
static_assert(sizeof(GBCharacter_ServerSetDesiredOffTargetAlpha) == 0x000001, "Wrong size on GBCharacter_ServerSetDesiredOffTargetAlpha");
static_assert(offsetof(GBCharacter_ServerSetDesiredOffTargetAlpha, AlphaAsByte) == 0x000000, "Member 'GBCharacter_ServerSetDesiredOffTargetAlpha::AlphaAsByte' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetLightLevel
// 0x000C (0x000C - 0x0000)
struct GBCharacter_ServerSetLightLevel final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetLightLevel) == 0x000004, "Wrong alignment on GBCharacter_ServerSetLightLevel");
static_assert(sizeof(GBCharacter_ServerSetLightLevel) == 0x00000C, "Wrong size on GBCharacter_ServerSetLightLevel");
static_assert(offsetof(GBCharacter_ServerSetLightLevel, Type) == 0x000000, "Member 'GBCharacter_ServerSetLightLevel::Type' has a wrong offset!");
static_assert(offsetof(GBCharacter_ServerSetLightLevel, Alpha) == 0x000008, "Member 'GBCharacter_ServerSetLightLevel::Alpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetMinLightLevel
// 0x000C (0x000C - 0x0000)
struct GBCharacter_ServerSetMinLightLevel final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetMinLightLevel) == 0x000004, "Wrong alignment on GBCharacter_ServerSetMinLightLevel");
static_assert(sizeof(GBCharacter_ServerSetMinLightLevel) == 0x00000C, "Wrong size on GBCharacter_ServerSetMinLightLevel");
static_assert(offsetof(GBCharacter_ServerSetMinLightLevel, Type) == 0x000000, "Member 'GBCharacter_ServerSetMinLightLevel::Type' has a wrong offset!");
static_assert(offsetof(GBCharacter_ServerSetMinLightLevel, Alpha) == 0x000008, "Member 'GBCharacter_ServerSetMinLightLevel::Alpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetRemoteHeadOffset
// 0x0002 (0x0002 - 0x0000)
struct GBCharacter_ServerSetRemoteHeadOffset final
{
public:
	uint8                                         NewRemoteHeadPitchDif;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewRemoteHeadYawDif;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetRemoteHeadOffset) == 0x000001, "Wrong alignment on GBCharacter_ServerSetRemoteHeadOffset");
static_assert(sizeof(GBCharacter_ServerSetRemoteHeadOffset) == 0x000002, "Wrong size on GBCharacter_ServerSetRemoteHeadOffset");
static_assert(offsetof(GBCharacter_ServerSetRemoteHeadOffset, NewRemoteHeadPitchDif) == 0x000000, "Member 'GBCharacter_ServerSetRemoteHeadOffset::NewRemoteHeadPitchDif' has a wrong offset!");
static_assert(offsetof(GBCharacter_ServerSetRemoteHeadOffset, NewRemoteHeadYawDif) == 0x000001, "Member 'GBCharacter_ServerSetRemoteHeadOffset::NewRemoteHeadYawDif' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetWantsToRun
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_ServerSetWantsToRun final
{
public:
	bool                                          bNewWantsToRun;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetWantsToRun) == 0x000001, "Wrong alignment on GBCharacter_ServerSetWantsToRun");
static_assert(sizeof(GBCharacter_ServerSetWantsToRun) == 0x000001, "Wrong size on GBCharacter_ServerSetWantsToRun");
static_assert(offsetof(GBCharacter_ServerSetWantsToRun, bNewWantsToRun) == 0x000000, "Member 'GBCharacter_ServerSetWantsToRun::bNewWantsToRun' has a wrong offset!");

// Function GroundBranch.GBCharacter.ServerSetWantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_ServerSetWantsToSprint final
{
public:
	bool                                          bNewWantsToSprint;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_ServerSetWantsToSprint) == 0x000001, "Wrong alignment on GBCharacter_ServerSetWantsToSprint");
static_assert(sizeof(GBCharacter_ServerSetWantsToSprint) == 0x000001, "Wrong size on GBCharacter_ServerSetWantsToSprint");
static_assert(offsetof(GBCharacter_ServerSetWantsToSprint, bNewWantsToSprint) == 0x000000, "Member 'GBCharacter_ServerSetWantsToSprint::bNewWantsToSprint' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetBraceInfo
// 0x000C (0x000C - 0x0000)
struct GBCharacter_SetBraceInfo final
{
public:
	struct FVector                                NewBraceLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetBraceInfo) == 0x000004, "Wrong alignment on GBCharacter_SetBraceInfo");
static_assert(sizeof(GBCharacter_SetBraceInfo) == 0x00000C, "Wrong size on GBCharacter_SetBraceInfo");
static_assert(offsetof(GBCharacter_SetBraceInfo, NewBraceLocation) == 0x000000, "Member 'GBCharacter_SetBraceInfo::NewBraceLocation' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetCharVoiceInfo
// 0x0014 (0x0014 - 0x0000)
struct GBCharacter_SetCharVoiceInfo final
{
public:
	struct FPrimaryAssetId                        NewCharVoiceDataId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewVoiceActorIndex;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_SetCharVoiceInfo) == 0x000004, "Wrong alignment on GBCharacter_SetCharVoiceInfo");
static_assert(sizeof(GBCharacter_SetCharVoiceInfo) == 0x000014, "Wrong size on GBCharacter_SetCharVoiceInfo");
static_assert(offsetof(GBCharacter_SetCharVoiceInfo, NewCharVoiceDataId) == 0x000000, "Member 'GBCharacter_SetCharVoiceInfo::NewCharVoiceDataId' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetCharVoiceInfo, NewVoiceActorIndex) == 0x000010, "Member 'GBCharacter_SetCharVoiceInfo::NewVoiceActorIndex' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetCurrentAnimLayerClass
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_SetCurrentAnimLayerClass final
{
public:
	TSubclassOf<class UAnimInstance>              NewAnimLayerClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetCurrentAnimLayerClass) == 0x000008, "Wrong alignment on GBCharacter_SetCurrentAnimLayerClass");
static_assert(sizeof(GBCharacter_SetCurrentAnimLayerClass) == 0x000008, "Wrong size on GBCharacter_SetCurrentAnimLayerClass");
static_assert(offsetof(GBCharacter_SetCurrentAnimLayerClass, NewAnimLayerClass) == 0x000000, "Member 'GBCharacter_SetCurrentAnimLayerClass::NewAnimLayerClass' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetCurrentHand
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_SetCurrentHand final
{
public:
	EHand                                         NewHand;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetCurrentHand) == 0x000001, "Wrong alignment on GBCharacter_SetCurrentHand");
static_assert(sizeof(GBCharacter_SetCurrentHand) == 0x000001, "Wrong size on GBCharacter_SetCurrentHand");
static_assert(offsetof(GBCharacter_SetCurrentHand, NewHand) == 0x000000, "Member 'GBCharacter_SetCurrentHand::NewHand' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetDesiredEngagedAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_SetDesiredEngagedAlpha final
{
public:
	float                                         NewDesiredEngagedAlpha;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetDesiredEngagedAlpha) == 0x000004, "Wrong alignment on GBCharacter_SetDesiredEngagedAlpha");
static_assert(sizeof(GBCharacter_SetDesiredEngagedAlpha) == 0x000004, "Wrong size on GBCharacter_SetDesiredEngagedAlpha");
static_assert(offsetof(GBCharacter_SetDesiredEngagedAlpha, NewDesiredEngagedAlpha) == 0x000000, "Member 'GBCharacter_SetDesiredEngagedAlpha::NewDesiredEngagedAlpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetDesiredLeanAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_SetDesiredLeanAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetDesiredLeanAlpha) == 0x000004, "Wrong alignment on GBCharacter_SetDesiredLeanAlpha");
static_assert(sizeof(GBCharacter_SetDesiredLeanAlpha) == 0x000004, "Wrong size on GBCharacter_SetDesiredLeanAlpha");
static_assert(offsetof(GBCharacter_SetDesiredLeanAlpha, Alpha) == 0x000000, "Member 'GBCharacter_SetDesiredLeanAlpha::Alpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetDesiredOffTargetAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_SetDesiredOffTargetAlpha final
{
public:
	float                                         NewDesiredOffTargetAlpha;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetDesiredOffTargetAlpha) == 0x000004, "Wrong alignment on GBCharacter_SetDesiredOffTargetAlpha");
static_assert(sizeof(GBCharacter_SetDesiredOffTargetAlpha) == 0x000004, "Wrong size on GBCharacter_SetDesiredOffTargetAlpha");
static_assert(offsetof(GBCharacter_SetDesiredOffTargetAlpha, NewDesiredOffTargetAlpha) == 0x000000, "Member 'GBCharacter_SetDesiredOffTargetAlpha::NewDesiredOffTargetAlpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetEquipped
// 0x0018 (0x0018 - 0x0000)
struct GBCharacter_SetEquipped final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             NewEquipped;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             LastEquipped;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetEquipped) == 0x000008, "Wrong alignment on GBCharacter_SetEquipped");
static_assert(sizeof(GBCharacter_SetEquipped) == 0x000018, "Wrong size on GBCharacter_SetEquipped");
static_assert(offsetof(GBCharacter_SetEquipped, TargetHand) == 0x000000, "Member 'GBCharacter_SetEquipped::TargetHand' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetEquipped, NewEquipped) == 0x000008, "Member 'GBCharacter_SetEquipped::NewEquipped' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetEquipped, LastEquipped) == 0x000010, "Member 'GBCharacter_SetEquipped::LastEquipped' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetLightLevel
// 0x000C (0x000C - 0x0000)
struct GBCharacter_SetLightLevel final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetLightLevel) == 0x000004, "Wrong alignment on GBCharacter_SetLightLevel");
static_assert(sizeof(GBCharacter_SetLightLevel) == 0x00000C, "Wrong size on GBCharacter_SetLightLevel");
static_assert(offsetof(GBCharacter_SetLightLevel, Type) == 0x000000, "Member 'GBCharacter_SetLightLevel::Type' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetLightLevel, Alpha) == 0x000008, "Member 'GBCharacter_SetLightLevel::Alpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetLoadoutInfo
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_SetLoadoutInfo final
{
public:
	class AGBKitInfo*                             NewLoadoutInfo;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetLoadoutInfo) == 0x000008, "Wrong alignment on GBCharacter_SetLoadoutInfo");
static_assert(sizeof(GBCharacter_SetLoadoutInfo) == 0x000008, "Wrong size on GBCharacter_SetLoadoutInfo");
static_assert(offsetof(GBCharacter_SetLoadoutInfo, NewLoadoutInfo) == 0x000000, "Member 'GBCharacter_SetLoadoutInfo::NewLoadoutInfo' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetMaxArmStrength
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_SetMaxArmStrength final
{
public:
	float                                         NewMaxArmStrength;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetMaxArmStrength) == 0x000004, "Wrong alignment on GBCharacter_SetMaxArmStrength");
static_assert(sizeof(GBCharacter_SetMaxArmStrength) == 0x000004, "Wrong size on GBCharacter_SetMaxArmStrength");
static_assert(offsetof(GBCharacter_SetMaxArmStrength, NewMaxArmStrength) == 0x000000, "Member 'GBCharacter_SetMaxArmStrength::NewMaxArmStrength' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetMaxStamina
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_SetMaxStamina final
{
public:
	float                                         NewMaxStamina;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetMaxStamina) == 0x000004, "Wrong alignment on GBCharacter_SetMaxStamina");
static_assert(sizeof(GBCharacter_SetMaxStamina) == 0x000004, "Wrong size on GBCharacter_SetMaxStamina");
static_assert(offsetof(GBCharacter_SetMaxStamina, NewMaxStamina) == 0x000000, "Member 'GBCharacter_SetMaxStamina::NewMaxStamina' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetMinLightLevel
// 0x000C (0x000C - 0x0000)
struct GBCharacter_SetMinLightLevel final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetMinLightLevel) == 0x000004, "Wrong alignment on GBCharacter_SetMinLightLevel");
static_assert(sizeof(GBCharacter_SetMinLightLevel) == 0x00000C, "Wrong size on GBCharacter_SetMinLightLevel");
static_assert(offsetof(GBCharacter_SetMinLightLevel, Type) == 0x000000, "Member 'GBCharacter_SetMinLightLevel::Type' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetMinLightLevel, Alpha) == 0x000008, "Member 'GBCharacter_SetMinLightLevel::Alpha' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetNetworkedMontageNextSection
// 0x0018 (0x0018 - 0x0000)
struct GBCharacter_SetNetworkedMontageNextSection final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionNameToChange;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSection;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetNetworkedMontageNextSection) == 0x000008, "Wrong alignment on GBCharacter_SetNetworkedMontageNextSection");
static_assert(sizeof(GBCharacter_SetNetworkedMontageNextSection) == 0x000018, "Wrong size on GBCharacter_SetNetworkedMontageNextSection");
static_assert(offsetof(GBCharacter_SetNetworkedMontageNextSection, AnimMontage) == 0x000000, "Member 'GBCharacter_SetNetworkedMontageNextSection::AnimMontage' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetNetworkedMontageNextSection, SectionNameToChange) == 0x000008, "Member 'GBCharacter_SetNetworkedMontageNextSection::SectionNameToChange' has a wrong offset!");
static_assert(offsetof(GBCharacter_SetNetworkedMontageNextSection, NextSection) == 0x000010, "Member 'GBCharacter_SetNetworkedMontageNextSection::NextSection' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetRecoilCount
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_SetRecoilCount final
{
public:
	uint8                                         NewRecoilCount;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetRecoilCount) == 0x000001, "Wrong alignment on GBCharacter_SetRecoilCount");
static_assert(sizeof(GBCharacter_SetRecoilCount) == 0x000001, "Wrong size on GBCharacter_SetRecoilCount");
static_assert(offsetof(GBCharacter_SetRecoilCount, NewRecoilCount) == 0x000000, "Member 'GBCharacter_SetRecoilCount::NewRecoilCount' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetWantsToRun
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_SetWantsToRun final
{
public:
	bool                                          bNewWantsToRun;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetWantsToRun) == 0x000001, "Wrong alignment on GBCharacter_SetWantsToRun");
static_assert(sizeof(GBCharacter_SetWantsToRun) == 0x000001, "Wrong size on GBCharacter_SetWantsToRun");
static_assert(offsetof(GBCharacter_SetWantsToRun, bNewWantsToRun) == 0x000000, "Member 'GBCharacter_SetWantsToRun::bNewWantsToRun' has a wrong offset!");

// Function GroundBranch.GBCharacter.SetWantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_SetWantsToSprint final
{
public:
	bool                                          bNewWantsToSprint;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_SetWantsToSprint) == 0x000001, "Wrong alignment on GBCharacter_SetWantsToSprint");
static_assert(sizeof(GBCharacter_SetWantsToSprint) == 0x000001, "Wrong size on GBCharacter_SetWantsToSprint");
static_assert(offsetof(GBCharacter_SetWantsToSprint, bNewWantsToSprint) == 0x000000, "Member 'GBCharacter_SetWantsToSprint::bNewWantsToSprint' has a wrong offset!");

// Function GroundBranch.GBCharacter.StopNetworkedMontage
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_StopNetworkedMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_StopNetworkedMontage) == 0x000008, "Wrong alignment on GBCharacter_StopNetworkedMontage");
static_assert(sizeof(GBCharacter_StopNetworkedMontage) == 0x000008, "Wrong size on GBCharacter_StopNetworkedMontage");
static_assert(offsetof(GBCharacter_StopNetworkedMontage, AnimMontage) == 0x000000, "Member 'GBCharacter_StopNetworkedMontage::AnimMontage' has a wrong offset!");

// Function GroundBranch.GBCharacter.TakeFallingDamage
// 0x008C (0x008C - 0x0000)
struct GBCharacter_TakeFallingDamage final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         FallingSpeed;                                      // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_TakeFallingDamage) == 0x000004, "Wrong alignment on GBCharacter_TakeFallingDamage");
static_assert(sizeof(GBCharacter_TakeFallingDamage) == 0x00008C, "Wrong size on GBCharacter_TakeFallingDamage");
static_assert(offsetof(GBCharacter_TakeFallingDamage, Hit) == 0x000000, "Member 'GBCharacter_TakeFallingDamage::Hit' has a wrong offset!");
static_assert(offsetof(GBCharacter_TakeFallingDamage, FallingSpeed) == 0x000088, "Member 'GBCharacter_TakeFallingDamage::FallingSpeed' has a wrong offset!");

// Function GroundBranch.GBCharacter.UnProne
// 0x0002 (0x0002 - 0x0000)
struct GBCharacter_UnProne final
{
public:
	bool                                          bToCrouch;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientSimulation;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_UnProne) == 0x000001, "Wrong alignment on GBCharacter_UnProne");
static_assert(sizeof(GBCharacter_UnProne) == 0x000002, "Wrong size on GBCharacter_UnProne");
static_assert(offsetof(GBCharacter_UnProne, bToCrouch) == 0x000000, "Member 'GBCharacter_UnProne::bToCrouch' has a wrong offset!");
static_assert(offsetof(GBCharacter_UnProne, bClientSimulation) == 0x000001, "Member 'GBCharacter_UnProne::bClientSimulation' has a wrong offset!");

// Function GroundBranch.GBCharacter.UpdateLean
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_UpdateLean final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_UpdateLean) == 0x000004, "Wrong alignment on GBCharacter_UpdateLean");
static_assert(sizeof(GBCharacter_UpdateLean) == 0x000004, "Wrong size on GBCharacter_UpdateLean");
static_assert(offsetof(GBCharacter_UpdateLean, DeltaSeconds) == 0x000000, "Member 'GBCharacter_UpdateLean::DeltaSeconds' has a wrong offset!");

// Function GroundBranch.GBCharacter.UpdateStamina
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_UpdateStamina final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_UpdateStamina) == 0x000004, "Wrong alignment on GBCharacter_UpdateStamina");
static_assert(sizeof(GBCharacter_UpdateStamina) == 0x000004, "Wrong size on GBCharacter_UpdateStamina");
static_assert(offsetof(GBCharacter_UpdateStamina, DeltaSeconds) == 0x000000, "Member 'GBCharacter_UpdateStamina::DeltaSeconds' has a wrong offset!");

// Function GroundBranch.GBCharacter.UpdateSway
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_UpdateSway final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_UpdateSway) == 0x000004, "Wrong alignment on GBCharacter_UpdateSway");
static_assert(sizeof(GBCharacter_UpdateSway) == 0x000004, "Wrong size on GBCharacter_UpdateSway");
static_assert(offsetof(GBCharacter_UpdateSway, DeltaSeconds) == 0x000000, "Member 'GBCharacter_UpdateSway::DeltaSeconds' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetAimCenterOffset
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetAimCenterOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetAimCenterOffset) == 0x000004, "Wrong alignment on GBCharacter_GetAimCenterOffset");
static_assert(sizeof(GBCharacter_GetAimCenterOffset) == 0x00000C, "Wrong size on GBCharacter_GetAimCenterOffset");
static_assert(offsetof(GBCharacter_GetAimCenterOffset, ReturnValue) == 0x000000, "Member 'GBCharacter_GetAimCenterOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetAnimInstance) == 0x000008, "Wrong alignment on GBCharacter_GetAnimInstance");
static_assert(sizeof(GBCharacter_GetAnimInstance) == 0x000008, "Wrong size on GBCharacter_GetAnimInstance");
static_assert(offsetof(GBCharacter_GetAnimInstance, ReturnValue) == 0x000000, "Member 'GBCharacter_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetArmStrength
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetArmStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetArmStrength) == 0x000004, "Wrong alignment on GBCharacter_GetArmStrength");
static_assert(sizeof(GBCharacter_GetArmStrength) == 0x000004, "Wrong size on GBCharacter_GetArmStrength");
static_assert(offsetof(GBCharacter_GetArmStrength, ReturnValue) == 0x000000, "Member 'GBCharacter_GetArmStrength::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetBodyCamSocket
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetBodyCamSocket final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetBodyCamSocket) == 0x000004, "Wrong alignment on GBCharacter_GetBodyCamSocket");
static_assert(sizeof(GBCharacter_GetBodyCamSocket) == 0x000008, "Wrong size on GBCharacter_GetBodyCamSocket");
static_assert(offsetof(GBCharacter_GetBodyCamSocket, ReturnValue) == 0x000000, "Member 'GBCharacter_GetBodyCamSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetBreathingSinValue
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetBreathingSinValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetBreathingSinValue) == 0x000004, "Wrong alignment on GBCharacter_GetBreathingSinValue");
static_assert(sizeof(GBCharacter_GetBreathingSinValue) == 0x000004, "Wrong size on GBCharacter_GetBreathingSinValue");
static_assert(offsetof(GBCharacter_GetBreathingSinValue, ReturnValue) == 0x000000, "Member 'GBCharacter_GetBreathingSinValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetCharVoiceAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetCharVoiceAudioEvent final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetCharVoiceAudioEvent) == 0x000008, "Wrong alignment on GBCharacter_GetCharVoiceAudioEvent");
static_assert(sizeof(GBCharacter_GetCharVoiceAudioEvent) == 0x000010, "Wrong size on GBCharacter_GetCharVoiceAudioEvent");
static_assert(offsetof(GBCharacter_GetCharVoiceAudioEvent, Key) == 0x000000, "Member 'GBCharacter_GetCharVoiceAudioEvent::Key' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetCharVoiceAudioEvent, ReturnValue) == 0x000008, "Member 'GBCharacter_GetCharVoiceAudioEvent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetChestSlingPoint
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetChestSlingPoint final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetChestSlingPoint) == 0x000004, "Wrong alignment on GBCharacter_GetChestSlingPoint");
static_assert(sizeof(GBCharacter_GetChestSlingPoint) == 0x000008, "Wrong size on GBCharacter_GetChestSlingPoint");
static_assert(offsetof(GBCharacter_GetChestSlingPoint, ReturnValue) == 0x000000, "Member 'GBCharacter_GetChestSlingPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetCosmeticTags
// 0x0020 (0x0020 - 0x0000)
struct GBCharacter_GetCosmeticTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetCosmeticTags) == 0x000008, "Wrong alignment on GBCharacter_GetCosmeticTags");
static_assert(sizeof(GBCharacter_GetCosmeticTags) == 0x000020, "Wrong size on GBCharacter_GetCosmeticTags");
static_assert(offsetof(GBCharacter_GetCosmeticTags, ReturnValue) == 0x000000, "Member 'GBCharacter_GetCosmeticTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetCrouchAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetCrouchAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetCrouchAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetCrouchAlpha");
static_assert(sizeof(GBCharacter_GetCrouchAlpha) == 0x000004, "Wrong size on GBCharacter_GetCrouchAlpha");
static_assert(offsetof(GBCharacter_GetCrouchAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetCrouchAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetCurrentAnimLayerClass
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetCurrentAnimLayerClass final
{
public:
	TSubclassOf<class UAnimInstance>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetCurrentAnimLayerClass) == 0x000008, "Wrong alignment on GBCharacter_GetCurrentAnimLayerClass");
static_assert(sizeof(GBCharacter_GetCurrentAnimLayerClass) == 0x000008, "Wrong size on GBCharacter_GetCurrentAnimLayerClass");
static_assert(offsetof(GBCharacter_GetCurrentAnimLayerClass, ReturnValue) == 0x000000, "Member 'GBCharacter_GetCurrentAnimLayerClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetCurrentHand
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_GetCurrentHand final
{
public:
	EHand                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetCurrentHand) == 0x000001, "Wrong alignment on GBCharacter_GetCurrentHand");
static_assert(sizeof(GBCharacter_GetCurrentHand) == 0x000001, "Wrong size on GBCharacter_GetCurrentHand");
static_assert(offsetof(GBCharacter_GetCurrentHand, ReturnValue) == 0x000000, "Member 'GBCharacter_GetCurrentHand::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetDeathState
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_GetDeathState final
{
public:
	EGBDeathState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetDeathState) == 0x000001, "Wrong alignment on GBCharacter_GetDeathState");
static_assert(sizeof(GBCharacter_GetDeathState) == 0x000001, "Wrong size on GBCharacter_GetDeathState");
static_assert(offsetof(GBCharacter_GetDeathState, ReturnValue) == 0x000000, "Member 'GBCharacter_GetDeathState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetDesiredEngagedAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetDesiredEngagedAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetDesiredEngagedAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetDesiredEngagedAlpha");
static_assert(sizeof(GBCharacter_GetDesiredEngagedAlpha) == 0x000004, "Wrong size on GBCharacter_GetDesiredEngagedAlpha");
static_assert(offsetof(GBCharacter_GetDesiredEngagedAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetDesiredEngagedAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetDesiredLeanAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetDesiredLeanAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetDesiredLeanAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetDesiredLeanAlpha");
static_assert(sizeof(GBCharacter_GetDesiredLeanAlpha) == 0x000004, "Wrong size on GBCharacter_GetDesiredLeanAlpha");
static_assert(offsetof(GBCharacter_GetDesiredLeanAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetDesiredLeanAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetDesiredOffTargetAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetDesiredOffTargetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetDesiredOffTargetAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetDesiredOffTargetAlpha");
static_assert(sizeof(GBCharacter_GetDesiredOffTargetAlpha) == 0x000004, "Wrong size on GBCharacter_GetDesiredOffTargetAlpha");
static_assert(offsetof(GBCharacter_GetDesiredOffTargetAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetDesiredOffTargetAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetEngagedAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetEngagedAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetEngagedAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetEngagedAlpha");
static_assert(sizeof(GBCharacter_GetEngagedAlpha) == 0x000004, "Wrong size on GBCharacter_GetEngagedAlpha");
static_assert(offsetof(GBCharacter_GetEngagedAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetEngagedAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetEquipped
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetEquipped final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetEquipped) == 0x000008, "Wrong alignment on GBCharacter_GetEquipped");
static_assert(sizeof(GBCharacter_GetEquipped) == 0x000010, "Wrong size on GBCharacter_GetEquipped");
static_assert(offsetof(GBCharacter_GetEquipped, TargetHand) == 0x000000, "Member 'GBCharacter_GetEquipped::TargetHand' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetEquipped, ReturnValue) == 0x000008, "Member 'GBCharacter_GetEquipped::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetEquippedRotationalInertiaModifier
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetEquippedRotationalInertiaModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetEquippedRotationalInertiaModifier) == 0x000004, "Wrong alignment on GBCharacter_GetEquippedRotationalInertiaModifier");
static_assert(sizeof(GBCharacter_GetEquippedRotationalInertiaModifier) == 0x000004, "Wrong size on GBCharacter_GetEquippedRotationalInertiaModifier");
static_assert(offsetof(GBCharacter_GetEquippedRotationalInertiaModifier, ReturnValue) == 0x000000, "Member 'GBCharacter_GetEquippedRotationalInertiaModifier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetEyesSocket
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetEyesSocket final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetEyesSocket) == 0x000004, "Wrong alignment on GBCharacter_GetEyesSocket");
static_assert(sizeof(GBCharacter_GetEyesSocket) == 0x000008, "Wrong size on GBCharacter_GetEyesSocket");
static_assert(offsetof(GBCharacter_GetEyesSocket, ReturnValue) == 0x000000, "Member 'GBCharacter_GetEyesSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetFirstInvItemByClass
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetFirstInvItemByClass final
{
public:
	TSubclassOf<class AGBInvItem>                 InvItemClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetFirstInvItemByClass) == 0x000008, "Wrong alignment on GBCharacter_GetFirstInvItemByClass");
static_assert(sizeof(GBCharacter_GetFirstInvItemByClass) == 0x000010, "Wrong size on GBCharacter_GetFirstInvItemByClass");
static_assert(offsetof(GBCharacter_GetFirstInvItemByClass, InvItemClass) == 0x000000, "Member 'GBCharacter_GetFirstInvItemByClass::InvItemClass' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetFirstInvItemByClass, ReturnValue) == 0x000008, "Member 'GBCharacter_GetFirstInvItemByClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetFirstInvItemByItemAssetId
// 0x0020 (0x0020 - 0x0000)
struct GBCharacter_GetFirstInvItemByItemAssetId final
{
public:
	struct FPrimaryAssetId                        InvItemAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGBInvItem>                 CastToInvItemClass;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetFirstInvItemByItemAssetId) == 0x000008, "Wrong alignment on GBCharacter_GetFirstInvItemByItemAssetId");
static_assert(sizeof(GBCharacter_GetFirstInvItemByItemAssetId) == 0x000020, "Wrong size on GBCharacter_GetFirstInvItemByItemAssetId");
static_assert(offsetof(GBCharacter_GetFirstInvItemByItemAssetId, InvItemAssetId) == 0x000000, "Member 'GBCharacter_GetFirstInvItemByItemAssetId::InvItemAssetId' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetFirstInvItemByItemAssetId, CastToInvItemClass) == 0x000010, "Member 'GBCharacter_GetFirstInvItemByItemAssetId::CastToInvItemClass' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetFirstInvItemByItemAssetId, ReturnValue) == 0x000018, "Member 'GBCharacter_GetFirstInvItemByItemAssetId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetFirstInvItemByTags
// 0x0038 (0x0038 - 0x0000)
struct GBCharacter_GetFirstInvItemByTags final
{
public:
	struct FGameplayTagContainer                  InvItemTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGBInvItem>                 CastToInvItemClass;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetFirstInvItemByTags) == 0x000008, "Wrong alignment on GBCharacter_GetFirstInvItemByTags");
static_assert(sizeof(GBCharacter_GetFirstInvItemByTags) == 0x000038, "Wrong size on GBCharacter_GetFirstInvItemByTags");
static_assert(offsetof(GBCharacter_GetFirstInvItemByTags, InvItemTags) == 0x000000, "Member 'GBCharacter_GetFirstInvItemByTags::InvItemTags' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetFirstInvItemByTags, bExactMatch) == 0x000020, "Member 'GBCharacter_GetFirstInvItemByTags::bExactMatch' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetFirstInvItemByTags, CastToInvItemClass) == 0x000028, "Member 'GBCharacter_GetFirstInvItemByTags::CastToInvItemClass' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetFirstInvItemByTags, ReturnValue) == 0x000030, "Member 'GBCharacter_GetFirstInvItemByTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetFlattenSwayTime
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetFlattenSwayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetFlattenSwayTime) == 0x000004, "Wrong alignment on GBCharacter_GetFlattenSwayTime");
static_assert(sizeof(GBCharacter_GetFlattenSwayTime) == 0x000004, "Wrong size on GBCharacter_GetFlattenSwayTime");
static_assert(offsetof(GBCharacter_GetFlattenSwayTime, ReturnValue) == 0x000000, "Member 'GBCharacter_GetFlattenSwayTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetFootstepComp
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetFootstepComp final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetFootstepComp) == 0x000008, "Wrong alignment on GBCharacter_GetFootstepComp");
static_assert(sizeof(GBCharacter_GetFootstepComp) == 0x000008, "Wrong size on GBCharacter_GetFootstepComp");
static_assert(offsetof(GBCharacter_GetFootstepComp, ReturnValue) == 0x000000, "Member 'GBCharacter_GetFootstepComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetGBMovementComp
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetGBMovementComp final
{
public:
	class UGBCharacterMovement*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetGBMovementComp) == 0x000008, "Wrong alignment on GBCharacter_GetGBMovementComp");
static_assert(sizeof(GBCharacter_GetGBMovementComp) == 0x000008, "Wrong size on GBCharacter_GetGBMovementComp");
static_assert(offsetof(GBCharacter_GetGBMovementComp, ReturnValue) == 0x000000, "Member 'GBCharacter_GetGBMovementComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetHandEnum
// 0x0002 (0x0002 - 0x0000)
struct GBCharacter_GetHandEnum final
{
public:
	EHand                                         EquippedType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHand                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetHandEnum) == 0x000001, "Wrong alignment on GBCharacter_GetHandEnum");
static_assert(sizeof(GBCharacter_GetHandEnum) == 0x000002, "Wrong size on GBCharacter_GetHandEnum");
static_assert(offsetof(GBCharacter_GetHandEnum, EquippedType) == 0x000000, "Member 'GBCharacter_GetHandEnum::EquippedType' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetHandEnum, ReturnValue) == 0x000001, "Member 'GBCharacter_GetHandEnum::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetHandEnumFromSocket
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetHandEnumFromSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHand                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_GetHandEnumFromSocket) == 0x000004, "Wrong alignment on GBCharacter_GetHandEnumFromSocket");
static_assert(sizeof(GBCharacter_GetHandEnumFromSocket) == 0x00000C, "Wrong size on GBCharacter_GetHandEnumFromSocket");
static_assert(offsetof(GBCharacter_GetHandEnumFromSocket, SocketName) == 0x000000, "Member 'GBCharacter_GetHandEnumFromSocket::SocketName' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetHandEnumFromSocket, ReturnValue) == 0x000008, "Member 'GBCharacter_GetHandEnumFromSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetHeadCamSocket
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetHeadCamSocket final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetHeadCamSocket) == 0x000004, "Wrong alignment on GBCharacter_GetHeadCamSocket");
static_assert(sizeof(GBCharacter_GetHeadCamSocket) == 0x000008, "Wrong size on GBCharacter_GetHeadCamSocket");
static_assert(offsetof(GBCharacter_GetHeadCamSocket, ReturnValue) == 0x000000, "Member 'GBCharacter_GetHeadCamSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetInventoryList
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetInventoryList final
{
public:
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetInventoryList) == 0x000008, "Wrong alignment on GBCharacter_GetInventoryList");
static_assert(sizeof(GBCharacter_GetInventoryList) == 0x000010, "Wrong size on GBCharacter_GetInventoryList");
static_assert(offsetof(GBCharacter_GetInventoryList, ReturnValue) == 0x000000, "Member 'GBCharacter_GetInventoryList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetInvItemsByClass
// 0x0018 (0x0018 - 0x0000)
struct GBCharacter_GetInvItemsByClass final
{
public:
	TSubclassOf<class AGBInvItem>                 InvItemClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetInvItemsByClass) == 0x000008, "Wrong alignment on GBCharacter_GetInvItemsByClass");
static_assert(sizeof(GBCharacter_GetInvItemsByClass) == 0x000018, "Wrong size on GBCharacter_GetInvItemsByClass");
static_assert(offsetof(GBCharacter_GetInvItemsByClass, InvItemClass) == 0x000000, "Member 'GBCharacter_GetInvItemsByClass::InvItemClass' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetInvItemsByClass, ReturnValue) == 0x000008, "Member 'GBCharacter_GetInvItemsByClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetInvItemsByItemAssetId
// 0x0020 (0x0020 - 0x0000)
struct GBCharacter_GetInvItemsByItemAssetId final
{
public:
	struct FPrimaryAssetId                        InvItemAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetInvItemsByItemAssetId) == 0x000008, "Wrong alignment on GBCharacter_GetInvItemsByItemAssetId");
static_assert(sizeof(GBCharacter_GetInvItemsByItemAssetId) == 0x000020, "Wrong size on GBCharacter_GetInvItemsByItemAssetId");
static_assert(offsetof(GBCharacter_GetInvItemsByItemAssetId, InvItemAssetId) == 0x000000, "Member 'GBCharacter_GetInvItemsByItemAssetId::InvItemAssetId' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetInvItemsByItemAssetId, ReturnValue) == 0x000010, "Member 'GBCharacter_GetInvItemsByItemAssetId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetInvItemsByTags
// 0x0038 (0x0038 - 0x0000)
struct GBCharacter_GetInvItemsByTags final
{
public:
	struct FGameplayTagContainer                  InvItemTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBInvItem*>                     ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetInvItemsByTags) == 0x000008, "Wrong alignment on GBCharacter_GetInvItemsByTags");
static_assert(sizeof(GBCharacter_GetInvItemsByTags) == 0x000038, "Wrong size on GBCharacter_GetInvItemsByTags");
static_assert(offsetof(GBCharacter_GetInvItemsByTags, InvItemTags) == 0x000000, "Member 'GBCharacter_GetInvItemsByTags::InvItemTags' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetInvItemsByTags, bExactMatch) == 0x000020, "Member 'GBCharacter_GetInvItemsByTags::bExactMatch' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetInvItemsByTags, ReturnValue) == 0x000028, "Member 'GBCharacter_GetInvItemsByTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetItemHandSocket
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetItemHandSocket final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetItemHandSocket) == 0x000004, "Wrong alignment on GBCharacter_GetItemHandSocket");
static_assert(sizeof(GBCharacter_GetItemHandSocket) == 0x00000C, "Wrong size on GBCharacter_GetItemHandSocket");
static_assert(offsetof(GBCharacter_GetItemHandSocket, TargetHand) == 0x000000, "Member 'GBCharacter_GetItemHandSocket::TargetHand' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetItemHandSocket, ReturnValue) == 0x000004, "Member 'GBCharacter_GetItemHandSocket::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetLastTakeHitTime
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetLastTakeHitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetLastTakeHitTime) == 0x000004, "Wrong alignment on GBCharacter_GetLastTakeHitTime");
static_assert(sizeof(GBCharacter_GetLastTakeHitTime) == 0x000004, "Wrong size on GBCharacter_GetLastTakeHitTime");
static_assert(offsetof(GBCharacter_GetLastTakeHitTime, ReturnValue) == 0x000000, "Member 'GBCharacter_GetLastTakeHitTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetLeanAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetLeanAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetLeanAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetLeanAlpha");
static_assert(sizeof(GBCharacter_GetLeanAlpha) == 0x000004, "Wrong size on GBCharacter_GetLeanAlpha");
static_assert(offsetof(GBCharacter_GetLeanAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetLeanAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetLightDetectionComponent
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetLightDetectionComponent final
{
public:
	class UGBLXRDetectionComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetLightDetectionComponent) == 0x000008, "Wrong alignment on GBCharacter_GetLightDetectionComponent");
static_assert(sizeof(GBCharacter_GetLightDetectionComponent) == 0x000008, "Wrong size on GBCharacter_GetLightDetectionComponent");
static_assert(offsetof(GBCharacter_GetLightDetectionComponent, ReturnValue) == 0x000000, "Member 'GBCharacter_GetLightDetectionComponent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetLightLevelScale
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetLightLevelScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetLightLevelScale) == 0x000004, "Wrong alignment on GBCharacter_GetLightLevelScale");
static_assert(sizeof(GBCharacter_GetLightLevelScale) == 0x000004, "Wrong size on GBCharacter_GetLightLevelScale");
static_assert(offsetof(GBCharacter_GetLightLevelScale, ReturnValue) == 0x000000, "Member 'GBCharacter_GetLightLevelScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetLocalViewer
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetLocalViewer final
{
public:
	class AGBPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetLocalViewer) == 0x000008, "Wrong alignment on GBCharacter_GetLocalViewer");
static_assert(sizeof(GBCharacter_GetLocalViewer) == 0x000008, "Wrong size on GBCharacter_GetLocalViewer");
static_assert(offsetof(GBCharacter_GetLocalViewer, ReturnValue) == 0x000000, "Member 'GBCharacter_GetLocalViewer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetMaxArmStrength
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetMaxArmStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetMaxArmStrength) == 0x000004, "Wrong alignment on GBCharacter_GetMaxArmStrength");
static_assert(sizeof(GBCharacter_GetMaxArmStrength) == 0x000004, "Wrong size on GBCharacter_GetMaxArmStrength");
static_assert(offsetof(GBCharacter_GetMaxArmStrength, ReturnValue) == 0x000000, "Member 'GBCharacter_GetMaxArmStrength::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetMaxStamina
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetMaxStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetMaxStamina) == 0x000004, "Wrong alignment on GBCharacter_GetMaxStamina");
static_assert(sizeof(GBCharacter_GetMaxStamina) == 0x000004, "Wrong size on GBCharacter_GetMaxStamina");
static_assert(offsetof(GBCharacter_GetMaxStamina, ReturnValue) == 0x000000, "Member 'GBCharacter_GetMaxStamina::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetMovementDirection
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetMovementDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetMovementDirection) == 0x000004, "Wrong alignment on GBCharacter_GetMovementDirection");
static_assert(sizeof(GBCharacter_GetMovementDirection) == 0x000004, "Wrong size on GBCharacter_GetMovementDirection");
static_assert(offsetof(GBCharacter_GetMovementDirection, ReturnValue) == 0x000000, "Member 'GBCharacter_GetMovementDirection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetMovementSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetMovementSpeed) == 0x000004, "Wrong alignment on GBCharacter_GetMovementSpeed");
static_assert(sizeof(GBCharacter_GetMovementSpeed) == 0x000004, "Wrong size on GBCharacter_GetMovementSpeed");
static_assert(offsetof(GBCharacter_GetMovementSpeed, ReturnValue) == 0x000000, "Member 'GBCharacter_GetMovementSpeed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetNetworkedMontage
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetNetworkedMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetNetworkedMontage) == 0x000008, "Wrong alignment on GBCharacter_GetNetworkedMontage");
static_assert(sizeof(GBCharacter_GetNetworkedMontage) == 0x000008, "Wrong size on GBCharacter_GetNetworkedMontage");
static_assert(offsetof(GBCharacter_GetNetworkedMontage, ReturnValue) == 0x000000, "Member 'GBCharacter_GetNetworkedMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetNetworkedMontageSection
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetNetworkedMontageSection final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetNetworkedMontageSection) == 0x000004, "Wrong alignment on GBCharacter_GetNetworkedMontageSection");
static_assert(sizeof(GBCharacter_GetNetworkedMontageSection) == 0x000008, "Wrong size on GBCharacter_GetNetworkedMontageSection");
static_assert(offsetof(GBCharacter_GetNetworkedMontageSection, ReturnValue) == 0x000000, "Member 'GBCharacter_GetNetworkedMontageSection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetNetworkedMontageSyncName
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetNetworkedMontageSyncName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetNetworkedMontageSyncName) == 0x000004, "Wrong alignment on GBCharacter_GetNetworkedMontageSyncName");
static_assert(sizeof(GBCharacter_GetNetworkedMontageSyncName) == 0x000008, "Wrong size on GBCharacter_GetNetworkedMontageSyncName");
static_assert(offsetof(GBCharacter_GetNetworkedMontageSyncName, ReturnValue) == 0x000000, "Member 'GBCharacter_GetNetworkedMontageSyncName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetOffTargetAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetOffTargetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetOffTargetAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetOffTargetAlpha");
static_assert(sizeof(GBCharacter_GetOffTargetAlpha) == 0x000004, "Wrong size on GBCharacter_GetOffTargetAlpha");
static_assert(offsetof(GBCharacter_GetOffTargetAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetOffTargetAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetPelvisBone
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetPelvisBone final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetPelvisBone) == 0x000004, "Wrong alignment on GBCharacter_GetPelvisBone");
static_assert(sizeof(GBCharacter_GetPelvisBone) == 0x000008, "Wrong size on GBCharacter_GetPelvisBone");
static_assert(offsetof(GBCharacter_GetPelvisBone, ReturnValue) == 0x000000, "Member 'GBCharacter_GetPelvisBone::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetPrevEquipped
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_GetPrevEquipped final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetPrevEquipped) == 0x000008, "Wrong alignment on GBCharacter_GetPrevEquipped");
static_assert(sizeof(GBCharacter_GetPrevEquipped) == 0x000010, "Wrong size on GBCharacter_GetPrevEquipped");
static_assert(offsetof(GBCharacter_GetPrevEquipped, TargetHand) == 0x000000, "Member 'GBCharacter_GetPrevEquipped::TargetHand' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetPrevEquipped, ReturnValue) == 0x000008, "Member 'GBCharacter_GetPrevEquipped::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetProneYawCenter
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetProneYawCenter final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetProneYawCenter) == 0x000004, "Wrong alignment on GBCharacter_GetProneYawCenter");
static_assert(sizeof(GBCharacter_GetProneYawCenter) == 0x000004, "Wrong size on GBCharacter_GetProneYawCenter");
static_assert(offsetof(GBCharacter_GetProneYawCenter, ReturnValue) == 0x000000, "Member 'GBCharacter_GetProneYawCenter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetProneYawOffCenterLimit
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetProneYawOffCenterLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetProneYawOffCenterLimit) == 0x000004, "Wrong alignment on GBCharacter_GetProneYawOffCenterLimit");
static_assert(sizeof(GBCharacter_GetProneYawOffCenterLimit) == 0x000004, "Wrong size on GBCharacter_GetProneYawOffCenterLimit");
static_assert(offsetof(GBCharacter_GetProneYawOffCenterLimit, ReturnValue) == 0x000000, "Member 'GBCharacter_GetProneYawOffCenterLimit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetRecoilAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetRecoilAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetRecoilAlpha) == 0x000004, "Wrong alignment on GBCharacter_GetRecoilAlpha");
static_assert(sizeof(GBCharacter_GetRecoilAlpha) == 0x000004, "Wrong size on GBCharacter_GetRecoilAlpha");
static_assert(offsetof(GBCharacter_GetRecoilAlpha, ReturnValue) == 0x000000, "Member 'GBCharacter_GetRecoilAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetRecoilCount
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_GetRecoilCount final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetRecoilCount) == 0x000001, "Wrong alignment on GBCharacter_GetRecoilCount");
static_assert(sizeof(GBCharacter_GetRecoilCount) == 0x000001, "Wrong size on GBCharacter_GetRecoilCount");
static_assert(offsetof(GBCharacter_GetRecoilCount, ReturnValue) == 0x000000, "Member 'GBCharacter_GetRecoilCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetRecoilOffset
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetRecoilOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetRecoilOffset) == 0x000004, "Wrong alignment on GBCharacter_GetRecoilOffset");
static_assert(sizeof(GBCharacter_GetRecoilOffset) == 0x00000C, "Wrong size on GBCharacter_GetRecoilOffset");
static_assert(offsetof(GBCharacter_GetRecoilOffset, ReturnValue) == 0x000000, "Member 'GBCharacter_GetRecoilOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetRemoteHeadOffset
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetRemoteHeadOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetRemoteHeadOffset) == 0x000004, "Wrong alignment on GBCharacter_GetRemoteHeadOffset");
static_assert(sizeof(GBCharacter_GetRemoteHeadOffset) == 0x00000C, "Wrong size on GBCharacter_GetRemoteHeadOffset");
static_assert(offsetof(GBCharacter_GetRemoteHeadOffset, ReturnValue) == 0x000000, "Member 'GBCharacter_GetRemoteHeadOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetRemoteViewPitch
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetRemoteViewPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetRemoteViewPitch) == 0x000004, "Wrong alignment on GBCharacter_GetRemoteViewPitch");
static_assert(sizeof(GBCharacter_GetRemoteViewPitch) == 0x000004, "Wrong size on GBCharacter_GetRemoteViewPitch");
static_assert(offsetof(GBCharacter_GetRemoteViewPitch, ReturnValue) == 0x000000, "Member 'GBCharacter_GetRemoteViewPitch::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetShoulderSlingPoint
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetShoulderSlingPoint final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetShoulderSlingPoint) == 0x000004, "Wrong alignment on GBCharacter_GetShoulderSlingPoint");
static_assert(sizeof(GBCharacter_GetShoulderSlingPoint) == 0x00000C, "Wrong size on GBCharacter_GetShoulderSlingPoint");
static_assert(offsetof(GBCharacter_GetShoulderSlingPoint, TargetHand) == 0x000000, "Member 'GBCharacter_GetShoulderSlingPoint::TargetHand' has a wrong offset!");
static_assert(offsetof(GBCharacter_GetShoulderSlingPoint, ReturnValue) == 0x000004, "Member 'GBCharacter_GetShoulderSlingPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetSightLineTransform
// 0x0030 (0x0030 - 0x0000)
struct GBCharacter_GetSightLineTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetSightLineTransform) == 0x000010, "Wrong alignment on GBCharacter_GetSightLineTransform");
static_assert(sizeof(GBCharacter_GetSightLineTransform) == 0x000030, "Wrong size on GBCharacter_GetSightLineTransform");
static_assert(offsetof(GBCharacter_GetSightLineTransform, ReturnValue) == 0x000000, "Member 'GBCharacter_GetSightLineTransform::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetSkinnedDecalSampler
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetSkinnedDecalSampler final
{
public:
	class USkinnedDecalSampler*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetSkinnedDecalSampler) == 0x000008, "Wrong alignment on GBCharacter_GetSkinnedDecalSampler");
static_assert(sizeof(GBCharacter_GetSkinnedDecalSampler) == 0x000008, "Wrong size on GBCharacter_GetSkinnedDecalSampler");
static_assert(offsetof(GBCharacter_GetSkinnedDecalSampler, ReturnValue) == 0x000000, "Member 'GBCharacter_GetSkinnedDecalSampler::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetStamina
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetStamina) == 0x000004, "Wrong alignment on GBCharacter_GetStamina");
static_assert(sizeof(GBCharacter_GetStamina) == 0x000004, "Wrong size on GBCharacter_GetStamina");
static_assert(offsetof(GBCharacter_GetStamina, ReturnValue) == 0x000000, "Member 'GBCharacter_GetStamina::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetSwayOffset
// 0x000C (0x000C - 0x0000)
struct GBCharacter_GetSwayOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetSwayOffset) == 0x000004, "Wrong alignment on GBCharacter_GetSwayOffset");
static_assert(sizeof(GBCharacter_GetSwayOffset) == 0x00000C, "Wrong size on GBCharacter_GetSwayOffset");
static_assert(offsetof(GBCharacter_GetSwayOffset, ReturnValue) == 0x000000, "Member 'GBCharacter_GetSwayOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetTotalItemWeight
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetTotalItemWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetTotalItemWeight) == 0x000004, "Wrong alignment on GBCharacter_GetTotalItemWeight");
static_assert(sizeof(GBCharacter_GetTotalItemWeight) == 0x000004, "Wrong size on GBCharacter_GetTotalItemWeight");
static_assert(offsetof(GBCharacter_GetTotalItemWeight, ReturnValue) == 0x000000, "Member 'GBCharacter_GetTotalItemWeight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetTracedCollisionOffset
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetTracedCollisionOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetTracedCollisionOffset) == 0x000004, "Wrong alignment on GBCharacter_GetTracedCollisionOffset");
static_assert(sizeof(GBCharacter_GetTracedCollisionOffset) == 0x000004, "Wrong size on GBCharacter_GetTracedCollisionOffset");
static_assert(offsetof(GBCharacter_GetTracedCollisionOffset, ReturnValue) == 0x000000, "Member 'GBCharacter_GetTracedCollisionOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetViewPitchMax
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetViewPitchMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetViewPitchMax) == 0x000004, "Wrong alignment on GBCharacter_GetViewPitchMax");
static_assert(sizeof(GBCharacter_GetViewPitchMax) == 0x000004, "Wrong size on GBCharacter_GetViewPitchMax");
static_assert(offsetof(GBCharacter_GetViewPitchMax, ReturnValue) == 0x000000, "Member 'GBCharacter_GetViewPitchMax::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetViewPitchMin
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetViewPitchMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetViewPitchMin) == 0x000004, "Wrong alignment on GBCharacter_GetViewPitchMin");
static_assert(sizeof(GBCharacter_GetViewPitchMin) == 0x000004, "Wrong size on GBCharacter_GetViewPitchMin");
static_assert(offsetof(GBCharacter_GetViewPitchMin, ReturnValue) == 0x000000, "Member 'GBCharacter_GetViewPitchMin::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetVisibilityModifier
// 0x0004 (0x0004 - 0x0000)
struct GBCharacter_GetVisibilityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetVisibilityModifier) == 0x000004, "Wrong alignment on GBCharacter_GetVisibilityModifier");
static_assert(sizeof(GBCharacter_GetVisibilityModifier) == 0x000004, "Wrong size on GBCharacter_GetVisibilityModifier");
static_assert(offsetof(GBCharacter_GetVisibilityModifier, ReturnValue) == 0x000000, "Member 'GBCharacter_GetVisibilityModifier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetVoiceComp
// 0x0008 (0x0008 - 0x0000)
struct GBCharacter_GetVoiceComp final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetVoiceComp) == 0x000008, "Wrong alignment on GBCharacter_GetVoiceComp");
static_assert(sizeof(GBCharacter_GetVoiceComp) == 0x000008, "Wrong size on GBCharacter_GetVoiceComp");
static_assert(offsetof(GBCharacter_GetVoiceComp, ReturnValue) == 0x000000, "Member 'GBCharacter_GetVoiceComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.GetWantsToControlBreath
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_GetWantsToControlBreath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_GetWantsToControlBreath) == 0x000001, "Wrong alignment on GBCharacter_GetWantsToControlBreath");
static_assert(sizeof(GBCharacter_GetWantsToControlBreath) == 0x000001, "Wrong size on GBCharacter_GetWantsToControlBreath");
static_assert(offsetof(GBCharacter_GetWantsToControlBreath, ReturnValue) == 0x000000, "Member 'GBCharacter_GetWantsToControlBreath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.Is3DMovementMode
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_Is3DMovementMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_Is3DMovementMode) == 0x000001, "Wrong alignment on GBCharacter_Is3DMovementMode");
static_assert(sizeof(GBCharacter_Is3DMovementMode) == 0x000001, "Wrong size on GBCharacter_Is3DMovementMode");
static_assert(offsetof(GBCharacter_Is3DMovementMode, ReturnValue) == 0x000000, "Member 'GBCharacter_Is3DMovementMode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsAlive) == 0x000001, "Wrong alignment on GBCharacter_IsAlive");
static_assert(sizeof(GBCharacter_IsAlive) == 0x000001, "Wrong size on GBCharacter_IsAlive");
static_assert(offsetof(GBCharacter_IsAlive, ReturnValue) == 0x000000, "Member 'GBCharacter_IsAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsBeingLed
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsBeingLed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsBeingLed) == 0x000001, "Wrong alignment on GBCharacter_IsBeingLed");
static_assert(sizeof(GBCharacter_IsBeingLed) == 0x000001, "Wrong size on GBCharacter_IsBeingLed");
static_assert(offsetof(GBCharacter_IsBeingLed, ReturnValue) == 0x000000, "Member 'GBCharacter_IsBeingLed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsCrouched
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsCrouched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsCrouched) == 0x000001, "Wrong alignment on GBCharacter_IsCrouched");
static_assert(sizeof(GBCharacter_IsCrouched) == 0x000001, "Wrong size on GBCharacter_IsCrouched");
static_assert(offsetof(GBCharacter_IsCrouched, ReturnValue) == 0x000000, "Member 'GBCharacter_IsCrouched::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsDummyCharacter
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsDummyCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsDummyCharacter) == 0x000001, "Wrong alignment on GBCharacter_IsDummyCharacter");
static_assert(sizeof(GBCharacter_IsDummyCharacter) == 0x000001, "Wrong size on GBCharacter_IsDummyCharacter");
static_assert(offsetof(GBCharacter_IsDummyCharacter, ReturnValue) == 0x000000, "Member 'GBCharacter_IsDummyCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsEngaged
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsEngaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsEngaged) == 0x000001, "Wrong alignment on GBCharacter_IsEngaged");
static_assert(sizeof(GBCharacter_IsEngaged) == 0x000001, "Wrong size on GBCharacter_IsEngaged");
static_assert(offsetof(GBCharacter_IsEngaged, ReturnValue) == 0x000000, "Member 'GBCharacter_IsEngaged::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsInInventory
// 0x0010 (0x0010 - 0x0000)
struct GBCharacter_IsInInventory final
{
public:
	const class AGBInvItem*                       InvItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBCharacter_IsInInventory) == 0x000008, "Wrong alignment on GBCharacter_IsInInventory");
static_assert(sizeof(GBCharacter_IsInInventory) == 0x000010, "Wrong size on GBCharacter_IsInInventory");
static_assert(offsetof(GBCharacter_IsInInventory, InvItem) == 0x000000, "Member 'GBCharacter_IsInInventory::InvItem' has a wrong offset!");
static_assert(offsetof(GBCharacter_IsInInventory, ReturnValue) == 0x000008, "Member 'GBCharacter_IsInInventory::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsLeading
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsLeading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsLeading) == 0x000001, "Wrong alignment on GBCharacter_IsLeading");
static_assert(sizeof(GBCharacter_IsLeading) == 0x000001, "Wrong size on GBCharacter_IsLeading");
static_assert(offsetof(GBCharacter_IsLeading, ReturnValue) == 0x000000, "Member 'GBCharacter_IsLeading::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsLocallyViewed
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsLocallyViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsLocallyViewed) == 0x000001, "Wrong alignment on GBCharacter_IsLocallyViewed");
static_assert(sizeof(GBCharacter_IsLocallyViewed) == 0x000001, "Wrong size on GBCharacter_IsLocallyViewed");
static_assert(offsetof(GBCharacter_IsLocallyViewed, ReturnValue) == 0x000000, "Member 'GBCharacter_IsLocallyViewed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsProne
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsProne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsProne) == 0x000001, "Wrong alignment on GBCharacter_IsProne");
static_assert(sizeof(GBCharacter_IsProne) == 0x000001, "Wrong size on GBCharacter_IsProne");
static_assert(offsetof(GBCharacter_IsProne, ReturnValue) == 0x000000, "Member 'GBCharacter_IsProne::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsRagdoll
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsRagdoll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsRagdoll) == 0x000001, "Wrong alignment on GBCharacter_IsRagdoll");
static_assert(sizeof(GBCharacter_IsRagdoll) == 0x000001, "Wrong size on GBCharacter_IsRagdoll");
static_assert(offsetof(GBCharacter_IsRagdoll, ReturnValue) == 0x000000, "Member 'GBCharacter_IsRagdoll::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsRunning) == 0x000001, "Wrong alignment on GBCharacter_IsRunning");
static_assert(sizeof(GBCharacter_IsRunning) == 0x000001, "Wrong size on GBCharacter_IsRunning");
static_assert(offsetof(GBCharacter_IsRunning, ReturnValue) == 0x000000, "Member 'GBCharacter_IsRunning::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsSprinting) == 0x000001, "Wrong alignment on GBCharacter_IsSprinting");
static_assert(sizeof(GBCharacter_IsSprinting) == 0x000001, "Wrong size on GBCharacter_IsSprinting");
static_assert(offsetof(GBCharacter_IsSprinting, ReturnValue) == 0x000000, "Member 'GBCharacter_IsSprinting::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.IsUICharacter
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_IsUICharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_IsUICharacter) == 0x000001, "Wrong alignment on GBCharacter_IsUICharacter");
static_assert(sizeof(GBCharacter_IsUICharacter) == 0x000001, "Wrong size on GBCharacter_IsUICharacter");
static_assert(offsetof(GBCharacter_IsUICharacter, ReturnValue) == 0x000000, "Member 'GBCharacter_IsUICharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.WantsToLean
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_WantsToLean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_WantsToLean) == 0x000001, "Wrong alignment on GBCharacter_WantsToLean");
static_assert(sizeof(GBCharacter_WantsToLean) == 0x000001, "Wrong size on GBCharacter_WantsToLean");
static_assert(offsetof(GBCharacter_WantsToLean, ReturnValue) == 0x000000, "Member 'GBCharacter_WantsToLean::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.WantsToLeanLeft
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_WantsToLeanLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_WantsToLeanLeft) == 0x000001, "Wrong alignment on GBCharacter_WantsToLeanLeft");
static_assert(sizeof(GBCharacter_WantsToLeanLeft) == 0x000001, "Wrong size on GBCharacter_WantsToLeanLeft");
static_assert(offsetof(GBCharacter_WantsToLeanLeft, ReturnValue) == 0x000000, "Member 'GBCharacter_WantsToLeanLeft::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.WantsToLeanRight
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_WantsToLeanRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_WantsToLeanRight) == 0x000001, "Wrong alignment on GBCharacter_WantsToLeanRight");
static_assert(sizeof(GBCharacter_WantsToLeanRight) == 0x000001, "Wrong size on GBCharacter_WantsToLeanRight");
static_assert(offsetof(GBCharacter_WantsToLeanRight, ReturnValue) == 0x000000, "Member 'GBCharacter_WantsToLeanRight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.WantsToRun
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_WantsToRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_WantsToRun) == 0x000001, "Wrong alignment on GBCharacter_WantsToRun");
static_assert(sizeof(GBCharacter_WantsToRun) == 0x000001, "Wrong size on GBCharacter_WantsToRun");
static_assert(offsetof(GBCharacter_WantsToRun, ReturnValue) == 0x000000, "Member 'GBCharacter_WantsToRun::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacter.WantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct GBCharacter_WantsToSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacter_WantsToSprint) == 0x000001, "Wrong alignment on GBCharacter_WantsToSprint");
static_assert(sizeof(GBCharacter_WantsToSprint) == 0x000001, "Wrong size on GBCharacter_WantsToSprint");
static_assert(offsetof(GBCharacter_WantsToSprint, ReturnValue) == 0x000000, "Member 'GBCharacter_WantsToSprint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBarkManager.Bark
// 0x0018 (0x0018 - 0x0000)
struct GBAIBarkManager_Bark final
{
public:
	class AGBKytController*                       AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarkType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarkKey;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBarkManager_Bark) == 0x000008, "Wrong alignment on GBAIBarkManager_Bark");
static_assert(sizeof(GBAIBarkManager_Bark) == 0x000018, "Wrong size on GBAIBarkManager_Bark");
static_assert(offsetof(GBAIBarkManager_Bark, AIController) == 0x000000, "Member 'GBAIBarkManager_Bark::AIController' has a wrong offset!");
static_assert(offsetof(GBAIBarkManager_Bark, BarkType) == 0x000008, "Member 'GBAIBarkManager_Bark::BarkType' has a wrong offset!");
static_assert(offsetof(GBAIBarkManager_Bark, BarkKey) == 0x000010, "Member 'GBAIBarkManager_Bark::BarkKey' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorBase.TickState
// 0x0004 (0x0004 - 0x0000)
struct GBAIBehaviorBase_TickState final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorBase_TickState) == 0x000004, "Wrong alignment on GBAIBehaviorBase_TickState");
static_assert(sizeof(GBAIBehaviorBase_TickState) == 0x000004, "Wrong size on GBAIBehaviorBase_TickState");
static_assert(offsetof(GBAIBehaviorBase_TickState, DeltaTime) == 0x000000, "Member 'GBAIBehaviorBase_TickState::DeltaTime' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorBase.GetCommandBlackboard
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorBase_GetCommandBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorBase_GetCommandBlackboard) == 0x000008, "Wrong alignment on GBAIBehaviorBase_GetCommandBlackboard");
static_assert(sizeof(GBAIBehaviorBase_GetCommandBlackboard) == 0x000008, "Wrong size on GBAIBehaviorBase_GetCommandBlackboard");
static_assert(offsetof(GBAIBehaviorBase_GetCommandBlackboard, ReturnValue) == 0x000000, "Member 'GBAIBehaviorBase_GetCommandBlackboard::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorBase.GetCommonBlackboard
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorBase_GetCommonBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorBase_GetCommonBlackboard) == 0x000008, "Wrong alignment on GBAIBehaviorBase_GetCommonBlackboard");
static_assert(sizeof(GBAIBehaviorBase_GetCommonBlackboard) == 0x000008, "Wrong size on GBAIBehaviorBase_GetCommonBlackboard");
static_assert(offsetof(GBAIBehaviorBase_GetCommonBlackboard, ReturnValue) == 0x000000, "Member 'GBAIBehaviorBase_GetCommonBlackboard::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorBase.GetScore
// 0x0004 (0x0004 - 0x0000)
struct GBAIBehaviorBase_GetScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorBase_GetScore) == 0x000004, "Wrong alignment on GBAIBehaviorBase_GetScore");
static_assert(sizeof(GBAIBehaviorBase_GetScore) == 0x000004, "Wrong size on GBAIBehaviorBase_GetScore");
static_assert(offsetof(GBAIBehaviorBase_GetScore, ReturnValue) == 0x000000, "Member 'GBAIBehaviorBase_GetScore::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorBase.PreCondition
// 0x0001 (0x0001 - 0x0000)
struct GBAIBehaviorBase_PreCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorBase_PreCondition) == 0x000001, "Wrong alignment on GBAIBehaviorBase_PreCondition");
static_assert(sizeof(GBAIBehaviorBase_PreCondition) == 0x000001, "Wrong size on GBAIBehaviorBase_PreCondition");
static_assert(offsetof(GBAIBehaviorBase_PreCondition, ReturnValue) == 0x000000, "Member 'GBAIBehaviorBase_PreCondition::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorBase.TryGetCurrentObjective
// 0x0010 (0x0010 - 0x0000)
struct GBAIBehaviorBase_TryGetCurrentObjective final
{
public:
	TSubclassOf<class UGBAIObjectiveBase>         ObjectiveClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBAIObjectiveBase*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorBase_TryGetCurrentObjective) == 0x000008, "Wrong alignment on GBAIBehaviorBase_TryGetCurrentObjective");
static_assert(sizeof(GBAIBehaviorBase_TryGetCurrentObjective) == 0x000010, "Wrong size on GBAIBehaviorBase_TryGetCurrentObjective");
static_assert(offsetof(GBAIBehaviorBase_TryGetCurrentObjective, ObjectiveClass) == 0x000000, "Member 'GBAIBehaviorBase_TryGetCurrentObjective::ObjectiveClass' has a wrong offset!");
static_assert(offsetof(GBAIBehaviorBase_TryGetCurrentObjective, ReturnValue) == 0x000008, "Member 'GBAIBehaviorBase_TryGetCurrentObjective::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.AddBehavior
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorSelectionComponent_AddBehavior final
{
public:
	class UGBAIBehaviorBase*                      Behavior;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_AddBehavior) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_AddBehavior");
static_assert(sizeof(GBAIBehaviorSelectionComponent_AddBehavior) == 0x000008, "Wrong size on GBAIBehaviorSelectionComponent_AddBehavior");
static_assert(offsetof(GBAIBehaviorSelectionComponent_AddBehavior, Behavior) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_AddBehavior::Behavior' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.AddObjective
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorSelectionComponent_AddObjective final
{
public:
	class UGBAIObjectiveBase*                     Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_AddObjective) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_AddObjective");
static_assert(sizeof(GBAIBehaviorSelectionComponent_AddObjective) == 0x000008, "Wrong size on GBAIBehaviorSelectionComponent_AddObjective");
static_assert(offsetof(GBAIBehaviorSelectionComponent_AddObjective, Objective) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_AddObjective::Objective' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.SetCurrentBehavior
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorSelectionComponent_SetCurrentBehavior final
{
public:
	class UGBAIBehaviorBase*                      NewBehavior;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_SetCurrentBehavior) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_SetCurrentBehavior");
static_assert(sizeof(GBAIBehaviorSelectionComponent_SetCurrentBehavior) == 0x000008, "Wrong size on GBAIBehaviorSelectionComponent_SetCurrentBehavior");
static_assert(offsetof(GBAIBehaviorSelectionComponent_SetCurrentBehavior, NewBehavior) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_SetCurrentBehavior::NewBehavior' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.SetObjectiveGenerator
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorSelectionComponent_SetObjectiveGenerator final
{
public:
	class UGBAIObjectiveGeneratorBase*            Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_SetObjectiveGenerator) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_SetObjectiveGenerator");
static_assert(sizeof(GBAIBehaviorSelectionComponent_SetObjectiveGenerator) == 0x000008, "Wrong size on GBAIBehaviorSelectionComponent_SetObjectiveGenerator");
static_assert(offsetof(GBAIBehaviorSelectionComponent_SetObjectiveGenerator, Generator) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_SetObjectiveGenerator::Generator' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.GetBehaviors
// 0x0010 (0x0010 - 0x0000)
struct GBAIBehaviorSelectionComponent_GetBehaviors final
{
public:
	TArray<class UGBAIBehaviorBase*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_GetBehaviors) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_GetBehaviors");
static_assert(sizeof(GBAIBehaviorSelectionComponent_GetBehaviors) == 0x000010, "Wrong size on GBAIBehaviorSelectionComponent_GetBehaviors");
static_assert(offsetof(GBAIBehaviorSelectionComponent_GetBehaviors, ReturnValue) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_GetBehaviors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.GetCurrentBehavior
// 0x0008 (0x0008 - 0x0000)
struct GBAIBehaviorSelectionComponent_GetCurrentBehavior final
{
public:
	class UGBAIBehaviorBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_GetCurrentBehavior) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_GetCurrentBehavior");
static_assert(sizeof(GBAIBehaviorSelectionComponent_GetCurrentBehavior) == 0x000008, "Wrong size on GBAIBehaviorSelectionComponent_GetCurrentBehavior");
static_assert(offsetof(GBAIBehaviorSelectionComponent_GetCurrentBehavior, ReturnValue) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_GetCurrentBehavior::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIBehaviorSelectionComponent.TryGetCurrentObjective
// 0x0010 (0x0010 - 0x0000)
struct GBAIBehaviorSelectionComponent_TryGetCurrentObjective final
{
public:
	TSubclassOf<class UGBAIObjectiveBase>         ObjectiveClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBAIObjectiveBase*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIBehaviorSelectionComponent_TryGetCurrentObjective) == 0x000008, "Wrong alignment on GBAIBehaviorSelectionComponent_TryGetCurrentObjective");
static_assert(sizeof(GBAIBehaviorSelectionComponent_TryGetCurrentObjective) == 0x000010, "Wrong size on GBAIBehaviorSelectionComponent_TryGetCurrentObjective");
static_assert(offsetof(GBAIBehaviorSelectionComponent_TryGetCurrentObjective, ObjectiveClass) == 0x000000, "Member 'GBAIBehaviorSelectionComponent_TryGetCurrentObjective::ObjectiveClass' has a wrong offset!");
static_assert(offsetof(GBAIBehaviorSelectionComponent_TryGetCurrentObjective, ReturnValue) == 0x000008, "Member 'GBAIBehaviorSelectionComponent_TryGetCurrentObjective::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.FallingDamageReduction
// 0x0090 (0x0090 - 0x0000)
struct GBCharacterMovement_FallingDamageReduction final
{
public:
	float                                         FallingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_FallingDamageReduction) == 0x000004, "Wrong alignment on GBCharacterMovement_FallingDamageReduction");
static_assert(sizeof(GBCharacterMovement_FallingDamageReduction) == 0x000090, "Wrong size on GBCharacterMovement_FallingDamageReduction");
static_assert(offsetof(GBCharacterMovement_FallingDamageReduction, FallingDamage) == 0x000000, "Member 'GBCharacterMovement_FallingDamageReduction::FallingDamage' has a wrong offset!");
static_assert(offsetof(GBCharacterMovement_FallingDamageReduction, Hit) == 0x000004, "Member 'GBCharacterMovement_FallingDamageReduction::Hit' has a wrong offset!");
static_assert(offsetof(GBCharacterMovement_FallingDamageReduction, ReturnValue) == 0x00008C, "Member 'GBCharacterMovement_FallingDamageReduction::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetEngagedAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetEngagedAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetEngagedAlpha) == 0x000004, "Wrong alignment on GBCharacterMovement_GetEngagedAlpha");
static_assert(sizeof(GBCharacterMovement_GetEngagedAlpha) == 0x000004, "Wrong size on GBCharacterMovement_GetEngagedAlpha");
static_assert(offsetof(GBCharacterMovement_GetEngagedAlpha, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetEngagedAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetFirearmEquipped
// 0x0001 (0x0001 - 0x0000)
struct GBCharacterMovement_GetFirearmEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetFirearmEquipped) == 0x000001, "Wrong alignment on GBCharacterMovement_GetFirearmEquipped");
static_assert(sizeof(GBCharacterMovement_GetFirearmEquipped) == 0x000001, "Wrong size on GBCharacterMovement_GetFirearmEquipped");
static_assert(offsetof(GBCharacterMovement_GetFirearmEquipped, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetFirearmEquipped::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetLadderComponent
// 0x0008 (0x0008 - 0x0000)
struct GBCharacterMovement_GetLadderComponent final
{
public:
	class UGBLadderComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetLadderComponent) == 0x000008, "Wrong alignment on GBCharacterMovement_GetLadderComponent");
static_assert(sizeof(GBCharacterMovement_GetLadderComponent) == 0x000008, "Wrong size on GBCharacterMovement_GetLadderComponent");
static_assert(offsetof(GBCharacterMovement_GetLadderComponent, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetLadderComponent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetMaxRunningSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetMaxRunningSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetMaxRunningSpeed) == 0x000004, "Wrong alignment on GBCharacterMovement_GetMaxRunningSpeed");
static_assert(sizeof(GBCharacterMovement_GetMaxRunningSpeed) == 0x000004, "Wrong size on GBCharacterMovement_GetMaxRunningSpeed");
static_assert(offsetof(GBCharacterMovement_GetMaxRunningSpeed, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetMaxRunningSpeed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetMaxSprintingSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetMaxSprintingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetMaxSprintingSpeed) == 0x000004, "Wrong alignment on GBCharacterMovement_GetMaxSprintingSpeed");
static_assert(sizeof(GBCharacterMovement_GetMaxSprintingSpeed) == 0x000004, "Wrong size on GBCharacterMovement_GetMaxSprintingSpeed");
static_assert(offsetof(GBCharacterMovement_GetMaxSprintingSpeed, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetMaxSprintingSpeed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetMaxWalkingSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetMaxWalkingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetMaxWalkingSpeed) == 0x000004, "Wrong alignment on GBCharacterMovement_GetMaxWalkingSpeed");
static_assert(sizeof(GBCharacterMovement_GetMaxWalkingSpeed) == 0x000004, "Wrong size on GBCharacterMovement_GetMaxWalkingSpeed");
static_assert(offsetof(GBCharacterMovement_GetMaxWalkingSpeed, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetMaxWalkingSpeed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetMovementDirection
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetMovementDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetMovementDirection) == 0x000004, "Wrong alignment on GBCharacterMovement_GetMovementDirection");
static_assert(sizeof(GBCharacterMovement_GetMovementDirection) == 0x000004, "Wrong size on GBCharacterMovement_GetMovementDirection");
static_assert(offsetof(GBCharacterMovement_GetMovementDirection, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetMovementDirection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetOffTargetAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetOffTargetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetOffTargetAlpha) == 0x000004, "Wrong alignment on GBCharacterMovement_GetOffTargetAlpha");
static_assert(sizeof(GBCharacterMovement_GetOffTargetAlpha) == 0x000004, "Wrong size on GBCharacterMovement_GetOffTargetAlpha");
static_assert(offsetof(GBCharacterMovement_GetOffTargetAlpha, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetOffTargetAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetWaterDepth
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetWaterDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetWaterDepth) == 0x000004, "Wrong alignment on GBCharacterMovement_GetWaterDepth");
static_assert(sizeof(GBCharacterMovement_GetWaterDepth) == 0x000004, "Wrong size on GBCharacterMovement_GetWaterDepth");
static_assert(offsetof(GBCharacterMovement_GetWaterDepth, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetWaterDepth::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetWaterDepthJumpScale
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetWaterDepthJumpScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetWaterDepthJumpScale) == 0x000004, "Wrong alignment on GBCharacterMovement_GetWaterDepthJumpScale");
static_assert(sizeof(GBCharacterMovement_GetWaterDepthJumpScale) == 0x000004, "Wrong size on GBCharacterMovement_GetWaterDepthJumpScale");
static_assert(offsetof(GBCharacterMovement_GetWaterDepthJumpScale, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetWaterDepthJumpScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.GetWaterDepthMaxSpeedScale
// 0x0004 (0x0004 - 0x0000)
struct GBCharacterMovement_GetWaterDepthMaxSpeedScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_GetWaterDepthMaxSpeedScale) == 0x000004, "Wrong alignment on GBCharacterMovement_GetWaterDepthMaxSpeedScale");
static_assert(sizeof(GBCharacterMovement_GetWaterDepthMaxSpeedScale) == 0x000004, "Wrong size on GBCharacterMovement_GetWaterDepthMaxSpeedScale");
static_assert(offsetof(GBCharacterMovement_GetWaterDepthMaxSpeedScale, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_GetWaterDepthMaxSpeedScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.IsProne
// 0x0001 (0x0001 - 0x0000)
struct GBCharacterMovement_IsProne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_IsProne) == 0x000001, "Wrong alignment on GBCharacterMovement_IsProne");
static_assert(sizeof(GBCharacterMovement_IsProne) == 0x000001, "Wrong size on GBCharacterMovement_IsProne");
static_assert(offsetof(GBCharacterMovement_IsProne, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_IsProne::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.WantsToLean
// 0x0001 (0x0001 - 0x0000)
struct GBCharacterMovement_WantsToLean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_WantsToLean) == 0x000001, "Wrong alignment on GBCharacterMovement_WantsToLean");
static_assert(sizeof(GBCharacterMovement_WantsToLean) == 0x000001, "Wrong size on GBCharacterMovement_WantsToLean");
static_assert(offsetof(GBCharacterMovement_WantsToLean, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_WantsToLean::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.WantsToRun
// 0x0001 (0x0001 - 0x0000)
struct GBCharacterMovement_WantsToRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_WantsToRun) == 0x000001, "Wrong alignment on GBCharacterMovement_WantsToRun");
static_assert(sizeof(GBCharacterMovement_WantsToRun) == 0x000001, "Wrong size on GBCharacterMovement_WantsToRun");
static_assert(offsetof(GBCharacterMovement_WantsToRun, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_WantsToRun::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharacterMovement.WantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct GBCharacterMovement_WantsToSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharacterMovement_WantsToSprint) == 0x000001, "Wrong alignment on GBCharacterMovement_WantsToSprint");
static_assert(sizeof(GBCharacterMovement_WantsToSprint) == 0x000001, "Wrong size on GBCharacterMovement_WantsToSprint");
static_assert(offsetof(GBCharacterMovement_WantsToSprint, ReturnValue) == 0x000000, "Member 'GBCharacterMovement_WantsToSprint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.Bark
// 0x0014 (0x0014 - 0x0000)
struct GBAIController_Bark final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadioMessage;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIController_Bark) == 0x000004, "Wrong alignment on GBAIController_Bark");
static_assert(sizeof(GBAIController_Bark) == 0x000014, "Wrong size on GBAIController_Bark");
static_assert(offsetof(GBAIController_Bark, Key) == 0x000000, "Member 'GBAIController_Bark::Key' has a wrong offset!");
static_assert(offsetof(GBAIController_Bark, Priority) == 0x000008, "Member 'GBAIController_Bark::Priority' has a wrong offset!");
static_assert(offsetof(GBAIController_Bark, Timeout) == 0x00000C, "Member 'GBAIController_Bark::Timeout' has a wrong offset!");
static_assert(offsetof(GBAIController_Bark, bIsRadioMessage) == 0x000010, "Member 'GBAIController_Bark::bIsRadioMessage' has a wrong offset!");

// Function GroundBranch.GBAIController.BulletWarn
// 0x0010 (0x0010 - 0x0000)
struct GBAIController_BulletWarn final
{
public:
	class AActor*                                 Bullet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubSonic;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIController_BulletWarn) == 0x000008, "Wrong alignment on GBAIController_BulletWarn");
static_assert(sizeof(GBAIController_BulletWarn) == 0x000010, "Wrong size on GBAIController_BulletWarn");
static_assert(offsetof(GBAIController_BulletWarn, Bullet) == 0x000000, "Member 'GBAIController_BulletWarn::Bullet' has a wrong offset!");
static_assert(offsetof(GBAIController_BulletWarn, bSubSonic) == 0x000008, "Member 'GBAIController_BulletWarn::bSubSonic' has a wrong offset!");

// Function GroundBranch.GBAIController.DebugFreeze
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_DebugFreeze final
{
public:
	bool                                          bShouldFreeze;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_DebugFreeze) == 0x000001, "Wrong alignment on GBAIController_DebugFreeze");
static_assert(sizeof(GBAIController_DebugFreeze) == 0x000001, "Wrong size on GBAIController_DebugFreeze");
static_assert(offsetof(GBAIController_DebugFreeze, bShouldFreeze) == 0x000000, "Member 'GBAIController_DebugFreeze::bShouldFreeze' has a wrong offset!");

// Function GroundBranch.GBAIController.Freeze
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_Freeze final
{
public:
	float                                         FreezeTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_Freeze) == 0x000004, "Wrong alignment on GBAIController_Freeze");
static_assert(sizeof(GBAIController_Freeze) == 0x000004, "Wrong size on GBAIController_Freeze");
static_assert(offsetof(GBAIController_Freeze, FreezeTime) == 0x000000, "Member 'GBAIController_Freeze::FreezeTime' has a wrong offset!");

// Function GroundBranch.GBAIController.FrozenTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_FrozenTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_FrozenTimeLeft) == 0x000004, "Wrong alignment on GBAIController_FrozenTimeLeft");
static_assert(sizeof(GBAIController_FrozenTimeLeft) == 0x000004, "Wrong size on GBAIController_FrozenTimeLeft");
static_assert(offsetof(GBAIController_FrozenTimeLeft, ReturnValue) == 0x000000, "Member 'GBAIController_FrozenTimeLeft::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetCurrentPathCorridorIndex
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetCurrentPathCorridorIndex final
{
public:
	int32                                         CorridorIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIController_GetCurrentPathCorridorIndex) == 0x000004, "Wrong alignment on GBAIController_GetCurrentPathCorridorIndex");
static_assert(sizeof(GBAIController_GetCurrentPathCorridorIndex) == 0x000008, "Wrong size on GBAIController_GetCurrentPathCorridorIndex");
static_assert(offsetof(GBAIController_GetCurrentPathCorridorIndex, CorridorIndex) == 0x000000, "Member 'GBAIController_GetCurrentPathCorridorIndex::CorridorIndex' has a wrong offset!");
static_assert(offsetof(GBAIController_GetCurrentPathCorridorIndex, ReturnValue) == 0x000004, "Member 'GBAIController_GetCurrentPathCorridorIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetGBCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetGBCharacter final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetGBCharacter) == 0x000008, "Wrong alignment on GBAIController_GetGBCharacter");
static_assert(sizeof(GBAIController_GetGBCharacter) == 0x000008, "Wrong size on GBAIController_GetGBCharacter");
static_assert(offsetof(GBAIController_GetGBCharacter, ReturnValue) == 0x000000, "Member 'GBAIController_GetGBCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetNavLinkPoints
// 0x0020 (0x0020 - 0x0000)
struct GBAIController_GetNavLinkPoints final
{
public:
	int32                                         CorridorIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinkStart;                                         // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinkEnd;                                           // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIController_GetNavLinkPoints) == 0x000004, "Wrong alignment on GBAIController_GetNavLinkPoints");
static_assert(sizeof(GBAIController_GetNavLinkPoints) == 0x000020, "Wrong size on GBAIController_GetNavLinkPoints");
static_assert(offsetof(GBAIController_GetNavLinkPoints, CorridorIndex) == 0x000000, "Member 'GBAIController_GetNavLinkPoints::CorridorIndex' has a wrong offset!");
static_assert(offsetof(GBAIController_GetNavLinkPoints, LinkStart) == 0x000004, "Member 'GBAIController_GetNavLinkPoints::LinkStart' has a wrong offset!");
static_assert(offsetof(GBAIController_GetNavLinkPoints, LinkEnd) == 0x000010, "Member 'GBAIController_GetNavLinkPoints::LinkEnd' has a wrong offset!");
static_assert(offsetof(GBAIController_GetNavLinkPoints, ReturnValue) == 0x00001C, "Member 'GBAIController_GetNavLinkPoints::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.IsFrozen
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_IsFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_IsFrozen) == 0x000001, "Wrong alignment on GBAIController_IsFrozen");
static_assert(sizeof(GBAIController_IsFrozen) == 0x000001, "Wrong size on GBAIController_IsFrozen");
static_assert(offsetof(GBAIController_IsFrozen, ReturnValue) == 0x000000, "Member 'GBAIController_IsFrozen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.NeedsReload
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_NeedsReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_NeedsReload) == 0x000001, "Wrong alignment on GBAIController_NeedsReload");
static_assert(sizeof(GBAIController_NeedsReload) == 0x000001, "Wrong size on GBAIController_NeedsReload");
static_assert(offsetof(GBAIController_NeedsReload, ReturnValue) == 0x000000, "Member 'GBAIController_NeedsReload::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.NotifyBump
// 0x00A8 (0x00A8 - 0x0000)
struct GBAIController_NotifyBump final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIController_NotifyBump) == 0x000008, "Wrong alignment on GBAIController_NotifyBump");
static_assert(sizeof(GBAIController_NotifyBump) == 0x0000A8, "Wrong size on GBAIController_NotifyBump");
static_assert(offsetof(GBAIController_NotifyBump, SelfActor) == 0x000000, "Member 'GBAIController_NotifyBump::SelfActor' has a wrong offset!");
static_assert(offsetof(GBAIController_NotifyBump, OtherActor) == 0x000008, "Member 'GBAIController_NotifyBump::OtherActor' has a wrong offset!");
static_assert(offsetof(GBAIController_NotifyBump, NormalImpulse) == 0x000010, "Member 'GBAIController_NotifyBump::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GBAIController_NotifyBump, Hit) == 0x00001C, "Member 'GBAIController_NotifyBump::Hit' has a wrong offset!");

// Function GroundBranch.GBAIController.NotifyTakeHit
// 0x0028 (0x0028 - 0x0000)
struct GBAIController_NotifyTakeHit final
{
public:
	class AController*                            InstigatedBy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageEvent                           DamageEvent;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_NotifyTakeHit) == 0x000008, "Wrong alignment on GBAIController_NotifyTakeHit");
static_assert(sizeof(GBAIController_NotifyTakeHit) == 0x000028, "Wrong size on GBAIController_NotifyTakeHit");
static_assert(offsetof(GBAIController_NotifyTakeHit, InstigatedBy) == 0x000000, "Member 'GBAIController_NotifyTakeHit::InstigatedBy' has a wrong offset!");
static_assert(offsetof(GBAIController_NotifyTakeHit, Damage) == 0x000008, "Member 'GBAIController_NotifyTakeHit::Damage' has a wrong offset!");
static_assert(offsetof(GBAIController_NotifyTakeHit, Momentum) == 0x00000C, "Member 'GBAIController_NotifyTakeHit::Momentum' has a wrong offset!");
static_assert(offsetof(GBAIController_NotifyTakeHit, DamageEvent) == 0x000018, "Member 'GBAIController_NotifyTakeHit::DamageEvent' has a wrong offset!");

// Function GroundBranch.GBAIController.OnSensingNewEnemyEvent
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_OnSensingNewEnemyEvent final
{
public:
	bool                                          bHasLineOfSight;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_OnSensingNewEnemyEvent) == 0x000001, "Wrong alignment on GBAIController_OnSensingNewEnemyEvent");
static_assert(sizeof(GBAIController_OnSensingNewEnemyEvent) == 0x000001, "Wrong size on GBAIController_OnSensingNewEnemyEvent");
static_assert(offsetof(GBAIController_OnSensingNewEnemyEvent, bHasLineOfSight) == 0x000000, "Member 'GBAIController_OnSensingNewEnemyEvent::bHasLineOfSight' has a wrong offset!");

// Function GroundBranch.GBAIController.OnTargetPerceptionUpdated
// 0x0048 (0x0048 - 0x0000)
struct GBAIController_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIController_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on GBAIController_OnTargetPerceptionUpdated");
static_assert(sizeof(GBAIController_OnTargetPerceptionUpdated) == 0x000048, "Wrong size on GBAIController_OnTargetPerceptionUpdated");
static_assert(offsetof(GBAIController_OnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'GBAIController_OnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(GBAIController_OnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'GBAIController_OnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function GroundBranch.GBAIController.SetAIState
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_SetAIState final
{
public:
	EGBAIState                                    NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetAIState) == 0x000001, "Wrong alignment on GBAIController_SetAIState");
static_assert(sizeof(GBAIController_SetAIState) == 0x000001, "Wrong size on GBAIController_SetAIState");
static_assert(offsetof(GBAIController_SetAIState, NewState) == 0x000000, "Member 'GBAIController_SetAIState::NewState' has a wrong offset!");

// Function GroundBranch.GBAIController.SetAlertAffiliationSightThreshold
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetAlertAffiliationSightThreshold final
{
public:
	float                                         NewAlertAffiliationSightThreshold;                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetAlertAffiliationSightThreshold) == 0x000004, "Wrong alignment on GBAIController_SetAlertAffiliationSightThreshold");
static_assert(sizeof(GBAIController_SetAlertAffiliationSightThreshold) == 0x000004, "Wrong size on GBAIController_SetAlertAffiliationSightThreshold");
static_assert(offsetof(GBAIController_SetAlertAffiliationSightThreshold, NewAlertAffiliationSightThreshold) == 0x000000, "Member 'GBAIController_SetAlertAffiliationSightThreshold::NewAlertAffiliationSightThreshold' has a wrong offset!");

// Function GroundBranch.GBAIController.SetAlertHearingThreshold
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetAlertHearingThreshold final
{
public:
	float                                         NewAlertHearingThreshold;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetAlertHearingThreshold) == 0x000004, "Wrong alignment on GBAIController_SetAlertHearingThreshold");
static_assert(sizeof(GBAIController_SetAlertHearingThreshold) == 0x000004, "Wrong size on GBAIController_SetAlertHearingThreshold");
static_assert(offsetof(GBAIController_SetAlertHearingThreshold, NewAlertHearingThreshold) == 0x000000, "Member 'GBAIController_SetAlertHearingThreshold::NewAlertHearingThreshold' has a wrong offset!");

// Function GroundBranch.GBAIController.SetAlertSuspicionSightThreshold
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetAlertSuspicionSightThreshold final
{
public:
	float                                         NewAlertSuspicionSightThreshold;                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetAlertSuspicionSightThreshold) == 0x000004, "Wrong alignment on GBAIController_SetAlertSuspicionSightThreshold");
static_assert(sizeof(GBAIController_SetAlertSuspicionSightThreshold) == 0x000004, "Wrong size on GBAIController_SetAlertSuspicionSightThreshold");
static_assert(offsetof(GBAIController_SetAlertSuspicionSightThreshold, NewAlertSuspicionSightThreshold) == 0x000000, "Member 'GBAIController_SetAlertSuspicionSightThreshold::NewAlertSuspicionSightThreshold' has a wrong offset!");

// Function GroundBranch.GBAIController.SetDesiredAimRotationOverride
// 0x0010 (0x0010 - 0x0000)
struct GBAIController_SetDesiredAimRotationOverride final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NewRate;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetDesiredAimRotationOverride) == 0x000004, "Wrong alignment on GBAIController_SetDesiredAimRotationOverride");
static_assert(sizeof(GBAIController_SetDesiredAimRotationOverride) == 0x000010, "Wrong size on GBAIController_SetDesiredAimRotationOverride");
static_assert(offsetof(GBAIController_SetDesiredAimRotationOverride, NewRotation) == 0x000000, "Member 'GBAIController_SetDesiredAimRotationOverride::NewRotation' has a wrong offset!");
static_assert(offsetof(GBAIController_SetDesiredAimRotationOverride, NewRate) == 0x00000C, "Member 'GBAIController_SetDesiredAimRotationOverride::NewRate' has a wrong offset!");

// Function GroundBranch.GBAIController.SetDesiredViewRotationOffset
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetDesiredViewRotationOffset final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetDesiredViewRotationOffset) == 0x000004, "Wrong alignment on GBAIController_SetDesiredViewRotationOffset");
static_assert(sizeof(GBAIController_SetDesiredViewRotationOffset) == 0x00000C, "Wrong size on GBAIController_SetDesiredViewRotationOffset");
static_assert(offsetof(GBAIController_SetDesiredViewRotationOffset, NewRotation) == 0x000000, "Member 'GBAIController_SetDesiredViewRotationOffset::NewRotation' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemy
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_SetEnemy final
{
public:
	class AGBCharacter*                           NewEnemy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemy) == 0x000008, "Wrong alignment on GBAIController_SetEnemy");
static_assert(sizeof(GBAIController_SetEnemy) == 0x000008, "Wrong size on GBAIController_SetEnemy");
static_assert(offsetof(GBAIController_SetEnemy, NewEnemy) == 0x000000, "Member 'GBAIController_SetEnemy::NewEnemy' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyDistance
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetEnemyDistance final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyDistance) == 0x000004, "Wrong alignment on GBAIController_SetEnemyDistance");
static_assert(sizeof(GBAIController_SetEnemyDistance) == 0x000004, "Wrong size on GBAIController_SetEnemyDistance");
static_assert(offsetof(GBAIController_SetEnemyDistance, NewValue) == 0x000000, "Member 'GBAIController_SetEnemyDistance::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyLastHeard
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetEnemyLastHeard final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyLastHeard) == 0x000004, "Wrong alignment on GBAIController_SetEnemyLastHeard");
static_assert(sizeof(GBAIController_SetEnemyLastHeard) == 0x000004, "Wrong size on GBAIController_SetEnemyLastHeard");
static_assert(offsetof(GBAIController_SetEnemyLastHeard, NewValue) == 0x000000, "Member 'GBAIController_SetEnemyLastHeard::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyLastKnownDirection
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetEnemyLastKnownDirection final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyLastKnownDirection) == 0x000004, "Wrong alignment on GBAIController_SetEnemyLastKnownDirection");
static_assert(sizeof(GBAIController_SetEnemyLastKnownDirection) == 0x00000C, "Wrong size on GBAIController_SetEnemyLastKnownDirection");
static_assert(offsetof(GBAIController_SetEnemyLastKnownDirection, NewValue) == 0x000000, "Member 'GBAIController_SetEnemyLastKnownDirection::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyLastKnownLocation
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetEnemyLastKnownLocation final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyLastKnownLocation) == 0x000004, "Wrong alignment on GBAIController_SetEnemyLastKnownLocation");
static_assert(sizeof(GBAIController_SetEnemyLastKnownLocation) == 0x00000C, "Wrong size on GBAIController_SetEnemyLastKnownLocation");
static_assert(offsetof(GBAIController_SetEnemyLastKnownLocation, NewValue) == 0x000000, "Member 'GBAIController_SetEnemyLastKnownLocation::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyLastSeen
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetEnemyLastSeen final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyLastSeen) == 0x000004, "Wrong alignment on GBAIController_SetEnemyLastSeen");
static_assert(sizeof(GBAIController_SetEnemyLastSeen) == 0x000004, "Wrong size on GBAIController_SetEnemyLastSeen");
static_assert(offsetof(GBAIController_SetEnemyLastSeen, NewValue) == 0x000000, "Member 'GBAIController_SetEnemyLastSeen::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyLastStimulusTime
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetEnemyLastStimulusTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyLastStimulusTime) == 0x000004, "Wrong alignment on GBAIController_SetEnemyLastStimulusTime");
static_assert(sizeof(GBAIController_SetEnemyLastStimulusTime) == 0x000004, "Wrong size on GBAIController_SetEnemyLastStimulusTime");
static_assert(offsetof(GBAIController_SetEnemyLastStimulusTime, NewValue) == 0x000000, "Member 'GBAIController_SetEnemyLastStimulusTime::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyLOS
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_SetEnemyLOS final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyLOS) == 0x000001, "Wrong alignment on GBAIController_SetEnemyLOS");
static_assert(sizeof(GBAIController_SetEnemyLOS) == 0x000001, "Wrong size on GBAIController_SetEnemyLOS");
static_assert(offsetof(GBAIController_SetEnemyLOS, bNewValue) == 0x000000, "Member 'GBAIController_SetEnemyLOS::bNewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetEnemyPartSeen
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_SetEnemyPartSeen final
{
public:
	class FName                                   NewEnemyPartSeen;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetEnemyPartSeen) == 0x000004, "Wrong alignment on GBAIController_SetEnemyPartSeen");
static_assert(sizeof(GBAIController_SetEnemyPartSeen) == 0x000008, "Wrong size on GBAIController_SetEnemyPartSeen");
static_assert(offsetof(GBAIController_SetEnemyPartSeen, NewEnemyPartSeen) == 0x000000, "Member 'GBAIController_SetEnemyPartSeen::NewEnemyPartSeen' has a wrong offset!");

// Function GroundBranch.GBAIController.SetIdleAffiliationSightThreshold
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetIdleAffiliationSightThreshold final
{
public:
	float                                         NewIdleAffiliationSightThreshold;                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetIdleAffiliationSightThreshold) == 0x000004, "Wrong alignment on GBAIController_SetIdleAffiliationSightThreshold");
static_assert(sizeof(GBAIController_SetIdleAffiliationSightThreshold) == 0x000004, "Wrong size on GBAIController_SetIdleAffiliationSightThreshold");
static_assert(offsetof(GBAIController_SetIdleAffiliationSightThreshold, NewIdleAffiliationSightThreshold) == 0x000000, "Member 'GBAIController_SetIdleAffiliationSightThreshold::NewIdleAffiliationSightThreshold' has a wrong offset!");

// Function GroundBranch.GBAIController.SetIdleHearingThreshold
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetIdleHearingThreshold final
{
public:
	float                                         NewIdleHearingThreshold;                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetIdleHearingThreshold) == 0x000004, "Wrong alignment on GBAIController_SetIdleHearingThreshold");
static_assert(sizeof(GBAIController_SetIdleHearingThreshold) == 0x000004, "Wrong size on GBAIController_SetIdleHearingThreshold");
static_assert(offsetof(GBAIController_SetIdleHearingThreshold, NewIdleHearingThreshold) == 0x000000, "Member 'GBAIController_SetIdleHearingThreshold::NewIdleHearingThreshold' has a wrong offset!");

// Function GroundBranch.GBAIController.SetIdleSuspicionSightThreshold
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetIdleSuspicionSightThreshold final
{
public:
	float                                         NewIdleSuspicionSightThreshold;                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetIdleSuspicionSightThreshold) == 0x000004, "Wrong alignment on GBAIController_SetIdleSuspicionSightThreshold");
static_assert(sizeof(GBAIController_SetIdleSuspicionSightThreshold) == 0x000004, "Wrong size on GBAIController_SetIdleSuspicionSightThreshold");
static_assert(offsetof(GBAIController_SetIdleSuspicionSightThreshold, NewIdleSuspicionSightThreshold) == 0x000000, "Member 'GBAIController_SetIdleSuspicionSightThreshold::NewIdleSuspicionSightThreshold' has a wrong offset!");

// Function GroundBranch.GBAIController.SetSearchTime
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_SetSearchTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetSearchTime) == 0x000004, "Wrong alignment on GBAIController_SetSearchTime");
static_assert(sizeof(GBAIController_SetSearchTime) == 0x000004, "Wrong size on GBAIController_SetSearchTime");
static_assert(offsetof(GBAIController_SetSearchTime, NewValue) == 0x000000, "Member 'GBAIController_SetSearchTime::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetSquad
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_SetSquad final
{
public:
	class AGBAISquad*                             NewSquad;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetSquad) == 0x000008, "Wrong alignment on GBAIController_SetSquad");
static_assert(sizeof(GBAIController_SetSquad) == 0x000008, "Wrong size on GBAIController_SetSquad");
static_assert(offsetof(GBAIController_SetSquad, NewSquad) == 0x000000, "Member 'GBAIController_SetSquad::NewSquad' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActor
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_SetUsableActor final
{
public:
	class AActor*                                 NewUsableActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActor) == 0x000008, "Wrong alignment on GBAIController_SetUsableActor");
static_assert(sizeof(GBAIController_SetUsableActor) == 0x000008, "Wrong size on GBAIController_SetUsableActor");
static_assert(offsetof(GBAIController_SetUsableActor, NewUsableActor) == 0x000000, "Member 'GBAIController_SetUsableActor::NewUsableActor' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorNavDir
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetUsableActorNavDir final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorNavDir) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorNavDir");
static_assert(sizeof(GBAIController_SetUsableActorNavDir) == 0x00000C, "Wrong size on GBAIController_SetUsableActorNavDir");
static_assert(offsetof(GBAIController_SetUsableActorNavDir, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorNavDir::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorNavEnd
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetUsableActorNavEnd final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorNavEnd) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorNavEnd");
static_assert(sizeof(GBAIController_SetUsableActorNavEnd) == 0x00000C, "Wrong size on GBAIController_SetUsableActorNavEnd");
static_assert(offsetof(GBAIController_SetUsableActorNavEnd, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorNavEnd::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorNavStart
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetUsableActorNavStart final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorNavStart) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorNavStart");
static_assert(sizeof(GBAIController_SetUsableActorNavStart) == 0x00000C, "Wrong size on GBAIController_SetUsableActorNavStart");
static_assert(offsetof(GBAIController_SetUsableActorNavStart, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorNavStart::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorState
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_SetUsableActorState final
{
public:
	EGBAIUsableActorState                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorState) == 0x000001, "Wrong alignment on GBAIController_SetUsableActorState");
static_assert(sizeof(GBAIController_SetUsableActorState) == 0x000001, "Wrong size on GBAIController_SetUsableActorState");
static_assert(offsetof(GBAIController_SetUsableActorState, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorState::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorType
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_SetUsableActorType final
{
public:
	class FName                                   NewUsableActorType;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorType) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorType");
static_assert(sizeof(GBAIController_SetUsableActorType) == 0x000008, "Wrong size on GBAIController_SetUsableActorType");
static_assert(offsetof(GBAIController_SetUsableActorType, NewUsableActorType) == 0x000000, "Member 'GBAIController_SetUsableActorType::NewUsableActorType' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorUseEnd
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetUsableActorUseEnd final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorUseEnd) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorUseEnd");
static_assert(sizeof(GBAIController_SetUsableActorUseEnd) == 0x00000C, "Wrong size on GBAIController_SetUsableActorUseEnd");
static_assert(offsetof(GBAIController_SetUsableActorUseEnd, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorUseEnd::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorUseStart
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetUsableActorUseStart final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorUseStart) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorUseStart");
static_assert(sizeof(GBAIController_SetUsableActorUseStart) == 0x00000C, "Wrong size on GBAIController_SetUsableActorUseStart");
static_assert(offsetof(GBAIController_SetUsableActorUseStart, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorUseStart::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetUsableActorUseWaitLocation
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetUsableActorUseWaitLocation final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetUsableActorUseWaitLocation) == 0x000004, "Wrong alignment on GBAIController_SetUsableActorUseWaitLocation");
static_assert(sizeof(GBAIController_SetUsableActorUseWaitLocation) == 0x00000C, "Wrong size on GBAIController_SetUsableActorUseWaitLocation");
static_assert(offsetof(GBAIController_SetUsableActorUseWaitLocation, NewValue) == 0x000000, "Member 'GBAIController_SetUsableActorUseWaitLocation::NewValue' has a wrong offset!");

// Function GroundBranch.GBAIController.SetViewRotation
// 0x000C (0x000C - 0x0000)
struct GBAIController_SetViewRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_SetViewRotation) == 0x000004, "Wrong alignment on GBAIController_SetViewRotation");
static_assert(sizeof(GBAIController_SetViewRotation) == 0x00000C, "Wrong size on GBAIController_SetViewRotation");
static_assert(offsetof(GBAIController_SetViewRotation, NewRotation) == 0x000000, "Member 'GBAIController_SetViewRotation::NewRotation' has a wrong offset!");

// Function GroundBranch.GBAIController.GetAIState
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_GetAIState final
{
public:
	EGBAIState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetAIState) == 0x000001, "Wrong alignment on GBAIController_GetAIState");
static_assert(sizeof(GBAIController_GetAIState) == 0x000001, "Wrong size on GBAIController_GetAIState");
static_assert(offsetof(GBAIController_GetAIState, ReturnValue) == 0x000000, "Member 'GBAIController_GetAIState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetBehaviorComp
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetBehaviorComp final
{
public:
	class UBehaviorTreeComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetBehaviorComp) == 0x000008, "Wrong alignment on GBAIController_GetBehaviorComp");
static_assert(sizeof(GBAIController_GetBehaviorComp) == 0x000008, "Wrong size on GBAIController_GetBehaviorComp");
static_assert(offsetof(GBAIController_GetBehaviorComp, ReturnValue) == 0x000000, "Member 'GBAIController_GetBehaviorComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetCanSuppressEnemy
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_GetCanSuppressEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetCanSuppressEnemy) == 0x000001, "Wrong alignment on GBAIController_GetCanSuppressEnemy");
static_assert(sizeof(GBAIController_GetCanSuppressEnemy) == 0x000001, "Wrong size on GBAIController_GetCanSuppressEnemy");
static_assert(offsetof(GBAIController_GetCanSuppressEnemy, ReturnValue) == 0x000000, "Member 'GBAIController_GetCanSuppressEnemy::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemy
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetEnemy final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemy) == 0x000008, "Wrong alignment on GBAIController_GetEnemy");
static_assert(sizeof(GBAIController_GetEnemy) == 0x000008, "Wrong size on GBAIController_GetEnemy");
static_assert(offsetof(GBAIController_GetEnemy, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemy::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyDistance
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetEnemyDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyDistance) == 0x000004, "Wrong alignment on GBAIController_GetEnemyDistance");
static_assert(sizeof(GBAIController_GetEnemyDistance) == 0x000004, "Wrong size on GBAIController_GetEnemyDistance");
static_assert(offsetof(GBAIController_GetEnemyDistance, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyDistance::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyLastHeard
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetEnemyLastHeard final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyLastHeard) == 0x000004, "Wrong alignment on GBAIController_GetEnemyLastHeard");
static_assert(sizeof(GBAIController_GetEnemyLastHeard) == 0x000004, "Wrong size on GBAIController_GetEnemyLastHeard");
static_assert(offsetof(GBAIController_GetEnemyLastHeard, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyLastHeard::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyLastKnownDirection
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetEnemyLastKnownDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyLastKnownDirection) == 0x000004, "Wrong alignment on GBAIController_GetEnemyLastKnownDirection");
static_assert(sizeof(GBAIController_GetEnemyLastKnownDirection) == 0x00000C, "Wrong size on GBAIController_GetEnemyLastKnownDirection");
static_assert(offsetof(GBAIController_GetEnemyLastKnownDirection, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyLastKnownDirection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyLastKnownLocation
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetEnemyLastKnownLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyLastKnownLocation) == 0x000004, "Wrong alignment on GBAIController_GetEnemyLastKnownLocation");
static_assert(sizeof(GBAIController_GetEnemyLastKnownLocation) == 0x00000C, "Wrong size on GBAIController_GetEnemyLastKnownLocation");
static_assert(offsetof(GBAIController_GetEnemyLastKnownLocation, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyLastKnownLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyLastSeen
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetEnemyLastSeen final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyLastSeen) == 0x000004, "Wrong alignment on GBAIController_GetEnemyLastSeen");
static_assert(sizeof(GBAIController_GetEnemyLastSeen) == 0x000004, "Wrong size on GBAIController_GetEnemyLastSeen");
static_assert(offsetof(GBAIController_GetEnemyLastSeen, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyLastSeen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyLastStimulusTime
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetEnemyLastStimulusTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyLastStimulusTime) == 0x000004, "Wrong alignment on GBAIController_GetEnemyLastStimulusTime");
static_assert(sizeof(GBAIController_GetEnemyLastStimulusTime) == 0x000004, "Wrong size on GBAIController_GetEnemyLastStimulusTime");
static_assert(offsetof(GBAIController_GetEnemyLastStimulusTime, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyLastStimulusTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyLOS
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_GetEnemyLOS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyLOS) == 0x000001, "Wrong alignment on GBAIController_GetEnemyLOS");
static_assert(sizeof(GBAIController_GetEnemyLOS) == 0x000001, "Wrong size on GBAIController_GetEnemyLOS");
static_assert(offsetof(GBAIController_GetEnemyLOS, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyLOS::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetEnemyPartSeen
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetEnemyPartSeen final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetEnemyPartSeen) == 0x000004, "Wrong alignment on GBAIController_GetEnemyPartSeen");
static_assert(sizeof(GBAIController_GetEnemyPartSeen) == 0x000008, "Wrong size on GBAIController_GetEnemyPartSeen");
static_assert(offsetof(GBAIController_GetEnemyPartSeen, ReturnValue) == 0x000000, "Member 'GBAIController_GetEnemyPartSeen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetLastBark
// 0x0010 (0x0010 - 0x0000)
struct GBAIController_GetLastBark final
{
public:
	struct FAIBark                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetLastBark) == 0x000004, "Wrong alignment on GBAIController_GetLastBark");
static_assert(sizeof(GBAIController_GetLastBark) == 0x000010, "Wrong size on GBAIController_GetLastBark");
static_assert(offsetof(GBAIController_GetLastBark, ReturnValue) == 0x000000, "Member 'GBAIController_GetLastBark::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetMaxDelayBetweenBursts
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetMaxDelayBetweenBursts final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetMaxDelayBetweenBursts) == 0x000004, "Wrong alignment on GBAIController_GetMaxDelayBetweenBursts");
static_assert(sizeof(GBAIController_GetMaxDelayBetweenBursts) == 0x000004, "Wrong size on GBAIController_GetMaxDelayBetweenBursts");
static_assert(offsetof(GBAIController_GetMaxDelayBetweenBursts, ReturnValue) == 0x000000, "Member 'GBAIController_GetMaxDelayBetweenBursts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetMaxFullAutoBurst
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetMaxFullAutoBurst final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetMaxFullAutoBurst) == 0x000004, "Wrong alignment on GBAIController_GetMaxFullAutoBurst");
static_assert(sizeof(GBAIController_GetMaxFullAutoBurst) == 0x000004, "Wrong size on GBAIController_GetMaxFullAutoBurst");
static_assert(offsetof(GBAIController_GetMaxFullAutoBurst, ReturnValue) == 0x000000, "Member 'GBAIController_GetMaxFullAutoBurst::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetMaxSemiAutoBurst
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetMaxSemiAutoBurst final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetMaxSemiAutoBurst) == 0x000004, "Wrong alignment on GBAIController_GetMaxSemiAutoBurst");
static_assert(sizeof(GBAIController_GetMaxSemiAutoBurst) == 0x000004, "Wrong size on GBAIController_GetMaxSemiAutoBurst");
static_assert(offsetof(GBAIController_GetMaxSemiAutoBurst, ReturnValue) == 0x000000, "Member 'GBAIController_GetMaxSemiAutoBurst::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetMinDelayBetweenBursts
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetMinDelayBetweenBursts final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetMinDelayBetweenBursts) == 0x000004, "Wrong alignment on GBAIController_GetMinDelayBetweenBursts");
static_assert(sizeof(GBAIController_GetMinDelayBetweenBursts) == 0x000004, "Wrong size on GBAIController_GetMinDelayBetweenBursts");
static_assert(offsetof(GBAIController_GetMinDelayBetweenBursts, ReturnValue) == 0x000000, "Member 'GBAIController_GetMinDelayBetweenBursts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetMinFullAutoBurst
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetMinFullAutoBurst final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetMinFullAutoBurst) == 0x000004, "Wrong alignment on GBAIController_GetMinFullAutoBurst");
static_assert(sizeof(GBAIController_GetMinFullAutoBurst) == 0x000004, "Wrong size on GBAIController_GetMinFullAutoBurst");
static_assert(offsetof(GBAIController_GetMinFullAutoBurst, ReturnValue) == 0x000000, "Member 'GBAIController_GetMinFullAutoBurst::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetNextPathCorridorPoint
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetNextPathCorridorPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetNextPathCorridorPoint) == 0x000004, "Wrong alignment on GBAIController_GetNextPathCorridorPoint");
static_assert(sizeof(GBAIController_GetNextPathCorridorPoint) == 0x00000C, "Wrong size on GBAIController_GetNextPathCorridorPoint");
static_assert(offsetof(GBAIController_GetNextPathCorridorPoint, ReturnValue) == 0x000000, "Member 'GBAIController_GetNextPathCorridorPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetNextPathLocation
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetNextPathLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetNextPathLocation) == 0x000004, "Wrong alignment on GBAIController_GetNextPathLocation");
static_assert(sizeof(GBAIController_GetNextPathLocation) == 0x00000C, "Wrong size on GBAIController_GetNextPathLocation");
static_assert(offsetof(GBAIController_GetNextPathLocation, ReturnValue) == 0x000000, "Member 'GBAIController_GetNextPathLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetOnTarget
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_GetOnTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetOnTarget) == 0x000001, "Wrong alignment on GBAIController_GetOnTarget");
static_assert(sizeof(GBAIController_GetOnTarget) == 0x000001, "Wrong size on GBAIController_GetOnTarget");
static_assert(offsetof(GBAIController_GetOnTarget, ReturnValue) == 0x000000, "Member 'GBAIController_GetOnTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetPathCorridorPoints
// 0x0010 (0x0010 - 0x0000)
struct GBAIController_GetPathCorridorPoints final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetPathCorridorPoints) == 0x000008, "Wrong alignment on GBAIController_GetPathCorridorPoints");
static_assert(sizeof(GBAIController_GetPathCorridorPoints) == 0x000010, "Wrong size on GBAIController_GetPathCorridorPoints");
static_assert(offsetof(GBAIController_GetPathCorridorPoints, ReturnValue) == 0x000000, "Member 'GBAIController_GetPathCorridorPoints::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetReactionTimeBase
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetReactionTimeBase final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetReactionTimeBase) == 0x000004, "Wrong alignment on GBAIController_GetReactionTimeBase");
static_assert(sizeof(GBAIController_GetReactionTimeBase) == 0x000004, "Wrong size on GBAIController_GetReactionTimeBase");
static_assert(offsetof(GBAIController_GetReactionTimeBase, ReturnValue) == 0x000000, "Member 'GBAIController_GetReactionTimeBase::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetReactionTimeRandom
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetReactionTimeRandom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetReactionTimeRandom) == 0x000004, "Wrong alignment on GBAIController_GetReactionTimeRandom");
static_assert(sizeof(GBAIController_GetReactionTimeRandom) == 0x000004, "Wrong size on GBAIController_GetReactionTimeRandom");
static_assert(offsetof(GBAIController_GetReactionTimeRandom, ReturnValue) == 0x000000, "Member 'GBAIController_GetReactionTimeRandom::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetSearchTime
// 0x0004 (0x0004 - 0x0000)
struct GBAIController_GetSearchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetSearchTime) == 0x000004, "Wrong alignment on GBAIController_GetSearchTime");
static_assert(sizeof(GBAIController_GetSearchTime) == 0x000004, "Wrong size on GBAIController_GetSearchTime");
static_assert(offsetof(GBAIController_GetSearchTime, ReturnValue) == 0x000000, "Member 'GBAIController_GetSearchTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetSquad
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetSquad final
{
public:
	class AGBAISquad*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetSquad) == 0x000008, "Wrong alignment on GBAIController_GetSquad");
static_assert(sizeof(GBAIController_GetSquad) == 0x000008, "Wrong size on GBAIController_GetSquad");
static_assert(offsetof(GBAIController_GetSquad, ReturnValue) == 0x000000, "Member 'GBAIController_GetSquad::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActor
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetUsableActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActor) == 0x000008, "Wrong alignment on GBAIController_GetUsableActor");
static_assert(sizeof(GBAIController_GetUsableActor) == 0x000008, "Wrong size on GBAIController_GetUsableActor");
static_assert(offsetof(GBAIController_GetUsableActor, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorNavDir
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetUsableActorNavDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorNavDir) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorNavDir");
static_assert(sizeof(GBAIController_GetUsableActorNavDir) == 0x00000C, "Wrong size on GBAIController_GetUsableActorNavDir");
static_assert(offsetof(GBAIController_GetUsableActorNavDir, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorNavDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorNavEnd
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetUsableActorNavEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorNavEnd) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorNavEnd");
static_assert(sizeof(GBAIController_GetUsableActorNavEnd) == 0x00000C, "Wrong size on GBAIController_GetUsableActorNavEnd");
static_assert(offsetof(GBAIController_GetUsableActorNavEnd, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorNavEnd::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorNavStart
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetUsableActorNavStart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorNavStart) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorNavStart");
static_assert(sizeof(GBAIController_GetUsableActorNavStart) == 0x00000C, "Wrong size on GBAIController_GetUsableActorNavStart");
static_assert(offsetof(GBAIController_GetUsableActorNavStart, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorNavStart::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorState
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_GetUsableActorState final
{
public:
	EGBAIUsableActorState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorState) == 0x000001, "Wrong alignment on GBAIController_GetUsableActorState");
static_assert(sizeof(GBAIController_GetUsableActorState) == 0x000001, "Wrong size on GBAIController_GetUsableActorState");
static_assert(offsetof(GBAIController_GetUsableActorState, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorType
// 0x0008 (0x0008 - 0x0000)
struct GBAIController_GetUsableActorType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorType) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorType");
static_assert(sizeof(GBAIController_GetUsableActorType) == 0x000008, "Wrong size on GBAIController_GetUsableActorType");
static_assert(offsetof(GBAIController_GetUsableActorType, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorUseEnd
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetUsableActorUseEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorUseEnd) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorUseEnd");
static_assert(sizeof(GBAIController_GetUsableActorUseEnd) == 0x00000C, "Wrong size on GBAIController_GetUsableActorUseEnd");
static_assert(offsetof(GBAIController_GetUsableActorUseEnd, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorUseEnd::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorUseStart
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetUsableActorUseStart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorUseStart) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorUseStart");
static_assert(sizeof(GBAIController_GetUsableActorUseStart) == 0x00000C, "Wrong size on GBAIController_GetUsableActorUseStart");
static_assert(offsetof(GBAIController_GetUsableActorUseStart, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorUseStart::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetUsableActorUseWaitLocation
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetUsableActorUseWaitLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetUsableActorUseWaitLocation) == 0x000004, "Wrong alignment on GBAIController_GetUsableActorUseWaitLocation");
static_assert(sizeof(GBAIController_GetUsableActorUseWaitLocation) == 0x00000C, "Wrong size on GBAIController_GetUsableActorUseWaitLocation");
static_assert(offsetof(GBAIController_GetUsableActorUseWaitLocation, ReturnValue) == 0x000000, "Member 'GBAIController_GetUsableActorUseWaitLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetViewRotation
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetViewRotation) == 0x000004, "Wrong alignment on GBAIController_GetViewRotation");
static_assert(sizeof(GBAIController_GetViewRotation) == 0x00000C, "Wrong size on GBAIController_GetViewRotation");
static_assert(offsetof(GBAIController_GetViewRotation, ReturnValue) == 0x000000, "Member 'GBAIController_GetViewRotation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.GetViewRotationOffset
// 0x000C (0x000C - 0x0000)
struct GBAIController_GetViewRotationOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_GetViewRotationOffset) == 0x000004, "Wrong alignment on GBAIController_GetViewRotationOffset");
static_assert(sizeof(GBAIController_GetViewRotationOffset) == 0x00000C, "Wrong size on GBAIController_GetViewRotationOffset");
static_assert(offsetof(GBAIController_GetViewRotationOffset, ReturnValue) == 0x000000, "Member 'GBAIController_GetViewRotationOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIController.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct GBAIController_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIController_IsAlive) == 0x000001, "Wrong alignment on GBAIController_IsAlive");
static_assert(sizeof(GBAIController_IsAlive) == 0x000001, "Wrong size on GBAIController_IsAlive");
static_assert(offsetof(GBAIController_IsAlive, ReturnValue) == 0x000000, "Member 'GBAIController_IsAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAICoordinatorSubsystem.AddTargetingData
// 0x0010 (0x0010 - 0x0000)
struct GBAICoordinatorSubsystem_AddTargetingData final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKytController*                       TargetingAI;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAICoordinatorSubsystem_AddTargetingData) == 0x000008, "Wrong alignment on GBAICoordinatorSubsystem_AddTargetingData");
static_assert(sizeof(GBAICoordinatorSubsystem_AddTargetingData) == 0x000010, "Wrong size on GBAICoordinatorSubsystem_AddTargetingData");
static_assert(offsetof(GBAICoordinatorSubsystem_AddTargetingData, Target) == 0x000000, "Member 'GBAICoordinatorSubsystem_AddTargetingData::Target' has a wrong offset!");
static_assert(offsetof(GBAICoordinatorSubsystem_AddTargetingData, TargetingAI) == 0x000008, "Member 'GBAICoordinatorSubsystem_AddTargetingData::TargetingAI' has a wrong offset!");

// Function GroundBranch.GBAICoordinatorSubsystem.GetCountForTarget
// 0x0010 (0x0010 - 0x0000)
struct GBAICoordinatorSubsystem_GetCountForTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAICoordinatorSubsystem_GetCountForTarget) == 0x000008, "Wrong alignment on GBAICoordinatorSubsystem_GetCountForTarget");
static_assert(sizeof(GBAICoordinatorSubsystem_GetCountForTarget) == 0x000010, "Wrong size on GBAICoordinatorSubsystem_GetCountForTarget");
static_assert(offsetof(GBAICoordinatorSubsystem_GetCountForTarget, Target) == 0x000000, "Member 'GBAICoordinatorSubsystem_GetCountForTarget::Target' has a wrong offset!");
static_assert(offsetof(GBAICoordinatorSubsystem_GetCountForTarget, ReturnValue) == 0x000008, "Member 'GBAICoordinatorSubsystem_GetCountForTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAICoordinatorSubsystem.RemoveTargetingData
// 0x0008 (0x0008 - 0x0000)
struct GBAICoordinatorSubsystem_RemoveTargetingData final
{
public:
	class AGBKytController*                       TargetingAI;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAICoordinatorSubsystem_RemoveTargetingData) == 0x000008, "Wrong alignment on GBAICoordinatorSubsystem_RemoveTargetingData");
static_assert(sizeof(GBAICoordinatorSubsystem_RemoveTargetingData) == 0x000008, "Wrong size on GBAICoordinatorSubsystem_RemoveTargetingData");
static_assert(offsetof(GBAICoordinatorSubsystem_RemoveTargetingData, TargetingAI) == 0x000000, "Member 'GBAICoordinatorSubsystem_RemoveTargetingData::TargetingAI' has a wrong offset!");

// Function GroundBranch.GBAICoordinatorSubsystem.TriggerFleeState
// 0x000C (0x000C - 0x0000)
struct GBAICoordinatorSubsystem_TriggerFleeState final
{
public:
	struct FVector                                FleeFromLoc;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAICoordinatorSubsystem_TriggerFleeState) == 0x000004, "Wrong alignment on GBAICoordinatorSubsystem_TriggerFleeState");
static_assert(sizeof(GBAICoordinatorSubsystem_TriggerFleeState) == 0x00000C, "Wrong size on GBAICoordinatorSubsystem_TriggerFleeState");
static_assert(offsetof(GBAICoordinatorSubsystem_TriggerFleeState, FleeFromLoc) == 0x000000, "Member 'GBAICoordinatorSubsystem_TriggerFleeState::FleeFromLoc' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetDynamicLeftHandIKRoot
// 0x0008 (0x0008 - 0x0000)
struct GBCharAnimInstance_SetDynamicLeftHandIKRoot final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetDynamicLeftHandIKRoot) == 0x000004, "Wrong alignment on GBCharAnimInstance_SetDynamicLeftHandIKRoot");
static_assert(sizeof(GBCharAnimInstance_SetDynamicLeftHandIKRoot) == 0x000008, "Wrong size on GBCharAnimInstance_SetDynamicLeftHandIKRoot");
static_assert(offsetof(GBCharAnimInstance_SetDynamicLeftHandIKRoot, BoneName) == 0x000000, "Member 'GBCharAnimInstance_SetDynamicLeftHandIKRoot::BoneName' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetDynamicLeftHandIKRootLocOffset
// 0x000C (0x000C - 0x0000)
struct GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset final
{
public:
	struct FVector                                LocOffset;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset) == 0x000004, "Wrong alignment on GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset");
static_assert(sizeof(GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset) == 0x00000C, "Wrong size on GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset");
static_assert(offsetof(GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset, LocOffset) == 0x000000, "Member 'GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset::LocOffset' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetDynamicLeftHandIKRootRotOffset
// 0x000C (0x000C - 0x0000)
struct GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset final
{
public:
	struct FRotator                               RotOffset;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset) == 0x000004, "Wrong alignment on GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset");
static_assert(sizeof(GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset) == 0x00000C, "Wrong size on GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset");
static_assert(offsetof(GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset, RotOffset) == 0x000000, "Member 'GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset::RotOffset' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetDynamicRightHandIKRoot
// 0x0008 (0x0008 - 0x0000)
struct GBCharAnimInstance_SetDynamicRightHandIKRoot final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetDynamicRightHandIKRoot) == 0x000004, "Wrong alignment on GBCharAnimInstance_SetDynamicRightHandIKRoot");
static_assert(sizeof(GBCharAnimInstance_SetDynamicRightHandIKRoot) == 0x000008, "Wrong size on GBCharAnimInstance_SetDynamicRightHandIKRoot");
static_assert(offsetof(GBCharAnimInstance_SetDynamicRightHandIKRoot, BoneName) == 0x000000, "Member 'GBCharAnimInstance_SetDynamicRightHandIKRoot::BoneName' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetDynamicRightItemRoot
// 0x0008 (0x0008 - 0x0000)
struct GBCharAnimInstance_SetDynamicRightItemRoot final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetDynamicRightItemRoot) == 0x000004, "Wrong alignment on GBCharAnimInstance_SetDynamicRightItemRoot");
static_assert(sizeof(GBCharAnimInstance_SetDynamicRightItemRoot) == 0x000008, "Wrong size on GBCharAnimInstance_SetDynamicRightItemRoot");
static_assert(offsetof(GBCharAnimInstance_SetDynamicRightItemRoot, BoneName) == 0x000000, "Member 'GBCharAnimInstance_SetDynamicRightItemRoot::BoneName' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetRecoilBlendAlpha
// 0x0004 (0x0004 - 0x0000)
struct GBCharAnimInstance_SetRecoilBlendAlpha final
{
public:
	float                                         NewRecoilBlendAlpha;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetRecoilBlendAlpha) == 0x000004, "Wrong alignment on GBCharAnimInstance_SetRecoilBlendAlpha");
static_assert(sizeof(GBCharAnimInstance_SetRecoilBlendAlpha) == 0x000004, "Wrong size on GBCharAnimInstance_SetRecoilBlendAlpha");
static_assert(offsetof(GBCharAnimInstance_SetRecoilBlendAlpha, NewRecoilBlendAlpha) == 0x000000, "Member 'GBCharAnimInstance_SetRecoilBlendAlpha::NewRecoilBlendAlpha' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.SetTurningInPlace
// 0x0001 (0x0001 - 0x0000)
struct GBCharAnimInstance_SetTurningInPlace final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_SetTurningInPlace) == 0x000001, "Wrong alignment on GBCharAnimInstance_SetTurningInPlace");
static_assert(sizeof(GBCharAnimInstance_SetTurningInPlace) == 0x000001, "Wrong size on GBCharAnimInstance_SetTurningInPlace");
static_assert(offsetof(GBCharAnimInstance_SetTurningInPlace, bValue) == 0x000000, "Member 'GBCharAnimInstance_SetTurningInPlace::bValue' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.GetDynamicLeftHandIKRoot
// 0x0008 (0x0008 - 0x0000)
struct GBCharAnimInstance_GetDynamicLeftHandIKRoot final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_GetDynamicLeftHandIKRoot) == 0x000004, "Wrong alignment on GBCharAnimInstance_GetDynamicLeftHandIKRoot");
static_assert(sizeof(GBCharAnimInstance_GetDynamicLeftHandIKRoot) == 0x000008, "Wrong size on GBCharAnimInstance_GetDynamicLeftHandIKRoot");
static_assert(offsetof(GBCharAnimInstance_GetDynamicLeftHandIKRoot, ReturnValue) == 0x000000, "Member 'GBCharAnimInstance_GetDynamicLeftHandIKRoot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.GetDynamicRightHandIKRoot
// 0x0008 (0x0008 - 0x0000)
struct GBCharAnimInstance_GetDynamicRightHandIKRoot final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_GetDynamicRightHandIKRoot) == 0x000004, "Wrong alignment on GBCharAnimInstance_GetDynamicRightHandIKRoot");
static_assert(sizeof(GBCharAnimInstance_GetDynamicRightHandIKRoot) == 0x000008, "Wrong size on GBCharAnimInstance_GetDynamicRightHandIKRoot");
static_assert(offsetof(GBCharAnimInstance_GetDynamicRightHandIKRoot, ReturnValue) == 0x000000, "Member 'GBCharAnimInstance_GetDynamicRightHandIKRoot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.GetMontageFromLinkedLayer
// 0x0018 (0x0018 - 0x0000)
struct GBCharAnimInstance_GetMontageFromLinkedLayer final
{
public:
	TSubclassOf<class UAnimInstance>              InCurrentAnimLayerClass;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMontageName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_GetMontageFromLinkedLayer) == 0x000008, "Wrong alignment on GBCharAnimInstance_GetMontageFromLinkedLayer");
static_assert(sizeof(GBCharAnimInstance_GetMontageFromLinkedLayer) == 0x000018, "Wrong size on GBCharAnimInstance_GetMontageFromLinkedLayer");
static_assert(offsetof(GBCharAnimInstance_GetMontageFromLinkedLayer, InCurrentAnimLayerClass) == 0x000000, "Member 'GBCharAnimInstance_GetMontageFromLinkedLayer::InCurrentAnimLayerClass' has a wrong offset!");
static_assert(offsetof(GBCharAnimInstance_GetMontageFromLinkedLayer, InMontageName) == 0x000008, "Member 'GBCharAnimInstance_GetMontageFromLinkedLayer::InMontageName' has a wrong offset!");
static_assert(offsetof(GBCharAnimInstance_GetMontageFromLinkedLayer, ReturnValue) == 0x000010, "Member 'GBCharAnimInstance_GetMontageFromLinkedLayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstance.GetTurningInPlace
// 0x0001 (0x0001 - 0x0000)
struct GBCharAnimInstance_GetTurningInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstance_GetTurningInPlace) == 0x000001, "Wrong alignment on GBCharAnimInstance_GetTurningInPlace");
static_assert(sizeof(GBCharAnimInstance_GetTurningInPlace) == 0x000001, "Wrong size on GBCharAnimInstance_GetTurningInPlace");
static_assert(offsetof(GBCharAnimInstance_GetTurningInPlace, ReturnValue) == 0x000000, "Member 'GBCharAnimInstance_GetTurningInPlace::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIExtensionComponent.FindPawnExtensionComponent
// 0x0010 (0x0010 - 0x0000)
struct GBAIExtensionComponent_FindPawnExtensionComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBAIExtensionComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIExtensionComponent_FindPawnExtensionComponent) == 0x000008, "Wrong alignment on GBAIExtensionComponent_FindPawnExtensionComponent");
static_assert(sizeof(GBAIExtensionComponent_FindPawnExtensionComponent) == 0x000010, "Wrong size on GBAIExtensionComponent_FindPawnExtensionComponent");
static_assert(offsetof(GBAIExtensionComponent_FindPawnExtensionComponent, Actor) == 0x000000, "Member 'GBAIExtensionComponent_FindPawnExtensionComponent::Actor' has a wrong offset!");
static_assert(offsetof(GBAIExtensionComponent_FindPawnExtensionComponent, ReturnValue) == 0x000008, "Member 'GBAIExtensionComponent_FindPawnExtensionComponent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIExtensionComponent.InitAI
// 0x0008 (0x0008 - 0x0000)
struct GBAIExtensionComponent_InitAI final
{
public:
	class FName                                   AIControllerTag;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIExtensionComponent_InitAI) == 0x000004, "Wrong alignment on GBAIExtensionComponent_InitAI");
static_assert(sizeof(GBAIExtensionComponent_InitAI) == 0x000008, "Wrong size on GBAIExtensionComponent_InitAI");
static_assert(offsetof(GBAIExtensionComponent_InitAI, AIControllerTag) == 0x000000, "Member 'GBAIExtensionComponent_InitAI::AIControllerTag' has a wrong offset!");

// Function GroundBranch.GBAIFunctionLibrary.ForgetAll
// 0x0008 (0x0008 - 0x0000)
struct GBAIFunctionLibrary_ForgetAll final
{
public:
	class UAIPerceptionComponent*                 PerceptionComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIFunctionLibrary_ForgetAll) == 0x000008, "Wrong alignment on GBAIFunctionLibrary_ForgetAll");
static_assert(sizeof(GBAIFunctionLibrary_ForgetAll) == 0x000008, "Wrong size on GBAIFunctionLibrary_ForgetAll");
static_assert(offsetof(GBAIFunctionLibrary_ForgetAll, PerceptionComponent) == 0x000000, "Member 'GBAIFunctionLibrary_ForgetAll::PerceptionComponent' has a wrong offset!");

// Function GroundBranch.GBAIFunctionLibrary.GetAIControllersOfClass
// 0x0020 (0x0020 - 0x0000)
struct GBAIFunctionLibrary_GetAIControllersOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAIController>              AIControllerClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AAIController*>                  OutAIControllers;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIFunctionLibrary_GetAIControllersOfClass) == 0x000008, "Wrong alignment on GBAIFunctionLibrary_GetAIControllersOfClass");
static_assert(sizeof(GBAIFunctionLibrary_GetAIControllersOfClass) == 0x000020, "Wrong size on GBAIFunctionLibrary_GetAIControllersOfClass");
static_assert(offsetof(GBAIFunctionLibrary_GetAIControllersOfClass, WorldContextObject) == 0x000000, "Member 'GBAIFunctionLibrary_GetAIControllersOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetAIControllersOfClass, AIControllerClass) == 0x000008, "Member 'GBAIFunctionLibrary_GetAIControllersOfClass::AIControllerClass' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetAIControllersOfClass, OutAIControllers) == 0x000010, "Member 'GBAIFunctionLibrary_GetAIControllersOfClass::OutAIControllers' has a wrong offset!");

// Function GroundBranch.GBAIFunctionLibrary.GetBlackboardValueAsDirection
// 0x0040 (0x0040 - 0x0000)
struct GBAIFunctionLibrary_GetBlackboardValueAsDirection final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAs2d;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIFunctionLibrary_GetBlackboardValueAsDirection) == 0x000008, "Wrong alignment on GBAIFunctionLibrary_GetBlackboardValueAsDirection");
static_assert(sizeof(GBAIFunctionLibrary_GetBlackboardValueAsDirection) == 0x000040, "Wrong size on GBAIFunctionLibrary_GetBlackboardValueAsDirection");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsDirection, NodeOwner) == 0x000000, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsDirection::NodeOwner' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsDirection, Key) == 0x000008, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsDirection::Key' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsDirection, bAs2d) == 0x000030, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsDirection::bAs2d' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsDirection, ReturnValue) == 0x000034, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsDirection::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIFunctionLibrary.GetBlackboardValueAsLocation
// 0x0040 (0x0040 - 0x0000)
struct GBAIFunctionLibrary_GetBlackboardValueAsLocation final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAIFunctionLibrary_GetBlackboardValueAsLocation) == 0x000008, "Wrong alignment on GBAIFunctionLibrary_GetBlackboardValueAsLocation");
static_assert(sizeof(GBAIFunctionLibrary_GetBlackboardValueAsLocation) == 0x000040, "Wrong size on GBAIFunctionLibrary_GetBlackboardValueAsLocation");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsLocation, NodeOwner) == 0x000000, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsLocation::NodeOwner' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsLocation, Key) == 0x000008, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsLocation::Key' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_GetBlackboardValueAsLocation, ReturnValue) == 0x000030, "Member 'GBAIFunctionLibrary_GetBlackboardValueAsLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIFunctionLibrary.SpawnDefaultKytAI
// 0x0058 (0x0058 - 0x0000)
struct GBAIFunctionLibrary_SpawnDefaultKytAI final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UClass*                                 Class_0;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ControllerOverride;                                // 0x0028(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBCharacter*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIFunctionLibrary_SpawnDefaultKytAI) == 0x000008, "Wrong alignment on GBAIFunctionLibrary_SpawnDefaultKytAI");
static_assert(sizeof(GBAIFunctionLibrary_SpawnDefaultKytAI) == 0x000058, "Wrong size on GBAIFunctionLibrary_SpawnDefaultKytAI");
static_assert(offsetof(GBAIFunctionLibrary_SpawnDefaultKytAI, WorldContextObject) == 0x000000, "Member 'GBAIFunctionLibrary_SpawnDefaultKytAI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_SpawnDefaultKytAI, SpawnLocation) == 0x000008, "Member 'GBAIFunctionLibrary_SpawnDefaultKytAI::SpawnLocation' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_SpawnDefaultKytAI, SpawnRotation) == 0x000014, "Member 'GBAIFunctionLibrary_SpawnDefaultKytAI::SpawnRotation' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_SpawnDefaultKytAI, Class_0) == 0x000020, "Member 'GBAIFunctionLibrary_SpawnDefaultKytAI::Class_0' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_SpawnDefaultKytAI, ControllerOverride) == 0x000028, "Member 'GBAIFunctionLibrary_SpawnDefaultKytAI::ControllerOverride' has a wrong offset!");
static_assert(offsetof(GBAIFunctionLibrary_SpawnDefaultKytAI, ReturnValue) == 0x000050, "Member 'GBAIFunctionLibrary_SpawnDefaultKytAI::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.UpdateGuardPointRadiusSphere
// 0x0001 (0x0001 - 0x0000)
struct GBAIGuardPoint_UpdateGuardPointRadiusSphere final
{
public:
	bool                                          bHideSphere;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_UpdateGuardPointRadiusSphere) == 0x000001, "Wrong alignment on GBAIGuardPoint_UpdateGuardPointRadiusSphere");
static_assert(sizeof(GBAIGuardPoint_UpdateGuardPointRadiusSphere) == 0x000001, "Wrong size on GBAIGuardPoint_UpdateGuardPointRadiusSphere");
static_assert(offsetof(GBAIGuardPoint_UpdateGuardPointRadiusSphere, bHideSphere) == 0x000000, "Member 'GBAIGuardPoint_UpdateGuardPointRadiusSphere::bHideSphere' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetBaseViewRoation
// 0x000C (0x000C - 0x0000)
struct GBAIGuardPoint_GetBaseViewRoation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetBaseViewRoation) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetBaseViewRoation");
static_assert(sizeof(GBAIGuardPoint_GetBaseViewRoation) == 0x00000C, "Wrong size on GBAIGuardPoint_GetBaseViewRoation");
static_assert(offsetof(GBAIGuardPoint_GetBaseViewRoation, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetBaseViewRoation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetDeviation
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetDeviation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetDeviation) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetDeviation");
static_assert(sizeof(GBAIGuardPoint_GetDeviation) == 0x000004, "Wrong size on GBAIGuardPoint_GetDeviation");
static_assert(offsetof(GBAIGuardPoint_GetDeviation, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetDeviation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetGroupName
// 0x0008 (0x0008 - 0x0000)
struct GBAIGuardPoint_GetGroupName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetGroupName) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetGroupName");
static_assert(sizeof(GBAIGuardPoint_GetGroupName) == 0x000008, "Wrong size on GBAIGuardPoint_GetGroupName");
static_assert(offsetof(GBAIGuardPoint_GetGroupName, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetGroupName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetGuardPointType
// 0x0001 (0x0001 - 0x0000)
struct GBAIGuardPoint_GetGuardPointType final
{
public:
	EGBGuardPointType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetGuardPointType) == 0x000001, "Wrong alignment on GBAIGuardPoint_GetGuardPointType");
static_assert(sizeof(GBAIGuardPoint_GetGuardPointType) == 0x000001, "Wrong size on GBAIGuardPoint_GetGuardPointType");
static_assert(offsetof(GBAIGuardPoint_GetGuardPointType, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetGuardPointType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetHoldDeviation
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetHoldDeviation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetHoldDeviation) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetHoldDeviation");
static_assert(sizeof(GBAIGuardPoint_GetHoldDeviation) == 0x000004, "Wrong size on GBAIGuardPoint_GetHoldDeviation");
static_assert(offsetof(GBAIGuardPoint_GetHoldDeviation, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetHoldDeviation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetHoldTime
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetHoldTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetHoldTime) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetHoldTime");
static_assert(sizeof(GBAIGuardPoint_GetHoldTime) == 0x000004, "Wrong size on GBAIGuardPoint_GetHoldTime");
static_assert(offsetof(GBAIGuardPoint_GetHoldTime, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetHoldTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetMovementRadius
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetMovementRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetMovementRadius) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetMovementRadius");
static_assert(sizeof(GBAIGuardPoint_GetMovementRadius) == 0x000004, "Wrong size on GBAIGuardPoint_GetMovementRadius");
static_assert(offsetof(GBAIGuardPoint_GetMovementRadius, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetMovementRadius::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetScanDuration
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetScanDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetScanDuration) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetScanDuration");
static_assert(sizeof(GBAIGuardPoint_GetScanDuration) == 0x000004, "Wrong size on GBAIGuardPoint_GetScanDuration");
static_assert(offsetof(GBAIGuardPoint_GetScanDuration, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetScanDuration::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetSweepAngle
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetSweepAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetSweepAngle) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetSweepAngle");
static_assert(sizeof(GBAIGuardPoint_GetSweepAngle) == 0x000004, "Wrong size on GBAIGuardPoint_GetSweepAngle");
static_assert(offsetof(GBAIGuardPoint_GetSweepAngle, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetSweepAngle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIGuardPoint.GetTurnRate
// 0x0004 (0x0004 - 0x0000)
struct GBAIGuardPoint_GetTurnRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIGuardPoint_GetTurnRate) == 0x000004, "Wrong alignment on GBAIGuardPoint_GetTurnRate");
static_assert(sizeof(GBAIGuardPoint_GetTurnRate) == 0x000004, "Wrong size on GBAIGuardPoint_GetTurnRate");
static_assert(offsetof(GBAIGuardPoint_GetTurnRate, ReturnValue) == 0x000000, "Member 'GBAIGuardPoint_GetTurnRate::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIHotspot.SetHotspotName
// 0x0008 (0x0008 - 0x0000)
struct GBAIHotspot_SetHotspotName final
{
public:
	class FName                                   NewHotspotName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIHotspot_SetHotspotName) == 0x000004, "Wrong alignment on GBAIHotspot_SetHotspotName");
static_assert(sizeof(GBAIHotspot_SetHotspotName) == 0x000008, "Wrong size on GBAIHotspot_SetHotspotName");
static_assert(offsetof(GBAIHotspot_SetHotspotName, NewHotspotName) == 0x000000, "Member 'GBAIHotspot_SetHotspotName::NewHotspotName' has a wrong offset!");

// Function GroundBranch.GBAIHotspot.GetHotspotName
// 0x0008 (0x0008 - 0x0000)
struct GBAIHotspot_GetHotspotName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIHotspot_GetHotspotName) == 0x000004, "Wrong alignment on GBAIHotspot_GetHotspotName");
static_assert(sizeof(GBAIHotspot_GetHotspotName) == 0x000008, "Wrong size on GBAIHotspot_GetHotspotName");
static_assert(offsetof(GBAIHotspot_GetHotspotName, ReturnValue) == 0x000000, "Member 'GBAIHotspot_GetHotspotName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIObjectiveBase.GetObjectiveDescription
// 0x0010 (0x0010 - 0x0000)
struct GBAIObjectiveBase_GetObjectiveDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIObjectiveBase_GetObjectiveDescription) == 0x000008, "Wrong alignment on GBAIObjectiveBase_GetObjectiveDescription");
static_assert(sizeof(GBAIObjectiveBase_GetObjectiveDescription) == 0x000010, "Wrong size on GBAIObjectiveBase_GetObjectiveDescription");
static_assert(offsetof(GBAIObjectiveBase_GetObjectiveDescription, ReturnValue) == 0x000000, "Member 'GBAIObjectiveBase_GetObjectiveDescription::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIObjectiveGeneratorBase.GenerateObjectives
// 0x0010 (0x0010 - 0x0000)
struct GBAIObjectiveGeneratorBase_GenerateObjectives final
{
public:
	TArray<class UGBAIObjectiveBase*>             Objectives;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIObjectiveGeneratorBase_GenerateObjectives) == 0x000008, "Wrong alignment on GBAIObjectiveGeneratorBase_GenerateObjectives");
static_assert(sizeof(GBAIObjectiveGeneratorBase_GenerateObjectives) == 0x000010, "Wrong size on GBAIObjectiveGeneratorBase_GenerateObjectives");
static_assert(offsetof(GBAIObjectiveGeneratorBase_GenerateObjectives, Objectives) == 0x000000, "Member 'GBAIObjectiveGeneratorBase_GenerateObjectives::Objectives' has a wrong offset!");

// Function GroundBranch.GBAIPatrolRoute.AddRecentlyUsedPatrolRoute
// 0x0008 (0x0008 - 0x0000)
struct GBAIPatrolRoute_AddRecentlyUsedPatrolRoute final
{
public:
	class AGBAIPatrolRoute*                       PatrolRoute;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIPatrolRoute_AddRecentlyUsedPatrolRoute) == 0x000008, "Wrong alignment on GBAIPatrolRoute_AddRecentlyUsedPatrolRoute");
static_assert(sizeof(GBAIPatrolRoute_AddRecentlyUsedPatrolRoute) == 0x000008, "Wrong size on GBAIPatrolRoute_AddRecentlyUsedPatrolRoute");
static_assert(offsetof(GBAIPatrolRoute_AddRecentlyUsedPatrolRoute, PatrolRoute) == 0x000000, "Member 'GBAIPatrolRoute_AddRecentlyUsedPatrolRoute::PatrolRoute' has a wrong offset!");

// Function GroundBranch.GBAIPatrolRoute.GetLinkedPatrolRoutes
// 0x0010 (0x0010 - 0x0000)
struct GBAIPatrolRoute_GetLinkedPatrolRoutes final
{
public:
	TArray<class AGBAIPatrolRoute*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIPatrolRoute_GetLinkedPatrolRoutes) == 0x000008, "Wrong alignment on GBAIPatrolRoute_GetLinkedPatrolRoutes");
static_assert(sizeof(GBAIPatrolRoute_GetLinkedPatrolRoutes) == 0x000010, "Wrong size on GBAIPatrolRoute_GetLinkedPatrolRoutes");
static_assert(offsetof(GBAIPatrolRoute_GetLinkedPatrolRoutes, ReturnValue) == 0x000000, "Member 'GBAIPatrolRoute_GetLinkedPatrolRoutes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIPatrolRoute.GetNumberOfLinkedPatrolRoutes
// 0x0004 (0x0004 - 0x0000)
struct GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes) == 0x000004, "Wrong alignment on GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes");
static_assert(sizeof(GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes) == 0x000004, "Wrong size on GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes");
static_assert(offsetof(GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes, ReturnValue) == 0x000000, "Member 'GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAIPatrolRoute.GetRecentlyUsedPatrolRoutes
// 0x0010 (0x0010 - 0x0000)
struct GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes final
{
public:
	TArray<class AGBAIPatrolRoute*>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes) == 0x000008, "Wrong alignment on GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes");
static_assert(sizeof(GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes) == 0x000010, "Wrong size on GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes");
static_assert(offsetof(GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes, ReturnValue) == 0x000000, "Member 'GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISense_Hearing.RegisterNonAIListener
// 0x0020 (0x0020 - 0x0000)
struct GBAISense_Hearing_RegisterNonAIListener final
{
public:
	class AActor*                                 RegisteredActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector& NoiseOrigin, float Loudness)> OnNonAIListenerAlert;         // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ThresholdSoundIntensity;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RetriggerDelay;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISense_Hearing_RegisterNonAIListener) == 0x000008, "Wrong alignment on GBAISense_Hearing_RegisterNonAIListener");
static_assert(sizeof(GBAISense_Hearing_RegisterNonAIListener) == 0x000020, "Wrong size on GBAISense_Hearing_RegisterNonAIListener");
static_assert(offsetof(GBAISense_Hearing_RegisterNonAIListener, RegisteredActor) == 0x000000, "Member 'GBAISense_Hearing_RegisterNonAIListener::RegisteredActor' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_RegisterNonAIListener, OnNonAIListenerAlert) == 0x000008, "Member 'GBAISense_Hearing_RegisterNonAIListener::OnNonAIListenerAlert' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_RegisterNonAIListener, ThresholdSoundIntensity) == 0x000018, "Member 'GBAISense_Hearing_RegisterNonAIListener::ThresholdSoundIntensity' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_RegisterNonAIListener, RetriggerDelay) == 0x00001C, "Member 'GBAISense_Hearing_RegisterNonAIListener::RetriggerDelay' has a wrong offset!");

// Function GroundBranch.GBAISense_Hearing.ReportNoiseEvent
// 0x0028 (0x0028 - 0x0000)
struct GBAISense_Hearing_ReportNoiseEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISense_Hearing_ReportNoiseEvent) == 0x000008, "Wrong alignment on GBAISense_Hearing_ReportNoiseEvent");
static_assert(sizeof(GBAISense_Hearing_ReportNoiseEvent) == 0x000028, "Wrong size on GBAISense_Hearing_ReportNoiseEvent");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEvent, WorldContextObject) == 0x000000, "Member 'GBAISense_Hearing_ReportNoiseEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEvent, NoiseLocation) == 0x000008, "Member 'GBAISense_Hearing_ReportNoiseEvent::NoiseLocation' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEvent, Loudness) == 0x000014, "Member 'GBAISense_Hearing_ReportNoiseEvent::Loudness' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEvent, Instigator) == 0x000018, "Member 'GBAISense_Hearing_ReportNoiseEvent::Instigator' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEvent, Tag) == 0x000020, "Member 'GBAISense_Hearing_ReportNoiseEvent::Tag' has a wrong offset!");

// Function GroundBranch.GBAISense_Hearing.ReportNoiseEventDistance
// 0x0028 (0x0028 - 0x0000)
struct GBAISense_Hearing_ReportNoiseEventDistance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioSignalRadius;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISense_Hearing_ReportNoiseEventDistance) == 0x000008, "Wrong alignment on GBAISense_Hearing_ReportNoiseEventDistance");
static_assert(sizeof(GBAISense_Hearing_ReportNoiseEventDistance) == 0x000028, "Wrong size on GBAISense_Hearing_ReportNoiseEventDistance");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEventDistance, WorldContextObject) == 0x000000, "Member 'GBAISense_Hearing_ReportNoiseEventDistance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEventDistance, NoiseLocation) == 0x000008, "Member 'GBAISense_Hearing_ReportNoiseEventDistance::NoiseLocation' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEventDistance, AudioSignalRadius) == 0x000014, "Member 'GBAISense_Hearing_ReportNoiseEventDistance::AudioSignalRadius' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEventDistance, Instigator) == 0x000018, "Member 'GBAISense_Hearing_ReportNoiseEventDistance::Instigator' has a wrong offset!");
static_assert(offsetof(GBAISense_Hearing_ReportNoiseEventDistance, Tag) == 0x000020, "Member 'GBAISense_Hearing_ReportNoiseEventDistance::Tag' has a wrong offset!");

// Function GroundBranch.GBAISense_Hearing.UnregisterNonAIListener
// 0x0008 (0x0008 - 0x0000)
struct GBAISense_Hearing_UnregisterNonAIListener final
{
public:
	class AActor*                                 RegisteredActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISense_Hearing_UnregisterNonAIListener) == 0x000008, "Wrong alignment on GBAISense_Hearing_UnregisterNonAIListener");
static_assert(sizeof(GBAISense_Hearing_UnregisterNonAIListener) == 0x000008, "Wrong size on GBAISense_Hearing_UnregisterNonAIListener");
static_assert(offsetof(GBAISense_Hearing_UnregisterNonAIListener, RegisteredActor) == 0x000000, "Member 'GBAISense_Hearing_UnregisterNonAIListener::RegisteredActor' has a wrong offset!");

// Function GroundBranch.GBAISense_Sight.ReportSightEvent
// 0x0028 (0x0028 - 0x0000)
struct GBAISense_Sight_ReportSightEvent final
{
public:
	class AActor*                                 Observer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SeenActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EventLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAISense_Sight_ReportSightEvent) == 0x000008, "Wrong alignment on GBAISense_Sight_ReportSightEvent");
static_assert(sizeof(GBAISense_Sight_ReportSightEvent) == 0x000028, "Wrong size on GBAISense_Sight_ReportSightEvent");
static_assert(offsetof(GBAISense_Sight_ReportSightEvent, Observer) == 0x000000, "Member 'GBAISense_Sight_ReportSightEvent::Observer' has a wrong offset!");
static_assert(offsetof(GBAISense_Sight_ReportSightEvent, SeenActor) == 0x000008, "Member 'GBAISense_Sight_ReportSightEvent::SeenActor' has a wrong offset!");
static_assert(offsetof(GBAISense_Sight_ReportSightEvent, EventLocation) == 0x000010, "Member 'GBAISense_Sight_ReportSightEvent::EventLocation' has a wrong offset!");
static_assert(offsetof(GBAISense_Sight_ReportSightEvent, Tag) == 0x00001C, "Member 'GBAISense_Sight_ReportSightEvent::Tag' has a wrong offset!");

// Function GroundBranch.GBAISettings.GetAISettingsForSkillLevel
// 0x0080 (0x0080 - 0x0000)
struct GBAISettings_GetAISettingsForSkillLevel final
{
public:
	int32                                         SkillLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBAISettingsInfo                      ReturnValue;                                       // 0x0008(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISettings_GetAISettingsForSkillLevel) == 0x000008, "Wrong alignment on GBAISettings_GetAISettingsForSkillLevel");
static_assert(sizeof(GBAISettings_GetAISettingsForSkillLevel) == 0x000080, "Wrong size on GBAISettings_GetAISettingsForSkillLevel");
static_assert(offsetof(GBAISettings_GetAISettingsForSkillLevel, SkillLevel) == 0x000000, "Member 'GBAISettings_GetAISettingsForSkillLevel::SkillLevel' has a wrong offset!");
static_assert(offsetof(GBAISettings_GetAISettingsForSkillLevel, ReturnValue) == 0x000008, "Member 'GBAISettings_GetAISettingsForSkillLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISettings.SetAISettingsForSkillLevel
// 0x0028 (0x0028 - 0x0000)
struct GBAISettings_SetAISettingsForSkillLevel final
{
public:
	int32                                         InSkillLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloat;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 inString;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushAfterSaving;                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAISettings_SetAISettingsForSkillLevel) == 0x000008, "Wrong alignment on GBAISettings_SetAISettingsForSkillLevel");
static_assert(sizeof(GBAISettings_SetAISettingsForSkillLevel) == 0x000028, "Wrong size on GBAISettings_SetAISettingsForSkillLevel");
static_assert(offsetof(GBAISettings_SetAISettingsForSkillLevel, InSkillLevel) == 0x000000, "Member 'GBAISettings_SetAISettingsForSkillLevel::InSkillLevel' has a wrong offset!");
static_assert(offsetof(GBAISettings_SetAISettingsForSkillLevel, SettingName) == 0x000004, "Member 'GBAISettings_SetAISettingsForSkillLevel::SettingName' has a wrong offset!");
static_assert(offsetof(GBAISettings_SetAISettingsForSkillLevel, InFloat) == 0x00000C, "Member 'GBAISettings_SetAISettingsForSkillLevel::InFloat' has a wrong offset!");
static_assert(offsetof(GBAISettings_SetAISettingsForSkillLevel, inString) == 0x000010, "Member 'GBAISettings_SetAISettingsForSkillLevel::inString' has a wrong offset!");
static_assert(offsetof(GBAISettings_SetAISettingsForSkillLevel, bFlushAfterSaving) == 0x000020, "Member 'GBAISettings_SetAISettingsForSkillLevel::bFlushAfterSaving' has a wrong offset!");

// Function GroundBranch.GBAISpawnManager.CleanUpAI
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnManager_CleanUpAI final
{
public:
	class FName                                   AIControllerTag;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnManager_CleanUpAI) == 0x000004, "Wrong alignment on GBAISpawnManager_CleanUpAI");
static_assert(sizeof(GBAISpawnManager_CleanUpAI) == 0x000008, "Wrong size on GBAISpawnManager_CleanUpAI");
static_assert(offsetof(GBAISpawnManager_CleanUpAI, AIControllerTag) == 0x000000, "Member 'GBAISpawnManager_CleanUpAI::AIControllerTag' has a wrong offset!");

// Function GroundBranch.GBAISpawnManager.CreateAIOverDuration
// 0x0020 (0x0020 - 0x0000)
struct GBAISpawnManager_CreateAIOverDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBAISpawnPoint*>                OrderedSpawnPoints;                                // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnManager_CreateAIOverDuration) == 0x000008, "Wrong alignment on GBAISpawnManager_CreateAIOverDuration");
static_assert(sizeof(GBAISpawnManager_CreateAIOverDuration) == 0x000020, "Wrong size on GBAISpawnManager_CreateAIOverDuration");
static_assert(offsetof(GBAISpawnManager_CreateAIOverDuration, Duration) == 0x000000, "Member 'GBAISpawnManager_CreateAIOverDuration::Duration' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_CreateAIOverDuration, Count) == 0x000004, "Member 'GBAISpawnManager_CreateAIOverDuration::Count' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_CreateAIOverDuration, OrderedSpawnPoints) == 0x000008, "Member 'GBAISpawnManager_CreateAIOverDuration::OrderedSpawnPoints' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_CreateAIOverDuration, Tag) == 0x000018, "Member 'GBAISpawnManager_CreateAIOverDuration::Tag' has a wrong offset!");

// Function GroundBranch.GBAISpawnManager.GetAIControllers
// 0x0028 (0x0028 - 0x0000)
struct GBAISpawnManager_GetAIControllers final
{
public:
	TSubclassOf<class AGBKytController>           ControllerClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SquadId;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBKytController*>               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnManager_GetAIControllers) == 0x000008, "Wrong alignment on GBAISpawnManager_GetAIControllers");
static_assert(sizeof(GBAISpawnManager_GetAIControllers) == 0x000028, "Wrong size on GBAISpawnManager_GetAIControllers");
static_assert(offsetof(GBAISpawnManager_GetAIControllers, ControllerClass) == 0x000000, "Member 'GBAISpawnManager_GetAIControllers::ControllerClass' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetAIControllers, Tag) == 0x000008, "Member 'GBAISpawnManager_GetAIControllers::Tag' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetAIControllers, TeamId) == 0x000010, "Member 'GBAISpawnManager_GetAIControllers::TeamId' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetAIControllers, SquadId) == 0x000011, "Member 'GBAISpawnManager_GetAIControllers::SquadId' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetAIControllers, ReturnValue) == 0x000018, "Member 'GBAISpawnManager_GetAIControllers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnManager.GetGenericAIControllers
// 0x0028 (0x0028 - 0x0000)
struct GBAISpawnManager_GetGenericAIControllers final
{
public:
	TSubclassOf<class AController>                ControllerClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AController*>                    ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnManager_GetGenericAIControllers) == 0x000008, "Wrong alignment on GBAISpawnManager_GetGenericAIControllers");
static_assert(sizeof(GBAISpawnManager_GetGenericAIControllers) == 0x000028, "Wrong size on GBAISpawnManager_GetGenericAIControllers");
static_assert(offsetof(GBAISpawnManager_GetGenericAIControllers, ControllerClass) == 0x000000, "Member 'GBAISpawnManager_GetGenericAIControllers::ControllerClass' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetGenericAIControllers, Tag) == 0x000008, "Member 'GBAISpawnManager_GetGenericAIControllers::Tag' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetGenericAIControllers, TeamId) == 0x000010, "Member 'GBAISpawnManager_GetGenericAIControllers::TeamId' has a wrong offset!");
static_assert(offsetof(GBAISpawnManager_GetGenericAIControllers, ReturnValue) == 0x000018, "Member 'GBAISpawnManager_GetGenericAIControllers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnManager.KillAI
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnManager_KillAI final
{
public:
	class AGBKytController*                       AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnManager_KillAI) == 0x000008, "Wrong alignment on GBAISpawnManager_KillAI");
static_assert(sizeof(GBAISpawnManager_KillAI) == 0x000008, "Wrong size on GBAISpawnManager_KillAI");
static_assert(offsetof(GBAISpawnManager_KillAI, AIController) == 0x000000, "Member 'GBAISpawnManager_KillAI::AIController' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.ApplyAITagsToCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_ApplyAITagsToCharacter final
{
public:
	class AGBCharacter*                           NewCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_ApplyAITagsToCharacter) == 0x000008, "Wrong alignment on GBAISpawnPoint_ApplyAITagsToCharacter");
static_assert(sizeof(GBAISpawnPoint_ApplyAITagsToCharacter) == 0x000008, "Wrong size on GBAISpawnPoint_ApplyAITagsToCharacter");
static_assert(offsetof(GBAISpawnPoint_ApplyAITagsToCharacter, NewCharacter) == 0x000000, "Member 'GBAISpawnPoint_ApplyAITagsToCharacter::NewCharacter' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.CreateAI
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_CreateAI final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_CreateAI) == 0x000004, "Wrong alignment on GBAISpawnPoint_CreateAI");
static_assert(sizeof(GBAISpawnPoint_CreateAI) == 0x000008, "Wrong size on GBAISpawnPoint_CreateAI");
static_assert(offsetof(GBAISpawnPoint_CreateAI, Tag) == 0x000000, "Member 'GBAISpawnPoint_CreateAI::Tag' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.CreateCharacter
// 0x0030 (0x0030 - 0x0000)
struct GBAISpawnPoint_CreateCharacter final
{
public:
	TSoftClassPtr<class UClass>                   DesiredCharacterClass;                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBCharacter*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_CreateCharacter) == 0x000008, "Wrong alignment on GBAISpawnPoint_CreateCharacter");
static_assert(sizeof(GBAISpawnPoint_CreateCharacter) == 0x000030, "Wrong size on GBAISpawnPoint_CreateCharacter");
static_assert(offsetof(GBAISpawnPoint_CreateCharacter, DesiredCharacterClass) == 0x000000, "Member 'GBAISpawnPoint_CreateCharacter::DesiredCharacterClass' has a wrong offset!");
static_assert(offsetof(GBAISpawnPoint_CreateCharacter, ReturnValue) == 0x000028, "Member 'GBAISpawnPoint_CreateCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetLoadoutInfo
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_GetLoadoutInfo final
{
public:
	class AGBKitInfo*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetLoadoutInfo) == 0x000008, "Wrong alignment on GBAISpawnPoint_GetLoadoutInfo");
static_assert(sizeof(GBAISpawnPoint_GetLoadoutInfo) == 0x000008, "Wrong size on GBAISpawnPoint_GetLoadoutInfo");
static_assert(offsetof(GBAISpawnPoint_GetLoadoutInfo, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetLoadoutInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.OnAIInitializedHandler
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_OnAIInitializedHandler final
{
public:
	class AGBKytController*                       NewAIController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_OnAIInitializedHandler) == 0x000008, "Wrong alignment on GBAISpawnPoint_OnAIInitializedHandler");
static_assert(sizeof(GBAISpawnPoint_OnAIInitializedHandler) == 0x000008, "Wrong size on GBAISpawnPoint_OnAIInitializedHandler");
static_assert(offsetof(GBAISpawnPoint_OnAIInitializedHandler, NewAIController) == 0x000000, "Member 'GBAISpawnPoint_OnAIInitializedHandler::NewAIController' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.OnInitialTimeOfDayChanged
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_OnInitialTimeOfDayChanged final
{
public:
	class AGBSky*                                 SkyActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_OnInitialTimeOfDayChanged) == 0x000008, "Wrong alignment on GBAISpawnPoint_OnInitialTimeOfDayChanged");
static_assert(sizeof(GBAISpawnPoint_OnInitialTimeOfDayChanged) == 0x000008, "Wrong size on GBAISpawnPoint_OnInitialTimeOfDayChanged");
static_assert(offsetof(GBAISpawnPoint_OnInitialTimeOfDayChanged, SkyActor) == 0x000000, "Member 'GBAISpawnPoint_OnInitialTimeOfDayChanged::SkyActor' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.SetLoadoutFileName
// 0x0010 (0x0010 - 0x0000)
struct GBAISpawnPoint_SetLoadoutFileName final
{
public:
	class FString                                 NewLoadoutFileName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_SetLoadoutFileName) == 0x000008, "Wrong alignment on GBAISpawnPoint_SetLoadoutFileName");
static_assert(sizeof(GBAISpawnPoint_SetLoadoutFileName) == 0x000010, "Wrong size on GBAISpawnPoint_SetLoadoutFileName");
static_assert(offsetof(GBAISpawnPoint_SetLoadoutFileName, NewLoadoutFileName) == 0x000000, "Member 'GBAISpawnPoint_SetLoadoutFileName::NewLoadoutFileName' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.SetSquadId
// 0x0004 (0x0004 - 0x0000)
struct GBAISpawnPoint_SetSquadId final
{
public:
	int32                                         NewSquadId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_SetSquadId) == 0x000004, "Wrong alignment on GBAISpawnPoint_SetSquadId");
static_assert(sizeof(GBAISpawnPoint_SetSquadId) == 0x000004, "Wrong size on GBAISpawnPoint_SetSquadId");
static_assert(offsetof(GBAISpawnPoint_SetSquadId, NewSquadId) == 0x000000, "Member 'GBAISpawnPoint_SetSquadId::NewSquadId' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.SetSquadOrders
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_SetSquadOrders final
{
public:
	class FName                                   NewSquadOrders;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_SetSquadOrders) == 0x000004, "Wrong alignment on GBAISpawnPoint_SetSquadOrders");
static_assert(sizeof(GBAISpawnPoint_SetSquadOrders) == 0x000008, "Wrong size on GBAISpawnPoint_SetSquadOrders");
static_assert(offsetof(GBAISpawnPoint_SetSquadOrders, NewSquadOrders) == 0x000000, "Member 'GBAISpawnPoint_SetSquadOrders::NewSquadOrders' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetAIControllerClass
// 0x0028 (0x0028 - 0x0000)
struct GBAISpawnPoint_GetAIControllerClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetAIControllerClass) == 0x000008, "Wrong alignment on GBAISpawnPoint_GetAIControllerClass");
static_assert(sizeof(GBAISpawnPoint_GetAIControllerClass) == 0x000028, "Wrong size on GBAISpawnPoint_GetAIControllerClass");
static_assert(offsetof(GBAISpawnPoint_GetAIControllerClass, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetAIControllerClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetIsActiveAtCurrentTimeOfDay
// 0x0001 (0x0001 - 0x0000)
struct GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay) == 0x000001, "Wrong alignment on GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay");
static_assert(sizeof(GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay) == 0x000001, "Wrong size on GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay");
static_assert(offsetof(GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetIsDaySpawn
// 0x0001 (0x0001 - 0x0000)
struct GBAISpawnPoint_GetIsDaySpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetIsDaySpawn) == 0x000001, "Wrong alignment on GBAISpawnPoint_GetIsDaySpawn");
static_assert(sizeof(GBAISpawnPoint_GetIsDaySpawn) == 0x000001, "Wrong size on GBAISpawnPoint_GetIsDaySpawn");
static_assert(offsetof(GBAISpawnPoint_GetIsDaySpawn, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetIsDaySpawn::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetIsNightSpawn
// 0x0001 (0x0001 - 0x0000)
struct GBAISpawnPoint_GetIsNightSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetIsNightSpawn) == 0x000001, "Wrong alignment on GBAISpawnPoint_GetIsNightSpawn");
static_assert(sizeof(GBAISpawnPoint_GetIsNightSpawn) == 0x000001, "Wrong size on GBAISpawnPoint_GetIsNightSpawn");
static_assert(offsetof(GBAISpawnPoint_GetIsNightSpawn, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetIsNightSpawn::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetLoadoutFileName
// 0x0010 (0x0010 - 0x0000)
struct GBAISpawnPoint_GetLoadoutFileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetLoadoutFileName) == 0x000008, "Wrong alignment on GBAISpawnPoint_GetLoadoutFileName");
static_assert(sizeof(GBAISpawnPoint_GetLoadoutFileName) == 0x000010, "Wrong size on GBAISpawnPoint_GetLoadoutFileName");
static_assert(offsetof(GBAISpawnPoint_GetLoadoutFileName, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetLoadoutFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetSquadId
// 0x0004 (0x0004 - 0x0000)
struct GBAISpawnPoint_GetSquadId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetSquadId) == 0x000004, "Wrong alignment on GBAISpawnPoint_GetSquadId");
static_assert(sizeof(GBAISpawnPoint_GetSquadId) == 0x000004, "Wrong size on GBAISpawnPoint_GetSquadId");
static_assert(offsetof(GBAISpawnPoint_GetSquadId, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetSquadId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISpawnPoint.GetSquadOrders
// 0x0008 (0x0008 - 0x0000)
struct GBAISpawnPoint_GetSquadOrders final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISpawnPoint_GetSquadOrders) == 0x000004, "Wrong alignment on GBAISpawnPoint_GetSquadOrders");
static_assert(sizeof(GBAISpawnPoint_GetSquadOrders) == 0x000008, "Wrong size on GBAISpawnPoint_GetSquadOrders");
static_assert(offsetof(GBAISpawnPoint_GetSquadOrders, ReturnValue) == 0x000000, "Member 'GBAISpawnPoint_GetSquadOrders::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.AddSearchedLocation
// 0x000C (0x000C - 0x0000)
struct GBAISquad_AddSearchedLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_AddSearchedLocation) == 0x000004, "Wrong alignment on GBAISquad_AddSearchedLocation");
static_assert(sizeof(GBAISquad_AddSearchedLocation) == 0x00000C, "Wrong size on GBAISquad_AddSearchedLocation");
static_assert(offsetof(GBAISquad_AddSearchedLocation, NewLocation) == 0x000000, "Member 'GBAISquad_AddSearchedLocation::NewLocation' has a wrong offset!");

// Function GroundBranch.GBAISquad.AddSquadMember
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_AddSquadMember final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_AddSquadMember) == 0x000008, "Wrong alignment on GBAISquad_AddSquadMember");
static_assert(sizeof(GBAISquad_AddSquadMember) == 0x000008, "Wrong size on GBAISquad_AddSquadMember");
static_assert(offsetof(GBAISquad_AddSquadMember, Controller) == 0x000000, "Member 'GBAISquad_AddSquadMember::Controller' has a wrong offset!");

// Function GroundBranch.GBAISquad.FindNearestPatrolRoute
// 0x0018 (0x0018 - 0x0000)
struct GBAISquad_FindNearestPatrolRoute final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBAIPatrolRoute*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_FindNearestPatrolRoute) == 0x000008, "Wrong alignment on GBAISquad_FindNearestPatrolRoute");
static_assert(sizeof(GBAISquad_FindNearestPatrolRoute) == 0x000018, "Wrong size on GBAISquad_FindNearestPatrolRoute");
static_assert(offsetof(GBAISquad_FindNearestPatrolRoute, Location) == 0x000000, "Member 'GBAISquad_FindNearestPatrolRoute::Location' has a wrong offset!");
static_assert(offsetof(GBAISquad_FindNearestPatrolRoute, ReturnValue) == 0x000010, "Member 'GBAISquad_FindNearestPatrolRoute::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetNextGuardPoint
// 0x0010 (0x0010 - 0x0000)
struct GBAISquad_GetNextGuardPoint final
{
public:
	class AGBKytController*                       AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBAIGuardPoint*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetNextGuardPoint) == 0x000008, "Wrong alignment on GBAISquad_GetNextGuardPoint");
static_assert(sizeof(GBAISquad_GetNextGuardPoint) == 0x000010, "Wrong size on GBAISquad_GetNextGuardPoint");
static_assert(offsetof(GBAISquad_GetNextGuardPoint, AIController) == 0x000000, "Member 'GBAISquad_GetNextGuardPoint::AIController' has a wrong offset!");
static_assert(offsetof(GBAISquad_GetNextGuardPoint, ReturnValue) == 0x000008, "Member 'GBAISquad_GetNextGuardPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetNextPatrolPosition
// 0x0018 (0x0018 - 0x0000)
struct GBAISquad_GetNextPatrolPosition final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAISquad_GetNextPatrolPosition) == 0x000008, "Wrong alignment on GBAISquad_GetNextPatrolPosition");
static_assert(sizeof(GBAISquad_GetNextPatrolPosition) == 0x000018, "Wrong size on GBAISquad_GetNextPatrolPosition");
static_assert(offsetof(GBAISquad_GetNextPatrolPosition, Controller) == 0x000000, "Member 'GBAISquad_GetNextPatrolPosition::Controller' has a wrong offset!");
static_assert(offsetof(GBAISquad_GetNextPatrolPosition, ReturnValue) == 0x000008, "Member 'GBAISquad_GetNextPatrolPosition::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.RemoveSquadMember
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_RemoveSquadMember final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_RemoveSquadMember) == 0x000008, "Wrong alignment on GBAISquad_RemoveSquadMember");
static_assert(sizeof(GBAISquad_RemoveSquadMember) == 0x000008, "Wrong size on GBAISquad_RemoveSquadMember");
static_assert(offsetof(GBAISquad_RemoveSquadMember, Controller) == 0x000000, "Member 'GBAISquad_RemoveSquadMember::Controller' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetAIStateBySquadOrders
// 0x0010 (0x0010 - 0x0000)
struct GBAISquad_SetAIStateBySquadOrders final
{
public:
	class AGBKytController*                       AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAISquad_SetAIStateBySquadOrders) == 0x000008, "Wrong alignment on GBAISquad_SetAIStateBySquadOrders");
static_assert(sizeof(GBAISquad_SetAIStateBySquadOrders) == 0x000010, "Wrong size on GBAISquad_SetAIStateBySquadOrders");
static_assert(offsetof(GBAISquad_SetAIStateBySquadOrders, AIController) == 0x000000, "Member 'GBAISquad_SetAIStateBySquadOrders::AIController' has a wrong offset!");
static_assert(offsetof(GBAISquad_SetAIStateBySquadOrders, ReturnValue) == 0x000008, "Member 'GBAISquad_SetAIStateBySquadOrders::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetGuardPointVisitedBy
// 0x0010 (0x0010 - 0x0000)
struct GBAISquad_SetGuardPointVisitedBy final
{
public:
	class AGBAIGuardPoint*                        GuardPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKytController*                       AIController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_SetGuardPointVisitedBy) == 0x000008, "Wrong alignment on GBAISquad_SetGuardPointVisitedBy");
static_assert(sizeof(GBAISquad_SetGuardPointVisitedBy) == 0x000010, "Wrong size on GBAISquad_SetGuardPointVisitedBy");
static_assert(offsetof(GBAISquad_SetGuardPointVisitedBy, GuardPoint) == 0x000000, "Member 'GBAISquad_SetGuardPointVisitedBy::GuardPoint' has a wrong offset!");
static_assert(offsetof(GBAISquad_SetGuardPointVisitedBy, AIController) == 0x000008, "Member 'GBAISquad_SetGuardPointVisitedBy::AIController' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetPatrolRoute
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_SetPatrolRoute final
{
public:
	class AGBAIPatrolRoute*                       NewPatrolRoute;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_SetPatrolRoute) == 0x000008, "Wrong alignment on GBAISquad_SetPatrolRoute");
static_assert(sizeof(GBAISquad_SetPatrolRoute) == 0x000008, "Wrong size on GBAISquad_SetPatrolRoute");
static_assert(offsetof(GBAISquad_SetPatrolRoute, NewPatrolRoute) == 0x000000, "Member 'GBAISquad_SetPatrolRoute::NewPatrolRoute' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetSquadId
// 0x0001 (0x0001 - 0x0000)
struct GBAISquad_SetSquadId final
{
public:
	uint8                                         NewSquadId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_SetSquadId) == 0x000001, "Wrong alignment on GBAISquad_SetSquadId");
static_assert(sizeof(GBAISquad_SetSquadId) == 0x000001, "Wrong size on GBAISquad_SetSquadId");
static_assert(offsetof(GBAISquad_SetSquadId, NewSquadId) == 0x000000, "Member 'GBAISquad_SetSquadId::NewSquadId' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetSquadLeader
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_SetSquadLeader final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_SetSquadLeader) == 0x000008, "Wrong alignment on GBAISquad_SetSquadLeader");
static_assert(sizeof(GBAISquad_SetSquadLeader) == 0x000008, "Wrong size on GBAISquad_SetSquadLeader");
static_assert(offsetof(GBAISquad_SetSquadLeader, Controller) == 0x000000, "Member 'GBAISquad_SetSquadLeader::Controller' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetSquadOrders
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_SetSquadOrders final
{
public:
	class FName                                   NewOrders;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_SetSquadOrders) == 0x000004, "Wrong alignment on GBAISquad_SetSquadOrders");
static_assert(sizeof(GBAISquad_SetSquadOrders) == 0x000008, "Wrong size on GBAISquad_SetSquadOrders");
static_assert(offsetof(GBAISquad_SetSquadOrders, NewOrders) == 0x000000, "Member 'GBAISquad_SetSquadOrders::NewOrders' has a wrong offset!");

// Function GroundBranch.GBAISquad.SetSquadOrdersTarget
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_SetSquadOrdersTarget final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_SetSquadOrdersTarget) == 0x000008, "Wrong alignment on GBAISquad_SetSquadOrdersTarget");
static_assert(sizeof(GBAISquad_SetSquadOrdersTarget) == 0x000008, "Wrong size on GBAISquad_SetSquadOrdersTarget");
static_assert(offsetof(GBAISquad_SetSquadOrdersTarget, NewTarget) == 0x000000, "Member 'GBAISquad_SetSquadOrdersTarget::NewTarget' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetPatrolRoute
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_GetPatrolRoute final
{
public:
	class AGBAIPatrolRoute*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetPatrolRoute) == 0x000008, "Wrong alignment on GBAISquad_GetPatrolRoute");
static_assert(sizeof(GBAISquad_GetPatrolRoute) == 0x000008, "Wrong size on GBAISquad_GetPatrolRoute");
static_assert(offsetof(GBAISquad_GetPatrolRoute, ReturnValue) == 0x000000, "Member 'GBAISquad_GetPatrolRoute::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSearchedLocations
// 0x0010 (0x0010 - 0x0000)
struct GBAISquad_GetSearchedLocations final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSearchedLocations) == 0x000008, "Wrong alignment on GBAISquad_GetSearchedLocations");
static_assert(sizeof(GBAISquad_GetSearchedLocations) == 0x000010, "Wrong size on GBAISquad_GetSearchedLocations");
static_assert(offsetof(GBAISquad_GetSearchedLocations, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSearchedLocations::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSquadId
// 0x0001 (0x0001 - 0x0000)
struct GBAISquad_GetSquadId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSquadId) == 0x000001, "Wrong alignment on GBAISquad_GetSquadId");
static_assert(sizeof(GBAISquad_GetSquadId) == 0x000001, "Wrong size on GBAISquad_GetSquadId");
static_assert(offsetof(GBAISquad_GetSquadId, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSquadId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSquadLeader
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_GetSquadLeader final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSquadLeader) == 0x000008, "Wrong alignment on GBAISquad_GetSquadLeader");
static_assert(sizeof(GBAISquad_GetSquadLeader) == 0x000008, "Wrong size on GBAISquad_GetSquadLeader");
static_assert(offsetof(GBAISquad_GetSquadLeader, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSquadLeader::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSquadMembers
// 0x0010 (0x0010 - 0x0000)
struct GBAISquad_GetSquadMembers final
{
public:
	TArray<class AController*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSquadMembers) == 0x000008, "Wrong alignment on GBAISquad_GetSquadMembers");
static_assert(sizeof(GBAISquad_GetSquadMembers) == 0x000010, "Wrong size on GBAISquad_GetSquadMembers");
static_assert(offsetof(GBAISquad_GetSquadMembers, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSquadMembers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSquadOrders
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_GetSquadOrders final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSquadOrders) == 0x000004, "Wrong alignment on GBAISquad_GetSquadOrders");
static_assert(sizeof(GBAISquad_GetSquadOrders) == 0x000008, "Wrong size on GBAISquad_GetSquadOrders");
static_assert(offsetof(GBAISquad_GetSquadOrders, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSquadOrders::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSquadOrdersTarget
// 0x0008 (0x0008 - 0x0000)
struct GBAISquad_GetSquadOrdersTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSquadOrdersTarget) == 0x000008, "Wrong alignment on GBAISquad_GetSquadOrdersTarget");
static_assert(sizeof(GBAISquad_GetSquadOrdersTarget) == 0x000008, "Wrong size on GBAISquad_GetSquadOrdersTarget");
static_assert(offsetof(GBAISquad_GetSquadOrdersTarget, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSquadOrdersTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.GetSquadSize
// 0x0001 (0x0001 - 0x0000)
struct GBAISquad_GetSquadSize final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAISquad_GetSquadSize) == 0x000001, "Wrong alignment on GBAISquad_GetSquadSize");
static_assert(sizeof(GBAISquad_GetSquadSize) == 0x000001, "Wrong size on GBAISquad_GetSquadSize");
static_assert(offsetof(GBAISquad_GetSquadSize, ReturnValue) == 0x000000, "Member 'GBAISquad_GetSquadSize::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAISquad.IsSquadMember
// 0x0010 (0x0010 - 0x0000)
struct GBAISquad_IsSquadMember final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAISquad_IsSquadMember) == 0x000008, "Wrong alignment on GBAISquad_IsSquadMember");
static_assert(sizeof(GBAISquad_IsSquadMember) == 0x000010, "Wrong size on GBAISquad_IsSquadMember");
static_assert(offsetof(GBAISquad_IsSquadMember, Controller) == 0x000000, "Member 'GBAISquad_IsSquadMember::Controller' has a wrong offset!");
static_assert(offsetof(GBAISquad_IsSquadMember, ReturnValue) == 0x000008, "Member 'GBAISquad_IsSquadMember::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerLoadingScreenComponent.SetCustomLoadingScreenText
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText final
{
public:
	class FString                                 NewText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText) == 0x000008, "Wrong alignment on GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText");
static_assert(sizeof(GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText) == 0x000010, "Wrong size on GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText, NewText) == 0x000000, "Member 'GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText::NewText' has a wrong offset!");

// Function GroundBranch.GBPlayerLoadingScreenComponent.SetLoadingScreenInfo
// 0x0070 (0x0070 - 0x0000)
struct GBPlayerLoadingScreenComponent_SetLoadingScreenInfo final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionTitle;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapTitle;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapAuthor;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionAuthor;                                     // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameModeAuthor;                                    // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                GameModeModID;                                     // 0x0060(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapModded;                                        // 0x0068(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMissionModded;                                    // 0x0069(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo) == 0x000008, "Wrong alignment on GBPlayerLoadingScreenComponent_SetLoadingScreenInfo");
static_assert(sizeof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo) == 0x000070, "Wrong size on GBPlayerLoadingScreenComponent_SetLoadingScreenInfo");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, ServerName) == 0x000000, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::ServerName' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, MissionTitle) == 0x000010, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::MissionTitle' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, MapTitle) == 0x000020, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::MapTitle' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, MapAuthor) == 0x000030, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::MapAuthor' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, MissionAuthor) == 0x000040, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::MissionAuthor' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, GameModeAuthor) == 0x000050, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::GameModeAuthor' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, GameModeModID) == 0x000060, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::GameModeModID' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, bMapModded) == 0x000068, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::bMapModded' has a wrong offset!");
static_assert(offsetof(GBPlayerLoadingScreenComponent_SetLoadingScreenInfo, bMissionModded) == 0x000069, "Member 'GBPlayerLoadingScreenComponent_SetLoadingScreenInfo::bMissionModded' has a wrong offset!");

// Function GroundBranch.GBPlayerLoadingScreenComponent.ShowLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerLoadingScreenComponent_ShowLoadingScreen final
{
public:
	class FString                                 NewLoadingScreenReason;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerLoadingScreenComponent_ShowLoadingScreen) == 0x000008, "Wrong alignment on GBPlayerLoadingScreenComponent_ShowLoadingScreen");
static_assert(sizeof(GBPlayerLoadingScreenComponent_ShowLoadingScreen) == 0x000010, "Wrong size on GBPlayerLoadingScreenComponent_ShowLoadingScreen");
static_assert(offsetof(GBPlayerLoadingScreenComponent_ShowLoadingScreen, NewLoadingScreenReason) == 0x000000, "Member 'GBPlayerLoadingScreenComponent_ShowLoadingScreen::NewLoadingScreenReason' has a wrong offset!");

// Function GroundBranch.GBPouch.FillWith
// 0x0020 (0x0020 - 0x0000)
struct GBPouch_FillWith final
{
public:
	struct FPrimaryAssetId                        InvItemId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        InvSkinId;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPouch_FillWith) == 0x000004, "Wrong alignment on GBPouch_FillWith");
static_assert(sizeof(GBPouch_FillWith) == 0x000020, "Wrong size on GBPouch_FillWith");
static_assert(offsetof(GBPouch_FillWith, InvItemId) == 0x000000, "Member 'GBPouch_FillWith::InvItemId' has a wrong offset!");
static_assert(offsetof(GBPouch_FillWith, InvSkinId) == 0x000010, "Member 'GBPouch_FillWith::InvSkinId' has a wrong offset!");

// Function GroundBranch.GBPouch.GetFillCount
// 0x0004 (0x0004 - 0x0000)
struct GBPouch_GetFillCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPouch_GetFillCount) == 0x000004, "Wrong alignment on GBPouch_GetFillCount");
static_assert(sizeof(GBPouch_GetFillCount) == 0x000004, "Wrong size on GBPouch_GetFillCount");
static_assert(offsetof(GBPouch_GetFillCount, ReturnValue) == 0x000000, "Member 'GBPouch_GetFillCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmoPouch.GetBestMatchingAmmoPouchId
// 0x0038 (0x0038 - 0x0000)
struct GBAmmoPouch_GetBestMatchingAmmoPouchId final
{
public:
	TArray<struct FPrimaryAssetId>                PouchItemAssetIds;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EGBAmmoPouchModularity                        DesiredModularity;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        CurrentAmmoPouchId;                                // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        OutAmmoPouchId;                                    // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAmmoPouch_GetBestMatchingAmmoPouchId) == 0x000008, "Wrong alignment on GBAmmoPouch_GetBestMatchingAmmoPouchId");
static_assert(sizeof(GBAmmoPouch_GetBestMatchingAmmoPouchId) == 0x000038, "Wrong size on GBAmmoPouch_GetBestMatchingAmmoPouchId");
static_assert(offsetof(GBAmmoPouch_GetBestMatchingAmmoPouchId, PouchItemAssetIds) == 0x000000, "Member 'GBAmmoPouch_GetBestMatchingAmmoPouchId::PouchItemAssetIds' has a wrong offset!");
static_assert(offsetof(GBAmmoPouch_GetBestMatchingAmmoPouchId, DesiredModularity) == 0x000010, "Member 'GBAmmoPouch_GetBestMatchingAmmoPouchId::DesiredModularity' has a wrong offset!");
static_assert(offsetof(GBAmmoPouch_GetBestMatchingAmmoPouchId, CurrentAmmoPouchId) == 0x000014, "Member 'GBAmmoPouch_GetBestMatchingAmmoPouchId::CurrentAmmoPouchId' has a wrong offset!");
static_assert(offsetof(GBAmmoPouch_GetBestMatchingAmmoPouchId, OutAmmoPouchId) == 0x000024, "Member 'GBAmmoPouch_GetBestMatchingAmmoPouchId::OutAmmoPouchId' has a wrong offset!");
static_assert(offsetof(GBAmmoPouch_GetBestMatchingAmmoPouchId, ReturnValue) == 0x000034, "Member 'GBAmmoPouch_GetBestMatchingAmmoPouchId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmoPouch.InitReplacement
// 0x0001 (0x0001 - 0x0000)
struct GBAmmoPouch_InitReplacement final
{
public:
	EGBAmmoPouchModularity                        NewModularity;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmoPouch_InitReplacement) == 0x000001, "Wrong alignment on GBAmmoPouch_InitReplacement");
static_assert(sizeof(GBAmmoPouch_InitReplacement) == 0x000001, "Wrong size on GBAmmoPouch_InitReplacement");
static_assert(offsetof(GBAmmoPouch_InitReplacement, NewModularity) == 0x000000, "Member 'GBAmmoPouch_InitReplacement::NewModularity' has a wrong offset!");

// Function GroundBranch.GBAmmoPouch.InventoryItemAdded
// 0x0010 (0x0010 - 0x0000)
struct GBAmmoPouch_InventoryItemAdded final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             InvItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmoPouch_InventoryItemAdded) == 0x000008, "Wrong alignment on GBAmmoPouch_InventoryItemAdded");
static_assert(sizeof(GBAmmoPouch_InventoryItemAdded) == 0x000010, "Wrong size on GBAmmoPouch_InventoryItemAdded");
static_assert(offsetof(GBAmmoPouch_InventoryItemAdded, Character) == 0x000000, "Member 'GBAmmoPouch_InventoryItemAdded::Character' has a wrong offset!");
static_assert(offsetof(GBAmmoPouch_InventoryItemAdded, InvItem) == 0x000008, "Member 'GBAmmoPouch_InventoryItemAdded::InvItem' has a wrong offset!");

// Function GroundBranch.GBAmmoPouch.SetModularity
// 0x0001 (0x0001 - 0x0000)
struct GBAmmoPouch_SetModularity final
{
public:
	EGBAmmoPouchModularity                        NewModularity;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmoPouch_SetModularity) == 0x000001, "Wrong alignment on GBAmmoPouch_SetModularity");
static_assert(sizeof(GBAmmoPouch_SetModularity) == 0x000001, "Wrong size on GBAmmoPouch_SetModularity");
static_assert(offsetof(GBAmmoPouch_SetModularity, NewModularity) == 0x000000, "Member 'GBAmmoPouch_SetModularity::NewModularity' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropPayloadBase.GetInvItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemDragDropPayloadBase_GetInvItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropPayloadBase_GetInvItem) == 0x000008, "Wrong alignment on GBInvItemDragDropPayloadBase_GetInvItem");
static_assert(sizeof(GBInvItemDragDropPayloadBase_GetInvItem) == 0x000008, "Wrong size on GBInvItemDragDropPayloadBase_GetInvItem");
static_assert(offsetof(GBInvItemDragDropPayloadBase_GetInvItem, ReturnValue) == 0x000000, "Member 'GBInvItemDragDropPayloadBase_GetInvItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropPayloadBase.GetRootInvItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemDragDropPayloadBase_GetRootInvItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropPayloadBase_GetRootInvItem) == 0x000008, "Wrong alignment on GBInvItemDragDropPayloadBase_GetRootInvItem");
static_assert(sizeof(GBInvItemDragDropPayloadBase_GetRootInvItem) == 0x000008, "Wrong size on GBInvItemDragDropPayloadBase_GetRootInvItem");
static_assert(offsetof(GBInvItemDragDropPayloadBase_GetRootInvItem, ReturnValue) == 0x000000, "Member 'GBInvItemDragDropPayloadBase_GetRootInvItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropPayload.SetInvItemSkinAssetId
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemDragDropPayload_SetInvItemSkinAssetId final
{
public:
	struct FPrimaryAssetId                        NewInvItemSkinAssetId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropPayload_SetInvItemSkinAssetId) == 0x000004, "Wrong alignment on GBInvItemDragDropPayload_SetInvItemSkinAssetId");
static_assert(sizeof(GBInvItemDragDropPayload_SetInvItemSkinAssetId) == 0x000010, "Wrong size on GBInvItemDragDropPayload_SetInvItemSkinAssetId");
static_assert(offsetof(GBInvItemDragDropPayload_SetInvItemSkinAssetId, NewInvItemSkinAssetId) == 0x000000, "Member 'GBInvItemDragDropPayload_SetInvItemSkinAssetId::NewInvItemSkinAssetId' has a wrong offset!");

// Function GroundBranch.GBPlayerStart.IsValidFor
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerStart_IsValidFor final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerStart_IsValidFor) == 0x000008, "Wrong alignment on GBPlayerStart_IsValidFor");
static_assert(sizeof(GBPlayerStart_IsValidFor) == 0x000010, "Wrong size on GBPlayerStart_IsValidFor");
static_assert(offsetof(GBPlayerStart_IsValidFor, Controller) == 0x000000, "Member 'GBPlayerStart_IsValidFor::Controller' has a wrong offset!");
static_assert(offsetof(GBPlayerStart_IsValidFor, ReturnValue) == 0x000008, "Member 'GBPlayerStart_IsValidFor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerStart.SetGroup
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerStart_SetGroup final
{
public:
	class FName                                   NewGroupName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerStart_SetGroup) == 0x000004, "Wrong alignment on GBPlayerStart_SetGroup");
static_assert(sizeof(GBPlayerStart_SetGroup) == 0x000008, "Wrong size on GBPlayerStart_SetGroup");
static_assert(offsetof(GBPlayerStart_SetGroup, NewGroupName) == 0x000000, "Member 'GBPlayerStart_SetGroup::NewGroupName' has a wrong offset!");

// Function GroundBranch.GBPlayerStart.GetGroup
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerStart_GetGroup final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerStart_GetGroup) == 0x000004, "Wrong alignment on GBPlayerStart_GetGroup");
static_assert(sizeof(GBPlayerStart_GetGroup) == 0x000008, "Wrong size on GBPlayerStart_GetGroup");
static_assert(offsetof(GBPlayerStart_GetGroup, ReturnValue) == 0x000000, "Member 'GBPlayerStart_GetGroup::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerStart.GetStartingStance
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerStart_GetStartingStance final
{
public:
	EGBPlayerStance                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerStart_GetStartingStance) == 0x000001, "Wrong alignment on GBPlayerStart_GetStartingStance");
static_assert(sizeof(GBPlayerStart_GetStartingStance) == 0x000001, "Wrong size on GBPlayerStart_GetStartingStance");
static_assert(offsetof(GBPlayerStart_GetStartingStance, ReturnValue) == 0x000000, "Member 'GBPlayerStart_GetStartingStance::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPouchDragDropPayload.GetFillWithClass
// 0x0008 (0x0008 - 0x0000)
struct GBPouchDragDropPayload_GetFillWithClass final
{
public:
	TSubclassOf<class AGBInvItem>                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPouchDragDropPayload_GetFillWithClass) == 0x000008, "Wrong alignment on GBPouchDragDropPayload_GetFillWithClass");
static_assert(sizeof(GBPouchDragDropPayload_GetFillWithClass) == 0x000008, "Wrong size on GBPouchDragDropPayload_GetFillWithClass");
static_assert(offsetof(GBPouchDragDropPayload_GetFillWithClass, ReturnValue) == 0x000000, "Member 'GBPouchDragDropPayload_GetFillWithClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.DecodeKit
// 0x0010 (0x0010 - 0x0000)
struct GBAmmunitionFeedComponent_DecodeKit final
{
public:
	class UVaRestJsonObject*                      ItemAsJson;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAmmunitionFeedComponent_DecodeKit) == 0x000008, "Wrong alignment on GBAmmunitionFeedComponent_DecodeKit");
static_assert(sizeof(GBAmmunitionFeedComponent_DecodeKit) == 0x000010, "Wrong size on GBAmmunitionFeedComponent_DecodeKit");
static_assert(offsetof(GBAmmunitionFeedComponent_DecodeKit, ItemAsJson) == 0x000000, "Member 'GBAmmunitionFeedComponent_DecodeKit::ItemAsJson' has a wrong offset!");
static_assert(offsetof(GBAmmunitionFeedComponent_DecodeKit, ReturnValue) == 0x000008, "Member 'GBAmmunitionFeedComponent_DecodeKit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.EncodeKit
// 0x0008 (0x0008 - 0x0000)
struct GBAmmunitionFeedComponent_EncodeKit final
{
public:
	class UVaRestJsonObject*                      ItemAsJson;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmunitionFeedComponent_EncodeKit) == 0x000008, "Wrong alignment on GBAmmunitionFeedComponent_EncodeKit");
static_assert(sizeof(GBAmmunitionFeedComponent_EncodeKit) == 0x000008, "Wrong size on GBAmmunitionFeedComponent_EncodeKit");
static_assert(offsetof(GBAmmunitionFeedComponent_EncodeKit, ItemAsJson) == 0x000000, "Member 'GBAmmunitionFeedComponent_EncodeKit::ItemAsJson' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.SetCurrentAmmoId
// 0x0010 (0x0010 - 0x0000)
struct GBAmmunitionFeedComponent_SetCurrentAmmoId final
{
public:
	struct FPrimaryAssetId                        NewCurrentAmmoId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmunitionFeedComponent_SetCurrentAmmoId) == 0x000004, "Wrong alignment on GBAmmunitionFeedComponent_SetCurrentAmmoId");
static_assert(sizeof(GBAmmunitionFeedComponent_SetCurrentAmmoId) == 0x000010, "Wrong size on GBAmmunitionFeedComponent_SetCurrentAmmoId");
static_assert(offsetof(GBAmmunitionFeedComponent_SetCurrentAmmoId, NewCurrentAmmoId) == 0x000000, "Member 'GBAmmunitionFeedComponent_SetCurrentAmmoId::NewCurrentAmmoId' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.GetBulletProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct GBAmmunitionFeedComponent_GetBulletProjectileClass final
{
public:
	TSubclassOf<class AGBBulletProjectile>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmunitionFeedComponent_GetBulletProjectileClass) == 0x000008, "Wrong alignment on GBAmmunitionFeedComponent_GetBulletProjectileClass");
static_assert(sizeof(GBAmmunitionFeedComponent_GetBulletProjectileClass) == 0x000008, "Wrong size on GBAmmunitionFeedComponent_GetBulletProjectileClass");
static_assert(offsetof(GBAmmunitionFeedComponent_GetBulletProjectileClass, ReturnValue) == 0x000000, "Member 'GBAmmunitionFeedComponent_GetBulletProjectileClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.GetCurrentAmmoId
// 0x0010 (0x0010 - 0x0000)
struct GBAmmunitionFeedComponent_GetCurrentAmmoId final
{
public:
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmunitionFeedComponent_GetCurrentAmmoId) == 0x000004, "Wrong alignment on GBAmmunitionFeedComponent_GetCurrentAmmoId");
static_assert(sizeof(GBAmmunitionFeedComponent_GetCurrentAmmoId) == 0x000010, "Wrong size on GBAmmunitionFeedComponent_GetCurrentAmmoId");
static_assert(offsetof(GBAmmunitionFeedComponent_GetCurrentAmmoId, ReturnValue) == 0x000000, "Member 'GBAmmunitionFeedComponent_GetCurrentAmmoId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.GetTotalAvailableCount
// 0x0004 (0x0004 - 0x0000)
struct GBAmmunitionFeedComponent_GetTotalAvailableCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmunitionFeedComponent_GetTotalAvailableCount) == 0x000004, "Wrong alignment on GBAmmunitionFeedComponent_GetTotalAvailableCount");
static_assert(sizeof(GBAmmunitionFeedComponent_GetTotalAvailableCount) == 0x000004, "Wrong size on GBAmmunitionFeedComponent_GetTotalAvailableCount");
static_assert(offsetof(GBAmmunitionFeedComponent_GetTotalAvailableCount, ReturnValue) == 0x000000, "Member 'GBAmmunitionFeedComponent_GetTotalAvailableCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct GBAmmunitionFeedComponent_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAmmunitionFeedComponent_IsEmpty) == 0x000001, "Wrong alignment on GBAmmunitionFeedComponent_IsEmpty");
static_assert(sizeof(GBAmmunitionFeedComponent_IsEmpty) == 0x000001, "Wrong size on GBAmmunitionFeedComponent_IsEmpty");
static_assert(offsetof(GBAmmunitionFeedComponent_IsEmpty, ReturnValue) == 0x000000, "Member 'GBAmmunitionFeedComponent_IsEmpty::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAmmunitionFeedComponent.ShouldMagicallyCreateAmmo
// 0x0010 (0x0010 - 0x0000)
struct GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo final
{
public:
	const class AGBCharacter*                     Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo) == 0x000008, "Wrong alignment on GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo");
static_assert(sizeof(GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo) == 0x000010, "Wrong size on GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo");
static_assert(offsetof(GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo, Character) == 0x000000, "Member 'GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo::Character' has a wrong offset!");
static_assert(offsetof(GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo, ReturnValue) == 0x000008, "Member 'GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAnimFunctionLibrary.FindPositionFromDistanceCurve
// 0x0018 (0x0018 - 0x0000)
struct GBAnimFunctionLibrary_FindPositionFromDistanceCurve final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      InAnimSequence;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAnimFunctionLibrary_FindPositionFromDistanceCurve) == 0x000008, "Wrong alignment on GBAnimFunctionLibrary_FindPositionFromDistanceCurve");
static_assert(sizeof(GBAnimFunctionLibrary_FindPositionFromDistanceCurve) == 0x000018, "Wrong size on GBAnimFunctionLibrary_FindPositionFromDistanceCurve");
static_assert(offsetof(GBAnimFunctionLibrary_FindPositionFromDistanceCurve, Distance) == 0x000000, "Member 'GBAnimFunctionLibrary_FindPositionFromDistanceCurve::Distance' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_FindPositionFromDistanceCurve, InAnimSequence) == 0x000008, "Member 'GBAnimFunctionLibrary_FindPositionFromDistanceCurve::InAnimSequence' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_FindPositionFromDistanceCurve, ReturnValue) == 0x000010, "Member 'GBAnimFunctionLibrary_FindPositionFromDistanceCurve::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAnimFunctionLibrary.GetBoneTransformAtTime
// 0x0050 (0x0050 - 0x0000)
struct GBAnimFunctionLibrary_GetBoneTransformAtTime final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRawDataOnly;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimFunctionLibrary_GetBoneTransformAtTime) == 0x000010, "Wrong alignment on GBAnimFunctionLibrary_GetBoneTransformAtTime");
static_assert(sizeof(GBAnimFunctionLibrary_GetBoneTransformAtTime) == 0x000050, "Wrong size on GBAnimFunctionLibrary_GetBoneTransformAtTime");
static_assert(offsetof(GBAnimFunctionLibrary_GetBoneTransformAtTime, AnimSequence) == 0x000000, "Member 'GBAnimFunctionLibrary_GetBoneTransformAtTime::AnimSequence' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetBoneTransformAtTime, AnimTime) == 0x000008, "Member 'GBAnimFunctionLibrary_GetBoneTransformAtTime::AnimTime' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetBoneTransformAtTime, BoneName) == 0x00000C, "Member 'GBAnimFunctionLibrary_GetBoneTransformAtTime::BoneName' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetBoneTransformAtTime, bUseRawDataOnly) == 0x000014, "Member 'GBAnimFunctionLibrary_GetBoneTransformAtTime::bUseRawDataOnly' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetBoneTransformAtTime, ReturnValue) == 0x000020, "Member 'GBAnimFunctionLibrary_GetBoneTransformAtTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAnimFunctionLibrary.GetRateForPlayTime
// 0x0010 (0x0010 - 0x0000)
struct GBAnimFunctionLibrary_GetRateForPlayTime final
{
public:
	class UAnimSequenceBase*                      TargetSeq;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimFunctionLibrary_GetRateForPlayTime) == 0x000008, "Wrong alignment on GBAnimFunctionLibrary_GetRateForPlayTime");
static_assert(sizeof(GBAnimFunctionLibrary_GetRateForPlayTime) == 0x000010, "Wrong size on GBAnimFunctionLibrary_GetRateForPlayTime");
static_assert(offsetof(GBAnimFunctionLibrary_GetRateForPlayTime, TargetSeq) == 0x000000, "Member 'GBAnimFunctionLibrary_GetRateForPlayTime::TargetSeq' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetRateForPlayTime, PlayTime) == 0x000008, "Member 'GBAnimFunctionLibrary_GetRateForPlayTime::PlayTime' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetRateForPlayTime, ReturnValue) == 0x00000C, "Member 'GBAnimFunctionLibrary_GetRateForPlayTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAnimFunctionLibrary.GetSequenceLength
// 0x0010 (0x0010 - 0x0000)
struct GBAnimFunctionLibrary_GetSequenceLength final
{
public:
	class UAnimSequenceBase*                      TargetSeq;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAnimFunctionLibrary_GetSequenceLength) == 0x000008, "Wrong alignment on GBAnimFunctionLibrary_GetSequenceLength");
static_assert(sizeof(GBAnimFunctionLibrary_GetSequenceLength) == 0x000010, "Wrong size on GBAnimFunctionLibrary_GetSequenceLength");
static_assert(offsetof(GBAnimFunctionLibrary_GetSequenceLength, TargetSeq) == 0x000000, "Member 'GBAnimFunctionLibrary_GetSequenceLength::TargetSeq' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_GetSequenceLength, ReturnValue) == 0x000008, "Member 'GBAnimFunctionLibrary_GetSequenceLength::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAnimFunctionLibrary.TransformFromBoneSpace
// 0x0040 (0x0040 - 0x0000)
struct GBAnimFunctionLibrary_TransformFromBoneSpace final
{
public:
	class UAnimInstance*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimFunctionLibrary_TransformFromBoneSpace) == 0x000008, "Wrong alignment on GBAnimFunctionLibrary_TransformFromBoneSpace");
static_assert(sizeof(GBAnimFunctionLibrary_TransformFromBoneSpace) == 0x000040, "Wrong size on GBAnimFunctionLibrary_TransformFromBoneSpace");
static_assert(offsetof(GBAnimFunctionLibrary_TransformFromBoneSpace, Target) == 0x000000, "Member 'GBAnimFunctionLibrary_TransformFromBoneSpace::Target' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformFromBoneSpace, BoneName) == 0x000008, "Member 'GBAnimFunctionLibrary_TransformFromBoneSpace::BoneName' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformFromBoneSpace, position) == 0x000010, "Member 'GBAnimFunctionLibrary_TransformFromBoneSpace::position' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformFromBoneSpace, Rotation) == 0x00001C, "Member 'GBAnimFunctionLibrary_TransformFromBoneSpace::Rotation' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformFromBoneSpace, OutPosition) == 0x000028, "Member 'GBAnimFunctionLibrary_TransformFromBoneSpace::OutPosition' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformFromBoneSpace, OutRotation) == 0x000034, "Member 'GBAnimFunctionLibrary_TransformFromBoneSpace::OutRotation' has a wrong offset!");

// Function GroundBranch.GBAnimFunctionLibrary.TransformToBoneSpace
// 0x0040 (0x0040 - 0x0000)
struct GBAnimFunctionLibrary_TransformToBoneSpace final
{
public:
	class UAnimInstance*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimFunctionLibrary_TransformToBoneSpace) == 0x000008, "Wrong alignment on GBAnimFunctionLibrary_TransformToBoneSpace");
static_assert(sizeof(GBAnimFunctionLibrary_TransformToBoneSpace) == 0x000040, "Wrong size on GBAnimFunctionLibrary_TransformToBoneSpace");
static_assert(offsetof(GBAnimFunctionLibrary_TransformToBoneSpace, Target) == 0x000000, "Member 'GBAnimFunctionLibrary_TransformToBoneSpace::Target' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformToBoneSpace, BoneName) == 0x000008, "Member 'GBAnimFunctionLibrary_TransformToBoneSpace::BoneName' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformToBoneSpace, position) == 0x000010, "Member 'GBAnimFunctionLibrary_TransformToBoneSpace::position' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformToBoneSpace, Rotation) == 0x00001C, "Member 'GBAnimFunctionLibrary_TransformToBoneSpace::Rotation' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformToBoneSpace, OutPosition) == 0x000028, "Member 'GBAnimFunctionLibrary_TransformToBoneSpace::OutPosition' has a wrong offset!");
static_assert(offsetof(GBAnimFunctionLibrary_TransformToBoneSpace, OutRotation) == 0x000034, "Member 'GBAnimFunctionLibrary_TransformToBoneSpace::OutRotation' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyEnum
// 0x0001 (0x0001 - 0x0000)
struct GBAnimNotifyInterface_NotifyEnum final
{
public:
	uint8                                         InEnumAsByte;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyEnum) == 0x000001, "Wrong alignment on GBAnimNotifyInterface_NotifyEnum");
static_assert(sizeof(GBAnimNotifyInterface_NotifyEnum) == 0x000001, "Wrong size on GBAnimNotifyInterface_NotifyEnum");
static_assert(offsetof(GBAnimNotifyInterface_NotifyEnum, InEnumAsByte) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyEnum::InEnumAsByte' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyName
// 0x0008 (0x0008 - 0x0000)
struct GBAnimNotifyInterface_NotifyName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyName) == 0x000004, "Wrong alignment on GBAnimNotifyInterface_NotifyName");
static_assert(sizeof(GBAnimNotifyInterface_NotifyName) == 0x000008, "Wrong size on GBAnimNotifyInterface_NotifyName");
static_assert(offsetof(GBAnimNotifyInterface_NotifyName, InName) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyName::InName' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyStateBeginEnum
// 0x0008 (0x0008 - 0x0000)
struct GBAnimNotifyInterface_NotifyStateBeginEnum final
{
public:
	uint8                                         InEnumAsByte;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalDuration;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyStateBeginEnum) == 0x000004, "Wrong alignment on GBAnimNotifyInterface_NotifyStateBeginEnum");
static_assert(sizeof(GBAnimNotifyInterface_NotifyStateBeginEnum) == 0x000008, "Wrong size on GBAnimNotifyInterface_NotifyStateBeginEnum");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateBeginEnum, InEnumAsByte) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyStateBeginEnum::InEnumAsByte' has a wrong offset!");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateBeginEnum, TotalDuration) == 0x000004, "Member 'GBAnimNotifyInterface_NotifyStateBeginEnum::TotalDuration' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyStateBeginName
// 0x000C (0x000C - 0x0000)
struct GBAnimNotifyInterface_NotifyStateBeginName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyStateBeginName) == 0x000004, "Wrong alignment on GBAnimNotifyInterface_NotifyStateBeginName");
static_assert(sizeof(GBAnimNotifyInterface_NotifyStateBeginName) == 0x00000C, "Wrong size on GBAnimNotifyInterface_NotifyStateBeginName");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateBeginName, InName) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyStateBeginName::InName' has a wrong offset!");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateBeginName, TotalDuration) == 0x000008, "Member 'GBAnimNotifyInterface_NotifyStateBeginName::TotalDuration' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyStateEndEnum
// 0x0001 (0x0001 - 0x0000)
struct GBAnimNotifyInterface_NotifyStateEndEnum final
{
public:
	uint8                                         InEnumAsByte;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyStateEndEnum) == 0x000001, "Wrong alignment on GBAnimNotifyInterface_NotifyStateEndEnum");
static_assert(sizeof(GBAnimNotifyInterface_NotifyStateEndEnum) == 0x000001, "Wrong size on GBAnimNotifyInterface_NotifyStateEndEnum");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateEndEnum, InEnumAsByte) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyStateEndEnum::InEnumAsByte' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyStateEndName
// 0x0008 (0x0008 - 0x0000)
struct GBAnimNotifyInterface_NotifyStateEndName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyStateEndName) == 0x000004, "Wrong alignment on GBAnimNotifyInterface_NotifyStateEndName");
static_assert(sizeof(GBAnimNotifyInterface_NotifyStateEndName) == 0x000008, "Wrong size on GBAnimNotifyInterface_NotifyStateEndName");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateEndName, InName) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyStateEndName::InName' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyStateTickEnum
// 0x0008 (0x0008 - 0x0000)
struct GBAnimNotifyInterface_NotifyStateTickEnum final
{
public:
	uint8                                         InEnumAsByte;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrameDeltaTime;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyStateTickEnum) == 0x000004, "Wrong alignment on GBAnimNotifyInterface_NotifyStateTickEnum");
static_assert(sizeof(GBAnimNotifyInterface_NotifyStateTickEnum) == 0x000008, "Wrong size on GBAnimNotifyInterface_NotifyStateTickEnum");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateTickEnum, InEnumAsByte) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyStateTickEnum::InEnumAsByte' has a wrong offset!");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateTickEnum, FrameDeltaTime) == 0x000004, "Member 'GBAnimNotifyInterface_NotifyStateTickEnum::FrameDeltaTime' has a wrong offset!");

// Function GroundBranch.GBAnimNotifyInterface.NotifyStateTickName
// 0x000C (0x000C - 0x0000)
struct GBAnimNotifyInterface_NotifyStateTickName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameDeltaTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAnimNotifyInterface_NotifyStateTickName) == 0x000004, "Wrong alignment on GBAnimNotifyInterface_NotifyStateTickName");
static_assert(sizeof(GBAnimNotifyInterface_NotifyStateTickName) == 0x00000C, "Wrong size on GBAnimNotifyInterface_NotifyStateTickName");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateTickName, InName) == 0x000000, "Member 'GBAnimNotifyInterface_NotifyStateTickName::InName' has a wrong offset!");
static_assert(offsetof(GBAnimNotifyInterface_NotifyStateTickName, FrameDeltaTime) == 0x000008, "Member 'GBAnimNotifyInterface_NotifyStateTickName::FrameDeltaTime' has a wrong offset!");

// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAsset
// 0x0038 (0x0038 - 0x0000)
struct GBAssetManager_BlueprintAsyncLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObjectPtr;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* LoadedAsset)>   OnAsyncLoadAssetComplete;                          // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManager_BlueprintAsyncLoadAsset) == 0x000008, "Wrong alignment on GBAssetManager_BlueprintAsyncLoadAsset");
static_assert(sizeof(GBAssetManager_BlueprintAsyncLoadAsset) == 0x000038, "Wrong size on GBAssetManager_BlueprintAsyncLoadAsset");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAsset, SoftObjectPtr) == 0x000000, "Member 'GBAssetManager_BlueprintAsyncLoadAsset::SoftObjectPtr' has a wrong offset!");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAsset, OnAsyncLoadAssetComplete) == 0x000028, "Member 'GBAssetManager_BlueprintAsyncLoadAsset::OnAsyncLoadAssetComplete' has a wrong offset!");

// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAssetPath
// 0x0028 (0x0028 - 0x0000)
struct GBAssetManager_BlueprintAsyncLoadAssetPath final
{
public:
	struct FSoftObjectPath                        SoftObjectPath;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* LoadedAsset)>   OnAsyncLoadAssetComplete;                          // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManager_BlueprintAsyncLoadAssetPath) == 0x000008, "Wrong alignment on GBAssetManager_BlueprintAsyncLoadAssetPath");
static_assert(sizeof(GBAssetManager_BlueprintAsyncLoadAssetPath) == 0x000028, "Wrong size on GBAssetManager_BlueprintAsyncLoadAssetPath");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAssetPath, SoftObjectPath) == 0x000000, "Member 'GBAssetManager_BlueprintAsyncLoadAssetPath::SoftObjectPath' has a wrong offset!");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAssetPath, OnAsyncLoadAssetComplete) == 0x000018, "Member 'GBAssetManager_BlueprintAsyncLoadAssetPath::OnAsyncLoadAssetComplete' has a wrong offset!");

// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAssetPaths
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManager_BlueprintAsyncLoadAssetPaths final
{
public:
	TArray<struct FSoftObjectPath>                SoftObjectPaths;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class UObject*>& LoadedAssets)> OnAsyncLoadAssetsComplete;           // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManager_BlueprintAsyncLoadAssetPaths) == 0x000008, "Wrong alignment on GBAssetManager_BlueprintAsyncLoadAssetPaths");
static_assert(sizeof(GBAssetManager_BlueprintAsyncLoadAssetPaths) == 0x000020, "Wrong size on GBAssetManager_BlueprintAsyncLoadAssetPaths");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAssetPaths, SoftObjectPaths) == 0x000000, "Member 'GBAssetManager_BlueprintAsyncLoadAssetPaths::SoftObjectPaths' has a wrong offset!");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAssetPaths, OnAsyncLoadAssetsComplete) == 0x000010, "Member 'GBAssetManager_BlueprintAsyncLoadAssetPaths::OnAsyncLoadAssetsComplete' has a wrong offset!");

// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAssets
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManager_BlueprintAsyncLoadAssets final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         SoftObjectPtrs;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class UObject*>& LoadedAssets)> OnAsyncLoadAssetsComplete;           // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManager_BlueprintAsyncLoadAssets) == 0x000008, "Wrong alignment on GBAssetManager_BlueprintAsyncLoadAssets");
static_assert(sizeof(GBAssetManager_BlueprintAsyncLoadAssets) == 0x000020, "Wrong size on GBAssetManager_BlueprintAsyncLoadAssets");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAssets, SoftObjectPtrs) == 0x000000, "Member 'GBAssetManager_BlueprintAsyncLoadAssets::SoftObjectPtrs' has a wrong offset!");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadAssets, OnAsyncLoadAssetsComplete) == 0x000010, "Member 'GBAssetManager_BlueprintAsyncLoadAssets::OnAsyncLoadAssetsComplete' has a wrong offset!");

// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadClassAsset
// 0x0038 (0x0038 - 0x0000)
struct GBAssetManager_BlueprintAsyncLoadClassAsset final
{
public:
	TSoftClassPtr<class UClass>                   SoftClassPtr;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UClass* LoadedClass)>    OnAsyncLoadClassAssetComplete;                     // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManager_BlueprintAsyncLoadClassAsset) == 0x000008, "Wrong alignment on GBAssetManager_BlueprintAsyncLoadClassAsset");
static_assert(sizeof(GBAssetManager_BlueprintAsyncLoadClassAsset) == 0x000038, "Wrong size on GBAssetManager_BlueprintAsyncLoadClassAsset");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadClassAsset, SoftClassPtr) == 0x000000, "Member 'GBAssetManager_BlueprintAsyncLoadClassAsset::SoftClassPtr' has a wrong offset!");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadClassAsset, OnAsyncLoadClassAssetComplete) == 0x000028, "Member 'GBAssetManager_BlueprintAsyncLoadClassAsset::OnAsyncLoadClassAssetComplete' has a wrong offset!");

// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadClassAssets
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManager_BlueprintAsyncLoadClassAssets final
{
public:
	TArray<TSoftClassPtr<class UClass>>           SoftClassPtrs;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class UClass*>& LoadedClasses)> OnAsyncLoadClassAssetsComplete;      // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManager_BlueprintAsyncLoadClassAssets) == 0x000008, "Wrong alignment on GBAssetManager_BlueprintAsyncLoadClassAssets");
static_assert(sizeof(GBAssetManager_BlueprintAsyncLoadClassAssets) == 0x000020, "Wrong size on GBAssetManager_BlueprintAsyncLoadClassAssets");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadClassAssets, SoftClassPtrs) == 0x000000, "Member 'GBAssetManager_BlueprintAsyncLoadClassAssets::SoftClassPtrs' has a wrong offset!");
static_assert(offsetof(GBAssetManager_BlueprintAsyncLoadClassAssets, OnAsyncLoadClassAssetsComplete) == 0x000010, "Member 'GBAssetManager_BlueprintAsyncLoadClassAssets::OnAsyncLoadClassAssetsComplete' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.Array_GetARSFromPrimaryAsset
// 0x0030 (0x0030 - 0x0000)
struct GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset) == 0x000030, "Wrong size on GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset, TargetArray) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset::TargetArray' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset, PrimaryAssetId) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset, TagKey) == 0x000020, "Member 'GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset, ReturnValue) == 0x000028, "Member 'GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.Conv_PrimaryAssetTypeToName
// 0x0010 (0x0010 - 0x0000)
struct GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName final
{
public:
	struct FPrimaryAssetType                      PrimaryAssetType;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName");
static_assert(sizeof(GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName) == 0x000010, "Wrong size on GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName, PrimaryAssetType) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName::PrimaryAssetType' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName, ReturnValue) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSBoolFromPrimaryAsset
// 0x001C (0x001C - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutBool;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset) == 0x00001C, "Wrong size on GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset, bOutBool) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset::bOutBool' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset, ReturnValue) == 0x000019, "Member 'GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSEnumAsByteFromPrimaryAsset
// 0x0030 (0x0030 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnumName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OutByte;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset) == 0x000030, "Wrong size on GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset, EnumName) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset::EnumName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset, TagKey) == 0x000020, "Member 'GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset, OutByte) == 0x000028, "Member 'GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset::OutByte' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset, ReturnValue) == 0x000029, "Member 'GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSFloatFromPrimaryAsset
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFloat;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset) == 0x000020, "Wrong size on GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset, OutFloat) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset::OutFloat' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset, ReturnValue) == 0x00001C, "Member 'GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSIntFromPrimaryAsset
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInt;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset) == 0x000020, "Wrong size on GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset, OutInt) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset::OutInt' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset, ReturnValue) == 0x00001C, "Member 'GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSNameFromPrimaryAsset
// 0x0024 (0x0024 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutName;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset) == 0x000024, "Wrong size on GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset, OutName) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset::OutName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset, ReturnValue) == 0x000020, "Member 'GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSSoftObjectPtrFromPrimaryAsset
// 0x0048 (0x0048 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 OutSoftObjectPtr;                                  // 0x0018(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset) == 0x000048, "Wrong size on GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset, OutSoftObjectPtr) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset::OutSoftObjectPtr' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset, ReturnValue) == 0x000040, "Member 'GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSStringFromPrimaryAsset
// 0x0030 (0x0030 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset) == 0x000030, "Wrong size on GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset, OutString) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset::OutString' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset, ReturnValue) == 0x000028, "Member 'GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSStructFromPrimaryAsset
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset final
{
public:
	struct FGBDummyStruct                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0004(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset) == 0x000020, "Wrong size on GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset, Value) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset::Value' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset, PrimaryAssetId) == 0x000004, "Member 'GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset, TagKey) == 0x000014, "Member 'GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset, ReturnValue) == 0x00001C, "Member 'GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSTextFromPrimaryAsset
// 0x0038 (0x0038 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset) == 0x000038, "Wrong size on GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset, TagKey) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset, OutText) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset::OutText' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset, ReturnValue) == 0x000030, "Member 'GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetBundlesToLoad
// 0x0018 (0x0018 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetBundlesToLoad final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetBundlesToLoad) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetBundlesToLoad");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetBundlesToLoad) == 0x000018, "Wrong size on GBAssetManagerFunctionLibrary_GetBundlesToLoad");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetBundlesToLoad, WorldContextObject) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetBundlesToLoad::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetBundlesToLoad, ReturnValue) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetBundlesToLoad::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetFallbackInvItemAndSkin
// 0x0050 (0x0050 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InvItemTags;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        OutItemAssetId;                                    // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        OutItemSkinId;                                     // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin) == 0x000050, "Wrong size on GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin, ProfileName) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin::ProfileName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin, InvItemTags) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin::InvItemTags' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin, OutItemAssetId) == 0x000028, "Member 'GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin::OutItemAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin, OutItemSkinId) == 0x000038, "Member 'GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin::OutItemSkinId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin, ReturnValue) == 0x000048, "Member 'GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetFirstValidInvItemSkinId
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId) == 0x000020, "Wrong size on GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId, ProfileName) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId::ProfileName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId, InvItemSkinTypeTag) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetGameplayTagContainer
// 0x0038 (0x0038 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetGameplayTagContainer final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssetDataTag;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetGameplayTagContainer) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetGameplayTagContainer");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetGameplayTagContainer) == 0x000038, "Wrong size on GBAssetManagerFunctionLibrary_GetGameplayTagContainer");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetGameplayTagContainer, PrimaryAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetGameplayTagContainer::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetGameplayTagContainer, AssetDataTag) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetGameplayTagContainer::AssetDataTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetGameplayTagContainer, ReturnValue) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetGameplayTagContainer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemAssetIds
// 0x0058 (0x0058 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemAssetIds final
{
public:
	struct FGameplayTagContainer                  InvItemTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	EGBInvItemTagsCheckType                       InvItemTagsCheckType;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ExcludeInvItemTags;                                // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                OutItemAssetIds;                                   // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemAssetIds) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemAssetIds");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemAssetIds) == 0x000058, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemAssetIds");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemAssetIds, InvItemTags) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemAssetIds::InvItemTags' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemAssetIds, InvItemTagsCheckType) == 0x000020, "Member 'GBAssetManagerFunctionLibrary_GetInvItemAssetIds::InvItemTagsCheckType' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemAssetIds, ExcludeInvItemTags) == 0x000028, "Member 'GBAssetManagerFunctionLibrary_GetInvItemAssetIds::ExcludeInvItemTags' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemAssetIds, OutItemAssetIds) == 0x000048, "Member 'GBAssetManagerFunctionLibrary_GetInvItemAssetIds::OutItemAssetIds' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinIdByTypeAndName
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName final
{
public:
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinNameTag;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName) == 0x000020, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName, InvItemSkinTypeTag) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName, InvItemSkinNameTag) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName::InvItemSkinNameTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinInfoByNameTag
// 0x001C (0x001C - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag final
{
public:
	struct FGameplayTag                           InvItemSkinNameTag;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        OutSkinAssetId;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag) == 0x00001C, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag, InvItemSkinNameTag) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag::InvItemSkinNameTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag, OutSkinAssetId) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag::OutSkinAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag, ReturnValue) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinNameTag
// 0x0018 (0x0018 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag final
{
public:
	struct FPrimaryAssetId                        InvItemSkinAssetId;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag) == 0x000018, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag, InvItemSkinAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag::InvItemSkinAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinTypeTag
// 0x0018 (0x0018 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag final
{
public:
	struct FPrimaryAssetId                        InvItemAssetId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag) == 0x000018, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag, InvItemAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag::InvItemAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemTags
// 0x0030 (0x0030 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemTags final
{
public:
	struct FPrimaryAssetId                        ItemAssetId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemTags) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemTags");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemTags) == 0x000030, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemTags");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemTags, ItemAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemTags::ItemAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemTags, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetInvItemTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemTypeTag
// 0x0018 (0x0018 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetInvItemTypeTag final
{
public:
	struct FPrimaryAssetId                        ItemAssetId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetInvItemTypeTag) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetInvItemTypeTag");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetInvItemTypeTag) == 0x000018, "Wrong size on GBAssetManagerFunctionLibrary_GetInvItemTypeTag");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemTypeTag, ItemAssetId) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetInvItemTypeTag::ItemAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetInvItemTypeTag, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetInvItemTypeTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetPrimaryAssetIdForPath
// 0x0028 (0x0028 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath final
{
public:
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath) == 0x000028, "Wrong size on GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath, ObjectPath) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath::ObjectPath' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath, ReturnValue) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetSimilarInvItemSkinId
// 0x0048 (0x0048 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinNameTag;                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SubstituteInvItemSkinNameTags;                     // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId) == 0x000048, "Wrong size on GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId, ProfileName) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId::ProfileName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId, InvItemSkinTypeTag) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId, InvItemSkinNameTag) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId::InvItemSkinNameTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId, SubstituteInvItemSkinNameTags) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId::SubstituteInvItemSkinNameTags' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId, ReturnValue) == 0x000038, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetSimilarInvItemSkinIdToExisting
// 0x0030 (0x0030 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ExistingInvItemSkinId;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting) == 0x000030, "Wrong size on GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting, ProfileName) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting::ProfileName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting, InvItemSkinTypeTag) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting, ExistingInvItemSkinId) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting::ExistingInvItemSkinId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting, ReturnValue) == 0x000020, "Member 'GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetSubstituteInvItemSkinNameTags
// 0x0028 (0x0028 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags final
{
public:
	struct FGameplayTag                           InvItemSkinNameTag;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags) == 0x000028, "Wrong size on GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags, InvItemSkinNameTag) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags::InvItemSkinNameTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags, ReturnValue) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.GetValidInvItemSkinIds
// 0x0020 (0x0020 - 0x0000)
struct GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds");
static_assert(sizeof(GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds) == 0x000020, "Wrong size on GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds, ProfileName) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds::ProfileName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds, InvItemSkinTypeTag) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds, ReturnValue) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.HasInvItemSkins
// 0x000C (0x000C - 0x0000)
struct GBAssetManagerFunctionLibrary_HasInvItemSkins final
{
public:
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_HasInvItemSkins) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_HasInvItemSkins");
static_assert(sizeof(GBAssetManagerFunctionLibrary_HasInvItemSkins) == 0x00000C, "Wrong size on GBAssetManagerFunctionLibrary_HasInvItemSkins");
static_assert(offsetof(GBAssetManagerFunctionLibrary_HasInvItemSkins, InvItemSkinTypeTag) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_HasInvItemSkins::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_HasInvItemSkins, ReturnValue) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_HasInvItemSkins::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.Map_GetARSFromPrimaryAsset
// 0x0070 (0x0070 - 0x0000)
struct GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset final
{
public:
	TMap<int32, int32>                            TargetMap;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagKey;                                            // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset) == 0x000070, "Wrong size on GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset, TargetMap) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset::TargetMap' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset, PrimaryAssetId) == 0x000050, "Member 'GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset, TagKey) == 0x000060, "Member 'GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset::TagKey' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset, ReturnValue) == 0x000068, "Member 'GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.RestrictedPrimaryAsset
// 0x001C (0x001C - 0x0000)
struct GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset) == 0x000004, "Wrong alignment on GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset");
static_assert(sizeof(GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset) == 0x00001C, "Wrong size on GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset");
static_assert(offsetof(GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset, ProfileName) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset::ProfileName' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset, PrimaryAssetId) == 0x000008, "Member 'GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset, ReturnValue) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBAssetManagerFunctionLibrary.SortPrimaryAssetIdList
// 0x0028 (0x0028 - 0x0000)
struct GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList final
{
public:
	TArray<struct FPrimaryAssetId>                InPrimaryAssetIdList;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SortTag;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                OutPrimaryAssetIdList;                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList) == 0x000008, "Wrong alignment on GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList");
static_assert(sizeof(GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList) == 0x000028, "Wrong size on GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList");
static_assert(offsetof(GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList, InPrimaryAssetIdList) == 0x000000, "Member 'GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList::InPrimaryAssetIdList' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList, SortTag) == 0x000010, "Member 'GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList::SortTag' has a wrong offset!");
static_assert(offsetof(GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList, OutPrimaryAssetIdList) == 0x000018, "Member 'GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList::OutPrimaryAssetIdList' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.SetMuzzleDevice
// 0x0008 (0x0008 - 0x0000)
struct GBBarrelComponent_SetMuzzleDevice final
{
public:
	class AGBMuzzleDevice*                        NewMuzzleDevice;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_SetMuzzleDevice) == 0x000008, "Wrong alignment on GBBarrelComponent_SetMuzzleDevice");
static_assert(sizeof(GBBarrelComponent_SetMuzzleDevice) == 0x000008, "Wrong size on GBBarrelComponent_SetMuzzleDevice");
static_assert(offsetof(GBBarrelComponent_SetMuzzleDevice, NewMuzzleDevice) == 0x000000, "Member 'GBBarrelComponent_SetMuzzleDevice::NewMuzzleDevice' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.SetVelocityModifier
// 0x0004 (0x0004 - 0x0000)
struct GBBarrelComponent_SetVelocityModifier final
{
public:
	float                                         NewVelocityModifier;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_SetVelocityModifier) == 0x000004, "Wrong alignment on GBBarrelComponent_SetVelocityModifier");
static_assert(sizeof(GBBarrelComponent_SetVelocityModifier) == 0x000004, "Wrong size on GBBarrelComponent_SetVelocityModifier");
static_assert(offsetof(GBBarrelComponent_SetVelocityModifier, NewVelocityModifier) == 0x000000, "Member 'GBBarrelComponent_SetVelocityModifier::NewVelocityModifier' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.SpawnBulletProjectile
// 0x0010 (0x0010 - 0x0000)
struct GBBarrelComponent_SpawnBulletProjectile final
{
public:
	TSubclassOf<class AGBBulletProjectile>        BulletProjectileClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBBulletProjectile*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_SpawnBulletProjectile) == 0x000008, "Wrong alignment on GBBarrelComponent_SpawnBulletProjectile");
static_assert(sizeof(GBBarrelComponent_SpawnBulletProjectile) == 0x000010, "Wrong size on GBBarrelComponent_SpawnBulletProjectile");
static_assert(offsetof(GBBarrelComponent_SpawnBulletProjectile, BulletProjectileClass) == 0x000000, "Member 'GBBarrelComponent_SpawnBulletProjectile::BulletProjectileClass' has a wrong offset!");
static_assert(offsetof(GBBarrelComponent_SpawnBulletProjectile, ReturnValue) == 0x000008, "Member 'GBBarrelComponent_SpawnBulletProjectile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.GetAudioSignalRadius
// 0x0004 (0x0004 - 0x0000)
struct GBBarrelComponent_GetAudioSignalRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_GetAudioSignalRadius) == 0x000004, "Wrong alignment on GBBarrelComponent_GetAudioSignalRadius");
static_assert(sizeof(GBBarrelComponent_GetAudioSignalRadius) == 0x000004, "Wrong size on GBBarrelComponent_GetAudioSignalRadius");
static_assert(offsetof(GBBarrelComponent_GetAudioSignalRadius, ReturnValue) == 0x000000, "Member 'GBBarrelComponent_GetAudioSignalRadius::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.GetMuzzleDevice
// 0x0008 (0x0008 - 0x0000)
struct GBBarrelComponent_GetMuzzleDevice final
{
public:
	class AGBMuzzleDevice*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_GetMuzzleDevice) == 0x000008, "Wrong alignment on GBBarrelComponent_GetMuzzleDevice");
static_assert(sizeof(GBBarrelComponent_GetMuzzleDevice) == 0x000008, "Wrong size on GBBarrelComponent_GetMuzzleDevice");
static_assert(offsetof(GBBarrelComponent_GetMuzzleDevice, ReturnValue) == 0x000000, "Member 'GBBarrelComponent_GetMuzzleDevice::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.GetSuppressorSwitchValue
// 0x0008 (0x0008 - 0x0000)
struct GBBarrelComponent_GetSuppressorSwitchValue final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_GetSuppressorSwitchValue) == 0x000004, "Wrong alignment on GBBarrelComponent_GetSuppressorSwitchValue");
static_assert(sizeof(GBBarrelComponent_GetSuppressorSwitchValue) == 0x000008, "Wrong size on GBBarrelComponent_GetSuppressorSwitchValue");
static_assert(offsetof(GBBarrelComponent_GetSuppressorSwitchValue, ReturnValue) == 0x000000, "Member 'GBBarrelComponent_GetSuppressorSwitchValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBarrelComponent.GetVelocityModifier
// 0x0004 (0x0004 - 0x0000)
struct GBBarrelComponent_GetVelocityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBarrelComponent_GetVelocityModifier) == 0x000004, "Wrong alignment on GBBarrelComponent_GetVelocityModifier");
static_assert(sizeof(GBBarrelComponent_GetVelocityModifier) == 0x000004, "Wrong size on GBBarrelComponent_GetVelocityModifier");
static_assert(offsetof(GBBarrelComponent_GetVelocityModifier, ReturnValue) == 0x000000, "Member 'GBBarrelComponent_GetVelocityModifier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.FadeIn
// 0x0004 (0x0004 - 0x0000)
struct GBBenchmarker_FadeIn final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_FadeIn) == 0x000004, "Wrong alignment on GBBenchmarker_FadeIn");
static_assert(sizeof(GBBenchmarker_FadeIn) == 0x000004, "Wrong size on GBBenchmarker_FadeIn");
static_assert(offsetof(GBBenchmarker_FadeIn, FadeTime) == 0x000000, "Member 'GBBenchmarker_FadeIn::FadeTime' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.FadeInAndOut
// 0x0004 (0x0004 - 0x0000)
struct GBBenchmarker_FadeInAndOut final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_FadeInAndOut) == 0x000004, "Wrong alignment on GBBenchmarker_FadeInAndOut");
static_assert(sizeof(GBBenchmarker_FadeInAndOut) == 0x000004, "Wrong size on GBBenchmarker_FadeInAndOut");
static_assert(offsetof(GBBenchmarker_FadeInAndOut, FadeTime) == 0x000000, "Member 'GBBenchmarker_FadeInAndOut::FadeTime' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.FadeOut
// 0x0004 (0x0004 - 0x0000)
struct GBBenchmarker_FadeOut final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_FadeOut) == 0x000004, "Wrong alignment on GBBenchmarker_FadeOut");
static_assert(sizeof(GBBenchmarker_FadeOut) == 0x000004, "Wrong size on GBBenchmarker_FadeOut");
static_assert(offsetof(GBBenchmarker_FadeOut, FadeTime) == 0x000000, "Member 'GBBenchmarker_FadeOut::FadeTime' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.GetDirectory
// 0x0010 (0x0010 - 0x0000)
struct GBBenchmarker_GetDirectory final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_GetDirectory) == 0x000008, "Wrong alignment on GBBenchmarker_GetDirectory");
static_assert(sizeof(GBBenchmarker_GetDirectory) == 0x000010, "Wrong size on GBBenchmarker_GetDirectory");
static_assert(offsetof(GBBenchmarker_GetDirectory, ReturnValue) == 0x000000, "Member 'GBBenchmarker_GetDirectory::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.GetTemplatesFolder
// 0x0010 (0x0010 - 0x0000)
struct GBBenchmarker_GetTemplatesFolder final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_GetTemplatesFolder) == 0x000008, "Wrong alignment on GBBenchmarker_GetTemplatesFolder");
static_assert(sizeof(GBBenchmarker_GetTemplatesFolder) == 0x000010, "Wrong size on GBBenchmarker_GetTemplatesFolder");
static_assert(offsetof(GBBenchmarker_GetTemplatesFolder, ReturnValue) == 0x000000, "Member 'GBBenchmarker_GetTemplatesFolder::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.IsBenchmarking
// 0x0001 (0x0001 - 0x0000)
struct GBBenchmarker_IsBenchmarking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_IsBenchmarking) == 0x000001, "Wrong alignment on GBBenchmarker_IsBenchmarking");
static_assert(sizeof(GBBenchmarker_IsBenchmarking) == 0x000001, "Wrong size on GBBenchmarker_IsBenchmarking");
static_assert(offsetof(GBBenchmarker_IsBenchmarking, ReturnValue) == 0x000000, "Member 'GBBenchmarker_IsBenchmarking::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBBenchmarker.IsBenchmarkPreparing
// 0x0001 (0x0001 - 0x0000)
struct GBBenchmarker_IsBenchmarkPreparing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBBenchmarker_IsBenchmarkPreparing) == 0x000001, "Wrong alignment on GBBenchmarker_IsBenchmarkPreparing");
static_assert(sizeof(GBBenchmarker_IsBenchmarkPreparing) == 0x000001, "Wrong size on GBBenchmarker_IsBenchmarkPreparing");
static_assert(offsetof(GBBenchmarker_IsBenchmarkPreparing, ReturnValue) == 0x000000, "Member 'GBBenchmarker_IsBenchmarkPreparing::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCharAnimInstanceLayer.GetMontageFromLinkedLayer
// 0x0010 (0x0010 - 0x0000)
struct GBCharAnimInstanceLayer_GetMontageFromLinkedLayer final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCharAnimInstanceLayer_GetMontageFromLinkedLayer) == 0x000008, "Wrong alignment on GBCharAnimInstanceLayer_GetMontageFromLinkedLayer");
static_assert(sizeof(GBCharAnimInstanceLayer_GetMontageFromLinkedLayer) == 0x000010, "Wrong size on GBCharAnimInstanceLayer_GetMontageFromLinkedLayer");
static_assert(offsetof(GBCharAnimInstanceLayer_GetMontageFromLinkedLayer, MontageName) == 0x000000, "Member 'GBCharAnimInstanceLayer_GetMontageFromLinkedLayer::MontageName' has a wrong offset!");
static_assert(offsetof(GBCharAnimInstanceLayer_GetMontageFromLinkedLayer, ReturnValue) == 0x000008, "Member 'GBCharAnimInstanceLayer_GetMontageFromLinkedLayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerControllerBase.AddFullScreenWidget
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerControllerBase_AddFullScreenWidget final
{
public:
	class UUserWidget*                            FullScreenWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerControllerBase_AddFullScreenWidget) == 0x000008, "Wrong alignment on GBPlayerControllerBase_AddFullScreenWidget");
static_assert(sizeof(GBPlayerControllerBase_AddFullScreenWidget) == 0x000010, "Wrong size on GBPlayerControllerBase_AddFullScreenWidget");
static_assert(offsetof(GBPlayerControllerBase_AddFullScreenWidget, FullScreenWidget) == 0x000000, "Member 'GBPlayerControllerBase_AddFullScreenWidget::FullScreenWidget' has a wrong offset!");
static_assert(offsetof(GBPlayerControllerBase_AddFullScreenWidget, Priority) == 0x000008, "Member 'GBPlayerControllerBase_AddFullScreenWidget::Priority' has a wrong offset!");

// Function GroundBranch.GBPlayerControllerBase.ApplyPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerControllerBase_ApplyPlayerSettings final
{
public:
	class UGBPlayerSettings*                      PlayerSettings;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerControllerBase_ApplyPlayerSettings) == 0x000008, "Wrong alignment on GBPlayerControllerBase_ApplyPlayerSettings");
static_assert(sizeof(GBPlayerControllerBase_ApplyPlayerSettings) == 0x000008, "Wrong size on GBPlayerControllerBase_ApplyPlayerSettings");
static_assert(offsetof(GBPlayerControllerBase_ApplyPlayerSettings, PlayerSettings) == 0x000000, "Member 'GBPlayerControllerBase_ApplyPlayerSettings::PlayerSettings' has a wrong offset!");

// Function GroundBranch.GBPlayerControllerBase.GBClientSeamlessTravel
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerControllerBase_GBClientSeamlessTravel final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerControllerBase_GBClientSeamlessTravel) == 0x000008, "Wrong alignment on GBPlayerControllerBase_GBClientSeamlessTravel");
static_assert(sizeof(GBPlayerControllerBase_GBClientSeamlessTravel) == 0x000010, "Wrong size on GBPlayerControllerBase_GBClientSeamlessTravel");
static_assert(offsetof(GBPlayerControllerBase_GBClientSeamlessTravel, URL) == 0x000000, "Member 'GBPlayerControllerBase_GBClientSeamlessTravel::URL' has a wrong offset!");

// Function GroundBranch.GBPlayerControllerBase.RemoveFullScreenWidget
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerControllerBase_RemoveFullScreenWidget final
{
public:
	class UUserWidget*                            FullScreenWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerControllerBase_RemoveFullScreenWidget) == 0x000008, "Wrong alignment on GBPlayerControllerBase_RemoveFullScreenWidget");
static_assert(sizeof(GBPlayerControllerBase_RemoveFullScreenWidget) == 0x000008, "Wrong size on GBPlayerControllerBase_RemoveFullScreenWidget");
static_assert(offsetof(GBPlayerControllerBase_RemoveFullScreenWidget, FullScreenWidget) == 0x000000, "Member 'GBPlayerControllerBase_RemoveFullScreenWidget::FullScreenWidget' has a wrong offset!");

// Function GroundBranch.GBPlayerControllerBase.GetPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerControllerBase_GetPlayerSettings final
{
public:
	class UGBPlayerSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerControllerBase_GetPlayerSettings) == 0x000008, "Wrong alignment on GBPlayerControllerBase_GetPlayerSettings");
static_assert(sizeof(GBPlayerControllerBase_GetPlayerSettings) == 0x000008, "Wrong size on GBPlayerControllerBase_GetPlayerSettings");
static_assert(offsetof(GBPlayerControllerBase_GetPlayerSettings, ReturnValue) == 0x000000, "Member 'GBPlayerControllerBase_GetPlayerSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.AddLocalPlayerTag
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_AddLocalPlayerTag final
{
public:
	class FName                                   LocalPlayerTag;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_AddLocalPlayerTag) == 0x000004, "Wrong alignment on GBPlayerController_AddLocalPlayerTag");
static_assert(sizeof(GBPlayerController_AddLocalPlayerTag) == 0x000008, "Wrong size on GBPlayerController_AddLocalPlayerTag");
static_assert(offsetof(GBPlayerController_AddLocalPlayerTag, LocalPlayerTag) == 0x000000, "Member 'GBPlayerController_AddLocalPlayerTag::LocalPlayerTag' has a wrong offset!");

// Function GroundBranch.GBPlayerController.AddOverrideInputWidget
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_AddOverrideInputWidget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_AddOverrideInputWidget) == 0x000008, "Wrong alignment on GBPlayerController_AddOverrideInputWidget");
static_assert(sizeof(GBPlayerController_AddOverrideInputWidget) == 0x000008, "Wrong size on GBPlayerController_AddOverrideInputWidget");
static_assert(offsetof(GBPlayerController_AddOverrideInputWidget, UserWidget) == 0x000000, "Member 'GBPlayerController_AddOverrideInputWidget::UserWidget' has a wrong offset!");

// Function GroundBranch.GBPlayerController.Admin
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_Admin final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_Admin) == 0x000008, "Wrong alignment on GBPlayerController_Admin");
static_assert(sizeof(GBPlayerController_Admin) == 0x000010, "Wrong size on GBPlayerController_Admin");
static_assert(offsetof(GBPlayerController_Admin, Parameters) == 0x000000, "Member 'GBPlayerController_Admin::Parameters' has a wrong offset!");

// Function GroundBranch.GBPlayerController.AdminRequest
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_AdminRequest final
{
public:
	class FName                                   RequestType;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FZKReplicatedContent& Content)> OnAdminRequestFilled;                // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_AdminRequest) == 0x000004, "Wrong alignment on GBPlayerController_AdminRequest");
static_assert(sizeof(GBPlayerController_AdminRequest) == 0x000018, "Wrong size on GBPlayerController_AdminRequest");
static_assert(offsetof(GBPlayerController_AdminRequest, RequestType) == 0x000000, "Member 'GBPlayerController_AdminRequest::RequestType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_AdminRequest, OnAdminRequestFilled) == 0x000008, "Member 'GBPlayerController_AdminRequest::OnAdminRequestFilled' has a wrong offset!");

// Function GroundBranch.GBPlayerController.AdminSet
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_AdminSet final
{
public:
	struct FZKReplicatedContent                   Content;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_AdminSet) == 0x000008, "Wrong alignment on GBPlayerController_AdminSet");
static_assert(sizeof(GBPlayerController_AdminSet) == 0x000018, "Wrong size on GBPlayerController_AdminSet");
static_assert(offsetof(GBPlayerController_AdminSet, Content) == 0x000000, "Member 'GBPlayerController_AdminSet::Content' has a wrong offset!");

// Function GroundBranch.GBPlayerController.BP_IsFrozen
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_BP_IsFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_BP_IsFrozen) == 0x000001, "Wrong alignment on GBPlayerController_BP_IsFrozen");
static_assert(sizeof(GBPlayerController_BP_IsFrozen) == 0x000001, "Wrong size on GBPlayerController_BP_IsFrozen");
static_assert(offsetof(GBPlayerController_BP_IsFrozen, ReturnValue) == 0x000000, "Member 'GBPlayerController_BP_IsFrozen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.BulletWarn
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_BulletWarn final
{
public:
	class AActor*                                 Bullet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubSonic;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_BulletWarn) == 0x000008, "Wrong alignment on GBPlayerController_BulletWarn");
static_assert(sizeof(GBPlayerController_BulletWarn) == 0x000010, "Wrong size on GBPlayerController_BulletWarn");
static_assert(offsetof(GBPlayerController_BulletWarn, Bullet) == 0x000000, "Member 'GBPlayerController_BulletWarn::Bullet' has a wrong offset!");
static_assert(offsetof(GBPlayerController_BulletWarn, bSubSonic) == 0x000008, "Member 'GBPlayerController_BulletWarn::bSubSonic' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientAdminReply
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ClientAdminReply final
{
public:
	struct FZKReplicatedContent                   Content;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientAdminReply) == 0x000008, "Wrong alignment on GBPlayerController_ClientAdminReply");
static_assert(sizeof(GBPlayerController_ClientAdminReply) == 0x000018, "Wrong size on GBPlayerController_ClientAdminReply");
static_assert(offsetof(GBPlayerController_ClientAdminReply, Content) == 0x000000, "Member 'GBPlayerController_ClientAdminReply::Content' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientAFKPrompt
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_ClientAFKPrompt final
{
public:
	float                                         ReponseTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientAFKPrompt) == 0x000004, "Wrong alignment on GBPlayerController_ClientAFKPrompt");
static_assert(sizeof(GBPlayerController_ClientAFKPrompt) == 0x000004, "Wrong size on GBPlayerController_ClientAFKPrompt");
static_assert(offsetof(GBPlayerController_ClientAFKPrompt, ReponseTime) == 0x000000, "Member 'GBPlayerController_ClientAFKPrompt::ReponseTime' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientBecameSpectator
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ClientBecameSpectator final
{
public:
	struct FVector                                NewSpectatorLocation;                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewSpectatorRotation;                              // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientBecameSpectator) == 0x000004, "Wrong alignment on GBPlayerController_ClientBecameSpectator");
static_assert(sizeof(GBPlayerController_ClientBecameSpectator) == 0x000018, "Wrong size on GBPlayerController_ClientBecameSpectator");
static_assert(offsetof(GBPlayerController_ClientBecameSpectator, NewSpectatorLocation) == 0x000000, "Member 'GBPlayerController_ClientBecameSpectator::NewSpectatorLocation' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientBecameSpectator, NewSpectatorRotation) == 0x00000C, "Member 'GBPlayerController_ClientBecameSpectator::NewSpectatorRotation' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientGameMessage
// 0x0020 (0x0020 - 0x0000)
struct GBPlayerController_ClientGameMessage final
{
public:
	class FName                                   GameMessageId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientGameMessage) == 0x000008, "Wrong alignment on GBPlayerController_ClientGameMessage");
static_assert(sizeof(GBPlayerController_ClientGameMessage) == 0x000020, "Wrong size on GBPlayerController_ClientGameMessage");
static_assert(offsetof(GBPlayerController_ClientGameMessage, GameMessageId) == 0x000000, "Member 'GBPlayerController_ClientGameMessage::GameMessageId' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientGameMessage, Type) == 0x000008, "Member 'GBPlayerController_ClientGameMessage::Type' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientGameMessage, Duration) == 0x000010, "Member 'GBPlayerController_ClientGameMessage::Duration' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientGameMessage, ModID) == 0x000018, "Member 'GBPlayerController_ClientGameMessage::ModID' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientMissionObjectiveStatusUpdate
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ClientMissionObjectiveStatusUpdate final
{
public:
	EGBMissionObjectiveStatusUpdateType           StatusUpdateType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ClientMissionObjectiveStatusUpdate) == 0x000008, "Wrong alignment on GBPlayerController_ClientMissionObjectiveStatusUpdate");
static_assert(sizeof(GBPlayerController_ClientMissionObjectiveStatusUpdate) == 0x000018, "Wrong size on GBPlayerController_ClientMissionObjectiveStatusUpdate");
static_assert(offsetof(GBPlayerController_ClientMissionObjectiveStatusUpdate, StatusUpdateType) == 0x000000, "Member 'GBPlayerController_ClientMissionObjectiveStatusUpdate::StatusUpdateType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientMissionObjectiveStatusUpdate, MissionObjective) == 0x000008, "Member 'GBPlayerController_ClientMissionObjectiveStatusUpdate::MissionObjective' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientMissionObjectiveStatusUpdate, FloatParam) == 0x000010, "Member 'GBPlayerController_ClientMissionObjectiveStatusUpdate::FloatParam' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientPlaySequence
// 0x0030 (0x0030 - 0x0000)
struct GBPlayerController_ClientPlaySequence final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     SequenceRef;                                       // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GBSequencePlayFlags;                               // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ClientPlaySequence) == 0x000008, "Wrong alignment on GBPlayerController_ClientPlaySequence");
static_assert(sizeof(GBPlayerController_ClientPlaySequence) == 0x000030, "Wrong size on GBPlayerController_ClientPlaySequence");
static_assert(offsetof(GBPlayerController_ClientPlaySequence, SequenceRef) == 0x000000, "Member 'GBPlayerController_ClientPlaySequence::SequenceRef' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientPlaySequence, GBSequencePlayFlags) == 0x000028, "Member 'GBPlayerController_ClientPlaySequence::GBSequencePlayFlags' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientSendPlayerCharVoice
// 0x0028 (0x0028 - 0x0000)
struct GBPlayerController_ClientSendPlayerCharVoice final
{
public:
	class AGBPlayerState*                         SenderPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        SenderCharVoiceDataId;                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadio;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ClientSendPlayerCharVoice) == 0x000008, "Wrong alignment on GBPlayerController_ClientSendPlayerCharVoice");
static_assert(sizeof(GBPlayerController_ClientSendPlayerCharVoice) == 0x000028, "Wrong size on GBPlayerController_ClientSendPlayerCharVoice");
static_assert(offsetof(GBPlayerController_ClientSendPlayerCharVoice, SenderPlayerState) == 0x000000, "Member 'GBPlayerController_ClientSendPlayerCharVoice::SenderPlayerState' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientSendPlayerCharVoice, SenderCharVoiceDataId) == 0x000008, "Member 'GBPlayerController_ClientSendPlayerCharVoice::SenderCharVoiceDataId' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientSendPlayerCharVoice, Key) == 0x000018, "Member 'GBPlayerController_ClientSendPlayerCharVoice::Key' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientSendPlayerCharVoice, bIsRadio) == 0x000020, "Member 'GBPlayerController_ClientSendPlayerCharVoice::bIsRadio' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientShowMenu
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ClientShowMenu final
{
public:
	struct FSoftClassPath                         MenuClassName;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientShowMenu) == 0x000008, "Wrong alignment on GBPlayerController_ClientShowMenu");
static_assert(sizeof(GBPlayerController_ClientShowMenu) == 0x000018, "Wrong size on GBPlayerController_ClientShowMenu");
static_assert(offsetof(GBPlayerController_ClientShowMenu, MenuClassName) == 0x000000, "Member 'GBPlayerController_ClientShowMenu::MenuClassName' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientShowWorldPrompt
// 0x0020 (0x0020 - 0x0000)
struct GBPlayerController_ClientShowWorldPrompt final
{
public:
	struct FVector                                PromptLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientShowWorldPrompt) == 0x000008, "Wrong alignment on GBPlayerController_ClientShowWorldPrompt");
static_assert(sizeof(GBPlayerController_ClientShowWorldPrompt) == 0x000020, "Wrong size on GBPlayerController_ClientShowWorldPrompt");
static_assert(offsetof(GBPlayerController_ClientShowWorldPrompt, PromptLocation) == 0x000000, "Member 'GBPlayerController_ClientShowWorldPrompt::PromptLocation' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientShowWorldPrompt, Tag) == 0x00000C, "Member 'GBPlayerController_ClientShowWorldPrompt::Tag' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientShowWorldPrompt, Duration) == 0x000014, "Member 'GBPlayerController_ClientShowWorldPrompt::Duration' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientShowWorldPrompt, ModID) == 0x000018, "Member 'GBPlayerController_ClientShowWorldPrompt::ModID' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientStopSequencePlayback
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_ClientStopSequencePlayback final
{
public:
	bool                                          bSuppressBlackOutAfter;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientStopSequencePlayback) == 0x000001, "Wrong alignment on GBPlayerController_ClientStopSequencePlayback");
static_assert(sizeof(GBPlayerController_ClientStopSequencePlayback) == 0x000001, "Wrong size on GBPlayerController_ClientStopSequencePlayback");
static_assert(offsetof(GBPlayerController_ClientStopSequencePlayback, bSuppressBlackOutAfter) == 0x000000, "Member 'GBPlayerController_ClientStopSequencePlayback::bSuppressBlackOutAfter' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientTeamKilledNotify
// 0x0028 (0x0028 - 0x0000)
struct GBPlayerController_ClientTeamKilledNotify final
{
public:
	class FString                                 TeamKillerUniqueId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamKillerPlayerName;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevKills;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ClientTeamKilledNotify) == 0x000008, "Wrong alignment on GBPlayerController_ClientTeamKilledNotify");
static_assert(sizeof(GBPlayerController_ClientTeamKilledNotify) == 0x000028, "Wrong size on GBPlayerController_ClientTeamKilledNotify");
static_assert(offsetof(GBPlayerController_ClientTeamKilledNotify, TeamKillerUniqueId) == 0x000000, "Member 'GBPlayerController_ClientTeamKilledNotify::TeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientTeamKilledNotify, TeamKillerPlayerName) == 0x000010, "Member 'GBPlayerController_ClientTeamKilledNotify::TeamKillerPlayerName' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ClientTeamKilledNotify, PrevKills) == 0x000020, "Member 'GBPlayerController_ClientTeamKilledNotify::PrevKills' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ClientTeamKillWarn
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ClientTeamKillWarn final
{
public:
	TArray<class APlayerState*>                   NewTeamKillVictims;                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ClientTeamKillWarn) == 0x000008, "Wrong alignment on GBPlayerController_ClientTeamKillWarn");
static_assert(sizeof(GBPlayerController_ClientTeamKillWarn) == 0x000010, "Wrong size on GBPlayerController_ClientTeamKillWarn");
static_assert(offsetof(GBPlayerController_ClientTeamKillWarn, NewTeamKillVictims) == 0x000000, "Member 'GBPlayerController_ClientTeamKillWarn::NewTeamKillVictims' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetFailedKitValidationInfo
// 0x0070 (0x0070 - 0x0000)
struct GBPlayerController_GetFailedKitValidationInfo final
{
public:
	class FName                                   LoadoutName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBKitValidationInfo                   OutKitValidationInfo;                              // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_GetFailedKitValidationInfo) == 0x000008, "Wrong alignment on GBPlayerController_GetFailedKitValidationInfo");
static_assert(sizeof(GBPlayerController_GetFailedKitValidationInfo) == 0x000070, "Wrong size on GBPlayerController_GetFailedKitValidationInfo");
static_assert(offsetof(GBPlayerController_GetFailedKitValidationInfo, LoadoutName) == 0x000000, "Member 'GBPlayerController_GetFailedKitValidationInfo::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetFailedKitValidationInfo, OutKitValidationInfo) == 0x000008, "Member 'GBPlayerController_GetFailedKitValidationInfo::OutKitValidationInfo' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetFailedKitValidationInfo, ReturnValue) == 0x000068, "Member 'GBPlayerController_GetFailedKitValidationInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetLastTeamKillerInfo
// 0x0028 (0x0028 - 0x0000)
struct GBPlayerController_GetLastTeamKillerInfo final
{
public:
	class FString                                 OutLastTeamKillerUniqueId;                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutLastTeamKillerPlayerName;                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLastTeamKillerPrevKills;                        // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_GetLastTeamKillerInfo) == 0x000008, "Wrong alignment on GBPlayerController_GetLastTeamKillerInfo");
static_assert(sizeof(GBPlayerController_GetLastTeamKillerInfo) == 0x000028, "Wrong size on GBPlayerController_GetLastTeamKillerInfo");
static_assert(offsetof(GBPlayerController_GetLastTeamKillerInfo, OutLastTeamKillerUniqueId) == 0x000000, "Member 'GBPlayerController_GetLastTeamKillerInfo::OutLastTeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetLastTeamKillerInfo, OutLastTeamKillerPlayerName) == 0x000010, "Member 'GBPlayerController_GetLastTeamKillerInfo::OutLastTeamKillerPlayerName' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetLastTeamKillerInfo, OutLastTeamKillerPrevKills) == 0x000020, "Member 'GBPlayerController_GetLastTeamKillerInfo::OutLastTeamKillerPrevKills' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetLastTeamKillerInfo, ReturnValue) == 0x000024, "Member 'GBPlayerController_GetLastTeamKillerInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetOverrideInputWidget
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_GetOverrideInputWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetOverrideInputWidget) == 0x000008, "Wrong alignment on GBPlayerController_GetOverrideInputWidget");
static_assert(sizeof(GBPlayerController_GetOverrideInputWidget) == 0x000008, "Wrong size on GBPlayerController_GetOverrideInputWidget");
static_assert(offsetof(GBPlayerController_GetOverrideInputWidget, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetOverrideInputWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.HandleCommunicationKey
// 0x0020 (0x0020 - 0x0000)
struct GBPlayerController_HandleCommunicationKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_HandleCommunicationKey) == 0x000008, "Wrong alignment on GBPlayerController_HandleCommunicationKey");
static_assert(sizeof(GBPlayerController_HandleCommunicationKey) == 0x000020, "Wrong size on GBPlayerController_HandleCommunicationKey");
static_assert(offsetof(GBPlayerController_HandleCommunicationKey, Key) == 0x000000, "Member 'GBPlayerController_HandleCommunicationKey::Key' has a wrong offset!");
static_assert(offsetof(GBPlayerController_HandleCommunicationKey, bPressed) == 0x000018, "Member 'GBPlayerController_HandleCommunicationKey::bPressed' has a wrong offset!");
static_assert(offsetof(GBPlayerController_HandleCommunicationKey, ReturnValue) == 0x000019, "Member 'GBPlayerController_HandleCommunicationKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.HideTransitionScreenEvent
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_HideTransitionScreenEvent final
{
public:
	class UUserWidget*                            LoadingScreenUserWidget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_HideTransitionScreenEvent) == 0x000008, "Wrong alignment on GBPlayerController_HideTransitionScreenEvent");
static_assert(sizeof(GBPlayerController_HideTransitionScreenEvent) == 0x000008, "Wrong size on GBPlayerController_HideTransitionScreenEvent");
static_assert(offsetof(GBPlayerController_HideTransitionScreenEvent, LoadingScreenUserWidget) == 0x000000, "Member 'GBPlayerController_HideTransitionScreenEvent::LoadingScreenUserWidget' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsSequencePlaying
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsSequencePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsSequencePlaying) == 0x000001, "Wrong alignment on GBPlayerController_IsSequencePlaying");
static_assert(sizeof(GBPlayerController_IsSequencePlaying) == 0x000001, "Wrong size on GBPlayerController_IsSequencePlaying");
static_assert(offsetof(GBPlayerController_IsSequencePlaying, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsSequencePlaying::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.LocalMissionObjectiveStatusUpdate
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_LocalMissionObjectiveStatusUpdate final
{
public:
	EGBMissionObjectiveStatusUpdateType           StatusUpdateType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_LocalMissionObjectiveStatusUpdate) == 0x000008, "Wrong alignment on GBPlayerController_LocalMissionObjectiveStatusUpdate");
static_assert(sizeof(GBPlayerController_LocalMissionObjectiveStatusUpdate) == 0x000018, "Wrong size on GBPlayerController_LocalMissionObjectiveStatusUpdate");
static_assert(offsetof(GBPlayerController_LocalMissionObjectiveStatusUpdate, StatusUpdateType) == 0x000000, "Member 'GBPlayerController_LocalMissionObjectiveStatusUpdate::StatusUpdateType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_LocalMissionObjectiveStatusUpdate, MissionObjective) == 0x000008, "Member 'GBPlayerController_LocalMissionObjectiveStatusUpdate::MissionObjective' has a wrong offset!");
static_assert(offsetof(GBPlayerController_LocalMissionObjectiveStatusUpdate, FloatParam) == 0x000010, "Member 'GBPlayerController_LocalMissionObjectiveStatusUpdate::FloatParam' has a wrong offset!");

// Function GroundBranch.GBPlayerController.Mute
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_Mute final
{
public:
	class APlayerState*                           TargetPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_Mute) == 0x000008, "Wrong alignment on GBPlayerController_Mute");
static_assert(sizeof(GBPlayerController_Mute) == 0x000008, "Wrong size on GBPlayerController_Mute");
static_assert(offsetof(GBPlayerController_Mute, TargetPlayerState) == 0x000000, "Member 'GBPlayerController_Mute::TargetPlayerState' has a wrong offset!");

// Function GroundBranch.GBPlayerController.NotifyMovementImpulse
// 0x000C (0x000C - 0x0000)
struct GBPlayerController_NotifyMovementImpulse final
{
public:
	float                                         ImpulseX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseDecayRate;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_NotifyMovementImpulse) == 0x000004, "Wrong alignment on GBPlayerController_NotifyMovementImpulse");
static_assert(sizeof(GBPlayerController_NotifyMovementImpulse) == 0x00000C, "Wrong size on GBPlayerController_NotifyMovementImpulse");
static_assert(offsetof(GBPlayerController_NotifyMovementImpulse, ImpulseX) == 0x000000, "Member 'GBPlayerController_NotifyMovementImpulse::ImpulseX' has a wrong offset!");
static_assert(offsetof(GBPlayerController_NotifyMovementImpulse, ImpulseY) == 0x000004, "Member 'GBPlayerController_NotifyMovementImpulse::ImpulseY' has a wrong offset!");
static_assert(offsetof(GBPlayerController_NotifyMovementImpulse, ImpulseDecayRate) == 0x000008, "Member 'GBPlayerController_NotifyMovementImpulse::ImpulseDecayRate' has a wrong offset!");

// Function GroundBranch.GBPlayerController.OnAFKPromptEvent
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_OnAFKPromptEvent final
{
public:
	float                                         ReponseTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_OnAFKPromptEvent) == 0x000004, "Wrong alignment on GBPlayerController_OnAFKPromptEvent");
static_assert(sizeof(GBPlayerController_OnAFKPromptEvent) == 0x000004, "Wrong size on GBPlayerController_OnAFKPromptEvent");
static_assert(offsetof(GBPlayerController_OnAFKPromptEvent, ReponseTime) == 0x000000, "Member 'GBPlayerController_OnAFKPromptEvent::ReponseTime' has a wrong offset!");

// Function GroundBranch.GBPlayerController.OnHoveredWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_OnHoveredWidgetChanged final
{
public:
	class UWidgetComponent*                       WidgetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       PreviousWidgetComponent;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_OnHoveredWidgetChanged) == 0x000008, "Wrong alignment on GBPlayerController_OnHoveredWidgetChanged");
static_assert(sizeof(GBPlayerController_OnHoveredWidgetChanged) == 0x000010, "Wrong size on GBPlayerController_OnHoveredWidgetChanged");
static_assert(offsetof(GBPlayerController_OnHoveredWidgetChanged, WidgetComponent) == 0x000000, "Member 'GBPlayerController_OnHoveredWidgetChanged::WidgetComponent' has a wrong offset!");
static_assert(offsetof(GBPlayerController_OnHoveredWidgetChanged, PreviousWidgetComponent) == 0x000008, "Member 'GBPlayerController_OnHoveredWidgetChanged::PreviousWidgetComponent' has a wrong offset!");

// Function GroundBranch.GBPlayerController.OnLoadoutApplied
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_OnLoadoutApplied final
{
public:
	class AGBCharacter*                           InGBCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_OnLoadoutApplied) == 0x000008, "Wrong alignment on GBPlayerController_OnLoadoutApplied");
static_assert(sizeof(GBPlayerController_OnLoadoutApplied) == 0x000008, "Wrong size on GBPlayerController_OnLoadoutApplied");
static_assert(offsetof(GBPlayerController_OnLoadoutApplied, InGBCharacter) == 0x000000, "Member 'GBPlayerController_OnLoadoutApplied::InGBCharacter' has a wrong offset!");

// Function GroundBranch.GBPlayerController.OnMissionObjectiveStatusUpdateEvent
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_OnMissionObjectiveStatusUpdateEvent final
{
public:
	EGBMissionObjectiveStatusUpdateType           StatusUpdateType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_OnMissionObjectiveStatusUpdateEvent) == 0x000008, "Wrong alignment on GBPlayerController_OnMissionObjectiveStatusUpdateEvent");
static_assert(sizeof(GBPlayerController_OnMissionObjectiveStatusUpdateEvent) == 0x000018, "Wrong size on GBPlayerController_OnMissionObjectiveStatusUpdateEvent");
static_assert(offsetof(GBPlayerController_OnMissionObjectiveStatusUpdateEvent, StatusUpdateType) == 0x000000, "Member 'GBPlayerController_OnMissionObjectiveStatusUpdateEvent::StatusUpdateType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_OnMissionObjectiveStatusUpdateEvent, MissionObjective) == 0x000008, "Member 'GBPlayerController_OnMissionObjectiveStatusUpdateEvent::MissionObjective' has a wrong offset!");
static_assert(offsetof(GBPlayerController_OnMissionObjectiveStatusUpdateEvent, FloatParam) == 0x000010, "Member 'GBPlayerController_OnMissionObjectiveStatusUpdateEvent::FloatParam' has a wrong offset!");

// Function GroundBranch.GBPlayerController.OnPlayerLoadoutsUpdated
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_OnPlayerLoadoutsUpdated final
{
public:
	class AGBGameState*                           GBGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_OnPlayerLoadoutsUpdated) == 0x000008, "Wrong alignment on GBPlayerController_OnPlayerLoadoutsUpdated");
static_assert(sizeof(GBPlayerController_OnPlayerLoadoutsUpdated) == 0x000008, "Wrong size on GBPlayerController_OnPlayerLoadoutsUpdated");
static_assert(offsetof(GBPlayerController_OnPlayerLoadoutsUpdated, GBGameState) == 0x000000, "Member 'GBPlayerController_OnPlayerLoadoutsUpdated::GBGameState' has a wrong offset!");

// Function GroundBranch.GBPlayerController.OnShowWorldPromptEvent
// 0x0020 (0x0020 - 0x0000)
struct GBPlayerController_OnShowWorldPromptEvent final
{
public:
	struct FVector                                PromptLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_OnShowWorldPromptEvent) == 0x000008, "Wrong alignment on GBPlayerController_OnShowWorldPromptEvent");
static_assert(sizeof(GBPlayerController_OnShowWorldPromptEvent) == 0x000020, "Wrong size on GBPlayerController_OnShowWorldPromptEvent");
static_assert(offsetof(GBPlayerController_OnShowWorldPromptEvent, PromptLocation) == 0x000000, "Member 'GBPlayerController_OnShowWorldPromptEvent::PromptLocation' has a wrong offset!");
static_assert(offsetof(GBPlayerController_OnShowWorldPromptEvent, Tag) == 0x00000C, "Member 'GBPlayerController_OnShowWorldPromptEvent::Tag' has a wrong offset!");
static_assert(offsetof(GBPlayerController_OnShowWorldPromptEvent, Duration) == 0x000014, "Member 'GBPlayerController_OnShowWorldPromptEvent::Duration' has a wrong offset!");
static_assert(offsetof(GBPlayerController_OnShowWorldPromptEvent, ModID) == 0x000018, "Member 'GBPlayerController_OnShowWorldPromptEvent::ModID' has a wrong offset!");

// Function GroundBranch.GBPlayerController.PlayEmote
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_PlayEmote final
{
public:
	class FString                                 CharEmoteString;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_PlayEmote) == 0x000008, "Wrong alignment on GBPlayerController_PlayEmote");
static_assert(sizeof(GBPlayerController_PlayEmote) == 0x000010, "Wrong size on GBPlayerController_PlayEmote");
static_assert(offsetof(GBPlayerController_PlayEmote, CharEmoteString) == 0x000000, "Member 'GBPlayerController_PlayEmote::CharEmoteString' has a wrong offset!");

// Function GroundBranch.GBPlayerController.PlayerGameModeRequest
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_PlayerGameModeRequest final
{
public:
	class FString                                 Request;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_PlayerGameModeRequest) == 0x000008, "Wrong alignment on GBPlayerController_PlayerGameModeRequest");
static_assert(sizeof(GBPlayerController_PlayerGameModeRequest) == 0x000010, "Wrong size on GBPlayerController_PlayerGameModeRequest");
static_assert(offsetof(GBPlayerController_PlayerGameModeRequest, Request) == 0x000000, "Member 'GBPlayerController_PlayerGameModeRequest::Request' has a wrong offset!");

// Function GroundBranch.GBPlayerController.PlayVoice
// 0x000C (0x000C - 0x0000)
struct GBPlayerController_PlayVoice final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadioMessage;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_PlayVoice) == 0x000004, "Wrong alignment on GBPlayerController_PlayVoice");
static_assert(sizeof(GBPlayerController_PlayVoice) == 0x00000C, "Wrong size on GBPlayerController_PlayVoice");
static_assert(offsetof(GBPlayerController_PlayVoice, Key) == 0x000000, "Member 'GBPlayerController_PlayVoice::Key' has a wrong offset!");
static_assert(offsetof(GBPlayerController_PlayVoice, bIsRadioMessage) == 0x000008, "Member 'GBPlayerController_PlayVoice::bIsRadioMessage' has a wrong offset!");

// Function GroundBranch.GBPlayerController.RemoveLocalPlayerTag
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_RemoveLocalPlayerTag final
{
public:
	class FName                                   LocalPlayerTag;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_RemoveLocalPlayerTag) == 0x000004, "Wrong alignment on GBPlayerController_RemoveLocalPlayerTag");
static_assert(sizeof(GBPlayerController_RemoveLocalPlayerTag) == 0x000008, "Wrong size on GBPlayerController_RemoveLocalPlayerTag");
static_assert(offsetof(GBPlayerController_RemoveLocalPlayerTag, LocalPlayerTag) == 0x000000, "Member 'GBPlayerController_RemoveLocalPlayerTag::LocalPlayerTag' has a wrong offset!");

// Function GroundBranch.GBPlayerController.RemoveOverrideInputWidget
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_RemoveOverrideInputWidget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_RemoveOverrideInputWidget) == 0x000008, "Wrong alignment on GBPlayerController_RemoveOverrideInputWidget");
static_assert(sizeof(GBPlayerController_RemoveOverrideInputWidget) == 0x000008, "Wrong size on GBPlayerController_RemoveOverrideInputWidget");
static_assert(offsetof(GBPlayerController_RemoveOverrideInputWidget, UserWidget) == 0x000000, "Member 'GBPlayerController_RemoveOverrideInputWidget::UserWidget' has a wrong offset!");

// Function GroundBranch.GBPlayerController.Say
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_Say final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_Say) == 0x000008, "Wrong alignment on GBPlayerController_Say");
static_assert(sizeof(GBPlayerController_Say) == 0x000010, "Wrong size on GBPlayerController_Say");
static_assert(offsetof(GBPlayerController_Say, Msg) == 0x000000, "Member 'GBPlayerController_Say::Msg' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SayTeam
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_SayTeam final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SayTeam) == 0x000008, "Wrong alignment on GBPlayerController_SayTeam");
static_assert(sizeof(GBPlayerController_SayTeam) == 0x000010, "Wrong size on GBPlayerController_SayTeam");
static_assert(offsetof(GBPlayerController_SayTeam, Msg) == 0x000000, "Member 'GBPlayerController_SayTeam::Msg' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerAdmin
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerAdmin final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerAdmin) == 0x000008, "Wrong alignment on GBPlayerController_ServerAdmin");
static_assert(sizeof(GBPlayerController_ServerAdmin) == 0x000010, "Wrong size on GBPlayerController_ServerAdmin");
static_assert(offsetof(GBPlayerController_ServerAdmin, Parameters) == 0x000000, "Member 'GBPlayerController_ServerAdmin::Parameters' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerAdminRequest
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_ServerAdminRequest final
{
public:
	class FName                                   RequestType;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerAdminRequest) == 0x000004, "Wrong alignment on GBPlayerController_ServerAdminRequest");
static_assert(sizeof(GBPlayerController_ServerAdminRequest) == 0x000008, "Wrong size on GBPlayerController_ServerAdminRequest");
static_assert(offsetof(GBPlayerController_ServerAdminRequest, RequestType) == 0x000000, "Member 'GBPlayerController_ServerAdminRequest::RequestType' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerAdminSet
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ServerAdminSet final
{
public:
	struct FZKReplicatedContent                   Content;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerAdminSet) == 0x000008, "Wrong alignment on GBPlayerController_ServerAdminSet");
static_assert(sizeof(GBPlayerController_ServerAdminSet) == 0x000018, "Wrong size on GBPlayerController_ServerAdminSet");
static_assert(offsetof(GBPlayerController_ServerAdminSet, Content) == 0x000000, "Member 'GBPlayerController_ServerAdminSet::Content' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerCheat) == 0x000008, "Wrong alignment on GBPlayerController_ServerCheat");
static_assert(sizeof(GBPlayerController_ServerCheat) == 0x000010, "Wrong size on GBPlayerController_ServerCheat");
static_assert(offsetof(GBPlayerController_ServerCheat, Msg) == 0x000000, "Member 'GBPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerConfirmBulletCharacterImpact
// 0x00A0 (0x00A0 - 0x0000)
struct GBPlayerController_ServerConfirmBulletCharacterImpact final
{
public:
	class AGBCharacter*                           HitCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBOrganDamageEvent                    OrganDamageEvent;                                  // 0x0008(0x0098)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerConfirmBulletCharacterImpact) == 0x000008, "Wrong alignment on GBPlayerController_ServerConfirmBulletCharacterImpact");
static_assert(sizeof(GBPlayerController_ServerConfirmBulletCharacterImpact) == 0x0000A0, "Wrong size on GBPlayerController_ServerConfirmBulletCharacterImpact");
static_assert(offsetof(GBPlayerController_ServerConfirmBulletCharacterImpact, HitCharacter) == 0x000000, "Member 'GBPlayerController_ServerConfirmBulletCharacterImpact::HitCharacter' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerConfirmBulletCharacterImpact, OrganDamageEvent) == 0x000008, "Member 'GBPlayerController_ServerConfirmBulletCharacterImpact::OrganDamageEvent' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerCreateLoadoutInfo
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ServerCreateLoadoutInfo final
{
public:
	struct FGBReplicatedString                    ReplicatedLoadout;                                 // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerCreateLoadoutInfo) == 0x000008, "Wrong alignment on GBPlayerController_ServerCreateLoadoutInfo");
static_assert(sizeof(GBPlayerController_ServerCreateLoadoutInfo) == 0x000018, "Wrong size on GBPlayerController_ServerCreateLoadoutInfo");
static_assert(offsetof(GBPlayerController_ServerCreateLoadoutInfo, ReplicatedLoadout) == 0x000000, "Member 'GBPlayerController_ServerCreateLoadoutInfo::ReplicatedLoadout' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerPlayEmote
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerPlayEmote final
{
public:
	struct FPrimaryAssetId                        CharEmoteId;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerPlayEmote) == 0x000004, "Wrong alignment on GBPlayerController_ServerPlayEmote");
static_assert(sizeof(GBPlayerController_ServerPlayEmote) == 0x000010, "Wrong size on GBPlayerController_ServerPlayEmote");
static_assert(offsetof(GBPlayerController_ServerPlayEmote, CharEmoteId) == 0x000000, "Member 'GBPlayerController_ServerPlayEmote::CharEmoteId' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerPlayerGameModeRequest
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerPlayerGameModeRequest final
{
public:
	class FString                                 Request;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerPlayerGameModeRequest) == 0x000008, "Wrong alignment on GBPlayerController_ServerPlayerGameModeRequest");
static_assert(sizeof(GBPlayerController_ServerPlayerGameModeRequest) == 0x000010, "Wrong size on GBPlayerController_ServerPlayerGameModeRequest");
static_assert(offsetof(GBPlayerController_ServerPlayerGameModeRequest, Request) == 0x000000, "Member 'GBPlayerController_ServerPlayerGameModeRequest::Request' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerPlaySequence
// 0x0030 (0x0030 - 0x0000)
struct GBPlayerController_ServerPlaySequence final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     SequenceRef;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCutscene;                                       // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAbort;                                         // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetActors;                                      // 0x002A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayers;                                      // 0x002B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlackoutAfter;                                    // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ServerPlaySequence) == 0x000008, "Wrong alignment on GBPlayerController_ServerPlaySequence");
static_assert(sizeof(GBPlayerController_ServerPlaySequence) == 0x000030, "Wrong size on GBPlayerController_ServerPlaySequence");
static_assert(offsetof(GBPlayerController_ServerPlaySequence, SequenceRef) == 0x000000, "Member 'GBPlayerController_ServerPlaySequence::SequenceRef' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerPlaySequence, bIsCutscene) == 0x000028, "Member 'GBPlayerController_ServerPlaySequence::bIsCutscene' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerPlaySequence, bCanAbort) == 0x000029, "Member 'GBPlayerController_ServerPlaySequence::bCanAbort' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerPlaySequence, bResetActors) == 0x00002A, "Member 'GBPlayerController_ServerPlaySequence::bResetActors' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerPlaySequence, bHidePlayers) == 0x00002B, "Member 'GBPlayerController_ServerPlaySequence::bHidePlayers' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerPlaySequence, bBlackoutAfter) == 0x00002C, "Member 'GBPlayerController_ServerPlaySequence::bBlackoutAfter' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerPlayVoice
// 0x000C (0x000C - 0x0000)
struct GBPlayerController_ServerPlayVoice final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadioMessage;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ServerPlayVoice) == 0x000004, "Wrong alignment on GBPlayerController_ServerPlayVoice");
static_assert(sizeof(GBPlayerController_ServerPlayVoice) == 0x00000C, "Wrong size on GBPlayerController_ServerPlayVoice");
static_assert(offsetof(GBPlayerController_ServerPlayVoice, Key) == 0x000000, "Member 'GBPlayerController_ServerPlayVoice::Key' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerPlayVoice, bIsRadioMessage) == 0x000008, "Member 'GBPlayerController_ServerPlayVoice::bIsRadioMessage' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSay
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerSay final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSay) == 0x000008, "Wrong alignment on GBPlayerController_ServerSay");
static_assert(sizeof(GBPlayerController_ServerSay) == 0x000010, "Wrong size on GBPlayerController_ServerSay");
static_assert(offsetof(GBPlayerController_ServerSay, Msg) == 0x000000, "Member 'GBPlayerController_ServerSay::Msg' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSayTeam
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerSayTeam final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSayTeam) == 0x000008, "Wrong alignment on GBPlayerController_ServerSayTeam");
static_assert(sizeof(GBPlayerController_ServerSayTeam) == 0x000010, "Wrong size on GBPlayerController_ServerSayTeam");
static_assert(offsetof(GBPlayerController_ServerSayTeam, Msg) == 0x000000, "Member 'GBPlayerController_ServerSayTeam::Msg' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSetCallSign
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ServerSetCallSign final
{
public:
	class FString                                 NewCallSign;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewUseElementCallSign;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ServerSetCallSign) == 0x000008, "Wrong alignment on GBPlayerController_ServerSetCallSign");
static_assert(sizeof(GBPlayerController_ServerSetCallSign) == 0x000018, "Wrong size on GBPlayerController_ServerSetCallSign");
static_assert(offsetof(GBPlayerController_ServerSetCallSign, NewCallSign) == 0x000000, "Member 'GBPlayerController_ServerSetCallSign::NewCallSign' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerSetCallSign, bNewUseElementCallSign) == 0x000010, "Member 'GBPlayerController_ServerSetCallSign::bNewUseElementCallSign' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSetCharVoiceDataId
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerSetCharVoiceDataId final
{
public:
	struct FPrimaryAssetId                        CharVoiceDataId;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSetCharVoiceDataId) == 0x000004, "Wrong alignment on GBPlayerController_ServerSetCharVoiceDataId");
static_assert(sizeof(GBPlayerController_ServerSetCharVoiceDataId) == 0x000010, "Wrong size on GBPlayerController_ServerSetCharVoiceDataId");
static_assert(offsetof(GBPlayerController_ServerSetCharVoiceDataId, CharVoiceDataId) == 0x000000, "Member 'GBPlayerController_ServerSetCharVoiceDataId::CharVoiceDataId' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSetCustomiseOperatorCheat
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_ServerSetCustomiseOperatorCheat final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSetCustomiseOperatorCheat) == 0x000001, "Wrong alignment on GBPlayerController_ServerSetCustomiseOperatorCheat");
static_assert(sizeof(GBPlayerController_ServerSetCustomiseOperatorCheat) == 0x000001, "Wrong size on GBPlayerController_ServerSetCustomiseOperatorCheat");
static_assert(offsetof(GBPlayerController_ServerSetCustomiseOperatorCheat, bEnabled) == 0x000000, "Member 'GBPlayerController_ServerSetCustomiseOperatorCheat::bEnabled' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSetInsertionPoint
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_ServerSetInsertionPoint final
{
public:
	class AGBInsertionPoint*                      NewInsertionPoint;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSetInsertionPoint) == 0x000008, "Wrong alignment on GBPlayerController_ServerSetInsertionPoint");
static_assert(sizeof(GBPlayerController_ServerSetInsertionPoint) == 0x000008, "Wrong size on GBPlayerController_ServerSetInsertionPoint");
static_assert(offsetof(GBPlayerController_ServerSetInsertionPoint, NewInsertionPoint) == 0x000000, "Member 'GBPlayerController_ServerSetInsertionPoint::NewInsertionPoint' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSetReadyStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_ServerSetReadyStatus final
{
public:
	EReadyStatus                                  NewReadyStatus;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSetReadyStatus) == 0x000001, "Wrong alignment on GBPlayerController_ServerSetReadyStatus");
static_assert(sizeof(GBPlayerController_ServerSetReadyStatus) == 0x000001, "Wrong size on GBPlayerController_ServerSetReadyStatus");
static_assert(offsetof(GBPlayerController_ServerSetReadyStatus, NewReadyStatus) == 0x000000, "Member 'GBPlayerController_ServerSetReadyStatus::NewReadyStatus' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerSetTeamElement
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_ServerSetTeamElement final
{
public:
	ETeamElement                                  NewTeamElement;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerSetTeamElement) == 0x000001, "Wrong alignment on GBPlayerController_ServerSetTeamElement");
static_assert(sizeof(GBPlayerController_ServerSetTeamElement) == 0x000001, "Wrong size on GBPlayerController_ServerSetTeamElement");
static_assert(offsetof(GBPlayerController_ServerSetTeamElement, NewTeamElement) == 0x000000, "Member 'GBPlayerController_ServerSetTeamElement::NewTeamElement' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerUseActor
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_ServerUseActor final
{
public:
	class AActor*                                 UseTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustSucceed;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ServerUseActor) == 0x000008, "Wrong alignment on GBPlayerController_ServerUseActor");
static_assert(sizeof(GBPlayerController_ServerUseActor) == 0x000018, "Wrong size on GBPlayerController_ServerUseActor");
static_assert(offsetof(GBPlayerController_ServerUseActor, UseTarget) == 0x000000, "Member 'GBPlayerController_ServerUseActor::UseTarget' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerUseActor, UseType) == 0x000008, "Member 'GBPlayerController_ServerUseActor::UseType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerUseActor, bMustSucceed) == 0x000010, "Member 'GBPlayerController_ServerUseActor::bMustSucceed' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerUseActorWithParams
// 0x0028 (0x0028 - 0x0000)
struct GBPlayerController_ServerUseActorWithParams final
{
public:
	class AActor*                                 UseTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustSucceed;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_ServerUseActorWithParams) == 0x000008, "Wrong alignment on GBPlayerController_ServerUseActorWithParams");
static_assert(sizeof(GBPlayerController_ServerUseActorWithParams) == 0x000028, "Wrong size on GBPlayerController_ServerUseActorWithParams");
static_assert(offsetof(GBPlayerController_ServerUseActorWithParams, UseTarget) == 0x000000, "Member 'GBPlayerController_ServerUseActorWithParams::UseTarget' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerUseActorWithParams, UseType) == 0x000008, "Member 'GBPlayerController_ServerUseActorWithParams::UseType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerUseActorWithParams, Params_0) == 0x000010, "Member 'GBPlayerController_ServerUseActorWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(GBPlayerController_ServerUseActorWithParams, bMustSucceed) == 0x000020, "Member 'GBPlayerController_ServerUseActorWithParams::bMustSucceed' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ServerVote
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_ServerVote final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ServerVote) == 0x000008, "Wrong alignment on GBPlayerController_ServerVote");
static_assert(sizeof(GBPlayerController_ServerVote) == 0x000010, "Wrong size on GBPlayerController_ServerVote");
static_assert(offsetof(GBPlayerController_ServerVote, Parameters) == 0x000000, "Member 'GBPlayerController_ServerVote::Parameters' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetCustomiseOperatorCheat
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_SetCustomiseOperatorCheat final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetCustomiseOperatorCheat) == 0x000001, "Wrong alignment on GBPlayerController_SetCustomiseOperatorCheat");
static_assert(sizeof(GBPlayerController_SetCustomiseOperatorCheat) == 0x000001, "Wrong size on GBPlayerController_SetCustomiseOperatorCheat");
static_assert(offsetof(GBPlayerController_SetCustomiseOperatorCheat, bEnabled) == 0x000000, "Member 'GBPlayerController_SetCustomiseOperatorCheat::bEnabled' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetInsertionPoint
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_SetInsertionPoint final
{
public:
	class AGBInsertionPoint*                      NewInsertionPoint;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetInsertionPoint) == 0x000008, "Wrong alignment on GBPlayerController_SetInsertionPoint");
static_assert(sizeof(GBPlayerController_SetInsertionPoint) == 0x000008, "Wrong size on GBPlayerController_SetInsertionPoint");
static_assert(offsetof(GBPlayerController_SetInsertionPoint, NewInsertionPoint) == 0x000000, "Member 'GBPlayerController_SetInsertionPoint::NewInsertionPoint' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetIsEditingMission
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_SetIsEditingMission final
{
public:
	bool                                          bNewIsEditingMission;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetIsEditingMission) == 0x000001, "Wrong alignment on GBPlayerController_SetIsEditingMission");
static_assert(sizeof(GBPlayerController_SetIsEditingMission) == 0x000001, "Wrong size on GBPlayerController_SetIsEditingMission");
static_assert(offsetof(GBPlayerController_SetIsEditingMission, bNewIsEditingMission) == 0x000000, "Member 'GBPlayerController_SetIsEditingMission::bNewIsEditingMission' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetLastDesiredOffTargetAlphaValue
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_SetLastDesiredOffTargetAlphaValue final
{
public:
	float                                         NewLastDesiredOffTargetAlphaValue;                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetLastDesiredOffTargetAlphaValue) == 0x000004, "Wrong alignment on GBPlayerController_SetLastDesiredOffTargetAlphaValue");
static_assert(sizeof(GBPlayerController_SetLastDesiredOffTargetAlphaValue) == 0x000004, "Wrong size on GBPlayerController_SetLastDesiredOffTargetAlphaValue");
static_assert(offsetof(GBPlayerController_SetLastDesiredOffTargetAlphaValue, NewLastDesiredOffTargetAlphaValue) == 0x000000, "Member 'GBPlayerController_SetLastDesiredOffTargetAlphaValue::NewLastDesiredOffTargetAlphaValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetLoadout
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_SetLoadout final
{
public:
	class FName                                   LoadoutName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetLoadout) == 0x000008, "Wrong alignment on GBPlayerController_SetLoadout");
static_assert(sizeof(GBPlayerController_SetLoadout) == 0x000010, "Wrong size on GBPlayerController_SetLoadout");
static_assert(offsetof(GBPlayerController_SetLoadout, LoadoutName) == 0x000000, "Member 'GBPlayerController_SetLoadout::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBPlayerController_SetLoadout, KitJsonObj) == 0x000008, "Member 'GBPlayerController_SetLoadout::KitJsonObj' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetMPCGlobalDecayRate
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_SetMPCGlobalDecayRate final
{
public:
	float                                         GlobalDecayRate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetMPCGlobalDecayRate) == 0x000004, "Wrong alignment on GBPlayerController_SetMPCGlobalDecayRate");
static_assert(sizeof(GBPlayerController_SetMPCGlobalDecayRate) == 0x000004, "Wrong size on GBPlayerController_SetMPCGlobalDecayRate");
static_assert(offsetof(GBPlayerController_SetMPCGlobalDecayRate, GlobalDecayRate) == 0x000000, "Member 'GBPlayerController_SetMPCGlobalDecayRate::GlobalDecayRate' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetReadyStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_SetReadyStatus final
{
public:
	EReadyStatus                                  NewReadyStatus;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetReadyStatus) == 0x000001, "Wrong alignment on GBPlayerController_SetReadyStatus");
static_assert(sizeof(GBPlayerController_SetReadyStatus) == 0x000001, "Wrong size on GBPlayerController_SetReadyStatus");
static_assert(offsetof(GBPlayerController_SetReadyStatus, NewReadyStatus) == 0x000000, "Member 'GBPlayerController_SetReadyStatus::NewReadyStatus' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetSpectatorNightVisionMode
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_SetSpectatorNightVisionMode final
{
public:
	class FName                                   NewNightVisionMode;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetSpectatorNightVisionMode) == 0x000004, "Wrong alignment on GBPlayerController_SetSpectatorNightVisionMode");
static_assert(sizeof(GBPlayerController_SetSpectatorNightVisionMode) == 0x000008, "Wrong size on GBPlayerController_SetSpectatorNightVisionMode");
static_assert(offsetof(GBPlayerController_SetSpectatorNightVisionMode, NewNightVisionMode) == 0x000000, "Member 'GBPlayerController_SetSpectatorNightVisionMode::NewNightVisionMode' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetTargetInputSensitivityScale
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_SetTargetInputSensitivityScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetTargetInputSensitivityScale) == 0x000004, "Wrong alignment on GBPlayerController_SetTargetInputSensitivityScale");
static_assert(sizeof(GBPlayerController_SetTargetInputSensitivityScale) == 0x000004, "Wrong size on GBPlayerController_SetTargetInputSensitivityScale");
static_assert(offsetof(GBPlayerController_SetTargetInputSensitivityScale, NewScale) == 0x000000, "Member 'GBPlayerController_SetTargetInputSensitivityScale::NewScale' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetTeamElement
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_SetTeamElement final
{
public:
	ETeamElement                                  NewTeamElement;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetTeamElement) == 0x000001, "Wrong alignment on GBPlayerController_SetTeamElement");
static_assert(sizeof(GBPlayerController_SetTeamElement) == 0x000001, "Wrong size on GBPlayerController_SetTeamElement");
static_assert(offsetof(GBPlayerController_SetTeamElement, NewTeamElement) == 0x000000, "Member 'GBPlayerController_SetTeamElement::NewTeamElement' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SetViewRotation
// 0x000C (0x000C - 0x0000)
struct GBPlayerController_SetViewRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SetViewRotation) == 0x000004, "Wrong alignment on GBPlayerController_SetViewRotation");
static_assert(sizeof(GBPlayerController_SetViewRotation) == 0x00000C, "Wrong size on GBPlayerController_SetViewRotation");
static_assert(offsetof(GBPlayerController_SetViewRotation, NewRotation) == 0x000000, "Member 'GBPlayerController_SetViewRotation::NewRotation' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ShowTransitionScreen
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_ShowTransitionScreen final
{
public:
	class FName                                   TransitionType;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ShowTransitionScreen) == 0x000004, "Wrong alignment on GBPlayerController_ShowTransitionScreen");
static_assert(sizeof(GBPlayerController_ShowTransitionScreen) == 0x000008, "Wrong size on GBPlayerController_ShowTransitionScreen");
static_assert(offsetof(GBPlayerController_ShowTransitionScreen, TransitionType) == 0x000000, "Member 'GBPlayerController_ShowTransitionScreen::TransitionType' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ShowTransitionScreenEvent
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_ShowTransitionScreenEvent final
{
public:
	class FName                                   TransitionType;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ShowTransitionScreenEvent) == 0x000004, "Wrong alignment on GBPlayerController_ShowTransitionScreenEvent");
static_assert(sizeof(GBPlayerController_ShowTransitionScreenEvent) == 0x000008, "Wrong size on GBPlayerController_ShowTransitionScreenEvent");
static_assert(offsetof(GBPlayerController_ShowTransitionScreenEvent, TransitionType) == 0x000000, "Member 'GBPlayerController_ShowTransitionScreenEvent::TransitionType' has a wrong offset!");

// Function GroundBranch.GBPlayerController.TriggerSequencePlayback
// 0x0030 (0x0030 - 0x0000)
struct GBPlayerController_TriggerSequencePlayback final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     LevelSequenceActor;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCutscene;                                       // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAbort;                                         // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayers;                                      // 0x002A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlackoutAfter;                                    // 0x002B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_TriggerSequencePlayback) == 0x000008, "Wrong alignment on GBPlayerController_TriggerSequencePlayback");
static_assert(sizeof(GBPlayerController_TriggerSequencePlayback) == 0x000030, "Wrong size on GBPlayerController_TriggerSequencePlayback");
static_assert(offsetof(GBPlayerController_TriggerSequencePlayback, LevelSequenceActor) == 0x000000, "Member 'GBPlayerController_TriggerSequencePlayback::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(GBPlayerController_TriggerSequencePlayback, bIsCutscene) == 0x000028, "Member 'GBPlayerController_TriggerSequencePlayback::bIsCutscene' has a wrong offset!");
static_assert(offsetof(GBPlayerController_TriggerSequencePlayback, bCanAbort) == 0x000029, "Member 'GBPlayerController_TriggerSequencePlayback::bCanAbort' has a wrong offset!");
static_assert(offsetof(GBPlayerController_TriggerSequencePlayback, bHidePlayers) == 0x00002A, "Member 'GBPlayerController_TriggerSequencePlayback::bHidePlayers' has a wrong offset!");
static_assert(offsetof(GBPlayerController_TriggerSequencePlayback, bBlackoutAfter) == 0x00002B, "Member 'GBPlayerController_TriggerSequencePlayback::bBlackoutAfter' has a wrong offset!");

// Function GroundBranch.GBPlayerController.UnMute
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_UnMute final
{
public:
	class APlayerState*                           TargetPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_UnMute) == 0x000008, "Wrong alignment on GBPlayerController_UnMute");
static_assert(sizeof(GBPlayerController_UnMute) == 0x000008, "Wrong size on GBPlayerController_UnMute");
static_assert(offsetof(GBPlayerController_UnMute, TargetPlayerState) == 0x000000, "Member 'GBPlayerController_UnMute::TargetPlayerState' has a wrong offset!");

// Function GroundBranch.GBPlayerController.UpdateMovementMaterialCollection
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_UpdateMovementMaterialCollection final
{
public:
	struct FRotator                               DeltaRot;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_UpdateMovementMaterialCollection) == 0x000004, "Wrong alignment on GBPlayerController_UpdateMovementMaterialCollection");
static_assert(sizeof(GBPlayerController_UpdateMovementMaterialCollection) == 0x000010, "Wrong size on GBPlayerController_UpdateMovementMaterialCollection");
static_assert(offsetof(GBPlayerController_UpdateMovementMaterialCollection, DeltaRot) == 0x000000, "Member 'GBPlayerController_UpdateMovementMaterialCollection::DeltaRot' has a wrong offset!");
static_assert(offsetof(GBPlayerController_UpdateMovementMaterialCollection, DeltaTime) == 0x00000C, "Member 'GBPlayerController_UpdateMovementMaterialCollection::DeltaTime' has a wrong offset!");

// Function GroundBranch.GBPlayerController.UseActor
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_UseActor final
{
public:
	class AActor*                                 UseTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustSucceed;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_UseActor) == 0x000008, "Wrong alignment on GBPlayerController_UseActor");
static_assert(sizeof(GBPlayerController_UseActor) == 0x000018, "Wrong size on GBPlayerController_UseActor");
static_assert(offsetof(GBPlayerController_UseActor, UseTarget) == 0x000000, "Member 'GBPlayerController_UseActor::UseTarget' has a wrong offset!");
static_assert(offsetof(GBPlayerController_UseActor, UseType) == 0x000008, "Member 'GBPlayerController_UseActor::UseType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_UseActor, bMustSucceed) == 0x000010, "Member 'GBPlayerController_UseActor::bMustSucceed' has a wrong offset!");

// Function GroundBranch.GBPlayerController.UseActorWithParams
// 0x0028 (0x0028 - 0x0000)
struct GBPlayerController_UseActorWithParams final
{
public:
	class AActor*                                 UseTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustSucceed;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_UseActorWithParams) == 0x000008, "Wrong alignment on GBPlayerController_UseActorWithParams");
static_assert(sizeof(GBPlayerController_UseActorWithParams) == 0x000028, "Wrong size on GBPlayerController_UseActorWithParams");
static_assert(offsetof(GBPlayerController_UseActorWithParams, UseTarget) == 0x000000, "Member 'GBPlayerController_UseActorWithParams::UseTarget' has a wrong offset!");
static_assert(offsetof(GBPlayerController_UseActorWithParams, UseType) == 0x000008, "Member 'GBPlayerController_UseActorWithParams::UseType' has a wrong offset!");
static_assert(offsetof(GBPlayerController_UseActorWithParams, Params_0) == 0x000010, "Member 'GBPlayerController_UseActorWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(GBPlayerController_UseActorWithParams, bMustSucceed) == 0x000020, "Member 'GBPlayerController_UseActorWithParams::bMustSucceed' has a wrong offset!");

// Function GroundBranch.GBPlayerController.Vote
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_Vote final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_Vote) == 0x000008, "Wrong alignment on GBPlayerController_Vote");
static_assert(sizeof(GBPlayerController_Vote) == 0x000010, "Wrong size on GBPlayerController_Vote");
static_assert(offsetof(GBPlayerController_Vote, Parameters) == 0x000000, "Member 'GBPlayerController_Vote::Parameters' has a wrong offset!");

// Function GroundBranch.GBPlayerController.CanUseActor
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_CanUseActor final
{
public:
	const class AActor*                           UseTarget;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustSucceed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_CanUseActor) == 0x000008, "Wrong alignment on GBPlayerController_CanUseActor");
static_assert(sizeof(GBPlayerController_CanUseActor) == 0x000010, "Wrong size on GBPlayerController_CanUseActor");
static_assert(offsetof(GBPlayerController_CanUseActor, UseTarget) == 0x000000, "Member 'GBPlayerController_CanUseActor::UseTarget' has a wrong offset!");
static_assert(offsetof(GBPlayerController_CanUseActor, bMustSucceed) == 0x000008, "Member 'GBPlayerController_CanUseActor::bMustSucceed' has a wrong offset!");
static_assert(offsetof(GBPlayerController_CanUseActor, ReturnValue) == 0x000009, "Member 'GBPlayerController_CanUseActor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.CreateBlackOutEvent
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_CreateBlackOutEvent final
{
public:
	bool                                          bFadeIn;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_CreateBlackOutEvent) == 0x000001, "Wrong alignment on GBPlayerController_CreateBlackOutEvent");
static_assert(sizeof(GBPlayerController_CreateBlackOutEvent) == 0x000001, "Wrong size on GBPlayerController_CreateBlackOutEvent");
static_assert(offsetof(GBPlayerController_CreateBlackOutEvent, bFadeIn) == 0x000000, "Member 'GBPlayerController_CreateBlackOutEvent::bFadeIn' has a wrong offset!");

// Function GroundBranch.GBPlayerController.FrozenTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_FrozenTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_FrozenTimeLeft) == 0x000004, "Wrong alignment on GBPlayerController_FrozenTimeLeft");
static_assert(sizeof(GBPlayerController_FrozenTimeLeft) == 0x000004, "Wrong size on GBPlayerController_FrozenTimeLeft");
static_assert(offsetof(GBPlayerController_FrozenTimeLeft, ReturnValue) == 0x000000, "Member 'GBPlayerController_FrozenTimeLeft::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetCameraStyle
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_GetCameraStyle final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetCameraStyle) == 0x000004, "Wrong alignment on GBPlayerController_GetCameraStyle");
static_assert(sizeof(GBPlayerController_GetCameraStyle) == 0x000008, "Wrong size on GBPlayerController_GetCameraStyle");
static_assert(offsetof(GBPlayerController_GetCameraStyle, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetCameraStyle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetEyeBias
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetEyeBias final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetEyeBias) == 0x000004, "Wrong alignment on GBPlayerController_GetEyeBias");
static_assert(sizeof(GBPlayerController_GetEyeBias) == 0x000004, "Wrong size on GBPlayerController_GetEyeBias");
static_assert(offsetof(GBPlayerController_GetEyeBias, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetEyeBias::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetFailedKitValidations
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_GetFailedKitValidations final
{
public:
	TArray<struct FGBKitValidationInfo>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetFailedKitValidations) == 0x000008, "Wrong alignment on GBPlayerController_GetFailedKitValidations");
static_assert(sizeof(GBPlayerController_GetFailedKitValidations) == 0x000010, "Wrong size on GBPlayerController_GetFailedKitValidations");
static_assert(offsetof(GBPlayerController_GetFailedKitValidations, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetFailedKitValidations::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetFluidStance
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_GetFluidStance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetFluidStance) == 0x000001, "Wrong alignment on GBPlayerController_GetFluidStance");
static_assert(sizeof(GBPlayerController_GetFluidStance) == 0x000001, "Wrong size on GBPlayerController_GetFluidStance");
static_assert(offsetof(GBPlayerController_GetFluidStance, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetFluidStance::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetFPS
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetFPS final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetFPS) == 0x000004, "Wrong alignment on GBPlayerController_GetFPS");
static_assert(sizeof(GBPlayerController_GetFPS) == 0x000004, "Wrong size on GBPlayerController_GetFPS");
static_assert(offsetof(GBPlayerController_GetFPS, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetFPS::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetGBCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_GetGBCharacter final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetGBCharacter) == 0x000008, "Wrong alignment on GBPlayerController_GetGBCharacter");
static_assert(sizeof(GBPlayerController_GetGBCharacter) == 0x000008, "Wrong size on GBPlayerController_GetGBCharacter");
static_assert(offsetof(GBPlayerController_GetGBCharacter, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetGBCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetGBHUD
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_GetGBHUD final
{
public:
	class AGBHUD*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetGBHUD) == 0x000008, "Wrong alignment on GBPlayerController_GetGBHUD");
static_assert(sizeof(GBPlayerController_GetGBHUD) == 0x000008, "Wrong size on GBPlayerController_GetGBHUD");
static_assert(offsetof(GBPlayerController_GetGBHUD, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetGBHUD::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetHeadMovementAmount
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetHeadMovementAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetHeadMovementAmount) == 0x000004, "Wrong alignment on GBPlayerController_GetHeadMovementAmount");
static_assert(sizeof(GBPlayerController_GetHeadMovementAmount) == 0x000004, "Wrong size on GBPlayerController_GetHeadMovementAmount");
static_assert(offsetof(GBPlayerController_GetHeadMovementAmount, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetHeadMovementAmount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetLastDesiredOffTargetAlphaValue
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetLastDesiredOffTargetAlphaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetLastDesiredOffTargetAlphaValue) == 0x000004, "Wrong alignment on GBPlayerController_GetLastDesiredOffTargetAlphaValue");
static_assert(sizeof(GBPlayerController_GetLastDesiredOffTargetAlphaValue) == 0x000004, "Wrong size on GBPlayerController_GetLastDesiredOffTargetAlphaValue");
static_assert(offsetof(GBPlayerController_GetLastDesiredOffTargetAlphaValue, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetLastDesiredOffTargetAlphaValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetLoadoutInfo
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_GetLoadoutInfo final
{
public:
	class FName                                   LoadoutName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKitInfo*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetLoadoutInfo) == 0x000008, "Wrong alignment on GBPlayerController_GetLoadoutInfo");
static_assert(sizeof(GBPlayerController_GetLoadoutInfo) == 0x000010, "Wrong size on GBPlayerController_GetLoadoutInfo");
static_assert(offsetof(GBPlayerController_GetLoadoutInfo, LoadoutName) == 0x000000, "Member 'GBPlayerController_GetLoadoutInfo::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetLoadoutInfo, ReturnValue) == 0x000008, "Member 'GBPlayerController_GetLoadoutInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetNetInfo
// 0x001C (0x001C - 0x0000)
struct GBPlayerController_GetNetInfo final
{
public:
	int32                                         Ping;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InKiloBytesPerSecond;                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPacketsPerSecond;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLossPercentage;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutKiloBytesPerSecond;                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPacketsPerSecond;                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLossPercentage;                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetNetInfo) == 0x000004, "Wrong alignment on GBPlayerController_GetNetInfo");
static_assert(sizeof(GBPlayerController_GetNetInfo) == 0x00001C, "Wrong size on GBPlayerController_GetNetInfo");
static_assert(offsetof(GBPlayerController_GetNetInfo, Ping) == 0x000000, "Member 'GBPlayerController_GetNetInfo::Ping' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetNetInfo, InKiloBytesPerSecond) == 0x000004, "Member 'GBPlayerController_GetNetInfo::InKiloBytesPerSecond' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetNetInfo, InPacketsPerSecond) == 0x000008, "Member 'GBPlayerController_GetNetInfo::InPacketsPerSecond' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetNetInfo, InLossPercentage) == 0x00000C, "Member 'GBPlayerController_GetNetInfo::InLossPercentage' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetNetInfo, OutKiloBytesPerSecond) == 0x000010, "Member 'GBPlayerController_GetNetInfo::OutKiloBytesPerSecond' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetNetInfo, OutPacketsPerSecond) == 0x000014, "Member 'GBPlayerController_GetNetInfo::OutPacketsPerSecond' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetNetInfo, OutLossPercentage) == 0x000018, "Member 'GBPlayerController_GetNetInfo::OutLossPercentage' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetPlayerFOV
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetPlayerFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetPlayerFOV) == 0x000004, "Wrong alignment on GBPlayerController_GetPlayerFOV");
static_assert(sizeof(GBPlayerController_GetPlayerFOV) == 0x000004, "Wrong size on GBPlayerController_GetPlayerFOV");
static_assert(offsetof(GBPlayerController_GetPlayerFOV, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetPlayerFOV::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetPlayingSequenceInfo
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerController_GetPlayingSequenceInfo final
{
public:
	float                                         OutTime;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimeLeft;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDuration;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsCutscene;                                    // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutCanAbort;                                      // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetPlayingSequenceInfo) == 0x000008, "Wrong alignment on GBPlayerController_GetPlayingSequenceInfo");
static_assert(sizeof(GBPlayerController_GetPlayingSequenceInfo) == 0x000018, "Wrong size on GBPlayerController_GetPlayingSequenceInfo");
static_assert(offsetof(GBPlayerController_GetPlayingSequenceInfo, OutTime) == 0x000000, "Member 'GBPlayerController_GetPlayingSequenceInfo::OutTime' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetPlayingSequenceInfo, OutTimeLeft) == 0x000004, "Member 'GBPlayerController_GetPlayingSequenceInfo::OutTimeLeft' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetPlayingSequenceInfo, OutDuration) == 0x000008, "Member 'GBPlayerController_GetPlayingSequenceInfo::OutDuration' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetPlayingSequenceInfo, bOutIsCutscene) == 0x00000C, "Member 'GBPlayerController_GetPlayingSequenceInfo::bOutIsCutscene' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetPlayingSequenceInfo, bOutCanAbort) == 0x00000D, "Member 'GBPlayerController_GetPlayingSequenceInfo::bOutCanAbort' has a wrong offset!");
static_assert(offsetof(GBPlayerController_GetPlayingSequenceInfo, ReturnValue) == 0x000010, "Member 'GBPlayerController_GetPlayingSequenceInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetPredictionTime
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetPredictionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetPredictionTime) == 0x000004, "Wrong alignment on GBPlayerController_GetPredictionTime");
static_assert(sizeof(GBPlayerController_GetPredictionTime) == 0x000004, "Wrong size on GBPlayerController_GetPredictionTime");
static_assert(offsetof(GBPlayerController_GetPredictionTime, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetPredictionTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetSharedTraceBlockingHit
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_GetSharedTraceBlockingHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetSharedTraceBlockingHit) == 0x000001, "Wrong alignment on GBPlayerController_GetSharedTraceBlockingHit");
static_assert(sizeof(GBPlayerController_GetSharedTraceBlockingHit) == 0x000001, "Wrong size on GBPlayerController_GetSharedTraceBlockingHit");
static_assert(offsetof(GBPlayerController_GetSharedTraceBlockingHit, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetSharedTraceBlockingHit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetSharedTraceResults
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_GetSharedTraceResults final
{
public:
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetSharedTraceResults) == 0x000008, "Wrong alignment on GBPlayerController_GetSharedTraceResults");
static_assert(sizeof(GBPlayerController_GetSharedTraceResults) == 0x000010, "Wrong size on GBPlayerController_GetSharedTraceResults");
static_assert(offsetof(GBPlayerController_GetSharedTraceResults, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetSharedTraceResults::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetSpectatorNightVisionMode
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_GetSpectatorNightVisionMode final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetSpectatorNightVisionMode) == 0x000004, "Wrong alignment on GBPlayerController_GetSpectatorNightVisionMode");
static_assert(sizeof(GBPlayerController_GetSpectatorNightVisionMode) == 0x000008, "Wrong size on GBPlayerController_GetSpectatorNightVisionMode");
static_assert(offsetof(GBPlayerController_GetSpectatorNightVisionMode, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetSpectatorNightVisionMode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetTargetInputSensitivityScale
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerController_GetTargetInputSensitivityScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetTargetInputSensitivityScale) == 0x000004, "Wrong alignment on GBPlayerController_GetTargetInputSensitivityScale");
static_assert(sizeof(GBPlayerController_GetTargetInputSensitivityScale) == 0x000004, "Wrong size on GBPlayerController_GetTargetInputSensitivityScale");
static_assert(offsetof(GBPlayerController_GetTargetInputSensitivityScale, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetTargetInputSensitivityScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetTeamKillVictims
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_GetTeamKillVictims final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetTeamKillVictims) == 0x000008, "Wrong alignment on GBPlayerController_GetTeamKillVictims");
static_assert(sizeof(GBPlayerController_GetTeamKillVictims) == 0x000010, "Wrong size on GBPlayerController_GetTeamKillVictims");
static_assert(offsetof(GBPlayerController_GetTeamKillVictims, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetTeamKillVictims::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetViewRotation
// 0x000C (0x000C - 0x0000)
struct GBPlayerController_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetViewRotation) == 0x000004, "Wrong alignment on GBPlayerController_GetViewRotation");
static_assert(sizeof(GBPlayerController_GetViewRotation) == 0x00000C, "Wrong size on GBPlayerController_GetViewRotation");
static_assert(offsetof(GBPlayerController_GetViewRotation, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetViewRotation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.GetWidgetInteractionComponent
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerController_GetWidgetInteractionComponent final
{
public:
	class UWidgetInteractionComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_GetWidgetInteractionComponent) == 0x000008, "Wrong alignment on GBPlayerController_GetWidgetInteractionComponent");
static_assert(sizeof(GBPlayerController_GetWidgetInteractionComponent) == 0x000008, "Wrong size on GBPlayerController_GetWidgetInteractionComponent");
static_assert(offsetof(GBPlayerController_GetWidgetInteractionComponent, ReturnValue) == 0x000000, "Member 'GBPlayerController_GetWidgetInteractionComponent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.HasFailedKitValidations
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_HasFailedKitValidations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_HasFailedKitValidations) == 0x000001, "Wrong alignment on GBPlayerController_HasFailedKitValidations");
static_assert(sizeof(GBPlayerController_HasFailedKitValidations) == 0x000001, "Wrong size on GBPlayerController_HasFailedKitValidations");
static_assert(offsetof(GBPlayerController_HasFailedKitValidations, ReturnValue) == 0x000000, "Member 'GBPlayerController_HasFailedKitValidations::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.HasLocalPlayerTag
// 0x000C (0x000C - 0x0000)
struct GBPlayerController_HasLocalPlayerTag final
{
public:
	class FName                                   LocalPlayerTag;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_HasLocalPlayerTag) == 0x000004, "Wrong alignment on GBPlayerController_HasLocalPlayerTag");
static_assert(sizeof(GBPlayerController_HasLocalPlayerTag) == 0x00000C, "Wrong size on GBPlayerController_HasLocalPlayerTag");
static_assert(offsetof(GBPlayerController_HasLocalPlayerTag, LocalPlayerTag) == 0x000000, "Member 'GBPlayerController_HasLocalPlayerTag::LocalPlayerTag' has a wrong offset!");
static_assert(offsetof(GBPlayerController_HasLocalPlayerTag, ReturnValue) == 0x000008, "Member 'GBPlayerController_HasLocalPlayerTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsAlive) == 0x000001, "Wrong alignment on GBPlayerController_IsAlive");
static_assert(sizeof(GBPlayerController_IsAlive) == 0x000001, "Wrong size on GBPlayerController_IsAlive");
static_assert(offsetof(GBPlayerController_IsAlive, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsEditingMission
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsEditingMission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsEditingMission) == 0x000001, "Wrong alignment on GBPlayerController_IsEditingMission");
static_assert(sizeof(GBPlayerController_IsEditingMission) == 0x000001, "Wrong size on GBPlayerController_IsEditingMission");
static_assert(offsetof(GBPlayerController_IsEditingMission, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsEditingMission::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsFirstPerson) == 0x000001, "Wrong alignment on GBPlayerController_IsFirstPerson");
static_assert(sizeof(GBPlayerController_IsFirstPerson) == 0x000001, "Wrong size on GBPlayerController_IsFirstPerson");
static_assert(offsetof(GBPlayerController_IsFirstPerson, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsMuted
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerController_IsMuted final
{
public:
	const class APlayerState*                     TargetPlayerState;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerController_IsMuted) == 0x000008, "Wrong alignment on GBPlayerController_IsMuted");
static_assert(sizeof(GBPlayerController_IsMuted) == 0x000010, "Wrong size on GBPlayerController_IsMuted");
static_assert(offsetof(GBPlayerController_IsMuted, TargetPlayerState) == 0x000000, "Member 'GBPlayerController_IsMuted::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(GBPlayerController_IsMuted, ReturnValue) == 0x000008, "Member 'GBPlayerController_IsMuted::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsTalking
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsTalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsTalking) == 0x000001, "Wrong alignment on GBPlayerController_IsTalking");
static_assert(sizeof(GBPlayerController_IsTalking) == 0x000001, "Wrong size on GBPlayerController_IsTalking");
static_assert(offsetof(GBPlayerController_IsTalking, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsTalking::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsUsingGamepad) == 0x000001, "Wrong alignment on GBPlayerController_IsUsingGamepad");
static_assert(sizeof(GBPlayerController_IsUsingGamepad) == 0x000001, "Wrong size on GBPlayerController_IsUsingGamepad");
static_assert(offsetof(GBPlayerController_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.IsUsingRadio
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_IsUsingRadio final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_IsUsingRadio) == 0x000001, "Wrong alignment on GBPlayerController_IsUsingRadio");
static_assert(sizeof(GBPlayerController_IsUsingRadio) == 0x000001, "Wrong size on GBPlayerController_IsUsingRadio");
static_assert(offsetof(GBPlayerController_IsUsingRadio, ReturnValue) == 0x000000, "Member 'GBPlayerController_IsUsingRadio::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.RemoveBlackOutEvent
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_RemoveBlackOutEvent final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_RemoveBlackOutEvent) == 0x000001, "Wrong alignment on GBPlayerController_RemoveBlackOutEvent");
static_assert(sizeof(GBPlayerController_RemoveBlackOutEvent) == 0x000001, "Wrong size on GBPlayerController_RemoveBlackOutEvent");
static_assert(offsetof(GBPlayerController_RemoveBlackOutEvent, bFadeOut) == 0x000000, "Member 'GBPlayerController_RemoveBlackOutEvent::bFadeOut' has a wrong offset!");

// Function GroundBranch.GBPlayerController.ShowUsagePrompts
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_ShowUsagePrompts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_ShowUsagePrompts) == 0x000001, "Wrong alignment on GBPlayerController_ShowUsagePrompts");
static_assert(sizeof(GBPlayerController_ShowUsagePrompts) == 0x000001, "Wrong size on GBPlayerController_ShowUsagePrompts");
static_assert(offsetof(GBPlayerController_ShowUsagePrompts, ReturnValue) == 0x000000, "Member 'GBPlayerController_ShowUsagePrompts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerController.SpectatorIsFollowing
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerController_SpectatorIsFollowing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerController_SpectatorIsFollowing) == 0x000001, "Wrong alignment on GBPlayerController_SpectatorIsFollowing");
static_assert(sizeof(GBPlayerController_SpectatorIsFollowing) == 0x000001, "Wrong size on GBPlayerController_SpectatorIsFollowing");
static_assert(offsetof(GBPlayerController_SpectatorIsFollowing, ReturnValue) == 0x000000, "Member 'GBPlayerController_SpectatorIsFollowing::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBCheatManager.BugItGoMantis
// 0x0010 (0x0010 - 0x0000)
struct GBCheatManager_BugItGoMantis final
{
public:
	class FString                                 CameraString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_BugItGoMantis) == 0x000008, "Wrong alignment on GBCheatManager_BugItGoMantis");
static_assert(sizeof(GBCheatManager_BugItGoMantis) == 0x000010, "Wrong size on GBCheatManager_BugItGoMantis");
static_assert(offsetof(GBCheatManager_BugItGoMantis, CameraString) == 0x000000, "Member 'GBCheatManager_BugItGoMantis::CameraString' has a wrong offset!");

// Function GroundBranch.GBCheatManager.DebugGameCommand
// 0x0010 (0x0010 - 0x0000)
struct GBCheatManager_DebugGameCommand final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_DebugGameCommand) == 0x000008, "Wrong alignment on GBCheatManager_DebugGameCommand");
static_assert(sizeof(GBCheatManager_DebugGameCommand) == 0x000010, "Wrong size on GBCheatManager_DebugGameCommand");
static_assert(offsetof(GBCheatManager_DebugGameCommand, Parameters) == 0x000000, "Member 'GBCheatManager_DebugGameCommand::Parameters' has a wrong offset!");

// Function GroundBranch.GBCheatManager.RunMissionScript
// 0x0010 (0x0010 - 0x0000)
struct GBCheatManager_RunMissionScript final
{
public:
	class FString                                 ScriptName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_RunMissionScript) == 0x000008, "Wrong alignment on GBCheatManager_RunMissionScript");
static_assert(sizeof(GBCheatManager_RunMissionScript) == 0x000010, "Wrong size on GBCheatManager_RunMissionScript");
static_assert(offsetof(GBCheatManager_RunMissionScript, ScriptName) == 0x000000, "Member 'GBCheatManager_RunMissionScript::ScriptName' has a wrong offset!");

// Function GroundBranch.GBCheatManager.SaveKitForBot
// 0x0020 (0x0020 - 0x0000)
struct GBCheatManager_SaveKitForBot final
{
public:
	class FString                                 TeamName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BotName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_SaveKitForBot) == 0x000008, "Wrong alignment on GBCheatManager_SaveKitForBot");
static_assert(sizeof(GBCheatManager_SaveKitForBot) == 0x000020, "Wrong size on GBCheatManager_SaveKitForBot");
static_assert(offsetof(GBCheatManager_SaveKitForBot, TeamName) == 0x000000, "Member 'GBCheatManager_SaveKitForBot::TeamName' has a wrong offset!");
static_assert(offsetof(GBCheatManager_SaveKitForBot, BotName) == 0x000010, "Member 'GBCheatManager_SaveKitForBot::BotName' has a wrong offset!");

// Function GroundBranch.GBCheatManager.SetCharVoiceId
// 0x0010 (0x0010 - 0x0000)
struct GBCheatManager_SetCharVoiceId final
{
public:
	class FString                                 CharVoiceIdAsString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_SetCharVoiceId) == 0x000008, "Wrong alignment on GBCheatManager_SetCharVoiceId");
static_assert(sizeof(GBCheatManager_SetCharVoiceId) == 0x000010, "Wrong size on GBCheatManager_SetCharVoiceId");
static_assert(offsetof(GBCheatManager_SetCharVoiceId, CharVoiceIdAsString) == 0x000000, "Member 'GBCheatManager_SetCharVoiceId::CharVoiceIdAsString' has a wrong offset!");

// Function GroundBranch.GBCheatManager.SetKit
// 0x0010 (0x0010 - 0x0000)
struct GBCheatManager_SetKit final
{
public:
	class FString                                 KitName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_SetKit) == 0x000008, "Wrong alignment on GBCheatManager_SetKit");
static_assert(sizeof(GBCheatManager_SetKit) == 0x000010, "Wrong size on GBCheatManager_SetKit");
static_assert(offsetof(GBCheatManager_SetKit, KitName) == 0x000000, "Member 'GBCheatManager_SetKit::KitName' has a wrong offset!");

// Function GroundBranch.GBCheatManager.SetTeamElement
// 0x0001 (0x0001 - 0x0000)
struct GBCheatManager_SetTeamElement final
{
public:
	uint8                                         TeamElement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_SetTeamElement) == 0x000001, "Wrong alignment on GBCheatManager_SetTeamElement");
static_assert(sizeof(GBCheatManager_SetTeamElement) == 0x000001, "Wrong size on GBCheatManager_SetTeamElement");
static_assert(offsetof(GBCheatManager_SetTeamElement, TeamElement) == 0x000000, "Member 'GBCheatManager_SetTeamElement::TeamElement' has a wrong offset!");

// Function GroundBranch.GBCheatManager.SetTeamId
// 0x0001 (0x0001 - 0x0000)
struct GBCheatManager_SetTeamId final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_SetTeamId) == 0x000001, "Wrong alignment on GBCheatManager_SetTeamId");
static_assert(sizeof(GBCheatManager_SetTeamId) == 0x000001, "Wrong size on GBCheatManager_SetTeamId");
static_assert(offsetof(GBCheatManager_SetTeamId, TeamId) == 0x000000, "Member 'GBCheatManager_SetTeamId::TeamId' has a wrong offset!");

// Function GroundBranch.GBCheatManager.SetWaterLevel
// 0x0004 (0x0004 - 0x0000)
struct GBCheatManager_SetWaterLevel final
{
public:
	int32                                         InWaterLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_SetWaterLevel) == 0x000004, "Wrong alignment on GBCheatManager_SetWaterLevel");
static_assert(sizeof(GBCheatManager_SetWaterLevel) == 0x000004, "Wrong size on GBCheatManager_SetWaterLevel");
static_assert(offsetof(GBCheatManager_SetWaterLevel, InWaterLevel) == 0x000000, "Member 'GBCheatManager_SetWaterLevel::InWaterLevel' has a wrong offset!");

// Function GroundBranch.GBCheatManager.ZeroSightTo
// 0x0004 (0x0004 - 0x0000)
struct GBCheatManager_ZeroSightTo final
{
public:
	int32                                         NewZeroDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBCheatManager_ZeroSightTo) == 0x000004, "Wrong alignment on GBCheatManager_ZeroSightTo");
static_assert(sizeof(GBCheatManager_ZeroSightTo) == 0x000004, "Wrong size on GBCheatManager_ZeroSightTo");
static_assert(offsetof(GBCheatManager_ZeroSightTo, NewZeroDistance) == 0x000000, "Member 'GBCheatManager_ZeroSightTo::NewZeroDistance' has a wrong offset!");

// Function GroundBranch.GBClimatePreset.GetWeatherPresetProperties
// 0x0030 (0x0030 - 0x0000)
struct GBClimatePreset_GetWeatherPresetProperties final
{
public:
	const class USkyCreatorWeatherPreset*         SelectedWeatherPreset;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherCategory;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherType;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutWeatherDescription;                             // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBClimatePreset_GetWeatherPresetProperties) == 0x000008, "Wrong alignment on GBClimatePreset_GetWeatherPresetProperties");
static_assert(sizeof(GBClimatePreset_GetWeatherPresetProperties) == 0x000030, "Wrong size on GBClimatePreset_GetWeatherPresetProperties");
static_assert(offsetof(GBClimatePreset_GetWeatherPresetProperties, SelectedWeatherPreset) == 0x000000, "Member 'GBClimatePreset_GetWeatherPresetProperties::SelectedWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBClimatePreset_GetWeatherPresetProperties, OutWeatherCategory) == 0x000008, "Member 'GBClimatePreset_GetWeatherPresetProperties::OutWeatherCategory' has a wrong offset!");
static_assert(offsetof(GBClimatePreset_GetWeatherPresetProperties, OutWeatherType) == 0x000010, "Member 'GBClimatePreset_GetWeatherPresetProperties::OutWeatherType' has a wrong offset!");
static_assert(offsetof(GBClimatePreset_GetWeatherPresetProperties, OutWeatherDescription) == 0x000018, "Member 'GBClimatePreset_GetWeatherPresetProperties::OutWeatherDescription' has a wrong offset!");

// Function GroundBranch.GBClimatePreset.GetAllWeatherPresets
// 0x0018 (0x0018 - 0x0000)
struct GBClimatePreset_GetAllWeatherPresets final
{
public:
	bool                                          bAllSeasons;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeason                                       SelectedSeason;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkyCreatorWeatherPreset*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBClimatePreset_GetAllWeatherPresets) == 0x000008, "Wrong alignment on GBClimatePreset_GetAllWeatherPresets");
static_assert(sizeof(GBClimatePreset_GetAllWeatherPresets) == 0x000018, "Wrong size on GBClimatePreset_GetAllWeatherPresets");
static_assert(offsetof(GBClimatePreset_GetAllWeatherPresets, bAllSeasons) == 0x000000, "Member 'GBClimatePreset_GetAllWeatherPresets::bAllSeasons' has a wrong offset!");
static_assert(offsetof(GBClimatePreset_GetAllWeatherPresets, SelectedSeason) == 0x000001, "Member 'GBClimatePreset_GetAllWeatherPresets::SelectedSeason' has a wrong offset!");
static_assert(offsetof(GBClimatePreset_GetAllWeatherPresets, ReturnValue) == 0x000008, "Member 'GBClimatePreset_GetAllWeatherPresets::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBClimatePreset.GetClimateSettings
// 0x0060 (0x0060 - 0x0000)
struct GBClimatePreset_GetClimateSettings final
{
public:
	struct FGBClimateSettings                     ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBClimatePreset_GetClimateSettings) == 0x000008, "Wrong alignment on GBClimatePreset_GetClimateSettings");
static_assert(sizeof(GBClimatePreset_GetClimateSettings) == 0x000060, "Wrong size on GBClimatePreset_GetClimateSettings");
static_assert(offsetof(GBClimatePreset_GetClimateSettings, ReturnValue) == 0x000000, "Member 'GBClimatePreset_GetClimateSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBClimatePreset.GetWeatherPresetsForSeason
// 0x0018 (0x0018 - 0x0000)
struct GBClimatePreset_GetWeatherPresetsForSeason final
{
public:
	ESeason                                       SelectedSeason;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkyCreatorWeatherPreset*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBClimatePreset_GetWeatherPresetsForSeason) == 0x000008, "Wrong alignment on GBClimatePreset_GetWeatherPresetsForSeason");
static_assert(sizeof(GBClimatePreset_GetWeatherPresetsForSeason) == 0x000018, "Wrong size on GBClimatePreset_GetWeatherPresetsForSeason");
static_assert(offsetof(GBClimatePreset_GetWeatherPresetsForSeason, SelectedSeason) == 0x000000, "Member 'GBClimatePreset_GetWeatherPresetsForSeason::SelectedSeason' has a wrong offset!");
static_assert(offsetof(GBClimatePreset_GetWeatherPresetsForSeason, ReturnValue) == 0x000008, "Member 'GBClimatePreset_GetWeatherPresetsForSeason::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBClothing.OnTakeHit
// 0x0014 (0x0014 - 0x0000)
struct GBClothing_OnTakeHit final
{
public:
	class FName                                   RefBoneName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RefPosPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBClothing_OnTakeHit) == 0x000004, "Wrong alignment on GBClothing_OnTakeHit");
static_assert(sizeof(GBClothing_OnTakeHit) == 0x000014, "Wrong size on GBClothing_OnTakeHit");
static_assert(offsetof(GBClothing_OnTakeHit, RefBoneName) == 0x000000, "Member 'GBClothing_OnTakeHit::RefBoneName' has a wrong offset!");
static_assert(offsetof(GBClothing_OnTakeHit, RefPosPosition) == 0x000008, "Member 'GBClothing_OnTakeHit::RefPosPosition' has a wrong offset!");

// Function GroundBranch.GBSmartTriggerVolumeBase.LocalPawnEnteredVolume
// 0x0008 (0x0008 - 0x0000)
struct GBSmartTriggerVolumeBase_LocalPawnEnteredVolume final
{
public:
	class APawn*                                  OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSmartTriggerVolumeBase_LocalPawnEnteredVolume) == 0x000008, "Wrong alignment on GBSmartTriggerVolumeBase_LocalPawnEnteredVolume");
static_assert(sizeof(GBSmartTriggerVolumeBase_LocalPawnEnteredVolume) == 0x000008, "Wrong size on GBSmartTriggerVolumeBase_LocalPawnEnteredVolume");
static_assert(offsetof(GBSmartTriggerVolumeBase_LocalPawnEnteredVolume, OtherPawn) == 0x000000, "Member 'GBSmartTriggerVolumeBase_LocalPawnEnteredVolume::OtherPawn' has a wrong offset!");

// Function GroundBranch.GBSmartTriggerVolumeBase.LocalPawnLeavingVolume
// 0x0008 (0x0008 - 0x0000)
struct GBSmartTriggerVolumeBase_LocalPawnLeavingVolume final
{
public:
	class APawn*                                  OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSmartTriggerVolumeBase_LocalPawnLeavingVolume) == 0x000008, "Wrong alignment on GBSmartTriggerVolumeBase_LocalPawnLeavingVolume");
static_assert(sizeof(GBSmartTriggerVolumeBase_LocalPawnLeavingVolume) == 0x000008, "Wrong size on GBSmartTriggerVolumeBase_LocalPawnLeavingVolume");
static_assert(offsetof(GBSmartTriggerVolumeBase_LocalPawnLeavingVolume, OtherPawn) == 0x000000, "Member 'GBSmartTriggerVolumeBase_LocalPawnLeavingVolume::OtherPawn' has a wrong offset!");

// Function GroundBranch.GBSmartTriggerVolumeBase.ServerPawnEnteredVolume
// 0x0008 (0x0008 - 0x0000)
struct GBSmartTriggerVolumeBase_ServerPawnEnteredVolume final
{
public:
	class APawn*                                  OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSmartTriggerVolumeBase_ServerPawnEnteredVolume) == 0x000008, "Wrong alignment on GBSmartTriggerVolumeBase_ServerPawnEnteredVolume");
static_assert(sizeof(GBSmartTriggerVolumeBase_ServerPawnEnteredVolume) == 0x000008, "Wrong size on GBSmartTriggerVolumeBase_ServerPawnEnteredVolume");
static_assert(offsetof(GBSmartTriggerVolumeBase_ServerPawnEnteredVolume, OtherPawn) == 0x000000, "Member 'GBSmartTriggerVolumeBase_ServerPawnEnteredVolume::OtherPawn' has a wrong offset!");

// Function GroundBranch.GBSmartTriggerVolumeBase.ServerPawnLeavingVolume
// 0x0008 (0x0008 - 0x0000)
struct GBSmartTriggerVolumeBase_ServerPawnLeavingVolume final
{
public:
	class APawn*                                  OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSmartTriggerVolumeBase_ServerPawnLeavingVolume) == 0x000008, "Wrong alignment on GBSmartTriggerVolumeBase_ServerPawnLeavingVolume");
static_assert(sizeof(GBSmartTriggerVolumeBase_ServerPawnLeavingVolume) == 0x000008, "Wrong size on GBSmartTriggerVolumeBase_ServerPawnLeavingVolume");
static_assert(offsetof(GBSmartTriggerVolumeBase_ServerPawnLeavingVolume, OtherPawn) == 0x000000, "Member 'GBSmartTriggerVolumeBase_ServerPawnLeavingVolume::OtherPawn' has a wrong offset!");

// Function GroundBranch.GBColourBlindnessCameraModifier.ApplyPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBColourBlindnessCameraModifier_ApplyPlayerSettings final
{
public:
	class UGBPlayerSettings*                      PlayerSettings;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBColourBlindnessCameraModifier_ApplyPlayerSettings) == 0x000008, "Wrong alignment on GBColourBlindnessCameraModifier_ApplyPlayerSettings");
static_assert(sizeof(GBColourBlindnessCameraModifier_ApplyPlayerSettings) == 0x000008, "Wrong size on GBColourBlindnessCameraModifier_ApplyPlayerSettings");
static_assert(offsetof(GBColourBlindnessCameraModifier_ApplyPlayerSettings, PlayerSettings) == 0x000000, "Member 'GBColourBlindnessCameraModifier_ApplyPlayerSettings::PlayerSettings' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.ActorsToLuaTable
// 0x0068 (0x0068 - 0x0000)
struct GBLuaStaticsLibrary_ActorsToLuaTable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULuaState>                  LuaStateClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_ActorsToLuaTable) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_ActorsToLuaTable");
static_assert(sizeof(GBLuaStaticsLibrary_ActorsToLuaTable) == 0x000068, "Wrong size on GBLuaStaticsLibrary_ActorsToLuaTable");
static_assert(offsetof(GBLuaStaticsLibrary_ActorsToLuaTable, WorldContextObject) == 0x000000, "Member 'GBLuaStaticsLibrary_ActorsToLuaTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_ActorsToLuaTable, LuaStateClass) == 0x000008, "Member 'GBLuaStaticsLibrary_ActorsToLuaTable::LuaStateClass' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_ActorsToLuaTable, Actors) == 0x000010, "Member 'GBLuaStaticsLibrary_ActorsToLuaTable::Actors' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_ActorsToLuaTable, ReturnValue) == 0x000020, "Member 'GBLuaStaticsLibrary_ActorsToLuaTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.BuildRotator
// 0x0060 (0x0060 - 0x0000)
struct GBLuaStaticsLibrary_BuildRotator final
{
public:
	const class ULuaBlueprintPackage*             LuaBlueprintPackage;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLuaValue                              ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_BuildRotator) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_BuildRotator");
static_assert(sizeof(GBLuaStaticsLibrary_BuildRotator) == 0x000060, "Wrong size on GBLuaStaticsLibrary_BuildRotator");
static_assert(offsetof(GBLuaStaticsLibrary_BuildRotator, LuaBlueprintPackage) == 0x000000, "Member 'GBLuaStaticsLibrary_BuildRotator::LuaBlueprintPackage' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_BuildRotator, Rotator) == 0x000008, "Member 'GBLuaStaticsLibrary_BuildRotator::Rotator' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_BuildRotator, ReturnValue) == 0x000018, "Member 'GBLuaStaticsLibrary_BuildRotator::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.BuildVector
// 0x0060 (0x0060 - 0x0000)
struct GBLuaStaticsLibrary_BuildVector final
{
public:
	const class ULuaBlueprintPackage*             LuaBlueprintPackage;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLuaValue                              ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_BuildVector) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_BuildVector");
static_assert(sizeof(GBLuaStaticsLibrary_BuildVector) == 0x000060, "Wrong size on GBLuaStaticsLibrary_BuildVector");
static_assert(offsetof(GBLuaStaticsLibrary_BuildVector, LuaBlueprintPackage) == 0x000000, "Member 'GBLuaStaticsLibrary_BuildVector::LuaBlueprintPackage' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_BuildVector, Vector) == 0x000008, "Member 'GBLuaStaticsLibrary_BuildVector::Vector' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_BuildVector, ReturnValue) == 0x000018, "Member 'GBLuaStaticsLibrary_BuildVector::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.GetArgsFromSingle
// 0x0058 (0x0058 - 0x0000)
struct GBLuaStaticsLibrary_GetArgsFromSingle final
{
public:
	struct FLuaValue                              InArg;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_GetArgsFromSingle) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_GetArgsFromSingle");
static_assert(sizeof(GBLuaStaticsLibrary_GetArgsFromSingle) == 0x000058, "Wrong size on GBLuaStaticsLibrary_GetArgsFromSingle");
static_assert(offsetof(GBLuaStaticsLibrary_GetArgsFromSingle, InArg) == 0x000000, "Member 'GBLuaStaticsLibrary_GetArgsFromSingle::InArg' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_GetArgsFromSingle, ReturnValue) == 0x000048, "Member 'GBLuaStaticsLibrary_GetArgsFromSingle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.GetEmptyArgs
// 0x0010 (0x0010 - 0x0000)
struct GBLuaStaticsLibrary_GetEmptyArgs final
{
public:
	TArray<struct FLuaValue>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_GetEmptyArgs) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_GetEmptyArgs");
static_assert(sizeof(GBLuaStaticsLibrary_GetEmptyArgs) == 0x000010, "Wrong size on GBLuaStaticsLibrary_GetEmptyArgs");
static_assert(offsetof(GBLuaStaticsLibrary_GetEmptyArgs, ReturnValue) == 0x000000, "Member 'GBLuaStaticsLibrary_GetEmptyArgs::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.LuaTableToRotator
// 0x0058 (0x0058 - 0x0000)
struct GBLuaStaticsLibrary_LuaTableToRotator final
{
public:
	struct FLuaValue                              InValue;                                           // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBLuaStaticsLibrary_LuaTableToRotator) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_LuaTableToRotator");
static_assert(sizeof(GBLuaStaticsLibrary_LuaTableToRotator) == 0x000058, "Wrong size on GBLuaStaticsLibrary_LuaTableToRotator");
static_assert(offsetof(GBLuaStaticsLibrary_LuaTableToRotator, InValue) == 0x000000, "Member 'GBLuaStaticsLibrary_LuaTableToRotator::InValue' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaTableToRotator, ReturnValue) == 0x000048, "Member 'GBLuaStaticsLibrary_LuaTableToRotator::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToCharacter
// 0x0058 (0x0058 - 0x0000)
struct GBLuaStaticsLibrary_LuaValueToCharacter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              InValue;                                           // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGBCharacter*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_LuaValueToCharacter) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_LuaValueToCharacter");
static_assert(sizeof(GBLuaStaticsLibrary_LuaValueToCharacter) == 0x000058, "Wrong size on GBLuaStaticsLibrary_LuaValueToCharacter");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToCharacter, WorldContextObject) == 0x000000, "Member 'GBLuaStaticsLibrary_LuaValueToCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToCharacter, InValue) == 0x000008, "Member 'GBLuaStaticsLibrary_LuaValueToCharacter::InValue' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToCharacter, ReturnValue) == 0x000050, "Member 'GBLuaStaticsLibrary_LuaValueToCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToPlayerController
// 0x0058 (0x0058 - 0x0000)
struct GBLuaStaticsLibrary_LuaValueToPlayerController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              InValue;                                           // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGBPlayerController*                    ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_LuaValueToPlayerController) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_LuaValueToPlayerController");
static_assert(sizeof(GBLuaStaticsLibrary_LuaValueToPlayerController) == 0x000058, "Wrong size on GBLuaStaticsLibrary_LuaValueToPlayerController");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToPlayerController, WorldContextObject) == 0x000000, "Member 'GBLuaStaticsLibrary_LuaValueToPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToPlayerController, InValue) == 0x000008, "Member 'GBLuaStaticsLibrary_LuaValueToPlayerController::InValue' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToPlayerController, ReturnValue) == 0x000050, "Member 'GBLuaStaticsLibrary_LuaValueToPlayerController::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToPlayerState
// 0x0058 (0x0058 - 0x0000)
struct GBLuaStaticsLibrary_LuaValueToPlayerState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              InValue;                                           // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGBPlayerState*                         ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_LuaValueToPlayerState) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_LuaValueToPlayerState");
static_assert(sizeof(GBLuaStaticsLibrary_LuaValueToPlayerState) == 0x000058, "Wrong size on GBLuaStaticsLibrary_LuaValueToPlayerState");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToPlayerState, WorldContextObject) == 0x000000, "Member 'GBLuaStaticsLibrary_LuaValueToPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToPlayerState, InValue) == 0x000008, "Member 'GBLuaStaticsLibrary_LuaValueToPlayerState::InValue' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToPlayerState, ReturnValue) == 0x000050, "Member 'GBLuaStaticsLibrary_LuaValueToPlayerState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToScript
// 0x0090 (0x0090 - 0x0000)
struct GBLuaStaticsLibrary_LuaValueToScript final
{
public:
	struct FLuaValue                              InValue;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaStaticsLibrary_LuaValueToScript) == 0x000008, "Wrong alignment on GBLuaStaticsLibrary_LuaValueToScript");
static_assert(sizeof(GBLuaStaticsLibrary_LuaValueToScript) == 0x000090, "Wrong size on GBLuaStaticsLibrary_LuaValueToScript");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToScript, InValue) == 0x000000, "Member 'GBLuaStaticsLibrary_LuaValueToScript::InValue' has a wrong offset!");
static_assert(offsetof(GBLuaStaticsLibrary_LuaValueToScript, ReturnValue) == 0x000048, "Member 'GBLuaStaticsLibrary_LuaValueToScript::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.SetObjectiveMarkerSize
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_SetObjectiveMarkerSize final
{
public:
	struct FVector2D                              NewObjectiveMarkerSize;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_SetObjectiveMarkerSize) == 0x000004, "Wrong alignment on GBObjectiveMarker_SetObjectiveMarkerSize");
static_assert(sizeof(GBObjectiveMarker_SetObjectiveMarkerSize) == 0x000008, "Wrong size on GBObjectiveMarker_SetObjectiveMarkerSize");
static_assert(offsetof(GBObjectiveMarker_SetObjectiveMarkerSize, NewObjectiveMarkerSize) == 0x000000, "Member 'GBObjectiveMarker_SetObjectiveMarkerSize::NewObjectiveMarkerSize' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.SetObjectiveMarkerType
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_SetObjectiveMarkerType final
{
public:
	class FName                                   NewObjectiveMarkerType;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_SetObjectiveMarkerType) == 0x000004, "Wrong alignment on GBObjectiveMarker_SetObjectiveMarkerType");
static_assert(sizeof(GBObjectiveMarker_SetObjectiveMarkerType) == 0x000008, "Wrong size on GBObjectiveMarker_SetObjectiveMarkerType");
static_assert(offsetof(GBObjectiveMarker_SetObjectiveMarkerType, NewObjectiveMarkerType) == 0x000000, "Member 'GBObjectiveMarker_SetObjectiveMarkerType::NewObjectiveMarkerType' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.SetObjectiveName
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_SetObjectiveName final
{
public:
	class FName                                   Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_SetObjectiveName) == 0x000004, "Wrong alignment on GBObjectiveMarker_SetObjectiveName");
static_assert(sizeof(GBObjectiveMarker_SetObjectiveName) == 0x000008, "Wrong size on GBObjectiveMarker_SetObjectiveName");
static_assert(offsetof(GBObjectiveMarker_SetObjectiveName, Value) == 0x000000, "Member 'GBObjectiveMarker_SetObjectiveName::Value' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.GetObjectiveMarkerSize
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_GetObjectiveMarkerSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_GetObjectiveMarkerSize) == 0x000004, "Wrong alignment on GBObjectiveMarker_GetObjectiveMarkerSize");
static_assert(sizeof(GBObjectiveMarker_GetObjectiveMarkerSize) == 0x000008, "Wrong size on GBObjectiveMarker_GetObjectiveMarkerSize");
static_assert(offsetof(GBObjectiveMarker_GetObjectiveMarkerSize, ReturnValue) == 0x000000, "Member 'GBObjectiveMarker_GetObjectiveMarkerSize::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.GetObjectiveMarkerType
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_GetObjectiveMarkerType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_GetObjectiveMarkerType) == 0x000004, "Wrong alignment on GBObjectiveMarker_GetObjectiveMarkerType");
static_assert(sizeof(GBObjectiveMarker_GetObjectiveMarkerType) == 0x000008, "Wrong size on GBObjectiveMarker_GetObjectiveMarkerType");
static_assert(offsetof(GBObjectiveMarker_GetObjectiveMarkerType, ReturnValue) == 0x000000, "Member 'GBObjectiveMarker_GetObjectiveMarkerType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.GetObjectiveName
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_GetObjectiveName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_GetObjectiveName) == 0x000004, "Wrong alignment on GBObjectiveMarker_GetObjectiveName");
static_assert(sizeof(GBObjectiveMarker_GetObjectiveName) == 0x000008, "Wrong size on GBObjectiveMarker_GetObjectiveName");
static_assert(offsetof(GBObjectiveMarker_GetObjectiveName, ReturnValue) == 0x000000, "Member 'GBObjectiveMarker_GetObjectiveName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBObjectiveMarker.GetObjectiveSprite
// 0x0008 (0x0008 - 0x0000)
struct GBObjectiveMarker_GetObjectiveSprite final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBObjectiveMarker_GetObjectiveSprite) == 0x000008, "Wrong alignment on GBObjectiveMarker_GetObjectiveSprite");
static_assert(sizeof(GBObjectiveMarker_GetObjectiveSprite) == 0x000008, "Wrong size on GBObjectiveMarker_GetObjectiveSprite");
static_assert(offsetof(GBObjectiveMarker_GetObjectiveSprite, ReturnValue) == 0x000000, "Member 'GBObjectiveMarker_GetObjectiveSprite::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDialogWidget.SetDialogName
// 0x0008 (0x0008 - 0x0000)
struct GBDialogWidget_SetDialogName final
{
public:
	class FName                                   InDialogName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDialogWidget_SetDialogName) == 0x000004, "Wrong alignment on GBDialogWidget_SetDialogName");
static_assert(sizeof(GBDialogWidget_SetDialogName) == 0x000008, "Wrong size on GBDialogWidget_SetDialogName");
static_assert(offsetof(GBDialogWidget_SetDialogName, InDialogName) == 0x000000, "Member 'GBDialogWidget_SetDialogName::InDialogName' has a wrong offset!");

// Function GroundBranch.GBDialogWidget.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct GBDialogWidget_SetMessage final
{
public:
	class FText                                   InMessage;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDialogWidget_SetMessage) == 0x000008, "Wrong alignment on GBDialogWidget_SetMessage");
static_assert(sizeof(GBDialogWidget_SetMessage) == 0x000018, "Wrong size on GBDialogWidget_SetMessage");
static_assert(offsetof(GBDialogWidget_SetMessage, InMessage) == 0x000000, "Member 'GBDialogWidget_SetMessage::InMessage' has a wrong offset!");

// Function GroundBranch.GBDialogWidget.SetMessageDialogType
// 0x0001 (0x0001 - 0x0000)
struct GBDialogWidget_SetMessageDialogType final
{
public:
	EGBMessageDialogType                          InMessageDialogType;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDialogWidget_SetMessageDialogType) == 0x000001, "Wrong alignment on GBDialogWidget_SetMessageDialogType");
static_assert(sizeof(GBDialogWidget_SetMessageDialogType) == 0x000001, "Wrong size on GBDialogWidget_SetMessageDialogType");
static_assert(offsetof(GBDialogWidget_SetMessageDialogType, InMessageDialogType) == 0x000000, "Member 'GBDialogWidget_SetMessageDialogType::InMessageDialogType' has a wrong offset!");

// Function GroundBranch.GBDialogWidget.SetTerminationTime
// 0x0004 (0x0004 - 0x0000)
struct GBDialogWidget_SetTerminationTime final
{
public:
	float                                         SecondsBeforeKill;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDialogWidget_SetTerminationTime) == 0x000004, "Wrong alignment on GBDialogWidget_SetTerminationTime");
static_assert(sizeof(GBDialogWidget_SetTerminationTime) == 0x000004, "Wrong size on GBDialogWidget_SetTerminationTime");
static_assert(offsetof(GBDialogWidget_SetTerminationTime, SecondsBeforeKill) == 0x000000, "Member 'GBDialogWidget_SetTerminationTime::SecondsBeforeKill' has a wrong offset!");

// Function GroundBranch.GBDialogWidget.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct GBDialogWidget_SetTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDialogWidget_SetTitle) == 0x000008, "Wrong alignment on GBDialogWidget_SetTitle");
static_assert(sizeof(GBDialogWidget_SetTitle) == 0x000018, "Wrong size on GBDialogWidget_SetTitle");
static_assert(offsetof(GBDialogWidget_SetTitle, InTitle) == 0x000000, "Member 'GBDialogWidget_SetTitle::InTitle' has a wrong offset!");

// Function GroundBranch.GBDirectionalSunlight.SetLightSourceAngle
// 0x0004 (0x0004 - 0x0000)
struct GBDirectionalSunlight_SetLightSourceAngle final
{
public:
	float                                         NewSourceAngle;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDirectionalSunlight_SetLightSourceAngle) == 0x000004, "Wrong alignment on GBDirectionalSunlight_SetLightSourceAngle");
static_assert(sizeof(GBDirectionalSunlight_SetLightSourceAngle) == 0x000004, "Wrong size on GBDirectionalSunlight_SetLightSourceAngle");
static_assert(offsetof(GBDirectionalSunlight_SetLightSourceAngle, NewSourceAngle) == 0x000000, "Member 'GBDirectionalSunlight_SetLightSourceAngle::NewSourceAngle' has a wrong offset!");

// Function GroundBranch.GBDirectionalSunlight.UpdateCloudScatteredLuminance
// 0x0010 (0x0010 - 0x0000)
struct GBDirectionalSunlight_UpdateCloudScatteredLuminance final
{
public:
	struct FLinearColor                           NewScale;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDirectionalSunlight_UpdateCloudScatteredLuminance) == 0x000004, "Wrong alignment on GBDirectionalSunlight_UpdateCloudScatteredLuminance");
static_assert(sizeof(GBDirectionalSunlight_UpdateCloudScatteredLuminance) == 0x000010, "Wrong size on GBDirectionalSunlight_UpdateCloudScatteredLuminance");
static_assert(offsetof(GBDirectionalSunlight_UpdateCloudScatteredLuminance, NewScale) == 0x000000, "Member 'GBDirectionalSunlight_UpdateCloudScatteredLuminance::NewScale' has a wrong offset!");

// Function GroundBranch.GBDirectionalSunlight.GetSavedCloudScatteredLuminance
// 0x0010 (0x0010 - 0x0000)
struct GBDirectionalSunlight_GetSavedCloudScatteredLuminance final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDirectionalSunlight_GetSavedCloudScatteredLuminance) == 0x000004, "Wrong alignment on GBDirectionalSunlight_GetSavedCloudScatteredLuminance");
static_assert(sizeof(GBDirectionalSunlight_GetSavedCloudScatteredLuminance) == 0x000010, "Wrong size on GBDirectionalSunlight_GetSavedCloudScatteredLuminance");
static_assert(offsetof(GBDirectionalSunlight_GetSavedCloudScatteredLuminance, ReturnValue) == 0x000000, "Member 'GBDirectionalSunlight_GetSavedCloudScatteredLuminance::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMuzzleDevice.GetAudioSignalRadius
// 0x0004 (0x0004 - 0x0000)
struct GBMuzzleDevice_GetAudioSignalRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMuzzleDevice_GetAudioSignalRadius) == 0x000004, "Wrong alignment on GBMuzzleDevice_GetAudioSignalRadius");
static_assert(sizeof(GBMuzzleDevice_GetAudioSignalRadius) == 0x000004, "Wrong size on GBMuzzleDevice_GetAudioSignalRadius");
static_assert(offsetof(GBMuzzleDevice_GetAudioSignalRadius, ReturnValue) == 0x000000, "Member 'GBMuzzleDevice_GetAudioSignalRadius::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMuzzleDevice.GetMuzzleDeviceThread
// 0x0008 (0x0008 - 0x0000)
struct GBMuzzleDevice_GetMuzzleDeviceThread final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMuzzleDevice_GetMuzzleDeviceThread) == 0x000004, "Wrong alignment on GBMuzzleDevice_GetMuzzleDeviceThread");
static_assert(sizeof(GBMuzzleDevice_GetMuzzleDeviceThread) == 0x000008, "Wrong size on GBMuzzleDevice_GetMuzzleDeviceThread");
static_assert(offsetof(GBMuzzleDevice_GetMuzzleDeviceThread, ReturnValue) == 0x000000, "Member 'GBMuzzleDevice_GetMuzzleDeviceThread::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMuzzleDevice.GetSuppressorSwitchValue
// 0x0008 (0x0008 - 0x0000)
struct GBMuzzleDevice_GetSuppressorSwitchValue final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMuzzleDevice_GetSuppressorSwitchValue) == 0x000004, "Wrong alignment on GBMuzzleDevice_GetSuppressorSwitchValue");
static_assert(sizeof(GBMuzzleDevice_GetSuppressorSwitchValue) == 0x000008, "Wrong size on GBMuzzleDevice_GetSuppressorSwitchValue");
static_assert(offsetof(GBMuzzleDevice_GetSuppressorSwitchValue, ReturnValue) == 0x000000, "Member 'GBMuzzleDevice_GetSuppressorSwitchValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.NetMulticastDestroyDoor
// 0x0018 (0x0018 - 0x0000)
struct GBDoorSwinging_NetMulticastDestroyDoor final
{
public:
	struct FVector_NetQuantize10                  DamageOrigin;                                      // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              DamageDir;                                         // 0x000C(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_NetMulticastDestroyDoor) == 0x000004, "Wrong alignment on GBDoorSwinging_NetMulticastDestroyDoor");
static_assert(sizeof(GBDoorSwinging_NetMulticastDestroyDoor) == 0x000018, "Wrong size on GBDoorSwinging_NetMulticastDestroyDoor");
static_assert(offsetof(GBDoorSwinging_NetMulticastDestroyDoor, DamageOrigin) == 0x000000, "Member 'GBDoorSwinging_NetMulticastDestroyDoor::DamageOrigin' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_NetMulticastDestroyDoor, DamageDir) == 0x00000C, "Member 'GBDoorSwinging_NetMulticastDestroyDoor::DamageDir' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.NetMulticastUpdateYaw
// 0x000C (0x000C - 0x0000)
struct GBDoorSwinging_NetMulticastUpdateYaw final
{
public:
	struct FGBReplicatedSwing                     Swing;                                             // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_NetMulticastUpdateYaw) == 0x000004, "Wrong alignment on GBDoorSwinging_NetMulticastUpdateYaw");
static_assert(sizeof(GBDoorSwinging_NetMulticastUpdateYaw) == 0x00000C, "Wrong size on GBDoorSwinging_NetMulticastUpdateYaw");
static_assert(offsetof(GBDoorSwinging_NetMulticastUpdateYaw, Swing) == 0x000000, "Member 'GBDoorSwinging_NetMulticastUpdateYaw::Swing' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.OnAdjoiningDoorClosing
// 0x0008 (0x0008 - 0x0000)
struct GBDoorSwinging_OnAdjoiningDoorClosing final
{
public:
	class AGBDoorSwinging*                        OtherDoor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_OnAdjoiningDoorClosing) == 0x000008, "Wrong alignment on GBDoorSwinging_OnAdjoiningDoorClosing");
static_assert(sizeof(GBDoorSwinging_OnAdjoiningDoorClosing) == 0x000008, "Wrong size on GBDoorSwinging_OnAdjoiningDoorClosing");
static_assert(offsetof(GBDoorSwinging_OnAdjoiningDoorClosing, OtherDoor) == 0x000000, "Member 'GBDoorSwinging_OnAdjoiningDoorClosing::OtherDoor' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.OnAdjoiningDoorOpening
// 0x0008 (0x0008 - 0x0000)
struct GBDoorSwinging_OnAdjoiningDoorOpening final
{
public:
	class AGBDoorSwinging*                        OtherDoor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_OnAdjoiningDoorOpening) == 0x000008, "Wrong alignment on GBDoorSwinging_OnAdjoiningDoorOpening");
static_assert(sizeof(GBDoorSwinging_OnAdjoiningDoorOpening) == 0x000008, "Wrong size on GBDoorSwinging_OnAdjoiningDoorOpening");
static_assert(offsetof(GBDoorSwinging_OnAdjoiningDoorOpening, OtherDoor) == 0x000000, "Member 'GBDoorSwinging_OnAdjoiningDoorOpening::OtherDoor' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.OnDoorDestroyedEvent
// 0x0018 (0x0018 - 0x0000)
struct GBDoorSwinging_OnDoorDestroyedEvent final
{
public:
	struct FVector                                DamageOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageDir;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_OnDoorDestroyedEvent) == 0x000004, "Wrong alignment on GBDoorSwinging_OnDoorDestroyedEvent");
static_assert(sizeof(GBDoorSwinging_OnDoorDestroyedEvent) == 0x000018, "Wrong size on GBDoorSwinging_OnDoorDestroyedEvent");
static_assert(offsetof(GBDoorSwinging_OnDoorDestroyedEvent, DamageOrigin) == 0x000000, "Member 'GBDoorSwinging_OnDoorDestroyedEvent::DamageOrigin' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_OnDoorDestroyedEvent, DamageDir) == 0x00000C, "Member 'GBDoorSwinging_OnDoorDestroyedEvent::DamageDir' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.OnPhysicsCollision
// 0x00B0 (0x00B0 - 0x0000)
struct GBDoorSwinging_OnPhysicsCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBDoorSwinging_OnPhysicsCollision) == 0x000008, "Wrong alignment on GBDoorSwinging_OnPhysicsCollision");
static_assert(sizeof(GBDoorSwinging_OnPhysicsCollision) == 0x0000B0, "Wrong size on GBDoorSwinging_OnPhysicsCollision");
static_assert(offsetof(GBDoorSwinging_OnPhysicsCollision, OverlappedComponent) == 0x000000, "Member 'GBDoorSwinging_OnPhysicsCollision::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_OnPhysicsCollision, OtherActor) == 0x000008, "Member 'GBDoorSwinging_OnPhysicsCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_OnPhysicsCollision, OtherComp) == 0x000010, "Member 'GBDoorSwinging_OnPhysicsCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_OnPhysicsCollision, NormalImpulse) == 0x000018, "Member 'GBDoorSwinging_OnPhysicsCollision::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_OnPhysicsCollision, Hit) == 0x000024, "Member 'GBDoorSwinging_OnPhysicsCollision::Hit' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.OnRep_DoorDestroyed
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_OnRep_DoorDestroyed final
{
public:
	bool                                          bLastDoorDestroyed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_OnRep_DoorDestroyed) == 0x000001, "Wrong alignment on GBDoorSwinging_OnRep_DoorDestroyed");
static_assert(sizeof(GBDoorSwinging_OnRep_DoorDestroyed) == 0x000001, "Wrong size on GBDoorSwinging_OnRep_DoorDestroyed");
static_assert(offsetof(GBDoorSwinging_OnRep_DoorDestroyed, bLastDoorDestroyed) == 0x000000, "Member 'GBDoorSwinging_OnRep_DoorDestroyed::bLastDoorDestroyed' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.SetAdjoiningDoor
// 0x0008 (0x0008 - 0x0000)
struct GBDoorSwinging_SetAdjoiningDoor final
{
public:
	class AGBDoorSwinging*                        NewAdjoiningDoor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_SetAdjoiningDoor) == 0x000008, "Wrong alignment on GBDoorSwinging_SetAdjoiningDoor");
static_assert(sizeof(GBDoorSwinging_SetAdjoiningDoor) == 0x000008, "Wrong size on GBDoorSwinging_SetAdjoiningDoor");
static_assert(offsetof(GBDoorSwinging_SetAdjoiningDoor, NewAdjoiningDoor) == 0x000000, "Member 'GBDoorSwinging_SetAdjoiningDoor::NewAdjoiningDoor' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.SetAdjoiningDoorBehaviour
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_SetAdjoiningDoorBehaviour final
{
public:
	EGBAdjoiningDoorBehaviour                     NewAdjoiningDoorBehaviour;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_SetAdjoiningDoorBehaviour) == 0x000001, "Wrong alignment on GBDoorSwinging_SetAdjoiningDoorBehaviour");
static_assert(sizeof(GBDoorSwinging_SetAdjoiningDoorBehaviour) == 0x000001, "Wrong size on GBDoorSwinging_SetAdjoiningDoorBehaviour");
static_assert(offsetof(GBDoorSwinging_SetAdjoiningDoorBehaviour, NewAdjoiningDoorBehaviour) == 0x000000, "Member 'GBDoorSwinging_SetAdjoiningDoorBehaviour::NewAdjoiningDoorBehaviour' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.SetDoorYawAngle
// 0x0004 (0x0004 - 0x0000)
struct GBDoorSwinging_SetDoorYawAngle final
{
public:
	float                                         NewYawAngle;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_SetDoorYawAngle) == 0x000004, "Wrong alignment on GBDoorSwinging_SetDoorYawAngle");
static_assert(sizeof(GBDoorSwinging_SetDoorYawAngle) == 0x000004, "Wrong size on GBDoorSwinging_SetDoorYawAngle");
static_assert(offsetof(GBDoorSwinging_SetDoorYawAngle, NewYawAngle) == 0x000000, "Member 'GBDoorSwinging_SetDoorYawAngle::NewYawAngle' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.SetDoorYawSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBDoorSwinging_SetDoorYawSpeed final
{
public:
	float                                         NewYawSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_SetDoorYawSpeed) == 0x000004, "Wrong alignment on GBDoorSwinging_SetDoorYawSpeed");
static_assert(sizeof(GBDoorSwinging_SetDoorYawSpeed) == 0x000004, "Wrong size on GBDoorSwinging_SetDoorYawSpeed");
static_assert(offsetof(GBDoorSwinging_SetDoorYawSpeed, NewYawSpeed) == 0x000000, "Member 'GBDoorSwinging_SetDoorYawSpeed::NewYawSpeed' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.GetControllerRelativeSwingDir
// 0x0010 (0x0010 - 0x0000)
struct GBDoorSwinging_GetControllerRelativeSwingDir final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBPlayerRelativeSwingDir                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBDoorSwinging_GetControllerRelativeSwingDir) == 0x000008, "Wrong alignment on GBDoorSwinging_GetControllerRelativeSwingDir");
static_assert(sizeof(GBDoorSwinging_GetControllerRelativeSwingDir) == 0x000010, "Wrong size on GBDoorSwinging_GetControllerRelativeSwingDir");
static_assert(offsetof(GBDoorSwinging_GetControllerRelativeSwingDir, Controller) == 0x000000, "Member 'GBDoorSwinging_GetControllerRelativeSwingDir::Controller' has a wrong offset!");
static_assert(offsetof(GBDoorSwinging_GetControllerRelativeSwingDir, ReturnValue) == 0x000008, "Member 'GBDoorSwinging_GetControllerRelativeSwingDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.GetDoorScale
// 0x000C (0x000C - 0x0000)
struct GBDoorSwinging_GetDoorScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_GetDoorScale) == 0x000004, "Wrong alignment on GBDoorSwinging_GetDoorScale");
static_assert(sizeof(GBDoorSwinging_GetDoorScale) == 0x00000C, "Wrong size on GBDoorSwinging_GetDoorScale");
static_assert(offsetof(GBDoorSwinging_GetDoorScale, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_GetDoorScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.GetDoorYawAngle
// 0x0004 (0x0004 - 0x0000)
struct GBDoorSwinging_GetDoorYawAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_GetDoorYawAngle) == 0x000004, "Wrong alignment on GBDoorSwinging_GetDoorYawAngle");
static_assert(sizeof(GBDoorSwinging_GetDoorYawAngle) == 0x000004, "Wrong size on GBDoorSwinging_GetDoorYawAngle");
static_assert(offsetof(GBDoorSwinging_GetDoorYawAngle, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_GetDoorYawAngle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.GetDoorYawSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBDoorSwinging_GetDoorYawSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_GetDoorYawSpeed) == 0x000004, "Wrong alignment on GBDoorSwinging_GetDoorYawSpeed");
static_assert(sizeof(GBDoorSwinging_GetDoorYawSpeed) == 0x000004, "Wrong size on GBDoorSwinging_GetDoorYawSpeed");
static_assert(offsetof(GBDoorSwinging_GetDoorYawSpeed, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_GetDoorYawSpeed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.IsClosed
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_IsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_IsClosed) == 0x000001, "Wrong alignment on GBDoorSwinging_IsClosed");
static_assert(sizeof(GBDoorSwinging_IsClosed) == 0x000001, "Wrong size on GBDoorSwinging_IsClosed");
static_assert(offsetof(GBDoorSwinging_IsClosed, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_IsClosed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.IsClosing
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_IsClosing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_IsClosing) == 0x000001, "Wrong alignment on GBDoorSwinging_IsClosing");
static_assert(sizeof(GBDoorSwinging_IsClosing) == 0x000001, "Wrong size on GBDoorSwinging_IsClosing");
static_assert(offsetof(GBDoorSwinging_IsClosing, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_IsClosing::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.IsDestroyed
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_IsDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_IsDestroyed) == 0x000001, "Wrong alignment on GBDoorSwinging_IsDestroyed");
static_assert(sizeof(GBDoorSwinging_IsDestroyed) == 0x000001, "Wrong size on GBDoorSwinging_IsDestroyed");
static_assert(offsetof(GBDoorSwinging_IsDestroyed, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_IsDestroyed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.IsOpenedEnoughForAIToUse
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_IsOpenedEnoughForAIToUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_IsOpenedEnoughForAIToUse) == 0x000001, "Wrong alignment on GBDoorSwinging_IsOpenedEnoughForAIToUse");
static_assert(sizeof(GBDoorSwinging_IsOpenedEnoughForAIToUse) == 0x000001, "Wrong size on GBDoorSwinging_IsOpenedEnoughForAIToUse");
static_assert(offsetof(GBDoorSwinging_IsOpenedEnoughForAIToUse, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_IsOpenedEnoughForAIToUse::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDoorSwinging.IsOpening
// 0x0001 (0x0001 - 0x0000)
struct GBDoorSwinging_IsOpening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDoorSwinging_IsOpening) == 0x000001, "Wrong alignment on GBDoorSwinging_IsOpening");
static_assert(sizeof(GBDoorSwinging_IsOpening) == 0x000001, "Wrong size on GBDoorSwinging_IsOpening");
static_assert(offsetof(GBDoorSwinging_IsOpening, ReturnValue) == 0x000000, "Member 'GBDoorSwinging_IsOpening::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDroppedInvItem.OnPhysicsCollision
// 0x00B0 (0x00B0 - 0x0000)
struct GBDroppedInvItem_OnPhysicsCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBDroppedInvItem_OnPhysicsCollision) == 0x000008, "Wrong alignment on GBDroppedInvItem_OnPhysicsCollision");
static_assert(sizeof(GBDroppedInvItem_OnPhysicsCollision) == 0x0000B0, "Wrong size on GBDroppedInvItem_OnPhysicsCollision");
static_assert(offsetof(GBDroppedInvItem_OnPhysicsCollision, OverlappedComponent) == 0x000000, "Member 'GBDroppedInvItem_OnPhysicsCollision::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GBDroppedInvItem_OnPhysicsCollision, OtherActor) == 0x000008, "Member 'GBDroppedInvItem_OnPhysicsCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(GBDroppedInvItem_OnPhysicsCollision, OtherComp) == 0x000010, "Member 'GBDroppedInvItem_OnPhysicsCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(GBDroppedInvItem_OnPhysicsCollision, NormalImpulse) == 0x000018, "Member 'GBDroppedInvItem_OnPhysicsCollision::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GBDroppedInvItem_OnPhysicsCollision, Hit) == 0x000024, "Member 'GBDroppedInvItem_OnPhysicsCollision::Hit' has a wrong offset!");

// Function GroundBranch.GBDroppedInvItem.SetAssociatedInvItem
// 0x0008 (0x0008 - 0x0000)
struct GBDroppedInvItem_SetAssociatedInvItem final
{
public:
	class AGBInvItem*                             NewAssociatedInvItem;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDroppedInvItem_SetAssociatedInvItem) == 0x000008, "Wrong alignment on GBDroppedInvItem_SetAssociatedInvItem");
static_assert(sizeof(GBDroppedInvItem_SetAssociatedInvItem) == 0x000008, "Wrong size on GBDroppedInvItem_SetAssociatedInvItem");
static_assert(offsetof(GBDroppedInvItem_SetAssociatedInvItem, NewAssociatedInvItem) == 0x000000, "Member 'GBDroppedInvItem_SetAssociatedInvItem::NewAssociatedInvItem' has a wrong offset!");

// Function GroundBranch.GBDroppedInvItem.GetAssociatedInvItem
// 0x0008 (0x0008 - 0x0000)
struct GBDroppedInvItem_GetAssociatedInvItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDroppedInvItem_GetAssociatedInvItem) == 0x000008, "Wrong alignment on GBDroppedInvItem_GetAssociatedInvItem");
static_assert(sizeof(GBDroppedInvItem_GetAssociatedInvItem) == 0x000008, "Wrong size on GBDroppedInvItem_GetAssociatedInvItem");
static_assert(offsetof(GBDroppedInvItem_GetAssociatedInvItem, ReturnValue) == 0x000000, "Member 'GBDroppedInvItem_GetAssociatedInvItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBDroppedInvItem.IsImportant
// 0x0001 (0x0001 - 0x0000)
struct GBDroppedInvItem_IsImportant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBDroppedInvItem_IsImportant) == 0x000001, "Wrong alignment on GBDroppedInvItem_IsImportant");
static_assert(sizeof(GBDroppedInvItem_IsImportant) == 0x000001, "Wrong size on GBDroppedInvItem_IsImportant");
static_assert(offsetof(GBDroppedInvItem_IsImportant, ReturnValue) == 0x000000, "Member 'GBDroppedInvItem_IsImportant::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEjectComponent.IsManuallyEjected
// 0x0001 (0x0001 - 0x0000)
struct GBEjectComponent_IsManuallyEjected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEjectComponent_IsManuallyEjected) == 0x000001, "Wrong alignment on GBEjectComponent_IsManuallyEjected");
static_assert(sizeof(GBEjectComponent_IsManuallyEjected) == 0x000001, "Wrong size on GBEjectComponent_IsManuallyEjected");
static_assert(offsetof(GBEjectComponent_IsManuallyEjected, ReturnValue) == 0x000000, "Member 'GBEjectComponent_IsManuallyEjected::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayAbility.GetAvatarKytController
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayAbility_GetAvatarKytController final
{
public:
	class AGBKytController*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayAbility_GetAvatarKytController) == 0x000008, "Wrong alignment on GBGameplayAbility_GetAvatarKytController");
static_assert(sizeof(GBGameplayAbility_GetAvatarKytController) == 0x000008, "Wrong size on GBGameplayAbility_GetAvatarKytController");
static_assert(offsetof(GBGameplayAbility_GetAvatarKytController, ReturnValue) == 0x000000, "Member 'GBGameplayAbility_GetAvatarKytController::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayAbility.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayAbility_GetCharacter final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayAbility_GetCharacter) == 0x000008, "Wrong alignment on GBGameplayAbility_GetCharacter");
static_assert(sizeof(GBGameplayAbility_GetCharacter) == 0x000008, "Wrong size on GBGameplayAbility_GetCharacter");
static_assert(offsetof(GBGameplayAbility_GetCharacter, ReturnValue) == 0x000000, "Member 'GBGameplayAbility_GetCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayAbility.GetOwnerKytController
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayAbility_GetOwnerKytController final
{
public:
	class AGBKytController*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayAbility_GetOwnerKytController) == 0x000008, "Wrong alignment on GBGameplayAbility_GetOwnerKytController");
static_assert(sizeof(GBGameplayAbility_GetOwnerKytController) == 0x000008, "Wrong size on GBGameplayAbility_GetOwnerKytController");
static_assert(offsetof(GBGameplayAbility_GetOwnerKytController, ReturnValue) == 0x000000, "Member 'GBGameplayAbility_GetOwnerKytController::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayAbility.IsLocallyControlledPlayer
// 0x0001 (0x0001 - 0x0000)
struct GBGameplayAbility_IsLocallyControlledPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayAbility_IsLocallyControlledPlayer) == 0x000001, "Wrong alignment on GBGameplayAbility_IsLocallyControlledPlayer");
static_assert(sizeof(GBGameplayAbility_IsLocallyControlledPlayer) == 0x000001, "Wrong size on GBGameplayAbility_IsLocallyControlledPlayer");
static_assert(offsetof(GBGameplayAbility_IsLocallyControlledPlayer, ReturnValue) == 0x000000, "Member 'GBGameplayAbility_IsLocallyControlledPlayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEvent.GetEventManager
// 0x0008 (0x0008 - 0x0000)
struct GBEvent_GetEventManager final
{
public:
	class AGBEventManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEvent_GetEventManager) == 0x000008, "Wrong alignment on GBEvent_GetEventManager");
static_assert(sizeof(GBEvent_GetEventManager) == 0x000008, "Wrong size on GBEvent_GetEventManager");
static_assert(offsetof(GBEvent_GetEventManager, ReturnValue) == 0x000000, "Member 'GBEvent_GetEventManager::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEvent.RemoveFromActiveEvents
// 0x0001 (0x0001 - 0x0000)
struct GBEvent_RemoveFromActiveEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEvent_RemoveFromActiveEvents) == 0x000001, "Wrong alignment on GBEvent_RemoveFromActiveEvents");
static_assert(sizeof(GBEvent_RemoveFromActiveEvents) == 0x000001, "Wrong size on GBEvent_RemoveFromActiveEvents");
static_assert(offsetof(GBEvent_RemoveFromActiveEvents, ReturnValue) == 0x000000, "Member 'GBEvent_RemoveFromActiveEvents::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEventManager.GetActiveEventsByClass
// 0x0020 (0x0020 - 0x0000)
struct GBEventManager_GetActiveEventsByClass final
{
public:
	TSubclassOf<class AGBEvent>                   Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBEvent*>                       OutEvents;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBEventManager_GetActiveEventsByClass) == 0x000008, "Wrong alignment on GBEventManager_GetActiveEventsByClass");
static_assert(sizeof(GBEventManager_GetActiveEventsByClass) == 0x000020, "Wrong size on GBEventManager_GetActiveEventsByClass");
static_assert(offsetof(GBEventManager_GetActiveEventsByClass, Class_0) == 0x000000, "Member 'GBEventManager_GetActiveEventsByClass::Class_0' has a wrong offset!");
static_assert(offsetof(GBEventManager_GetActiveEventsByClass, OutEvents) == 0x000008, "Member 'GBEventManager_GetActiveEventsByClass::OutEvents' has a wrong offset!");
static_assert(offsetof(GBEventManager_GetActiveEventsByClass, ReturnValue) == 0x000018, "Member 'GBEventManager_GetActiveEventsByClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBNavLinkProxy.OnNavigationGenerationFinished
// 0x0008 (0x0008 - 0x0000)
struct GBNavLinkProxy_OnNavigationGenerationFinished final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBNavLinkProxy_OnNavigationGenerationFinished) == 0x000008, "Wrong alignment on GBNavLinkProxy_OnNavigationGenerationFinished");
static_assert(sizeof(GBNavLinkProxy_OnNavigationGenerationFinished) == 0x000008, "Wrong size on GBNavLinkProxy_OnNavigationGenerationFinished");
static_assert(offsetof(GBNavLinkProxy_OnNavigationGenerationFinished, NavData) == 0x000000, "Member 'GBNavLinkProxy_OnNavigationGenerationFinished::NavData' has a wrong offset!");

// Function GroundBranch.GBNavLinkProxy.SmartLinkReached
// 0x0018 (0x0018 - 0x0000)
struct GBNavLinkProxy_SmartLinkReached final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBNavLinkProxy_SmartLinkReached) == 0x000008, "Wrong alignment on GBNavLinkProxy_SmartLinkReached");
static_assert(sizeof(GBNavLinkProxy_SmartLinkReached) == 0x000018, "Wrong size on GBNavLinkProxy_SmartLinkReached");
static_assert(offsetof(GBNavLinkProxy_SmartLinkReached, Agent) == 0x000000, "Member 'GBNavLinkProxy_SmartLinkReached::Agent' has a wrong offset!");
static_assert(offsetof(GBNavLinkProxy_SmartLinkReached, Destination) == 0x000008, "Member 'GBNavLinkProxy_SmartLinkReached::Destination' has a wrong offset!");

// Function GroundBranch.GBNavLinkProxy_Door.SetDoorRef
// 0x0008 (0x0008 - 0x0000)
struct GBNavLinkProxy_Door_SetDoorRef final
{
public:
	class AActor*                                 NewDoorRef;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBNavLinkProxy_Door_SetDoorRef) == 0x000008, "Wrong alignment on GBNavLinkProxy_Door_SetDoorRef");
static_assert(sizeof(GBNavLinkProxy_Door_SetDoorRef) == 0x000008, "Wrong size on GBNavLinkProxy_Door_SetDoorRef");
static_assert(offsetof(GBNavLinkProxy_Door_SetDoorRef, NewDoorRef) == 0x000000, "Member 'GBNavLinkProxy_Door_SetDoorRef::NewDoorRef' has a wrong offset!");

// Function GroundBranch.GBNavLinkProxy_Door.GetDoorRef
// 0x0008 (0x0008 - 0x0000)
struct GBNavLinkProxy_Door_GetDoorRef final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBNavLinkProxy_Door_GetDoorRef) == 0x000008, "Wrong alignment on GBNavLinkProxy_Door_GetDoorRef");
static_assert(sizeof(GBNavLinkProxy_Door_GetDoorRef) == 0x000008, "Wrong size on GBNavLinkProxy_Door_GetDoorRef");
static_assert(offsetof(GBNavLinkProxy_Door_GetDoorRef, ReturnValue) == 0x000000, "Member 'GBNavLinkProxy_Door_GetDoorRef::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEventSpawnBehavior.SpawnEvent
// 0x0008 (0x0008 - 0x0000)
struct GBEventSpawnBehavior_SpawnEvent final
{
public:
	class AGBEvent*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEventSpawnBehavior_SpawnEvent) == 0x000008, "Wrong alignment on GBEventSpawnBehavior_SpawnEvent");
static_assert(sizeof(GBEventSpawnBehavior_SpawnEvent) == 0x000008, "Wrong size on GBEventSpawnBehavior_SpawnEvent");
static_assert(offsetof(GBEventSpawnBehavior_SpawnEvent, ReturnValue) == 0x000000, "Member 'GBEventSpawnBehavior_SpawnEvent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEventSpawnBehavior.CanSpawn
// 0x0001 (0x0001 - 0x0000)
struct GBEventSpawnBehavior_CanSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEventSpawnBehavior_CanSpawn) == 0x000001, "Wrong alignment on GBEventSpawnBehavior_CanSpawn");
static_assert(sizeof(GBEventSpawnBehavior_CanSpawn) == 0x000001, "Wrong size on GBEventSpawnBehavior_CanSpawn");
static_assert(offsetof(GBEventSpawnBehavior_CanSpawn, ReturnValue) == 0x000000, "Member 'GBEventSpawnBehavior_CanSpawn::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEventSpawnBehavior.GetEventManager
// 0x0008 (0x0008 - 0x0000)
struct GBEventSpawnBehavior_GetEventManager final
{
public:
	class AGBEventManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEventSpawnBehavior_GetEventManager) == 0x000008, "Wrong alignment on GBEventSpawnBehavior_GetEventManager");
static_assert(sizeof(GBEventSpawnBehavior_GetEventManager) == 0x000008, "Wrong size on GBEventSpawnBehavior_GetEventManager");
static_assert(offsetof(GBEventSpawnBehavior_GetEventManager, ReturnValue) == 0x000000, "Member 'GBEventSpawnBehavior_GetEventManager::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBEventSpawnBehavior.GetWorld
// 0x0008 (0x0008 - 0x0000)
struct GBEventSpawnBehavior_GetWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBEventSpawnBehavior_GetWorld) == 0x000008, "Wrong alignment on GBEventSpawnBehavior_GetWorld");
static_assert(sizeof(GBEventSpawnBehavior_GetWorld) == 0x000008, "Wrong size on GBEventSpawnBehavior_GetWorld");
static_assert(offsetof(GBEventSpawnBehavior_GetWorld, ReturnValue) == 0x000000, "Member 'GBEventSpawnBehavior_GetWorld::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailComponent.GetOrientationRailTypeTag
// 0x0008 (0x0008 - 0x0000)
struct GBRailComponent_GetOrientationRailTypeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailComponent_GetOrientationRailTypeTag) == 0x000004, "Wrong alignment on GBRailComponent_GetOrientationRailTypeTag");
static_assert(sizeof(GBRailComponent_GetOrientationRailTypeTag) == 0x000008, "Wrong size on GBRailComponent_GetOrientationRailTypeTag");
static_assert(offsetof(GBRailComponent_GetOrientationRailTypeTag, ReturnValue) == 0x000000, "Member 'GBRailComponent_GetOrientationRailTypeTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailComponent.GetRailComponentTags
// 0x0020 (0x0020 - 0x0000)
struct GBRailComponent_GetRailComponentTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailComponent_GetRailComponentTags) == 0x000008, "Wrong alignment on GBRailComponent_GetRailComponentTags");
static_assert(sizeof(GBRailComponent_GetRailComponentTags) == 0x000020, "Wrong size on GBRailComponent_GetRailComponentTags");
static_assert(offsetof(GBRailComponent_GetRailComponentTags, ReturnValue) == 0x000000, "Member 'GBRailComponent_GetRailComponentTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailComponent.GetRecoilSlots
// 0x0004 (0x0004 - 0x0000)
struct GBRailComponent_GetRecoilSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailComponent_GetRecoilSlots) == 0x000004, "Wrong alignment on GBRailComponent_GetRecoilSlots");
static_assert(sizeof(GBRailComponent_GetRecoilSlots) == 0x000004, "Wrong size on GBRailComponent_GetRecoilSlots");
static_assert(offsetof(GBRailComponent_GetRecoilSlots, ReturnValue) == 0x000000, "Member 'GBRailComponent_GetRecoilSlots::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.FindCompatibleMagazine
// 0x0010 (0x0010 - 0x0000)
struct GBExternalMagazineComponent_FindCompatibleMagazine final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBMagazine*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_FindCompatibleMagazine) == 0x000008, "Wrong alignment on GBExternalMagazineComponent_FindCompatibleMagazine");
static_assert(sizeof(GBExternalMagazineComponent_FindCompatibleMagazine) == 0x000010, "Wrong size on GBExternalMagazineComponent_FindCompatibleMagazine");
static_assert(offsetof(GBExternalMagazineComponent_FindCompatibleMagazine, Character) == 0x000000, "Member 'GBExternalMagazineComponent_FindCompatibleMagazine::Character' has a wrong offset!");
static_assert(offsetof(GBExternalMagazineComponent_FindCompatibleMagazine, ReturnValue) == 0x000008, "Member 'GBExternalMagazineComponent_FindCompatibleMagazine::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.SetBoltHeldOpen
// 0x0001 (0x0001 - 0x0000)
struct GBExternalMagazineComponent_SetBoltHeldOpen final
{
public:
	bool                                          bNewBoltIsHeldOpen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_SetBoltHeldOpen) == 0x000001, "Wrong alignment on GBExternalMagazineComponent_SetBoltHeldOpen");
static_assert(sizeof(GBExternalMagazineComponent_SetBoltHeldOpen) == 0x000001, "Wrong size on GBExternalMagazineComponent_SetBoltHeldOpen");
static_assert(offsetof(GBExternalMagazineComponent_SetBoltHeldOpen, bNewBoltIsHeldOpen) == 0x000000, "Member 'GBExternalMagazineComponent_SetBoltHeldOpen::bNewBoltIsHeldOpen' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.SetChamberedRound
// 0x0008 (0x0008 - 0x0000)
struct GBExternalMagazineComponent_SetChamberedRound final
{
public:
	TSubclassOf<class AGBBulletProjectile>        NewChamberedRound;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_SetChamberedRound) == 0x000008, "Wrong alignment on GBExternalMagazineComponent_SetChamberedRound");
static_assert(sizeof(GBExternalMagazineComponent_SetChamberedRound) == 0x000008, "Wrong size on GBExternalMagazineComponent_SetChamberedRound");
static_assert(offsetof(GBExternalMagazineComponent_SetChamberedRound, NewChamberedRound) == 0x000000, "Member 'GBExternalMagazineComponent_SetChamberedRound::NewChamberedRound' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.SetIsFiringFromOpenBolt
// 0x0001 (0x0001 - 0x0000)
struct GBExternalMagazineComponent_SetIsFiringFromOpenBolt final
{
public:
	bool                                          bNewIsFiringFromOpenBolt;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_SetIsFiringFromOpenBolt) == 0x000001, "Wrong alignment on GBExternalMagazineComponent_SetIsFiringFromOpenBolt");
static_assert(sizeof(GBExternalMagazineComponent_SetIsFiringFromOpenBolt) == 0x000001, "Wrong size on GBExternalMagazineComponent_SetIsFiringFromOpenBolt");
static_assert(offsetof(GBExternalMagazineComponent_SetIsFiringFromOpenBolt, bNewIsFiringFromOpenBolt) == 0x000000, "Member 'GBExternalMagazineComponent_SetIsFiringFromOpenBolt::bNewIsFiringFromOpenBolt' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.GetBoltHeldOpen
// 0x0001 (0x0001 - 0x0000)
struct GBExternalMagazineComponent_GetBoltHeldOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_GetBoltHeldOpen) == 0x000001, "Wrong alignment on GBExternalMagazineComponent_GetBoltHeldOpen");
static_assert(sizeof(GBExternalMagazineComponent_GetBoltHeldOpen) == 0x000001, "Wrong size on GBExternalMagazineComponent_GetBoltHeldOpen");
static_assert(offsetof(GBExternalMagazineComponent_GetBoltHeldOpen, ReturnValue) == 0x000000, "Member 'GBExternalMagazineComponent_GetBoltHeldOpen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.GetChamberedRound
// 0x0008 (0x0008 - 0x0000)
struct GBExternalMagazineComponent_GetChamberedRound final
{
public:
	TSubclassOf<class AGBBulletProjectile>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_GetChamberedRound) == 0x000008, "Wrong alignment on GBExternalMagazineComponent_GetChamberedRound");
static_assert(sizeof(GBExternalMagazineComponent_GetChamberedRound) == 0x000008, "Wrong size on GBExternalMagazineComponent_GetChamberedRound");
static_assert(offsetof(GBExternalMagazineComponent_GetChamberedRound, ReturnValue) == 0x000000, "Member 'GBExternalMagazineComponent_GetChamberedRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.GetIsFiringFromOpenBolt
// 0x0001 (0x0001 - 0x0000)
struct GBExternalMagazineComponent_GetIsFiringFromOpenBolt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_GetIsFiringFromOpenBolt) == 0x000001, "Wrong alignment on GBExternalMagazineComponent_GetIsFiringFromOpenBolt");
static_assert(sizeof(GBExternalMagazineComponent_GetIsFiringFromOpenBolt) == 0x000001, "Wrong size on GBExternalMagazineComponent_GetIsFiringFromOpenBolt");
static_assert(offsetof(GBExternalMagazineComponent_GetIsFiringFromOpenBolt, ReturnValue) == 0x000000, "Member 'GBExternalMagazineComponent_GetIsFiringFromOpenBolt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.GetMagazine
// 0x0008 (0x0008 - 0x0000)
struct GBExternalMagazineComponent_GetMagazine final
{
public:
	class AGBMagazine*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_GetMagazine) == 0x000008, "Wrong alignment on GBExternalMagazineComponent_GetMagazine");
static_assert(sizeof(GBExternalMagazineComponent_GetMagazine) == 0x000008, "Wrong size on GBExternalMagazineComponent_GetMagazine");
static_assert(offsetof(GBExternalMagazineComponent_GetMagazine, ReturnValue) == 0x000000, "Member 'GBExternalMagazineComponent_GetMagazine::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExternalMagazineComponent.GetMagazineClass
// 0x0008 (0x0008 - 0x0000)
struct GBExternalMagazineComponent_GetMagazineClass final
{
public:
	TSubclassOf<class AGBMagazine>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExternalMagazineComponent_GetMagazineClass) == 0x000008, "Wrong alignment on GBExternalMagazineComponent_GetMagazineClass");
static_assert(sizeof(GBExternalMagazineComponent_GetMagazineClass) == 0x000008, "Wrong size on GBExternalMagazineComponent_GetMagazineClass");
static_assert(offsetof(GBExternalMagazineComponent_GetMagazineClass, ReturnValue) == 0x000000, "Member 'GBExternalMagazineComponent_GetMagazineClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.HideDialog
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerSettings_HideDialog final
{
public:
	class FName                                   DialogName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_HideDialog) == 0x000004, "Wrong alignment on GBPlayerSettings_HideDialog");
static_assert(sizeof(GBPlayerSettings_HideDialog) == 0x000008, "Wrong size on GBPlayerSettings_HideDialog");
static_assert(offsetof(GBPlayerSettings_HideDialog, DialogName) == 0x000000, "Member 'GBPlayerSettings_HideDialog::DialogName' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.SceneViewportResized
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerSettings_SceneViewportResized final
{
public:
	struct FVector2D                              ViewportSize;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_SceneViewportResized) == 0x000004, "Wrong alignment on GBPlayerSettings_SceneViewportResized");
static_assert(sizeof(GBPlayerSettings_SceneViewportResized) == 0x000008, "Wrong size on GBPlayerSettings_SceneViewportResized");
static_assert(offsetof(GBPlayerSettings_SceneViewportResized, ViewportSize) == 0x000000, "Member 'GBPlayerSettings_SceneViewportResized::ViewportSize' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.SetNVGVerticalScreenExtent
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerSettings_SetNVGVerticalScreenExtent final
{
public:
	float                                         NewNVGVerticalScreenExtent;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_SetNVGVerticalScreenExtent) == 0x000004, "Wrong alignment on GBPlayerSettings_SetNVGVerticalScreenExtent");
static_assert(sizeof(GBPlayerSettings_SetNVGVerticalScreenExtent) == 0x000004, "Wrong size on GBPlayerSettings_SetNVGVerticalScreenExtent");
static_assert(offsetof(GBPlayerSettings_SetNVGVerticalScreenExtent, NewNVGVerticalScreenExtent) == 0x000000, "Member 'GBPlayerSettings_SetNVGVerticalScreenExtent::NewNVGVerticalScreenExtent' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.SetPIPScopeResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerSettings_SetPIPScopeResolutionScale final
{
public:
	float                                         NewPIPScopeResolutionScale;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_SetPIPScopeResolutionScale) == 0x000004, "Wrong alignment on GBPlayerSettings_SetPIPScopeResolutionScale");
static_assert(sizeof(GBPlayerSettings_SetPIPScopeResolutionScale) == 0x000004, "Wrong size on GBPlayerSettings_SetPIPScopeResolutionScale");
static_assert(offsetof(GBPlayerSettings_SetPIPScopeResolutionScale, NewPIPScopeResolutionScale) == 0x000000, "Member 'GBPlayerSettings_SetPIPScopeResolutionScale::NewPIPScopeResolutionScale' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.SetPlayerCallSign
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerSettings_SetPlayerCallSign final
{
public:
	class FString                                 NewPlayerCallSign;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_SetPlayerCallSign) == 0x000008, "Wrong alignment on GBPlayerSettings_SetPlayerCallSign");
static_assert(sizeof(GBPlayerSettings_SetPlayerCallSign) == 0x000010, "Wrong size on GBPlayerSettings_SetPlayerCallSign");
static_assert(offsetof(GBPlayerSettings_SetPlayerCallSign, NewPlayerCallSign) == 0x000000, "Member 'GBPlayerSettings_SetPlayerCallSign::NewPlayerCallSign' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerSettings_SetPlayerName final
{
public:
	class FString                                 NewPlayerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_SetPlayerName) == 0x000008, "Wrong alignment on GBPlayerSettings_SetPlayerName");
static_assert(sizeof(GBPlayerSettings_SetPlayerName) == 0x000010, "Wrong size on GBPlayerSettings_SetPlayerName");
static_assert(offsetof(GBPlayerSettings_SetPlayerName, NewPlayerName) == 0x000000, "Member 'GBPlayerSettings_SetPlayerName::NewPlayerName' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.SetPlayerUseElementCallSign
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerSettings_SetPlayerUseElementCallSign final
{
public:
	bool                                          bNewPlayerUseElementCallSign;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_SetPlayerUseElementCallSign) == 0x000001, "Wrong alignment on GBPlayerSettings_SetPlayerUseElementCallSign");
static_assert(sizeof(GBPlayerSettings_SetPlayerUseElementCallSign) == 0x000001, "Wrong size on GBPlayerSettings_SetPlayerUseElementCallSign");
static_assert(offsetof(GBPlayerSettings_SetPlayerUseElementCallSign, bNewPlayerUseElementCallSign) == 0x000000, "Member 'GBPlayerSettings_SetPlayerUseElementCallSign::bNewPlayerUseElementCallSign' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.CanShowDialog
// 0x000C (0x000C - 0x0000)
struct GBPlayerSettings_CanShowDialog final
{
public:
	class FName                                   DialogName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerSettings_CanShowDialog) == 0x000004, "Wrong alignment on GBPlayerSettings_CanShowDialog");
static_assert(sizeof(GBPlayerSettings_CanShowDialog) == 0x00000C, "Wrong size on GBPlayerSettings_CanShowDialog");
static_assert(offsetof(GBPlayerSettings_CanShowDialog, DialogName) == 0x000000, "Member 'GBPlayerSettings_CanShowDialog::DialogName' has a wrong offset!");
static_assert(offsetof(GBPlayerSettings_CanShowDialog, ReturnValue) == 0x000008, "Member 'GBPlayerSettings_CanShowDialog::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.GetPIPScopeResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerSettings_GetPIPScopeResolutionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_GetPIPScopeResolutionScale) == 0x000004, "Wrong alignment on GBPlayerSettings_GetPIPScopeResolutionScale");
static_assert(sizeof(GBPlayerSettings_GetPIPScopeResolutionScale) == 0x000004, "Wrong size on GBPlayerSettings_GetPIPScopeResolutionScale");
static_assert(offsetof(GBPlayerSettings_GetPIPScopeResolutionScale, ReturnValue) == 0x000000, "Member 'GBPlayerSettings_GetPIPScopeResolutionScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.GetPlayerCallSign
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerSettings_GetPlayerCallSign final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_GetPlayerCallSign) == 0x000008, "Wrong alignment on GBPlayerSettings_GetPlayerCallSign");
static_assert(sizeof(GBPlayerSettings_GetPlayerCallSign) == 0x000010, "Wrong size on GBPlayerSettings_GetPlayerCallSign");
static_assert(offsetof(GBPlayerSettings_GetPlayerCallSign, ReturnValue) == 0x000000, "Member 'GBPlayerSettings_GetPlayerCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerSettings_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_GetPlayerName) == 0x000008, "Wrong alignment on GBPlayerSettings_GetPlayerName");
static_assert(sizeof(GBPlayerSettings_GetPlayerName) == 0x000010, "Wrong size on GBPlayerSettings_GetPlayerName");
static_assert(offsetof(GBPlayerSettings_GetPlayerName, ReturnValue) == 0x000000, "Member 'GBPlayerSettings_GetPlayerName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.GetPlayerUseElementCallSign
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerSettings_GetPlayerUseElementCallSign final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerSettings_GetPlayerUseElementCallSign) == 0x000001, "Wrong alignment on GBPlayerSettings_GetPlayerUseElementCallSign");
static_assert(sizeof(GBPlayerSettings_GetPlayerUseElementCallSign) == 0x000001, "Wrong size on GBPlayerSettings_GetPlayerUseElementCallSign");
static_assert(offsetof(GBPlayerSettings_GetPlayerUseElementCallSign, ReturnValue) == 0x000000, "Member 'GBPlayerSettings_GetPlayerUseElementCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerSettings.HintValid
// 0x000C (0x000C - 0x0000)
struct GBPlayerSettings_HintValid final
{
public:
	class FName                                   HintName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerSettings_HintValid) == 0x000004, "Wrong alignment on GBPlayerSettings_HintValid");
static_assert(sizeof(GBPlayerSettings_HintValid) == 0x00000C, "Wrong size on GBPlayerSettings_HintValid");
static_assert(offsetof(GBPlayerSettings_HintValid, HintName) == 0x000000, "Member 'GBPlayerSettings_HintValid::HintName' has a wrong offset!");
static_assert(offsetof(GBPlayerSettings_HintValid, ReturnValue) == 0x000008, "Member 'GBPlayerSettings_HintValid::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameTrigger.GetOverlaps
// 0x0010 (0x0010 - 0x0000)
struct GBGameTrigger_GetOverlaps final
{
public:
	TArray<class AGBCharacter*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameTrigger_GetOverlaps) == 0x000008, "Wrong alignment on GBGameTrigger_GetOverlaps");
static_assert(sizeof(GBGameTrigger_GetOverlaps) == 0x000010, "Wrong size on GBGameTrigger_GetOverlaps");
static_assert(offsetof(GBGameTrigger_GetOverlaps, ReturnValue) == 0x000000, "Member 'GBGameTrigger_GetOverlaps::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExtractionPoint.SetSequenceToPlayAfterExfil
// 0x0028 (0x0028 - 0x0000)
struct GBExtractionPoint_SetSequenceToPlayAfterExfil final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     InLevelSequenceActor;                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExtractionPoint_SetSequenceToPlayAfterExfil) == 0x000008, "Wrong alignment on GBExtractionPoint_SetSequenceToPlayAfterExfil");
static_assert(sizeof(GBExtractionPoint_SetSequenceToPlayAfterExfil) == 0x000028, "Wrong size on GBExtractionPoint_SetSequenceToPlayAfterExfil");
static_assert(offsetof(GBExtractionPoint_SetSequenceToPlayAfterExfil, InLevelSequenceActor) == 0x000000, "Member 'GBExtractionPoint_SetSequenceToPlayAfterExfil::InLevelSequenceActor' has a wrong offset!");

// Function GroundBranch.GBExtractionPoint.SetSequenceToPlayBeforeExfil
// 0x0028 (0x0028 - 0x0000)
struct GBExtractionPoint_SetSequenceToPlayBeforeExfil final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     InLevelSequenceActor;                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExtractionPoint_SetSequenceToPlayBeforeExfil) == 0x000008, "Wrong alignment on GBExtractionPoint_SetSequenceToPlayBeforeExfil");
static_assert(sizeof(GBExtractionPoint_SetSequenceToPlayBeforeExfil) == 0x000028, "Wrong size on GBExtractionPoint_SetSequenceToPlayBeforeExfil");
static_assert(offsetof(GBExtractionPoint_SetSequenceToPlayBeforeExfil, InLevelSequenceActor) == 0x000000, "Member 'GBExtractionPoint_SetSequenceToPlayBeforeExfil::InLevelSequenceActor' has a wrong offset!");

// Function GroundBranch.GBExtractionPoint.GetSequenceToPlayAfterExfil
// 0x0028 (0x0028 - 0x0000)
struct GBExtractionPoint_GetSequenceToPlayAfterExfil final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExtractionPoint_GetSequenceToPlayAfterExfil) == 0x000008, "Wrong alignment on GBExtractionPoint_GetSequenceToPlayAfterExfil");
static_assert(sizeof(GBExtractionPoint_GetSequenceToPlayAfterExfil) == 0x000028, "Wrong size on GBExtractionPoint_GetSequenceToPlayAfterExfil");
static_assert(offsetof(GBExtractionPoint_GetSequenceToPlayAfterExfil, ReturnValue) == 0x000000, "Member 'GBExtractionPoint_GetSequenceToPlayAfterExfil::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBExtractionPoint.GetSequenceToPlayBeforeExfil
// 0x0028 (0x0028 - 0x0000)
struct GBExtractionPoint_GetSequenceToPlayBeforeExfil final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBExtractionPoint_GetSequenceToPlayBeforeExfil) == 0x000008, "Wrong alignment on GBExtractionPoint_GetSequenceToPlayBeforeExfil");
static_assert(sizeof(GBExtractionPoint_GetSequenceToPlayBeforeExfil) == 0x000028, "Wrong size on GBExtractionPoint_GetSequenceToPlayBeforeExfil");
static_assert(offsetof(GBExtractionPoint_GetSequenceToPlayBeforeExfil, ReturnValue) == 0x000000, "Member 'GBExtractionPoint_GetSequenceToPlayBeforeExfil::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameTriggerBase.OnNonTeamBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct GBGameTriggerBase_OnNonTeamBeginOverlap final
{
public:
	class AGBCharacter*                           GBCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameTriggerBase_OnNonTeamBeginOverlap) == 0x000008, "Wrong alignment on GBGameTriggerBase_OnNonTeamBeginOverlap");
static_assert(sizeof(GBGameTriggerBase_OnNonTeamBeginOverlap) == 0x000008, "Wrong size on GBGameTriggerBase_OnNonTeamBeginOverlap");
static_assert(offsetof(GBGameTriggerBase_OnNonTeamBeginOverlap, GBCharacter) == 0x000000, "Member 'GBGameTriggerBase_OnNonTeamBeginOverlap::GBCharacter' has a wrong offset!");

// Function GroundBranch.GBGameTriggerBase.OnNonTeamEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct GBGameTriggerBase_OnNonTeamEndOverlap final
{
public:
	class AGBCharacter*                           GBCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameTriggerBase_OnNonTeamEndOverlap) == 0x000008, "Wrong alignment on GBGameTriggerBase_OnNonTeamEndOverlap");
static_assert(sizeof(GBGameTriggerBase_OnNonTeamEndOverlap) == 0x000008, "Wrong size on GBGameTriggerBase_OnNonTeamEndOverlap");
static_assert(offsetof(GBGameTriggerBase_OnNonTeamEndOverlap, GBCharacter) == 0x000000, "Member 'GBGameTriggerBase_OnNonTeamEndOverlap::GBCharacter' has a wrong offset!");

// Function GroundBranch.GBGameTriggerBase.OnTeamBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct GBGameTriggerBase_OnTeamBeginOverlap final
{
public:
	class AGBCharacter*                           GBCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameTriggerBase_OnTeamBeginOverlap) == 0x000008, "Wrong alignment on GBGameTriggerBase_OnTeamBeginOverlap");
static_assert(sizeof(GBGameTriggerBase_OnTeamBeginOverlap) == 0x000008, "Wrong size on GBGameTriggerBase_OnTeamBeginOverlap");
static_assert(offsetof(GBGameTriggerBase_OnTeamBeginOverlap, GBCharacter) == 0x000000, "Member 'GBGameTriggerBase_OnTeamBeginOverlap::GBCharacter' has a wrong offset!");

// Function GroundBranch.GBGameTriggerBase.OnTeamEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct GBGameTriggerBase_OnTeamEndOverlap final
{
public:
	class AGBCharacter*                           GBCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameTriggerBase_OnTeamEndOverlap) == 0x000008, "Wrong alignment on GBGameTriggerBase_OnTeamEndOverlap");
static_assert(sizeof(GBGameTriggerBase_OnTeamEndOverlap) == 0x000008, "Wrong size on GBGameTriggerBase_OnTeamEndOverlap");
static_assert(offsetof(GBGameTriggerBase_OnTeamEndOverlap, GBCharacter) == 0x000000, "Member 'GBGameTriggerBase_OnTeamEndOverlap::GBCharacter' has a wrong offset!");

// Function GroundBranch.GBFirearm.AIReload
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_AIReload final
{
public:
	class FName                                   ReloadType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_AIReload) == 0x000004, "Wrong alignment on GBFirearm_AIReload");
static_assert(sizeof(GBFirearm_AIReload) == 0x000008, "Wrong size on GBFirearm_AIReload");
static_assert(offsetof(GBFirearm_AIReload, ReloadType) == 0x000000, "Member 'GBFirearm_AIReload::ReloadType' has a wrong offset!");

// Function GroundBranch.GBFirearm.ChangeFiringModeIndex
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_ChangeFiringModeIndex final
{
public:
	int32                                         dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFirearm_ChangeFiringModeIndex) == 0x000004, "Wrong alignment on GBFirearm_ChangeFiringModeIndex");
static_assert(sizeof(GBFirearm_ChangeFiringModeIndex) == 0x000008, "Wrong size on GBFirearm_ChangeFiringModeIndex");
static_assert(offsetof(GBFirearm_ChangeFiringModeIndex, dir) == 0x000000, "Member 'GBFirearm_ChangeFiringModeIndex::dir' has a wrong offset!");
static_assert(offsetof(GBFirearm_ChangeFiringModeIndex, ReturnValue) == 0x000004, "Member 'GBFirearm_ChangeFiringModeIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.ChangeSightLine
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_ChangeSightLine final
{
public:
	int32                                         dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_ChangeSightLine) == 0x000004, "Wrong alignment on GBFirearm_ChangeSightLine");
static_assert(sizeof(GBFirearm_ChangeSightLine) == 0x000004, "Wrong size on GBFirearm_ChangeSightLine");
static_assert(offsetof(GBFirearm_ChangeSightLine, dir) == 0x000000, "Member 'GBFirearm_ChangeSightLine::dir' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetEmptyHolster
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetEmptyHolster final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBHolster*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetEmptyHolster) == 0x000008, "Wrong alignment on GBFirearm_GetEmptyHolster");
static_assert(sizeof(GBFirearm_GetEmptyHolster) == 0x000010, "Wrong size on GBFirearm_GetEmptyHolster");
static_assert(offsetof(GBFirearm_GetEmptyHolster, Character) == 0x000000, "Member 'GBFirearm_GetEmptyHolster::Character' has a wrong offset!");
static_assert(offsetof(GBFirearm_GetEmptyHolster, ReturnValue) == 0x000008, "Member 'GBFirearm_GetEmptyHolster::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetEmptySlingPoint
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetEmptySlingPoint final
{
public:
	class AGBCharacter*                           GBCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetEmptySlingPoint) == 0x000008, "Wrong alignment on GBFirearm_GetEmptySlingPoint");
static_assert(sizeof(GBFirearm_GetEmptySlingPoint) == 0x000010, "Wrong size on GBFirearm_GetEmptySlingPoint");
static_assert(offsetof(GBFirearm_GetEmptySlingPoint, GBCharacter) == 0x000000, "Member 'GBFirearm_GetEmptySlingPoint::GBCharacter' has a wrong offset!");
static_assert(offsetof(GBFirearm_GetEmptySlingPoint, ReturnValue) == 0x000008, "Member 'GBFirearm_GetEmptySlingPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFirearmAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_GetFirearmAnimInstance final
{
public:
	class UGBFirearmAnimInstance*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFirearmAnimInstance) == 0x000008, "Wrong alignment on GBFirearm_GetFirearmAnimInstance");
static_assert(sizeof(GBFirearm_GetFirearmAnimInstance) == 0x000008, "Wrong size on GBFirearm_GetFirearmAnimInstance");
static_assert(offsetof(GBFirearm_GetFirearmAnimInstance, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFirearmAnimInstance::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFirearmForwardVector
// 0x000C (0x000C - 0x0000)
struct GBFirearm_GetFirearmForwardVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFirearmForwardVector) == 0x000004, "Wrong alignment on GBFirearm_GetFirearmForwardVector");
static_assert(sizeof(GBFirearm_GetFirearmForwardVector) == 0x00000C, "Wrong size on GBFirearm_GetFirearmForwardVector");
static_assert(offsetof(GBFirearm_GetFirearmForwardVector, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFirearmForwardVector::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFiringModeByString
// 0x0018 (0x0018 - 0x0000)
struct GBFirearm_GetFiringModeByString final
{
public:
	class FString                                 FiringModeString;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFirearm_GetFiringModeByString) == 0x000008, "Wrong alignment on GBFirearm_GetFiringModeByString");
static_assert(sizeof(GBFirearm_GetFiringModeByString) == 0x000018, "Wrong size on GBFirearm_GetFiringModeByString");
static_assert(offsetof(GBFirearm_GetFiringModeByString, FiringModeString) == 0x000000, "Member 'GBFirearm_GetFiringModeByString::FiringModeString' has a wrong offset!");
static_assert(offsetof(GBFirearm_GetFiringModeByString, ReturnValue) == 0x000010, "Member 'GBFirearm_GetFiringModeByString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.OnBecomeViewTarget
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_OnBecomeViewTarget final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBCharacter*                           Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_OnBecomeViewTarget) == 0x000008, "Wrong alignment on GBFirearm_OnBecomeViewTarget");
static_assert(sizeof(GBFirearm_OnBecomeViewTarget) == 0x000010, "Wrong size on GBFirearm_OnBecomeViewTarget");
static_assert(offsetof(GBFirearm_OnBecomeViewTarget, PlayerController) == 0x000000, "Member 'GBFirearm_OnBecomeViewTarget::PlayerController' has a wrong offset!");
static_assert(offsetof(GBFirearm_OnBecomeViewTarget, Character) == 0x000008, "Member 'GBFirearm_OnBecomeViewTarget::Character' has a wrong offset!");

// Function GroundBranch.GBFirearm.OnEndViewTarget
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_OnEndViewTarget final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBCharacter*                           Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_OnEndViewTarget) == 0x000008, "Wrong alignment on GBFirearm_OnEndViewTarget");
static_assert(sizeof(GBFirearm_OnEndViewTarget) == 0x000010, "Wrong size on GBFirearm_OnEndViewTarget");
static_assert(offsetof(GBFirearm_OnEndViewTarget, PlayerController) == 0x000000, "Member 'GBFirearm_OnEndViewTarget::PlayerController' has a wrong offset!");
static_assert(offsetof(GBFirearm_OnEndViewTarget, Character) == 0x000008, "Member 'GBFirearm_OnEndViewTarget::Character' has a wrong offset!");

// Function GroundBranch.GBFirearm.OnRep_CurrentSight
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_OnRep_CurrentSight final
{
public:
	class UGBSightComponent*                      LastActiveSightComponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_OnRep_CurrentSight) == 0x000008, "Wrong alignment on GBFirearm_OnRep_CurrentSight");
static_assert(sizeof(GBFirearm_OnRep_CurrentSight) == 0x000008, "Wrong size on GBFirearm_OnRep_CurrentSight");
static_assert(offsetof(GBFirearm_OnRep_CurrentSight, LastActiveSightComponent) == 0x000000, "Member 'GBFirearm_OnRep_CurrentSight::LastActiveSightComponent' has a wrong offset!");

// Function GroundBranch.GBFirearm.PlayFiringSound
// 0x0014 (0x0014 - 0x0000)
struct GBFirearm_PlayFiringSound final
{
public:
	class FName                                   FirstPersonSoundName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThirdPersonSoundName;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackPlayingID;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFirearm_PlayFiringSound) == 0x000004, "Wrong alignment on GBFirearm_PlayFiringSound");
static_assert(sizeof(GBFirearm_PlayFiringSound) == 0x000014, "Wrong size on GBFirearm_PlayFiringSound");
static_assert(offsetof(GBFirearm_PlayFiringSound, FirstPersonSoundName) == 0x000000, "Member 'GBFirearm_PlayFiringSound::FirstPersonSoundName' has a wrong offset!");
static_assert(offsetof(GBFirearm_PlayFiringSound, ThirdPersonSoundName) == 0x000008, "Member 'GBFirearm_PlayFiringSound::ThirdPersonSoundName' has a wrong offset!");
static_assert(offsetof(GBFirearm_PlayFiringSound, bTrackPlayingID) == 0x000010, "Member 'GBFirearm_PlayFiringSound::bTrackPlayingID' has a wrong offset!");

// Function GroundBranch.GBFirearm.PlayNonFiringSound
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_PlayNonFiringSound final
{
public:
	class FName                                   FirstPersonSoundName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThirdPersonSoundName;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_PlayNonFiringSound) == 0x000004, "Wrong alignment on GBFirearm_PlayNonFiringSound");
static_assert(sizeof(GBFirearm_PlayNonFiringSound) == 0x000010, "Wrong size on GBFirearm_PlayNonFiringSound");
static_assert(offsetof(GBFirearm_PlayNonFiringSound, FirstPersonSoundName) == 0x000000, "Member 'GBFirearm_PlayNonFiringSound::FirstPersonSoundName' has a wrong offset!");
static_assert(offsetof(GBFirearm_PlayNonFiringSound, ThirdPersonSoundName) == 0x000008, "Member 'GBFirearm_PlayNonFiringSound::ThirdPersonSoundName' has a wrong offset!");

// Function GroundBranch.GBFirearm.ServerSetCurrentSight
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_ServerSetCurrentSight final
{
public:
	class UGBSightComponent*                      NewSight;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_ServerSetCurrentSight) == 0x000008, "Wrong alignment on GBFirearm_ServerSetCurrentSight");
static_assert(sizeof(GBFirearm_ServerSetCurrentSight) == 0x000008, "Wrong size on GBFirearm_ServerSetCurrentSight");
static_assert(offsetof(GBFirearm_ServerSetCurrentSight, NewSight) == 0x000000, "Member 'GBFirearm_ServerSetCurrentSight::NewSight' has a wrong offset!");

// Function GroundBranch.GBFirearm.ServerSetFiringModeIndex
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_ServerSetFiringModeIndex final
{
public:
	uint8                                         NewFiringMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_ServerSetFiringModeIndex) == 0x000001, "Wrong alignment on GBFirearm_ServerSetFiringModeIndex");
static_assert(sizeof(GBFirearm_ServerSetFiringModeIndex) == 0x000001, "Wrong size on GBFirearm_ServerSetFiringModeIndex");
static_assert(offsetof(GBFirearm_ServerSetFiringModeIndex, NewFiringMode) == 0x000000, "Member 'GBFirearm_ServerSetFiringModeIndex::NewFiringMode' has a wrong offset!");

// Function GroundBranch.GBFirearm.SetCurrentSight
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_SetCurrentSight final
{
public:
	class UGBSightComponent*                      NewSight;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_SetCurrentSight) == 0x000008, "Wrong alignment on GBFirearm_SetCurrentSight");
static_assert(sizeof(GBFirearm_SetCurrentSight) == 0x000008, "Wrong size on GBFirearm_SetCurrentSight");
static_assert(offsetof(GBFirearm_SetCurrentSight, NewSight) == 0x000000, "Member 'GBFirearm_SetCurrentSight::NewSight' has a wrong offset!");

// Function GroundBranch.GBFirearm.SetFiringModeByString
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_SetFiringModeByString final
{
public:
	class FString                                 FiringModeString;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_SetFiringModeByString) == 0x000008, "Wrong alignment on GBFirearm_SetFiringModeByString");
static_assert(sizeof(GBFirearm_SetFiringModeByString) == 0x000010, "Wrong size on GBFirearm_SetFiringModeByString");
static_assert(offsetof(GBFirearm_SetFiringModeByString, FiringModeString) == 0x000000, "Member 'GBFirearm_SetFiringModeByString::FiringModeString' has a wrong offset!");

// Function GroundBranch.GBFirearm.SetFiringModeIndex
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_SetFiringModeIndex final
{
public:
	uint8                                         NewFiringModeIndex;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_SetFiringModeIndex) == 0x000001, "Wrong alignment on GBFirearm_SetFiringModeIndex");
static_assert(sizeof(GBFirearm_SetFiringModeIndex) == 0x000001, "Wrong size on GBFirearm_SetFiringModeIndex");
static_assert(offsetof(GBFirearm_SetFiringModeIndex, NewFiringModeIndex) == 0x000000, "Member 'GBFirearm_SetFiringModeIndex::NewFiringModeIndex' has a wrong offset!");

// Function GroundBranch.GBFirearm.SpatialSoundSphereBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct GBFirearm_SpatialSoundSphereBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_SpatialSoundSphereBeginOverlap) == 0x000008, "Wrong alignment on GBFirearm_SpatialSoundSphereBeginOverlap");
static_assert(sizeof(GBFirearm_SpatialSoundSphereBeginOverlap) == 0x0000A8, "Wrong size on GBFirearm_SpatialSoundSphereBeginOverlap");
static_assert(offsetof(GBFirearm_SpatialSoundSphereBeginOverlap, OverlappedComponent) == 0x000000, "Member 'GBFirearm_SpatialSoundSphereBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereBeginOverlap, OtherActor) == 0x000008, "Member 'GBFirearm_SpatialSoundSphereBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereBeginOverlap, OtherComp) == 0x000010, "Member 'GBFirearm_SpatialSoundSphereBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'GBFirearm_SpatialSoundSphereBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereBeginOverlap, bFromSweep) == 0x00001C, "Member 'GBFirearm_SpatialSoundSphereBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereBeginOverlap, SweepResult) == 0x000020, "Member 'GBFirearm_SpatialSoundSphereBeginOverlap::SweepResult' has a wrong offset!");

// Function GroundBranch.GBFirearm.SpatialSoundSphereEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct GBFirearm_SpatialSoundSphereEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFirearm_SpatialSoundSphereEndOverlap) == 0x000008, "Wrong alignment on GBFirearm_SpatialSoundSphereEndOverlap");
static_assert(sizeof(GBFirearm_SpatialSoundSphereEndOverlap) == 0x000020, "Wrong size on GBFirearm_SpatialSoundSphereEndOverlap");
static_assert(offsetof(GBFirearm_SpatialSoundSphereEndOverlap, OverlappedComponent) == 0x000000, "Member 'GBFirearm_SpatialSoundSphereEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereEndOverlap, OtherActor) == 0x000008, "Member 'GBFirearm_SpatialSoundSphereEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereEndOverlap, OtherComp) == 0x000010, "Member 'GBFirearm_SpatialSoundSphereEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GBFirearm_SpatialSoundSphereEndOverlap, OtherBodyIndex) == 0x000018, "Member 'GBFirearm_SpatialSoundSphereEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function GroundBranch.GBFirearm.StopFiringSound
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_StopFiringSound final
{
public:
	class FName                                   FirstPersonSoundName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThirdPersonSoundName;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_StopFiringSound) == 0x000004, "Wrong alignment on GBFirearm_StopFiringSound");
static_assert(sizeof(GBFirearm_StopFiringSound) == 0x000010, "Wrong size on GBFirearm_StopFiringSound");
static_assert(offsetof(GBFirearm_StopFiringSound, FirstPersonSoundName) == 0x000000, "Member 'GBFirearm_StopFiringSound::FirstPersonSoundName' has a wrong offset!");
static_assert(offsetof(GBFirearm_StopFiringSound, ThirdPersonSoundName) == 0x000008, "Member 'GBFirearm_StopFiringSound::ThirdPersonSoundName' has a wrong offset!");

// Function GroundBranch.GBFirearm.ZeroCurrentSightComp
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_ZeroCurrentSightComp final
{
public:
	class UGBSightComponent*                      SightComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_ZeroCurrentSightComp) == 0x000008, "Wrong alignment on GBFirearm_ZeroCurrentSightComp");
static_assert(sizeof(GBFirearm_ZeroCurrentSightComp) == 0x000008, "Wrong size on GBFirearm_ZeroCurrentSightComp");
static_assert(offsetof(GBFirearm_ZeroCurrentSightComp, SightComp) == 0x000000, "Member 'GBFirearm_ZeroCurrentSightComp::SightComp' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetBulletProjectileClass
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetBulletProjectileClass final
{
public:
	const class UGBBarrelComponent*               Barrel;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGBBulletProjectile>        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetBulletProjectileClass) == 0x000008, "Wrong alignment on GBFirearm_GetBulletProjectileClass");
static_assert(sizeof(GBFirearm_GetBulletProjectileClass) == 0x000010, "Wrong size on GBFirearm_GetBulletProjectileClass");
static_assert(offsetof(GBFirearm_GetBulletProjectileClass, Barrel) == 0x000000, "Member 'GBFirearm_GetBulletProjectileClass::Barrel' has a wrong offset!");
static_assert(offsetof(GBFirearm_GetBulletProjectileClass, ReturnValue) == 0x000008, "Member 'GBFirearm_GetBulletProjectileClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetBurstCount
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_GetBurstCount final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetBurstCount) == 0x000001, "Wrong alignment on GBFirearm_GetBurstCount");
static_assert(sizeof(GBFirearm_GetBurstCount) == 0x000001, "Wrong size on GBFirearm_GetBurstCount");
static_assert(offsetof(GBFirearm_GetBurstCount, ReturnValue) == 0x000000, "Member 'GBFirearm_GetBurstCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetCollisionTraceEndOffset
// 0x000C (0x000C - 0x0000)
struct GBFirearm_GetCollisionTraceEndOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetCollisionTraceEndOffset) == 0x000004, "Wrong alignment on GBFirearm_GetCollisionTraceEndOffset");
static_assert(sizeof(GBFirearm_GetCollisionTraceEndOffset) == 0x00000C, "Wrong size on GBFirearm_GetCollisionTraceEndOffset");
static_assert(offsetof(GBFirearm_GetCollisionTraceEndOffset, ReturnValue) == 0x000000, "Member 'GBFirearm_GetCollisionTraceEndOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetCurrentSightMagnification
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetCurrentSightMagnification final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetCurrentSightMagnification) == 0x000004, "Wrong alignment on GBFirearm_GetCurrentSightMagnification");
static_assert(sizeof(GBFirearm_GetCurrentSightMagnification) == 0x000004, "Wrong size on GBFirearm_GetCurrentSightMagnification");
static_assert(offsetof(GBFirearm_GetCurrentSightMagnification, ReturnValue) == 0x000000, "Member 'GBFirearm_GetCurrentSightMagnification::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFirearmSoundType
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetFirearmSoundType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFirearmSoundType) == 0x000008, "Wrong alignment on GBFirearm_GetFirearmSoundType");
static_assert(sizeof(GBFirearm_GetFirearmSoundType) == 0x000010, "Wrong size on GBFirearm_GetFirearmSoundType");
static_assert(offsetof(GBFirearm_GetFirearmSoundType, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFirearmSoundType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFirearmTransform
// 0x0030 (0x0030 - 0x0000)
struct GBFirearm_GetFirearmTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFirearmTransform) == 0x000010, "Wrong alignment on GBFirearm_GetFirearmTransform");
static_assert(sizeof(GBFirearm_GetFirearmTransform) == 0x000030, "Wrong size on GBFirearm_GetFirearmTransform");
static_assert(offsetof(GBFirearm_GetFirearmTransform, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFirearmTransform::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFireModeSwitchValue
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetFireModeSwitchValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFireModeSwitchValue) == 0x000008, "Wrong alignment on GBFirearm_GetFireModeSwitchValue");
static_assert(sizeof(GBFirearm_GetFireModeSwitchValue) == 0x000010, "Wrong size on GBFirearm_GetFireModeSwitchValue");
static_assert(offsetof(GBFirearm_GetFireModeSwitchValue, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFireModeSwitchValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFiringModeIndex
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_GetFiringModeIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFiringModeIndex) == 0x000001, "Wrong alignment on GBFirearm_GetFiringModeIndex");
static_assert(sizeof(GBFirearm_GetFiringModeIndex) == 0x000001, "Wrong size on GBFirearm_GetFiringModeIndex");
static_assert(offsetof(GBFirearm_GetFiringModeIndex, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFiringModeIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetFiringModes
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetFiringModes final
{
public:
	TArray<struct FFiringModeData>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetFiringModes) == 0x000008, "Wrong alignment on GBFirearm_GetFiringModes");
static_assert(sizeof(GBFirearm_GetFiringModes) == 0x000010, "Wrong size on GBFirearm_GetFiringModes");
static_assert(offsetof(GBFirearm_GetFiringModes, ReturnValue) == 0x000000, "Member 'GBFirearm_GetFiringModes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetGunshotComp
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_GetGunshotComp final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetGunshotComp) == 0x000008, "Wrong alignment on GBFirearm_GetGunshotComp");
static_assert(sizeof(GBFirearm_GetGunshotComp) == 0x000008, "Wrong size on GBFirearm_GetGunshotComp");
static_assert(offsetof(GBFirearm_GetGunshotComp, ReturnValue) == 0x000000, "Member 'GBFirearm_GetGunshotComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetInsigatorIsLocallyViewed
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_GetInsigatorIsLocallyViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetInsigatorIsLocallyViewed) == 0x000001, "Wrong alignment on GBFirearm_GetInsigatorIsLocallyViewed");
static_assert(sizeof(GBFirearm_GetInsigatorIsLocallyViewed) == 0x000001, "Wrong size on GBFirearm_GetInsigatorIsLocallyViewed");
static_assert(offsetof(GBFirearm_GetInsigatorIsLocallyViewed, ReturnValue) == 0x000000, "Member 'GBFirearm_GetInsigatorIsLocallyViewed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetInteractComp
// 0x0008 (0x0008 - 0x0000)
struct GBFirearm_GetInteractComp final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetInteractComp) == 0x000008, "Wrong alignment on GBFirearm_GetInteractComp");
static_assert(sizeof(GBFirearm_GetInteractComp) == 0x000008, "Wrong size on GBFirearm_GetInteractComp");
static_assert(offsetof(GBFirearm_GetInteractComp, ReturnValue) == 0x000000, "Member 'GBFirearm_GetInteractComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetLastTriggerPullTime
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetLastTriggerPullTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetLastTriggerPullTime) == 0x000004, "Wrong alignment on GBFirearm_GetLastTriggerPullTime");
static_assert(sizeof(GBFirearm_GetLastTriggerPullTime) == 0x000004, "Wrong size on GBFirearm_GetLastTriggerPullTime");
static_assert(offsetof(GBFirearm_GetLastTriggerPullTime, ReturnValue) == 0x000000, "Member 'GBFirearm_GetLastTriggerPullTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetMaxGripRelativeX
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetMaxGripRelativeX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetMaxGripRelativeX) == 0x000004, "Wrong alignment on GBFirearm_GetMaxGripRelativeX");
static_assert(sizeof(GBFirearm_GetMaxGripRelativeX) == 0x000004, "Wrong size on GBFirearm_GetMaxGripRelativeX");
static_assert(offsetof(GBFirearm_GetMaxGripRelativeX, ReturnValue) == 0x000000, "Member 'GBFirearm_GetMaxGripRelativeX::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetMinSightRelativeX
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetMinSightRelativeX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetMinSightRelativeX) == 0x000004, "Wrong alignment on GBFirearm_GetMinSightRelativeX");
static_assert(sizeof(GBFirearm_GetMinSightRelativeX) == 0x000004, "Wrong size on GBFirearm_GetMinSightRelativeX");
static_assert(offsetof(GBFirearm_GetMinSightRelativeX, ReturnValue) == 0x000000, "Member 'GBFirearm_GetMinSightRelativeX::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetMuzzleOffset
// 0x000C (0x000C - 0x0000)
struct GBFirearm_GetMuzzleOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetMuzzleOffset) == 0x000004, "Wrong alignment on GBFirearm_GetMuzzleOffset");
static_assert(sizeof(GBFirearm_GetMuzzleOffset) == 0x00000C, "Wrong size on GBFirearm_GetMuzzleOffset");
static_assert(offsetof(GBFirearm_GetMuzzleOffset, ReturnValue) == 0x000000, "Member 'GBFirearm_GetMuzzleOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetNumSightLines
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetNumSightLines final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetNumSightLines) == 0x000004, "Wrong alignment on GBFirearm_GetNumSightLines");
static_assert(sizeof(GBFirearm_GetNumSightLines) == 0x000004, "Wrong size on GBFirearm_GetNumSightLines");
static_assert(offsetof(GBFirearm_GetNumSightLines, ReturnValue) == 0x000000, "Member 'GBFirearm_GetNumSightLines::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetRateOfFire
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetRateOfFire final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetRateOfFire) == 0x000004, "Wrong alignment on GBFirearm_GetRateOfFire");
static_assert(sizeof(GBFirearm_GetRateOfFire) == 0x000004, "Wrong size on GBFirearm_GetRateOfFire");
static_assert(offsetof(GBFirearm_GetRateOfFire, ReturnValue) == 0x000000, "Member 'GBFirearm_GetRateOfFire::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetRecoilData
// 0x001C (0x001C - 0x0000)
struct GBFirearm_GetRecoilData final
{
public:
	bool                                          bIsEngaged;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBRecoilData                          ReturnValue;                                       // 0x0004(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetRecoilData) == 0x000004, "Wrong alignment on GBFirearm_GetRecoilData");
static_assert(sizeof(GBFirearm_GetRecoilData) == 0x00001C, "Wrong size on GBFirearm_GetRecoilData");
static_assert(offsetof(GBFirearm_GetRecoilData, bIsEngaged) == 0x000000, "Member 'GBFirearm_GetRecoilData::bIsEngaged' has a wrong offset!");
static_assert(offsetof(GBFirearm_GetRecoilData, ReturnValue) == 0x000004, "Member 'GBFirearm_GetRecoilData::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetSuppressorSwitchValue
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetSuppressorSwitchValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetSuppressorSwitchValue) == 0x000008, "Wrong alignment on GBFirearm_GetSuppressorSwitchValue");
static_assert(sizeof(GBFirearm_GetSuppressorSwitchValue) == 0x000010, "Wrong size on GBFirearm_GetSuppressorSwitchValue");
static_assert(offsetof(GBFirearm_GetSuppressorSwitchValue, ReturnValue) == 0x000000, "Member 'GBFirearm_GetSuppressorSwitchValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetTotalAvailableCount
// 0x0004 (0x0004 - 0x0000)
struct GBFirearm_GetTotalAvailableCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_GetTotalAvailableCount) == 0x000004, "Wrong alignment on GBFirearm_GetTotalAvailableCount");
static_assert(sizeof(GBFirearm_GetTotalAvailableCount) == 0x000004, "Wrong size on GBFirearm_GetTotalAvailableCount");
static_assert(offsetof(GBFirearm_GetTotalAvailableCount, ReturnValue) == 0x000000, "Member 'GBFirearm_GetTotalAvailableCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.GetTracerColourIndexForShot
// 0x0010 (0x0010 - 0x0000)
struct GBFirearm_GetTracerColourIndexForShot final
{
public:
	const class UGBBarrelComponent*               Barrel;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFirearm_GetTracerColourIndexForShot) == 0x000008, "Wrong alignment on GBFirearm_GetTracerColourIndexForShot");
static_assert(sizeof(GBFirearm_GetTracerColourIndexForShot) == 0x000010, "Wrong size on GBFirearm_GetTracerColourIndexForShot");
static_assert(offsetof(GBFirearm_GetTracerColourIndexForShot, Barrel) == 0x000000, "Member 'GBFirearm_GetTracerColourIndexForShot::Barrel' has a wrong offset!");
static_assert(offsetof(GBFirearm_GetTracerColourIndexForShot, ReturnValue) == 0x000008, "Member 'GBFirearm_GetTracerColourIndexForShot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_IsEmpty) == 0x000001, "Wrong alignment on GBFirearm_IsEmpty");
static_assert(sizeof(GBFirearm_IsEmpty) == 0x000001, "Wrong size on GBFirearm_IsEmpty");
static_assert(offsetof(GBFirearm_IsEmpty, ReturnValue) == 0x000000, "Member 'GBFirearm_IsEmpty::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearm.IsFingerOnTrigger
// 0x0001 (0x0001 - 0x0000)
struct GBFirearm_IsFingerOnTrigger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearm_IsFingerOnTrigger) == 0x000001, "Wrong alignment on GBFirearm_IsFingerOnTrigger");
static_assert(sizeof(GBFirearm_IsFingerOnTrigger) == 0x000001, "Wrong size on GBFirearm_IsFingerOnTrigger");
static_assert(offsetof(GBFirearm_IsFingerOnTrigger, ReturnValue) == 0x000000, "Member 'GBFirearm_IsFingerOnTrigger::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFirearmAnimInstance.OnBoltHeldOpenUpdated
// 0x0008 (0x0008 - 0x0000)
struct GBFirearmAnimInstance_OnBoltHeldOpenUpdated final
{
public:
	const class UGBAmmunitionFeedComponent*       AmmunitionFeedComp;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearmAnimInstance_OnBoltHeldOpenUpdated) == 0x000008, "Wrong alignment on GBFirearmAnimInstance_OnBoltHeldOpenUpdated");
static_assert(sizeof(GBFirearmAnimInstance_OnBoltHeldOpenUpdated) == 0x000008, "Wrong size on GBFirearmAnimInstance_OnBoltHeldOpenUpdated");
static_assert(offsetof(GBFirearmAnimInstance_OnBoltHeldOpenUpdated, AmmunitionFeedComp) == 0x000000, "Member 'GBFirearmAnimInstance_OnBoltHeldOpenUpdated::AmmunitionFeedComp' has a wrong offset!");

// Function GroundBranch.GBFirearmAnimInstance.OnFiringModeIndexChanged
// 0x0001 (0x0001 - 0x0000)
struct GBFirearmAnimInstance_OnFiringModeIndexChanged final
{
public:
	uint8                                         FiringModeIndex;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearmAnimInstance_OnFiringModeIndexChanged) == 0x000001, "Wrong alignment on GBFirearmAnimInstance_OnFiringModeIndexChanged");
static_assert(sizeof(GBFirearmAnimInstance_OnFiringModeIndexChanged) == 0x000001, "Wrong size on GBFirearmAnimInstance_OnFiringModeIndexChanged");
static_assert(offsetof(GBFirearmAnimInstance_OnFiringModeIndexChanged, FiringModeIndex) == 0x000000, "Member 'GBFirearmAnimInstance_OnFiringModeIndexChanged::FiringModeIndex' has a wrong offset!");

// Function GroundBranch.GBFirearmAnimInstance.OnIronSightZeroing
// 0x0024 (0x0024 - 0x0000)
struct GBFirearmAnimInstance_OnIronSightZeroing final
{
public:
	struct FVector                                ZeroRelativeToSight;                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SightLocationOffset;                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SightRotationOffset;                               // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearmAnimInstance_OnIronSightZeroing) == 0x000004, "Wrong alignment on GBFirearmAnimInstance_OnIronSightZeroing");
static_assert(sizeof(GBFirearmAnimInstance_OnIronSightZeroing) == 0x000024, "Wrong size on GBFirearmAnimInstance_OnIronSightZeroing");
static_assert(offsetof(GBFirearmAnimInstance_OnIronSightZeroing, ZeroRelativeToSight) == 0x000000, "Member 'GBFirearmAnimInstance_OnIronSightZeroing::ZeroRelativeToSight' has a wrong offset!");
static_assert(offsetof(GBFirearmAnimInstance_OnIronSightZeroing, SightLocationOffset) == 0x00000C, "Member 'GBFirearmAnimInstance_OnIronSightZeroing::SightLocationOffset' has a wrong offset!");
static_assert(offsetof(GBFirearmAnimInstance_OnIronSightZeroing, SightRotationOffset) == 0x000018, "Member 'GBFirearmAnimInstance_OnIronSightZeroing::SightRotationOffset' has a wrong offset!");

// Function GroundBranch.GBFirearmAnimInstance.OnSetFrontSightPostHeightOffset
// 0x0004 (0x0004 - 0x0000)
struct GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset final
{
public:
	float                                         FrontSightPostHeightOffset;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset) == 0x000004, "Wrong alignment on GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset");
static_assert(sizeof(GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset) == 0x000004, "Wrong size on GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset");
static_assert(offsetof(GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset, FrontSightPostHeightOffset) == 0x000000, "Member 'GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset::FrontSightPostHeightOffset' has a wrong offset!");

// Function GroundBranch.GBFirearmAnimInstance.IsLocal
// 0x0001 (0x0001 - 0x0000)
struct GBFirearmAnimInstance_IsLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFirearmAnimInstance_IsLocal) == 0x000001, "Wrong alignment on GBFirearmAnimInstance_IsLocal");
static_assert(sizeof(GBFirearmAnimInstance_IsLocal) == 0x000001, "Wrong size on GBFirearmAnimInstance_IsLocal");
static_assert(offsetof(GBFirearmAnimInstance_IsLocal, ReturnValue) == 0x000000, "Member 'GBFirearmAnimInstance_IsLocal::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBItemCameraModifier.OnAssociatedItemDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GBItemCameraModifier_OnAssociatedItemDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemCameraModifier_OnAssociatedItemDestroyed) == 0x000008, "Wrong alignment on GBItemCameraModifier_OnAssociatedItemDestroyed");
static_assert(sizeof(GBItemCameraModifier_OnAssociatedItemDestroyed) == 0x000008, "Wrong size on GBItemCameraModifier_OnAssociatedItemDestroyed");
static_assert(offsetof(GBItemCameraModifier_OnAssociatedItemDestroyed, DestroyedActor) == 0x000000, "Member 'GBItemCameraModifier_OnAssociatedItemDestroyed::DestroyedActor' has a wrong offset!");

// Function GroundBranch.GBItemCameraModifier.SetAssociatedItem
// 0x0008 (0x0008 - 0x0000)
struct GBItemCameraModifier_SetAssociatedItem final
{
public:
	class AGBInvItem*                             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemCameraModifier_SetAssociatedItem) == 0x000008, "Wrong alignment on GBItemCameraModifier_SetAssociatedItem");
static_assert(sizeof(GBItemCameraModifier_SetAssociatedItem) == 0x000008, "Wrong size on GBItemCameraModifier_SetAssociatedItem");
static_assert(offsetof(GBItemCameraModifier_SetAssociatedItem, Item) == 0x000000, "Member 'GBItemCameraModifier_SetAssociatedItem::Item' has a wrong offset!");

// Function GroundBranch.GBItemCameraModifier.GetAssociatedItem
// 0x0008 (0x0008 - 0x0000)
struct GBItemCameraModifier_GetAssociatedItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemCameraModifier_GetAssociatedItem) == 0x000008, "Wrong alignment on GBItemCameraModifier_GetAssociatedItem");
static_assert(sizeof(GBItemCameraModifier_GetAssociatedItem) == 0x000008, "Wrong size on GBItemCameraModifier_GetAssociatedItem");
static_assert(offsetof(GBItemCameraModifier_GetAssociatedItem, ReturnValue) == 0x000000, "Member 'GBItemCameraModifier_GetAssociatedItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.AdjustReticleBrightnessLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_AdjustReticleBrightnessLevel final
{
public:
	int32                                         dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_AdjustReticleBrightnessLevel) == 0x000004, "Wrong alignment on GBSightComponent_AdjustReticleBrightnessLevel");
static_assert(sizeof(GBSightComponent_AdjustReticleBrightnessLevel) == 0x000004, "Wrong size on GBSightComponent_AdjustReticleBrightnessLevel");
static_assert(offsetof(GBSightComponent_AdjustReticleBrightnessLevel, dir) == 0x000000, "Member 'GBSightComponent_AdjustReticleBrightnessLevel::dir' has a wrong offset!");

// Function GroundBranch.GBSightComponent.OnEndViewTarget
// 0x0010 (0x0010 - 0x0000)
struct GBSightComponent_OnEndViewTarget final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBCharacter*                           Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_OnEndViewTarget) == 0x000008, "Wrong alignment on GBSightComponent_OnEndViewTarget");
static_assert(sizeof(GBSightComponent_OnEndViewTarget) == 0x000010, "Wrong size on GBSightComponent_OnEndViewTarget");
static_assert(offsetof(GBSightComponent_OnEndViewTarget, PlayerController) == 0x000000, "Member 'GBSightComponent_OnEndViewTarget::PlayerController' has a wrong offset!");
static_assert(offsetof(GBSightComponent_OnEndViewTarget, Character) == 0x000008, "Member 'GBSightComponent_OnEndViewTarget::Character' has a wrong offset!");

// Function GroundBranch.GBSightComponent.ServerSetMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_ServerSetMagnificationLevel final
{
public:
	float                                         NewMagnificationLevel;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_ServerSetMagnificationLevel) == 0x000004, "Wrong alignment on GBSightComponent_ServerSetMagnificationLevel");
static_assert(sizeof(GBSightComponent_ServerSetMagnificationLevel) == 0x000004, "Wrong size on GBSightComponent_ServerSetMagnificationLevel");
static_assert(offsetof(GBSightComponent_ServerSetMagnificationLevel, NewMagnificationLevel) == 0x000000, "Member 'GBSightComponent_ServerSetMagnificationLevel::NewMagnificationLevel' has a wrong offset!");

// Function GroundBranch.GBSightComponent.ServerSetReticleBrightnessLevel
// 0x0001 (0x0001 - 0x0000)
struct GBSightComponent_ServerSetReticleBrightnessLevel final
{
public:
	uint8                                         NewReticleBrightnessLevel;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_ServerSetReticleBrightnessLevel) == 0x000001, "Wrong alignment on GBSightComponent_ServerSetReticleBrightnessLevel");
static_assert(sizeof(GBSightComponent_ServerSetReticleBrightnessLevel) == 0x000001, "Wrong size on GBSightComponent_ServerSetReticleBrightnessLevel");
static_assert(offsetof(GBSightComponent_ServerSetReticleBrightnessLevel, NewReticleBrightnessLevel) == 0x000000, "Member 'GBSightComponent_ServerSetReticleBrightnessLevel::NewReticleBrightnessLevel' has a wrong offset!");

// Function GroundBranch.GBSightComponent.ServerSetReticleColourIndex
// 0x0001 (0x0001 - 0x0000)
struct GBSightComponent_ServerSetReticleColourIndex final
{
public:
	uint8                                         NewReticleColourIndex;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_ServerSetReticleColourIndex) == 0x000001, "Wrong alignment on GBSightComponent_ServerSetReticleColourIndex");
static_assert(sizeof(GBSightComponent_ServerSetReticleColourIndex) == 0x000001, "Wrong size on GBSightComponent_ServerSetReticleColourIndex");
static_assert(offsetof(GBSightComponent_ServerSetReticleColourIndex, NewReticleColourIndex) == 0x000000, "Member 'GBSightComponent_ServerSetReticleColourIndex::NewReticleColourIndex' has a wrong offset!");

// Function GroundBranch.GBSightComponent.ServerSetZeroDistance
// 0x0002 (0x0002 - 0x0000)
struct GBSightComponent_ServerSetZeroDistance final
{
public:
	uint16                                        NewZeroDistance;                                   // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_ServerSetZeroDistance) == 0x000002, "Wrong alignment on GBSightComponent_ServerSetZeroDistance");
static_assert(sizeof(GBSightComponent_ServerSetZeroDistance) == 0x000002, "Wrong size on GBSightComponent_ServerSetZeroDistance");
static_assert(offsetof(GBSightComponent_ServerSetZeroDistance, NewZeroDistance) == 0x000000, "Member 'GBSightComponent_ServerSetZeroDistance::NewZeroDistance' has a wrong offset!");

// Function GroundBranch.GBSightComponent.ServerSightLineInfoUpdated
// 0x0054 (0x0054 - 0x0000)
struct GBSightComponent_ServerSightLineInfoUpdated final
{
public:
	struct FGBSightLineInfo                       NewSightLineInfo;                                  // 0x0000(0x0054)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_ServerSightLineInfoUpdated) == 0x000004, "Wrong alignment on GBSightComponent_ServerSightLineInfoUpdated");
static_assert(sizeof(GBSightComponent_ServerSightLineInfoUpdated) == 0x000054, "Wrong size on GBSightComponent_ServerSightLineInfoUpdated");
static_assert(offsetof(GBSightComponent_ServerSightLineInfoUpdated, NewSightLineInfo) == 0x000000, "Member 'GBSightComponent_ServerSightLineInfoUpdated::NewSightLineInfo' has a wrong offset!");

// Function GroundBranch.GBSightComponent.SetMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_SetMagnificationLevel final
{
public:
	float                                         NewMagnificationLevel;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_SetMagnificationLevel) == 0x000004, "Wrong alignment on GBSightComponent_SetMagnificationLevel");
static_assert(sizeof(GBSightComponent_SetMagnificationLevel) == 0x000004, "Wrong size on GBSightComponent_SetMagnificationLevel");
static_assert(offsetof(GBSightComponent_SetMagnificationLevel, NewMagnificationLevel) == 0x000000, "Member 'GBSightComponent_SetMagnificationLevel::NewMagnificationLevel' has a wrong offset!");

// Function GroundBranch.GBSightComponent.SetSceneCaptureComponent
// 0x0008 (0x0008 - 0x0000)
struct GBSightComponent_SetSceneCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               NewSceneCaptureComp;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_SetSceneCaptureComponent) == 0x000008, "Wrong alignment on GBSightComponent_SetSceneCaptureComponent");
static_assert(sizeof(GBSightComponent_SetSceneCaptureComponent) == 0x000008, "Wrong size on GBSightComponent_SetSceneCaptureComponent");
static_assert(offsetof(GBSightComponent_SetSceneCaptureComponent, NewSceneCaptureComp) == 0x000000, "Member 'GBSightComponent_SetSceneCaptureComponent::NewSceneCaptureComp' has a wrong offset!");

// Function GroundBranch.GBSightComponent.SetupSight
// 0x0030 (0x0030 - 0x0000)
struct GBSightComponent_SetupSight final
{
public:
	class AGBFirearm*                             RelativeFirearm;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AGBInvItem*>                     OtherAttachments;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OutErrorMessage;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSightComponent_SetupSight) == 0x000008, "Wrong alignment on GBSightComponent_SetupSight");
static_assert(sizeof(GBSightComponent_SetupSight) == 0x000030, "Wrong size on GBSightComponent_SetupSight");
static_assert(offsetof(GBSightComponent_SetupSight, RelativeFirearm) == 0x000000, "Member 'GBSightComponent_SetupSight::RelativeFirearm' has a wrong offset!");
static_assert(offsetof(GBSightComponent_SetupSight, OtherAttachments) == 0x000008, "Member 'GBSightComponent_SetupSight::OtherAttachments' has a wrong offset!");
static_assert(offsetof(GBSightComponent_SetupSight, OutErrorMessage) == 0x000018, "Member 'GBSightComponent_SetupSight::OutErrorMessage' has a wrong offset!");
static_assert(offsetof(GBSightComponent_SetupSight, ReturnValue) == 0x000028, "Member 'GBSightComponent_SetupSight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetAnimLocOffset
// 0x000C (0x000C - 0x0000)
struct GBSightComponent_GetAnimLocOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetAnimLocOffset) == 0x000004, "Wrong alignment on GBSightComponent_GetAnimLocOffset");
static_assert(sizeof(GBSightComponent_GetAnimLocOffset) == 0x00000C, "Wrong size on GBSightComponent_GetAnimLocOffset");
static_assert(offsetof(GBSightComponent_GetAnimLocOffset, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetAnimLocOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetAnimRotOffset
// 0x000C (0x000C - 0x0000)
struct GBSightComponent_GetAnimRotOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetAnimRotOffset) == 0x000004, "Wrong alignment on GBSightComponent_GetAnimRotOffset");
static_assert(sizeof(GBSightComponent_GetAnimRotOffset) == 0x00000C, "Wrong size on GBSightComponent_GetAnimRotOffset");
static_assert(offsetof(GBSightComponent_GetAnimRotOffset, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetAnimRotOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetDefaultMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetDefaultMagnificationLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetDefaultMagnificationLevel) == 0x000004, "Wrong alignment on GBSightComponent_GetDefaultMagnificationLevel");
static_assert(sizeof(GBSightComponent_GetDefaultMagnificationLevel) == 0x000004, "Wrong size on GBSightComponent_GetDefaultMagnificationLevel");
static_assert(offsetof(GBSightComponent_GetDefaultMagnificationLevel, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetDefaultMagnificationLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetFocus
// 0x0001 (0x0001 - 0x0000)
struct GBSightComponent_GetFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetFocus) == 0x000001, "Wrong alignment on GBSightComponent_GetFocus");
static_assert(sizeof(GBSightComponent_GetFocus) == 0x000001, "Wrong size on GBSightComponent_GetFocus");
static_assert(offsetof(GBSightComponent_GetFocus, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetFocus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetFOV
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetFOV) == 0x000004, "Wrong alignment on GBSightComponent_GetFOV");
static_assert(sizeof(GBSightComponent_GetFOV) == 0x000004, "Wrong size on GBSightComponent_GetFOV");
static_assert(offsetof(GBSightComponent_GetFOV, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetFOV::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetLeafSightAngle
// 0x0028 (0x0028 - 0x0000)
struct GBSightComponent_GetLeafSightAngle final
{
public:
	const class AGBFirearm*                       RelativeFirearm;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldBoneLocation;                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocationOffset;                            // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSightComponent_GetLeafSightAngle) == 0x000008, "Wrong alignment on GBSightComponent_GetLeafSightAngle");
static_assert(sizeof(GBSightComponent_GetLeafSightAngle) == 0x000028, "Wrong size on GBSightComponent_GetLeafSightAngle");
static_assert(offsetof(GBSightComponent_GetLeafSightAngle, RelativeFirearm) == 0x000000, "Member 'GBSightComponent_GetLeafSightAngle::RelativeFirearm' has a wrong offset!");
static_assert(offsetof(GBSightComponent_GetLeafSightAngle, WorldBoneLocation) == 0x000008, "Member 'GBSightComponent_GetLeafSightAngle::WorldBoneLocation' has a wrong offset!");
static_assert(offsetof(GBSightComponent_GetLeafSightAngle, RelativeLocationOffset) == 0x000014, "Member 'GBSightComponent_GetLeafSightAngle::RelativeLocationOffset' has a wrong offset!");
static_assert(offsetof(GBSightComponent_GetLeafSightAngle, ReturnValue) == 0x000020, "Member 'GBSightComponent_GetLeafSightAngle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetMagnificationLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetMagnificationLevel) == 0x000004, "Wrong alignment on GBSightComponent_GetMagnificationLevel");
static_assert(sizeof(GBSightComponent_GetMagnificationLevel) == 0x000004, "Wrong size on GBSightComponent_GetMagnificationLevel");
static_assert(offsetof(GBSightComponent_GetMagnificationLevel, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetMagnificationLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetMaxMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetMaxMagnificationLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetMaxMagnificationLevel) == 0x000004, "Wrong alignment on GBSightComponent_GetMaxMagnificationLevel");
static_assert(sizeof(GBSightComponent_GetMaxMagnificationLevel) == 0x000004, "Wrong size on GBSightComponent_GetMaxMagnificationLevel");
static_assert(offsetof(GBSightComponent_GetMaxMagnificationLevel, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetMaxMagnificationLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetMinMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetMinMagnificationLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetMinMagnificationLevel) == 0x000004, "Wrong alignment on GBSightComponent_GetMinMagnificationLevel");
static_assert(sizeof(GBSightComponent_GetMinMagnificationLevel) == 0x000004, "Wrong size on GBSightComponent_GetMinMagnificationLevel");
static_assert(offsetof(GBSightComponent_GetMinMagnificationLevel, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetMinMagnificationLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetNextSight
// 0x0008 (0x0008 - 0x0000)
struct GBSightComponent_GetNextSight final
{
public:
	class UGBSightComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetNextSight) == 0x000008, "Wrong alignment on GBSightComponent_GetNextSight");
static_assert(sizeof(GBSightComponent_GetNextSight) == 0x000008, "Wrong size on GBSightComponent_GetNextSight");
static_assert(offsetof(GBSightComponent_GetNextSight, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetNextSight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetOpticRadius
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetOpticRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetOpticRadius) == 0x000004, "Wrong alignment on GBSightComponent_GetOpticRadius");
static_assert(sizeof(GBSightComponent_GetOpticRadius) == 0x000004, "Wrong size on GBSightComponent_GetOpticRadius");
static_assert(offsetof(GBSightComponent_GetOpticRadius, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetOpticRadius::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetPrevSight
// 0x0008 (0x0008 - 0x0000)
struct GBSightComponent_GetPrevSight final
{
public:
	class UGBSightComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetPrevSight) == 0x000008, "Wrong alignment on GBSightComponent_GetPrevSight");
static_assert(sizeof(GBSightComponent_GetPrevSight) == 0x000008, "Wrong size on GBSightComponent_GetPrevSight");
static_assert(offsetof(GBSightComponent_GetPrevSight, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetPrevSight::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetReticleColourIndex
// 0x0004 (0x0004 - 0x0000)
struct GBSightComponent_GetReticleColourIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetReticleColourIndex) == 0x000004, "Wrong alignment on GBSightComponent_GetReticleColourIndex");
static_assert(sizeof(GBSightComponent_GetReticleColourIndex) == 0x000004, "Wrong size on GBSightComponent_GetReticleColourIndex");
static_assert(offsetof(GBSightComponent_GetReticleColourIndex, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetReticleColourIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetSightLineFocus
// 0x0001 (0x0001 - 0x0000)
struct GBSightComponent_GetSightLineFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetSightLineFocus) == 0x000001, "Wrong alignment on GBSightComponent_GetSightLineFocus");
static_assert(sizeof(GBSightComponent_GetSightLineFocus) == 0x000001, "Wrong size on GBSightComponent_GetSightLineFocus");
static_assert(offsetof(GBSightComponent_GetSightLineFocus, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetSightLineFocus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetSightLineInfo
// 0x0054 (0x0054 - 0x0000)
struct GBSightComponent_GetSightLineInfo final
{
public:
	struct FGBSightLineInfo                       ReturnValue;                                       // 0x0000(0x0054)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetSightLineInfo) == 0x000004, "Wrong alignment on GBSightComponent_GetSightLineInfo");
static_assert(sizeof(GBSightComponent_GetSightLineInfo) == 0x000054, "Wrong size on GBSightComponent_GetSightLineInfo");
static_assert(offsetof(GBSightComponent_GetSightLineInfo, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetSightLineInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetSightLineRoot
// 0x0008 (0x0008 - 0x0000)
struct GBSightComponent_GetSightLineRoot final
{
public:
	const class UGBSightComponent*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetSightLineRoot) == 0x000008, "Wrong alignment on GBSightComponent_GetSightLineRoot");
static_assert(sizeof(GBSightComponent_GetSightLineRoot) == 0x000008, "Wrong size on GBSightComponent_GetSightLineRoot");
static_assert(offsetof(GBSightComponent_GetSightLineRoot, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetSightLineRoot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSightComponent.GetStatKey
// 0x0010 (0x0010 - 0x0000)
struct GBSightComponent_GetStatKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSightComponent_GetStatKey) == 0x000008, "Wrong alignment on GBSightComponent_GetStatKey");
static_assert(sizeof(GBSightComponent_GetStatKey) == 0x000010, "Wrong size on GBSightComponent_GetStatKey");
static_assert(offsetof(GBSightComponent_GetStatKey, ReturnValue) == 0x000000, "Member 'GBSightComponent_GetStatKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRadialMenuWidget.BPEvent_NewActiveSelection
// 0x0004 (0x0004 - 0x0000)
struct GBRadialMenuWidget_BPEvent_NewActiveSelection final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRadialMenuWidget_BPEvent_NewActiveSelection) == 0x000004, "Wrong alignment on GBRadialMenuWidget_BPEvent_NewActiveSelection");
static_assert(sizeof(GBRadialMenuWidget_BPEvent_NewActiveSelection) == 0x000004, "Wrong size on GBRadialMenuWidget_BPEvent_NewActiveSelection");
static_assert(offsetof(GBRadialMenuWidget_BPEvent_NewActiveSelection, NewIndex) == 0x000000, "Member 'GBRadialMenuWidget_BPEvent_NewActiveSelection::NewIndex' has a wrong offset!");

// Function GroundBranch.GBRadialMenuWidget.BPEvent_SetDynamicMaterialParams
// 0x0004 (0x0004 - 0x0000)
struct GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams final
{
public:
	int32                                         NumberOfDivisions;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams) == 0x000004, "Wrong alignment on GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams");
static_assert(sizeof(GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams) == 0x000004, "Wrong size on GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams");
static_assert(offsetof(GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams, NumberOfDivisions) == 0x000000, "Member 'GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams::NumberOfDivisions' has a wrong offset!");

// Function GroundBranch.GBRadialMenuWidget.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GBRadialMenuWidget_SetSelectedIndex final
{
public:
	int32                                         NewIdx;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRadialMenuWidget_SetSelectedIndex) == 0x000004, "Wrong alignment on GBRadialMenuWidget_SetSelectedIndex");
static_assert(sizeof(GBRadialMenuWidget_SetSelectedIndex) == 0x000004, "Wrong size on GBRadialMenuWidget_SetSelectedIndex");
static_assert(offsetof(GBRadialMenuWidget_SetSelectedIndex, NewIdx) == 0x000000, "Member 'GBRadialMenuWidget_SetSelectedIndex::NewIdx' has a wrong offset!");

// Function GroundBranch.GBRadialMenuWidget.ShowRadialMenu
// 0x0010 (0x0010 - 0x0000)
struct GBRadialMenuWidget_ShowRadialMenu final
{
public:
	TArray<struct FGBRadialMenuOption>            MenuOptions;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRadialMenuWidget_ShowRadialMenu) == 0x000008, "Wrong alignment on GBRadialMenuWidget_ShowRadialMenu");
static_assert(sizeof(GBRadialMenuWidget_ShowRadialMenu) == 0x000010, "Wrong size on GBRadialMenuWidget_ShowRadialMenu");
static_assert(offsetof(GBRadialMenuWidget_ShowRadialMenu, MenuOptions) == 0x000000, "Member 'GBRadialMenuWidget_ShowRadialMenu::MenuOptions' has a wrong offset!");

// Function GroundBranch.GBRadialMenuWidget.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GBRadialMenuWidget_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRadialMenuWidget_GetSelectedIndex) == 0x000004, "Wrong alignment on GBRadialMenuWidget_GetSelectedIndex");
static_assert(sizeof(GBRadialMenuWidget_GetSelectedIndex) == 0x000004, "Wrong size on GBRadialMenuWidget_GetSelectedIndex");
static_assert(offsetof(GBRadialMenuWidget_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'GBRadialMenuWidget_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFoliageBlastComponent.InitializeBlast
// 0x0028 (0x0028 - 0x0000)
struct GBFoliageBlastComponent_InitializeBlast final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastExtent;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFoliageMeshSize;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastStrength;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OscillationFrequency;                              // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngularPerturbation;                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPerturbationDecayTime;                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPerturbationDecayTime;                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFoliageBlastComponent_InitializeBlast) == 0x000008, "Wrong alignment on GBFoliageBlastComponent_InitializeBlast");
static_assert(sizeof(GBFoliageBlastComponent_InitializeBlast) == 0x000028, "Wrong size on GBFoliageBlastComponent_InitializeBlast");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, WorldContextObject) == 0x000000, "Member 'GBFoliageBlastComponent_InitializeBlast::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, BlastExtent) == 0x000008, "Member 'GBFoliageBlastComponent_InitializeBlast::BlastExtent' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, MinFoliageMeshSize) == 0x00000C, "Member 'GBFoliageBlastComponent_InitializeBlast::MinFoliageMeshSize' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, BlastStrength) == 0x000010, "Member 'GBFoliageBlastComponent_InitializeBlast::BlastStrength' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, OscillationFrequency) == 0x000014, "Member 'GBFoliageBlastComponent_InitializeBlast::OscillationFrequency' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, MaxAngularPerturbation) == 0x000018, "Member 'GBFoliageBlastComponent_InitializeBlast::MaxAngularPerturbation' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, MinPerturbationDecayTime) == 0x00001C, "Member 'GBFoliageBlastComponent_InitializeBlast::MinPerturbationDecayTime' has a wrong offset!");
static_assert(offsetof(GBFoliageBlastComponent_InitializeBlast, MaxPerturbationDecayTime) == 0x000020, "Member 'GBFoliageBlastComponent_InitializeBlast::MaxPerturbationDecayTime' has a wrong offset!");

// Function GroundBranch.GBLuaMathPackage.GetRandom
// 0x0090 (0x0090 - 0x0000)
struct GBLuaMathPackage_GetRandom final
{
public:
	struct FLuaValue                              Max;                                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaMathPackage_GetRandom) == 0x000008, "Wrong alignment on GBLuaMathPackage_GetRandom");
static_assert(sizeof(GBLuaMathPackage_GetRandom) == 0x000090, "Wrong size on GBLuaMathPackage_GetRandom");
static_assert(offsetof(GBLuaMathPackage_GetRandom, Max) == 0x000000, "Member 'GBLuaMathPackage_GetRandom::Max' has a wrong offset!");
static_assert(offsetof(GBLuaMathPackage_GetRandom, ReturnValue) == 0x000048, "Member 'GBLuaMathPackage_GetRandom::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaMathPackage.GetRandomRange
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaMathPackage_GetRandomRange final
{
public:
	struct FLuaValue                              Min;                                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              Max;                                               // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaMathPackage_GetRandomRange) == 0x000008, "Wrong alignment on GBLuaMathPackage_GetRandomRange");
static_assert(sizeof(GBLuaMathPackage_GetRandomRange) == 0x0000D8, "Wrong size on GBLuaMathPackage_GetRandomRange");
static_assert(offsetof(GBLuaMathPackage_GetRandomRange, Min) == 0x000000, "Member 'GBLuaMathPackage_GetRandomRange::Min' has a wrong offset!");
static_assert(offsetof(GBLuaMathPackage_GetRandomRange, Max) == 0x000048, "Member 'GBLuaMathPackage_GetRandomRange::Max' has a wrong offset!");
static_assert(offsetof(GBLuaMathPackage_GetRandomRange, ReturnValue) == 0x000090, "Member 'GBLuaMathPackage_GetRandomRange::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSearchableProp.SetYieldsIntel
// 0x0001 (0x0001 - 0x0000)
struct GBSearchableProp_SetYieldsIntel final
{
public:
	bool                                          bInYieldsIntel;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSearchableProp_SetYieldsIntel) == 0x000001, "Wrong alignment on GBSearchableProp_SetYieldsIntel");
static_assert(sizeof(GBSearchableProp_SetYieldsIntel) == 0x000001, "Wrong size on GBSearchableProp_SetYieldsIntel");
static_assert(offsetof(GBSearchableProp_SetYieldsIntel, bInYieldsIntel) == 0x000000, "Member 'GBSearchableProp_SetYieldsIntel::bInYieldsIntel' has a wrong offset!");

// Function GroundBranch.GBSearchableProp.GetSearchablePropType
// 0x0001 (0x0001 - 0x0000)
struct GBSearchableProp_GetSearchablePropType final
{
public:
	EGBIntelSearchType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSearchableProp_GetSearchablePropType) == 0x000001, "Wrong alignment on GBSearchableProp_GetSearchablePropType");
static_assert(sizeof(GBSearchableProp_GetSearchablePropType) == 0x000001, "Wrong size on GBSearchableProp_GetSearchablePropType");
static_assert(offsetof(GBSearchableProp_GetSearchablePropType, ReturnValue) == 0x000000, "Member 'GBSearchableProp_GetSearchablePropType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSearchableProp.GetYieldsIntel
// 0x0001 (0x0001 - 0x0000)
struct GBSearchableProp_GetYieldsIntel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSearchableProp_GetYieldsIntel) == 0x000001, "Wrong alignment on GBSearchableProp_GetYieldsIntel");
static_assert(sizeof(GBSearchableProp_GetYieldsIntel) == 0x000001, "Wrong size on GBSearchableProp_GetYieldsIntel");
static_assert(offsetof(GBSearchableProp_GetYieldsIntel, ReturnValue) == 0x000000, "Member 'GBSearchableProp_GetYieldsIntel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFoliageVisibilityAssetData.GetVisibilityMesh
// 0x0018 (0x0018 - 0x0000)
struct GBFoliageVisibilityAssetData_GetVisibilityMesh final
{
public:
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFoliageVisibilityAssetData_GetVisibilityMesh) == 0x000008, "Wrong alignment on GBFoliageVisibilityAssetData_GetVisibilityMesh");
static_assert(sizeof(GBFoliageVisibilityAssetData_GetVisibilityMesh) == 0x000018, "Wrong size on GBFoliageVisibilityAssetData_GetVisibilityMesh");
static_assert(offsetof(GBFoliageVisibilityAssetData_GetVisibilityMesh, ReturnValue) == 0x000000, "Member 'GBFoliageVisibilityAssetData_GetVisibilityMesh::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFrontSightPostComponent.ServerFrontSightPostHeightOffset
// 0x0004 (0x0004 - 0x0000)
struct GBFrontSightPostComponent_ServerFrontSightPostHeightOffset final
{
public:
	float                                         NewFrontSightPostHeightOffset;                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFrontSightPostComponent_ServerFrontSightPostHeightOffset) == 0x000004, "Wrong alignment on GBFrontSightPostComponent_ServerFrontSightPostHeightOffset");
static_assert(sizeof(GBFrontSightPostComponent_ServerFrontSightPostHeightOffset) == 0x000004, "Wrong size on GBFrontSightPostComponent_ServerFrontSightPostHeightOffset");
static_assert(offsetof(GBFrontSightPostComponent_ServerFrontSightPostHeightOffset, NewFrontSightPostHeightOffset) == 0x000000, "Member 'GBFrontSightPostComponent_ServerFrontSightPostHeightOffset::NewFrontSightPostHeightOffset' has a wrong offset!");

// Function GroundBranch.GBFrontSightPostComponent.GetFrontSightPostHeightOffset
// 0x0004 (0x0004 - 0x0000)
struct GBFrontSightPostComponent_GetFrontSightPostHeightOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFrontSightPostComponent_GetFrontSightPostHeightOffset) == 0x000004, "Wrong alignment on GBFrontSightPostComponent_GetFrontSightPostHeightOffset");
static_assert(sizeof(GBFrontSightPostComponent_GetFrontSightPostHeightOffset) == 0x000004, "Wrong size on GBFrontSightPostComponent_GetFrontSightPostHeightOffset");
static_assert(offsetof(GBFrontSightPostComponent_GetFrontSightPostHeightOffset, ReturnValue) == 0x000000, "Member 'GBFrontSightPostComponent_GetFrontSightPostHeightOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorAdd
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaVectorPackage_VectorAdd final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              B;                                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorAdd) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorAdd");
static_assert(sizeof(GBLuaVectorPackage_VectorAdd) == 0x0000D8, "Wrong size on GBLuaVectorPackage_VectorAdd");
static_assert(offsetof(GBLuaVectorPackage_VectorAdd, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorAdd::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorAdd, B) == 0x000048, "Member 'GBLuaVectorPackage_VectorAdd::B' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorAdd, ReturnValue) == 0x000090, "Member 'GBLuaVectorPackage_VectorAdd::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorDivide
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaVectorPackage_VectorDivide final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              B;                                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorDivide) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorDivide");
static_assert(sizeof(GBLuaVectorPackage_VectorDivide) == 0x0000D8, "Wrong size on GBLuaVectorPackage_VectorDivide");
static_assert(offsetof(GBLuaVectorPackage_VectorDivide, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorDivide::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorDivide, B) == 0x000048, "Member 'GBLuaVectorPackage_VectorDivide::B' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorDivide, ReturnValue) == 0x000090, "Member 'GBLuaVectorPackage_VectorDivide::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorEquals
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaVectorPackage_VectorEquals final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              B;                                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorEquals) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorEquals");
static_assert(sizeof(GBLuaVectorPackage_VectorEquals) == 0x0000D8, "Wrong size on GBLuaVectorPackage_VectorEquals");
static_assert(offsetof(GBLuaVectorPackage_VectorEquals, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorEquals::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorEquals, B) == 0x000048, "Member 'GBLuaVectorPackage_VectorEquals::B' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorEquals, ReturnValue) == 0x000090, "Member 'GBLuaVectorPackage_VectorEquals::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorMultiply
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaVectorPackage_VectorMultiply final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              B;                                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorMultiply) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorMultiply");
static_assert(sizeof(GBLuaVectorPackage_VectorMultiply) == 0x0000D8, "Wrong size on GBLuaVectorPackage_VectorMultiply");
static_assert(offsetof(GBLuaVectorPackage_VectorMultiply, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorMultiply::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorMultiply, B) == 0x000048, "Member 'GBLuaVectorPackage_VectorMultiply::B' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorMultiply, ReturnValue) == 0x000090, "Member 'GBLuaVectorPackage_VectorMultiply::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorSize
// 0x0090 (0x0090 - 0x0000)
struct GBLuaVectorPackage_VectorSize final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorSize) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorSize");
static_assert(sizeof(GBLuaVectorPackage_VectorSize) == 0x000090, "Wrong size on GBLuaVectorPackage_VectorSize");
static_assert(offsetof(GBLuaVectorPackage_VectorSize, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorSize::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorSize, ReturnValue) == 0x000048, "Member 'GBLuaVectorPackage_VectorSize::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorSize2D
// 0x0090 (0x0090 - 0x0000)
struct GBLuaVectorPackage_VectorSize2D final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorSize2D) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorSize2D");
static_assert(sizeof(GBLuaVectorPackage_VectorSize2D) == 0x000090, "Wrong size on GBLuaVectorPackage_VectorSize2D");
static_assert(offsetof(GBLuaVectorPackage_VectorSize2D, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorSize2D::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorSize2D, ReturnValue) == 0x000048, "Member 'GBLuaVectorPackage_VectorSize2D::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorSizeSquared
// 0x0090 (0x0090 - 0x0000)
struct GBLuaVectorPackage_VectorSizeSquared final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorSizeSquared) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorSizeSquared");
static_assert(sizeof(GBLuaVectorPackage_VectorSizeSquared) == 0x000090, "Wrong size on GBLuaVectorPackage_VectorSizeSquared");
static_assert(offsetof(GBLuaVectorPackage_VectorSizeSquared, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorSizeSquared::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorSizeSquared, ReturnValue) == 0x000048, "Member 'GBLuaVectorPackage_VectorSizeSquared::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorSizeSquared2D
// 0x0090 (0x0090 - 0x0000)
struct GBLuaVectorPackage_VectorSizeSquared2D final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorSizeSquared2D) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorSizeSquared2D");
static_assert(sizeof(GBLuaVectorPackage_VectorSizeSquared2D) == 0x000090, "Wrong size on GBLuaVectorPackage_VectorSizeSquared2D");
static_assert(offsetof(GBLuaVectorPackage_VectorSizeSquared2D, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorSizeSquared2D::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorSizeSquared2D, ReturnValue) == 0x000048, "Member 'GBLuaVectorPackage_VectorSizeSquared2D::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorStr
// 0x0090 (0x0090 - 0x0000)
struct GBLuaVectorPackage_VectorStr final
{
public:
	struct FLuaValue                              LuaVector;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorStr) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorStr");
static_assert(sizeof(GBLuaVectorPackage_VectorStr) == 0x000090, "Wrong size on GBLuaVectorPackage_VectorStr");
static_assert(offsetof(GBLuaVectorPackage_VectorStr, LuaVector) == 0x000000, "Member 'GBLuaVectorPackage_VectorStr::LuaVector' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorStr, ReturnValue) == 0x000048, "Member 'GBLuaVectorPackage_VectorStr::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorSubtract
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaVectorPackage_VectorSubtract final
{
public:
	struct FLuaValue                              A;                                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              B;                                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorSubtract) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorSubtract");
static_assert(sizeof(GBLuaVectorPackage_VectorSubtract) == 0x0000D8, "Wrong size on GBLuaVectorPackage_VectorSubtract");
static_assert(offsetof(GBLuaVectorPackage_VectorSubtract, A) == 0x000000, "Member 'GBLuaVectorPackage_VectorSubtract::A' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorSubtract, B) == 0x000048, "Member 'GBLuaVectorPackage_VectorSubtract::B' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorSubtract, ReturnValue) == 0x000090, "Member 'GBLuaVectorPackage_VectorSubtract::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.BuildVector
// 0x0058 (0x0058 - 0x0000)
struct GBLuaVectorPackage_BuildVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLuaValue                              ReturnValue;                                       // 0x0010(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_BuildVector) == 0x000008, "Wrong alignment on GBLuaVectorPackage_BuildVector");
static_assert(sizeof(GBLuaVectorPackage_BuildVector) == 0x000058, "Wrong size on GBLuaVectorPackage_BuildVector");
static_assert(offsetof(GBLuaVectorPackage_BuildVector, Vector) == 0x000000, "Member 'GBLuaVectorPackage_BuildVector::Vector' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_BuildVector, ReturnValue) == 0x000010, "Member 'GBLuaVectorPackage_BuildVector::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaVectorPackage.VectorNew
// 0x0168 (0x0168 - 0x0000)
struct GBLuaVectorPackage_VectorNew final
{
public:
	struct FLuaValue                              SelfPackage;                                       // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FLuaValue                              X;                                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              Y;                                                 // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              Z;                                                 // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0120(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaVectorPackage_VectorNew) == 0x000008, "Wrong alignment on GBLuaVectorPackage_VectorNew");
static_assert(sizeof(GBLuaVectorPackage_VectorNew) == 0x000168, "Wrong size on GBLuaVectorPackage_VectorNew");
static_assert(offsetof(GBLuaVectorPackage_VectorNew, SelfPackage) == 0x000000, "Member 'GBLuaVectorPackage_VectorNew::SelfPackage' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorNew, X) == 0x000048, "Member 'GBLuaVectorPackage_VectorNew::X' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorNew, Y) == 0x000090, "Member 'GBLuaVectorPackage_VectorNew::Y' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorNew, Z) == 0x0000D8, "Member 'GBLuaVectorPackage_VectorNew::Z' has a wrong offset!");
static_assert(offsetof(GBLuaVectorPackage_VectorNew, ReturnValue) == 0x000120, "Member 'GBLuaVectorPackage_VectorNew::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.AlphaToByte
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_AlphaToByte final
{
public:
	float                                         AlphaValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_AlphaToByte) == 0x000004, "Wrong alignment on GBFunctionLibrary_AlphaToByte");
static_assert(sizeof(GBFunctionLibrary_AlphaToByte) == 0x000008, "Wrong size on GBFunctionLibrary_AlphaToByte");
static_assert(offsetof(GBFunctionLibrary_AlphaToByte, AlphaValue) == 0x000000, "Member 'GBFunctionLibrary_AlphaToByte::AlphaValue' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_AlphaToByte, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_AlphaToByte::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.AngleWithin
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_AngleWithin final
{
public:
	float                                         AngleDegrees;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleDegrees;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDegrees;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInclusive;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_AngleWithin) == 0x000004, "Wrong alignment on GBFunctionLibrary_AngleWithin");
static_assert(sizeof(GBFunctionLibrary_AngleWithin) == 0x000010, "Wrong size on GBFunctionLibrary_AngleWithin");
static_assert(offsetof(GBFunctionLibrary_AngleWithin, AngleDegrees) == 0x000000, "Member 'GBFunctionLibrary_AngleWithin::AngleDegrees' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_AngleWithin, MinAngleDegrees) == 0x000004, "Member 'GBFunctionLibrary_AngleWithin::MinAngleDegrees' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_AngleWithin, MaxAngleDegrees) == 0x000008, "Member 'GBFunctionLibrary_AngleWithin::MaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_AngleWithin, bInclusive) == 0x00000C, "Member 'GBFunctionLibrary_AngleWithin::bInclusive' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_AngleWithin, ReturnValue) == 0x00000D, "Member 'GBFunctionLibrary_AngleWithin::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Array_Sort
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_Array_Sort final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAscendingOrder;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VariableName;                                      // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Array_Sort) == 0x000008, "Wrong alignment on GBFunctionLibrary_Array_Sort");
static_assert(sizeof(GBFunctionLibrary_Array_Sort) == 0x000020, "Wrong size on GBFunctionLibrary_Array_Sort");
static_assert(offsetof(GBFunctionLibrary_Array_Sort, TargetArray) == 0x000000, "Member 'GBFunctionLibrary_Array_Sort::TargetArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Array_Sort, bAscendingOrder) == 0x000010, "Member 'GBFunctionLibrary_Array_Sort::bAscendingOrder' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Array_Sort, VariableName) == 0x000014, "Member 'GBFunctionLibrary_Array_Sort::VariableName' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.BlueprintSyncLoadAsset
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_BlueprintSyncLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObjectPtr;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_BlueprintSyncLoadAsset) == 0x000008, "Wrong alignment on GBFunctionLibrary_BlueprintSyncLoadAsset");
static_assert(sizeof(GBFunctionLibrary_BlueprintSyncLoadAsset) == 0x000030, "Wrong size on GBFunctionLibrary_BlueprintSyncLoadAsset");
static_assert(offsetof(GBFunctionLibrary_BlueprintSyncLoadAsset, SoftObjectPtr) == 0x000000, "Member 'GBFunctionLibrary_BlueprintSyncLoadAsset::SoftObjectPtr' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_BlueprintSyncLoadAsset, ReturnValue) == 0x000028, "Member 'GBFunctionLibrary_BlueprintSyncLoadAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.BlueprintSyncLoadClass
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_BlueprintSyncLoadClass final
{
public:
	TSoftClassPtr<class UClass>                   SoftClassPtr;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_BlueprintSyncLoadClass) == 0x000008, "Wrong alignment on GBFunctionLibrary_BlueprintSyncLoadClass");
static_assert(sizeof(GBFunctionLibrary_BlueprintSyncLoadClass) == 0x000030, "Wrong size on GBFunctionLibrary_BlueprintSyncLoadClass");
static_assert(offsetof(GBFunctionLibrary_BlueprintSyncLoadClass, SoftClassPtr) == 0x000000, "Member 'GBFunctionLibrary_BlueprintSyncLoadClass::SoftClassPtr' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_BlueprintSyncLoadClass, ReturnValue) == 0x000028, "Member 'GBFunctionLibrary_BlueprintSyncLoadClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.BP_GetJsonObjHash
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_BP_GetJsonObjHash final
{
public:
	class UVaRestJsonObject*                      JsonObj;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_BP_GetJsonObjHash) == 0x000008, "Wrong alignment on GBFunctionLibrary_BP_GetJsonObjHash");
static_assert(sizeof(GBFunctionLibrary_BP_GetJsonObjHash) == 0x000018, "Wrong size on GBFunctionLibrary_BP_GetJsonObjHash");
static_assert(offsetof(GBFunctionLibrary_BP_GetJsonObjHash, JsonObj) == 0x000000, "Member 'GBFunctionLibrary_BP_GetJsonObjHash::JsonObj' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_BP_GetJsonObjHash, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_BP_GetJsonObjHash::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ByteToAlpha
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_ByteToAlpha final
{
public:
	uint8                                         ByteValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_ByteToAlpha) == 0x000004, "Wrong alignment on GBFunctionLibrary_ByteToAlpha");
static_assert(sizeof(GBFunctionLibrary_ByteToAlpha) == 0x000008, "Wrong size on GBFunctionLibrary_ByteToAlpha");
static_assert(offsetof(GBFunctionLibrary_ByteToAlpha, ByteValue) == 0x000000, "Member 'GBFunctionLibrary_ByteToAlpha::ByteValue' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ByteToAlpha, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_ByteToAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ByteToSignedAlpha
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_ByteToSignedAlpha final
{
public:
	uint8                                         ByteValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_ByteToSignedAlpha) == 0x000004, "Wrong alignment on GBFunctionLibrary_ByteToSignedAlpha");
static_assert(sizeof(GBFunctionLibrary_ByteToSignedAlpha) == 0x000008, "Wrong size on GBFunctionLibrary_ByteToSignedAlpha");
static_assert(offsetof(GBFunctionLibrary_ByteToSignedAlpha, ByteValue) == 0x000000, "Member 'GBFunctionLibrary_ByteToSignedAlpha::ByteValue' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ByteToSignedAlpha, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_ByteToSignedAlpha::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Capture2D_DeProject
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_Capture2D_DeProject final
{
public:
	const class ASceneCapture2D*                  Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPos;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldOrigin;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Capture2D_DeProject) == 0x000008, "Wrong alignment on GBFunctionLibrary_Capture2D_DeProject");
static_assert(sizeof(GBFunctionLibrary_Capture2D_DeProject) == 0x000028, "Wrong size on GBFunctionLibrary_Capture2D_DeProject");
static_assert(offsetof(GBFunctionLibrary_Capture2D_DeProject, Target) == 0x000000, "Member 'GBFunctionLibrary_Capture2D_DeProject::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_DeProject, ScreenPos) == 0x000008, "Member 'GBFunctionLibrary_Capture2D_DeProject::ScreenPos' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_DeProject, OutWorldOrigin) == 0x000010, "Member 'GBFunctionLibrary_Capture2D_DeProject::OutWorldOrigin' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_DeProject, OutWorldDirection) == 0x00001C, "Member 'GBFunctionLibrary_Capture2D_DeProject::OutWorldDirection' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Capture2D_Project
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_Capture2D_Project final
{
public:
	const class ASceneCapture2D*                  Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Capture2D_Project) == 0x000008, "Wrong alignment on GBFunctionLibrary_Capture2D_Project");
static_assert(sizeof(GBFunctionLibrary_Capture2D_Project) == 0x000020, "Wrong size on GBFunctionLibrary_Capture2D_Project");
static_assert(offsetof(GBFunctionLibrary_Capture2D_Project, Target) == 0x000000, "Member 'GBFunctionLibrary_Capture2D_Project::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_Project, Location) == 0x000008, "Member 'GBFunctionLibrary_Capture2D_Project::Location' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_Project, OutPixelLocation) == 0x000014, "Member 'GBFunctionLibrary_Capture2D_Project::OutPixelLocation' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Capture2D_SaveImage
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_Capture2D_SaveImage final
{
public:
	class ASceneCapture2D*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColour;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Capture2D_SaveImage) == 0x000008, "Wrong alignment on GBFunctionLibrary_Capture2D_SaveImage");
static_assert(sizeof(GBFunctionLibrary_Capture2D_SaveImage) == 0x000030, "Wrong size on GBFunctionLibrary_Capture2D_SaveImage");
static_assert(offsetof(GBFunctionLibrary_Capture2D_SaveImage, Target) == 0x000000, "Member 'GBFunctionLibrary_Capture2D_SaveImage::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_SaveImage, ImagePath) == 0x000008, "Member 'GBFunctionLibrary_Capture2D_SaveImage::ImagePath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_SaveImage, ClearColour) == 0x000018, "Member 'GBFunctionLibrary_Capture2D_SaveImage::ClearColour' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Capture2D_SaveImage, ReturnValue) == 0x000028, "Member 'GBFunctionLibrary_Capture2D_SaveImage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CaptureComponent2D_DeProject
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_CaptureComponent2D_DeProject final
{
public:
	const class USceneCaptureComponent2D*         Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPos;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldOrigin;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_CaptureComponent2D_DeProject) == 0x000008, "Wrong alignment on GBFunctionLibrary_CaptureComponent2D_DeProject");
static_assert(sizeof(GBFunctionLibrary_CaptureComponent2D_DeProject) == 0x000028, "Wrong size on GBFunctionLibrary_CaptureComponent2D_DeProject");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_DeProject, Target) == 0x000000, "Member 'GBFunctionLibrary_CaptureComponent2D_DeProject::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_DeProject, ScreenPos) == 0x000008, "Member 'GBFunctionLibrary_CaptureComponent2D_DeProject::ScreenPos' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_DeProject, OutWorldOrigin) == 0x000010, "Member 'GBFunctionLibrary_CaptureComponent2D_DeProject::OutWorldOrigin' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_DeProject, OutWorldDirection) == 0x00001C, "Member 'GBFunctionLibrary_CaptureComponent2D_DeProject::OutWorldDirection' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CaptureComponent2D_Project
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_CaptureComponent2D_Project final
{
public:
	const class USceneCaptureComponent2D*         Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_CaptureComponent2D_Project) == 0x000008, "Wrong alignment on GBFunctionLibrary_CaptureComponent2D_Project");
static_assert(sizeof(GBFunctionLibrary_CaptureComponent2D_Project) == 0x000020, "Wrong size on GBFunctionLibrary_CaptureComponent2D_Project");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_Project, Target) == 0x000000, "Member 'GBFunctionLibrary_CaptureComponent2D_Project::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_Project, Location) == 0x000008, "Member 'GBFunctionLibrary_CaptureComponent2D_Project::Location' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_Project, OutPixelLocation) == 0x000014, "Member 'GBFunctionLibrary_CaptureComponent2D_Project::OutPixelLocation' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CaptureComponent2D_SaveImage
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_CaptureComponent2D_SaveImage final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColour;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_CaptureComponent2D_SaveImage) == 0x000008, "Wrong alignment on GBFunctionLibrary_CaptureComponent2D_SaveImage");
static_assert(sizeof(GBFunctionLibrary_CaptureComponent2D_SaveImage) == 0x000030, "Wrong size on GBFunctionLibrary_CaptureComponent2D_SaveImage");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_SaveImage, Target) == 0x000000, "Member 'GBFunctionLibrary_CaptureComponent2D_SaveImage::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_SaveImage, ImagePath) == 0x000008, "Member 'GBFunctionLibrary_CaptureComponent2D_SaveImage::ImagePath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_SaveImage, ClearColour) == 0x000018, "Member 'GBFunctionLibrary_CaptureComponent2D_SaveImage::ClearColour' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CaptureComponent2D_SaveImage, ReturnValue) == 0x000028, "Member 'GBFunctionLibrary_CaptureComponent2D_SaveImage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CleanAuthorName
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_CleanAuthorName final
{
public:
	class FString                                 InAuthorName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnUnknownIfUnknown;                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_CleanAuthorName) == 0x000008, "Wrong alignment on GBFunctionLibrary_CleanAuthorName");
static_assert(sizeof(GBFunctionLibrary_CleanAuthorName) == 0x000028, "Wrong size on GBFunctionLibrary_CleanAuthorName");
static_assert(offsetof(GBFunctionLibrary_CleanAuthorName, InAuthorName) == 0x000000, "Member 'GBFunctionLibrary_CleanAuthorName::InAuthorName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CleanAuthorName, bReturnUnknownIfUnknown) == 0x000010, "Member 'GBFunctionLibrary_CleanAuthorName::bReturnUnknownIfUnknown' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CleanAuthorName, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_CleanAuthorName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ClearDirectoryReadyOnly
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_ClearDirectoryReadyOnly final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ClearDirectoryReadyOnly) == 0x000008, "Wrong alignment on GBFunctionLibrary_ClearDirectoryReadyOnly");
static_assert(sizeof(GBFunctionLibrary_ClearDirectoryReadyOnly) == 0x000018, "Wrong size on GBFunctionLibrary_ClearDirectoryReadyOnly");
static_assert(offsetof(GBFunctionLibrary_ClearDirectoryReadyOnly, Path) == 0x000000, "Member 'GBFunctionLibrary_ClearDirectoryReadyOnly::Path' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ClearDirectoryReadyOnly, bRecursive) == 0x000010, "Member 'GBFunctionLibrary_ClearDirectoryReadyOnly::bRecursive' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ClearDirectoryReadyOnly, ReturnValue) == 0x000011, "Member 'GBFunctionLibrary_ClearDirectoryReadyOnly::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ClearFileReadyOnly
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_ClearFileReadyOnly final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ClearFileReadyOnly) == 0x000008, "Wrong alignment on GBFunctionLibrary_ClearFileReadyOnly");
static_assert(sizeof(GBFunctionLibrary_ClearFileReadyOnly) == 0x000018, "Wrong size on GBFunctionLibrary_ClearFileReadyOnly");
static_assert(offsetof(GBFunctionLibrary_ClearFileReadyOnly, Filename) == 0x000000, "Member 'GBFunctionLibrary_ClearFileReadyOnly::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ClearFileReadyOnly, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_ClearFileReadyOnly::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Component_SetCastHiddenShadow
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_Component_SetCastHiddenShadow final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCastHiddenShadow;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Component_SetCastHiddenShadow) == 0x000008, "Wrong alignment on GBFunctionLibrary_Component_SetCastHiddenShadow");
static_assert(sizeof(GBFunctionLibrary_Component_SetCastHiddenShadow) == 0x000010, "Wrong size on GBFunctionLibrary_Component_SetCastHiddenShadow");
static_assert(offsetof(GBFunctionLibrary_Component_SetCastHiddenShadow, PrimitiveComponent) == 0x000000, "Member 'GBFunctionLibrary_Component_SetCastHiddenShadow::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Component_SetCastHiddenShadow, bNewCastHiddenShadow) == 0x000008, "Member 'GBFunctionLibrary_Component_SetCastHiddenShadow::bNewCastHiddenShadow' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CondenseJsonString
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_CondenseJsonString final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutCondensedString;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_CondenseJsonString) == 0x000008, "Wrong alignment on GBFunctionLibrary_CondenseJsonString");
static_assert(sizeof(GBFunctionLibrary_CondenseJsonString) == 0x000028, "Wrong size on GBFunctionLibrary_CondenseJsonString");
static_assert(offsetof(GBFunctionLibrary_CondenseJsonString, JsonString) == 0x000000, "Member 'GBFunctionLibrary_CondenseJsonString::JsonString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CondenseJsonString, OutCondensedString) == 0x000010, "Member 'GBFunctionLibrary_CondenseJsonString::OutCondensedString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CondenseJsonString, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_CondenseJsonString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_AddToArray
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_Config_AddToArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_AddToArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_AddToArray");
static_assert(sizeof(GBFunctionLibrary_Config_AddToArray) == 0x000040, "Wrong size on GBFunctionLibrary_Config_AddToArray");
static_assert(offsetof(GBFunctionLibrary_Config_AddToArray, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_AddToArray::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_AddToArray, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_AddToArray::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_AddToArray, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_AddToArray::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_AddToArray, Value) == 0x000030, "Member 'GBFunctionLibrary_Config_AddToArray::Value' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_DeleteArray
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_Config_DeleteArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_DeleteArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_DeleteArray");
static_assert(sizeof(GBFunctionLibrary_Config_DeleteArray) == 0x000030, "Wrong size on GBFunctionLibrary_Config_DeleteArray");
static_assert(offsetof(GBFunctionLibrary_Config_DeleteArray, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_DeleteArray::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_DeleteArray, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_DeleteArray::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_DeleteArray, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_DeleteArray::Key' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_GetArray
// 0x0048 (0x0048 - 0x0000)
struct GBFunctionLibrary_Config_GetArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_GetArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_GetArray");
static_assert(sizeof(GBFunctionLibrary_Config_GetArray) == 0x000048, "Wrong size on GBFunctionLibrary_Config_GetArray");
static_assert(offsetof(GBFunctionLibrary_Config_GetArray, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_GetArray::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetArray, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_GetArray::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetArray, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_GetArray::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetArray, bValid) == 0x000030, "Member 'GBFunctionLibrary_Config_GetArray::bValid' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetArray, ReturnValue) == 0x000038, "Member 'GBFunctionLibrary_Config_GetArray::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_GetBool
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_Config_GetBool final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Config_GetBool) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_GetBool");
static_assert(sizeof(GBFunctionLibrary_Config_GetBool) == 0x000038, "Wrong size on GBFunctionLibrary_Config_GetBool");
static_assert(offsetof(GBFunctionLibrary_Config_GetBool, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_GetBool::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetBool, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_GetBool::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetBool, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_GetBool::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetBool, bValid) == 0x000030, "Member 'GBFunctionLibrary_Config_GetBool::bValid' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetBool, ReturnValue) == 0x000031, "Member 'GBFunctionLibrary_Config_GetBool::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_GetFloat
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_Config_GetFloat final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_GetFloat) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_GetFloat");
static_assert(sizeof(GBFunctionLibrary_Config_GetFloat) == 0x000038, "Wrong size on GBFunctionLibrary_Config_GetFloat");
static_assert(offsetof(GBFunctionLibrary_Config_GetFloat, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_GetFloat::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetFloat, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_GetFloat::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetFloat, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_GetFloat::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetFloat, bValid) == 0x000030, "Member 'GBFunctionLibrary_Config_GetFloat::bValid' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetFloat, ReturnValue) == 0x000034, "Member 'GBFunctionLibrary_Config_GetFloat::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_GetInt
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_Config_GetInt final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_GetInt) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_GetInt");
static_assert(sizeof(GBFunctionLibrary_Config_GetInt) == 0x000038, "Wrong size on GBFunctionLibrary_Config_GetInt");
static_assert(offsetof(GBFunctionLibrary_Config_GetInt, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_GetInt::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetInt, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_GetInt::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetInt, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_GetInt::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetInt, bValid) == 0x000030, "Member 'GBFunctionLibrary_Config_GetInt::bValid' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetInt, ReturnValue) == 0x000034, "Member 'GBFunctionLibrary_Config_GetInt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_GetString
// 0x0048 (0x0048 - 0x0000)
struct GBFunctionLibrary_Config_GetString final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_GetString) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_GetString");
static_assert(sizeof(GBFunctionLibrary_Config_GetString) == 0x000048, "Wrong size on GBFunctionLibrary_Config_GetString");
static_assert(offsetof(GBFunctionLibrary_Config_GetString, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_GetString::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetString, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_GetString::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetString, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_GetString::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetString, bValid) == 0x000030, "Member 'GBFunctionLibrary_Config_GetString::bValid' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_GetString, ReturnValue) == 0x000038, "Member 'GBFunctionLibrary_Config_GetString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_RemoveFromArray
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_Config_RemoveFromArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_RemoveFromArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_RemoveFromArray");
static_assert(sizeof(GBFunctionLibrary_Config_RemoveFromArray) == 0x000040, "Wrong size on GBFunctionLibrary_Config_RemoveFromArray");
static_assert(offsetof(GBFunctionLibrary_Config_RemoveFromArray, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_RemoveFromArray::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_RemoveFromArray, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_RemoveFromArray::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_RemoveFromArray, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_RemoveFromArray::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_RemoveFromArray, Value) == 0x000030, "Member 'GBFunctionLibrary_Config_RemoveFromArray::Value' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_Save
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_Config_Save final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_Save) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_Save");
static_assert(sizeof(GBFunctionLibrary_Config_Save) == 0x000010, "Wrong size on GBFunctionLibrary_Config_Save");
static_assert(offsetof(GBFunctionLibrary_Config_Save, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_Save::Filename' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_SetArray
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_Config_SetArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_SetArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_SetArray");
static_assert(sizeof(GBFunctionLibrary_Config_SetArray) == 0x000040, "Wrong size on GBFunctionLibrary_Config_SetArray");
static_assert(offsetof(GBFunctionLibrary_Config_SetArray, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_SetArray::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetArray, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_SetArray::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetArray, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_SetArray::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetArray, Values) == 0x000030, "Member 'GBFunctionLibrary_Config_SetArray::Values' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_SetBool
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_Config_SetBool final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0030(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Config_SetBool) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_SetBool");
static_assert(sizeof(GBFunctionLibrary_Config_SetBool) == 0x000038, "Wrong size on GBFunctionLibrary_Config_SetBool");
static_assert(offsetof(GBFunctionLibrary_Config_SetBool, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_SetBool::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetBool, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_SetBool::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetBool, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_SetBool::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetBool, Value) == 0x000030, "Member 'GBFunctionLibrary_Config_SetBool::Value' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_SetFloat
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_Config_SetFloat final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0030(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Config_SetFloat) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_SetFloat");
static_assert(sizeof(GBFunctionLibrary_Config_SetFloat) == 0x000038, "Wrong size on GBFunctionLibrary_Config_SetFloat");
static_assert(offsetof(GBFunctionLibrary_Config_SetFloat, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_SetFloat::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetFloat, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_SetFloat::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetFloat, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_SetFloat::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetFloat, Value) == 0x000030, "Member 'GBFunctionLibrary_Config_SetFloat::Value' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_SetInt
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_Config_SetInt final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Config_SetInt) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_SetInt");
static_assert(sizeof(GBFunctionLibrary_Config_SetInt) == 0x000038, "Wrong size on GBFunctionLibrary_Config_SetInt");
static_assert(offsetof(GBFunctionLibrary_Config_SetInt, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_SetInt::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetInt, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_SetInt::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetInt, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_SetInt::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetInt, Value) == 0x000030, "Member 'GBFunctionLibrary_Config_SetInt::Value' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Config_SetString
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_Config_SetString final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Config_SetString) == 0x000008, "Wrong alignment on GBFunctionLibrary_Config_SetString");
static_assert(sizeof(GBFunctionLibrary_Config_SetString) == 0x000040, "Wrong size on GBFunctionLibrary_Config_SetString");
static_assert(offsetof(GBFunctionLibrary_Config_SetString, Filename) == 0x000000, "Member 'GBFunctionLibrary_Config_SetString::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetString, Section) == 0x000010, "Member 'GBFunctionLibrary_Config_SetString::Section' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetString, Key) == 0x000020, "Member 'GBFunctionLibrary_Config_SetString::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Config_SetString, Value) == 0x000030, "Member 'GBFunctionLibrary_Config_SetString::Value' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Convert24HoursToMinutes
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_Convert24HoursToMinutes final
{
public:
	class FString                                 TimeString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Convert24HoursToMinutes) == 0x000008, "Wrong alignment on GBFunctionLibrary_Convert24HoursToMinutes");
static_assert(sizeof(GBFunctionLibrary_Convert24HoursToMinutes) == 0x000018, "Wrong size on GBFunctionLibrary_Convert24HoursToMinutes");
static_assert(offsetof(GBFunctionLibrary_Convert24HoursToMinutes, TimeString) == 0x000000, "Member 'GBFunctionLibrary_Convert24HoursToMinutes::TimeString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Convert24HoursToMinutes, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_Convert24HoursToMinutes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ConvertMinutesTo24Hours
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_ConvertMinutesTo24Hours final
{
public:
	int32                                         MinutesOfDay;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_ConvertMinutesTo24Hours) == 0x000008, "Wrong alignment on GBFunctionLibrary_ConvertMinutesTo24Hours");
static_assert(sizeof(GBFunctionLibrary_ConvertMinutesTo24Hours) == 0x000018, "Wrong size on GBFunctionLibrary_ConvertMinutesTo24Hours");
static_assert(offsetof(GBFunctionLibrary_ConvertMinutesTo24Hours, MinutesOfDay) == 0x000000, "Member 'GBFunctionLibrary_ConvertMinutesTo24Hours::MinutesOfDay' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ConvertMinutesTo24Hours, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_ConvertMinutesTo24Hours::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CopyMeshComponents
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_CopyMeshComponents final
{
public:
	class AActor*                                 NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ParentComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_CopyMeshComponents) == 0x000008, "Wrong alignment on GBFunctionLibrary_CopyMeshComponents");
static_assert(sizeof(GBFunctionLibrary_CopyMeshComponents) == 0x000018, "Wrong size on GBFunctionLibrary_CopyMeshComponents");
static_assert(offsetof(GBFunctionLibrary_CopyMeshComponents, NewOwner) == 0x000000, "Member 'GBFunctionLibrary_CopyMeshComponents::NewOwner' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CopyMeshComponents, ParentComponent) == 0x000008, "Member 'GBFunctionLibrary_CopyMeshComponents::ParentComponent' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CopyMeshComponents, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_CopyMeshComponents::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.createDirectory
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_createDirectory final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_createDirectory) == 0x000008, "Wrong alignment on GBFunctionLibrary_createDirectory");
static_assert(sizeof(GBFunctionLibrary_createDirectory) == 0x000018, "Wrong size on GBFunctionLibrary_createDirectory");
static_assert(offsetof(GBFunctionLibrary_createDirectory, Path) == 0x000000, "Member 'GBFunctionLibrary_createDirectory::Path' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_createDirectory, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_createDirectory::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CreateFoldersForFilename
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_CreateFoldersForFilename final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_CreateFoldersForFilename) == 0x000008, "Wrong alignment on GBFunctionLibrary_CreateFoldersForFilename");
static_assert(sizeof(GBFunctionLibrary_CreateFoldersForFilename) == 0x000018, "Wrong size on GBFunctionLibrary_CreateFoldersForFilename");
static_assert(offsetof(GBFunctionLibrary_CreateFoldersForFilename, Filename) == 0x000000, "Member 'GBFunctionLibrary_CreateFoldersForFilename::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateFoldersForFilename, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_CreateFoldersForFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CreateMeshComponentCopy
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_CreateMeshComponentCopy final
{
public:
	class AActor*                                 NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_CreateMeshComponentCopy) == 0x000008, "Wrong alignment on GBFunctionLibrary_CreateMeshComponentCopy");
static_assert(sizeof(GBFunctionLibrary_CreateMeshComponentCopy) == 0x000018, "Wrong size on GBFunctionLibrary_CreateMeshComponentCopy");
static_assert(offsetof(GBFunctionLibrary_CreateMeshComponentCopy, NewOwner) == 0x000000, "Member 'GBFunctionLibrary_CreateMeshComponentCopy::NewOwner' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateMeshComponentCopy, Source) == 0x000008, "Member 'GBFunctionLibrary_CreateMeshComponentCopy::Source' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateMeshComponentCopy, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_CreateMeshComponentCopy::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.CreateVolume
// 0x0060 (0x0060 - 0x0000)
struct GBFunctionLibrary_CreateVolume final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTM;                                           // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0040(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AVolume>                    VolumeClass;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVolume*                                ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_CreateVolume) == 0x000010, "Wrong alignment on GBFunctionLibrary_CreateVolume");
static_assert(sizeof(GBFunctionLibrary_CreateVolume) == 0x000060, "Wrong size on GBFunctionLibrary_CreateVolume");
static_assert(offsetof(GBFunctionLibrary_CreateVolume, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_CreateVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateVolume, SpawnTM) == 0x000010, "Member 'GBFunctionLibrary_CreateVolume::SpawnTM' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateVolume, Size) == 0x000040, "Member 'GBFunctionLibrary_CreateVolume::Size' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateVolume, VolumeClass) == 0x000050, "Member 'GBFunctionLibrary_CreateVolume::VolumeClass' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_CreateVolume, ReturnValue) == 0x000058, "Member 'GBFunctionLibrary_CreateVolume::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecodeServerTag
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_DecodeServerTag final
{
public:
	class FString                                 ServerTag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_DecodeServerTag) == 0x000008, "Wrong alignment on GBFunctionLibrary_DecodeServerTag");
static_assert(sizeof(GBFunctionLibrary_DecodeServerTag) == 0x000020, "Wrong size on GBFunctionLibrary_DecodeServerTag");
static_assert(offsetof(GBFunctionLibrary_DecodeServerTag, ServerTag) == 0x000000, "Member 'GBFunctionLibrary_DecodeServerTag::ServerTag' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeServerTag, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_DecodeServerTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecodeTimeOfDayDateString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_DecodeTimeOfDayDateString final
{
public:
	class FString                                 InDateString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutYear;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMonth;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDay;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_DecodeTimeOfDayDateString) == 0x000008, "Wrong alignment on GBFunctionLibrary_DecodeTimeOfDayDateString");
static_assert(sizeof(GBFunctionLibrary_DecodeTimeOfDayDateString) == 0x000020, "Wrong size on GBFunctionLibrary_DecodeTimeOfDayDateString");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayDateString, InDateString) == 0x000000, "Member 'GBFunctionLibrary_DecodeTimeOfDayDateString::InDateString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayDateString, OutYear) == 0x000010, "Member 'GBFunctionLibrary_DecodeTimeOfDayDateString::OutYear' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayDateString, OutMonth) == 0x000014, "Member 'GBFunctionLibrary_DecodeTimeOfDayDateString::OutMonth' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayDateString, OutDay) == 0x000018, "Member 'GBFunctionLibrary_DecodeTimeOfDayDateString::OutDay' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecodeTimeOfDayString
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_DecodeTimeOfDayString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionTimeLabel                             OutMissionTimeLabel;                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutTimeInHours;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutYear;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMonth;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDay;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDefaultDate;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_DecodeTimeOfDayString) == 0x000008, "Wrong alignment on GBFunctionLibrary_DecodeTimeOfDayString");
static_assert(sizeof(GBFunctionLibrary_DecodeTimeOfDayString) == 0x000028, "Wrong size on GBFunctionLibrary_DecodeTimeOfDayString");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, inString) == 0x000000, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::inString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, OutMissionTimeLabel) == 0x000010, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::OutMissionTimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, OutTimeInHours) == 0x000014, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::OutTimeInHours' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, OutYear) == 0x000018, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::OutYear' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, OutMonth) == 0x00001C, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::OutMonth' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, OutDay) == 0x000020, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::OutDay' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayString, bSetDefaultDate) == 0x000024, "Member 'GBFunctionLibrary_DecodeTimeOfDayString::bSetDefaultDate' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecodeTimeOfDayTimeString
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_DecodeTimeOfDayTimeString final
{
public:
	class FString                                 InTimeString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionTimeLabel                             OutMissionTimeLabel;                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutTimeInHours;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_DecodeTimeOfDayTimeString) == 0x000008, "Wrong alignment on GBFunctionLibrary_DecodeTimeOfDayTimeString");
static_assert(sizeof(GBFunctionLibrary_DecodeTimeOfDayTimeString) == 0x000018, "Wrong size on GBFunctionLibrary_DecodeTimeOfDayTimeString");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayTimeString, InTimeString) == 0x000000, "Member 'GBFunctionLibrary_DecodeTimeOfDayTimeString::InTimeString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayTimeString, OutMissionTimeLabel) == 0x000010, "Member 'GBFunctionLibrary_DecodeTimeOfDayTimeString::OutMissionTimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeTimeOfDayTimeString, OutTimeInHours) == 0x000014, "Member 'GBFunctionLibrary_DecodeTimeOfDayTimeString::OutTimeInHours' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecodeWeatherPresetFileName
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_DecodeWeatherPresetFileName final
{
public:
	class FString                                 WeatherFilename;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherCategory;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherType;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_DecodeWeatherPresetFileName) == 0x000008, "Wrong alignment on GBFunctionLibrary_DecodeWeatherPresetFileName");
static_assert(sizeof(GBFunctionLibrary_DecodeWeatherPresetFileName) == 0x000020, "Wrong size on GBFunctionLibrary_DecodeWeatherPresetFileName");
static_assert(offsetof(GBFunctionLibrary_DecodeWeatherPresetFileName, WeatherFilename) == 0x000000, "Member 'GBFunctionLibrary_DecodeWeatherPresetFileName::WeatherFilename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeWeatherPresetFileName, OutWeatherCategory) == 0x000010, "Member 'GBFunctionLibrary_DecodeWeatherPresetFileName::OutWeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeWeatherPresetFileName, OutWeatherType) == 0x000018, "Member 'GBFunctionLibrary_DecodeWeatherPresetFileName::OutWeatherType' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecodeWeatherString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_DecodeWeatherString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherCategory;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherType;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_DecodeWeatherString) == 0x000008, "Wrong alignment on GBFunctionLibrary_DecodeWeatherString");
static_assert(sizeof(GBFunctionLibrary_DecodeWeatherString) == 0x000020, "Wrong size on GBFunctionLibrary_DecodeWeatherString");
static_assert(offsetof(GBFunctionLibrary_DecodeWeatherString, inString) == 0x000000, "Member 'GBFunctionLibrary_DecodeWeatherString::inString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeWeatherString, OutWeatherCategory) == 0x000010, "Member 'GBFunctionLibrary_DecodeWeatherString::OutWeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecodeWeatherString, OutWeatherType) == 0x000018, "Member 'GBFunctionLibrary_DecodeWeatherString::OutWeatherType' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DecompressAxisFromByte
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_DecompressAxisFromByte final
{
public:
	uint8                                         CompressedAngle;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_DecompressAxisFromByte) == 0x000004, "Wrong alignment on GBFunctionLibrary_DecompressAxisFromByte");
static_assert(sizeof(GBFunctionLibrary_DecompressAxisFromByte) == 0x000008, "Wrong size on GBFunctionLibrary_DecompressAxisFromByte");
static_assert(offsetof(GBFunctionLibrary_DecompressAxisFromByte, CompressedAngle) == 0x000000, "Member 'GBFunctionLibrary_DecompressAxisFromByte::CompressedAngle' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DecompressAxisFromByte, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_DecompressAxisFromByte::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.deleteFile
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_deleteFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogWarnings;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_deleteFile) == 0x000008, "Wrong alignment on GBFunctionLibrary_deleteFile");
static_assert(sizeof(GBFunctionLibrary_deleteFile) == 0x000018, "Wrong size on GBFunctionLibrary_deleteFile");
static_assert(offsetof(GBFunctionLibrary_deleteFile, Filename) == 0x000000, "Member 'GBFunctionLibrary_deleteFile::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_deleteFile, bLogWarnings) == 0x000010, "Member 'GBFunctionLibrary_deleteFile::bLogWarnings' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_deleteFile, ReturnValue) == 0x000011, "Member 'GBFunctionLibrary_deleteFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Deproject
// 0x0060 (0x0060 - 0x0000)
struct GBFunctionLibrary_Deproject final
{
public:
	struct FTransform                             ViewTM;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenSize;                                        // 0x0034(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x003C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldLocation;                                  // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x0050(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_Deproject) == 0x000010, "Wrong alignment on GBFunctionLibrary_Deproject");
static_assert(sizeof(GBFunctionLibrary_Deproject) == 0x000060, "Wrong size on GBFunctionLibrary_Deproject");
static_assert(offsetof(GBFunctionLibrary_Deproject, ViewTM) == 0x000000, "Member 'GBFunctionLibrary_Deproject::ViewTM' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Deproject, FOV) == 0x000030, "Member 'GBFunctionLibrary_Deproject::FOV' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Deproject, ScreenSize) == 0x000034, "Member 'GBFunctionLibrary_Deproject::ScreenSize' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Deproject, ScreenPosition) == 0x00003C, "Member 'GBFunctionLibrary_Deproject::ScreenPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Deproject, OutWorldLocation) == 0x000044, "Member 'GBFunctionLibrary_Deproject::OutWorldLocation' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Deproject, OutWorldDirection) == 0x000050, "Member 'GBFunctionLibrary_Deproject::OutWorldDirection' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DrawDebugWideArrow
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_DrawDebugWideArrow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineStart;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_DrawDebugWideArrow) == 0x000008, "Wrong alignment on GBFunctionLibrary_DrawDebugWideArrow");
static_assert(sizeof(GBFunctionLibrary_DrawDebugWideArrow) == 0x000040, "Wrong size on GBFunctionLibrary_DrawDebugWideArrow");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_DrawDebugWideArrow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, LineStart) == 0x000008, "Member 'GBFunctionLibrary_DrawDebugWideArrow::LineStart' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, LineEnd) == 0x000014, "Member 'GBFunctionLibrary_DrawDebugWideArrow::LineEnd' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, Width) == 0x000020, "Member 'GBFunctionLibrary_DrawDebugWideArrow::Width' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, LineColor) == 0x000024, "Member 'GBFunctionLibrary_DrawDebugWideArrow::LineColor' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, Duration) == 0x000034, "Member 'GBFunctionLibrary_DrawDebugWideArrow::Duration' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DrawDebugWideArrow, Thickness) == 0x000038, "Member 'GBFunctionLibrary_DrawDebugWideArrow::Thickness' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.DumpGameInfoToLog
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_DumpGameInfoToLog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DumpContext;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_DumpGameInfoToLog) == 0x000008, "Wrong alignment on GBFunctionLibrary_DumpGameInfoToLog");
static_assert(sizeof(GBFunctionLibrary_DumpGameInfoToLog) == 0x000018, "Wrong size on GBFunctionLibrary_DumpGameInfoToLog");
static_assert(offsetof(GBFunctionLibrary_DumpGameInfoToLog, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_DumpGameInfoToLog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_DumpGameInfoToLog, DumpContext) == 0x000008, "Member 'GBFunctionLibrary_DumpGameInfoToLog::DumpContext' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeServerTag
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_EncodeServerTag final
{
public:
	class FString                                 ServerTag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeServerTag) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeServerTag");
static_assert(sizeof(GBFunctionLibrary_EncodeServerTag) == 0x000020, "Wrong size on GBFunctionLibrary_EncodeServerTag");
static_assert(offsetof(GBFunctionLibrary_EncodeServerTag, ServerTag) == 0x000000, "Member 'GBFunctionLibrary_EncodeServerTag::ServerTag' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeServerTag, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_EncodeServerTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayDateString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_EncodeTimeOfDayDateString final
{
public:
	int32                                         Year;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeTimeOfDayDateString) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeTimeOfDayDateString");
static_assert(sizeof(GBFunctionLibrary_EncodeTimeOfDayDateString) == 0x000020, "Wrong size on GBFunctionLibrary_EncodeTimeOfDayDateString");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayDateString, Year) == 0x000000, "Member 'GBFunctionLibrary_EncodeTimeOfDayDateString::Year' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayDateString, Month) == 0x000004, "Member 'GBFunctionLibrary_EncodeTimeOfDayDateString::Month' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayDateString, Day) == 0x000008, "Member 'GBFunctionLibrary_EncodeTimeOfDayDateString::Day' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayDateString, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_EncodeTimeOfDayDateString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayStringHours
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_EncodeTimeOfDayStringHours final
{
public:
	EMissionTimeLabel                             MissionTimeLabel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeInHours;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeTimeOfDayStringHours) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeTimeOfDayStringHours");
static_assert(sizeof(GBFunctionLibrary_EncodeTimeOfDayStringHours) == 0x000028, "Wrong size on GBFunctionLibrary_EncodeTimeOfDayStringHours");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringHours, MissionTimeLabel) == 0x000000, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringHours::MissionTimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringHours, TimeInHours) == 0x000004, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringHours::TimeInHours' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringHours, Year) == 0x000008, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringHours::Year' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringHours, Month) == 0x00000C, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringHours::Month' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringHours, Day) == 0x000010, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringHours::Day' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringHours, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringHours::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayStringMins
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_EncodeTimeOfDayStringMins final
{
public:
	EMissionTimeLabel                             MissionTimeLabel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeInMins;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeTimeOfDayStringMins) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeTimeOfDayStringMins");
static_assert(sizeof(GBFunctionLibrary_EncodeTimeOfDayStringMins) == 0x000028, "Wrong size on GBFunctionLibrary_EncodeTimeOfDayStringMins");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringMins, MissionTimeLabel) == 0x000000, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringMins::MissionTimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringMins, TimeInMins) == 0x000004, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringMins::TimeInMins' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringMins, Year) == 0x000008, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringMins::Year' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringMins, Month) == 0x00000C, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringMins::Month' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringMins, Day) == 0x000010, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringMins::Day' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayStringMins, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_EncodeTimeOfDayStringMins::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayTimeStringHours
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_EncodeTimeOfDayTimeStringHours final
{
public:
	EMissionTimeLabel                             MissionTimeLabel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeInHours;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeTimeOfDayTimeStringHours) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeTimeOfDayTimeStringHours");
static_assert(sizeof(GBFunctionLibrary_EncodeTimeOfDayTimeStringHours) == 0x000018, "Wrong size on GBFunctionLibrary_EncodeTimeOfDayTimeStringHours");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayTimeStringHours, MissionTimeLabel) == 0x000000, "Member 'GBFunctionLibrary_EncodeTimeOfDayTimeStringHours::MissionTimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayTimeStringHours, TimeInHours) == 0x000004, "Member 'GBFunctionLibrary_EncodeTimeOfDayTimeStringHours::TimeInHours' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayTimeStringHours, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_EncodeTimeOfDayTimeStringHours::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayTimeStringMins
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_EncodeTimeOfDayTimeStringMins final
{
public:
	EMissionTimeLabel                             MissionTimeLabel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeInMins;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeTimeOfDayTimeStringMins) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeTimeOfDayTimeStringMins");
static_assert(sizeof(GBFunctionLibrary_EncodeTimeOfDayTimeStringMins) == 0x000018, "Wrong size on GBFunctionLibrary_EncodeTimeOfDayTimeStringMins");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayTimeStringMins, MissionTimeLabel) == 0x000000, "Member 'GBFunctionLibrary_EncodeTimeOfDayTimeStringMins::MissionTimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayTimeStringMins, TimeInMins) == 0x000004, "Member 'GBFunctionLibrary_EncodeTimeOfDayTimeStringMins::TimeInMins' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeTimeOfDayTimeStringMins, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_EncodeTimeOfDayTimeStringMins::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeWeatherPresetFileName
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_EncodeWeatherPresetFileName final
{
public:
	class FName                                   WeatherCategory;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeatherType;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPath;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeWeatherPresetFileName) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeWeatherPresetFileName");
static_assert(sizeof(GBFunctionLibrary_EncodeWeatherPresetFileName) == 0x000028, "Wrong size on GBFunctionLibrary_EncodeWeatherPresetFileName");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetFileName, WeatherCategory) == 0x000000, "Member 'GBFunctionLibrary_EncodeWeatherPresetFileName::WeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetFileName, WeatherType) == 0x000008, "Member 'GBFunctionLibrary_EncodeWeatherPresetFileName::WeatherType' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetFileName, bAddPath) == 0x000010, "Member 'GBFunctionLibrary_EncodeWeatherPresetFileName::bAddPath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetFileName, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_EncodeWeatherPresetFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeWeatherPresetObjectName
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_EncodeWeatherPresetObjectName final
{
public:
	class FName                                   WeatherCategory;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeatherType;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPath;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeWeatherPresetObjectName) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeWeatherPresetObjectName");
static_assert(sizeof(GBFunctionLibrary_EncodeWeatherPresetObjectName) == 0x000028, "Wrong size on GBFunctionLibrary_EncodeWeatherPresetObjectName");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetObjectName, WeatherCategory) == 0x000000, "Member 'GBFunctionLibrary_EncodeWeatherPresetObjectName::WeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetObjectName, WeatherType) == 0x000008, "Member 'GBFunctionLibrary_EncodeWeatherPresetObjectName::WeatherType' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetObjectName, bAddPath) == 0x000010, "Member 'GBFunctionLibrary_EncodeWeatherPresetObjectName::bAddPath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherPresetObjectName, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_EncodeWeatherPresetObjectName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EncodeWeatherString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_EncodeWeatherString final
{
public:
	class FName                                   WeatherCategory;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeatherType;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_EncodeWeatherString) == 0x000008, "Wrong alignment on GBFunctionLibrary_EncodeWeatherString");
static_assert(sizeof(GBFunctionLibrary_EncodeWeatherString) == 0x000020, "Wrong size on GBFunctionLibrary_EncodeWeatherString");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherString, WeatherCategory) == 0x000000, "Member 'GBFunctionLibrary_EncodeWeatherString::WeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherString, WeatherType) == 0x000008, "Member 'GBFunctionLibrary_EncodeWeatherString::WeatherType' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EncodeWeatherString, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_EncodeWeatherString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.EvalBool
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_EvalBool final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultValue;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_EvalBool) == 0x000008, "Wrong alignment on GBFunctionLibrary_EvalBool");
static_assert(sizeof(GBFunctionLibrary_EvalBool) == 0x000018, "Wrong size on GBFunctionLibrary_EvalBool");
static_assert(offsetof(GBFunctionLibrary_EvalBool, Option) == 0x000000, "Member 'GBFunctionLibrary_EvalBool::Option' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EvalBool, bDefaultValue) == 0x000010, "Member 'GBFunctionLibrary_EvalBool::bDefaultValue' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_EvalBool, ReturnValue) == 0x000011, "Member 'GBFunctionLibrary_EvalBool::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ExtractAlphanumericText
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_ExtractAlphanumericText final
{
public:
	class FString                                 SourceStr;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowHyphens;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_ExtractAlphanumericText) == 0x000008, "Wrong alignment on GBFunctionLibrary_ExtractAlphanumericText");
static_assert(sizeof(GBFunctionLibrary_ExtractAlphanumericText) == 0x000028, "Wrong size on GBFunctionLibrary_ExtractAlphanumericText");
static_assert(offsetof(GBFunctionLibrary_ExtractAlphanumericText, SourceStr) == 0x000000, "Member 'GBFunctionLibrary_ExtractAlphanumericText::SourceStr' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ExtractAlphanumericText, bAllowHyphens) == 0x000010, "Member 'GBFunctionLibrary_ExtractAlphanumericText::bAllowHyphens' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ExtractAlphanumericText, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_ExtractAlphanumericText::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.fileExists
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_fileExists final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_fileExists) == 0x000008, "Wrong alignment on GBFunctionLibrary_fileExists");
static_assert(sizeof(GBFunctionLibrary_fileExists) == 0x000018, "Wrong size on GBFunctionLibrary_fileExists");
static_assert(offsetof(GBFunctionLibrary_fileExists, Filename) == 0x000000, "Member 'GBFunctionLibrary_fileExists::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_fileExists, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_fileExists::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.FindWeatherPreset
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_FindWeatherPreset final
{
public:
	class FName                                   DecodedWeatherCategory;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecodedWeatherType;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyCreatorWeatherPreset*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_FindWeatherPreset) == 0x000008, "Wrong alignment on GBFunctionLibrary_FindWeatherPreset");
static_assert(sizeof(GBFunctionLibrary_FindWeatherPreset) == 0x000018, "Wrong size on GBFunctionLibrary_FindWeatherPreset");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPreset, DecodedWeatherCategory) == 0x000000, "Member 'GBFunctionLibrary_FindWeatherPreset::DecodedWeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPreset, DecodedWeatherType) == 0x000008, "Member 'GBFunctionLibrary_FindWeatherPreset::DecodedWeatherType' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPreset, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_FindWeatherPreset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.FindWeatherPresetFromWhitelist
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_FindWeatherPresetFromWhitelist final
{
public:
	class FName                                   DecodedWeatherCategory;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecodedWeatherType;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkyCreatorWeatherPreset*>       WeatherPresetWhitelist;                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USkyCreatorWeatherPreset*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_FindWeatherPresetFromWhitelist) == 0x000008, "Wrong alignment on GBFunctionLibrary_FindWeatherPresetFromWhitelist");
static_assert(sizeof(GBFunctionLibrary_FindWeatherPresetFromWhitelist) == 0x000028, "Wrong size on GBFunctionLibrary_FindWeatherPresetFromWhitelist");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPresetFromWhitelist, DecodedWeatherCategory) == 0x000000, "Member 'GBFunctionLibrary_FindWeatherPresetFromWhitelist::DecodedWeatherCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPresetFromWhitelist, DecodedWeatherType) == 0x000008, "Member 'GBFunctionLibrary_FindWeatherPresetFromWhitelist::DecodedWeatherType' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPresetFromWhitelist, WeatherPresetWhitelist) == 0x000010, "Member 'GBFunctionLibrary_FindWeatherPresetFromWhitelist::WeatherPresetWhitelist' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FindWeatherPresetFromWhitelist, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_FindWeatherPresetFromWhitelist::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.FlushPressedAction
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_FlushPressedAction final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_FlushPressedAction) == 0x000008, "Wrong alignment on GBFunctionLibrary_FlushPressedAction");
static_assert(sizeof(GBFunctionLibrary_FlushPressedAction) == 0x000010, "Wrong size on GBFunctionLibrary_FlushPressedAction");
static_assert(offsetof(GBFunctionLibrary_FlushPressedAction, PlayerController) == 0x000000, "Member 'GBFunctionLibrary_FlushPressedAction::PlayerController' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FlushPressedAction, ActionName) == 0x000008, "Member 'GBFunctionLibrary_FlushPressedAction::ActionName' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.FlushPressedActions
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_FlushPressedActions final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionNames;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_FlushPressedActions) == 0x000008, "Wrong alignment on GBFunctionLibrary_FlushPressedActions");
static_assert(sizeof(GBFunctionLibrary_FlushPressedActions) == 0x000018, "Wrong size on GBFunctionLibrary_FlushPressedActions");
static_assert(offsetof(GBFunctionLibrary_FlushPressedActions, PlayerController) == 0x000000, "Member 'GBFunctionLibrary_FlushPressedActions::PlayerController' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FlushPressedActions, ActionNames) == 0x000008, "Member 'GBFunctionLibrary_FlushPressedActions::ActionNames' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.FlushPressedKeys
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_FlushPressedKeys final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_FlushPressedKeys) == 0x000008, "Wrong alignment on GBFunctionLibrary_FlushPressedKeys");
static_assert(sizeof(GBFunctionLibrary_FlushPressedKeys) == 0x000008, "Wrong size on GBFunctionLibrary_FlushPressedKeys");
static_assert(offsetof(GBFunctionLibrary_FlushPressedKeys, PlayerController) == 0x000000, "Member 'GBFunctionLibrary_FlushPressedKeys::PlayerController' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.FolderExists
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_FolderExists final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_FolderExists) == 0x000008, "Wrong alignment on GBFunctionLibrary_FolderExists");
static_assert(sizeof(GBFunctionLibrary_FolderExists) == 0x000018, "Wrong size on GBFunctionLibrary_FolderExists");
static_assert(offsetof(GBFunctionLibrary_FolderExists, Filename) == 0x000000, "Member 'GBFunctionLibrary_FolderExists::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_FolderExists, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_FolderExists::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GenerateMissionDisplayName
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_GenerateMissionDisplayName final
{
public:
	class FString                                 InMapName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVariantName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GenerateMissionDisplayName) == 0x000008, "Wrong alignment on GBFunctionLibrary_GenerateMissionDisplayName");
static_assert(sizeof(GBFunctionLibrary_GenerateMissionDisplayName) == 0x000030, "Wrong size on GBFunctionLibrary_GenerateMissionDisplayName");
static_assert(offsetof(GBFunctionLibrary_GenerateMissionDisplayName, InMapName) == 0x000000, "Member 'GBFunctionLibrary_GenerateMissionDisplayName::InMapName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GenerateMissionDisplayName, InVariantName) == 0x000010, "Member 'GBFunctionLibrary_GenerateMissionDisplayName::InVariantName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GenerateMissionDisplayName, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_GenerateMissionDisplayName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Get_PhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_Get_PhysicalMaterial final
{
public:
	const class UMaterial*                        Material;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Get_PhysicalMaterial) == 0x000008, "Wrong alignment on GBFunctionLibrary_Get_PhysicalMaterial");
static_assert(sizeof(GBFunctionLibrary_Get_PhysicalMaterial) == 0x000010, "Wrong size on GBFunctionLibrary_Get_PhysicalMaterial");
static_assert(offsetof(GBFunctionLibrary_Get_PhysicalMaterial, Material) == 0x000000, "Member 'GBFunctionLibrary_Get_PhysicalMaterial::Material' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Get_PhysicalMaterial, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_Get_PhysicalMaterial::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActor2DBoundingBox
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetActor2DBoundingBox final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonColliding;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutMins;                                           // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutMaxs;                                           // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetActor2DBoundingBox) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActor2DBoundingBox");
static_assert(sizeof(GBFunctionLibrary_GetActor2DBoundingBox) == 0x000020, "Wrong size on GBFunctionLibrary_GetActor2DBoundingBox");
static_assert(offsetof(GBFunctionLibrary_GetActor2DBoundingBox, Target) == 0x000000, "Member 'GBFunctionLibrary_GetActor2DBoundingBox::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActor2DBoundingBox, bNonColliding) == 0x000008, "Member 'GBFunctionLibrary_GetActor2DBoundingBox::bNonColliding' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActor2DBoundingBox, OutMins) == 0x00000C, "Member 'GBFunctionLibrary_GetActor2DBoundingBox::OutMins' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActor2DBoundingBox, OutMaxs) == 0x000014, "Member 'GBFunctionLibrary_GetActor2DBoundingBox::OutMaxs' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActor2DBoundingBox, ReturnValue) == 0x00001C, "Member 'GBFunctionLibrary_GetActor2DBoundingBox::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActorCameraComponent
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetActorCameraComponent final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetActorCameraComponent) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActorCameraComponent");
static_assert(sizeof(GBFunctionLibrary_GetActorCameraComponent) == 0x000010, "Wrong size on GBFunctionLibrary_GetActorCameraComponent");
static_assert(offsetof(GBFunctionLibrary_GetActorCameraComponent, Target) == 0x000000, "Member 'GBFunctionLibrary_GetActorCameraComponent::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorCameraComponent, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetActorCameraComponent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActorMeshBounds
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetActorMeshBounds final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0008(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetActorMeshBounds) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActorMeshBounds");
static_assert(sizeof(GBFunctionLibrary_GetActorMeshBounds) == 0x000028, "Wrong size on GBFunctionLibrary_GetActorMeshBounds");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshBounds, Target) == 0x000000, "Member 'GBFunctionLibrary_GetActorMeshBounds::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshBounds, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetActorMeshBounds::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActorMeshBoundsWithAttachedActors
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ExcludeActors;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0018(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors");
static_assert(sizeof(GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors) == 0x000038, "Wrong size on GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors, Target) == 0x000000, "Member 'GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors, ExcludeActors) == 0x000008, "Member 'GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors::ExcludeActors' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActorMeshLocalBounds
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetActorMeshLocalBounds final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0008(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetActorMeshLocalBounds) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActorMeshLocalBounds");
static_assert(sizeof(GBFunctionLibrary_GetActorMeshLocalBounds) == 0x000028, "Wrong size on GBFunctionLibrary_GetActorMeshLocalBounds");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshLocalBounds, Target) == 0x000000, "Member 'GBFunctionLibrary_GetActorMeshLocalBounds::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshLocalBounds, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetActorMeshLocalBounds::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActorMeshLocalBoundsWithAttachedActors
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ExcludeActors;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0018(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors");
static_assert(sizeof(GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors) == 0x000038, "Wrong size on GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors, Target) == 0x000000, "Member 'GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors, ExcludeActors) == 0x000008, "Member 'GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors::ExcludeActors' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetActorNameWithoutSuffix
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetActorNameWithoutSuffix final
{
public:
	class FString                                 SoftReferenceString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetActorNameWithoutSuffix) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetActorNameWithoutSuffix");
static_assert(sizeof(GBFunctionLibrary_GetActorNameWithoutSuffix) == 0x000020, "Wrong size on GBFunctionLibrary_GetActorNameWithoutSuffix");
static_assert(offsetof(GBFunctionLibrary_GetActorNameWithoutSuffix, SoftReferenceString) == 0x000000, "Member 'GBFunctionLibrary_GetActorNameWithoutSuffix::SoftReferenceString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetActorNameWithoutSuffix, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetActorNameWithoutSuffix::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetAllWeatherPresetFileNames
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetAllWeatherPresetFileNames final
{
public:
	bool                                          bTrimPath;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetAllWeatherPresetFileNames) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetAllWeatherPresetFileNames");
static_assert(sizeof(GBFunctionLibrary_GetAllWeatherPresetFileNames) == 0x000018, "Wrong size on GBFunctionLibrary_GetAllWeatherPresetFileNames");
static_assert(offsetof(GBFunctionLibrary_GetAllWeatherPresetFileNames, bTrimPath) == 0x000000, "Member 'GBFunctionLibrary_GetAllWeatherPresetFileNames::bTrimPath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetAllWeatherPresetFileNames, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetAllWeatherPresetFileNames::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetAlphaNumeric
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_GetAlphaNumeric final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Delimiter;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetAlphaNumeric) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetAlphaNumeric");
static_assert(sizeof(GBFunctionLibrary_GetAlphaNumeric) == 0x000030, "Wrong size on GBFunctionLibrary_GetAlphaNumeric");
static_assert(offsetof(GBFunctionLibrary_GetAlphaNumeric, Source) == 0x000000, "Member 'GBFunctionLibrary_GetAlphaNumeric::Source' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetAlphaNumeric, Delimiter) == 0x000010, "Member 'GBFunctionLibrary_GetAlphaNumeric::Delimiter' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetAlphaNumeric, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_GetAlphaNumeric::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetAssetSoftObjPtrs
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetAssetSoftObjPtrs final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         OutAssetSoftObjPtrs;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetAssetSoftObjPtrs) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetAssetSoftObjPtrs");
static_assert(sizeof(GBFunctionLibrary_GetAssetSoftObjPtrs) == 0x000028, "Wrong size on GBFunctionLibrary_GetAssetSoftObjPtrs");
static_assert(offsetof(GBFunctionLibrary_GetAssetSoftObjPtrs, Path) == 0x000000, "Member 'GBFunctionLibrary_GetAssetSoftObjPtrs::Path' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetAssetSoftObjPtrs, OutAssetSoftObjPtrs) == 0x000010, "Member 'GBFunctionLibrary_GetAssetSoftObjPtrs::OutAssetSoftObjPtrs' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetAssetSoftObjPtrs, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_GetAssetSoftObjPtrs::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetAudioSublevel
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetAudioSublevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetAudioSublevel) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetAudioSublevel");
static_assert(sizeof(GBFunctionLibrary_GetAudioSublevel) == 0x000010, "Wrong size on GBFunctionLibrary_GetAudioSublevel");
static_assert(offsetof(GBFunctionLibrary_GetAudioSublevel, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetAudioSublevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetAudioSublevel, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetAudioSublevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetBaseFilename
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetBaseFilename final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetBaseFilename) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetBaseFilename");
static_assert(sizeof(GBFunctionLibrary_GetBaseFilename) == 0x000020, "Wrong size on GBFunctionLibrary_GetBaseFilename");
static_assert(offsetof(GBFunctionLibrary_GetBaseFilename, Filename) == 0x000000, "Member 'GBFunctionLibrary_GetBaseFilename::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetBaseFilename, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetBaseFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetBuildNumber
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetBuildNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetBuildNumber) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetBuildNumber");
static_assert(sizeof(GBFunctionLibrary_GetBuildNumber) == 0x000010, "Wrong size on GBFunctionLibrary_GetBuildNumber");
static_assert(offsetof(GBFunctionLibrary_GetBuildNumber, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetBuildNumber::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetBuildType
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetBuildType final
{
public:
	bool                                          bIncludeEditor;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetBuildType) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetBuildType");
static_assert(sizeof(GBFunctionLibrary_GetBuildType) == 0x000018, "Wrong size on GBFunctionLibrary_GetBuildType");
static_assert(offsetof(GBFunctionLibrary_GetBuildType, bIncludeEditor) == 0x000000, "Member 'GBFunctionLibrary_GetBuildType::bIncludeEditor' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetBuildType, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetBuildType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetClassDefaultObject final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetClassDefaultObject) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetClassDefaultObject");
static_assert(sizeof(GBFunctionLibrary_GetClassDefaultObject) == 0x000010, "Wrong size on GBFunctionLibrary_GetClassDefaultObject");
static_assert(offsetof(GBFunctionLibrary_GetClassDefaultObject, Class_0) == 0x000000, "Member 'GBFunctionLibrary_GetClassDefaultObject::Class_0' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetComponentByName
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetComponentByName final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetComponentByName) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetComponentByName");
static_assert(sizeof(GBFunctionLibrary_GetComponentByName) == 0x000018, "Wrong size on GBFunctionLibrary_GetComponentByName");
static_assert(offsetof(GBFunctionLibrary_GetComponentByName, Target) == 0x000000, "Member 'GBFunctionLibrary_GetComponentByName::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetComponentByName, Name_0) == 0x000008, "Member 'GBFunctionLibrary_GetComponentByName::Name_0' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetComponentByName, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetComponentByName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetConfigFilename
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetConfigFilename final
{
public:
	class FString                                 ConfigFile;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetConfigFilename) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetConfigFilename");
static_assert(sizeof(GBFunctionLibrary_GetConfigFilename) == 0x000020, "Wrong size on GBFunctionLibrary_GetConfigFilename");
static_assert(offsetof(GBFunctionLibrary_GetConfigFilename, ConfigFile) == 0x000000, "Member 'GBFunctionLibrary_GetConfigFilename::ConfigFile' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetConfigFilename, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetConfigFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetConsoleBool
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetConsoleBool final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutBool;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetConsoleBool) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetConsoleBool");
static_assert(sizeof(GBFunctionLibrary_GetConsoleBool) == 0x000018, "Wrong size on GBFunctionLibrary_GetConsoleBool");
static_assert(offsetof(GBFunctionLibrary_GetConsoleBool, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_GetConsoleBool::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetConsoleBool, OutBool) == 0x000010, "Member 'GBFunctionLibrary_GetConsoleBool::OutBool' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetConsoleFloat
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetConsoleFloat final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFloat;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetConsoleFloat) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetConsoleFloat");
static_assert(sizeof(GBFunctionLibrary_GetConsoleFloat) == 0x000018, "Wrong size on GBFunctionLibrary_GetConsoleFloat");
static_assert(offsetof(GBFunctionLibrary_GetConsoleFloat, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_GetConsoleFloat::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetConsoleFloat, OutFloat) == 0x000010, "Member 'GBFunctionLibrary_GetConsoleFloat::OutFloat' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetConsoleHelp
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetConsoleHelp final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutHelp;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetConsoleHelp) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetConsoleHelp");
static_assert(sizeof(GBFunctionLibrary_GetConsoleHelp) == 0x000020, "Wrong size on GBFunctionLibrary_GetConsoleHelp");
static_assert(offsetof(GBFunctionLibrary_GetConsoleHelp, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_GetConsoleHelp::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetConsoleHelp, OutHelp) == 0x000010, "Member 'GBFunctionLibrary_GetConsoleHelp::OutHelp' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetConsoleInt
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetConsoleInt final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInt;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetConsoleInt) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetConsoleInt");
static_assert(sizeof(GBFunctionLibrary_GetConsoleInt) == 0x000018, "Wrong size on GBFunctionLibrary_GetConsoleInt");
static_assert(offsetof(GBFunctionLibrary_GetConsoleInt, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_GetConsoleInt::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetConsoleInt, OutInt) == 0x000010, "Member 'GBFunctionLibrary_GetConsoleInt::OutInt' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetConsoleString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetConsoleString final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetConsoleString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetConsoleString");
static_assert(sizeof(GBFunctionLibrary_GetConsoleString) == 0x000020, "Wrong size on GBFunctionLibrary_GetConsoleString");
static_assert(offsetof(GBFunctionLibrary_GetConsoleString, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_GetConsoleString::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetConsoleString, OutString) == 0x000010, "Member 'GBFunctionLibrary_GetConsoleString::OutString' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetCreationTime
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetCreationTime final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetCreationTime) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetCreationTime");
static_assert(sizeof(GBFunctionLibrary_GetCreationTime) == 0x000010, "Wrong size on GBFunctionLibrary_GetCreationTime");
static_assert(offsetof(GBFunctionLibrary_GetCreationTime, Target) == 0x000000, "Member 'GBFunctionLibrary_GetCreationTime::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetCreationTime, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetCreationTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetDelayedSoundPosition
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_GetDelayedSoundPosition final
{
public:
	struct FVector                                ViewerPosition;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ObjectOrigin;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ObjectVelocity;                                    // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0024(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDelayedPosition;                                // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetDelayedSoundPosition) == 0x000004, "Wrong alignment on GBFunctionLibrary_GetDelayedSoundPosition");
static_assert(sizeof(GBFunctionLibrary_GetDelayedSoundPosition) == 0x000038, "Wrong size on GBFunctionLibrary_GetDelayedSoundPosition");
static_assert(offsetof(GBFunctionLibrary_GetDelayedSoundPosition, ViewerPosition) == 0x000000, "Member 'GBFunctionLibrary_GetDelayedSoundPosition::ViewerPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDelayedSoundPosition, ObjectOrigin) == 0x00000C, "Member 'GBFunctionLibrary_GetDelayedSoundPosition::ObjectOrigin' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDelayedSoundPosition, ObjectVelocity) == 0x000018, "Member 'GBFunctionLibrary_GetDelayedSoundPosition::ObjectVelocity' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDelayedSoundPosition, ElapsedTime) == 0x000024, "Member 'GBFunctionLibrary_GetDelayedSoundPosition::ElapsedTime' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDelayedSoundPosition, OutDelayedPosition) == 0x000028, "Member 'GBFunctionLibrary_GetDelayedSoundPosition::OutDelayedPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDelayedSoundPosition, ReturnValue) == 0x000034, "Member 'GBFunctionLibrary_GetDelayedSoundPosition::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetDistanceAlongSplineAtSplineInputKey
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey final
{
public:
	class USplineComponent*                       SplineComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InKey;                                             // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey");
static_assert(sizeof(GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey) == 0x000010, "Wrong size on GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey");
static_assert(offsetof(GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey, SplineComp) == 0x000000, "Member 'GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey::SplineComp' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey, InKey) == 0x000008, "Member 'GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey, ReturnValue) == 0x00000C, "Member 'GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetFileList
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_GetFileList final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extension;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimPathAndExt;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FileList;                                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetFileList) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetFileList");
static_assert(sizeof(GBFunctionLibrary_GetFileList) == 0x000040, "Wrong size on GBFunctionLibrary_GetFileList");
static_assert(offsetof(GBFunctionLibrary_GetFileList, FilePath) == 0x000000, "Member 'GBFunctionLibrary_GetFileList::FilePath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFileList, Extension) == 0x000010, "Member 'GBFunctionLibrary_GetFileList::Extension' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFileList, bTrimPathAndExt) == 0x000020, "Member 'GBFunctionLibrary_GetFileList::bTrimPathAndExt' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFileList, FileList) == 0x000028, "Member 'GBFunctionLibrary_GetFileList::FileList' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFileList, ReturnValue) == 0x000038, "Member 'GBFunctionLibrary_GetFileList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetFolderList
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetFolderList final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FolderList;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RecurseIntoFolders;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetFolderList) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetFolderList");
static_assert(sizeof(GBFunctionLibrary_GetFolderList) == 0x000028, "Wrong size on GBFunctionLibrary_GetFolderList");
static_assert(offsetof(GBFunctionLibrary_GetFolderList, FilePath) == 0x000000, "Member 'GBFunctionLibrary_GetFolderList::FilePath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFolderList, FolderList) == 0x000010, "Member 'GBFunctionLibrary_GetFolderList::FolderList' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFolderList, RecurseIntoFolders) == 0x000020, "Member 'GBFunctionLibrary_GetFolderList::RecurseIntoFolders' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetFolderList, ReturnValue) == 0x000021, "Member 'GBFunctionLibrary_GetFolderList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetFriendlyAICountString
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetFriendlyAICountString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetFriendlyAICountString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetFriendlyAICountString");
static_assert(sizeof(GBFunctionLibrary_GetFriendlyAICountString) == 0x000010, "Wrong size on GBFunctionLibrary_GetFriendlyAICountString");
static_assert(offsetof(GBFunctionLibrary_GetFriendlyAICountString, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetFriendlyAICountString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameContentDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetGameContentDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetGameContentDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGameContentDir");
static_assert(sizeof(GBFunctionLibrary_GetGameContentDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetGameContentDir");
static_assert(offsetof(GBFunctionLibrary_GetGameContentDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetGameContentDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetGameDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetGameDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGameDir");
static_assert(sizeof(GBFunctionLibrary_GetGameDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetGameDir");
static_assert(offsetof(GBFunctionLibrary_GetGameDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetGameDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameLogDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetGameLogDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetGameLogDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGameLogDir");
static_assert(sizeof(GBFunctionLibrary_GetGameLogDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetGameLogDir");
static_assert(offsetof(GBFunctionLibrary_GetGameLogDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetGameLogDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameModeAuthor
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetGameModeAuthor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetGameModeAuthor) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGameModeAuthor");
static_assert(sizeof(GBFunctionLibrary_GetGameModeAuthor) == 0x000028, "Wrong size on GBFunctionLibrary_GetGameModeAuthor");
static_assert(offsetof(GBFunctionLibrary_GetGameModeAuthor, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetGameModeAuthor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeAuthor, ScriptName) == 0x000008, "Member 'GBFunctionLibrary_GetGameModeAuthor::ScriptName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeAuthor, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetGameModeAuthor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameModeTable
// 0x0060 (0x0060 - 0x0000)
struct GBFunctionLibrary_GetGameModeTable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetGameModeTable) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGameModeTable");
static_assert(sizeof(GBFunctionLibrary_GetGameModeTable) == 0x000060, "Wrong size on GBFunctionLibrary_GetGameModeTable");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTable, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetGameModeTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTable, ScriptName) == 0x000008, "Member 'GBFunctionLibrary_GetGameModeTable::ScriptName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTable, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetGameModeTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameModeTypeFromFile
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetGameModeTypeFromFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptFilename;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBGameModeType                               ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetGameModeTypeFromFile) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGameModeTypeFromFile");
static_assert(sizeof(GBFunctionLibrary_GetGameModeTypeFromFile) == 0x000020, "Wrong size on GBFunctionLibrary_GetGameModeTypeFromFile");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTypeFromFile, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetGameModeTypeFromFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTypeFromFile, ScriptFilename) == 0x000008, "Member 'GBFunctionLibrary_GetGameModeTypeFromFile::ScriptFilename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTypeFromFile, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetGameModeTypeFromFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGameModeTypeFromName
// 0x000C (0x000C - 0x0000)
struct GBFunctionLibrary_GetGameModeTypeFromName final
{
public:
	class FName                                   GameModeTypeName;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBGameModeType                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetGameModeTypeFromName) == 0x000004, "Wrong alignment on GBFunctionLibrary_GetGameModeTypeFromName");
static_assert(sizeof(GBFunctionLibrary_GetGameModeTypeFromName) == 0x00000C, "Wrong size on GBFunctionLibrary_GetGameModeTypeFromName");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTypeFromName, GameModeTypeName) == 0x000000, "Member 'GBFunctionLibrary_GetGameModeTypeFromName::GameModeTypeName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGameModeTypeFromName, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetGameModeTypeFromName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGBLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetGBLocalPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBLocalPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetGBLocalPlayer) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGBLocalPlayer");
static_assert(sizeof(GBFunctionLibrary_GetGBLocalPlayer) == 0x000010, "Wrong size on GBFunctionLibrary_GetGBLocalPlayer");
static_assert(offsetof(GBFunctionLibrary_GetGBLocalPlayer, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetGBLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGBLocalPlayer, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetGBLocalPlayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetGenericTeamId
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetGenericTeamId final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetGenericTeamId) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetGenericTeamId");
static_assert(sizeof(GBFunctionLibrary_GetGenericTeamId) == 0x000010, "Wrong size on GBFunctionLibrary_GetGenericTeamId");
static_assert(offsetof(GBFunctionLibrary_GetGenericTeamId, Target) == 0x000000, "Member 'GBFunctionLibrary_GetGenericTeamId::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetGenericTeamId, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetGenericTeamId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetJoinInProgressString
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetJoinInProgressString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetJoinInProgressString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetJoinInProgressString");
static_assert(sizeof(GBFunctionLibrary_GetJoinInProgressString) == 0x000010, "Wrong size on GBFunctionLibrary_GetJoinInProgressString");
static_assert(offsetof(GBFunctionLibrary_GetJoinInProgressString, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetJoinInProgressString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetKeysBoundToAction
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetKeysBoundToAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetKeysBoundToAction) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetKeysBoundToAction");
static_assert(sizeof(GBFunctionLibrary_GetKeysBoundToAction) == 0x000018, "Wrong size on GBFunctionLibrary_GetKeysBoundToAction");
static_assert(offsetof(GBFunctionLibrary_GetKeysBoundToAction, ActionName) == 0x000000, "Member 'GBFunctionLibrary_GetKeysBoundToAction::ActionName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetKeysBoundToAction, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetKeysBoundToAction::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetLastDigitsFromString
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetLastDigitsFromString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetLastDigitsFromString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetLastDigitsFromString");
static_assert(sizeof(GBFunctionLibrary_GetLastDigitsFromString) == 0x000018, "Wrong size on GBFunctionLibrary_GetLastDigitsFromString");
static_assert(offsetof(GBFunctionLibrary_GetLastDigitsFromString, inString) == 0x000000, "Member 'GBFunctionLibrary_GetLastDigitsFromString::inString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetLastDigitsFromString, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetLastDigitsFromString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetLevelName
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetLevelName final
{
public:
	const class UObject*                          CurrentObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetLevelName) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetLevelName");
static_assert(sizeof(GBFunctionLibrary_GetLevelName) == 0x000018, "Wrong size on GBFunctionLibrary_GetLevelName");
static_assert(offsetof(GBFunctionLibrary_GetLevelName, CurrentObject) == 0x000000, "Member 'GBFunctionLibrary_GetLevelName::CurrentObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetLevelName, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetLevelName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetLocalPlayer final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayer*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetLocalPlayer) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetLocalPlayer");
static_assert(sizeof(GBFunctionLibrary_GetLocalPlayer) == 0x000010, "Wrong size on GBFunctionLibrary_GetLocalPlayer");
static_assert(offsetof(GBFunctionLibrary_GetLocalPlayer, PlayerController) == 0x000000, "Member 'GBFunctionLibrary_GetLocalPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetLocalPlayer, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetLocalPlayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMapAssetPackageName
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetMapAssetPackageName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimGame;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetMapAssetPackageName) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMapAssetPackageName");
static_assert(sizeof(GBFunctionLibrary_GetMapAssetPackageName) == 0x000020, "Wrong size on GBFunctionLibrary_GetMapAssetPackageName");
static_assert(offsetof(GBFunctionLibrary_GetMapAssetPackageName, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetMapAssetPackageName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMapAssetPackageName, bTrimGame) == 0x000008, "Member 'GBFunctionLibrary_GetMapAssetPackageName::bTrimGame' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMapAssetPackageName, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetMapAssetPackageName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMapFromCommandLine
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetMapFromCommandLine final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemovePath;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetMapFromCommandLine) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMapFromCommandLine");
static_assert(sizeof(GBFunctionLibrary_GetMapFromCommandLine) == 0x000028, "Wrong size on GBFunctionLibrary_GetMapFromCommandLine");
static_assert(offsetof(GBFunctionLibrary_GetMapFromCommandLine, CommandLine) == 0x000000, "Member 'GBFunctionLibrary_GetMapFromCommandLine::CommandLine' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMapFromCommandLine, bRemovePath) == 0x000010, "Member 'GBFunctionLibrary_GetMapFromCommandLine::bRemovePath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMapFromCommandLine, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetMapFromCommandLine::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMapPath
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetMapPath final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimGame;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetMapPath) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMapPath");
static_assert(sizeof(GBFunctionLibrary_GetMapPath) == 0x000020, "Wrong size on GBFunctionLibrary_GetMapPath");
static_assert(offsetof(GBFunctionLibrary_GetMapPath, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetMapPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMapPath, bTrimGame) == 0x000008, "Member 'GBFunctionLibrary_GetMapPath::bTrimGame' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMapPath, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetMapPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMatchingNames
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_GetMatchingNames final
{
public:
	TArray<class FName>                           SourceNames;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SearchNames;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutMatchedNames;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESearchFix                                    SearchFix;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetMatchingNames) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMatchingNames");
static_assert(sizeof(GBFunctionLibrary_GetMatchingNames) == 0x000038, "Wrong size on GBFunctionLibrary_GetMatchingNames");
static_assert(offsetof(GBFunctionLibrary_GetMatchingNames, SourceNames) == 0x000000, "Member 'GBFunctionLibrary_GetMatchingNames::SourceNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingNames, SearchNames) == 0x000010, "Member 'GBFunctionLibrary_GetMatchingNames::SearchNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingNames, OutMatchedNames) == 0x000020, "Member 'GBFunctionLibrary_GetMatchingNames::OutMatchedNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingNames, SearchFix) == 0x000030, "Member 'GBFunctionLibrary_GetMatchingNames::SearchFix' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingNames, ReturnValue) == 0x000031, "Member 'GBFunctionLibrary_GetMatchingNames::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMatchingSocketNames
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_GetMatchingSocketNames final
{
public:
	TArray<class FName>                           SearchNames;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutSocketNames;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESearchFix                                    SearchFix;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetMatchingSocketNames) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMatchingSocketNames");
static_assert(sizeof(GBFunctionLibrary_GetMatchingSocketNames) == 0x000030, "Wrong size on GBFunctionLibrary_GetMatchingSocketNames");
static_assert(offsetof(GBFunctionLibrary_GetMatchingSocketNames, SearchNames) == 0x000000, "Member 'GBFunctionLibrary_GetMatchingSocketNames::SearchNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingSocketNames, SceneComp) == 0x000010, "Member 'GBFunctionLibrary_GetMatchingSocketNames::SceneComp' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingSocketNames, OutSocketNames) == 0x000018, "Member 'GBFunctionLibrary_GetMatchingSocketNames::OutSocketNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingSocketNames, SearchFix) == 0x000028, "Member 'GBFunctionLibrary_GetMatchingSocketNames::SearchFix' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchingSocketNames, ReturnValue) == 0x000029, "Member 'GBFunctionLibrary_GetMatchingSocketNames::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMatchTypeFromString
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetMatchTypeFromString final
{
public:
	class FString                                 MatchTypeString;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBMatchType                                  ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetMatchTypeFromString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMatchTypeFromString");
static_assert(sizeof(GBFunctionLibrary_GetMatchTypeFromString) == 0x000018, "Wrong size on GBFunctionLibrary_GetMatchTypeFromString");
static_assert(offsetof(GBFunctionLibrary_GetMatchTypeFromString, MatchTypeString) == 0x000000, "Member 'GBFunctionLibrary_GetMatchTypeFromString::MatchTypeString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMatchTypeFromString, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetMatchTypeFromString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMaterialInstanceStaticSwitchParameterValue
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue final
{
public:
	const class UMaterialInstance*                Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckParent;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue");
static_assert(sizeof(GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue) == 0x000018, "Wrong size on GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue");
static_assert(offsetof(GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue, Instance) == 0x000000, "Member 'GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue::Instance' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue, ParameterName) == 0x000008, "Member 'GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue, bCheckParent) == 0x000010, "Member 'GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue::bCheckParent' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue, ReturnValue) == 0x000011, "Member 'GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMinimapForMissionVariant
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetMinimapForMissionVariant final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentVariantName;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBMinimap*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetMinimapForMissionVariant) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMinimapForMissionVariant");
static_assert(sizeof(GBFunctionLibrary_GetMinimapForMissionVariant) == 0x000018, "Wrong size on GBFunctionLibrary_GetMinimapForMissionVariant");
static_assert(offsetof(GBFunctionLibrary_GetMinimapForMissionVariant, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetMinimapForMissionVariant::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMinimapForMissionVariant, CurrentVariantName) == 0x000008, "Member 'GBFunctionLibrary_GetMinimapForMissionVariant::CurrentVariantName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMinimapForMissionVariant, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetMinimapForMissionVariant::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMissionLabelFromString
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetMissionLabelFromString final
{
public:
	class FString                                 TimePart;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionTimeLabel                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetMissionLabelFromString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetMissionLabelFromString");
static_assert(sizeof(GBFunctionLibrary_GetMissionLabelFromString) == 0x000018, "Wrong size on GBFunctionLibrary_GetMissionLabelFromString");
static_assert(offsetof(GBFunctionLibrary_GetMissionLabelFromString, TimePart) == 0x000000, "Member 'GBFunctionLibrary_GetMissionLabelFromString::TimePart' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMissionLabelFromString, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetMissionLabelFromString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetMissionTimeStandardHour
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_GetMissionTimeStandardHour final
{
public:
	EMissionTimeLabel                             TimeLabel;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetMissionTimeStandardHour) == 0x000004, "Wrong alignment on GBFunctionLibrary_GetMissionTimeStandardHour");
static_assert(sizeof(GBFunctionLibrary_GetMissionTimeStandardHour) == 0x000008, "Wrong size on GBFunctionLibrary_GetMissionTimeStandardHour");
static_assert(offsetof(GBFunctionLibrary_GetMissionTimeStandardHour, TimeLabel) == 0x000000, "Member 'GBFunctionLibrary_GetMissionTimeStandardHour::TimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetMissionTimeStandardHour, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_GetMissionTimeStandardHour::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetNetworkVersion
// 0x0004 (0x0004 - 0x0000)
struct GBFunctionLibrary_GetNetworkVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetNetworkVersion) == 0x000004, "Wrong alignment on GBFunctionLibrary_GetNetworkVersion");
static_assert(sizeof(GBFunctionLibrary_GetNetworkVersion) == 0x000004, "Wrong size on GBFunctionLibrary_GetNetworkVersion");
static_assert(offsetof(GBFunctionLibrary_GetNetworkVersion, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetNetworkVersion::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetObjectFName
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetObjectFName final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetObjectFName) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetObjectFName");
static_assert(sizeof(GBFunctionLibrary_GetObjectFName) == 0x000010, "Wrong size on GBFunctionLibrary_GetObjectFName");
static_assert(offsetof(GBFunctionLibrary_GetObjectFName, Object) == 0x000000, "Member 'GBFunctionLibrary_GetObjectFName::Object' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetObjectFName, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetObjectFName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetOpForCountString
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetOpForCountString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetOpForCountString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetOpForCountString");
static_assert(sizeof(GBFunctionLibrary_GetOpForCountString) == 0x000010, "Wrong size on GBFunctionLibrary_GetOpForCountString");
static_assert(offsetof(GBFunctionLibrary_GetOpForCountString, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetOpForCountString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetOptionsFromCommandLine
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetOptionsFromCommandLine final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetOptionsFromCommandLine) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetOptionsFromCommandLine");
static_assert(sizeof(GBFunctionLibrary_GetOptionsFromCommandLine) == 0x000020, "Wrong size on GBFunctionLibrary_GetOptionsFromCommandLine");
static_assert(offsetof(GBFunctionLibrary_GetOptionsFromCommandLine, CommandLine) == 0x000000, "Member 'GBFunctionLibrary_GetOptionsFromCommandLine::CommandLine' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetOptionsFromCommandLine, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetOptionsFromCommandLine::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetPathLeaf
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetPathLeaf final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetPathLeaf) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetPathLeaf");
static_assert(sizeof(GBFunctionLibrary_GetPathLeaf) == 0x000020, "Wrong size on GBFunctionLibrary_GetPathLeaf");
static_assert(offsetof(GBFunctionLibrary_GetPathLeaf, Filename) == 0x000000, "Member 'GBFunctionLibrary_GetPathLeaf::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetPathLeaf, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetPathLeaf::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetPlayerNightVisionStatusActor
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetPlayerNightVisionStatusActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerNightVisionStatus*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetPlayerNightVisionStatusActor) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetPlayerNightVisionStatusActor");
static_assert(sizeof(GBFunctionLibrary_GetPlayerNightVisionStatusActor) == 0x000010, "Wrong size on GBFunctionLibrary_GetPlayerNightVisionStatusActor");
static_assert(offsetof(GBFunctionLibrary_GetPlayerNightVisionStatusActor, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetPlayerNightVisionStatusActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetPlayerNightVisionStatusActor, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetPlayerNightVisionStatusActor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetProhibitedNameCharacters
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetProhibitedNameCharacters final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetProhibitedNameCharacters) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetProhibitedNameCharacters");
static_assert(sizeof(GBFunctionLibrary_GetProhibitedNameCharacters) == 0x000010, "Wrong size on GBFunctionLibrary_GetProhibitedNameCharacters");
static_assert(offsetof(GBFunctionLibrary_GetProhibitedNameCharacters, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetProhibitedNameCharacters::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetProjectVersion) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetProjectVersion");
static_assert(sizeof(GBFunctionLibrary_GetProjectVersion) == 0x000010, "Wrong size on GBFunctionLibrary_GetProjectVersion");
static_assert(offsetof(GBFunctionLibrary_GetProjectVersion, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetRadiotelephonySpelling
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetRadiotelephonySpelling final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetRadiotelephonySpelling) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetRadiotelephonySpelling");
static_assert(sizeof(GBFunctionLibrary_GetRadiotelephonySpelling) == 0x000020, "Wrong size on GBFunctionLibrary_GetRadiotelephonySpelling");
static_assert(offsetof(GBFunctionLibrary_GetRadiotelephonySpelling, Source) == 0x000000, "Member 'GBFunctionLibrary_GetRadiotelephonySpelling::Source' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRadiotelephonySpelling, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetRadiotelephonySpelling::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetRandomAllowableDay
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_GetRandomAllowableDay final
{
public:
	int32                                         OutMonth;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDay;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AllowedMonths;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetRandomAllowableDay) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetRandomAllowableDay");
static_assert(sizeof(GBFunctionLibrary_GetRandomAllowableDay) == 0x000018, "Wrong size on GBFunctionLibrary_GetRandomAllowableDay");
static_assert(offsetof(GBFunctionLibrary_GetRandomAllowableDay, OutMonth) == 0x000000, "Member 'GBFunctionLibrary_GetRandomAllowableDay::OutMonth' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRandomAllowableDay, OutDay) == 0x000004, "Member 'GBFunctionLibrary_GetRandomAllowableDay::OutDay' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRandomAllowableDay, AllowedMonths) == 0x000008, "Member 'GBFunctionLibrary_GetRandomAllowableDay::AllowedMonths' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetRandomWeatherPresetTypeInCategoryLimitByFilename
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename final
{
public:
	class FName                                   InCategory;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilenamesWhitelist;                                // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename");
static_assert(sizeof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename) == 0x000020, "Wrong size on GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename");
static_assert(offsetof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename, InCategory) == 0x000000, "Member 'GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename::InCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename, FilenamesWhitelist) == 0x000008, "Member 'GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename::FilenamesWhitelist' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetRandomWeatherPresetTypeInCategoryLimitByPreset
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset final
{
public:
	class FName                                   InCategory;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkyCreatorWeatherPreset*>       PresetWhitelist;                                   // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset");
static_assert(sizeof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset) == 0x000020, "Wrong size on GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset");
static_assert(offsetof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset, InCategory) == 0x000000, "Member 'GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset::InCategory' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset, PresetWhitelist) == 0x000008, "Member 'GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset::PresetWhitelist' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetRefPoseBoneTransform
// 0x0040 (0x0040 - 0x0000)
struct GBFunctionLibrary_GetRefPoseBoneTransform final
{
public:
	class USkeletalMeshComponent*                 SkelMesh;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetRefPoseBoneTransform) == 0x000010, "Wrong alignment on GBFunctionLibrary_GetRefPoseBoneTransform");
static_assert(sizeof(GBFunctionLibrary_GetRefPoseBoneTransform) == 0x000040, "Wrong size on GBFunctionLibrary_GetRefPoseBoneTransform");
static_assert(offsetof(GBFunctionLibrary_GetRefPoseBoneTransform, SkelMesh) == 0x000000, "Member 'GBFunctionLibrary_GetRefPoseBoneTransform::SkelMesh' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRefPoseBoneTransform, BoneName) == 0x000008, "Member 'GBFunctionLibrary_GetRefPoseBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetRefPoseBoneTransform, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetRefPoseBoneTransform::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetSavedConfigDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetSavedConfigDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetSavedConfigDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetSavedConfigDir");
static_assert(sizeof(GBFunctionLibrary_GetSavedConfigDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetSavedConfigDir");
static_assert(offsetof(GBFunctionLibrary_GetSavedConfigDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetSavedConfigDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetSavedDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetSavedDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetSavedDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetSavedDir");
static_assert(sizeof(GBFunctionLibrary_GetSavedDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetSavedDir");
static_assert(offsetof(GBFunctionLibrary_GetSavedDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetSavedDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetScreenShotDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetScreenShotDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetScreenShotDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetScreenShotDir");
static_assert(sizeof(GBFunctionLibrary_GetScreenShotDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetScreenShotDir");
static_assert(offsetof(GBFunctionLibrary_GetScreenShotDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetScreenShotDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetSeasonForDate
// 0x000C (0x000C - 0x0000)
struct GBFunctionLibrary_GetSeasonForDate final
{
public:
	int32                                         InMonth;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeason                                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetSeasonForDate) == 0x000004, "Wrong alignment on GBFunctionLibrary_GetSeasonForDate");
static_assert(sizeof(GBFunctionLibrary_GetSeasonForDate) == 0x00000C, "Wrong size on GBFunctionLibrary_GetSeasonForDate");
static_assert(offsetof(GBFunctionLibrary_GetSeasonForDate, InMonth) == 0x000000, "Member 'GBFunctionLibrary_GetSeasonForDate::InMonth' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetSeasonForDate, InDay) == 0x000004, "Member 'GBFunctionLibrary_GetSeasonForDate::InDay' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetSeasonForDate, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetSeasonForDate::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetSkyActor
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetSkyActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBSky*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetSkyActor) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetSkyActor");
static_assert(sizeof(GBFunctionLibrary_GetSkyActor) == 0x000010, "Wrong size on GBFunctionLibrary_GetSkyActor");
static_assert(offsetof(GBFunctionLibrary_GetSkyActor, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetSkyActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetSkyActor, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetSkyActor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetStateName
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetStateName final
{
public:
	const class AController*                      Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetStateName) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetStateName");
static_assert(sizeof(GBFunctionLibrary_GetStateName) == 0x000010, "Wrong size on GBFunctionLibrary_GetStateName");
static_assert(offsetof(GBFunctionLibrary_GetStateName, Target) == 0x000000, "Member 'GBFunctionLibrary_GetStateName::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetStateName, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetStateName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetTimeAlive
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetTimeAlive final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetTimeAlive) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetTimeAlive");
static_assert(sizeof(GBFunctionLibrary_GetTimeAlive) == 0x000010, "Wrong size on GBFunctionLibrary_GetTimeAlive");
static_assert(offsetof(GBFunctionLibrary_GetTimeAlive, Target) == 0x000000, "Member 'GBFunctionLibrary_GetTimeAlive::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetTimeAlive, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetTimeAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetTimeLabelText
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetTimeLabelText final
{
public:
	EMissionTimeLabel                             TimeLabel;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetTimeLabelText) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetTimeLabelText");
static_assert(sizeof(GBFunctionLibrary_GetTimeLabelText) == 0x000020, "Wrong size on GBFunctionLibrary_GetTimeLabelText");
static_assert(offsetof(GBFunctionLibrary_GetTimeLabelText, TimeLabel) == 0x000000, "Member 'GBFunctionLibrary_GetTimeLabelText::TimeLabel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetTimeLabelText, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_GetTimeLabelText::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetTimeOfDayDisplayString
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetTimeOfDayDisplayString final
{
public:
	class FString                                 TimeOfDayString;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFormatAsDisplayString;                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetTimeOfDayDisplayString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetTimeOfDayDisplayString");
static_assert(sizeof(GBFunctionLibrary_GetTimeOfDayDisplayString) == 0x000028, "Wrong size on GBFunctionLibrary_GetTimeOfDayDisplayString");
static_assert(offsetof(GBFunctionLibrary_GetTimeOfDayDisplayString, TimeOfDayString) == 0x000000, "Member 'GBFunctionLibrary_GetTimeOfDayDisplayString::TimeOfDayString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetTimeOfDayDisplayString, bFormatAsDisplayString) == 0x000010, "Member 'GBFunctionLibrary_GetTimeOfDayDisplayString::bFormatAsDisplayString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetTimeOfDayDisplayString, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetTimeOfDayDisplayString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetTimeOfDayDisplayStringAsText
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_GetTimeOfDayDisplayStringAsText final
{
public:
	class FString                                 TimeOfDayString;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetTimeOfDayDisplayStringAsText) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetTimeOfDayDisplayStringAsText");
static_assert(sizeof(GBFunctionLibrary_GetTimeOfDayDisplayStringAsText) == 0x000028, "Wrong size on GBFunctionLibrary_GetTimeOfDayDisplayStringAsText");
static_assert(offsetof(GBFunctionLibrary_GetTimeOfDayDisplayStringAsText, TimeOfDayString) == 0x000000, "Member 'GBFunctionLibrary_GetTimeOfDayDisplayStringAsText::TimeOfDayString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetTimeOfDayDisplayStringAsText, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_GetTimeOfDayDisplayStringAsText::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetUnixTimestamp
// 0x0004 (0x0004 - 0x0000)
struct GBFunctionLibrary_GetUnixTimestamp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetUnixTimestamp) == 0x000004, "Wrong alignment on GBFunctionLibrary_GetUnixTimestamp");
static_assert(sizeof(GBFunctionLibrary_GetUnixTimestamp) == 0x000004, "Wrong size on GBFunctionLibrary_GetUnixTimestamp");
static_assert(offsetof(GBFunctionLibrary_GetUnixTimestamp, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetUnixTimestamp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetUObjectStatsString
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetUObjectStatsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetUObjectStatsString) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetUObjectStatsString");
static_assert(sizeof(GBFunctionLibrary_GetUObjectStatsString) == 0x000010, "Wrong size on GBFunctionLibrary_GetUObjectStatsString");
static_assert(offsetof(GBFunctionLibrary_GetUObjectStatsString, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetUObjectStatsString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetUserDir
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_GetUserDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_GetUserDir) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetUserDir");
static_assert(sizeof(GBFunctionLibrary_GetUserDir) == 0x000010, "Wrong size on GBFunctionLibrary_GetUserDir");
static_assert(offsetof(GBFunctionLibrary_GetUserDir, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_GetUserDir::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetViewportPosition
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_GetViewportPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewportPosition;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetViewportPosition) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetViewportPosition");
static_assert(sizeof(GBFunctionLibrary_GetViewportPosition) == 0x000020, "Wrong size on GBFunctionLibrary_GetViewportPosition");
static_assert(offsetof(GBFunctionLibrary_GetViewportPosition, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetViewportPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPosition, ScreenPosition) == 0x000008, "Member 'GBFunctionLibrary_GetViewportPosition::ScreenPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPosition, OutViewportPosition) == 0x000010, "Member 'GBFunctionLibrary_GetViewportPosition::OutViewportPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPosition, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_GetViewportPosition::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.GetViewportPositionHitResultByChannel
// 0x00B8 (0x00B8 - 0x0000)
struct GBFunctionLibrary_GetViewportPositionHitResultByChannel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0028(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_GetViewportPositionHitResultByChannel) == 0x000008, "Wrong alignment on GBFunctionLibrary_GetViewportPositionHitResultByChannel");
static_assert(sizeof(GBFunctionLibrary_GetViewportPositionHitResultByChannel) == 0x0000B8, "Wrong size on GBFunctionLibrary_GetViewportPositionHitResultByChannel");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, ViewportPosition) == 0x000008, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::ViewportPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, TraceChannel) == 0x000010, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, bTraceComplex) == 0x000011, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, IgnoreActors) == 0x000018, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, OutHitResult) == 0x000028, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::OutHitResult' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_GetViewportPositionHitResultByChannel, ReturnValue) == 0x0000B0, "Member 'GBFunctionLibrary_GetViewportPositionHitResultByChannel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.HorizontalFOV
// 0x000C (0x000C - 0x0000)
struct GBFunctionLibrary_HorizontalFOV final
{
public:
	float                                         VerticalFOV_0;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_HorizontalFOV) == 0x000004, "Wrong alignment on GBFunctionLibrary_HorizontalFOV");
static_assert(sizeof(GBFunctionLibrary_HorizontalFOV) == 0x00000C, "Wrong size on GBFunctionLibrary_HorizontalFOV");
static_assert(offsetof(GBFunctionLibrary_HorizontalFOV, VerticalFOV_0) == 0x000000, "Member 'GBFunctionLibrary_HorizontalFOV::VerticalFOV_0' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_HorizontalFOV, AspectRatio) == 0x000004, "Member 'GBFunctionLibrary_HorizontalFOV::AspectRatio' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_HorizontalFOV, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_HorizontalFOV::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsAuthorProprietary
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_IsAuthorProprietary final
{
public:
	class FString                                 InAuthorName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsAuthorProprietary) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsAuthorProprietary");
static_assert(sizeof(GBFunctionLibrary_IsAuthorProprietary) == 0x000018, "Wrong size on GBFunctionLibrary_IsAuthorProprietary");
static_assert(offsetof(GBFunctionLibrary_IsAuthorProprietary, InAuthorName) == 0x000000, "Member 'GBFunctionLibrary_IsAuthorProprietary::InAuthorName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsAuthorProprietary, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_IsAuthorProprietary::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsCommunityTestBuild
// 0x0001 (0x0001 - 0x0000)
struct GBFunctionLibrary_IsCommunityTestBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_IsCommunityTestBuild) == 0x000001, "Wrong alignment on GBFunctionLibrary_IsCommunityTestBuild");
static_assert(sizeof(GBFunctionLibrary_IsCommunityTestBuild) == 0x000001, "Wrong size on GBFunctionLibrary_IsCommunityTestBuild");
static_assert(offsetof(GBFunctionLibrary_IsCommunityTestBuild, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_IsCommunityTestBuild::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsDebugDisplayOn
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_IsDebugDisplayOn final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DebugType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsDebugDisplayOn) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsDebugDisplayOn");
static_assert(sizeof(GBFunctionLibrary_IsDebugDisplayOn) == 0x000018, "Wrong size on GBFunctionLibrary_IsDebugDisplayOn");
static_assert(offsetof(GBFunctionLibrary_IsDebugDisplayOn, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_IsDebugDisplayOn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsDebugDisplayOn, DebugType) == 0x000008, "Member 'GBFunctionLibrary_IsDebugDisplayOn::DebugType' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsDebugDisplayOn, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_IsDebugDisplayOn::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsDedicatedServerSession
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_IsDedicatedServerSession final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsDedicatedServerSession) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsDedicatedServerSession");
static_assert(sizeof(GBFunctionLibrary_IsDedicatedServerSession) == 0x000010, "Wrong size on GBFunctionLibrary_IsDedicatedServerSession");
static_assert(offsetof(GBFunctionLibrary_IsDedicatedServerSession, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_IsDedicatedServerSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsDedicatedServerSession, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_IsDedicatedServerSession::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct GBFunctionLibrary_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_IsEditor) == 0x000001, "Wrong alignment on GBFunctionLibrary_IsEditor");
static_assert(sizeof(GBFunctionLibrary_IsEditor) == 0x000001, "Wrong size on GBFunctionLibrary_IsEditor");
static_assert(offsetof(GBFunctionLibrary_IsEditor, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_IsEditor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsEditorWorld
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_IsEditorWorld final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsEditorWorld) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsEditorWorld");
static_assert(sizeof(GBFunctionLibrary_IsEditorWorld) == 0x000010, "Wrong size on GBFunctionLibrary_IsEditorWorld");
static_assert(offsetof(GBFunctionLibrary_IsEditorWorld, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_IsEditorWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsEditorWorld, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_IsEditorWorld::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsFacing
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_IsFacing final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardDot;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreVerticalFacing;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsFacing) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsFacing");
static_assert(sizeof(GBFunctionLibrary_IsFacing) == 0x000020, "Wrong size on GBFunctionLibrary_IsFacing");
static_assert(offsetof(GBFunctionLibrary_IsFacing, Target) == 0x000000, "Member 'GBFunctionLibrary_IsFacing::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsFacing, Location) == 0x000008, "Member 'GBFunctionLibrary_IsFacing::Location' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsFacing, MinForwardDot) == 0x000014, "Member 'GBFunctionLibrary_IsFacing::MinForwardDot' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsFacing, bIgnoreVerticalFacing) == 0x000018, "Member 'GBFunctionLibrary_IsFacing::bIgnoreVerticalFacing' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsFacing, ReturnValue) == 0x000019, "Member 'GBFunctionLibrary_IsFacing::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsFriendly
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_IsFriendly final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsFriendly) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsFriendly");
static_assert(sizeof(GBFunctionLibrary_IsFriendly) == 0x000018, "Wrong size on GBFunctionLibrary_IsFriendly");
static_assert(offsetof(GBFunctionLibrary_IsFriendly, ActorA) == 0x000000, "Member 'GBFunctionLibrary_IsFriendly::ActorA' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsFriendly, ActorB) == 0x000008, "Member 'GBFunctionLibrary_IsFriendly::ActorB' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsFriendly, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_IsFriendly::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsGameWorld
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_IsGameWorld final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsGameWorld) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsGameWorld");
static_assert(sizeof(GBFunctionLibrary_IsGameWorld) == 0x000010, "Wrong size on GBFunctionLibrary_IsGameWorld");
static_assert(offsetof(GBFunctionLibrary_IsGameWorld, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_IsGameWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsGameWorld, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_IsGameWorld::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsInState
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_IsInState final
{
public:
	const class AController*                      Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStateName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsInState) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsInState");
static_assert(sizeof(GBFunctionLibrary_IsInState) == 0x000018, "Wrong size on GBFunctionLibrary_IsInState");
static_assert(offsetof(GBFunctionLibrary_IsInState, Target) == 0x000000, "Member 'GBFunctionLibrary_IsInState::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsInState, InStateName) == 0x000008, "Member 'GBFunctionLibrary_IsInState::InStateName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsInState, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_IsInState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsKeyBoundToActionDown
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_IsKeyBoundToActionDown final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsKeyBoundToActionDown) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsKeyBoundToActionDown");
static_assert(sizeof(GBFunctionLibrary_IsKeyBoundToActionDown) == 0x000018, "Wrong size on GBFunctionLibrary_IsKeyBoundToActionDown");
static_assert(offsetof(GBFunctionLibrary_IsKeyBoundToActionDown, PlayerController) == 0x000000, "Member 'GBFunctionLibrary_IsKeyBoundToActionDown::PlayerController' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsKeyBoundToActionDown, ActionName) == 0x000008, "Member 'GBFunctionLibrary_IsKeyBoundToActionDown::ActionName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsKeyBoundToActionDown, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_IsKeyBoundToActionDown::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsListenServerSession
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_IsListenServerSession final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsListenServerSession) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsListenServerSession");
static_assert(sizeof(GBFunctionLibrary_IsListenServerSession) == 0x000010, "Wrong size on GBFunctionLibrary_IsListenServerSession");
static_assert(offsetof(GBFunctionLibrary_IsListenServerSession, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_IsListenServerSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsListenServerSession, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_IsListenServerSession::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsProbablyAYearOrYearRange
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_IsProbablyAYearOrYearRange final
{
public:
	class FString                                 SuspectedYearString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsProbablyAYearOrYearRange) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsProbablyAYearOrYearRange");
static_assert(sizeof(GBFunctionLibrary_IsProbablyAYearOrYearRange) == 0x000018, "Wrong size on GBFunctionLibrary_IsProbablyAYearOrYearRange");
static_assert(offsetof(GBFunctionLibrary_IsProbablyAYearOrYearRange, SuspectedYearString) == 0x000000, "Member 'GBFunctionLibrary_IsProbablyAYearOrYearRange::SuspectedYearString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsProbablyAYearOrYearRange, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_IsProbablyAYearOrYearRange::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.isReadOnly
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_isReadOnly final
{
public:
	class FString                                 PathOrFilename;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_isReadOnly) == 0x000008, "Wrong alignment on GBFunctionLibrary_isReadOnly");
static_assert(sizeof(GBFunctionLibrary_isReadOnly) == 0x000018, "Wrong size on GBFunctionLibrary_isReadOnly");
static_assert(offsetof(GBFunctionLibrary_isReadOnly, PathOrFilename) == 0x000000, "Member 'GBFunctionLibrary_isReadOnly::PathOrFilename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_isReadOnly, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_isReadOnly::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsSimulatingInEditor
// 0x0001 (0x0001 - 0x0000)
struct GBFunctionLibrary_IsSimulatingInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_IsSimulatingInEditor) == 0x000001, "Wrong alignment on GBFunctionLibrary_IsSimulatingInEditor");
static_assert(sizeof(GBFunctionLibrary_IsSimulatingInEditor) == 0x000001, "Wrong size on GBFunctionLibrary_IsSimulatingInEditor");
static_assert(offsetof(GBFunctionLibrary_IsSimulatingInEditor, ReturnValue) == 0x000000, "Member 'GBFunctionLibrary_IsSimulatingInEditor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.IsValidSoftObjectPath
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_IsValidSoftObjectPath final
{
public:
	struct FSoftObjectPath                        SoftObjectPath;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_IsValidSoftObjectPath) == 0x000008, "Wrong alignment on GBFunctionLibrary_IsValidSoftObjectPath");
static_assert(sizeof(GBFunctionLibrary_IsValidSoftObjectPath) == 0x000020, "Wrong size on GBFunctionLibrary_IsValidSoftObjectPath");
static_assert(offsetof(GBFunctionLibrary_IsValidSoftObjectPath, SoftObjectPath) == 0x000000, "Member 'GBFunctionLibrary_IsValidSoftObjectPath::SoftObjectPath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_IsValidSoftObjectPath, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_IsValidSoftObjectPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Key_GetName
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_Key_GetName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Key_GetName) == 0x000008, "Wrong alignment on GBFunctionLibrary_Key_GetName");
static_assert(sizeof(GBFunctionLibrary_Key_GetName) == 0x000020, "Wrong size on GBFunctionLibrary_Key_GetName");
static_assert(offsetof(GBFunctionLibrary_Key_GetName, Key) == 0x000000, "Member 'GBFunctionLibrary_Key_GetName::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Key_GetName, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_Key_GetName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Key_GetString
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_Key_GetString final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Key_GetString) == 0x000008, "Wrong alignment on GBFunctionLibrary_Key_GetString");
static_assert(sizeof(GBFunctionLibrary_Key_GetString) == 0x000028, "Wrong size on GBFunctionLibrary_Key_GetString");
static_assert(offsetof(GBFunctionLibrary_Key_GetString, Key) == 0x000000, "Member 'GBFunctionLibrary_Key_GetString::Key' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Key_GetString, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_Key_GetString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.LoadExternalImage
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_LoadExternalImage final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OutImage;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutWidth;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHeight;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_LoadExternalImage) == 0x000008, "Wrong alignment on GBFunctionLibrary_LoadExternalImage");
static_assert(sizeof(GBFunctionLibrary_LoadExternalImage) == 0x000028, "Wrong size on GBFunctionLibrary_LoadExternalImage");
static_assert(offsetof(GBFunctionLibrary_LoadExternalImage, ImagePath) == 0x000000, "Member 'GBFunctionLibrary_LoadExternalImage::ImagePath' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadExternalImage, OutImage) == 0x000010, "Member 'GBFunctionLibrary_LoadExternalImage::OutImage' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadExternalImage, OutWidth) == 0x000018, "Member 'GBFunctionLibrary_LoadExternalImage::OutWidth' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadExternalImage, OutHeight) == 0x00001C, "Member 'GBFunctionLibrary_LoadExternalImage::OutHeight' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadExternalImage, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_LoadExternalImage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.LoadKillhouseVariant
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_LoadKillhouseVariant final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KillhouseLayoutClassName;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_LoadKillhouseVariant) == 0x000008, "Wrong alignment on GBFunctionLibrary_LoadKillhouseVariant");
static_assert(sizeof(GBFunctionLibrary_LoadKillhouseVariant) == 0x000028, "Wrong size on GBFunctionLibrary_LoadKillhouseVariant");
static_assert(offsetof(GBFunctionLibrary_LoadKillhouseVariant, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_LoadKillhouseVariant::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadKillhouseVariant, KillhouseLayoutClassName) == 0x000008, "Member 'GBFunctionLibrary_LoadKillhouseVariant::KillhouseLayoutClassName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadKillhouseVariant, SpawnLocation) == 0x000018, "Member 'GBFunctionLibrary_LoadKillhouseVariant::SpawnLocation' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadKillhouseVariant, ReturnValue) == 0x000024, "Member 'GBFunctionLibrary_LoadKillhouseVariant::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.LoadStringArrayFromFile
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_LoadStringArrayFromFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutStringArray;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLogWarnings;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_LoadStringArrayFromFile) == 0x000008, "Wrong alignment on GBFunctionLibrary_LoadStringArrayFromFile");
static_assert(sizeof(GBFunctionLibrary_LoadStringArrayFromFile) == 0x000028, "Wrong size on GBFunctionLibrary_LoadStringArrayFromFile");
static_assert(offsetof(GBFunctionLibrary_LoadStringArrayFromFile, Filename) == 0x000000, "Member 'GBFunctionLibrary_LoadStringArrayFromFile::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadStringArrayFromFile, OutStringArray) == 0x000010, "Member 'GBFunctionLibrary_LoadStringArrayFromFile::OutStringArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadStringArrayFromFile, bLogWarnings) == 0x000020, "Member 'GBFunctionLibrary_LoadStringArrayFromFile::bLogWarnings' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadStringArrayFromFile, ReturnValue) == 0x000021, "Member 'GBFunctionLibrary_LoadStringArrayFromFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.LoadStringFromFile
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_LoadStringFromFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogWarnings;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_LoadStringFromFile) == 0x000008, "Wrong alignment on GBFunctionLibrary_LoadStringFromFile");
static_assert(sizeof(GBFunctionLibrary_LoadStringFromFile) == 0x000028, "Wrong size on GBFunctionLibrary_LoadStringFromFile");
static_assert(offsetof(GBFunctionLibrary_LoadStringFromFile, Filename) == 0x000000, "Member 'GBFunctionLibrary_LoadStringFromFile::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadStringFromFile, OutString) == 0x000010, "Member 'GBFunctionLibrary_LoadStringFromFile::OutString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadStringFromFile, bLogWarnings) == 0x000020, "Member 'GBFunctionLibrary_LoadStringFromFile::bLogWarnings' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_LoadStringFromFile, ReturnValue) == 0x000021, "Member 'GBFunctionLibrary_LoadStringFromFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.MakeRedToGreenColorFromScalar
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_MakeRedToGreenColorFromScalar final
{
public:
	float                                         Scalar;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_MakeRedToGreenColorFromScalar) == 0x000004, "Wrong alignment on GBFunctionLibrary_MakeRedToGreenColorFromScalar");
static_assert(sizeof(GBFunctionLibrary_MakeRedToGreenColorFromScalar) == 0x000008, "Wrong size on GBFunctionLibrary_MakeRedToGreenColorFromScalar");
static_assert(offsetof(GBFunctionLibrary_MakeRedToGreenColorFromScalar, Scalar) == 0x000000, "Member 'GBFunctionLibrary_MakeRedToGreenColorFromScalar::Scalar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_MakeRedToGreenColorFromScalar, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_MakeRedToGreenColorFromScalar::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.MakeValidCallSign
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_MakeValidCallSign final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_MakeValidCallSign) == 0x000008, "Wrong alignment on GBFunctionLibrary_MakeValidCallSign");
static_assert(sizeof(GBFunctionLibrary_MakeValidCallSign) == 0x000020, "Wrong size on GBFunctionLibrary_MakeValidCallSign");
static_assert(offsetof(GBFunctionLibrary_MakeValidCallSign, Source) == 0x000000, "Member 'GBFunctionLibrary_MakeValidCallSign::Source' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_MakeValidCallSign, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_MakeValidCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.MakeValidString
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_MakeValidString final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvalidChars;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_MakeValidString) == 0x000008, "Wrong alignment on GBFunctionLibrary_MakeValidString");
static_assert(sizeof(GBFunctionLibrary_MakeValidString) == 0x000030, "Wrong size on GBFunctionLibrary_MakeValidString");
static_assert(offsetof(GBFunctionLibrary_MakeValidString, Source) == 0x000000, "Member 'GBFunctionLibrary_MakeValidString::Source' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_MakeValidString, InvalidChars) == 0x000010, "Member 'GBFunctionLibrary_MakeValidString::InvalidChars' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_MakeValidString, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_MakeValidString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.NameArraysMatch
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_NameArraysMatch final
{
public:
	TArray<class FName>                           SourceNames;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetNames;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_NameArraysMatch) == 0x000008, "Wrong alignment on GBFunctionLibrary_NameArraysMatch");
static_assert(sizeof(GBFunctionLibrary_NameArraysMatch) == 0x000028, "Wrong size on GBFunctionLibrary_NameArraysMatch");
static_assert(offsetof(GBFunctionLibrary_NameArraysMatch, SourceNames) == 0x000000, "Member 'GBFunctionLibrary_NameArraysMatch::SourceNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_NameArraysMatch, TargetNames) == 0x000010, "Member 'GBFunctionLibrary_NameArraysMatch::TargetNames' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_NameArraysMatch, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_NameArraysMatch::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.NamesMatch
// 0x0014 (0x0014 - 0x0000)
struct GBFunctionLibrary_NamesMatch final
{
public:
	class FName                                   SourceName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SearchName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESearchFix                                    SearchFix;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_NamesMatch) == 0x000004, "Wrong alignment on GBFunctionLibrary_NamesMatch");
static_assert(sizeof(GBFunctionLibrary_NamesMatch) == 0x000014, "Wrong size on GBFunctionLibrary_NamesMatch");
static_assert(offsetof(GBFunctionLibrary_NamesMatch, SourceName) == 0x000000, "Member 'GBFunctionLibrary_NamesMatch::SourceName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_NamesMatch, SearchName) == 0x000008, "Member 'GBFunctionLibrary_NamesMatch::SearchName' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_NamesMatch, SearchFix) == 0x000010, "Member 'GBFunctionLibrary_NamesMatch::SearchFix' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_NamesMatch, ReturnValue) == 0x000011, "Member 'GBFunctionLibrary_NamesMatch::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.OnSameTeam
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_OnSameTeam final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_OnSameTeam) == 0x000008, "Wrong alignment on GBFunctionLibrary_OnSameTeam");
static_assert(sizeof(GBFunctionLibrary_OnSameTeam) == 0x000018, "Wrong size on GBFunctionLibrary_OnSameTeam");
static_assert(offsetof(GBFunctionLibrary_OnSameTeam, ActorA) == 0x000000, "Member 'GBFunctionLibrary_OnSameTeam::ActorA' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_OnSameTeam, ActorB) == 0x000008, "Member 'GBFunctionLibrary_OnSameTeam::ActorB' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_OnSameTeam, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_OnSameTeam::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ParseValue_Bool
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_ParseValue_Bool final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Match;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ParseValue_Bool) == 0x000008, "Wrong alignment on GBFunctionLibrary_ParseValue_Bool");
static_assert(sizeof(GBFunctionLibrary_ParseValue_Bool) == 0x000028, "Wrong size on GBFunctionLibrary_ParseValue_Bool");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Bool, Options) == 0x000000, "Member 'GBFunctionLibrary_ParseValue_Bool::Options' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Bool, Match) == 0x000010, "Member 'GBFunctionLibrary_ParseValue_Bool::Match' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Bool, Value) == 0x000020, "Member 'GBFunctionLibrary_ParseValue_Bool::Value' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Bool, ReturnValue) == 0x000021, "Member 'GBFunctionLibrary_ParseValue_Bool::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ParseValue_Float
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_ParseValue_Float final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Match;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ParseValue_Float) == 0x000008, "Wrong alignment on GBFunctionLibrary_ParseValue_Float");
static_assert(sizeof(GBFunctionLibrary_ParseValue_Float) == 0x000028, "Wrong size on GBFunctionLibrary_ParseValue_Float");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Float, Options) == 0x000000, "Member 'GBFunctionLibrary_ParseValue_Float::Options' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Float, Match) == 0x000010, "Member 'GBFunctionLibrary_ParseValue_Float::Match' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Float, Value) == 0x000020, "Member 'GBFunctionLibrary_ParseValue_Float::Value' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Float, ReturnValue) == 0x000024, "Member 'GBFunctionLibrary_ParseValue_Float::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ParseValue_Integer
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_ParseValue_Integer final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Match;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ParseValue_Integer) == 0x000008, "Wrong alignment on GBFunctionLibrary_ParseValue_Integer");
static_assert(sizeof(GBFunctionLibrary_ParseValue_Integer) == 0x000028, "Wrong size on GBFunctionLibrary_ParseValue_Integer");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Integer, Options) == 0x000000, "Member 'GBFunctionLibrary_ParseValue_Integer::Options' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Integer, Match) == 0x000010, "Member 'GBFunctionLibrary_ParseValue_Integer::Match' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Integer, Value) == 0x000020, "Member 'GBFunctionLibrary_ParseValue_Integer::Value' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Integer, ReturnValue) == 0x000024, "Member 'GBFunctionLibrary_ParseValue_Integer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ParseValue_Name
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_ParseValue_Name final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Match;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ParseValue_Name) == 0x000008, "Wrong alignment on GBFunctionLibrary_ParseValue_Name");
static_assert(sizeof(GBFunctionLibrary_ParseValue_Name) == 0x000030, "Wrong size on GBFunctionLibrary_ParseValue_Name");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Name, Options) == 0x000000, "Member 'GBFunctionLibrary_ParseValue_Name::Options' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Name, Match) == 0x000010, "Member 'GBFunctionLibrary_ParseValue_Name::Match' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Name, Value) == 0x000020, "Member 'GBFunctionLibrary_ParseValue_Name::Value' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_Name, ReturnValue) == 0x000028, "Member 'GBFunctionLibrary_ParseValue_Name::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ParseValue_String
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_ParseValue_String final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Match;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ParseValue_String) == 0x000008, "Wrong alignment on GBFunctionLibrary_ParseValue_String");
static_assert(sizeof(GBFunctionLibrary_ParseValue_String) == 0x000038, "Wrong size on GBFunctionLibrary_ParseValue_String");
static_assert(offsetof(GBFunctionLibrary_ParseValue_String, Options) == 0x000000, "Member 'GBFunctionLibrary_ParseValue_String::Options' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_String, Match) == 0x000010, "Member 'GBFunctionLibrary_ParseValue_String::Match' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_String, Value) == 0x000020, "Member 'GBFunctionLibrary_ParseValue_String::Value' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ParseValue_String, ReturnValue) == 0x000030, "Member 'GBFunctionLibrary_ParseValue_String::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.PrettifyJsonString
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_PrettifyJsonString final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPrettyKitString;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_PrettifyJsonString) == 0x000008, "Wrong alignment on GBFunctionLibrary_PrettifyJsonString");
static_assert(sizeof(GBFunctionLibrary_PrettifyJsonString) == 0x000028, "Wrong size on GBFunctionLibrary_PrettifyJsonString");
static_assert(offsetof(GBFunctionLibrary_PrettifyJsonString, JsonString) == 0x000000, "Member 'GBFunctionLibrary_PrettifyJsonString::JsonString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_PrettifyJsonString, OutPrettyKitString) == 0x000010, "Member 'GBFunctionLibrary_PrettifyJsonString::OutPrettyKitString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_PrettifyJsonString, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_PrettifyJsonString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.PrintStringToLog
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_PrintStringToLog final
{
public:
	class FString                                 StringToPrint;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogVerbose;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNetworkRoleInLog;                          // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNameInLog;                                 // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ThisRef;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_PrintStringToLog) == 0x000008, "Wrong alignment on GBFunctionLibrary_PrintStringToLog");
static_assert(sizeof(GBFunctionLibrary_PrintStringToLog) == 0x000020, "Wrong size on GBFunctionLibrary_PrintStringToLog");
static_assert(offsetof(GBFunctionLibrary_PrintStringToLog, StringToPrint) == 0x000000, "Member 'GBFunctionLibrary_PrintStringToLog::StringToPrint' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_PrintStringToLog, bLogVerbose) == 0x000010, "Member 'GBFunctionLibrary_PrintStringToLog::bLogVerbose' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_PrintStringToLog, bIncludeNetworkRoleInLog) == 0x000011, "Member 'GBFunctionLibrary_PrintStringToLog::bIncludeNetworkRoleInLog' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_PrintStringToLog, bIncludeNameInLog) == 0x000012, "Member 'GBFunctionLibrary_PrintStringToLog::bIncludeNameInLog' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_PrintStringToLog, ThisRef) == 0x000018, "Member 'GBFunctionLibrary_PrintStringToLog::ThisRef' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Project
// 0x0050 (0x0050 - 0x0000)
struct GBFunctionLibrary_Project final
{
public:
	struct FTransform                             ViewTM;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenSize;                                        // 0x0034(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScreenPosition;                                 // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Project) == 0x000010, "Wrong alignment on GBFunctionLibrary_Project");
static_assert(sizeof(GBFunctionLibrary_Project) == 0x000050, "Wrong size on GBFunctionLibrary_Project");
static_assert(offsetof(GBFunctionLibrary_Project, ViewTM) == 0x000000, "Member 'GBFunctionLibrary_Project::ViewTM' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Project, FOV) == 0x000030, "Member 'GBFunctionLibrary_Project::FOV' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Project, ScreenSize) == 0x000034, "Member 'GBFunctionLibrary_Project::ScreenSize' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Project, WorldLocation) == 0x00003C, "Member 'GBFunctionLibrary_Project::WorldLocation' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Project, OutScreenPosition) == 0x000048, "Member 'GBFunctionLibrary_Project::OutScreenPosition' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.RemoveSpaces
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_RemoveSpaces final
{
public:
	class FString                                 SourceString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_RemoveSpaces) == 0x000008, "Wrong alignment on GBFunctionLibrary_RemoveSpaces");
static_assert(sizeof(GBFunctionLibrary_RemoveSpaces) == 0x000020, "Wrong size on GBFunctionLibrary_RemoveSpaces");
static_assert(offsetof(GBFunctionLibrary_RemoveSpaces, SourceString) == 0x000000, "Member 'GBFunctionLibrary_RemoveSpaces::SourceString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_RemoveSpaces, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_RemoveSpaces::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.RemoveSpacesInline
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_RemoveSpacesInline final
{
public:
	class FString                                 SourceString;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_RemoveSpacesInline) == 0x000008, "Wrong alignment on GBFunctionLibrary_RemoveSpacesInline");
static_assert(sizeof(GBFunctionLibrary_RemoveSpacesInline) == 0x000010, "Wrong size on GBFunctionLibrary_RemoveSpacesInline");
static_assert(offsetof(GBFunctionLibrary_RemoveSpacesInline, SourceString) == 0x000000, "Member 'GBFunctionLibrary_RemoveSpacesInline::SourceString' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.RenameActor
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_RenameActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewActorName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_RenameActor) == 0x000008, "Wrong alignment on GBFunctionLibrary_RenameActor");
static_assert(sizeof(GBFunctionLibrary_RenameActor) == 0x000018, "Wrong size on GBFunctionLibrary_RenameActor");
static_assert(offsetof(GBFunctionLibrary_RenameActor, TargetActor) == 0x000000, "Member 'GBFunctionLibrary_RenameActor::TargetActor' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_RenameActor, NewActorName) == 0x000008, "Member 'GBFunctionLibrary_RenameActor::NewActorName' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ResetGlobalGravity
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_ResetGlobalGravity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_ResetGlobalGravity) == 0x000008, "Wrong alignment on GBFunctionLibrary_ResetGlobalGravity");
static_assert(sizeof(GBFunctionLibrary_ResetGlobalGravity) == 0x000008, "Wrong size on GBFunctionLibrary_ResetGlobalGravity");
static_assert(offsetof(GBFunctionLibrary_ResetGlobalGravity, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_ResetGlobalGravity::WorldContextObject' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SaveStringToFile
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_SaveStringToFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverWrite;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SaveStringToFile) == 0x000008, "Wrong alignment on GBFunctionLibrary_SaveStringToFile");
static_assert(sizeof(GBFunctionLibrary_SaveStringToFile) == 0x000028, "Wrong size on GBFunctionLibrary_SaveStringToFile");
static_assert(offsetof(GBFunctionLibrary_SaveStringToFile, Filename) == 0x000000, "Member 'GBFunctionLibrary_SaveStringToFile::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SaveStringToFile, String) == 0x000010, "Member 'GBFunctionLibrary_SaveStringToFile::String' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SaveStringToFile, bOverWrite) == 0x000020, "Member 'GBFunctionLibrary_SaveStringToFile::bOverWrite' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SaveStringToFile, ReturnValue) == 0x000021, "Member 'GBFunctionLibrary_SaveStringToFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetConsoleBool
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_SetConsoleBool final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetConsoleBool) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetConsoleBool");
static_assert(sizeof(GBFunctionLibrary_SetConsoleBool) == 0x000018, "Wrong size on GBFunctionLibrary_SetConsoleBool");
static_assert(offsetof(GBFunctionLibrary_SetConsoleBool, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_SetConsoleBool::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetConsoleBool, BoolValue) == 0x000010, "Member 'GBFunctionLibrary_SetConsoleBool::BoolValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetConsoleFloat
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_SetConsoleFloat final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetConsoleFloat) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetConsoleFloat");
static_assert(sizeof(GBFunctionLibrary_SetConsoleFloat) == 0x000018, "Wrong size on GBFunctionLibrary_SetConsoleFloat");
static_assert(offsetof(GBFunctionLibrary_SetConsoleFloat, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_SetConsoleFloat::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetConsoleFloat, FloatValue) == 0x000010, "Member 'GBFunctionLibrary_SetConsoleFloat::FloatValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetConsoleInt
// 0x0018 (0x0018 - 0x0000)
struct GBFunctionLibrary_SetConsoleInt final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetConsoleInt) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetConsoleInt");
static_assert(sizeof(GBFunctionLibrary_SetConsoleInt) == 0x000018, "Wrong size on GBFunctionLibrary_SetConsoleInt");
static_assert(offsetof(GBFunctionLibrary_SetConsoleInt, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_SetConsoleInt::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetConsoleInt, IntValue) == 0x000010, "Member 'GBFunctionLibrary_SetConsoleInt::IntValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetConsoleString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_SetConsoleString final
{
public:
	class FString                                 ConsoleVar;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_SetConsoleString) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetConsoleString");
static_assert(sizeof(GBFunctionLibrary_SetConsoleString) == 0x000020, "Wrong size on GBFunctionLibrary_SetConsoleString");
static_assert(offsetof(GBFunctionLibrary_SetConsoleString, ConsoleVar) == 0x000000, "Member 'GBFunctionLibrary_SetConsoleString::ConsoleVar' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetConsoleString, StringValue) == 0x000010, "Member 'GBFunctionLibrary_SetConsoleString::StringValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetDrownEffectIntensity
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_SetDrownEffectIntensity final
{
public:
	class UPostProcessComponent*                  PostProcessSettings;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectAmount;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetDrownEffectIntensity) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetDrownEffectIntensity");
static_assert(sizeof(GBFunctionLibrary_SetDrownEffectIntensity) == 0x000010, "Wrong size on GBFunctionLibrary_SetDrownEffectIntensity");
static_assert(offsetof(GBFunctionLibrary_SetDrownEffectIntensity, PostProcessSettings) == 0x000000, "Member 'GBFunctionLibrary_SetDrownEffectIntensity::PostProcessSettings' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetDrownEffectIntensity, EffectAmount) == 0x000008, "Member 'GBFunctionLibrary_SetDrownEffectIntensity::EffectAmount' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetGenericTeamId
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_SetGenericTeamId final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetGenericTeamId) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetGenericTeamId");
static_assert(sizeof(GBFunctionLibrary_SetGenericTeamId) == 0x000010, "Wrong size on GBFunctionLibrary_SetGenericTeamId");
static_assert(offsetof(GBFunctionLibrary_SetGenericTeamId, Target) == 0x000000, "Member 'GBFunctionLibrary_SetGenericTeamId::Target' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetGenericTeamId, NewTeamId) == 0x000008, "Member 'GBFunctionLibrary_SetGenericTeamId::NewTeamId' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetGenericTeamId, ReturnValue) == 0x000009, "Member 'GBFunctionLibrary_SetGenericTeamId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetGlobalGravity
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_SetGlobalGravity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalGravity;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetGlobalGravity) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetGlobalGravity");
static_assert(sizeof(GBFunctionLibrary_SetGlobalGravity) == 0x000010, "Wrong size on GBFunctionLibrary_SetGlobalGravity");
static_assert(offsetof(GBFunctionLibrary_SetGlobalGravity, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_SetGlobalGravity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetGlobalGravity, GlobalGravity) == 0x000008, "Member 'GBFunctionLibrary_SetGlobalGravity::GlobalGravity' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SetRenderInDepthPass
// 0x0010 (0x0010 - 0x0000)
struct GBFunctionLibrary_SetRenderInDepthPass final
{
public:
	class UPrimitiveComponent*                    PrimitiveComp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SetRenderInDepthPass) == 0x000008, "Wrong alignment on GBFunctionLibrary_SetRenderInDepthPass");
static_assert(sizeof(GBFunctionLibrary_SetRenderInDepthPass) == 0x000010, "Wrong size on GBFunctionLibrary_SetRenderInDepthPass");
static_assert(offsetof(GBFunctionLibrary_SetRenderInDepthPass, PrimitiveComp) == 0x000000, "Member 'GBFunctionLibrary_SetRenderInDepthPass::PrimitiveComp' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SetRenderInDepthPass, bValue) == 0x000008, "Member 'GBFunctionLibrary_SetRenderInDepthPass::bValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SignedAlphaToByte
// 0x0008 (0x0008 - 0x0000)
struct GBFunctionLibrary_SignedAlphaToByte final
{
public:
	float                                         AlphaValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SignedAlphaToByte) == 0x000004, "Wrong alignment on GBFunctionLibrary_SignedAlphaToByte");
static_assert(sizeof(GBFunctionLibrary_SignedAlphaToByte) == 0x000008, "Wrong size on GBFunctionLibrary_SignedAlphaToByte");
static_assert(offsetof(GBFunctionLibrary_SignedAlphaToByte, AlphaValue) == 0x000000, "Member 'GBFunctionLibrary_SignedAlphaToByte::AlphaValue' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SignedAlphaToByte, ReturnValue) == 0x000004, "Member 'GBFunctionLibrary_SignedAlphaToByte::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SortActorArray
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_SortActorArray final
{
public:
	TArray<class AActor*>                         ActorArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorArrayRef;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_SortActorArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_SortActorArray");
static_assert(sizeof(GBFunctionLibrary_SortActorArray) == 0x000020, "Wrong size on GBFunctionLibrary_SortActorArray");
static_assert(offsetof(GBFunctionLibrary_SortActorArray, ActorArray) == 0x000000, "Member 'GBFunctionLibrary_SortActorArray::ActorArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortActorArray, ActorArrayRef) == 0x000010, "Member 'GBFunctionLibrary_SortActorArray::ActorArrayRef' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SortFloatArray
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_SortFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArrayRef;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_SortFloatArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_SortFloatArray");
static_assert(sizeof(GBFunctionLibrary_SortFloatArray) == 0x000020, "Wrong size on GBFunctionLibrary_SortFloatArray");
static_assert(offsetof(GBFunctionLibrary_SortFloatArray, FloatArray) == 0x000000, "Member 'GBFunctionLibrary_SortFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortFloatArray, FloatArrayRef) == 0x000010, "Member 'GBFunctionLibrary_SortFloatArray::FloatArrayRef' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SortIntArray
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_SortIntArray final
{
public:
	TArray<int32>                                 IntArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntArrayRef;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_SortIntArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_SortIntArray");
static_assert(sizeof(GBFunctionLibrary_SortIntArray) == 0x000020, "Wrong size on GBFunctionLibrary_SortIntArray");
static_assert(offsetof(GBFunctionLibrary_SortIntArray, IntArray) == 0x000000, "Member 'GBFunctionLibrary_SortIntArray::IntArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortIntArray, IntArrayRef) == 0x000010, "Member 'GBFunctionLibrary_SortIntArray::IntArrayRef' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SortStringArray
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_SortStringArray final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArrayRef;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSortByLeafName;                                   // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_SortStringArray) == 0x000008, "Wrong alignment on GBFunctionLibrary_SortStringArray");
static_assert(sizeof(GBFunctionLibrary_SortStringArray) == 0x000028, "Wrong size on GBFunctionLibrary_SortStringArray");
static_assert(offsetof(GBFunctionLibrary_SortStringArray, StringArray) == 0x000000, "Member 'GBFunctionLibrary_SortStringArray::StringArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortStringArray, StringArrayRef) == 0x000010, "Member 'GBFunctionLibrary_SortStringArray::StringArrayRef' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortStringArray, bSortByLeafName) == 0x000020, "Member 'GBFunctionLibrary_SortStringArray::bSortByLeafName' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.SortStringArrayWithPriorityCharacter
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_SortStringArrayWithPriorityCharacter final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArrayRef;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PriorityCharacter;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_SortStringArrayWithPriorityCharacter) == 0x000008, "Wrong alignment on GBFunctionLibrary_SortStringArrayWithPriorityCharacter");
static_assert(sizeof(GBFunctionLibrary_SortStringArrayWithPriorityCharacter) == 0x000030, "Wrong size on GBFunctionLibrary_SortStringArrayWithPriorityCharacter");
static_assert(offsetof(GBFunctionLibrary_SortStringArrayWithPriorityCharacter, StringArray) == 0x000000, "Member 'GBFunctionLibrary_SortStringArrayWithPriorityCharacter::StringArray' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortStringArrayWithPriorityCharacter, StringArrayRef) == 0x000010, "Member 'GBFunctionLibrary_SortStringArrayWithPriorityCharacter::StringArrayRef' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_SortStringArrayWithPriorityCharacter, PriorityCharacter) == 0x000020, "Member 'GBFunctionLibrary_SortStringArrayWithPriorityCharacter::PriorityCharacter' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.StringHash
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_StringHash final
{
public:
	class FString                                 StringToHash;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_StringHash) == 0x000008, "Wrong alignment on GBFunctionLibrary_StringHash");
static_assert(sizeof(GBFunctionLibrary_StringHash) == 0x000020, "Wrong size on GBFunctionLibrary_StringHash");
static_assert(offsetof(GBFunctionLibrary_StringHash, StringToHash) == 0x000000, "Member 'GBFunctionLibrary_StringHash::StringToHash' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_StringHash, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_StringHash::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.StringToDisplayString
// 0x0028 (0x0028 - 0x0000)
struct GBFunctionLibrary_StringToDisplayString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBool;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_StringToDisplayString) == 0x000008, "Wrong alignment on GBFunctionLibrary_StringToDisplayString");
static_assert(sizeof(GBFunctionLibrary_StringToDisplayString) == 0x000028, "Wrong size on GBFunctionLibrary_StringToDisplayString");
static_assert(offsetof(GBFunctionLibrary_StringToDisplayString, inString) == 0x000000, "Member 'GBFunctionLibrary_StringToDisplayString::inString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_StringToDisplayString, bIsBool) == 0x000010, "Member 'GBFunctionLibrary_StringToDisplayString::bIsBool' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_StringToDisplayString, ReturnValue) == 0x000018, "Member 'GBFunctionLibrary_StringToDisplayString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.StripBBCode
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_StripBBCode final
{
public:
	class FString                                 SourceString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_StripBBCode) == 0x000008, "Wrong alignment on GBFunctionLibrary_StripBBCode");
static_assert(sizeof(GBFunctionLibrary_StripBBCode) == 0x000020, "Wrong size on GBFunctionLibrary_StripBBCode");
static_assert(offsetof(GBFunctionLibrary_StripBBCode, SourceString) == 0x000000, "Member 'GBFunctionLibrary_StripBBCode::SourceString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_StripBBCode, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_StripBBCode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.Time_GetOSTime
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_Time_GetOSTime final
{
public:
	int32                                         MilliSeconds;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours12;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours24;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_Time_GetOSTime) == 0x000008, "Wrong alignment on GBFunctionLibrary_Time_GetOSTime");
static_assert(sizeof(GBFunctionLibrary_Time_GetOSTime) == 0x000030, "Wrong size on GBFunctionLibrary_Time_GetOSTime");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, MilliSeconds) == 0x000000, "Member 'GBFunctionLibrary_Time_GetOSTime::MilliSeconds' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Seconds) == 0x000004, "Member 'GBFunctionLibrary_Time_GetOSTime::Seconds' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Minutes) == 0x000008, "Member 'GBFunctionLibrary_Time_GetOSTime::Minutes' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Hours12) == 0x00000C, "Member 'GBFunctionLibrary_Time_GetOSTime::Hours12' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Hours24) == 0x000010, "Member 'GBFunctionLibrary_Time_GetOSTime::Hours24' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Day) == 0x000014, "Member 'GBFunctionLibrary_Time_GetOSTime::Day' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Month) == 0x000018, "Member 'GBFunctionLibrary_Time_GetOSTime::Month' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, Year) == 0x00001C, "Member 'GBFunctionLibrary_Time_GetOSTime::Year' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_Time_GetOSTime, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_Time_GetOSTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.TrimDigitsFromString
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_TrimDigitsFromString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_TrimDigitsFromString) == 0x000008, "Wrong alignment on GBFunctionLibrary_TrimDigitsFromString");
static_assert(sizeof(GBFunctionLibrary_TrimDigitsFromString) == 0x000020, "Wrong size on GBFunctionLibrary_TrimDigitsFromString");
static_assert(offsetof(GBFunctionLibrary_TrimDigitsFromString, inString) == 0x000000, "Member 'GBFunctionLibrary_TrimDigitsFromString::inString' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_TrimDigitsFromString, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_TrimDigitsFromString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.TrimExtension
// 0x0020 (0x0020 - 0x0000)
struct GBFunctionLibrary_TrimExtension final
{
public:
	class FString                                 SourceStr;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_TrimExtension) == 0x000008, "Wrong alignment on GBFunctionLibrary_TrimExtension");
static_assert(sizeof(GBFunctionLibrary_TrimExtension) == 0x000020, "Wrong size on GBFunctionLibrary_TrimExtension");
static_assert(offsetof(GBFunctionLibrary_TrimExtension, SourceStr) == 0x000000, "Member 'GBFunctionLibrary_TrimExtension::SourceStr' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_TrimExtension, ReturnValue) == 0x000010, "Member 'GBFunctionLibrary_TrimExtension::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.UpdateMissionModBase
// 0x0038 (0x0038 - 0x0000)
struct GBFunctionLibrary_UpdateMissionModBase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                NewModID;                                          // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MatchingGameModes;                                 // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bOnlyStagedMod;                                    // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_UpdateMissionModBase) == 0x000008, "Wrong alignment on GBFunctionLibrary_UpdateMissionModBase");
static_assert(sizeof(GBFunctionLibrary_UpdateMissionModBase) == 0x000038, "Wrong size on GBFunctionLibrary_UpdateMissionModBase");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionModBase, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_UpdateMissionModBase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionModBase, Filename) == 0x000008, "Member 'GBFunctionLibrary_UpdateMissionModBase::Filename' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionModBase, NewModID) == 0x000018, "Member 'GBFunctionLibrary_UpdateMissionModBase::NewModID' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionModBase, MatchingGameModes) == 0x000020, "Member 'GBFunctionLibrary_UpdateMissionModBase::MatchingGameModes' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionModBase, bOnlyStagedMod) == 0x000030, "Member 'GBFunctionLibrary_UpdateMissionModBase::bOnlyStagedMod' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionModBase, ReturnValue) == 0x000031, "Member 'GBFunctionLibrary_UpdateMissionModBase::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.UpdateMissionParametersFromMaplist
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_UpdateMissionParametersFromMaplist final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PermittedMissions;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_UpdateMissionParametersFromMaplist) == 0x000008, "Wrong alignment on GBFunctionLibrary_UpdateMissionParametersFromMaplist");
static_assert(sizeof(GBFunctionLibrary_UpdateMissionParametersFromMaplist) == 0x000030, "Wrong size on GBFunctionLibrary_UpdateMissionParametersFromMaplist");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionParametersFromMaplist, Parameters) == 0x000000, "Member 'GBFunctionLibrary_UpdateMissionParametersFromMaplist::Parameters' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionParametersFromMaplist, PermittedMissions) == 0x000010, "Member 'GBFunctionLibrary_UpdateMissionParametersFromMaplist::PermittedMissions' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_UpdateMissionParametersFromMaplist, ReturnValue) == 0x000020, "Member 'GBFunctionLibrary_UpdateMissionParametersFromMaplist::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.VerticalFOV
// 0x000C (0x000C - 0x0000)
struct GBFunctionLibrary_VerticalFOV final
{
public:
	float                                         HorizontalFOV;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBFunctionLibrary_VerticalFOV) == 0x000004, "Wrong alignment on GBFunctionLibrary_VerticalFOV");
static_assert(sizeof(GBFunctionLibrary_VerticalFOV) == 0x00000C, "Wrong size on GBFunctionLibrary_VerticalFOV");
static_assert(offsetof(GBFunctionLibrary_VerticalFOV, HorizontalFOV) == 0x000000, "Member 'GBFunctionLibrary_VerticalFOV::HorizontalFOV' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_VerticalFOV, AspectRatio) == 0x000004, "Member 'GBFunctionLibrary_VerticalFOV::AspectRatio' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_VerticalFOV, ReturnValue) == 0x000008, "Member 'GBFunctionLibrary_VerticalFOV::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBFunctionLibrary.ViewportPositionDeproject
// 0x0030 (0x0030 - 0x0000)
struct GBFunctionLibrary_ViewportPositionDeproject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldOrigin;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBFunctionLibrary_ViewportPositionDeproject) == 0x000008, "Wrong alignment on GBFunctionLibrary_ViewportPositionDeproject");
static_assert(sizeof(GBFunctionLibrary_ViewportPositionDeproject) == 0x000030, "Wrong size on GBFunctionLibrary_ViewportPositionDeproject");
static_assert(offsetof(GBFunctionLibrary_ViewportPositionDeproject, WorldContextObject) == 0x000000, "Member 'GBFunctionLibrary_ViewportPositionDeproject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ViewportPositionDeproject, ViewportPosition) == 0x000008, "Member 'GBFunctionLibrary_ViewportPositionDeproject::ViewportPosition' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ViewportPositionDeproject, OutWorldOrigin) == 0x000010, "Member 'GBFunctionLibrary_ViewportPositionDeproject::OutWorldOrigin' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ViewportPositionDeproject, OutWorldDirection) == 0x00001C, "Member 'GBFunctionLibrary_ViewportPositionDeproject::OutWorldDirection' has a wrong offset!");
static_assert(offsetof(GBFunctionLibrary_ViewportPositionDeproject, ReturnValue) == 0x000028, "Member 'GBFunctionLibrary_ViewportPositionDeproject::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.AddReplicatedPlayerStat
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_AddReplicatedPlayerStat final
{
public:
	class FString                                 StatString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_AddReplicatedPlayerStat) == 0x000008, "Wrong alignment on GBPlayerState_AddReplicatedPlayerStat");
static_assert(sizeof(GBPlayerState_AddReplicatedPlayerStat) == 0x000010, "Wrong size on GBPlayerState_AddReplicatedPlayerStat");
static_assert(offsetof(GBPlayerState_AddReplicatedPlayerStat, StatString) == 0x000000, "Member 'GBPlayerState_AddReplicatedPlayerStat::StatString' has a wrong offset!");

// Function GroundBranch.GBPlayerState.AwardPlayerScore
// 0x000C (0x000C - 0x0000)
struct GBPlayerState_AwardPlayerScore final
{
public:
	class FName                                   ScoreName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreMultiple;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_AwardPlayerScore) == 0x000004, "Wrong alignment on GBPlayerState_AwardPlayerScore");
static_assert(sizeof(GBPlayerState_AwardPlayerScore) == 0x00000C, "Wrong size on GBPlayerState_AwardPlayerScore");
static_assert(offsetof(GBPlayerState_AwardPlayerScore, ScoreName) == 0x000000, "Member 'GBPlayerState_AwardPlayerScore::ScoreName' has a wrong offset!");
static_assert(offsetof(GBPlayerState_AwardPlayerScore, ScoreMultiple) == 0x000008, "Member 'GBPlayerState_AwardPlayerScore::ScoreMultiple' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ClearStat
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerState_ClearStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatKey;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ClearStat) == 0x000008, "Wrong alignment on GBPlayerState_ClearStat");
static_assert(sizeof(GBPlayerState_ClearStat) == 0x000018, "Wrong size on GBPlayerState_ClearStat");
static_assert(offsetof(GBPlayerState_ClearStat, StatName) == 0x000000, "Member 'GBPlayerState_ClearStat::StatName' has a wrong offset!");
static_assert(offsetof(GBPlayerState_ClearStat, StatKey) == 0x000008, "Member 'GBPlayerState_ClearStat::StatKey' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetReplicatedPlayerStats
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetReplicatedPlayerStats final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetReplicatedPlayerStats) == 0x000008, "Wrong alignment on GBPlayerState_GetReplicatedPlayerStats");
static_assert(sizeof(GBPlayerState_GetReplicatedPlayerStats) == 0x000010, "Wrong size on GBPlayerState_GetReplicatedPlayerStats");
static_assert(offsetof(GBPlayerState_GetReplicatedPlayerStats, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetReplicatedPlayerStats::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetStatKeys
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerState_GetStatKeys final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetStatKeys) == 0x000008, "Wrong alignment on GBPlayerState_GetStatKeys");
static_assert(sizeof(GBPlayerState_GetStatKeys) == 0x000018, "Wrong size on GBPlayerState_GetStatKeys");
static_assert(offsetof(GBPlayerState_GetStatKeys, StatName) == 0x000000, "Member 'GBPlayerState_GetStatKeys::StatName' has a wrong offset!");
static_assert(offsetof(GBPlayerState_GetStatKeys, ReturnValue) == 0x000008, "Member 'GBPlayerState_GetStatKeys::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetStatValue
// 0x0020 (0x0020 - 0x0000)
struct GBPlayerState_GetStatValue final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatKey;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBPlayerState_GetStatValue) == 0x000008, "Wrong alignment on GBPlayerState_GetStatValue");
static_assert(sizeof(GBPlayerState_GetStatValue) == 0x000020, "Wrong size on GBPlayerState_GetStatValue");
static_assert(offsetof(GBPlayerState_GetStatValue, StatName) == 0x000000, "Member 'GBPlayerState_GetStatValue::StatName' has a wrong offset!");
static_assert(offsetof(GBPlayerState_GetStatValue, StatKey) == 0x000008, "Member 'GBPlayerState_GetStatValue::StatKey' has a wrong offset!");
static_assert(offsetof(GBPlayerState_GetStatValue, ReturnValue) == 0x000018, "Member 'GBPlayerState_GetStatValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetTimeSinceLastBadWord
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetTimeSinceLastBadWord final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetTimeSinceLastBadWord) == 0x000004, "Wrong alignment on GBPlayerState_GetTimeSinceLastBadWord");
static_assert(sizeof(GBPlayerState_GetTimeSinceLastBadWord) == 0x000004, "Wrong size on GBPlayerState_GetTimeSinceLastBadWord");
static_assert(offsetof(GBPlayerState_GetTimeSinceLastBadWord, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetTimeSinceLastBadWord::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetTotalStatValue
// 0x000C (0x000C - 0x0000)
struct GBPlayerState_GetTotalStatValue final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetTotalStatValue) == 0x000004, "Wrong alignment on GBPlayerState_GetTotalStatValue");
static_assert(sizeof(GBPlayerState_GetTotalStatValue) == 0x00000C, "Wrong size on GBPlayerState_GetTotalStatValue");
static_assert(offsetof(GBPlayerState_GetTotalStatValue, StatName) == 0x000000, "Member 'GBPlayerState_GetTotalStatValue::StatName' has a wrong offset!");
static_assert(offsetof(GBPlayerState_GetTotalStatValue, ReturnValue) == 0x000008, "Member 'GBPlayerState_GetTotalStatValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IncrementStat
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerState_IncrementStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatKey;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IncrementStat) == 0x000008, "Wrong alignment on GBPlayerState_IncrementStat");
static_assert(sizeof(GBPlayerState_IncrementStat) == 0x000018, "Wrong size on GBPlayerState_IncrementStat");
static_assert(offsetof(GBPlayerState_IncrementStat, StatName) == 0x000000, "Member 'GBPlayerState_IncrementStat::StatName' has a wrong offset!");
static_assert(offsetof(GBPlayerState_IncrementStat, StatKey) == 0x000008, "Member 'GBPlayerState_IncrementStat::StatKey' has a wrong offset!");

// Function GroundBranch.GBPlayerState.OnRepPlayerNameEvent
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_OnRepPlayerNameEvent final
{
public:
	bool                                          bBeenWelcomed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_OnRepPlayerNameEvent) == 0x000001, "Wrong alignment on GBPlayerState_OnRepPlayerNameEvent");
static_assert(sizeof(GBPlayerState_OnRepPlayerNameEvent) == 0x000001, "Wrong size on GBPlayerState_OnRepPlayerNameEvent");
static_assert(offsetof(GBPlayerState_OnRepPlayerNameEvent, bBeenWelcomed) == 0x000000, "Member 'GBPlayerState_OnRepPlayerNameEvent::bBeenWelcomed' has a wrong offset!");

// Function GroundBranch.GBPlayerState.PlayerInteractionChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_PlayerInteractionChangedEvent final
{
public:
	struct FGBPlayerInteraction                   NewPlayerInteraction;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_PlayerInteractionChangedEvent) == 0x000008, "Wrong alignment on GBPlayerState_PlayerInteractionChangedEvent");
static_assert(sizeof(GBPlayerState_PlayerInteractionChangedEvent) == 0x000010, "Wrong size on GBPlayerState_PlayerInteractionChangedEvent");
static_assert(offsetof(GBPlayerState_PlayerInteractionChangedEvent, NewPlayerInteraction) == 0x000000, "Member 'GBPlayerState_PlayerInteractionChangedEvent::NewPlayerInteraction' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ReportClientMissingAsset
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_ReportClientMissingAsset final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ReportClientMissingAsset) == 0x000008, "Wrong alignment on GBPlayerState_ReportClientMissingAsset");
static_assert(sizeof(GBPlayerState_ReportClientMissingAsset) == 0x000010, "Wrong size on GBPlayerState_ReportClientMissingAsset");
static_assert(offsetof(GBPlayerState_ReportClientMissingAsset, AssetName) == 0x000000, "Member 'GBPlayerState_ReportClientMissingAsset::AssetName' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ServerApplyPlayerSettingsGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct GBPlayerState_ServerApplyPlayerSettingsGameplayTags final
{
public:
	struct FGameplayTagContainer                  PlayerSettingTags;                                 // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ServerApplyPlayerSettingsGameplayTags) == 0x000008, "Wrong alignment on GBPlayerState_ServerApplyPlayerSettingsGameplayTags");
static_assert(sizeof(GBPlayerState_ServerApplyPlayerSettingsGameplayTags) == 0x000020, "Wrong size on GBPlayerState_ServerApplyPlayerSettingsGameplayTags");
static_assert(offsetof(GBPlayerState_ServerApplyPlayerSettingsGameplayTags, PlayerSettingTags) == 0x000000, "Member 'GBPlayerState_ServerApplyPlayerSettingsGameplayTags::PlayerSettingTags' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ServerRegisterPlayerWithSession
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_ServerRegisterPlayerWithSession final
{
public:
	TArray<uint8>                                 AuthSessionTicket;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ServerRegisterPlayerWithSession) == 0x000008, "Wrong alignment on GBPlayerState_ServerRegisterPlayerWithSession");
static_assert(sizeof(GBPlayerState_ServerRegisterPlayerWithSession) == 0x000010, "Wrong size on GBPlayerState_ServerRegisterPlayerWithSession");
static_assert(offsetof(GBPlayerState_ServerRegisterPlayerWithSession, AuthSessionTicket) == 0x000000, "Member 'GBPlayerState_ServerRegisterPlayerWithSession::AuthSessionTicket' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ServerReportClientMissingAsset
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_ServerReportClientMissingAsset final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ServerReportClientMissingAsset) == 0x000008, "Wrong alignment on GBPlayerState_ServerReportClientMissingAsset");
static_assert(sizeof(GBPlayerState_ServerReportClientMissingAsset) == 0x000010, "Wrong size on GBPlayerState_ServerReportClientMissingAsset");
static_assert(offsetof(GBPlayerState_ServerReportClientMissingAsset, AssetName) == 0x000000, "Member 'GBPlayerState_ServerReportClientMissingAsset::AssetName' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ServerSetPlayerVolunteered
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_ServerSetPlayerVolunteered final
{
public:
	bool                                          bNewPlayerVolunteered;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ServerSetPlayerVolunteered) == 0x000001, "Wrong alignment on GBPlayerState_ServerSetPlayerVolunteered");
static_assert(sizeof(GBPlayerState_ServerSetPlayerVolunteered) == 0x000001, "Wrong size on GBPlayerState_ServerSetPlayerVolunteered");
static_assert(offsetof(GBPlayerState_ServerSetPlayerVolunteered, bNewPlayerVolunteered) == 0x000000, "Member 'GBPlayerState_ServerSetPlayerVolunteered::bNewPlayerVolunteered' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetAlertLevel
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetAlertLevel final
{
public:
	EAlertLevel                                   NewAlertLevel;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetAlertLevel) == 0x000001, "Wrong alignment on GBPlayerState_SetAlertLevel");
static_assert(sizeof(GBPlayerState_SetAlertLevel) == 0x000001, "Wrong size on GBPlayerState_SetAlertLevel");
static_assert(offsetof(GBPlayerState_SetAlertLevel, NewAlertLevel) == 0x000000, "Member 'GBPlayerState_SetAlertLevel::NewAlertLevel' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetAllowedToRestart
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetAllowedToRestart final
{
public:
	bool                                          bNewAllowedToRestart;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetAllowedToRestart) == 0x000001, "Wrong alignment on GBPlayerState_SetAllowedToRestart");
static_assert(sizeof(GBPlayerState_SetAllowedToRestart) == 0x000001, "Wrong size on GBPlayerState_SetAllowedToRestart");
static_assert(offsetof(GBPlayerState_SetAllowedToRestart, bNewAllowedToRestart) == 0x000000, "Member 'GBPlayerState_SetAllowedToRestart::bNewAllowedToRestart' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetCallSign
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_SetCallSign final
{
public:
	class FString                                 NewCallSign;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetCallSign) == 0x000008, "Wrong alignment on GBPlayerState_SetCallSign");
static_assert(sizeof(GBPlayerState_SetCallSign) == 0x000010, "Wrong size on GBPlayerState_SetCallSign");
static_assert(offsetof(GBPlayerState_SetCallSign, NewCallSign) == 0x000000, "Member 'GBPlayerState_SetCallSign::NewCallSign' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetInsertionPoint
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerState_SetInsertionPoint final
{
public:
	class AGBInsertionPoint*                      NewInsertionPoint;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetInsertionPoint) == 0x000008, "Wrong alignment on GBPlayerState_SetInsertionPoint");
static_assert(sizeof(GBPlayerState_SetInsertionPoint) == 0x000008, "Wrong size on GBPlayerState_SetInsertionPoint");
static_assert(offsetof(GBPlayerState_SetInsertionPoint, NewInsertionPoint) == 0x000000, "Member 'GBPlayerState_SetInsertionPoint::NewInsertionPoint' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetLives
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetLives final
{
public:
	uint8                                         NewLives;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetLives) == 0x000001, "Wrong alignment on GBPlayerState_SetLives");
static_assert(sizeof(GBPlayerState_SetLives) == 0x000001, "Wrong size on GBPlayerState_SetLives");
static_assert(offsetof(GBPlayerState_SetLives, NewLives) == 0x000000, "Member 'GBPlayerState_SetLives::NewLives' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetOnDuty
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetOnDuty final
{
public:
	bool                                          bNewOnDuty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetOnDuty) == 0x000001, "Wrong alignment on GBPlayerState_SetOnDuty");
static_assert(sizeof(GBPlayerState_SetOnDuty) == 0x000001, "Wrong size on GBPlayerState_SetOnDuty");
static_assert(offsetof(GBPlayerState_SetOnDuty, bNewOnDuty) == 0x000000, "Member 'GBPlayerState_SetOnDuty::bNewOnDuty' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetPlayerInteraction
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_SetPlayerInteraction final
{
public:
	EGBPlayerInteractionStatus                    NewPlayerInteractionStatus;                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerState*                         OtherPlayerState;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetPlayerInteraction) == 0x000008, "Wrong alignment on GBPlayerState_SetPlayerInteraction");
static_assert(sizeof(GBPlayerState_SetPlayerInteraction) == 0x000010, "Wrong size on GBPlayerState_SetPlayerInteraction");
static_assert(offsetof(GBPlayerState_SetPlayerInteraction, NewPlayerInteractionStatus) == 0x000000, "Member 'GBPlayerState_SetPlayerInteraction::NewPlayerInteractionStatus' has a wrong offset!");
static_assert(offsetof(GBPlayerState_SetPlayerInteraction, OtherPlayerState) == 0x000008, "Member 'GBPlayerState_SetPlayerInteraction::OtherPlayerState' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetPlayerVolunteered
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetPlayerVolunteered final
{
public:
	bool                                          bNewPlayerVolunteered;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetPlayerVolunteered) == 0x000001, "Wrong alignment on GBPlayerState_SetPlayerVolunteered");
static_assert(sizeof(GBPlayerState_SetPlayerVolunteered) == 0x000001, "Wrong size on GBPlayerState_SetPlayerVolunteered");
static_assert(offsetof(GBPlayerState_SetPlayerVolunteered, bNewPlayerVolunteered) == 0x000000, "Member 'GBPlayerState_SetPlayerVolunteered::bNewPlayerVolunteered' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetReadyRoomStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetReadyRoomStatus final
{
public:
	EReadyRoomStatus                              NewStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetReadyRoomStatus) == 0x000001, "Wrong alignment on GBPlayerState_SetReadyRoomStatus");
static_assert(sizeof(GBPlayerState_SetReadyRoomStatus) == 0x000001, "Wrong size on GBPlayerState_SetReadyRoomStatus");
static_assert(offsetof(GBPlayerState_SetReadyRoomStatus, NewStatus) == 0x000000, "Member 'GBPlayerState_SetReadyRoomStatus::NewStatus' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetReadyStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetReadyStatus final
{
public:
	EReadyStatus                                  NewStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetReadyStatus) == 0x000001, "Wrong alignment on GBPlayerState_SetReadyStatus");
static_assert(sizeof(GBPlayerState_SetReadyStatus) == 0x000001, "Wrong size on GBPlayerState_SetReadyStatus");
static_assert(offsetof(GBPlayerState_SetReadyStatus, NewStatus) == 0x000000, "Member 'GBPlayerState_SetReadyStatus::NewStatus' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetServerConnectString
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_SetServerConnectString final
{
public:
	class FString                                 NewServerConnectString;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetServerConnectString) == 0x000008, "Wrong alignment on GBPlayerState_SetServerConnectString");
static_assert(sizeof(GBPlayerState_SetServerConnectString) == 0x000010, "Wrong size on GBPlayerState_SetServerConnectString");
static_assert(offsetof(GBPlayerState_SetServerConnectString, NewServerConnectString) == 0x000000, "Member 'GBPlayerState_SetServerConnectString::NewServerConnectString' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetTeamElement
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetTeamElement final
{
public:
	ETeamElement                                  NewTeamElement;                                    // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetTeamElement) == 0x000001, "Wrong alignment on GBPlayerState_SetTeamElement");
static_assert(sizeof(GBPlayerState_SetTeamElement) == 0x000001, "Wrong size on GBPlayerState_SetTeamElement");
static_assert(offsetof(GBPlayerState_SetTeamElement, NewTeamElement) == 0x000000, "Member 'GBPlayerState_SetTeamElement::NewTeamElement' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetTeamElementNumber
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_SetTeamElementNumber final
{
public:
	int32                                         NewTeamElementNumber;                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetTeamElementNumber) == 0x000004, "Wrong alignment on GBPlayerState_SetTeamElementNumber");
static_assert(sizeof(GBPlayerState_SetTeamElementNumber) == 0x000004, "Wrong size on GBPlayerState_SetTeamElementNumber");
static_assert(offsetof(GBPlayerState_SetTeamElementNumber, NewTeamElementNumber) == 0x000000, "Member 'GBPlayerState_SetTeamElementNumber::NewTeamElementNumber' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetUseElementCallSign
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetUseElementCallSign final
{
public:
	bool                                          bNewUseElementCallSign;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetUseElementCallSign) == 0x000001, "Wrong alignment on GBPlayerState_SetUseElementCallSign");
static_assert(sizeof(GBPlayerState_SetUseElementCallSign) == 0x000001, "Wrong size on GBPlayerState_SetUseElementCallSign");
static_assert(offsetof(GBPlayerState_SetUseElementCallSign, bNewUseElementCallSign) == 0x000000, "Member 'GBPlayerState_SetUseElementCallSign::bNewUseElementCallSign' has a wrong offset!");

// Function GroundBranch.GBPlayerState.SetWasInPlay
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_SetWasInPlay final
{
public:
	bool                                          bNewWasInPlay;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_SetWasInPlay) == 0x000001, "Wrong alignment on GBPlayerState_SetWasInPlay");
static_assert(sizeof(GBPlayerState_SetWasInPlay) == 0x000001, "Wrong size on GBPlayerState_SetWasInPlay");
static_assert(offsetof(GBPlayerState_SetWasInPlay, bNewWasInPlay) == 0x000000, "Member 'GBPlayerState_SetWasInPlay::bNewWasInPlay' has a wrong offset!");

// Function GroundBranch.GBPlayerState.AllowedToChangeKit
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_AllowedToChangeKit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_AllowedToChangeKit) == 0x000001, "Wrong alignment on GBPlayerState_AllowedToChangeKit");
static_assert(sizeof(GBPlayerState_AllowedToChangeKit) == 0x000001, "Wrong size on GBPlayerState_AllowedToChangeKit");
static_assert(offsetof(GBPlayerState_AllowedToChangeKit, ReturnValue) == 0x000000, "Member 'GBPlayerState_AllowedToChangeKit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.AllowedToRestart
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_AllowedToRestart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_AllowedToRestart) == 0x000001, "Wrong alignment on GBPlayerState_AllowedToRestart");
static_assert(sizeof(GBPlayerState_AllowedToRestart) == 0x000001, "Wrong size on GBPlayerState_AllowedToRestart");
static_assert(offsetof(GBPlayerState_AllowedToRestart, ReturnValue) == 0x000000, "Member 'GBPlayerState_AllowedToRestart::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.ArePlayerScoresInitialised
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_ArePlayerScoresInitialised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_ArePlayerScoresInitialised) == 0x000001, "Wrong alignment on GBPlayerState_ArePlayerScoresInitialised");
static_assert(sizeof(GBPlayerState_ArePlayerScoresInitialised) == 0x000001, "Wrong size on GBPlayerState_ArePlayerScoresInitialised");
static_assert(offsetof(GBPlayerState_ArePlayerScoresInitialised, ReturnValue) == 0x000000, "Member 'GBPlayerState_ArePlayerScoresInitialised::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetAlertLevel
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetAlertLevel final
{
public:
	EAlertLevel                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetAlertLevel) == 0x000001, "Wrong alignment on GBPlayerState_GetAlertLevel");
static_assert(sizeof(GBPlayerState_GetAlertLevel) == 0x000001, "Wrong size on GBPlayerState_GetAlertLevel");
static_assert(offsetof(GBPlayerState_GetAlertLevel, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetAlertLevel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetBadWordCount
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetBadWordCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetBadWordCount) == 0x000004, "Wrong alignment on GBPlayerState_GetBadWordCount");
static_assert(sizeof(GBPlayerState_GetBadWordCount) == 0x000004, "Wrong size on GBPlayerState_GetBadWordCount");
static_assert(offsetof(GBPlayerState_GetBadWordCount, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetBadWordCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetCallSign
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetCallSign final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetCallSign) == 0x000008, "Wrong alignment on GBPlayerState_GetCallSign");
static_assert(sizeof(GBPlayerState_GetCallSign) == 0x000010, "Wrong size on GBPlayerState_GetCallSign");
static_assert(offsetof(GBPlayerState_GetCallSign, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerState_GetCharacter final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetCharacter) == 0x000008, "Wrong alignment on GBPlayerState_GetCharacter");
static_assert(sizeof(GBPlayerState_GetCharacter) == 0x000008, "Wrong size on GBPlayerState_GetCharacter");
static_assert(offsetof(GBPlayerState_GetCharacter, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetInsertionPoint
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerState_GetInsertionPoint final
{
public:
	class AGBInsertionPoint*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetInsertionPoint) == 0x000008, "Wrong alignment on GBPlayerState_GetInsertionPoint");
static_assert(sizeof(GBPlayerState_GetInsertionPoint) == 0x000008, "Wrong size on GBPlayerState_GetInsertionPoint");
static_assert(offsetof(GBPlayerState_GetInsertionPoint, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetInsertionPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerState_GetInteractingPlayer final
{
public:
	class AGBPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetInteractingPlayer) == 0x000008, "Wrong alignment on GBPlayerState_GetInteractingPlayer");
static_assert(sizeof(GBPlayerState_GetInteractingPlayer) == 0x000008, "Wrong size on GBPlayerState_GetInteractingPlayer");
static_assert(offsetof(GBPlayerState_GetInteractingPlayer, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetInteractingPlayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetLastBadWordSeconds
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetLastBadWordSeconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetLastBadWordSeconds) == 0x000004, "Wrong alignment on GBPlayerState_GetLastBadWordSeconds");
static_assert(sizeof(GBPlayerState_GetLastBadWordSeconds) == 0x000004, "Wrong size on GBPlayerState_GetLastBadWordSeconds");
static_assert(offsetof(GBPlayerState_GetLastBadWordSeconds, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetLastBadWordSeconds::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetLives
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetLives final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetLives) == 0x000001, "Wrong alignment on GBPlayerState_GetLives");
static_assert(sizeof(GBPlayerState_GetLives) == 0x000001, "Wrong size on GBPlayerState_GetLives");
static_assert(offsetof(GBPlayerState_GetLives, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetLives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetNextMapVoteIndex
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetNextMapVoteIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetNextMapVoteIndex) == 0x000004, "Wrong alignment on GBPlayerState_GetNextMapVoteIndex");
static_assert(sizeof(GBPlayerState_GetNextMapVoteIndex) == 0x000004, "Wrong size on GBPlayerState_GetNextMapVoteIndex");
static_assert(offsetof(GBPlayerState_GetNextMapVoteIndex, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetNextMapVoteIndex::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetNoReceiveTeamVOIP
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetNoReceiveTeamVOIP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetNoReceiveTeamVOIP) == 0x000001, "Wrong alignment on GBPlayerState_GetNoReceiveTeamVOIP");
static_assert(sizeof(GBPlayerState_GetNoReceiveTeamVOIP) == 0x000001, "Wrong size on GBPlayerState_GetNoReceiveTeamVOIP");
static_assert(offsetof(GBPlayerState_GetNoReceiveTeamVOIP, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetNoReceiveTeamVOIP::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetOldName
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetOldName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetOldName) == 0x000008, "Wrong alignment on GBPlayerState_GetOldName");
static_assert(sizeof(GBPlayerState_GetOldName) == 0x000010, "Wrong size on GBPlayerState_GetOldName");
static_assert(offsetof(GBPlayerState_GetOldName, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetOldName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetOnDuty
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetOnDuty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetOnDuty) == 0x000001, "Wrong alignment on GBPlayerState_GetOnDuty");
static_assert(sizeof(GBPlayerState_GetOnDuty) == 0x000001, "Wrong size on GBPlayerState_GetOnDuty");
static_assert(offsetof(GBPlayerState_GetOnDuty, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetOnDuty::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetPingInMillisecondsGetPing
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetPingInMillisecondsGetPing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetPingInMillisecondsGetPing) == 0x000004, "Wrong alignment on GBPlayerState_GetPingInMillisecondsGetPing");
static_assert(sizeof(GBPlayerState_GetPingInMillisecondsGetPing) == 0x000004, "Wrong size on GBPlayerState_GetPingInMillisecondsGetPing");
static_assert(offsetof(GBPlayerState_GetPingInMillisecondsGetPing, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetPingInMillisecondsGetPing::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetPlayerInteraction
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetPlayerInteraction final
{
public:
	struct FGBPlayerInteraction                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetPlayerInteraction) == 0x000008, "Wrong alignment on GBPlayerState_GetPlayerInteraction");
static_assert(sizeof(GBPlayerState_GetPlayerInteraction) == 0x000010, "Wrong size on GBPlayerState_GetPlayerInteraction");
static_assert(offsetof(GBPlayerState_GetPlayerInteraction, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetPlayerInteraction::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetPlayerLocation
// 0x000C (0x000C - 0x0000)
struct GBPlayerState_GetPlayerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetPlayerLocation) == 0x000004, "Wrong alignment on GBPlayerState_GetPlayerLocation");
static_assert(sizeof(GBPlayerState_GetPlayerLocation) == 0x00000C, "Wrong size on GBPlayerState_GetPlayerLocation");
static_assert(offsetof(GBPlayerState_GetPlayerLocation, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetPlayerLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetPlayerRotation
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetPlayerRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetPlayerRotation) == 0x000004, "Wrong alignment on GBPlayerState_GetPlayerRotation");
static_assert(sizeof(GBPlayerState_GetPlayerRotation) == 0x000004, "Wrong size on GBPlayerState_GetPlayerRotation");
static_assert(offsetof(GBPlayerState_GetPlayerRotation, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetPlayerRotation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetPlayerScores
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetPlayerScores final
{
public:
	TArray<struct FGBScoreLine>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetPlayerScores) == 0x000008, "Wrong alignment on GBPlayerState_GetPlayerScores");
static_assert(sizeof(GBPlayerState_GetPlayerScores) == 0x000010, "Wrong size on GBPlayerState_GetPlayerScores");
static_assert(offsetof(GBPlayerState_GetPlayerScores, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetPlayerScores::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetPlayerVolunteered
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetPlayerVolunteered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetPlayerVolunteered) == 0x000001, "Wrong alignment on GBPlayerState_GetPlayerVolunteered");
static_assert(sizeof(GBPlayerState_GetPlayerVolunteered) == 0x000001, "Wrong size on GBPlayerState_GetPlayerVolunteered");
static_assert(offsetof(GBPlayerState_GetPlayerVolunteered, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetPlayerVolunteered::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetQuickAdminCommands
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetQuickAdminCommands final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetQuickAdminCommands) == 0x000008, "Wrong alignment on GBPlayerState_GetQuickAdminCommands");
static_assert(sizeof(GBPlayerState_GetQuickAdminCommands) == 0x000010, "Wrong size on GBPlayerState_GetQuickAdminCommands");
static_assert(offsetof(GBPlayerState_GetQuickAdminCommands, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetQuickAdminCommands::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetReadyRoomStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetReadyRoomStatus final
{
public:
	EReadyRoomStatus                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetReadyRoomStatus) == 0x000001, "Wrong alignment on GBPlayerState_GetReadyRoomStatus");
static_assert(sizeof(GBPlayerState_GetReadyRoomStatus) == 0x000001, "Wrong size on GBPlayerState_GetReadyRoomStatus");
static_assert(offsetof(GBPlayerState_GetReadyRoomStatus, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetReadyRoomStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetReadyStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetReadyStatus final
{
public:
	EReadyStatus                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetReadyStatus) == 0x000001, "Wrong alignment on GBPlayerState_GetReadyStatus");
static_assert(sizeof(GBPlayerState_GetReadyStatus) == 0x000001, "Wrong size on GBPlayerState_GetReadyStatus");
static_assert(offsetof(GBPlayerState_GetReadyStatus, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetReadyStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetServerConnectString
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetServerConnectString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetServerConnectString) == 0x000008, "Wrong alignment on GBPlayerState_GetServerConnectString");
static_assert(sizeof(GBPlayerState_GetServerConnectString) == 0x000010, "Wrong size on GBPlayerState_GetServerConnectString");
static_assert(offsetof(GBPlayerState_GetServerConnectString, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetServerConnectString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetTeamElement
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetTeamElement final
{
public:
	ETeamElement                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetTeamElement) == 0x000001, "Wrong alignment on GBPlayerState_GetTeamElement");
static_assert(sizeof(GBPlayerState_GetTeamElement) == 0x000001, "Wrong size on GBPlayerState_GetTeamElement");
static_assert(offsetof(GBPlayerState_GetTeamElement, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetTeamElement::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetTeamElementLetter
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerState_GetTeamElementLetter final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetTeamElementLetter) == 0x000008, "Wrong alignment on GBPlayerState_GetTeamElementLetter");
static_assert(sizeof(GBPlayerState_GetTeamElementLetter) == 0x000010, "Wrong size on GBPlayerState_GetTeamElementLetter");
static_assert(offsetof(GBPlayerState_GetTeamElementLetter, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetTeamElementLetter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetTeamElementNumber
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerState_GetTeamElementNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetTeamElementNumber) == 0x000004, "Wrong alignment on GBPlayerState_GetTeamElementNumber");
static_assert(sizeof(GBPlayerState_GetTeamElementNumber) == 0x000004, "Wrong size on GBPlayerState_GetTeamElementNumber");
static_assert(offsetof(GBPlayerState_GetTeamElementNumber, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetTeamElementNumber::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.GetUseElementCallSign
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_GetUseElementCallSign final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_GetUseElementCallSign) == 0x000001, "Wrong alignment on GBPlayerState_GetUseElementCallSign");
static_assert(sizeof(GBPlayerState_GetUseElementCallSign) == 0x000001, "Wrong size on GBPlayerState_GetUseElementCallSign");
static_assert(offsetof(GBPlayerState_GetUseElementCallSign, ReturnValue) == 0x000000, "Member 'GBPlayerState_GetUseElementCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IsBenchmarking
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_IsBenchmarking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IsBenchmarking) == 0x000001, "Wrong alignment on GBPlayerState_IsBenchmarking");
static_assert(sizeof(GBPlayerState_IsBenchmarking) == 0x000001, "Wrong size on GBPlayerState_IsBenchmarking");
static_assert(offsetof(GBPlayerState_IsBenchmarking, ReturnValue) == 0x000000, "Member 'GBPlayerState_IsBenchmarking::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IsLocal
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_IsLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IsLocal) == 0x000001, "Wrong alignment on GBPlayerState_IsLocal");
static_assert(sizeof(GBPlayerState_IsLocal) == 0x000001, "Wrong size on GBPlayerState_IsLocal");
static_assert(offsetof(GBPlayerState_IsLocal, ReturnValue) == 0x000000, "Member 'GBPlayerState_IsLocal::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IsOnlyASpectatorBP
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_IsOnlyASpectatorBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IsOnlyASpectatorBP) == 0x000001, "Wrong alignment on GBPlayerState_IsOnlyASpectatorBP");
static_assert(sizeof(GBPlayerState_IsOnlyASpectatorBP) == 0x000001, "Wrong size on GBPlayerState_IsOnlyASpectatorBP");
static_assert(offsetof(GBPlayerState_IsOnlyASpectatorBP, ReturnValue) == 0x000000, "Member 'GBPlayerState_IsOnlyASpectatorBP::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IsPlayerControlledByOther
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_IsPlayerControlledByOther final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IsPlayerControlledByOther) == 0x000001, "Wrong alignment on GBPlayerState_IsPlayerControlledByOther");
static_assert(sizeof(GBPlayerState_IsPlayerControlledByOther) == 0x000001, "Wrong size on GBPlayerState_IsPlayerControlledByOther");
static_assert(offsetof(GBPlayerState_IsPlayerControlledByOther, ReturnValue) == 0x000000, "Member 'GBPlayerState_IsPlayerControlledByOther::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IsPlayerControllingOther
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_IsPlayerControllingOther final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IsPlayerControllingOther) == 0x000001, "Wrong alignment on GBPlayerState_IsPlayerControllingOther");
static_assert(sizeof(GBPlayerState_IsPlayerControllingOther) == 0x000001, "Wrong size on GBPlayerState_IsPlayerControllingOther");
static_assert(offsetof(GBPlayerState_IsPlayerControllingOther, ReturnValue) == 0x000000, "Member 'GBPlayerState_IsPlayerControllingOther::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.IsPlayerRestrained
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_IsPlayerRestrained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_IsPlayerRestrained) == 0x000001, "Wrong alignment on GBPlayerState_IsPlayerRestrained");
static_assert(sizeof(GBPlayerState_IsPlayerRestrained) == 0x000001, "Wrong size on GBPlayerState_IsPlayerRestrained");
static_assert(offsetof(GBPlayerState_IsPlayerRestrained, ReturnValue) == 0x000000, "Member 'GBPlayerState_IsPlayerRestrained::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerState.WasInPlay
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerState_WasInPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerState_WasInPlay) == 0x000001, "Wrong alignment on GBPlayerState_WasInPlay");
static_assert(sizeof(GBPlayerState_WasInPlay) == 0x000001, "Wrong size on GBPlayerState_WasInPlay");
static_assert(offsetof(GBPlayerState_WasInPlay, ReturnValue) == 0x000000, "Member 'GBPlayerState_WasInPlay::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameInstance.GetOptionValuesForMutator
// 0x0090 (0x0090 - 0x0000)
struct GBGameInstance_GetOptionValuesForMutator final
{
public:
	struct FLuaScriptInfo                         ScriptInfo;                                        // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FLuaScriptOption>               ReturnValue;                                       // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_GetOptionValuesForMutator) == 0x000008, "Wrong alignment on GBGameInstance_GetOptionValuesForMutator");
static_assert(sizeof(GBGameInstance_GetOptionValuesForMutator) == 0x000090, "Wrong size on GBGameInstance_GetOptionValuesForMutator");
static_assert(offsetof(GBGameInstance_GetOptionValuesForMutator, ScriptInfo) == 0x000000, "Member 'GBGameInstance_GetOptionValuesForMutator::ScriptInfo' has a wrong offset!");
static_assert(offsetof(GBGameInstance_GetOptionValuesForMutator, ReturnValue) == 0x000080, "Member 'GBGameInstance_GetOptionValuesForMutator::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameInstance.LoadMutatorsForMod
// 0x0008 (0x0008 - 0x0000)
struct GBGameInstance_LoadMutatorsForMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_LoadMutatorsForMod) == 0x000008, "Wrong alignment on GBGameInstance_LoadMutatorsForMod");
static_assert(sizeof(GBGameInstance_LoadMutatorsForMod) == 0x000008, "Wrong size on GBGameInstance_LoadMutatorsForMod");
static_assert(offsetof(GBGameInstance_LoadMutatorsForMod, ModID) == 0x000000, "Member 'GBGameInstance_LoadMutatorsForMod::ModID' has a wrong offset!");

// Function GroundBranch.GBGameInstance.OnModSyncComplete
// 0x0001 (0x0001 - 0x0000)
struct GBGameInstance_OnModSyncComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_OnModSyncComplete) == 0x000001, "Wrong alignment on GBGameInstance_OnModSyncComplete");
static_assert(sizeof(GBGameInstance_OnModSyncComplete) == 0x000001, "Wrong size on GBGameInstance_OnModSyncComplete");
static_assert(offsetof(GBGameInstance_OnModSyncComplete, bWasSuccessful) == 0x000000, "Member 'GBGameInstance_OnModSyncComplete::bWasSuccessful' has a wrong offset!");

// Function GroundBranch.GBGameInstance.SetNewMasterServerModList
// 0x0010 (0x0010 - 0x0000)
struct GBGameInstance_SetNewMasterServerModList final
{
public:
	TArray<struct FGBModBasicInfo>                NewMasterServerModList;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_SetNewMasterServerModList) == 0x000008, "Wrong alignment on GBGameInstance_SetNewMasterServerModList");
static_assert(sizeof(GBGameInstance_SetNewMasterServerModList) == 0x000010, "Wrong size on GBGameInstance_SetNewMasterServerModList");
static_assert(offsetof(GBGameInstance_SetNewMasterServerModList, NewMasterServerModList) == 0x000000, "Member 'GBGameInstance_SetNewMasterServerModList::NewMasterServerModList' has a wrong offset!");

// Function GroundBranch.GBGameInstance.UnloadMutatorsForMod
// 0x0008 (0x0008 - 0x0000)
struct GBGameInstance_UnloadMutatorsForMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_UnloadMutatorsForMod) == 0x000008, "Wrong alignment on GBGameInstance_UnloadMutatorsForMod");
static_assert(sizeof(GBGameInstance_UnloadMutatorsForMod) == 0x000008, "Wrong size on GBGameInstance_UnloadMutatorsForMod");
static_assert(offsetof(GBGameInstance_UnloadMutatorsForMod, ModID) == 0x000000, "Member 'GBGameInstance_UnloadMutatorsForMod::ModID' has a wrong offset!");

// Function GroundBranch.GBGameInstance.GetLastMapLoadTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameInstance_GetLastMapLoadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_GetLastMapLoadTime) == 0x000004, "Wrong alignment on GBGameInstance_GetLastMapLoadTime");
static_assert(sizeof(GBGameInstance_GetLastMapLoadTime) == 0x000004, "Wrong size on GBGameInstance_GetLastMapLoadTime");
static_assert(offsetof(GBGameInstance_GetLastMapLoadTime, ReturnValue) == 0x000000, "Member 'GBGameInstance_GetLastMapLoadTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameInstance.GetMasterServerModList
// 0x0010 (0x0010 - 0x0000)
struct GBGameInstance_GetMasterServerModList final
{
public:
	TArray<struct FGBModBasicInfo>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_GetMasterServerModList) == 0x000008, "Wrong alignment on GBGameInstance_GetMasterServerModList");
static_assert(sizeof(GBGameInstance_GetMasterServerModList) == 0x000010, "Wrong size on GBGameInstance_GetMasterServerModList");
static_assert(offsetof(GBGameInstance_GetMasterServerModList, ReturnValue) == 0x000000, "Member 'GBGameInstance_GetMasterServerModList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameInstance.GetServerDownloadModsComplete
// 0x0001 (0x0001 - 0x0000)
struct GBGameInstance_GetServerDownloadModsComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_GetServerDownloadModsComplete) == 0x000001, "Wrong alignment on GBGameInstance_GetServerDownloadModsComplete");
static_assert(sizeof(GBGameInstance_GetServerDownloadModsComplete) == 0x000001, "Wrong size on GBGameInstance_GetServerDownloadModsComplete");
static_assert(offsetof(GBGameInstance_GetServerDownloadModsComplete, ReturnValue) == 0x000000, "Member 'GBGameInstance_GetServerDownloadModsComplete::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameInstance.GetStillDownloadingModsForListenServerClient
// 0x0001 (0x0001 - 0x0000)
struct GBGameInstance_GetStillDownloadingModsForListenServerClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameInstance_GetStillDownloadingModsForListenServerClient) == 0x000001, "Wrong alignment on GBGameInstance_GetStillDownloadingModsForListenServerClient");
static_assert(sizeof(GBGameInstance_GetStillDownloadingModsForListenServerClient) == 0x000001, "Wrong size on GBGameInstance_GetStillDownloadingModsForListenServerClient");
static_assert(offsetof(GBGameInstance_GetStillDownloadingModsForListenServerClient, ReturnValue) == 0x000000, "Member 'GBGameInstance_GetStillDownloadingModsForListenServerClient::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.AbortRoundStage
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_AbortRoundStage final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_AbortRoundStage) == 0x000004, "Wrong alignment on GBGameMode_AbortRoundStage");
static_assert(sizeof(GBGameMode_AbortRoundStage) == 0x000008, "Wrong size on GBGameMode_AbortRoundStage");
static_assert(offsetof(GBGameMode_AbortRoundStage, Reason) == 0x000000, "Member 'GBGameMode_AbortRoundStage::Reason' has a wrong offset!");

// Function GroundBranch.GBGameMode.AddBots
// 0x0002 (0x0002 - 0x0000)
struct GBGameMode_AddBots final
{
public:
	uint8                                         Count;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_AddBots) == 0x000001, "Wrong alignment on GBGameMode_AddBots");
static_assert(sizeof(GBGameMode_AddBots) == 0x000002, "Wrong size on GBGameMode_AddBots");
static_assert(offsetof(GBGameMode_AddBots, Count) == 0x000000, "Member 'GBGameMode_AddBots::Count' has a wrong offset!");
static_assert(offsetof(GBGameMode_AddBots, TeamId) == 0x000001, "Member 'GBGameMode_AddBots::TeamId' has a wrong offset!");

// Function GroundBranch.GBGameMode.AddDefaultLoadout
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_AddDefaultLoadout final
{
public:
	class FName                                   LoadoutName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_AddDefaultLoadout) == 0x000004, "Wrong alignment on GBGameMode_AddDefaultLoadout");
static_assert(sizeof(GBGameMode_AddDefaultLoadout) == 0x000008, "Wrong size on GBGameMode_AddDefaultLoadout");
static_assert(offsetof(GBGameMode_AddDefaultLoadout, LoadoutName) == 0x000000, "Member 'GBGameMode_AddDefaultLoadout::LoadoutName' has a wrong offset!");

// Function GroundBranch.GBGameMode.AdjudicateWhetherMatchFinished
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_AdjudicateWhetherMatchFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_AdjudicateWhetherMatchFinished) == 0x000001, "Wrong alignment on GBGameMode_AdjudicateWhetherMatchFinished");
static_assert(sizeof(GBGameMode_AdjudicateWhetherMatchFinished) == 0x000001, "Wrong size on GBGameMode_AdjudicateWhetherMatchFinished");
static_assert(offsetof(GBGameMode_AdjudicateWhetherMatchFinished, ReturnValue) == 0x000000, "Member 'GBGameMode_AdjudicateWhetherMatchFinished::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.AFKDetected
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_AFKDetected final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_AFKDetected) == 0x000008, "Wrong alignment on GBGameMode_AFKDetected");
static_assert(sizeof(GBGameMode_AFKDetected) == 0x000008, "Wrong size on GBGameMode_AFKDetected");
static_assert(offsetof(GBGameMode_AFKDetected, PlayerController) == 0x000000, "Member 'GBGameMode_AFKDetected::PlayerController' has a wrong offset!");

// Function GroundBranch.GBGameMode.ApplyPlayerLoadout
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_ApplyPlayerLoadout final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_ApplyPlayerLoadout) == 0x000008, "Wrong alignment on GBGameMode_ApplyPlayerLoadout");
static_assert(sizeof(GBGameMode_ApplyPlayerLoadout) == 0x000008, "Wrong size on GBGameMode_ApplyPlayerLoadout");
static_assert(offsetof(GBGameMode_ApplyPlayerLoadout, Controller) == 0x000000, "Member 'GBGameMode_ApplyPlayerLoadout::Controller' has a wrong offset!");

// Function GroundBranch.GBGameMode.BecomeSpectator
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_BecomeSpectator final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_BecomeSpectator) == 0x000008, "Wrong alignment on GBGameMode_BecomeSpectator");
static_assert(sizeof(GBGameMode_BecomeSpectator) == 0x000008, "Wrong size on GBGameMode_BecomeSpectator");
static_assert(offsetof(GBGameMode_BecomeSpectator, GBPlayerState) == 0x000000, "Member 'GBGameMode_BecomeSpectator::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBGameMode.Broadcast
// 0x0028 (0x0028 - 0x0000)
struct GBGameMode_Broadcast final
{
public:
	class AGBPlayerState*                         SenderPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageType;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_Broadcast) == 0x000008, "Wrong alignment on GBGameMode_Broadcast");
static_assert(sizeof(GBGameMode_Broadcast) == 0x000028, "Wrong size on GBGameMode_Broadcast");
static_assert(offsetof(GBGameMode_Broadcast, SenderPlayerState) == 0x000000, "Member 'GBGameMode_Broadcast::SenderPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_Broadcast, Message) == 0x000008, "Member 'GBGameMode_Broadcast::Message' has a wrong offset!");
static_assert(offsetof(GBGameMode_Broadcast, MessageType) == 0x000018, "Member 'GBGameMode_Broadcast::MessageType' has a wrong offset!");
static_assert(offsetof(GBGameMode_Broadcast, ModID) == 0x000020, "Member 'GBGameMode_Broadcast::ModID' has a wrong offset!");

// Function GroundBranch.GBGameMode.BroadcastGameMessage
// 0x0020 (0x0020 - 0x0000)
struct GBGameMode_BroadcastGameMessage final
{
public:
	class FName                                   GameMessageId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_BroadcastGameMessage) == 0x000008, "Wrong alignment on GBGameMode_BroadcastGameMessage");
static_assert(sizeof(GBGameMode_BroadcastGameMessage) == 0x000020, "Wrong size on GBGameMode_BroadcastGameMessage");
static_assert(offsetof(GBGameMode_BroadcastGameMessage, GameMessageId) == 0x000000, "Member 'GBGameMode_BroadcastGameMessage::GameMessageId' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastGameMessage, Type) == 0x000008, "Member 'GBGameMode_BroadcastGameMessage::Type' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastGameMessage, Duration) == 0x000010, "Member 'GBGameMode_BroadcastGameMessage::Duration' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastGameMessage, ModID) == 0x000018, "Member 'GBGameMode_BroadcastGameMessage::ModID' has a wrong offset!");

// Function GroundBranch.GBGameMode.BroadcastLocalized
// 0x0030 (0x0030 - 0x0000)
struct GBGameMode_BroadcastLocalized final
{
public:
	class AActor*                                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>              Message;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SWITCH;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_BroadcastLocalized) == 0x000008, "Wrong alignment on GBGameMode_BroadcastLocalized");
static_assert(sizeof(GBGameMode_BroadcastLocalized) == 0x000030, "Wrong size on GBGameMode_BroadcastLocalized");
static_assert(offsetof(GBGameMode_BroadcastLocalized, Sender) == 0x000000, "Member 'GBGameMode_BroadcastLocalized::Sender' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastLocalized, Message) == 0x000008, "Member 'GBGameMode_BroadcastLocalized::Message' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastLocalized, SWITCH) == 0x000010, "Member 'GBGameMode_BroadcastLocalized::SWITCH' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastLocalized, RelatedPlayerState_1) == 0x000018, "Member 'GBGameMode_BroadcastLocalized::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastLocalized, RelatedPlayerState_2) == 0x000020, "Member 'GBGameMode_BroadcastLocalized::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(GBGameMode_BroadcastLocalized, OptionalObject) == 0x000028, "Member 'GBGameMode_BroadcastLocalized::OptionalObject' has a wrong offset!");

// Function GroundBranch.GBGameMode.ChangeCallSign
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_ChangeCallSign final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewCallSign;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_ChangeCallSign) == 0x000008, "Wrong alignment on GBGameMode_ChangeCallSign");
static_assert(sizeof(GBGameMode_ChangeCallSign) == 0x000018, "Wrong size on GBGameMode_ChangeCallSign");
static_assert(offsetof(GBGameMode_ChangeCallSign, Controller) == 0x000000, "Member 'GBGameMode_ChangeCallSign::Controller' has a wrong offset!");
static_assert(offsetof(GBGameMode_ChangeCallSign, NewCallSign) == 0x000008, "Member 'GBGameMode_ChangeCallSign::NewCallSign' has a wrong offset!");

// Function GroundBranch.GBGameMode.CharacterDied
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_CharacterDied final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            CharacterController;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KillerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_CharacterDied) == 0x000008, "Wrong alignment on GBGameMode_CharacterDied");
static_assert(sizeof(GBGameMode_CharacterDied) == 0x000018, "Wrong size on GBGameMode_CharacterDied");
static_assert(offsetof(GBGameMode_CharacterDied, Character) == 0x000000, "Member 'GBGameMode_CharacterDied::Character' has a wrong offset!");
static_assert(offsetof(GBGameMode_CharacterDied, CharacterController) == 0x000008, "Member 'GBGameMode_CharacterDied::CharacterController' has a wrong offset!");
static_assert(offsetof(GBGameMode_CharacterDied, KillerController) == 0x000010, "Member 'GBGameMode_CharacterDied::KillerController' has a wrong offset!");

// Function GroundBranch.GBGameMode.CheckChatForBadWords
// 0x0020 (0x0020 - 0x0000)
struct GBGameMode_CheckChatForBadWords final
{
public:
	class FString                                 ChatText;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_CheckChatForBadWords) == 0x000008, "Wrong alignment on GBGameMode_CheckChatForBadWords");
static_assert(sizeof(GBGameMode_CheckChatForBadWords) == 0x000020, "Wrong size on GBGameMode_CheckChatForBadWords");
static_assert(offsetof(GBGameMode_CheckChatForBadWords, ChatText) == 0x000000, "Member 'GBGameMode_CheckChatForBadWords::ChatText' has a wrong offset!");
static_assert(offsetof(GBGameMode_CheckChatForBadWords, GBPlayerState) == 0x000010, "Member 'GBGameMode_CheckChatForBadWords::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_CheckChatForBadWords, ReturnValue) == 0x000018, "Member 'GBGameMode_CheckChatForBadWords::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.EnterPlayArea
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_EnterPlayArea final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_EnterPlayArea) == 0x000008, "Wrong alignment on GBGameMode_EnterPlayArea");
static_assert(sizeof(GBGameMode_EnterPlayArea) == 0x000008, "Wrong size on GBGameMode_EnterPlayArea");
static_assert(offsetof(GBGameMode_EnterPlayArea, GBPlayerState) == 0x000000, "Member 'GBGameMode_EnterPlayArea::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBGameMode.EnterReadyRoom
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_EnterReadyRoom final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_EnterReadyRoom) == 0x000008, "Wrong alignment on GBGameMode_EnterReadyRoom");
static_assert(sizeof(GBGameMode_EnterReadyRoom) == 0x000008, "Wrong size on GBGameMode_EnterReadyRoom");
static_assert(offsetof(GBGameMode_EnterReadyRoom, GBPlayerState) == 0x000000, "Member 'GBGameMode_EnterReadyRoom::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBGameMode.FreezeBots
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_FreezeBots final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_FreezeBots) == 0x000001, "Wrong alignment on GBGameMode_FreezeBots");
static_assert(sizeof(GBGameMode_FreezeBots) == 0x000001, "Wrong size on GBGameMode_FreezeBots");
static_assert(offsetof(GBGameMode_FreezeBots, TeamId) == 0x000000, "Member 'GBGameMode_FreezeBots::TeamId' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetBestLateComerInsertionPoint
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_GetBestLateComerInsertionPoint final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInsertionPoint*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetBestLateComerInsertionPoint) == 0x000008, "Wrong alignment on GBGameMode_GetBestLateComerInsertionPoint");
static_assert(sizeof(GBGameMode_GetBestLateComerInsertionPoint) == 0x000010, "Wrong size on GBGameMode_GetBestLateComerInsertionPoint");
static_assert(offsetof(GBGameMode_GetBestLateComerInsertionPoint, GBPlayerState) == 0x000000, "Member 'GBGameMode_GetBestLateComerInsertionPoint::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetBestLateComerInsertionPoint, ReturnValue) == 0x000008, "Member 'GBGameMode_GetBestLateComerInsertionPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetBotControllers
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_GetBotControllers final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBKytController*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetBotControllers) == 0x000008, "Wrong alignment on GBGameMode_GetBotControllers");
static_assert(sizeof(GBGameMode_GetBotControllers) == 0x000018, "Wrong size on GBGameMode_GetBotControllers");
static_assert(offsetof(GBGameMode_GetBotControllers, TeamId) == 0x000000, "Member 'GBGameMode_GetBotControllers::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetBotControllers, ReturnValue) == 0x000008, "Member 'GBGameMode_GetBotControllers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetGameModeTable
// 0x0048 (0x0048 - 0x0000)
struct GBGameMode_GetGameModeTable final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetGameModeTable) == 0x000008, "Wrong alignment on GBGameMode_GetGameModeTable");
static_assert(sizeof(GBGameMode_GetGameModeTable) == 0x000048, "Wrong size on GBGameMode_GetGameModeTable");
static_assert(offsetof(GBGameMode_GetGameModeTable, ReturnValue) == 0x000000, "Member 'GBGameMode_GetGameModeTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetGameModeTableInfo
// 0x0080 (0x0080 - 0x0000)
struct GBGameMode_GetGameModeTableInfo final
{
public:
	struct FLuaScriptInfo                         ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetGameModeTableInfo) == 0x000008, "Wrong alignment on GBGameMode_GetGameModeTableInfo");
static_assert(sizeof(GBGameMode_GetGameModeTableInfo) == 0x000080, "Wrong size on GBGameMode_GetGameModeTableInfo");
static_assert(offsetof(GBGameMode_GetGameModeTableInfo, ReturnValue) == 0x000000, "Member 'GBGameMode_GetGameModeTableInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetMissionFileName
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_GetMissionFileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetMissionFileName) == 0x000008, "Wrong alignment on GBGameMode_GetMissionFileName");
static_assert(sizeof(GBGameMode_GetMissionFileName) == 0x000010, "Wrong size on GBGameMode_GetMissionFileName");
static_assert(offsetof(GBGameMode_GetMissionFileName, ReturnValue) == 0x000000, "Member 'GBGameMode_GetMissionFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetPlayerLoadoutInfo
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_GetPlayerLoadoutInfo final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadoutName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKitInfo*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetPlayerLoadoutInfo) == 0x000008, "Wrong alignment on GBGameMode_GetPlayerLoadoutInfo");
static_assert(sizeof(GBGameMode_GetPlayerLoadoutInfo) == 0x000018, "Wrong size on GBGameMode_GetPlayerLoadoutInfo");
static_assert(offsetof(GBGameMode_GetPlayerLoadoutInfo, Controller) == 0x000000, "Member 'GBGameMode_GetPlayerLoadoutInfo::Controller' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayerLoadoutInfo, LoadoutName) == 0x000008, "Member 'GBGameMode_GetPlayerLoadoutInfo::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayerLoadoutInfo, ReturnValue) == 0x000010, "Member 'GBGameMode_GetPlayerLoadoutInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetRandomInsertionPoint
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetRandomInsertionPoint final
{
public:
	class AGBInsertionPoint*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetRandomInsertionPoint) == 0x000008, "Wrong alignment on GBGameMode_GetRandomInsertionPoint");
static_assert(sizeof(GBGameMode_GetRandomInsertionPoint) == 0x000008, "Wrong size on GBGameMode_GetRandomInsertionPoint");
static_assert(offsetof(GBGameMode_GetRandomInsertionPoint, ReturnValue) == 0x000000, "Member 'GBGameMode_GetRandomInsertionPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetReadyPlayerTeamCounts
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_GetReadyPlayerTeamCounts final
{
public:
	bool                                          bExcludeBots;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetReadyPlayerTeamCounts) == 0x000008, "Wrong alignment on GBGameMode_GetReadyPlayerTeamCounts");
static_assert(sizeof(GBGameMode_GetReadyPlayerTeamCounts) == 0x000018, "Wrong size on GBGameMode_GetReadyPlayerTeamCounts");
static_assert(offsetof(GBGameMode_GetReadyPlayerTeamCounts, bExcludeBots) == 0x000000, "Member 'GBGameMode_GetReadyPlayerTeamCounts::bExcludeBots' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetReadyPlayerTeamCounts, ReturnValue) == 0x000008, "Member 'GBGameMode_GetReadyPlayerTeamCounts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.IsSequencePlaying
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_IsSequencePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_IsSequencePlaying) == 0x000001, "Wrong alignment on GBGameMode_IsSequencePlaying");
static_assert(sizeof(GBGameMode_IsSequencePlaying) == 0x000001, "Wrong size on GBGameMode_IsSequencePlaying");
static_assert(offsetof(GBGameMode_IsSequencePlaying, ReturnValue) == 0x000000, "Member 'GBGameMode_IsSequencePlaying::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.KillBots
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_KillBots final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_KillBots) == 0x000001, "Wrong alignment on GBGameMode_KillBots");
static_assert(sizeof(GBGameMode_KillBots) == 0x000001, "Wrong size on GBGameMode_KillBots");
static_assert(offsetof(GBGameMode_KillBots, TeamId) == 0x000000, "Member 'GBGameMode_KillBots::TeamId' has a wrong offset!");

// Function GroundBranch.GBGameMode.LoadLuaScript
// 0x0098 (0x0098 - 0x0000)
struct GBGameMode_LoadLuaScript final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaScriptInfo                         OutLuaScriptInfo;                                  // 0x0010(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_LoadLuaScript) == 0x000008, "Wrong alignment on GBGameMode_LoadLuaScript");
static_assert(sizeof(GBGameMode_LoadLuaScript) == 0x000098, "Wrong size on GBGameMode_LoadLuaScript");
static_assert(offsetof(GBGameMode_LoadLuaScript, Filename) == 0x000000, "Member 'GBGameMode_LoadLuaScript::Filename' has a wrong offset!");
static_assert(offsetof(GBGameMode_LoadLuaScript, OutLuaScriptInfo) == 0x000010, "Member 'GBGameMode_LoadLuaScript::OutLuaScriptInfo' has a wrong offset!");
static_assert(offsetof(GBGameMode_LoadLuaScript, ReturnValue) == 0x000090, "Member 'GBGameMode_LoadLuaScript::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.NotifyMissionObjectiveStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_NotifyMissionObjectiveStatusChanged final
{
public:
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBMissionObjectiveStatus                     NewMissionObjectiveStatus;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_NotifyMissionObjectiveStatusChanged) == 0x000008, "Wrong alignment on GBGameMode_NotifyMissionObjectiveStatusChanged");
static_assert(sizeof(GBGameMode_NotifyMissionObjectiveStatusChanged) == 0x000010, "Wrong size on GBGameMode_NotifyMissionObjectiveStatusChanged");
static_assert(offsetof(GBGameMode_NotifyMissionObjectiveStatusChanged, MissionObjective) == 0x000000, "Member 'GBGameMode_NotifyMissionObjectiveStatusChanged::MissionObjective' has a wrong offset!");
static_assert(offsetof(GBGameMode_NotifyMissionObjectiveStatusChanged, NewMissionObjectiveStatus) == 0x000008, "Member 'GBGameMode_NotifyMissionObjectiveStatusChanged::NewMissionObjectiveStatus' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnAIInitializedHandler
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_OnAIInitializedHandler final
{
public:
	class AGBKytController*                       NewAIController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnAIInitializedHandler) == 0x000008, "Wrong alignment on GBGameMode_OnAIInitializedHandler");
static_assert(sizeof(GBGameMode_OnAIInitializedHandler) == 0x000008, "Wrong size on GBGameMode_OnAIInitializedHandler");
static_assert(offsetof(GBGameMode_OnAIInitializedHandler, NewAIController) == 0x000000, "Member 'GBGameMode_OnAIInitializedHandler::NewAIController' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnCharacterDiedEvent
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_OnCharacterDiedEvent final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            CharacterController;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KillerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnCharacterDiedEvent) == 0x000008, "Wrong alignment on GBGameMode_OnCharacterDiedEvent");
static_assert(sizeof(GBGameMode_OnCharacterDiedEvent) == 0x000018, "Wrong size on GBGameMode_OnCharacterDiedEvent");
static_assert(offsetof(GBGameMode_OnCharacterDiedEvent, Character) == 0x000000, "Member 'GBGameMode_OnCharacterDiedEvent::Character' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnCharacterDiedEvent, CharacterController) == 0x000008, "Member 'GBGameMode_OnCharacterDiedEvent::CharacterController' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnCharacterDiedEvent, KillerController) == 0x000010, "Member 'GBGameMode_OnCharacterDiedEvent::KillerController' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnDroppedInvItemDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_OnDroppedInvItemDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnDroppedInvItemDestroyed) == 0x000008, "Wrong alignment on GBGameMode_OnDroppedInvItemDestroyed");
static_assert(sizeof(GBGameMode_OnDroppedInvItemDestroyed) == 0x000008, "Wrong size on GBGameMode_OnDroppedInvItemDestroyed");
static_assert(offsetof(GBGameMode_OnDroppedInvItemDestroyed, DestroyedActor) == 0x000000, "Member 'GBGameMode_OnDroppedInvItemDestroyed::DestroyedActor' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnLuaError
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_OnLuaError final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnLuaError) == 0x000008, "Wrong alignment on GBGameMode_OnLuaError");
static_assert(sizeof(GBGameMode_OnLuaError) == 0x000010, "Wrong size on GBGameMode_OnLuaError");
static_assert(offsetof(GBGameMode_OnLuaError, Message) == 0x000000, "Member 'GBGameMode_OnLuaError::Message' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnPlayerCastNextMapVote
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_OnPlayerCastNextMapVote final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapListIndex;                                      // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_OnPlayerCastNextMapVote) == 0x000008, "Wrong alignment on GBGameMode_OnPlayerCastNextMapVote");
static_assert(sizeof(GBGameMode_OnPlayerCastNextMapVote) == 0x000010, "Wrong size on GBGameMode_OnPlayerCastNextMapVote");
static_assert(offsetof(GBGameMode_OnPlayerCastNextMapVote, PlayerState) == 0x000000, "Member 'GBGameMode_OnPlayerCastNextMapVote::PlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnPlayerCastNextMapVote, MapListIndex) == 0x000008, "Member 'GBGameMode_OnPlayerCastNextMapVote::MapListIndex' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnProcessCommand
// 0x0028 (0x0028 - 0x0000)
struct GBGameMode_OnProcessCommand final
{
public:
	class APlayerController*                      InvokerPlayerController;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnProcessCommand) == 0x000008, "Wrong alignment on GBGameMode_OnProcessCommand");
static_assert(sizeof(GBGameMode_OnProcessCommand) == 0x000028, "Wrong size on GBGameMode_OnProcessCommand");
static_assert(offsetof(GBGameMode_OnProcessCommand, InvokerPlayerController) == 0x000000, "Member 'GBGameMode_OnProcessCommand::InvokerPlayerController' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnProcessCommand, Command) == 0x000008, "Member 'GBGameMode_OnProcessCommand::Command' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnProcessCommand, Params_0) == 0x000018, "Member 'GBGameMode_OnProcessCommand::Params_0' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnProcessCommandEvent
// 0x0020 (0x0020 - 0x0000)
struct GBGameMode_OnProcessCommandEvent final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnProcessCommandEvent) == 0x000008, "Wrong alignment on GBGameMode_OnProcessCommandEvent");
static_assert(sizeof(GBGameMode_OnProcessCommandEvent) == 0x000020, "Wrong size on GBGameMode_OnProcessCommandEvent");
static_assert(offsetof(GBGameMode_OnProcessCommandEvent, Command) == 0x000000, "Member 'GBGameMode_OnProcessCommandEvent::Command' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnProcessCommandEvent, Params_0) == 0x000010, "Member 'GBGameMode_OnProcessCommandEvent::Params_0' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnRetryStandalone
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_OnRetryStandalone final
{
public:
	class AGBPlayerController*                    PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnRetryStandalone) == 0x000008, "Wrong alignment on GBGameMode_OnRetryStandalone");
static_assert(sizeof(GBGameMode_OnRetryStandalone) == 0x000008, "Wrong size on GBGameMode_OnRetryStandalone");
static_assert(offsetof(GBGameMode_OnRetryStandalone, PlayerController) == 0x000000, "Member 'GBGameMode_OnRetryStandalone::PlayerController' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnRoundStageAborted
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_OnRoundStageAborted final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnRoundStageAborted) == 0x000004, "Wrong alignment on GBGameMode_OnRoundStageAborted");
static_assert(sizeof(GBGameMode_OnRoundStageAborted) == 0x000008, "Wrong size on GBGameMode_OnRoundStageAborted");
static_assert(offsetof(GBGameMode_OnRoundStageAborted, Reason) == 0x000000, "Member 'GBGameMode_OnRoundStageAborted::Reason' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnVoteCommand
// 0x0028 (0x0028 - 0x0000)
struct GBGameMode_OnVoteCommand final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnVoteCommand) == 0x000008, "Wrong alignment on GBGameMode_OnVoteCommand");
static_assert(sizeof(GBGameMode_OnVoteCommand) == 0x000028, "Wrong size on GBGameMode_OnVoteCommand");
static_assert(offsetof(GBGameMode_OnVoteCommand, PlayerController) == 0x000000, "Member 'GBGameMode_OnVoteCommand::PlayerController' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnVoteCommand, Command) == 0x000008, "Member 'GBGameMode_OnVoteCommand::Command' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnVoteCommand, Params_0) == 0x000018, "Member 'GBGameMode_OnVoteCommand::Params_0' has a wrong offset!");

// Function GroundBranch.GBGameMode.OnVoteCommandEvent
// 0x0028 (0x0028 - 0x0000)
struct GBGameMode_OnVoteCommandEvent final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_OnVoteCommandEvent) == 0x000008, "Wrong alignment on GBGameMode_OnVoteCommandEvent");
static_assert(sizeof(GBGameMode_OnVoteCommandEvent) == 0x000028, "Wrong size on GBGameMode_OnVoteCommandEvent");
static_assert(offsetof(GBGameMode_OnVoteCommandEvent, PlayerController) == 0x000000, "Member 'GBGameMode_OnVoteCommandEvent::PlayerController' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnVoteCommandEvent, Command) == 0x000008, "Member 'GBGameMode_OnVoteCommandEvent::Command' has a wrong offset!");
static_assert(offsetof(GBGameMode_OnVoteCommandEvent, Params_0) == 0x000018, "Member 'GBGameMode_OnVoteCommandEvent::Params_0' has a wrong offset!");

// Function GroundBranch.GBGameMode.PlayerCanEnterPlayArea
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_PlayerCanEnterPlayArea final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_PlayerCanEnterPlayArea) == 0x000008, "Wrong alignment on GBGameMode_PlayerCanEnterPlayArea");
static_assert(sizeof(GBGameMode_PlayerCanEnterPlayArea) == 0x000010, "Wrong size on GBGameMode_PlayerCanEnterPlayArea");
static_assert(offsetof(GBGameMode_PlayerCanEnterPlayArea, GBPlayerState) == 0x000000, "Member 'GBGameMode_PlayerCanEnterPlayArea::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_PlayerCanEnterPlayArea, ReturnValue) == 0x000008, "Member 'GBGameMode_PlayerCanEnterPlayArea::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.PlayerEnteredPlayArea
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_PlayerEnteredPlayArea final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_PlayerEnteredPlayArea) == 0x000008, "Wrong alignment on GBGameMode_PlayerEnteredPlayArea");
static_assert(sizeof(GBGameMode_PlayerEnteredPlayArea) == 0x000008, "Wrong size on GBGameMode_PlayerEnteredPlayArea");
static_assert(offsetof(GBGameMode_PlayerEnteredPlayArea, GBPlayerState) == 0x000000, "Member 'GBGameMode_PlayerEnteredPlayArea::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBGameMode.PlayerEnteredReadyRoom
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_PlayerEnteredReadyRoom final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_PlayerEnteredReadyRoom) == 0x000008, "Wrong alignment on GBGameMode_PlayerEnteredReadyRoom");
static_assert(sizeof(GBGameMode_PlayerEnteredReadyRoom) == 0x000008, "Wrong size on GBGameMode_PlayerEnteredReadyRoom");
static_assert(offsetof(GBGameMode_PlayerEnteredReadyRoom, GBPlayerState) == 0x000000, "Member 'GBGameMode_PlayerEnteredReadyRoom::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBGameMode.PlayerGameModeRequest
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_PlayerGameModeRequest final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Request;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_PlayerGameModeRequest) == 0x000008, "Wrong alignment on GBGameMode_PlayerGameModeRequest");
static_assert(sizeof(GBGameMode_PlayerGameModeRequest) == 0x000018, "Wrong size on GBGameMode_PlayerGameModeRequest");
static_assert(offsetof(GBGameMode_PlayerGameModeRequest, GBPlayerState) == 0x000000, "Member 'GBGameMode_PlayerGameModeRequest::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_PlayerGameModeRequest, Request) == 0x000008, "Member 'GBGameMode_PlayerGameModeRequest::Request' has a wrong offset!");

// Function GroundBranch.GBGameMode.PlayerInsertionPointChanged
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_PlayerInsertionPointChanged final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInsertionPoint*                      InsertionPoint;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_PlayerInsertionPointChanged) == 0x000008, "Wrong alignment on GBGameMode_PlayerInsertionPointChanged");
static_assert(sizeof(GBGameMode_PlayerInsertionPointChanged) == 0x000010, "Wrong size on GBGameMode_PlayerInsertionPointChanged");
static_assert(offsetof(GBGameMode_PlayerInsertionPointChanged, GBPlayerState) == 0x000000, "Member 'GBGameMode_PlayerInsertionPointChanged::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_PlayerInsertionPointChanged, InsertionPoint) == 0x000008, "Member 'GBGameMode_PlayerInsertionPointChanged::InsertionPoint' has a wrong offset!");

// Function GroundBranch.GBGameMode.PlayerReadyStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_PlayerReadyStatusChanged final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReadyStatus                                  ReadyStatus;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_PlayerReadyStatusChanged) == 0x000008, "Wrong alignment on GBGameMode_PlayerReadyStatusChanged");
static_assert(sizeof(GBGameMode_PlayerReadyStatusChanged) == 0x000010, "Wrong size on GBGameMode_PlayerReadyStatusChanged");
static_assert(offsetof(GBGameMode_PlayerReadyStatusChanged, GBPlayerState) == 0x000000, "Member 'GBGameMode_PlayerReadyStatusChanged::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_PlayerReadyStatusChanged, ReadyStatus) == 0x000008, "Member 'GBGameMode_PlayerReadyStatusChanged::ReadyStatus' has a wrong offset!");

// Function GroundBranch.GBGameMode.PrepLatecomer
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_PrepLatecomer final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_PrepLatecomer) == 0x000008, "Wrong alignment on GBGameMode_PrepLatecomer");
static_assert(sizeof(GBGameMode_PrepLatecomer) == 0x000010, "Wrong size on GBGameMode_PrepLatecomer");
static_assert(offsetof(GBGameMode_PrepLatecomer, GBPlayerState) == 0x000000, "Member 'GBGameMode_PrepLatecomer::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_PrepLatecomer, ReturnValue) == 0x000008, "Member 'GBGameMode_PrepLatecomer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.RemoveBots
// 0x0002 (0x0002 - 0x0000)
struct GBGameMode_RemoveBots final
{
public:
	uint8                                         Count;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_RemoveBots) == 0x000001, "Wrong alignment on GBGameMode_RemoveBots");
static_assert(sizeof(GBGameMode_RemoveBots) == 0x000002, "Wrong size on GBGameMode_RemoveBots");
static_assert(offsetof(GBGameMode_RemoveBots, Count) == 0x000000, "Member 'GBGameMode_RemoveBots::Count' has a wrong offset!");
static_assert(offsetof(GBGameMode_RemoveBots, TeamId) == 0x000001, "Member 'GBGameMode_RemoveBots::TeamId' has a wrong offset!");

// Function GroundBranch.GBGameMode.ReportAICreatedInPlayArea
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_ReportAICreatedInPlayArea final
{
public:
	class AGBCharacter*                           GBCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_ReportAICreatedInPlayArea) == 0x000008, "Wrong alignment on GBGameMode_ReportAICreatedInPlayArea");
static_assert(sizeof(GBGameMode_ReportAICreatedInPlayArea) == 0x000008, "Wrong size on GBGameMode_ReportAICreatedInPlayArea");
static_assert(offsetof(GBGameMode_ReportAICreatedInPlayArea, GBCharacter) == 0x000000, "Member 'GBGameMode_ReportAICreatedInPlayArea::GBCharacter' has a wrong offset!");

// Function GroundBranch.GBGameMode.RetryStandalone
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_RetryStandalone final
{
public:
	class AGBPlayerController*                    PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_RetryStandalone) == 0x000008, "Wrong alignment on GBGameMode_RetryStandalone");
static_assert(sizeof(GBGameMode_RetryStandalone) == 0x000008, "Wrong size on GBGameMode_RetryStandalone");
static_assert(offsetof(GBGameMode_RetryStandalone, PlayerController) == 0x000000, "Member 'GBGameMode_RetryStandalone::PlayerController' has a wrong offset!");

// Function GroundBranch.GBGameMode.RunMissionScript
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_RunMissionScript final
{
public:
	class FString                                 ScriptName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_RunMissionScript) == 0x000008, "Wrong alignment on GBGameMode_RunMissionScript");
static_assert(sizeof(GBGameMode_RunMissionScript) == 0x000010, "Wrong size on GBGameMode_RunMissionScript");
static_assert(offsetof(GBGameMode_RunMissionScript, ScriptName) == 0x000000, "Member 'GBGameMode_RunMissionScript::ScriptName' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetCampaignMissionHasGoneCoop
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_SetCampaignMissionHasGoneCoop final
{
public:
	bool                                          bInCampaignMissionHasGoneCoop;                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetCampaignMissionHasGoneCoop) == 0x000001, "Wrong alignment on GBGameMode_SetCampaignMissionHasGoneCoop");
static_assert(sizeof(GBGameMode_SetCampaignMissionHasGoneCoop) == 0x000001, "Wrong size on GBGameMode_SetCampaignMissionHasGoneCoop");
static_assert(offsetof(GBGameMode_SetCampaignMissionHasGoneCoop, bInCampaignMissionHasGoneCoop) == 0x000000, "Member 'GBGameMode_SetCampaignMissionHasGoneCoop::bInCampaignMissionHasGoneCoop' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetDefaultRoundStageTime
// 0x000C (0x000C - 0x0000)
struct GBGameMode_SetDefaultRoundStageTime final
{
public:
	class FName                                   RoundStageName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTimeLimit;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetDefaultRoundStageTime) == 0x000004, "Wrong alignment on GBGameMode_SetDefaultRoundStageTime");
static_assert(sizeof(GBGameMode_SetDefaultRoundStageTime) == 0x00000C, "Wrong size on GBGameMode_SetDefaultRoundStageTime");
static_assert(offsetof(GBGameMode_SetDefaultRoundStageTime, RoundStageName) == 0x000000, "Member 'GBGameMode_SetDefaultRoundStageTime::RoundStageName' has a wrong offset!");
static_assert(offsetof(GBGameMode_SetDefaultRoundStageTime, NewTimeLimit) == 0x000008, "Member 'GBGameMode_SetDefaultRoundStageTime::NewTimeLimit' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetDifficulty
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_SetDifficulty final
{
public:
	int32                                         NewDifficulty;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetDifficulty) == 0x000004, "Wrong alignment on GBGameMode_SetDifficulty");
static_assert(sizeof(GBGameMode_SetDifficulty) == 0x000004, "Wrong size on GBGameMode_SetDifficulty");
static_assert(offsetof(GBGameMode_SetDifficulty, NewDifficulty) == 0x000000, "Member 'GBGameMode_SetDifficulty::NewDifficulty' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetGameModeModID
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_SetGameModeModID final
{
public:
	struct FUInt64                                InGameModeModID;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetGameModeModID) == 0x000008, "Wrong alignment on GBGameMode_SetGameModeModID");
static_assert(sizeof(GBGameMode_SetGameModeModID) == 0x000008, "Wrong size on GBGameMode_SetGameModeModID");
static_assert(offsetof(GBGameMode_SetGameModeModID, InGameModeModID) == 0x000000, "Member 'GBGameMode_SetGameModeModID::InGameModeModID' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetMatchInfo
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_SetMatchInfo final
{
public:
	struct FGBMatchInfo                           NewMatchInfo;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetMatchInfo) == 0x000001, "Wrong alignment on GBGameMode_SetMatchInfo");
static_assert(sizeof(GBGameMode_SetMatchInfo) == 0x000004, "Wrong size on GBGameMode_SetMatchInfo");
static_assert(offsetof(GBGameMode_SetMatchInfo, NewMatchInfo) == 0x000000, "Member 'GBGameMode_SetMatchInfo::NewMatchInfo' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetMatchStartTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_SetMatchStartTime final
{
public:
	float                                         NewMatchStartTime;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetMatchStartTime) == 0x000004, "Wrong alignment on GBGameMode_SetMatchStartTime");
static_assert(sizeof(GBGameMode_SetMatchStartTime) == 0x000004, "Wrong size on GBGameMode_SetMatchStartTime");
static_assert(offsetof(GBGameMode_SetMatchStartTime, NewMatchStartTime) == 0x000000, "Member 'GBGameMode_SetMatchStartTime::NewMatchStartTime' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetMatchType
// 0x0002 (0x0002 - 0x0000)
struct GBGameMode_SetMatchType final
{
public:
	EGBMatchType                                  NewMatchType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetRoundScores;                                 // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetMatchType) == 0x000001, "Wrong alignment on GBGameMode_SetMatchType");
static_assert(sizeof(GBGameMode_SetMatchType) == 0x000002, "Wrong size on GBGameMode_SetMatchType");
static_assert(offsetof(GBGameMode_SetMatchType, NewMatchType) == 0x000000, "Member 'GBGameMode_SetMatchType::NewMatchType' has a wrong offset!");
static_assert(offsetof(GBGameMode_SetMatchType, bResetRoundScores) == 0x000001, "Member 'GBGameMode_SetMatchType::bResetRoundScores' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetMissionData
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_SetMissionData final
{
public:
	class UGBMissionData*                         NewMissionData;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnActors;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunScript;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_SetMissionData) == 0x000008, "Wrong alignment on GBGameMode_SetMissionData");
static_assert(sizeof(GBGameMode_SetMissionData) == 0x000010, "Wrong size on GBGameMode_SetMissionData");
static_assert(offsetof(GBGameMode_SetMissionData, NewMissionData) == 0x000000, "Member 'GBGameMode_SetMissionData::NewMissionData' has a wrong offset!");
static_assert(offsetof(GBGameMode_SetMissionData, bSpawnActors) == 0x000008, "Member 'GBGameMode_SetMissionData::bSpawnActors' has a wrong offset!");
static_assert(offsetof(GBGameMode_SetMissionData, bRunScript) == 0x000009, "Member 'GBGameMode_SetMissionData::bRunScript' has a wrong offset!");
static_assert(offsetof(GBGameMode_SetMissionData, bForce) == 0x00000A, "Member 'GBGameMode_SetMissionData::bForce' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetMissionFileName
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_SetMissionFileName final
{
public:
	class FString                                 NewMissionFileName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetMissionFileName) == 0x000008, "Wrong alignment on GBGameMode_SetMissionFileName");
static_assert(sizeof(GBGameMode_SetMissionFileName) == 0x000010, "Wrong size on GBGameMode_SetMissionFileName");
static_assert(offsetof(GBGameMode_SetMissionFileName, NewMissionFileName) == 0x000000, "Member 'GBGameMode_SetMissionFileName::NewMissionFileName' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetRecordStats
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_SetRecordStats final
{
public:
	bool                                          bNewRecordStats;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetRecordStats) == 0x000001, "Wrong alignment on GBGameMode_SetRecordStats");
static_assert(sizeof(GBGameMode_SetRecordStats) == 0x000001, "Wrong size on GBGameMode_SetRecordStats");
static_assert(offsetof(GBGameMode_SetRecordStats, bNewRecordStats) == 0x000000, "Member 'GBGameMode_SetRecordStats::bNewRecordStats' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetRoundStage
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_SetRoundStage final
{
public:
	class FName                                   NewRoundStage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetRoundStage) == 0x000004, "Wrong alignment on GBGameMode_SetRoundStage");
static_assert(sizeof(GBGameMode_SetRoundStage) == 0x000008, "Wrong size on GBGameMode_SetRoundStage");
static_assert(offsetof(GBGameMode_SetRoundStage, NewRoundStage) == 0x000000, "Member 'GBGameMode_SetRoundStage::NewRoundStage' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetRoundStageTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_SetRoundStageTime final
{
public:
	int32                                         NewTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetRoundStageTime) == 0x000004, "Wrong alignment on GBGameMode_SetRoundStageTime");
static_assert(sizeof(GBGameMode_SetRoundStageTime) == 0x000004, "Wrong size on GBGameMode_SetRoundStageTime");
static_assert(offsetof(GBGameMode_SetRoundStageTime, NewTime) == 0x000000, "Member 'GBGameMode_SetRoundStageTime::NewTime' has a wrong offset!");

// Function GroundBranch.GBGameMode.SetRoundTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_SetRoundTime final
{
public:
	int32                                         NewRoundTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_SetRoundTime) == 0x000004, "Wrong alignment on GBGameMode_SetRoundTime");
static_assert(sizeof(GBGameMode_SetRoundTime) == 0x000004, "Wrong size on GBGameMode_SetRoundTime");
static_assert(offsetof(GBGameMode_SetRoundTime, NewRoundTime) == 0x000000, "Member 'GBGameMode_SetRoundTime::NewRoundTime' has a wrong offset!");

// Function GroundBranch.GBGameMode.ShouldCheckForTeamKills
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_ShouldCheckForTeamKills final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_ShouldCheckForTeamKills) == 0x000001, "Wrong alignment on GBGameMode_ShouldCheckForTeamKills");
static_assert(sizeof(GBGameMode_ShouldCheckForTeamKills) == 0x000001, "Wrong size on GBGameMode_ShouldCheckForTeamKills");
static_assert(offsetof(GBGameMode_ShouldCheckForTeamKills, ReturnValue) == 0x000000, "Member 'GBGameMode_ShouldCheckForTeamKills::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.StandAloneCommand
// 0x0020 (0x0020 - 0x0000)
struct GBGameMode_StandAloneCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_StandAloneCommand) == 0x000008, "Wrong alignment on GBGameMode_StandAloneCommand");
static_assert(sizeof(GBGameMode_StandAloneCommand) == 0x000020, "Wrong size on GBGameMode_StandAloneCommand");
static_assert(offsetof(GBGameMode_StandAloneCommand, Command) == 0x000000, "Member 'GBGameMode_StandAloneCommand::Command' has a wrong offset!");
static_assert(offsetof(GBGameMode_StandAloneCommand, Params_0) == 0x000010, "Member 'GBGameMode_StandAloneCommand::Params_0' has a wrong offset!");

// Function GroundBranch.GBGameMode.StopCurrentSequencePlayback
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_StopCurrentSequencePlayback final
{
public:
	bool                                          bSuppressBlackOutAfter;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_StopCurrentSequencePlayback) == 0x000001, "Wrong alignment on GBGameMode_StopCurrentSequencePlayback");
static_assert(sizeof(GBGameMode_StopCurrentSequencePlayback) == 0x000001, "Wrong size on GBGameMode_StopCurrentSequencePlayback");
static_assert(offsetof(GBGameMode_StopCurrentSequencePlayback, bSuppressBlackOutAfter) == 0x000000, "Member 'GBGameMode_StopCurrentSequencePlayback::bSuppressBlackOutAfter' has a wrong offset!");

// Function GroundBranch.GBGameMode.TeleportPlayer
// 0x0020 (0x0020 - 0x0000)
struct GBGameMode_TeleportPlayer final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_TeleportPlayer) == 0x000008, "Wrong alignment on GBGameMode_TeleportPlayer");
static_assert(sizeof(GBGameMode_TeleportPlayer) == 0x000020, "Wrong size on GBGameMode_TeleportPlayer");
static_assert(offsetof(GBGameMode_TeleportPlayer, GBPlayerState) == 0x000000, "Member 'GBGameMode_TeleportPlayer::GBPlayerState' has a wrong offset!");
static_assert(offsetof(GBGameMode_TeleportPlayer, SpawnLocation) == 0x000008, "Member 'GBGameMode_TeleportPlayer::SpawnLocation' has a wrong offset!");
static_assert(offsetof(GBGameMode_TeleportPlayer, SpawnRotation) == 0x000014, "Member 'GBGameMode_TeleportPlayer::SpawnRotation' has a wrong offset!");

// Function GroundBranch.GBGameMode.TriggerSequencePlayback
// 0x0038 (0x0038 - 0x0000)
struct GBGameMode_TriggerSequencePlayback final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     LevelSequenceActor;                                // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCutscene;                                       // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAbort;                                         // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetActors;                                      // 0x002A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayers;                                      // 0x002B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlackoutAfter;                                    // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameMode_TriggerSequencePlayback) == 0x000008, "Wrong alignment on GBGameMode_TriggerSequencePlayback");
static_assert(sizeof(GBGameMode_TriggerSequencePlayback) == 0x000038, "Wrong size on GBGameMode_TriggerSequencePlayback");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, LevelSequenceActor) == 0x000000, "Member 'GBGameMode_TriggerSequencePlayback::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, bIsCutscene) == 0x000028, "Member 'GBGameMode_TriggerSequencePlayback::bIsCutscene' has a wrong offset!");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, bCanAbort) == 0x000029, "Member 'GBGameMode_TriggerSequencePlayback::bCanAbort' has a wrong offset!");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, bResetActors) == 0x00002A, "Member 'GBGameMode_TriggerSequencePlayback::bResetActors' has a wrong offset!");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, bHidePlayers) == 0x00002B, "Member 'GBGameMode_TriggerSequencePlayback::bHidePlayers' has a wrong offset!");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, bBlackoutAfter) == 0x00002C, "Member 'GBGameMode_TriggerSequencePlayback::bBlackoutAfter' has a wrong offset!");
static_assert(offsetof(GBGameMode_TriggerSequencePlayback, ReturnValue) == 0x000030, "Member 'GBGameMode_TriggerSequencePlayback::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.UnFreezeBots
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_UnFreezeBots final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_UnFreezeBots) == 0x000001, "Wrong alignment on GBGameMode_UnFreezeBots");
static_assert(sizeof(GBGameMode_UnFreezeBots) == 0x000001, "Wrong size on GBGameMode_UnFreezeBots");
static_assert(offsetof(GBGameMode_UnFreezeBots, TeamId) == 0x000000, "Member 'GBGameMode_UnFreezeBots::TeamId' has a wrong offset!");

// Function GroundBranch.GBGameMode.GameModeIsLoaded
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_GameModeIsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GameModeIsLoaded) == 0x000001, "Wrong alignment on GBGameMode_GameModeIsLoaded");
static_assert(sizeof(GBGameMode_GameModeIsLoaded) == 0x000001, "Wrong size on GBGameMode_GameModeIsLoaded");
static_assert(offsetof(GBGameMode_GameModeIsLoaded, ReturnValue) == 0x000000, "Member 'GBGameMode_GameModeIsLoaded::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetAIBarkManager
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetAIBarkManager final
{
public:
	class AGBAIBarkManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetAIBarkManager) == 0x000008, "Wrong alignment on GBGameMode_GetAIBarkManager");
static_assert(sizeof(GBGameMode_GetAIBarkManager) == 0x000008, "Wrong size on GBGameMode_GetAIBarkManager");
static_assert(offsetof(GBGameMode_GetAIBarkManager, ReturnValue) == 0x000000, "Member 'GBGameMode_GetAIBarkManager::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetAISpawnManager
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetAISpawnManager final
{
public:
	class AGBAISpawnManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetAISpawnManager) == 0x000008, "Wrong alignment on GBGameMode_GetAISpawnManager");
static_assert(sizeof(GBGameMode_GetAISpawnManager) == 0x000008, "Wrong size on GBGameMode_GetAISpawnManager");
static_assert(offsetof(GBGameMode_GetAISpawnManager, ReturnValue) == 0x000000, "Member 'GBGameMode_GetAISpawnManager::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetAISpawnManagerClass
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetAISpawnManagerClass final
{
public:
	TSubclassOf<class AGBAISpawnManager>          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetAISpawnManagerClass) == 0x000008, "Wrong alignment on GBGameMode_GetAISpawnManagerClass");
static_assert(sizeof(GBGameMode_GetAISpawnManagerClass) == 0x000008, "Wrong size on GBGameMode_GetAISpawnManagerClass");
static_assert(offsetof(GBGameMode_GetAISpawnManagerClass, ReturnValue) == 0x000000, "Member 'GBGameMode_GetAISpawnManagerClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetBriefingRoomWidget
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetBriefingRoomWidget final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetBriefingRoomWidget) == 0x000008, "Wrong alignment on GBGameMode_GetBriefingRoomWidget");
static_assert(sizeof(GBGameMode_GetBriefingRoomWidget) == 0x000008, "Wrong size on GBGameMode_GetBriefingRoomWidget");
static_assert(offsetof(GBGameMode_GetBriefingRoomWidget, ReturnValue) == 0x000000, "Member 'GBGameMode_GetBriefingRoomWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetCampaignMissionHasGoneCoop
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_GetCampaignMissionHasGoneCoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetCampaignMissionHasGoneCoop) == 0x000001, "Wrong alignment on GBGameMode_GetCampaignMissionHasGoneCoop");
static_assert(sizeof(GBGameMode_GetCampaignMissionHasGoneCoop) == 0x000001, "Wrong size on GBGameMode_GetCampaignMissionHasGoneCoop");
static_assert(offsetof(GBGameMode_GetCampaignMissionHasGoneCoop, ReturnValue) == 0x000000, "Member 'GBGameMode_GetCampaignMissionHasGoneCoop::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetDefaultRoundStageTime
// 0x000C (0x000C - 0x0000)
struct GBGameMode_GetDefaultRoundStageTime final
{
public:
	class FName                                   RoundStageName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetDefaultRoundStageTime) == 0x000004, "Wrong alignment on GBGameMode_GetDefaultRoundStageTime");
static_assert(sizeof(GBGameMode_GetDefaultRoundStageTime) == 0x00000C, "Wrong size on GBGameMode_GetDefaultRoundStageTime");
static_assert(offsetof(GBGameMode_GetDefaultRoundStageTime, RoundStageName) == 0x000000, "Member 'GBGameMode_GetDefaultRoundStageTime::RoundStageName' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetDefaultRoundStageTime, ReturnValue) == 0x000008, "Member 'GBGameMode_GetDefaultRoundStageTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetDisplayName) == 0x000008, "Wrong alignment on GBGameMode_GetDisplayName");
static_assert(sizeof(GBGameMode_GetDisplayName) == 0x000018, "Wrong size on GBGameMode_GetDisplayName");
static_assert(offsetof(GBGameMode_GetDisplayName, ReturnValue) == 0x000000, "Member 'GBGameMode_GetDisplayName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetFinalMissionCompletionFraction
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_GetFinalMissionCompletionFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetFinalMissionCompletionFraction) == 0x000004, "Wrong alignment on GBGameMode_GetFinalMissionCompletionFraction");
static_assert(sizeof(GBGameMode_GetFinalMissionCompletionFraction) == 0x000004, "Wrong size on GBGameMode_GetFinalMissionCompletionFraction");
static_assert(offsetof(GBGameMode_GetFinalMissionCompletionFraction, ReturnValue) == 0x000000, "Member 'GBGameMode_GetFinalMissionCompletionFraction::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetGameModeModID
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetGameModeModID final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetGameModeModID) == 0x000008, "Wrong alignment on GBGameMode_GetGameModeModID");
static_assert(sizeof(GBGameMode_GetGameModeModID) == 0x000008, "Wrong size on GBGameMode_GetGameModeModID");
static_assert(offsetof(GBGameMode_GetGameModeModID, ReturnValue) == 0x000000, "Member 'GBGameMode_GetGameModeModID::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetGBWorldSettings
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetGBWorldSettings final
{
public:
	class AGBWorldSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetGBWorldSettings) == 0x000008, "Wrong alignment on GBGameMode_GetGBWorldSettings");
static_assert(sizeof(GBGameMode_GetGBWorldSettings) == 0x000008, "Wrong size on GBGameMode_GetGBWorldSettings");
static_assert(offsetof(GBGameMode_GetGBWorldSettings, ReturnValue) == 0x000000, "Member 'GBGameMode_GetGBWorldSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetMatchInfo
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_GetMatchInfo final
{
public:
	struct FGBMatchInfo                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetMatchInfo) == 0x000001, "Wrong alignment on GBGameMode_GetMatchInfo");
static_assert(sizeof(GBGameMode_GetMatchInfo) == 0x000004, "Wrong size on GBGameMode_GetMatchInfo");
static_assert(offsetof(GBGameMode_GetMatchInfo, ReturnValue) == 0x000000, "Member 'GBGameMode_GetMatchInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetMatchStartTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_GetMatchStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetMatchStartTime) == 0x000004, "Wrong alignment on GBGameMode_GetMatchStartTime");
static_assert(sizeof(GBGameMode_GetMatchStartTime) == 0x000004, "Wrong size on GBGameMode_GetMatchStartTime");
static_assert(offsetof(GBGameMode_GetMatchStartTime, ReturnValue) == 0x000000, "Member 'GBGameMode_GetMatchStartTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetMissionCompletionFraction
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_GetMissionCompletionFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetMissionCompletionFraction) == 0x000004, "Wrong alignment on GBGameMode_GetMissionCompletionFraction");
static_assert(sizeof(GBGameMode_GetMissionCompletionFraction) == 0x000004, "Wrong size on GBGameMode_GetMissionCompletionFraction");
static_assert(offsetof(GBGameMode_GetMissionCompletionFraction, ReturnValue) == 0x000000, "Member 'GBGameMode_GetMissionCompletionFraction::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetMissionData
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetMissionData final
{
public:
	class UGBMissionData*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetMissionData) == 0x000008, "Wrong alignment on GBGameMode_GetMissionData");
static_assert(sizeof(GBGameMode_GetMissionData) == 0x000008, "Wrong size on GBGameMode_GetMissionData");
static_assert(offsetof(GBGameMode_GetMissionData, ReturnValue) == 0x000000, "Member 'GBGameMode_GetMissionData::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetPermittedWeatherPresets
// 0x0010 (0x0010 - 0x0000)
struct GBGameMode_GetPermittedWeatherPresets final
{
public:
	TArray<class USkyCreatorWeatherPreset*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetPermittedWeatherPresets) == 0x000008, "Wrong alignment on GBGameMode_GetPermittedWeatherPresets");
static_assert(sizeof(GBGameMode_GetPermittedWeatherPresets) == 0x000010, "Wrong size on GBGameMode_GetPermittedWeatherPresets");
static_assert(offsetof(GBGameMode_GetPermittedWeatherPresets, ReturnValue) == 0x000000, "Member 'GBGameMode_GetPermittedWeatherPresets::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetPlayingSequenceInfo
// 0x0018 (0x0018 - 0x0000)
struct GBGameMode_GetPlayingSequenceInfo final
{
public:
	float                                         OutTime;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimeLeft;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDuration;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsCutscene;                                    // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutCanAbort;                                      // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutBlackoutAfter;                                 // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetPlayingSequenceInfo) == 0x000008, "Wrong alignment on GBGameMode_GetPlayingSequenceInfo");
static_assert(sizeof(GBGameMode_GetPlayingSequenceInfo) == 0x000018, "Wrong size on GBGameMode_GetPlayingSequenceInfo");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, OutTime) == 0x000000, "Member 'GBGameMode_GetPlayingSequenceInfo::OutTime' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, OutTimeLeft) == 0x000004, "Member 'GBGameMode_GetPlayingSequenceInfo::OutTimeLeft' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, OutDuration) == 0x000008, "Member 'GBGameMode_GetPlayingSequenceInfo::OutDuration' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, bOutIsCutscene) == 0x00000C, "Member 'GBGameMode_GetPlayingSequenceInfo::bOutIsCutscene' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, bOutCanAbort) == 0x00000D, "Member 'GBGameMode_GetPlayingSequenceInfo::bOutCanAbort' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, bOutBlackoutAfter) == 0x00000E, "Member 'GBGameMode_GetPlayingSequenceInfo::bOutBlackoutAfter' has a wrong offset!");
static_assert(offsetof(GBGameMode_GetPlayingSequenceInfo, ReturnValue) == 0x000010, "Member 'GBGameMode_GetPlayingSequenceInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetRecordStats
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_GetRecordStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetRecordStats) == 0x000001, "Wrong alignment on GBGameMode_GetRecordStats");
static_assert(sizeof(GBGameMode_GetRecordStats) == 0x000001, "Wrong size on GBGameMode_GetRecordStats");
static_assert(offsetof(GBGameMode_GetRecordStats, ReturnValue) == 0x000000, "Member 'GBGameMode_GetRecordStats::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetRoundStage
// 0x0008 (0x0008 - 0x0000)
struct GBGameMode_GetRoundStage final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetRoundStage) == 0x000004, "Wrong alignment on GBGameMode_GetRoundStage");
static_assert(sizeof(GBGameMode_GetRoundStage) == 0x000008, "Wrong size on GBGameMode_GetRoundStage");
static_assert(offsetof(GBGameMode_GetRoundStage, ReturnValue) == 0x000000, "Member 'GBGameMode_GetRoundStage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetRoundStageIsCutScene
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_GetRoundStageIsCutScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetRoundStageIsCutScene) == 0x000001, "Wrong alignment on GBGameMode_GetRoundStageIsCutScene");
static_assert(sizeof(GBGameMode_GetRoundStageIsCutScene) == 0x000001, "Wrong size on GBGameMode_GetRoundStageIsCutScene");
static_assert(offsetof(GBGameMode_GetRoundStageIsCutScene, ReturnValue) == 0x000000, "Member 'GBGameMode_GetRoundStageIsCutScene::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.GetRoundStageTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct GBGameMode_GetRoundStageTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_GetRoundStageTimeRemaining) == 0x000004, "Wrong alignment on GBGameMode_GetRoundStageTimeRemaining");
static_assert(sizeof(GBGameMode_GetRoundStageTimeRemaining) == 0x000004, "Wrong size on GBGameMode_GetRoundStageTimeRemaining");
static_assert(offsetof(GBGameMode_GetRoundStageTimeRemaining, ReturnValue) == 0x000000, "Member 'GBGameMode_GetRoundStageTimeRemaining::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.HasBots
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_HasBots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_HasBots) == 0x000001, "Wrong alignment on GBGameMode_HasBots");
static_assert(sizeof(GBGameMode_HasBots) == 0x000001, "Wrong size on GBGameMode_HasBots");
static_assert(offsetof(GBGameMode_HasBots, ReturnValue) == 0x000000, "Member 'GBGameMode_HasBots::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.HasReachedTimeLimit
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_HasReachedTimeLimit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_HasReachedTimeLimit) == 0x000001, "Wrong alignment on GBGameMode_HasReachedTimeLimit");
static_assert(sizeof(GBGameMode_HasReachedTimeLimit) == 0x000001, "Wrong size on GBGameMode_HasReachedTimeLimit");
static_assert(offsetof(GBGameMode_HasReachedTimeLimit, ReturnValue) == 0x000000, "Member 'GBGameMode_HasReachedTimeLimit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameMode.IsEditingMission
// 0x0001 (0x0001 - 0x0000)
struct GBGameMode_IsEditingMission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameMode_IsEditingMission) == 0x000001, "Wrong alignment on GBGameMode_IsEditingMission");
static_assert(sizeof(GBGameMode_IsEditingMission) == 0x000001, "Wrong size on GBGameMode_IsEditingMission");
static_assert(offsetof(GBGameMode_IsEditingMission, ReturnValue) == 0x000000, "Member 'GBGameMode_IsEditingMission::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeActorInterface.IsActive
// 0x0001 (0x0001 - 0x0000)
struct GBGameModeActorInterface_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeActorInterface_IsActive) == 0x000001, "Wrong alignment on GBGameModeActorInterface_IsActive");
static_assert(sizeof(GBGameModeActorInterface_IsActive) == 0x000001, "Wrong size on GBGameModeActorInterface_IsActive");
static_assert(offsetof(GBGameModeActorInterface_IsActive, ReturnValue) == 0x000000, "Member 'GBGameModeActorInterface_IsActive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeActorInterface.SetActive
// 0x0001 (0x0001 - 0x0000)
struct GBGameModeActorInterface_SetActive final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeActorInterface_SetActive) == 0x000001, "Wrong alignment on GBGameModeActorInterface_SetActive");
static_assert(sizeof(GBGameModeActorInterface_SetActive) == 0x000001, "Wrong size on GBGameModeActorInterface_SetActive");
static_assert(offsetof(GBGameModeActorInterface_SetActive, bNewActive) == 0x000000, "Member 'GBGameModeActorInterface_SetActive::bNewActive' has a wrong offset!");

// Function GroundBranch.GBGameModeFunctionLibrary.GetGameModeOptions
// 0x0018 (0x0018 - 0x0000)
struct GBGameModeFunctionLibrary_GetGameModeOptions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeFunctionLibrary_GetGameModeOptions) == 0x000008, "Wrong alignment on GBGameModeFunctionLibrary_GetGameModeOptions");
static_assert(sizeof(GBGameModeFunctionLibrary_GetGameModeOptions) == 0x000018, "Wrong size on GBGameModeFunctionLibrary_GetGameModeOptions");
static_assert(offsetof(GBGameModeFunctionLibrary_GetGameModeOptions, WorldContextObject) == 0x000000, "Member 'GBGameModeFunctionLibrary_GetGameModeOptions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameModeFunctionLibrary_GetGameModeOptions, ReturnValue) == 0x000008, "Member 'GBGameModeFunctionLibrary_GetGameModeOptions::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionExtension
// 0x0010 (0x0010 - 0x0000)
struct GBGameModeFunctionLibrary_GetMissionExtension final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeFunctionLibrary_GetMissionExtension) == 0x000008, "Wrong alignment on GBGameModeFunctionLibrary_GetMissionExtension");
static_assert(sizeof(GBGameModeFunctionLibrary_GetMissionExtension) == 0x000010, "Wrong size on GBGameModeFunctionLibrary_GetMissionExtension");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionExtension, ReturnValue) == 0x000000, "Member 'GBGameModeFunctionLibrary_GetMissionExtension::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionFileName
// 0x0030 (0x0030 - 0x0000)
struct GBGameModeFunctionLibrary_GetMissionFileName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeFunctionLibrary_GetMissionFileName) == 0x000008, "Wrong alignment on GBGameModeFunctionLibrary_GetMissionFileName");
static_assert(sizeof(GBGameModeFunctionLibrary_GetMissionFileName) == 0x000030, "Wrong size on GBGameModeFunctionLibrary_GetMissionFileName");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionFileName, WorldContextObject) == 0x000000, "Member 'GBGameModeFunctionLibrary_GetMissionFileName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionFileName, MissionName) == 0x000008, "Member 'GBGameModeFunctionLibrary_GetMissionFileName::MissionName' has a wrong offset!");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionFileName, ModID) == 0x000018, "Member 'GBGameModeFunctionLibrary_GetMissionFileName::ModID' has a wrong offset!");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionFileName, ReturnValue) == 0x000020, "Member 'GBGameModeFunctionLibrary_GetMissionFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionScriptFileName
// 0x0020 (0x0020 - 0x0000)
struct GBGameModeFunctionLibrary_GetMissionScriptFileName final
{
public:
	class FString                                 ScriptName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeFunctionLibrary_GetMissionScriptFileName) == 0x000008, "Wrong alignment on GBGameModeFunctionLibrary_GetMissionScriptFileName");
static_assert(sizeof(GBGameModeFunctionLibrary_GetMissionScriptFileName) == 0x000020, "Wrong size on GBGameModeFunctionLibrary_GetMissionScriptFileName");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionScriptFileName, ScriptName) == 0x000000, "Member 'GBGameModeFunctionLibrary_GetMissionScriptFileName::ScriptName' has a wrong offset!");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionScriptFileName, ReturnValue) == 0x000010, "Member 'GBGameModeFunctionLibrary_GetMissionScriptFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionVersion
// 0x0004 (0x0004 - 0x0000)
struct GBGameModeFunctionLibrary_GetMissionVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeFunctionLibrary_GetMissionVersion) == 0x000004, "Wrong alignment on GBGameModeFunctionLibrary_GetMissionVersion");
static_assert(sizeof(GBGameModeFunctionLibrary_GetMissionVersion) == 0x000004, "Wrong size on GBGameModeFunctionLibrary_GetMissionVersion");
static_assert(offsetof(GBGameModeFunctionLibrary_GetMissionVersion, ReturnValue) == 0x000000, "Member 'GBGameModeFunctionLibrary_GetMissionVersion::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeLuaState.DebugPrint
// 0x0048 (0x0048 - 0x0000)
struct GBGameModeLuaState_DebugPrint final
{
public:
	struct FLuaValue                              Message;                                           // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeLuaState_DebugPrint) == 0x000008, "Wrong alignment on GBGameModeLuaState_DebugPrint");
static_assert(sizeof(GBGameModeLuaState_DebugPrint) == 0x000048, "Wrong size on GBGameModeLuaState_DebugPrint");
static_assert(offsetof(GBGameModeLuaState_DebugPrint, Message) == 0x000000, "Member 'GBGameModeLuaState_DebugPrint::Message' has a wrong offset!");

// Function GroundBranch.GBGameModeLuaState.GetComp
// 0x0090 (0x0090 - 0x0000)
struct GBGameModeLuaState_GetComp final
{
public:
	struct FLuaValue                              Self;                                              // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeLuaState_GetComp) == 0x000008, "Wrong alignment on GBGameModeLuaState_GetComp");
static_assert(sizeof(GBGameModeLuaState_GetComp) == 0x000090, "Wrong size on GBGameModeLuaState_GetComp");
static_assert(offsetof(GBGameModeLuaState_GetComp, Self) == 0x000000, "Member 'GBGameModeLuaState_GetComp::Self' has a wrong offset!");
static_assert(offsetof(GBGameModeLuaState_GetComp, ReturnValue) == 0x000048, "Member 'GBGameModeLuaState_GetComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeLuaState.GetScript
// 0x0090 (0x0090 - 0x0000)
struct GBGameModeLuaState_GetScript final
{
public:
	struct FLuaValue                              Self;                                              // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeLuaState_GetScript) == 0x000008, "Wrong alignment on GBGameModeLuaState_GetScript");
static_assert(sizeof(GBGameModeLuaState_GetScript) == 0x000090, "Wrong size on GBGameModeLuaState_GetScript");
static_assert(offsetof(GBGameModeLuaState_GetScript, Self) == 0x000000, "Member 'GBGameModeLuaState_GetScript::Self' has a wrong offset!");
static_assert(offsetof(GBGameModeLuaState_GetScript, ReturnValue) == 0x000048, "Member 'GBGameModeLuaState_GetScript::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameModeLuaState.GetTimeSeconds
// 0x0048 (0x0048 - 0x0000)
struct GBGameModeLuaState_GetTimeSeconds final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameModeLuaState_GetTimeSeconds) == 0x000008, "Wrong alignment on GBGameModeLuaState_GetTimeSeconds");
static_assert(sizeof(GBGameModeLuaState_GetTimeSeconds) == 0x000048, "Wrong size on GBGameModeLuaState_GetTimeSeconds");
static_assert(offsetof(GBGameModeLuaState_GetTimeSeconds, ReturnValue) == 0x000000, "Member 'GBGameModeLuaState_GetTimeSeconds::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.BindActionToKey
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_BindActionToKey final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputBoundKey                         TargetKey;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_BindActionToKey) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_BindActionToKey");
static_assert(sizeof(GBUIFunctionLibrary_BindActionToKey) == 0x000028, "Wrong size on GBUIFunctionLibrary_BindActionToKey");
static_assert(offsetof(GBUIFunctionLibrary_BindActionToKey, ActionName) == 0x000000, "Member 'GBUIFunctionLibrary_BindActionToKey::ActionName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BindActionToKey, TargetKey) == 0x000008, "Member 'GBUIFunctionLibrary_BindActionToKey::TargetKey' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.BindAxisToKey
// 0x0030 (0x0030 - 0x0000)
struct GBUIFunctionLibrary_BindAxisToKey final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputBoundKey                         TargetKey;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_BindAxisToKey) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_BindAxisToKey");
static_assert(sizeof(GBUIFunctionLibrary_BindAxisToKey) == 0x000030, "Wrong size on GBUIFunctionLibrary_BindAxisToKey");
static_assert(offsetof(GBUIFunctionLibrary_BindAxisToKey, AxisName) == 0x000000, "Member 'GBUIFunctionLibrary_BindAxisToKey::AxisName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BindAxisToKey, TargetKey) == 0x000008, "Member 'GBUIFunctionLibrary_BindAxisToKey::TargetKey' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BindAxisToKey, Scale) == 0x000028, "Member 'GBUIFunctionLibrary_BindAxisToKey::Scale' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.BindExecToKey
// 0x0030 (0x0030 - 0x0000)
struct GBUIFunctionLibrary_BindExecToKey final
{
public:
	class FString                                 ExecCommand;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputBoundKey                         TargetKey;                                         // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_BindExecToKey) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_BindExecToKey");
static_assert(sizeof(GBUIFunctionLibrary_BindExecToKey) == 0x000030, "Wrong size on GBUIFunctionLibrary_BindExecToKey");
static_assert(offsetof(GBUIFunctionLibrary_BindExecToKey, ExecCommand) == 0x000000, "Member 'GBUIFunctionLibrary_BindExecToKey::ExecCommand' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BindExecToKey, TargetKey) == 0x000010, "Member 'GBUIFunctionLibrary_BindExecToKey::TargetKey' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.BreakGeometry
// 0x0054 (0x0054 - 0x0000)
struct GBUIFunctionLibrary_BreakGeometry final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPosition;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutAbsolutePosition;                               // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutSize;                                           // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScale;                                          // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_BreakGeometry) == 0x000004, "Wrong alignment on GBUIFunctionLibrary_BreakGeometry");
static_assert(sizeof(GBUIFunctionLibrary_BreakGeometry) == 0x000054, "Wrong size on GBUIFunctionLibrary_BreakGeometry");
static_assert(offsetof(GBUIFunctionLibrary_BreakGeometry, Geometry) == 0x000000, "Member 'GBUIFunctionLibrary_BreakGeometry::Geometry' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BreakGeometry, OutPosition) == 0x000038, "Member 'GBUIFunctionLibrary_BreakGeometry::OutPosition' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BreakGeometry, OutAbsolutePosition) == 0x000040, "Member 'GBUIFunctionLibrary_BreakGeometry::OutAbsolutePosition' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BreakGeometry, OutSize) == 0x000048, "Member 'GBUIFunctionLibrary_BreakGeometry::OutSize' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_BreakGeometry, OutScale) == 0x000050, "Member 'GBUIFunctionLibrary_BreakGeometry::OutScale' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.CheckForThreeLetterProfanity
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_CheckForThreeLetterProfanity final
{
public:
	class FString                                 ThreeLetterCode;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_CheckForThreeLetterProfanity) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_CheckForThreeLetterProfanity");
static_assert(sizeof(GBUIFunctionLibrary_CheckForThreeLetterProfanity) == 0x000018, "Wrong size on GBUIFunctionLibrary_CheckForThreeLetterProfanity");
static_assert(offsetof(GBUIFunctionLibrary_CheckForThreeLetterProfanity, ThreeLetterCode) == 0x000000, "Member 'GBUIFunctionLibrary_CheckForThreeLetterProfanity::ThreeLetterCode' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_CheckForThreeLetterProfanity, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_CheckForThreeLetterProfanity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.DisplayDialogWidget
// 0x0058 (0x0058 - 0x0000)
struct GBUIFunctionLibrary_DisplayDialogWidget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DialogName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGBDialogWidget>            DialogWidgetClass;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGBMessageDialogType                          DialogType;                                        // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfDestructTime;                                  // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBDialogWidget*                        ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_DisplayDialogWidget) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_DisplayDialogWidget");
static_assert(sizeof(GBUIFunctionLibrary_DisplayDialogWidget) == 0x000058, "Wrong size on GBUIFunctionLibrary_DisplayDialogWidget");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, WorldContextObject) == 0x000000, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, DialogName) == 0x000008, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::DialogName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, DialogWidgetClass) == 0x000010, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::DialogWidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, Title) == 0x000018, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::Title' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, Message) == 0x000030, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::Message' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, DialogType) == 0x000048, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::DialogType' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, SelfDestructTime) == 0x00004C, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::SelfDestructTime' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DisplayDialogWidget, ReturnValue) == 0x000050, "Member 'GBUIFunctionLibrary_DisplayDialogWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.DoesStringTableEntryExist
// 0x0038 (0x0038 - 0x0000)
struct GBUIFunctionLibrary_DoesStringTableEntryExist final
{
public:
	class FName                                   StringTableId;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKey;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyPrefix;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_DoesStringTableEntryExist) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_DoesStringTableEntryExist");
static_assert(sizeof(GBUIFunctionLibrary_DoesStringTableEntryExist) == 0x000038, "Wrong size on GBUIFunctionLibrary_DoesStringTableEntryExist");
static_assert(offsetof(GBUIFunctionLibrary_DoesStringTableEntryExist, StringTableId) == 0x000000, "Member 'GBUIFunctionLibrary_DoesStringTableEntryExist::StringTableId' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DoesStringTableEntryExist, InKey) == 0x000008, "Member 'GBUIFunctionLibrary_DoesStringTableEntryExist::InKey' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DoesStringTableEntryExist, KeyPrefix) == 0x000018, "Member 'GBUIFunctionLibrary_DoesStringTableEntryExist::KeyPrefix' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DoesStringTableEntryExist, ModID) == 0x000028, "Member 'GBUIFunctionLibrary_DoesStringTableEntryExist::ModID' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_DoesStringTableEntryExist, ReturnValue) == 0x000030, "Member 'GBUIFunctionLibrary_DoesStringTableEntryExist::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.FindScreenEdgeLocationForWorldLocation
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgePercent;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScreenPosition;                                 // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRotationAngleDegrees;                           // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnScreen;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation");
static_assert(sizeof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation) == 0x000028, "Wrong size on GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation, WorldContextObject) == 0x000000, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation, InLocation) == 0x000008, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation::InLocation' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation, EdgePercent) == 0x000014, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation::EdgePercent' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation, OutScreenPosition) == 0x000018, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation::OutScreenPosition' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation, OutRotationAngleDegrees) == 0x000020, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation::OutRotationAngleDegrees' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation, bIsOnScreen) == 0x000024, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation::bIsOnScreen' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.FindScreenEdgeLocationForWorldLocationAlt
// 0x0060 (0x0060 - 0x0000)
struct GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt final
{
public:
	struct FTransform                             ViewTM;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenSize;                                        // 0x0034(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgePercent;                                       // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScreenPosition;                                 // 0x004C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRotationAngleDegrees;                           // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnScreen;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt) == 0x000010, "Wrong alignment on GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt");
static_assert(sizeof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt) == 0x000060, "Wrong size on GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, ViewTM) == 0x000000, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::ViewTM' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, FOV) == 0x000030, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::FOV' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, ScreenSize) == 0x000034, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::ScreenSize' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, WorldLocation) == 0x00003C, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::WorldLocation' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, EdgePercent) == 0x000048, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::EdgePercent' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, OutScreenPosition) == 0x00004C, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::OutScreenPosition' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, OutRotationAngleDegrees) == 0x000054, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::OutRotationAngleDegrees' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt, bIsOnScreen) == 0x000058, "Member 'GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt::bIsOnScreen' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.ForcePlayerInputUpdate
// 0x0008 (0x0008 - 0x0000)
struct GBUIFunctionLibrary_ForcePlayerInputUpdate final
{
public:
	class APlayerController*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_ForcePlayerInputUpdate) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_ForcePlayerInputUpdate");
static_assert(sizeof(GBUIFunctionLibrary_ForcePlayerInputUpdate) == 0x000008, "Wrong size on GBUIFunctionLibrary_ForcePlayerInputUpdate");
static_assert(offsetof(GBUIFunctionLibrary_ForcePlayerInputUpdate, Target) == 0x000000, "Member 'GBUIFunctionLibrary_ForcePlayerInputUpdate::Target' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetBoundKeyFromKeyEvent
// 0x0058 (0x0058 - 0x0000)
struct GBUIFunctionLibrary_GetBoundKeyFromKeyEvent final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInputBoundKey                         ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetBoundKeyFromKeyEvent) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetBoundKeyFromKeyEvent");
static_assert(sizeof(GBUIFunctionLibrary_GetBoundKeyFromKeyEvent) == 0x000058, "Wrong size on GBUIFunctionLibrary_GetBoundKeyFromKeyEvent");
static_assert(offsetof(GBUIFunctionLibrary_GetBoundKeyFromKeyEvent, KeyEvent) == 0x000000, "Member 'GBUIFunctionLibrary_GetBoundKeyFromKeyEvent::KeyEvent' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetBoundKeyFromKeyEvent, ReturnValue) == 0x000038, "Member 'GBUIFunctionLibrary_GetBoundKeyFromKeyEvent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetChildrenOfClass
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_GetChildrenOfClass final
{
public:
	class UWidget*                                ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    ChildWidgets;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediateOnly;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_GetChildrenOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetChildrenOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetChildrenOfClass) == 0x000028, "Wrong size on GBUIFunctionLibrary_GetChildrenOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetChildrenOfClass, ParentWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetChildrenOfClass::ParentWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetChildrenOfClass, ChildWidgets) == 0x000008, "Member 'GBUIFunctionLibrary_GetChildrenOfClass::ChildWidgets' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetChildrenOfClass, WidgetClass) == 0x000018, "Member 'GBUIFunctionLibrary_GetChildrenOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetChildrenOfClass, bImmediateOnly) == 0x000020, "Member 'GBUIFunctionLibrary_GetChildrenOfClass::bImmediateOnly' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetChildWidgetsOfClass
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_GetChildWidgetsOfClass final
{
public:
	class UWidget*                                ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        ChildWidgets;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediateOnly;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_GetChildWidgetsOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetChildWidgetsOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetChildWidgetsOfClass) == 0x000028, "Wrong size on GBUIFunctionLibrary_GetChildWidgetsOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetChildWidgetsOfClass, ParentWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetChildWidgetsOfClass::ParentWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetChildWidgetsOfClass, ChildWidgets) == 0x000008, "Member 'GBUIFunctionLibrary_GetChildWidgetsOfClass::ChildWidgets' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetChildWidgetsOfClass, WidgetClass) == 0x000018, "Member 'GBUIFunctionLibrary_GetChildWidgetsOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetChildWidgetsOfClass, bImmediateOnly) == 0x000020, "Member 'GBUIFunctionLibrary_GetChildWidgetsOfClass::bImmediateOnly' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetCommandBoundKey
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_GetCommandBoundKey final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputBoundKey                         ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetCommandBoundKey) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetCommandBoundKey");
static_assert(sizeof(GBUIFunctionLibrary_GetCommandBoundKey) == 0x000028, "Wrong size on GBUIFunctionLibrary_GetCommandBoundKey");
static_assert(offsetof(GBUIFunctionLibrary_GetCommandBoundKey, Command) == 0x000000, "Member 'GBUIFunctionLibrary_GetCommandBoundKey::Command' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetCommandBoundKey, ReturnValue) == 0x000008, "Member 'GBUIFunctionLibrary_GetCommandBoundKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetCommandBoundKeys
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_GetCommandBoundKeys final
{
public:
	class FName                                   Command;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputBoundKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetCommandBoundKeys) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetCommandBoundKeys");
static_assert(sizeof(GBUIFunctionLibrary_GetCommandBoundKeys) == 0x000018, "Wrong size on GBUIFunctionLibrary_GetCommandBoundKeys");
static_assert(offsetof(GBUIFunctionLibrary_GetCommandBoundKeys, Command) == 0x000000, "Member 'GBUIFunctionLibrary_GetCommandBoundKeys::Command' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetCommandBoundKeys, ReturnValue) == 0x000008, "Member 'GBUIFunctionLibrary_GetCommandBoundKeys::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetConsoleKeys
// 0x0010 (0x0010 - 0x0000)
struct GBUIFunctionLibrary_GetConsoleKeys final
{
public:
	TArray<struct FKey>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetConsoleKeys) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetConsoleKeys");
static_assert(sizeof(GBUIFunctionLibrary_GetConsoleKeys) == 0x000010, "Wrong size on GBUIFunctionLibrary_GetConsoleKeys");
static_assert(offsetof(GBUIFunctionLibrary_GetConsoleKeys, ReturnValue) == 0x000000, "Member 'GBUIFunctionLibrary_GetConsoleKeys::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetDoubleClickTime
// 0x0004 (0x0004 - 0x0000)
struct GBUIFunctionLibrary_GetDoubleClickTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetDoubleClickTime) == 0x000004, "Wrong alignment on GBUIFunctionLibrary_GetDoubleClickTime");
static_assert(sizeof(GBUIFunctionLibrary_GetDoubleClickTime) == 0x000004, "Wrong size on GBUIFunctionLibrary_GetDoubleClickTime");
static_assert(offsetof(GBUIFunctionLibrary_GetDoubleClickTime, ReturnValue) == 0x000000, "Member 'GBUIFunctionLibrary_GetDoubleClickTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetFirstChildOfClass
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_GetFirstChildOfClass final
{
public:
	class UWidget*                                ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediateOnly;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetFirstChildOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetFirstChildOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetFirstChildOfClass) == 0x000020, "Wrong size on GBUIFunctionLibrary_GetFirstChildOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildOfClass, ParentWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetFirstChildOfClass::ParentWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildOfClass, WidgetClass) == 0x000008, "Member 'GBUIFunctionLibrary_GetFirstChildOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildOfClass, bImmediateOnly) == 0x000010, "Member 'GBUIFunctionLibrary_GetFirstChildOfClass::bImmediateOnly' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildOfClass, ReturnValue) == 0x000018, "Member 'GBUIFunctionLibrary_GetFirstChildOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetFirstChildWidgetOfClass
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_GetFirstChildWidgetOfClass final
{
public:
	class UWidget*                                ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediateOnly;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetFirstChildWidgetOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetFirstChildWidgetOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetFirstChildWidgetOfClass) == 0x000020, "Wrong size on GBUIFunctionLibrary_GetFirstChildWidgetOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildWidgetOfClass, ParentWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetFirstChildWidgetOfClass::ParentWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildWidgetOfClass, WidgetClass) == 0x000008, "Member 'GBUIFunctionLibrary_GetFirstChildWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildWidgetOfClass, bImmediateOnly) == 0x000010, "Member 'GBUIFunctionLibrary_GetFirstChildWidgetOfClass::bImmediateOnly' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstChildWidgetOfClass, ReturnValue) == 0x000018, "Member 'GBUIFunctionLibrary_GetFirstChildWidgetOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetFirstWidgetOfClass
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_GetFirstWidgetOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetFirstWidgetOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetFirstWidgetOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetFirstWidgetOfClass) == 0x000020, "Wrong size on GBUIFunctionLibrary_GetFirstWidgetOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstWidgetOfClass, WorldContextObject) == 0x000000, "Member 'GBUIFunctionLibrary_GetFirstWidgetOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstWidgetOfClass, WidgetClass) == 0x000008, "Member 'GBUIFunctionLibrary_GetFirstWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstWidgetOfClass, TopLevelOnly) == 0x000010, "Member 'GBUIFunctionLibrary_GetFirstWidgetOfClass::TopLevelOnly' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetFirstWidgetOfClass, ReturnValue) == 0x000018, "Member 'GBUIFunctionLibrary_GetFirstWidgetOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetLayoutVariantBlueprints
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_GetLayoutVariantBlueprints final
{
public:
	class FString                                 SearchPathName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AActor>>          OutActorPtrs;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_GetLayoutVariantBlueprints) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetLayoutVariantBlueprints");
static_assert(sizeof(GBUIFunctionLibrary_GetLayoutVariantBlueprints) == 0x000028, "Wrong size on GBUIFunctionLibrary_GetLayoutVariantBlueprints");
static_assert(offsetof(GBUIFunctionLibrary_GetLayoutVariantBlueprints, SearchPathName) == 0x000000, "Member 'GBUIFunctionLibrary_GetLayoutVariantBlueprints::SearchPathName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetLayoutVariantBlueprints, OutActorPtrs) == 0x000010, "Member 'GBUIFunctionLibrary_GetLayoutVariantBlueprints::OutActorPtrs' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetLayoutVariantBlueprints, ReturnValue) == 0x000020, "Member 'GBUIFunctionLibrary_GetLayoutVariantBlueprints::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetLocalisedGameplayTagText
// 0x0028 (0x0028 - 0x0000)
struct GBUIFunctionLibrary_GetLocalisedGameplayTagText final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBLocalisedGameplayTagFormat                 GameplayTagFormat;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripSpaces;                                      // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetLocalisedGameplayTagText) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetLocalisedGameplayTagText");
static_assert(sizeof(GBUIFunctionLibrary_GetLocalisedGameplayTagText) == 0x000028, "Wrong size on GBUIFunctionLibrary_GetLocalisedGameplayTagText");
static_assert(offsetof(GBUIFunctionLibrary_GetLocalisedGameplayTagText, GameplayTag) == 0x000000, "Member 'GBUIFunctionLibrary_GetLocalisedGameplayTagText::GameplayTag' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetLocalisedGameplayTagText, GameplayTagFormat) == 0x000008, "Member 'GBUIFunctionLibrary_GetLocalisedGameplayTagText::GameplayTagFormat' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetLocalisedGameplayTagText, bStripSpaces) == 0x000009, "Member 'GBUIFunctionLibrary_GetLocalisedGameplayTagText::bStripSpaces' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetLocalisedGameplayTagText, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_GetLocalisedGameplayTagText::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetMapInfo
// 0x0050 (0x0050 - 0x0000)
struct GBUIFunctionLibrary_GetMapInfo final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutTitle;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutAuthor;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0030(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_GetMapInfo) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetMapInfo");
static_assert(sizeof(GBUIFunctionLibrary_GetMapInfo) == 0x000050, "Wrong size on GBUIFunctionLibrary_GetMapInfo");
static_assert(offsetof(GBUIFunctionLibrary_GetMapInfo, MapName) == 0x000000, "Member 'GBUIFunctionLibrary_GetMapInfo::MapName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapInfo, OutTitle) == 0x000010, "Member 'GBUIFunctionLibrary_GetMapInfo::OutTitle' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapInfo, OutAuthor) == 0x000020, "Member 'GBUIFunctionLibrary_GetMapInfo::OutAuthor' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapInfo, OutDescription) == 0x000030, "Member 'GBUIFunctionLibrary_GetMapInfo::OutDescription' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapInfo, ReturnValue) == 0x000048, "Member 'GBUIFunctionLibrary_GetMapInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetMapList
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_GetMapList final
{
public:
	class FString                                 GameModePrefix;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMapListItem>                   OutMapList;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetMapList) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetMapList");
static_assert(sizeof(GBUIFunctionLibrary_GetMapList) == 0x000020, "Wrong size on GBUIFunctionLibrary_GetMapList");
static_assert(offsetof(GBUIFunctionLibrary_GetMapList, GameModePrefix) == 0x000000, "Member 'GBUIFunctionLibrary_GetMapList::GameModePrefix' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapList, OutMapList) == 0x000010, "Member 'GBUIFunctionLibrary_GetMapList::OutMapList' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetMapScreenshots
// 0x0038 (0x0038 - 0x0000)
struct GBUIFunctionLibrary_GetMapScreenshots final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      OutScreenShotPtrs;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_GetMapScreenshots) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetMapScreenshots");
static_assert(sizeof(GBUIFunctionLibrary_GetMapScreenshots) == 0x000038, "Wrong size on GBUIFunctionLibrary_GetMapScreenshots");
static_assert(offsetof(GBUIFunctionLibrary_GetMapScreenshots, Prefix) == 0x000000, "Member 'GBUIFunctionLibrary_GetMapScreenshots::Prefix' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapScreenshots, MapName) == 0x000010, "Member 'GBUIFunctionLibrary_GetMapScreenshots::MapName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapScreenshots, OutScreenShotPtrs) == 0x000020, "Member 'GBUIFunctionLibrary_GetMapScreenshots::OutScreenShotPtrs' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMapScreenshots, ReturnValue) == 0x000030, "Member 'GBUIFunctionLibrary_GetMapScreenshots::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetMonitorNativeResolutions
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_GetMonitorNativeResolutions final
{
public:
	TArray<struct FVector2D>                      OutMonitorResolutions;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_GetMonitorNativeResolutions) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetMonitorNativeResolutions");
static_assert(sizeof(GBUIFunctionLibrary_GetMonitorNativeResolutions) == 0x000018, "Wrong size on GBUIFunctionLibrary_GetMonitorNativeResolutions");
static_assert(offsetof(GBUIFunctionLibrary_GetMonitorNativeResolutions, OutMonitorResolutions) == 0x000000, "Member 'GBUIFunctionLibrary_GetMonitorNativeResolutions::OutMonitorResolutions' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetMonitorNativeResolutions, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_GetMonitorNativeResolutions::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetParentOfClass
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_GetParentOfClass final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetParentOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetParentOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetParentOfClass) == 0x000018, "Wrong size on GBUIFunctionLibrary_GetParentOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetParentOfClass, ChildWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetParentOfClass::ChildWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetParentOfClass, WidgetClass) == 0x000008, "Member 'GBUIFunctionLibrary_GetParentOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetParentOfClass, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_GetParentOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetParentWidgetOfClass
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_GetParentWidgetOfClass final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetParentWidgetOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetParentWidgetOfClass");
static_assert(sizeof(GBUIFunctionLibrary_GetParentWidgetOfClass) == 0x000018, "Wrong size on GBUIFunctionLibrary_GetParentWidgetOfClass");
static_assert(offsetof(GBUIFunctionLibrary_GetParentWidgetOfClass, ChildWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetParentWidgetOfClass::ChildWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetParentWidgetOfClass, WidgetClass) == 0x000008, "Member 'GBUIFunctionLibrary_GetParentWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetParentWidgetOfClass, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_GetParentWidgetOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetStringTableEntryOrDisplayString
// 0x0048 (0x0048 - 0x0000)
struct GBUIFunctionLibrary_GetStringTableEntryOrDisplayString final
{
public:
	class FName                                   StringTableId;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKey;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyPrefix;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetStringTableEntryOrDisplayString");
static_assert(sizeof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString) == 0x000048, "Wrong size on GBUIFunctionLibrary_GetStringTableEntryOrDisplayString");
static_assert(offsetof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString, StringTableId) == 0x000000, "Member 'GBUIFunctionLibrary_GetStringTableEntryOrDisplayString::StringTableId' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString, InKey) == 0x000008, "Member 'GBUIFunctionLibrary_GetStringTableEntryOrDisplayString::InKey' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString, KeyPrefix) == 0x000018, "Member 'GBUIFunctionLibrary_GetStringTableEntryOrDisplayString::KeyPrefix' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString, ModID) == 0x000028, "Member 'GBUIFunctionLibrary_GetStringTableEntryOrDisplayString::ModID' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetStringTableEntryOrDisplayString, ReturnValue) == 0x000030, "Member 'GBUIFunctionLibrary_GetStringTableEntryOrDisplayString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.GetWidgetFromName
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_GetWidgetFromName final
{
public:
	class UUserWidget*                            ParentUserWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_GetWidgetFromName) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_GetWidgetFromName");
static_assert(sizeof(GBUIFunctionLibrary_GetWidgetFromName) == 0x000018, "Wrong size on GBUIFunctionLibrary_GetWidgetFromName");
static_assert(offsetof(GBUIFunctionLibrary_GetWidgetFromName, ParentUserWidget) == 0x000000, "Member 'GBUIFunctionLibrary_GetWidgetFromName::ParentUserWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetWidgetFromName, Name_0) == 0x000008, "Member 'GBUIFunctionLibrary_GetWidgetFromName::Name_0' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_GetWidgetFromName, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_GetWidgetFromName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.InitStringTable
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_InitStringTable final
{
public:
	class FName                                   StringTableId;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringNameSpace;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_InitStringTable) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_InitStringTable");
static_assert(sizeof(GBUIFunctionLibrary_InitStringTable) == 0x000020, "Wrong size on GBUIFunctionLibrary_InitStringTable");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTable, StringTableId) == 0x000000, "Member 'GBUIFunctionLibrary_InitStringTable::StringTableId' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTable, StringNameSpace) == 0x000008, "Member 'GBUIFunctionLibrary_InitStringTable::StringNameSpace' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTable, ReturnValue) == 0x000018, "Member 'GBUIFunctionLibrary_InitStringTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.InitStringTableForModID
// 0x0030 (0x0030 - 0x0000)
struct GBUIFunctionLibrary_InitStringTableForModID final
{
public:
	class FName                                   StringTableId;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringNameSpace;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_InitStringTableForModID) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_InitStringTableForModID");
static_assert(sizeof(GBUIFunctionLibrary_InitStringTableForModID) == 0x000030, "Wrong size on GBUIFunctionLibrary_InitStringTableForModID");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTableForModID, StringTableId) == 0x000000, "Member 'GBUIFunctionLibrary_InitStringTableForModID::StringTableId' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTableForModID, StringNameSpace) == 0x000008, "Member 'GBUIFunctionLibrary_InitStringTableForModID::StringNameSpace' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTableForModID, ModID) == 0x000018, "Member 'GBUIFunctionLibrary_InitStringTableForModID::ModID' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTableForModID, WorldContextObject) == 0x000020, "Member 'GBUIFunctionLibrary_InitStringTableForModID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InitStringTableForModID, ReturnValue) == 0x000028, "Member 'GBUIFunctionLibrary_InitStringTableForModID::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.InsertChildAt
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_InsertChildAt final
{
public:
	class UWidget*                                Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Content;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_InsertChildAt) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_InsertChildAt");
static_assert(sizeof(GBUIFunctionLibrary_InsertChildAt) == 0x000020, "Wrong size on GBUIFunctionLibrary_InsertChildAt");
static_assert(offsetof(GBUIFunctionLibrary_InsertChildAt, Parent) == 0x000000, "Member 'GBUIFunctionLibrary_InsertChildAt::Parent' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InsertChildAt, Index_0) == 0x000008, "Member 'GBUIFunctionLibrary_InsertChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InsertChildAt, Content) == 0x000010, "Member 'GBUIFunctionLibrary_InsertChildAt::Content' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_InsertChildAt, ReturnValue) == 0x000018, "Member 'GBUIFunctionLibrary_InsertChildAt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.IsChildOf
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_IsChildOf final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                PossibleParent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_IsChildOf) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_IsChildOf");
static_assert(sizeof(GBUIFunctionLibrary_IsChildOf) == 0x000018, "Wrong size on GBUIFunctionLibrary_IsChildOf");
static_assert(offsetof(GBUIFunctionLibrary_IsChildOf, ChildWidget) == 0x000000, "Member 'GBUIFunctionLibrary_IsChildOf::ChildWidget' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_IsChildOf, PossibleParent) == 0x000008, "Member 'GBUIFunctionLibrary_IsChildOf::PossibleParent' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_IsChildOf, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_IsChildOf::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.RemoveAllWidgetsOfClass
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_RemoveAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBUIFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(sizeof(GBUIFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000018, "Wrong size on GBUIFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(offsetof(GBUIFunctionLibrary_RemoveAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'GBUIFunctionLibrary_RemoveAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_RemoveAllWidgetsOfClass, WidgetClass) == 0x000008, "Member 'GBUIFunctionLibrary_RemoveAllWidgetsOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_RemoveAllWidgetsOfClass, TopLevelOnly) == 0x000010, "Member 'GBUIFunctionLibrary_RemoveAllWidgetsOfClass::TopLevelOnly' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.SetConsoleKeys
// 0x0010 (0x0010 - 0x0000)
struct GBUIFunctionLibrary_SetConsoleKeys final
{
public:
	TArray<struct FKey>                           NewConsoleKeys;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_SetConsoleKeys) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_SetConsoleKeys");
static_assert(sizeof(GBUIFunctionLibrary_SetConsoleKeys) == 0x000010, "Wrong size on GBUIFunctionLibrary_SetConsoleKeys");
static_assert(offsetof(GBUIFunctionLibrary_SetConsoleKeys, NewConsoleKeys) == 0x000000, "Member 'GBUIFunctionLibrary_SetConsoleKeys::NewConsoleKeys' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.SetMousePosition
// 0x0008 (0x0008 - 0x0000)
struct GBUIFunctionLibrary_SetMousePosition final
{
public:
	struct FVector2D                              MousePosition;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_SetMousePosition) == 0x000004, "Wrong alignment on GBUIFunctionLibrary_SetMousePosition");
static_assert(sizeof(GBUIFunctionLibrary_SetMousePosition) == 0x000008, "Wrong size on GBUIFunctionLibrary_SetMousePosition");
static_assert(offsetof(GBUIFunctionLibrary_SetMousePosition, MousePosition) == 0x000000, "Member 'GBUIFunctionLibrary_SetMousePosition::MousePosition' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.UnBindCommand
// 0x0008 (0x0008 - 0x0000)
struct GBUIFunctionLibrary_UnBindCommand final
{
public:
	class FName                                   CommandName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_UnBindCommand) == 0x000004, "Wrong alignment on GBUIFunctionLibrary_UnBindCommand");
static_assert(sizeof(GBUIFunctionLibrary_UnBindCommand) == 0x000008, "Wrong size on GBUIFunctionLibrary_UnBindCommand");
static_assert(offsetof(GBUIFunctionLibrary_UnBindCommand, CommandName) == 0x000000, "Member 'GBUIFunctionLibrary_UnBindCommand::CommandName' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.UnbindKey
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_UnbindKey final
{
public:
	struct FInputBoundKey                         TargetKey;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_UnbindKey) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_UnbindKey");
static_assert(sizeof(GBUIFunctionLibrary_UnbindKey) == 0x000020, "Wrong size on GBUIFunctionLibrary_UnbindKey");
static_assert(offsetof(GBUIFunctionLibrary_UnbindKey, TargetKey) == 0x000000, "Member 'GBUIFunctionLibrary_UnbindKey::TargetKey' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.UnbindKeybindCommand
// 0x0020 (0x0020 - 0x0000)
struct GBUIFunctionLibrary_UnbindKeybindCommand final
{
public:
	class FName                                   CommandName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_UnbindKeybindCommand) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_UnbindKeybindCommand");
static_assert(sizeof(GBUIFunctionLibrary_UnbindKeybindCommand) == 0x000020, "Wrong size on GBUIFunctionLibrary_UnbindKeybindCommand");
static_assert(offsetof(GBUIFunctionLibrary_UnbindKeybindCommand, CommandName) == 0x000000, "Member 'GBUIFunctionLibrary_UnbindKeybindCommand::CommandName' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_UnbindKeybindCommand, Key) == 0x000008, "Member 'GBUIFunctionLibrary_UnbindKeybindCommand::Key' has a wrong offset!");

// Function GroundBranch.GBUIFunctionLibrary.WriteWidgetToTexture
// 0x0018 (0x0018 - 0x0000)
struct GBUIFunctionLibrary_WriteWidgetToTexture final
{
public:
	class UUserWidget*                            WidgetToWrite;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUIFunctionLibrary_WriteWidgetToTexture) == 0x000008, "Wrong alignment on GBUIFunctionLibrary_WriteWidgetToTexture");
static_assert(sizeof(GBUIFunctionLibrary_WriteWidgetToTexture) == 0x000018, "Wrong size on GBUIFunctionLibrary_WriteWidgetToTexture");
static_assert(offsetof(GBUIFunctionLibrary_WriteWidgetToTexture, WidgetToWrite) == 0x000000, "Member 'GBUIFunctionLibrary_WriteWidgetToTexture::WidgetToWrite' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_WriteWidgetToTexture, SizeX) == 0x000008, "Member 'GBUIFunctionLibrary_WriteWidgetToTexture::SizeX' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_WriteWidgetToTexture, SizeY) == 0x00000C, "Member 'GBUIFunctionLibrary_WriteWidgetToTexture::SizeY' has a wrong offset!");
static_assert(offsetof(GBUIFunctionLibrary_WriteWidgetToTexture, ReturnValue) == 0x000010, "Member 'GBUIFunctionLibrary_WriteWidgetToTexture::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ApplyRadialDamageDirect
// 0x0058 (0x0058 - 0x0000)
struct GBGameplayStatics_ApplyRadialDamageDirect final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamage;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamage;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamageRadius;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageRadius;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_ApplyRadialDamageDirect) == 0x000008, "Wrong alignment on GBGameplayStatics_ApplyRadialDamageDirect");
static_assert(sizeof(GBGameplayStatics_ApplyRadialDamageDirect) == 0x000058, "Wrong size on GBGameplayStatics_ApplyRadialDamageDirect");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, DamagedActor) == 0x000000, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::DamagedActor' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, MaxDamage) == 0x000008, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::MaxDamage' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, MinDamage) == 0x00000C, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::MinDamage' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, MinDamageRadius) == 0x000010, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::MinDamageRadius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, MaxDamageRadius) == 0x000014, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::MaxDamageRadius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, DamageFalloff) == 0x000018, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::DamageFalloff' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, Origin) == 0x00001C, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::Origin' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, HitResults) == 0x000028, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::HitResults' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, EventInstigator) == 0x000038, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::EventInstigator' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, DamageCauser) == 0x000040, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::DamageCauser' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, DamageTypeClass) == 0x000048, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ApplyRadialDamageDirect, ReturnValue) == 0x000050, "Member 'GBGameplayStatics_ApplyRadialDamageDirect::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.CanDamageSkeletalMesh
// 0x00E0 (0x00E0 - 0x0000)
struct GBGameplayStatics_CanDamageSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Bones;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      SurfaceTypesToIgnore;                              // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0050(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_CanDamageSkeletalMesh) == 0x000008, "Wrong alignment on GBGameplayStatics_CanDamageSkeletalMesh");
static_assert(sizeof(GBGameplayStatics_CanDamageSkeletalMesh) == 0x0000E0, "Wrong size on GBGameplayStatics_CanDamageSkeletalMesh");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, SkeletalComp) == 0x000000, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::SkeletalComp' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, DamageOrigin) == 0x000008, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::DamageOrigin' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, Bones) == 0x000018, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::Bones' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, IgnoreActors) == 0x000028, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, TraceChannel) == 0x000038, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::TraceChannel' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, SurfaceTypesToIgnore) == 0x000040, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::SurfaceTypesToIgnore' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, OutHit) == 0x000050, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::OutHit' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageSkeletalMesh, ReturnValue) == 0x0000D8, "Member 'GBGameplayStatics_CanDamageSkeletalMesh::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.CanDamageStaticMesh
// 0x00D0 (0x00D0 - 0x0000)
struct GBGameplayStatics_CanDamageStaticMesh final
{
public:
	class UStaticMeshComponent*                   StaticComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTraceChecks;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      SurfaceTypesToIgnore;                              // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0040(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_CanDamageStaticMesh) == 0x000008, "Wrong alignment on GBGameplayStatics_CanDamageStaticMesh");
static_assert(sizeof(GBGameplayStatics_CanDamageStaticMesh) == 0x0000D0, "Wrong size on GBGameplayStatics_CanDamageStaticMesh");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, StaticComp) == 0x000000, "Member 'GBGameplayStatics_CanDamageStaticMesh::StaticComp' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, DamageOrigin) == 0x000008, "Member 'GBGameplayStatics_CanDamageStaticMesh::DamageOrigin' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, MaxTraceChecks) == 0x000014, "Member 'GBGameplayStatics_CanDamageStaticMesh::MaxTraceChecks' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, IgnoreActors) == 0x000018, "Member 'GBGameplayStatics_CanDamageStaticMesh::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, TraceChannel) == 0x000028, "Member 'GBGameplayStatics_CanDamageStaticMesh::TraceChannel' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, SurfaceTypesToIgnore) == 0x000030, "Member 'GBGameplayStatics_CanDamageStaticMesh::SurfaceTypesToIgnore' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, OutHit) == 0x000040, "Member 'GBGameplayStatics_CanDamageStaticMesh::OutHit' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_CanDamageStaticMesh, ReturnValue) == 0x0000C8, "Member 'GBGameplayStatics_CanDamageStaticMesh::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ConeOverlapActors
// 0x0070 (0x0070 - 0x0000)
struct GBGameplayStatics_ConeOverlapActors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                dir;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeHalfAngle;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClipDistance;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTime;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_ConeOverlapActors) == 0x000008, "Wrong alignment on GBGameplayStatics_ConeOverlapActors");
static_assert(sizeof(GBGameplayStatics_ConeOverlapActors) == 0x000070, "Wrong size on GBGameplayStatics_ConeOverlapActors");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_ConeOverlapActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, Origin) == 0x000008, "Member 'GBGameplayStatics_ConeOverlapActors::Origin' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, dir) == 0x000014, "Member 'GBGameplayStatics_ConeOverlapActors::dir' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, ConeHalfAngle) == 0x000020, "Member 'GBGameplayStatics_ConeOverlapActors::ConeHalfAngle' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, Radius) == 0x000024, "Member 'GBGameplayStatics_ConeOverlapActors::Radius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, ClipDistance) == 0x000028, "Member 'GBGameplayStatics_ConeOverlapActors::ClipDistance' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, IgnoreActors) == 0x000030, "Member 'GBGameplayStatics_ConeOverlapActors::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, ObjectTypes) == 0x000040, "Member 'GBGameplayStatics_ConeOverlapActors::ObjectTypes' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, OutActors) == 0x000050, "Member 'GBGameplayStatics_ConeOverlapActors::OutActors' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, DrawDebugType) == 0x000060, "Member 'GBGameplayStatics_ConeOverlapActors::DrawDebugType' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, DrawTime) == 0x000064, "Member 'GBGameplayStatics_ConeOverlapActors::DrawTime' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapActors, ReturnValue) == 0x000068, "Member 'GBGameplayStatics_ConeOverlapActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ConeOverlapDamageableComponentsSorted
// 0x0070 (0x0070 - 0x0000)
struct GBGameplayStatics_ConeOverlapDamageableComponentsSorted final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                dir;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeHalfAngle;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClipDistance;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTime;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted) == 0x000008, "Wrong alignment on GBGameplayStatics_ConeOverlapDamageableComponentsSorted");
static_assert(sizeof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted) == 0x000070, "Wrong size on GBGameplayStatics_ConeOverlapDamageableComponentsSorted");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, Origin) == 0x000008, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::Origin' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, dir) == 0x000014, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::dir' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, ConeHalfAngle) == 0x000020, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::ConeHalfAngle' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, Radius) == 0x000024, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::Radius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, ClipDistance) == 0x000028, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::ClipDistance' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, IgnoreActors) == 0x000030, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, ObjectTypes) == 0x000040, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::ObjectTypes' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, OutComponents) == 0x000050, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::OutComponents' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, DrawDebugType) == 0x000060, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::DrawDebugType' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, DrawTime) == 0x000064, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::DrawTime' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ConeOverlapDamageableComponentsSorted, ReturnValue) == 0x000068, "Member 'GBGameplayStatics_ConeOverlapDamageableComponentsSorted::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.EncompassesPoint
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_EncompassesPoint final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistanceToPoint;                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_EncompassesPoint) == 0x000008, "Wrong alignment on GBGameplayStatics_EncompassesPoint");
static_assert(sizeof(GBGameplayStatics_EncompassesPoint) == 0x000020, "Wrong size on GBGameplayStatics_EncompassesPoint");
static_assert(offsetof(GBGameplayStatics_EncompassesPoint, Volume) == 0x000000, "Member 'GBGameplayStatics_EncompassesPoint::Volume' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_EncompassesPoint, Point) == 0x000008, "Member 'GBGameplayStatics_EncompassesPoint::Point' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_EncompassesPoint, SphereRadius) == 0x000014, "Member 'GBGameplayStatics_EncompassesPoint::SphereRadius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_EncompassesPoint, OutDistanceToPoint) == 0x000018, "Member 'GBGameplayStatics_EncompassesPoint::OutDistanceToPoint' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_EncompassesPoint, ReturnValue) == 0x00001C, "Member 'GBGameplayStatics_EncompassesPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.FindPlayerControllerByPlayerNameOrUniqueId
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerNameOrUniqueId;                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerController*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId) == 0x000008, "Wrong alignment on GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId");
static_assert(sizeof(GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId) == 0x000020, "Wrong size on GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId");
static_assert(offsetof(GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId, PlayerNameOrUniqueId) == 0x000008, "Member 'GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId::PlayerNameOrUniqueId' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId, ReturnValue) == 0x000018, "Member 'GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.FindPlayerStateByPlayerNameOrUniqueId
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerNameOrUniqueId;                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerState*                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId) == 0x000008, "Wrong alignment on GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId");
static_assert(sizeof(GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId) == 0x000020, "Wrong size on GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId");
static_assert(offsetof(GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId, PlayerNameOrUniqueId) == 0x000008, "Member 'GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId::PlayerNameOrUniqueId' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId, ReturnValue) == 0x000018, "Member 'GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetLocallyViewingPlayerController
// 0x0010 (0x0010 - 0x0000)
struct GBGameplayStatics_GetLocallyViewingPlayerController final
{
public:
	const class AActor*                           Viewed;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerController*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_GetLocallyViewingPlayerController) == 0x000008, "Wrong alignment on GBGameplayStatics_GetLocallyViewingPlayerController");
static_assert(sizeof(GBGameplayStatics_GetLocallyViewingPlayerController) == 0x000010, "Wrong size on GBGameplayStatics_GetLocallyViewingPlayerController");
static_assert(offsetof(GBGameplayStatics_GetLocallyViewingPlayerController, Viewed) == 0x000000, "Member 'GBGameplayStatics_GetLocallyViewingPlayerController::Viewed' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetLocallyViewingPlayerController, ReturnValue) == 0x000008, "Member 'GBGameplayStatics_GetLocallyViewingPlayerController::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetPlayerStateFromPlayerID
// 0x0018 (0x0018 - 0x0000)
struct GBGameplayStatics_GetPlayerStateFromPlayerID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerState*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_GetPlayerStateFromPlayerID) == 0x000008, "Wrong alignment on GBGameplayStatics_GetPlayerStateFromPlayerID");
static_assert(sizeof(GBGameplayStatics_GetPlayerStateFromPlayerID) == 0x000018, "Wrong size on GBGameplayStatics_GetPlayerStateFromPlayerID");
static_assert(offsetof(GBGameplayStatics_GetPlayerStateFromPlayerID, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_GetPlayerStateFromPlayerID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetPlayerStateFromPlayerID, PlayerId) == 0x000008, "Member 'GBGameplayStatics_GetPlayerStateFromPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetPlayerStateFromPlayerID, ReturnValue) == 0x000010, "Member 'GBGameplayStatics_GetPlayerStateFromPlayerID::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetPredictionTime
// 0x0010 (0x0010 - 0x0000)
struct GBGameplayStatics_GetPredictionTime final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_GetPredictionTime) == 0x000008, "Wrong alignment on GBGameplayStatics_GetPredictionTime");
static_assert(sizeof(GBGameplayStatics_GetPredictionTime) == 0x000010, "Wrong size on GBGameplayStatics_GetPredictionTime");
static_assert(offsetof(GBGameplayStatics_GetPredictionTime, Target) == 0x000000, "Member 'GBGameplayStatics_GetPredictionTime::Target' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetPredictionTime, ReturnValue) == 0x000008, "Member 'GBGameplayStatics_GetPredictionTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetReplicatedAlphaValues
// 0x0018 (0x0018 - 0x0000)
struct GBGameplayStatics_GetReplicatedAlphaValues final
{
public:
	struct FReplicatedAlpha                       ReplicatedAlpha;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentAlpha;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAlpha;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_GetReplicatedAlphaValues) == 0x000004, "Wrong alignment on GBGameplayStatics_GetReplicatedAlphaValues");
static_assert(sizeof(GBGameplayStatics_GetReplicatedAlphaValues) == 0x000018, "Wrong size on GBGameplayStatics_GetReplicatedAlphaValues");
static_assert(offsetof(GBGameplayStatics_GetReplicatedAlphaValues, ReplicatedAlpha) == 0x000000, "Member 'GBGameplayStatics_GetReplicatedAlphaValues::ReplicatedAlpha' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetReplicatedAlphaValues, CurrentAlpha) == 0x00000C, "Member 'GBGameplayStatics_GetReplicatedAlphaValues::CurrentAlpha' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetReplicatedAlphaValues, TargetAlpha) == 0x000010, "Member 'GBGameplayStatics_GetReplicatedAlphaValues::TargetAlpha' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetReplicatedAlphaValues, Timestamp) == 0x000014, "Member 'GBGameplayStatics_GetReplicatedAlphaValues::Timestamp' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetSpatialAudioVolumeTag
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_GetSpatialAudioVolumeTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_GetSpatialAudioVolumeTag) == 0x000008, "Wrong alignment on GBGameplayStatics_GetSpatialAudioVolumeTag");
static_assert(sizeof(GBGameplayStatics_GetSpatialAudioVolumeTag) == 0x000020, "Wrong size on GBGameplayStatics_GetSpatialAudioVolumeTag");
static_assert(offsetof(GBGameplayStatics_GetSpatialAudioVolumeTag, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_GetSpatialAudioVolumeTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetSpatialAudioVolumeTag, position) == 0x000008, "Member 'GBGameplayStatics_GetSpatialAudioVolumeTag::position' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetSpatialAudioVolumeTag, ReturnValue) == 0x000014, "Member 'GBGameplayStatics_GetSpatialAudioVolumeTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetUniqueIdAsString
// 0x0018 (0x0018 - 0x0000)
struct GBGameplayStatics_GetUniqueIdAsString final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_GetUniqueIdAsString) == 0x000008, "Wrong alignment on GBGameplayStatics_GetUniqueIdAsString");
static_assert(sizeof(GBGameplayStatics_GetUniqueIdAsString) == 0x000018, "Wrong size on GBGameplayStatics_GetUniqueIdAsString");
static_assert(offsetof(GBGameplayStatics_GetUniqueIdAsString, PlayerState) == 0x000000, "Member 'GBGameplayStatics_GetUniqueIdAsString::PlayerState' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetUniqueIdAsString, ReturnValue) == 0x000008, "Member 'GBGameplayStatics_GetUniqueIdAsString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetValidatedSpawnLocation
// 0x0030 (0x0030 - 0x0000)
struct GBGameplayStatics_GetValidatedSpawnLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebug;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutValidatedSpawnLocation;                         // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_GetValidatedSpawnLocation) == 0x000008, "Wrong alignment on GBGameplayStatics_GetValidatedSpawnLocation");
static_assert(sizeof(GBGameplayStatics_GetValidatedSpawnLocation) == 0x000030, "Wrong size on GBGameplayStatics_GetValidatedSpawnLocation");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, SpawnLocation) == 0x000008, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::SpawnLocation' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, CapsuleHalfHeight) == 0x000014, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, CapsuleRadius) == 0x000018, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, bShowDebug) == 0x00001C, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::bShowDebug' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, OutValidatedSpawnLocation) == 0x000020, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::OutValidatedSpawnLocation' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetValidatedSpawnLocation, ReturnValue) == 0x00002C, "Member 'GBGameplayStatics_GetValidatedSpawnLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GetWaterLevelAtPosition
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_GetWaterLevelAtPosition final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_GetWaterLevelAtPosition) == 0x000008, "Wrong alignment on GBGameplayStatics_GetWaterLevelAtPosition");
static_assert(sizeof(GBGameplayStatics_GetWaterLevelAtPosition) == 0x000020, "Wrong size on GBGameplayStatics_GetWaterLevelAtPosition");
static_assert(offsetof(GBGameplayStatics_GetWaterLevelAtPosition, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_GetWaterLevelAtPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetWaterLevelAtPosition, position) == 0x000008, "Member 'GBGameplayStatics_GetWaterLevelAtPosition::position' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetWaterLevelAtPosition, CollisionChannel) == 0x000014, "Member 'GBGameplayStatics_GetWaterLevelAtPosition::CollisionChannel' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GetWaterLevelAtPosition, ReturnValue) == 0x000018, "Member 'GBGameplayStatics_GetWaterLevelAtPosition::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.GrabAllOptions
// 0x0038 (0x0038 - 0x0000)
struct GBGameplayStatics_GrabAllOptions final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutKeys;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutValues;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_GrabAllOptions) == 0x000008, "Wrong alignment on GBGameplayStatics_GrabAllOptions");
static_assert(sizeof(GBGameplayStatics_GrabAllOptions) == 0x000038, "Wrong size on GBGameplayStatics_GrabAllOptions");
static_assert(offsetof(GBGameplayStatics_GrabAllOptions, Options) == 0x000000, "Member 'GBGameplayStatics_GrabAllOptions::Options' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GrabAllOptions, OutKeys) == 0x000010, "Member 'GBGameplayStatics_GrabAllOptions::OutKeys' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GrabAllOptions, OutValues) == 0x000020, "Member 'GBGameplayStatics_GrabAllOptions::OutValues' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_GrabAllOptions, ReturnValue) == 0x000030, "Member 'GBGameplayStatics_GrabAllOptions::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.IsDevBuild
// 0x0001 (0x0001 - 0x0000)
struct GBGameplayStatics_IsDevBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_IsDevBuild) == 0x000001, "Wrong alignment on GBGameplayStatics_IsDevBuild");
static_assert(sizeof(GBGameplayStatics_IsDevBuild) == 0x000001, "Wrong size on GBGameplayStatics_IsDevBuild");
static_assert(offsetof(GBGameplayStatics_IsDevBuild, ReturnValue) == 0x000000, "Member 'GBGameplayStatics_IsDevBuild::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.IsLocallyViewed
// 0x0010 (0x0010 - 0x0000)
struct GBGameplayStatics_IsLocallyViewed final
{
public:
	const class AActor*                           Viewed;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_IsLocallyViewed) == 0x000008, "Wrong alignment on GBGameplayStatics_IsLocallyViewed");
static_assert(sizeof(GBGameplayStatics_IsLocallyViewed) == 0x000010, "Wrong size on GBGameplayStatics_IsLocallyViewed");
static_assert(offsetof(GBGameplayStatics_IsLocallyViewed, Viewed) == 0x000000, "Member 'GBGameplayStatics_IsLocallyViewed::Viewed' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_IsLocallyViewed, ReturnValue) == 0x000008, "Member 'GBGameplayStatics_IsLocallyViewed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.IsNetReady
// 0x0010 (0x0010 - 0x0000)
struct GBGameplayStatics_IsNetReady final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_IsNetReady) == 0x000008, "Wrong alignment on GBGameplayStatics_IsNetReady");
static_assert(sizeof(GBGameplayStatics_IsNetReady) == 0x000010, "Wrong size on GBGameplayStatics_IsNetReady");
static_assert(offsetof(GBGameplayStatics_IsNetReady, PlayerController) == 0x000000, "Member 'GBGameplayStatics_IsNetReady::PlayerController' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_IsNetReady, ReturnValue) == 0x000008, "Member 'GBGameplayStatics_IsNetReady::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.IsSpawnLocationValid
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_IsSpawnLocationValid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_IsSpawnLocationValid) == 0x000008, "Wrong alignment on GBGameplayStatics_IsSpawnLocationValid");
static_assert(sizeof(GBGameplayStatics_IsSpawnLocationValid) == 0x000020, "Wrong size on GBGameplayStatics_IsSpawnLocationValid");
static_assert(offsetof(GBGameplayStatics_IsSpawnLocationValid, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_IsSpawnLocationValid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_IsSpawnLocationValid, SpawnLocation) == 0x000008, "Member 'GBGameplayStatics_IsSpawnLocationValid::SpawnLocation' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_IsSpawnLocationValid, CapsuleHalfHeight) == 0x000014, "Member 'GBGameplayStatics_IsSpawnLocationValid::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_IsSpawnLocationValid, CapsuleRadius) == 0x000018, "Member 'GBGameplayStatics_IsSpawnLocationValid::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_IsSpawnLocationValid, ReturnValue) == 0x00001C, "Member 'GBGameplayStatics_IsSpawnLocationValid::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.LineTraceRecursiveForObjects
// 0x00F0 (0x00F0 - 0x0000)
struct GBGameplayStatics_LineTraceRecursiveForObjects final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     BlockedCollisionChannels;                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0058(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugDrawTime;                                     // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_LineTraceRecursiveForObjects) == 0x000008, "Wrong alignment on GBGameplayStatics_LineTraceRecursiveForObjects");
static_assert(sizeof(GBGameplayStatics_LineTraceRecursiveForObjects) == 0x0000F0, "Wrong size on GBGameplayStatics_LineTraceRecursiveForObjects");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, TraceStart) == 0x000008, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::TraceStart' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, TraceEnd) == 0x000014, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::TraceEnd' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, ObjectTypes) == 0x000020, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, BlockedCollisionChannels) == 0x000030, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::BlockedCollisionChannels' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, bTraceComplex) == 0x000040, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, ActorsToIgnore) == 0x000048, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, OutHit) == 0x000058, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::OutHit' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, bDebug) == 0x0000E0, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::bDebug' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, DebugDrawTime) == 0x0000E4, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::DebugDrawTime' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_LineTraceRecursiveForObjects, ReturnValue) == 0x0000E8, "Member 'GBGameplayStatics_LineTraceRecursiveForObjects::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.NukeActor
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayStatics_NukeActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_NukeActor) == 0x000008, "Wrong alignment on GBGameplayStatics_NukeActor");
static_assert(sizeof(GBGameplayStatics_NukeActor) == 0x000008, "Wrong size on GBGameplayStatics_NukeActor");
static_assert(offsetof(GBGameplayStatics_NukeActor, Target) == 0x000000, "Member 'GBGameplayStatics_NukeActor::Target' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ResetActor
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayStatics_ResetActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_ResetActor) == 0x000008, "Wrong alignment on GBGameplayStatics_ResetActor");
static_assert(sizeof(GBGameplayStatics_ResetActor) == 0x000008, "Wrong size on GBGameplayStatics_ResetActor");
static_assert(offsetof(GBGameplayStatics_ResetActor, Target) == 0x000000, "Member 'GBGameplayStatics_ResetActor::Target' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ResetActors
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayStatics_ResetActors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_ResetActors) == 0x000008, "Wrong alignment on GBGameplayStatics_ResetActors");
static_assert(sizeof(GBGameplayStatics_ResetActors) == 0x000008, "Wrong size on GBGameplayStatics_ResetActors");
static_assert(offsetof(GBGameplayStatics_ResetActors, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_ResetActors::WorldContextObject' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ResetActorsExceptSpecifiedClasses
// 0x0018 (0x0018 - 0x0000)
struct GBGameplayStatics_ResetActorsExceptSpecifiedClasses final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ClassesToExclude;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_ResetActorsExceptSpecifiedClasses) == 0x000008, "Wrong alignment on GBGameplayStatics_ResetActorsExceptSpecifiedClasses");
static_assert(sizeof(GBGameplayStatics_ResetActorsExceptSpecifiedClasses) == 0x000018, "Wrong size on GBGameplayStatics_ResetActorsExceptSpecifiedClasses");
static_assert(offsetof(GBGameplayStatics_ResetActorsExceptSpecifiedClasses, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_ResetActorsExceptSpecifiedClasses::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_ResetActorsExceptSpecifiedClasses, ClassesToExclude) == 0x000008, "Member 'GBGameplayStatics_ResetActorsExceptSpecifiedClasses::ClassesToExclude' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.ResetEncompassedActors
// 0x0008 (0x0008 - 0x0000)
struct GBGameplayStatics_ResetEncompassedActors final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_ResetEncompassedActors) == 0x000008, "Wrong alignment on GBGameplayStatics_ResetEncompassedActors");
static_assert(sizeof(GBGameplayStatics_ResetEncompassedActors) == 0x000008, "Wrong size on GBGameplayStatics_ResetEncompassedActors");
static_assert(offsetof(GBGameplayStatics_ResetEncompassedActors, Volume) == 0x000000, "Member 'GBGameplayStatics_ResetEncompassedActors::Volume' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.SetReplicatedAlphaValues
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_SetReplicatedAlphaValues final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReplicatedAlpha                       ReplicatedAlpha;                                   // 0x0008(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentAlpha;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAlpha;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_SetReplicatedAlphaValues) == 0x000008, "Wrong alignment on GBGameplayStatics_SetReplicatedAlphaValues");
static_assert(sizeof(GBGameplayStatics_SetReplicatedAlphaValues) == 0x000020, "Wrong size on GBGameplayStatics_SetReplicatedAlphaValues");
static_assert(offsetof(GBGameplayStatics_SetReplicatedAlphaValues, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_SetReplicatedAlphaValues::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SetReplicatedAlphaValues, ReplicatedAlpha) == 0x000008, "Member 'GBGameplayStatics_SetReplicatedAlphaValues::ReplicatedAlpha' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SetReplicatedAlphaValues, CurrentAlpha) == 0x000014, "Member 'GBGameplayStatics_SetReplicatedAlphaValues::CurrentAlpha' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SetReplicatedAlphaValues, TargetAlpha) == 0x000018, "Member 'GBGameplayStatics_SetReplicatedAlphaValues::TargetAlpha' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.SphereOverlapDamageableComponentsSorted
// 0x0050 (0x0050 - 0x0000)
struct GBGameplayStatics_SphereOverlapDamageableComponentsSorted final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted) == 0x000008, "Wrong alignment on GBGameplayStatics_SphereOverlapDamageableComponentsSorted");
static_assert(sizeof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted) == 0x000050, "Wrong size on GBGameplayStatics_SphereOverlapDamageableComponentsSorted");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, Origin) == 0x000008, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::Origin' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, Radius) == 0x000014, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::Radius' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, IgnoreActors) == 0x000018, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::IgnoreActors' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, ObjectTypes) == 0x000028, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::ObjectTypes' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, OutComponents) == 0x000038, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::OutComponents' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_SphereOverlapDamageableComponentsSorted, ReturnValue) == 0x000048, "Member 'GBGameplayStatics_SphereOverlapDamageableComponentsSorted::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.TeleportControlledPawn
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_TeleportControlledPawn final
{
public:
	class APawn*                                  TargetPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_TeleportControlledPawn) == 0x000008, "Wrong alignment on GBGameplayStatics_TeleportControlledPawn");
static_assert(sizeof(GBGameplayStatics_TeleportControlledPawn) == 0x000020, "Wrong size on GBGameplayStatics_TeleportControlledPawn");
static_assert(offsetof(GBGameplayStatics_TeleportControlledPawn, TargetPawn) == 0x000000, "Member 'GBGameplayStatics_TeleportControlledPawn::TargetPawn' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_TeleportControlledPawn, TargetLocation) == 0x000008, "Member 'GBGameplayStatics_TeleportControlledPawn::TargetLocation' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_TeleportControlledPawn, TargetRotation) == 0x000014, "Member 'GBGameplayStatics_TeleportControlledPawn::TargetRotation' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.WaitForWorldToBeReadyForLocalPlayer
// 0x0020 (0x0020 - 0x0000)
struct GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer) == 0x000008, "Wrong alignment on GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer");
static_assert(sizeof(GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer) == 0x000020, "Wrong size on GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer");
static_assert(offsetof(GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer, LatentInfo) == 0x000008, "Member 'GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer::LatentInfo' has a wrong offset!");

// Function GroundBranch.GBGameplayStatics.WorldIsReadyForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct GBGameplayStatics_WorldIsReadyForLocalPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameplayStatics_WorldIsReadyForLocalPlayer) == 0x000008, "Wrong alignment on GBGameplayStatics_WorldIsReadyForLocalPlayer");
static_assert(sizeof(GBGameplayStatics_WorldIsReadyForLocalPlayer) == 0x000010, "Wrong size on GBGameplayStatics_WorldIsReadyForLocalPlayer");
static_assert(offsetof(GBGameplayStatics_WorldIsReadyForLocalPlayer, WorldContextObject) == 0x000000, "Member 'GBGameplayStatics_WorldIsReadyForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameplayStatics_WorldIsReadyForLocalPlayer, ReturnValue) == 0x000008, "Member 'GBGameplayStatics_WorldIsReadyForLocalPlayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameSession.MutePlayer
// 0x0008 (0x0008 - 0x0000)
struct GBGameSession_MutePlayer final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameSession_MutePlayer) == 0x000008, "Wrong alignment on GBGameSession_MutePlayer");
static_assert(sizeof(GBGameSession_MutePlayer) == 0x000008, "Wrong size on GBGameSession_MutePlayer");
static_assert(offsetof(GBGameSession_MutePlayer, Player) == 0x000000, "Member 'GBGameSession_MutePlayer::Player' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMissionSettingConfigSectionName
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_GetMissionSettingConfigSectionName final
{
public:
	class FString                                 InGameModeName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMissionSettingConfigSectionName) == 0x000008, "Wrong alignment on GBGameState_GetMissionSettingConfigSectionName");
static_assert(sizeof(GBGameState_GetMissionSettingConfigSectionName) == 0x000020, "Wrong size on GBGameState_GetMissionSettingConfigSectionName");
static_assert(offsetof(GBGameState_GetMissionSettingConfigSectionName, InGameModeName) == 0x000000, "Member 'GBGameState_GetMissionSettingConfigSectionName::InGameModeName' has a wrong offset!");
static_assert(offsetof(GBGameState_GetMissionSettingConfigSectionName, ReturnValue) == 0x000010, "Member 'GBGameState_GetMissionSettingConfigSectionName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.AddGameObjective
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_AddGameObjective final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBGameObjectiveType                          ObjectiveType;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_AddGameObjective) == 0x000004, "Wrong alignment on GBGameState_AddGameObjective");
static_assert(sizeof(GBGameState_AddGameObjective) == 0x000010, "Wrong size on GBGameState_AddGameObjective");
static_assert(offsetof(GBGameState_AddGameObjective, TeamId) == 0x000000, "Member 'GBGameState_AddGameObjective::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_AddGameObjective, Name_0) == 0x000004, "Member 'GBGameState_AddGameObjective::Name_0' has a wrong offset!");
static_assert(offsetof(GBGameState_AddGameObjective, ObjectiveType) == 0x00000C, "Member 'GBGameState_AddGameObjective::ObjectiveType' has a wrong offset!");

// Function GroundBranch.GBGameState.AddGameStat
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_AddGameStat final
{
public:
	class FString                                 StatString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_AddGameStat) == 0x000008, "Wrong alignment on GBGameState_AddGameStat");
static_assert(sizeof(GBGameState_AddGameStat) == 0x000010, "Wrong size on GBGameState_AddGameStat");
static_assert(offsetof(GBGameState_AddGameStat, StatString) == 0x000000, "Member 'GBGameState_AddGameStat::StatString' has a wrong offset!");

// Function GroundBranch.GBGameState.AddMissionSetting
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_AddMissionSetting final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentValue;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_AddMissionSetting) == 0x000008, "Wrong alignment on GBGameState_AddMissionSetting");
static_assert(sizeof(GBGameState_AddMissionSetting) == 0x000020, "Wrong size on GBGameState_AddMissionSetting");
static_assert(offsetof(GBGameState_AddMissionSetting, Name_0) == 0x000000, "Member 'GBGameState_AddMissionSetting::Name_0' has a wrong offset!");
static_assert(offsetof(GBGameState_AddMissionSetting, MinValue) == 0x000010, "Member 'GBGameState_AddMissionSetting::MinValue' has a wrong offset!");
static_assert(offsetof(GBGameState_AddMissionSetting, MaxValue) == 0x000014, "Member 'GBGameState_AddMissionSetting::MaxValue' has a wrong offset!");
static_assert(offsetof(GBGameState_AddMissionSetting, CurrentValue) == 0x000018, "Member 'GBGameState_AddMissionSetting::CurrentValue' has a wrong offset!");

// Function GroundBranch.GBGameState.AddPlayerScoreType
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_AddPlayerScoreType final
{
public:
	class FName                                   ScoreName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScoreDescription;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreToAdd;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OneOff;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_AddPlayerScoreType) == 0x000008, "Wrong alignment on GBGameState_AddPlayerScoreType");
static_assert(sizeof(GBGameState_AddPlayerScoreType) == 0x000020, "Wrong size on GBGameState_AddPlayerScoreType");
static_assert(offsetof(GBGameState_AddPlayerScoreType, ScoreName) == 0x000000, "Member 'GBGameState_AddPlayerScoreType::ScoreName' has a wrong offset!");
static_assert(offsetof(GBGameState_AddPlayerScoreType, ScoreDescription) == 0x000008, "Member 'GBGameState_AddPlayerScoreType::ScoreDescription' has a wrong offset!");
static_assert(offsetof(GBGameState_AddPlayerScoreType, ScoreToAdd) == 0x000018, "Member 'GBGameState_AddPlayerScoreType::ScoreToAdd' has a wrong offset!");
static_assert(offsetof(GBGameState_AddPlayerScoreType, OneOff) == 0x00001C, "Member 'GBGameState_AddPlayerScoreType::OneOff' has a wrong offset!");

// Function GroundBranch.GBGameState.AddPlayerTeamInfo
// 0x001C (0x001C - 0x0000)
struct GBGameState_AddPlayerTeamInfo final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBTeamInfo                            NewPlayerTeam;                                     // 0x0004(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_AddPlayerTeamInfo) == 0x000004, "Wrong alignment on GBGameState_AddPlayerTeamInfo");
static_assert(sizeof(GBGameState_AddPlayerTeamInfo) == 0x00001C, "Wrong size on GBGameState_AddPlayerTeamInfo");
static_assert(offsetof(GBGameState_AddPlayerTeamInfo, TeamId) == 0x000000, "Member 'GBGameState_AddPlayerTeamInfo::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_AddPlayerTeamInfo, NewPlayerTeam) == 0x000004, "Member 'GBGameState_AddPlayerTeamInfo::NewPlayerTeam' has a wrong offset!");

// Function GroundBranch.GBGameState.AddScoreToCumulativeRoundsWon
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_AddScoreToCumulativeRoundsWon final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreToAdd;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_AddScoreToCumulativeRoundsWon) == 0x000004, "Wrong alignment on GBGameState_AddScoreToCumulativeRoundsWon");
static_assert(sizeof(GBGameState_AddScoreToCumulativeRoundsWon) == 0x000008, "Wrong size on GBGameState_AddScoreToCumulativeRoundsWon");
static_assert(offsetof(GBGameState_AddScoreToCumulativeRoundsWon, TeamId) == 0x000000, "Member 'GBGameState_AddScoreToCumulativeRoundsWon::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_AddScoreToCumulativeRoundsWon, ScoreToAdd) == 0x000004, "Member 'GBGameState_AddScoreToCumulativeRoundsWon::ScoreToAdd' has a wrong offset!");

// Function GroundBranch.GBGameState.AddScoreToCumulativeScore
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_AddScoreToCumulativeScore final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreToAdd;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_AddScoreToCumulativeScore) == 0x000004, "Wrong alignment on GBGameState_AddScoreToCumulativeScore");
static_assert(sizeof(GBGameState_AddScoreToCumulativeScore) == 0x000008, "Wrong size on GBGameState_AddScoreToCumulativeScore");
static_assert(offsetof(GBGameState_AddScoreToCumulativeScore, TeamId) == 0x000000, "Member 'GBGameState_AddScoreToCumulativeScore::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_AddScoreToCumulativeScore, ScoreToAdd) == 0x000004, "Member 'GBGameState_AddScoreToCumulativeScore::ScoreToAdd' has a wrong offset!");

// Function GroundBranch.GBGameState.AddSearchLocation
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_AddSearchLocation final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBGameObjectiveType                          ObjectiveType;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_AddSearchLocation) == 0x000004, "Wrong alignment on GBGameState_AddSearchLocation");
static_assert(sizeof(GBGameState_AddSearchLocation) == 0x000010, "Wrong size on GBGameState_AddSearchLocation");
static_assert(offsetof(GBGameState_AddSearchLocation, TeamId) == 0x000000, "Member 'GBGameState_AddSearchLocation::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_AddSearchLocation, Name_0) == 0x000004, "Member 'GBGameState_AddSearchLocation::Name_0' has a wrong offset!");
static_assert(offsetof(GBGameState_AddSearchLocation, ObjectiveType) == 0x00000C, "Member 'GBGameState_AddSearchLocation::ObjectiveType' has a wrong offset!");

// Function GroundBranch.GBGameState.AddTeamScoreType
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_AddTeamScoreType final
{
public:
	class FName                                   ScoreName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScoreDescription;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreToAdd;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OneOff;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_AddTeamScoreType) == 0x000008, "Wrong alignment on GBGameState_AddTeamScoreType");
static_assert(sizeof(GBGameState_AddTeamScoreType) == 0x000020, "Wrong size on GBGameState_AddTeamScoreType");
static_assert(offsetof(GBGameState_AddTeamScoreType, ScoreName) == 0x000000, "Member 'GBGameState_AddTeamScoreType::ScoreName' has a wrong offset!");
static_assert(offsetof(GBGameState_AddTeamScoreType, ScoreDescription) == 0x000008, "Member 'GBGameState_AddTeamScoreType::ScoreDescription' has a wrong offset!");
static_assert(offsetof(GBGameState_AddTeamScoreType, ScoreToAdd) == 0x000018, "Member 'GBGameState_AddTeamScoreType::ScoreToAdd' has a wrong offset!");
static_assert(offsetof(GBGameState_AddTeamScoreType, OneOff) == 0x00001C, "Member 'GBGameState_AddTeamScoreType::OneOff' has a wrong offset!");

// Function GroundBranch.GBGameState.AwardTeamScore
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_AwardTeamScore final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScoreName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreMultiple;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_AwardTeamScore) == 0x000004, "Wrong alignment on GBGameState_AwardTeamScore");
static_assert(sizeof(GBGameState_AwardTeamScore) == 0x000010, "Wrong size on GBGameState_AwardTeamScore");
static_assert(offsetof(GBGameState_AwardTeamScore, TeamId) == 0x000000, "Member 'GBGameState_AwardTeamScore::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_AwardTeamScore, ScoreName) == 0x000004, "Member 'GBGameState_AwardTeamScore::ScoreName' has a wrong offset!");
static_assert(offsetof(GBGameState_AwardTeamScore, ScoreMultiple) == 0x00000C, "Member 'GBGameState_AwardTeamScore::ScoreMultiple' has a wrong offset!");

// Function GroundBranch.GBGameState.CreateTeamScores
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_CreateTeamScores final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_CreateTeamScores) == 0x000001, "Wrong alignment on GBGameState_CreateTeamScores");
static_assert(sizeof(GBGameState_CreateTeamScores) == 0x000001, "Wrong size on GBGameState_CreateTeamScores");
static_assert(offsetof(GBGameState_CreateTeamScores, TeamId) == 0x000000, "Member 'GBGameState_CreateTeamScores::TeamId' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameRules
// 0x0050 (0x0050 - 0x0000)
struct GBGameState_GetGameRules final
{
public:
	TMap<class FName, bool>                       ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameRules) == 0x000008, "Wrong alignment on GBGameState_GetGameRules");
static_assert(sizeof(GBGameState_GetGameRules) == 0x000050, "Wrong size on GBGameState_GetGameRules");
static_assert(offsetof(GBGameState_GetGameRules, ReturnValue) == 0x000000, "Member 'GBGameState_GetGameRules::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameStats
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetGameStats final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameStats) == 0x000008, "Wrong alignment on GBGameState_GetGameStats");
static_assert(sizeof(GBGameState_GetGameStats) == 0x000010, "Wrong size on GBGameState_GetGameStats");
static_assert(offsetof(GBGameState_GetGameStats, ReturnValue) == 0x000000, "Member 'GBGameState_GetGameStats::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetLocalisedGameText
// 0x0048 (0x0048 - 0x0000)
struct GBGameState_GetLocalisedGameText final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0020(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrettifyDefault;                                  // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetLocalisedGameText) == 0x000008, "Wrong alignment on GBGameState_GetLocalisedGameText");
static_assert(sizeof(GBGameState_GetLocalisedGameText) == 0x000048, "Wrong size on GBGameState_GetLocalisedGameText");
static_assert(offsetof(GBGameState_GetLocalisedGameText, Key) == 0x000000, "Member 'GBGameState_GetLocalisedGameText::Key' has a wrong offset!");
static_assert(offsetof(GBGameState_GetLocalisedGameText, DefaultValue) == 0x000010, "Member 'GBGameState_GetLocalisedGameText::DefaultValue' has a wrong offset!");
static_assert(offsetof(GBGameState_GetLocalisedGameText, ModID) == 0x000020, "Member 'GBGameState_GetLocalisedGameText::ModID' has a wrong offset!");
static_assert(offsetof(GBGameState_GetLocalisedGameText, bPrettifyDefault) == 0x000028, "Member 'GBGameState_GetLocalisedGameText::bPrettifyDefault' has a wrong offset!");
static_assert(offsetof(GBGameState_GetLocalisedGameText, ReturnValue) == 0x000030, "Member 'GBGameState_GetLocalisedGameText::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMissionName
// 0x0018 (0x0018 - 0x0000)
struct GBGameState_GetMissionName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMissionName) == 0x000008, "Wrong alignment on GBGameState_GetMissionName");
static_assert(sizeof(GBGameState_GetMissionName) == 0x000018, "Wrong size on GBGameState_GetMissionName");
static_assert(offsetof(GBGameState_GetMissionName, ReturnValue) == 0x000000, "Member 'GBGameState_GetMissionName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerRichPresenceStatus
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetPlayerRichPresenceStatus final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerRichPresenceStatus) == 0x000008, "Wrong alignment on GBGameState_GetPlayerRichPresenceStatus");
static_assert(sizeof(GBGameState_GetPlayerRichPresenceStatus) == 0x000010, "Wrong size on GBGameState_GetPlayerRichPresenceStatus");
static_assert(offsetof(GBGameState_GetPlayerRichPresenceStatus, ReturnValue) == 0x000000, "Member 'GBGameState_GetPlayerRichPresenceStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetScoreListForTeam
// 0x0018 (0x0018 - 0x0000)
struct GBGameState_GetScoreListForTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGBScoreLine>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetScoreListForTeam) == 0x000008, "Wrong alignment on GBGameState_GetScoreListForTeam");
static_assert(sizeof(GBGameState_GetScoreListForTeam) == 0x000018, "Wrong size on GBGameState_GetScoreListForTeam");
static_assert(offsetof(GBGameState_GetScoreListForTeam, TeamId) == 0x000000, "Member 'GBGameState_GetScoreListForTeam::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetScoreListForTeam, ReturnValue) == 0x000008, "Member 'GBGameState_GetScoreListForTeam::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetTeamAttitude
// 0x0003 (0x0003 - 0x0000)
struct GBGameState_GetTeamAttitude final
{
public:
	struct FGenericTeamId                         A;                                                 // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         B;                                                 // 0x0001(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetTeamAttitude) == 0x000001, "Wrong alignment on GBGameState_GetTeamAttitude");
static_assert(sizeof(GBGameState_GetTeamAttitude) == 0x000003, "Wrong size on GBGameState_GetTeamAttitude");
static_assert(offsetof(GBGameState_GetTeamAttitude, A) == 0x000000, "Member 'GBGameState_GetTeamAttitude::A' has a wrong offset!");
static_assert(offsetof(GBGameState_GetTeamAttitude, B) == 0x000001, "Member 'GBGameState_GetTeamAttitude::B' has a wrong offset!");
static_assert(offsetof(GBGameState_GetTeamAttitude, ReturnValue) == 0x000002, "Member 'GBGameState_GetTeamAttitude::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.NotifyMissionObjectiveStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_NotifyMissionObjectiveStatusChanged final
{
public:
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBMissionObjectiveStatus                     NewMissionObjectiveStatus;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_NotifyMissionObjectiveStatusChanged) == 0x000008, "Wrong alignment on GBGameState_NotifyMissionObjectiveStatusChanged");
static_assert(sizeof(GBGameState_NotifyMissionObjectiveStatusChanged) == 0x000010, "Wrong size on GBGameState_NotifyMissionObjectiveStatusChanged");
static_assert(offsetof(GBGameState_NotifyMissionObjectiveStatusChanged, MissionObjective) == 0x000000, "Member 'GBGameState_NotifyMissionObjectiveStatusChanged::MissionObjective' has a wrong offset!");
static_assert(offsetof(GBGameState_NotifyMissionObjectiveStatusChanged, NewMissionObjectiveStatus) == 0x000008, "Member 'GBGameState_NotifyMissionObjectiveStatusChanged::NewMissionObjectiveStatus' has a wrong offset!");

// Function GroundBranch.GBGameState.OnGameMessageEvent
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_OnGameMessageEvent final
{
public:
	class FName                                   GameMessageId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_OnGameMessageEvent) == 0x000008, "Wrong alignment on GBGameState_OnGameMessageEvent");
static_assert(sizeof(GBGameState_OnGameMessageEvent) == 0x000020, "Wrong size on GBGameState_OnGameMessageEvent");
static_assert(offsetof(GBGameState_OnGameMessageEvent, GameMessageId) == 0x000000, "Member 'GBGameState_OnGameMessageEvent::GameMessageId' has a wrong offset!");
static_assert(offsetof(GBGameState_OnGameMessageEvent, Type) == 0x000008, "Member 'GBGameState_OnGameMessageEvent::Type' has a wrong offset!");
static_assert(offsetof(GBGameState_OnGameMessageEvent, Duration) == 0x000010, "Member 'GBGameState_OnGameMessageEvent::Duration' has a wrong offset!");
static_assert(offsetof(GBGameState_OnGameMessageEvent, ModID) == 0x000018, "Member 'GBGameState_OnGameMessageEvent::ModID' has a wrong offset!");

// Function GroundBranch.GBGameState.OnVoteCountUpdated
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_OnVoteCountUpdated final
{
public:
	int32                                         YesVotes;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoVotes;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_OnVoteCountUpdated) == 0x000004, "Wrong alignment on GBGameState_OnVoteCountUpdated");
static_assert(sizeof(GBGameState_OnVoteCountUpdated) == 0x000008, "Wrong size on GBGameState_OnVoteCountUpdated");
static_assert(offsetof(GBGameState_OnVoteCountUpdated, YesVotes) == 0x000000, "Member 'GBGameState_OnVoteCountUpdated::YesVotes' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteCountUpdated, NoVotes) == 0x000004, "Member 'GBGameState_OnVoteCountUpdated::NoVotes' has a wrong offset!");

// Function GroundBranch.GBGameState.OnVoteCountUpdatedEvent
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_OnVoteCountUpdatedEvent final
{
public:
	int32                                         YesVotes;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoVotes;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_OnVoteCountUpdatedEvent) == 0x000004, "Wrong alignment on GBGameState_OnVoteCountUpdatedEvent");
static_assert(sizeof(GBGameState_OnVoteCountUpdatedEvent) == 0x000008, "Wrong size on GBGameState_OnVoteCountUpdatedEvent");
static_assert(offsetof(GBGameState_OnVoteCountUpdatedEvent, YesVotes) == 0x000000, "Member 'GBGameState_OnVoteCountUpdatedEvent::YesVotes' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteCountUpdatedEvent, NoVotes) == 0x000004, "Member 'GBGameState_OnVoteCountUpdatedEvent::NoVotes' has a wrong offset!");

// Function GroundBranch.GBGameState.OnVoteEnded
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_OnVoteEnded final
{
public:
	bool                                          bPassed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextVoteDelay;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_OnVoteEnded) == 0x000004, "Wrong alignment on GBGameState_OnVoteEnded");
static_assert(sizeof(GBGameState_OnVoteEnded) == 0x000008, "Wrong size on GBGameState_OnVoteEnded");
static_assert(offsetof(GBGameState_OnVoteEnded, bPassed) == 0x000000, "Member 'GBGameState_OnVoteEnded::bPassed' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteEnded, NextVoteDelay) == 0x000004, "Member 'GBGameState_OnVoteEnded::NextVoteDelay' has a wrong offset!");

// Function GroundBranch.GBGameState.OnVoteEndedEvent
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_OnVoteEndedEvent final
{
public:
	bool                                          bPassed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextVoteDelay;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_OnVoteEndedEvent) == 0x000004, "Wrong alignment on GBGameState_OnVoteEndedEvent");
static_assert(sizeof(GBGameState_OnVoteEndedEvent) == 0x000008, "Wrong size on GBGameState_OnVoteEndedEvent");
static_assert(offsetof(GBGameState_OnVoteEndedEvent, bPassed) == 0x000000, "Member 'GBGameState_OnVoteEndedEvent::bPassed' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteEndedEvent, NextVoteDelay) == 0x000004, "Member 'GBGameState_OnVoteEndedEvent::NextVoteDelay' has a wrong offset!");

// Function GroundBranch.GBGameState.OnVoteStarted
// 0x0030 (0x0030 - 0x0000)
struct GBGameState_OnVoteStarted final
{
public:
	class APlayerState*                           VoteStarter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_OnVoteStarted) == 0x000008, "Wrong alignment on GBGameState_OnVoteStarted");
static_assert(sizeof(GBGameState_OnVoteStarted) == 0x000030, "Wrong size on GBGameState_OnVoteStarted");
static_assert(offsetof(GBGameState_OnVoteStarted, VoteStarter) == 0x000000, "Member 'GBGameState_OnVoteStarted::VoteStarter' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteStarted, Command) == 0x000008, "Member 'GBGameState_OnVoteStarted::Command' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteStarted, Params_0) == 0x000018, "Member 'GBGameState_OnVoteStarted::Params_0' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteStarted, VoteTime) == 0x000028, "Member 'GBGameState_OnVoteStarted::VoteTime' has a wrong offset!");

// Function GroundBranch.GBGameState.OnVoteStartedEvent
// 0x0030 (0x0030 - 0x0000)
struct GBGameState_OnVoteStartedEvent final
{
public:
	class APlayerState*                           VoteStarter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_OnVoteStartedEvent) == 0x000008, "Wrong alignment on GBGameState_OnVoteStartedEvent");
static_assert(sizeof(GBGameState_OnVoteStartedEvent) == 0x000030, "Wrong size on GBGameState_OnVoteStartedEvent");
static_assert(offsetof(GBGameState_OnVoteStartedEvent, VoteStarter) == 0x000000, "Member 'GBGameState_OnVoteStartedEvent::VoteStarter' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteStartedEvent, Command) == 0x000008, "Member 'GBGameState_OnVoteStartedEvent::Command' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteStartedEvent, Params_0) == 0x000018, "Member 'GBGameState_OnVoteStartedEvent::Params_0' has a wrong offset!");
static_assert(offsetof(GBGameState_OnVoteStartedEvent, VoteTime) == 0x000028, "Member 'GBGameState_OnVoteStartedEvent::VoteTime' has a wrong offset!");

// Function GroundBranch.GBGameState.RegisterMissionObjective
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_RegisterMissionObjective final
{
public:
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_RegisterMissionObjective) == 0x000008, "Wrong alignment on GBGameState_RegisterMissionObjective");
static_assert(sizeof(GBGameState_RegisterMissionObjective) == 0x000008, "Wrong size on GBGameState_RegisterMissionObjective");
static_assert(offsetof(GBGameState_RegisterMissionObjective, MissionObjective) == 0x000000, "Member 'GBGameState_RegisterMissionObjective::MissionObjective' has a wrong offset!");

// Function GroundBranch.GBGameState.ReportClientMissingAsset
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_ReportClientMissingAsset final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_ReportClientMissingAsset) == 0x000008, "Wrong alignment on GBGameState_ReportClientMissingAsset");
static_assert(sizeof(GBGameState_ReportClientMissingAsset) == 0x000010, "Wrong size on GBGameState_ReportClientMissingAsset");
static_assert(offsetof(GBGameState_ReportClientMissingAsset, AssetName) == 0x000000, "Member 'GBGameState_ReportClientMissingAsset::AssetName' has a wrong offset!");

// Function GroundBranch.GBGameState.SetAARWidget
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_SetAARWidget final
{
public:
	class UUserWidget*                            NewAARWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetAARWidget) == 0x000008, "Wrong alignment on GBGameState_SetAARWidget");
static_assert(sizeof(GBGameState_SetAARWidget) == 0x000008, "Wrong size on GBGameState_SetAARWidget");
static_assert(offsetof(GBGameState_SetAARWidget, NewAARWidget) == 0x000000, "Member 'GBGameState_SetAARWidget::NewAARWidget' has a wrong offset!");

// Function GroundBranch.GBGameState.SetBedtimeHours
// 0x000C (0x000C - 0x0000)
struct GBGameState_SetBedtimeHours final
{
public:
	float                                         InBedtimeStartHour;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBedtimeEndHour;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUseStandardHourForBedtimes;                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_SetBedtimeHours) == 0x000004, "Wrong alignment on GBGameState_SetBedtimeHours");
static_assert(sizeof(GBGameState_SetBedtimeHours) == 0x00000C, "Wrong size on GBGameState_SetBedtimeHours");
static_assert(offsetof(GBGameState_SetBedtimeHours, InBedtimeStartHour) == 0x000000, "Member 'GBGameState_SetBedtimeHours::InBedtimeStartHour' has a wrong offset!");
static_assert(offsetof(GBGameState_SetBedtimeHours, InBedtimeEndHour) == 0x000004, "Member 'GBGameState_SetBedtimeHours::InBedtimeEndHour' has a wrong offset!");
static_assert(offsetof(GBGameState_SetBedtimeHours, bInUseStandardHourForBedtimes) == 0x000008, "Member 'GBGameState_SetBedtimeHours::bInUseStandardHourForBedtimes' has a wrong offset!");

// Function GroundBranch.GBGameState.SetCanRandomiseObjectives
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetCanRandomiseObjectives final
{
public:
	bool                                          bInCanRandomiseObjectives;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetCanRandomiseObjectives) == 0x000001, "Wrong alignment on GBGameState_SetCanRandomiseObjectives");
static_assert(sizeof(GBGameState_SetCanRandomiseObjectives) == 0x000001, "Wrong size on GBGameState_SetCanRandomiseObjectives");
static_assert(offsetof(GBGameState_SetCanRandomiseObjectives, bInCanRandomiseObjectives) == 0x000000, "Member 'GBGameState_SetCanRandomiseObjectives::bInCanRandomiseObjectives' has a wrong offset!");

// Function GroundBranch.GBGameState.SetCaptureZone
// 0x000C (0x000C - 0x0000)
struct GBGameState_SetCaptureZone final
{
public:
	float                                         InCaptureRadius;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCaptureHeight;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DefenderTeamId;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InZoneIsSpherical;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_SetCaptureZone) == 0x000004, "Wrong alignment on GBGameState_SetCaptureZone");
static_assert(sizeof(GBGameState_SetCaptureZone) == 0x00000C, "Wrong size on GBGameState_SetCaptureZone");
static_assert(offsetof(GBGameState_SetCaptureZone, InCaptureRadius) == 0x000000, "Member 'GBGameState_SetCaptureZone::InCaptureRadius' has a wrong offset!");
static_assert(offsetof(GBGameState_SetCaptureZone, InCaptureHeight) == 0x000004, "Member 'GBGameState_SetCaptureZone::InCaptureHeight' has a wrong offset!");
static_assert(offsetof(GBGameState_SetCaptureZone, DefenderTeamId) == 0x000008, "Member 'GBGameState_SetCaptureZone::DefenderTeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_SetCaptureZone, InZoneIsSpherical) == 0x000009, "Member 'GBGameState_SetCaptureZone::InZoneIsSpherical' has a wrong offset!");

// Function GroundBranch.GBGameState.SetGameModeModID
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_SetGameModeModID final
{
public:
	struct FUInt64                                NewGameModeModID;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetGameModeModID) == 0x000008, "Wrong alignment on GBGameState_SetGameModeModID");
static_assert(sizeof(GBGameState_SetGameModeModID) == 0x000008, "Wrong size on GBGameState_SetGameModeModID");
static_assert(offsetof(GBGameState_SetGameModeModID, NewGameModeModID) == 0x000000, "Member 'GBGameState_SetGameModeModID::NewGameModeModID' has a wrong offset!");

// Function GroundBranch.GBGameState.SetGameModeName
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_SetGameModeName final
{
public:
	class FName                                   InGameModeName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetGameModeName) == 0x000004, "Wrong alignment on GBGameState_SetGameModeName");
static_assert(sizeof(GBGameState_SetGameModeName) == 0x000008, "Wrong size on GBGameState_SetGameModeName");
static_assert(offsetof(GBGameState_SetGameModeName, InGameModeName) == 0x000000, "Member 'GBGameState_SetGameModeName::InGameModeName' has a wrong offset!");

// Function GroundBranch.GBGameState.SetGameModeType
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetGameModeType final
{
public:
	EGBGameModeType                               InGameModeType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetGameModeType) == 0x000001, "Wrong alignment on GBGameState_SetGameModeType");
static_assert(sizeof(GBGameState_SetGameModeType) == 0x000001, "Wrong size on GBGameState_SetGameModeType");
static_assert(offsetof(GBGameState_SetGameModeType, InGameModeType) == 0x000000, "Member 'GBGameState_SetGameModeType::InGameModeType' has a wrong offset!");

// Function GroundBranch.GBGameState.SetHotspotName
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_SetHotspotName final
{
public:
	class FName                                   InHotspotName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetHotspotName) == 0x000004, "Wrong alignment on GBGameState_SetHotspotName");
static_assert(sizeof(GBGameState_SetHotspotName) == 0x000008, "Wrong size on GBGameState_SetHotspotName");
static_assert(offsetof(GBGameState_SetHotspotName, InHotspotName) == 0x000000, "Member 'GBGameState_SetHotspotName::InHotspotName' has a wrong offset!");

// Function GroundBranch.GBGameState.SetIsCapturing
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetIsCapturing final
{
public:
	bool                                          bNewIsCapturing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetIsCapturing) == 0x000001, "Wrong alignment on GBGameState_SetIsCapturing");
static_assert(sizeof(GBGameState_SetIsCapturing) == 0x000001, "Wrong size on GBGameState_SetIsCapturing");
static_assert(offsetof(GBGameState_SetIsCapturing, bNewIsCapturing) == 0x000000, "Member 'GBGameState_SetIsCapturing::bNewIsCapturing' has a wrong offset!");

// Function GroundBranch.GBGameState.SetLastMissionFileName
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_SetLastMissionFileName final
{
public:
	class FString                                 InLastMissionFileName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetLastMissionFileName) == 0x000008, "Wrong alignment on GBGameState_SetLastMissionFileName");
static_assert(sizeof(GBGameState_SetLastMissionFileName) == 0x000010, "Wrong size on GBGameState_SetLastMissionFileName");
static_assert(offsetof(GBGameState_SetLastMissionFileName, InLastMissionFileName) == 0x000000, "Member 'GBGameState_SetLastMissionFileName::InLastMissionFileName' has a wrong offset!");

// Function GroundBranch.GBGameState.SetMapMarkerList
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_SetMapMarkerList final
{
public:
	TArray<struct FGBMapMarker>                   InMapMarkerList;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetMapMarkerList) == 0x000008, "Wrong alignment on GBGameState_SetMapMarkerList");
static_assert(sizeof(GBGameState_SetMapMarkerList) == 0x000010, "Wrong size on GBGameState_SetMapMarkerList");
static_assert(offsetof(GBGameState_SetMapMarkerList, InMapMarkerList) == 0x000000, "Member 'GBGameState_SetMapMarkerList::InMapMarkerList' has a wrong offset!");

// Function GroundBranch.GBGameState.SetMatchInfo
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_SetMatchInfo final
{
public:
	struct FGBMatchInfo                           NewMatchInfo;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetMatchInfo) == 0x000001, "Wrong alignment on GBGameState_SetMatchInfo");
static_assert(sizeof(GBGameState_SetMatchInfo) == 0x000004, "Wrong size on GBGameState_SetMatchInfo");
static_assert(offsetof(GBGameState_SetMatchInfo, NewMatchInfo) == 0x000000, "Member 'GBGameState_SetMatchInfo::NewMatchInfo' has a wrong offset!");

// Function GroundBranch.GBGameState.SetMatchStartTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_SetMatchStartTime final
{
public:
	float                                         NewMatchStartTime;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetMatchStartTime) == 0x000004, "Wrong alignment on GBGameState_SetMatchStartTime");
static_assert(sizeof(GBGameState_SetMatchStartTime) == 0x000004, "Wrong size on GBGameState_SetMatchStartTime");
static_assert(offsetof(GBGameState_SetMatchStartTime, NewMatchStartTime) == 0x000000, "Member 'GBGameState_SetMatchStartTime::NewMatchStartTime' has a wrong offset!");

// Function GroundBranch.GBGameState.SetMatchWidget
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_SetMatchWidget final
{
public:
	class UUserWidget*                            NewMatchWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetMatchWidget) == 0x000008, "Wrong alignment on GBGameState_SetMatchWidget");
static_assert(sizeof(GBGameState_SetMatchWidget) == 0x000008, "Wrong size on GBGameState_SetMatchWidget");
static_assert(offsetof(GBGameState_SetMatchWidget, NewMatchWidget) == 0x000000, "Member 'GBGameState_SetMatchWidget::NewMatchWidget' has a wrong offset!");

// Function GroundBranch.GBGameState.SetMissionSequenceNumber
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_SetMissionSequenceNumber final
{
public:
	int32                                         InMissionSequenceNumber;                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetMissionSequenceNumber) == 0x000004, "Wrong alignment on GBGameState_SetMissionSequenceNumber");
static_assert(sizeof(GBGameState_SetMissionSequenceNumber) == 0x000004, "Wrong size on GBGameState_SetMissionSequenceNumber");
static_assert(offsetof(GBGameState_SetMissionSequenceNumber, InMissionSequenceNumber) == 0x000000, "Member 'GBGameState_SetMissionSequenceNumber::InMissionSequenceNumber' has a wrong offset!");

// Function GroundBranch.GBGameState.SetMissionSettingValue
// 0x0018 (0x0018 - 0x0000)
struct GBGameState_SetMissionSettingValue final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_SetMissionSettingValue) == 0x000008, "Wrong alignment on GBGameState_SetMissionSettingValue");
static_assert(sizeof(GBGameState_SetMissionSettingValue) == 0x000018, "Wrong size on GBGameState_SetMissionSettingValue");
static_assert(offsetof(GBGameState_SetMissionSettingValue, Name_0) == 0x000000, "Member 'GBGameState_SetMissionSettingValue::Name_0' has a wrong offset!");
static_assert(offsetof(GBGameState_SetMissionSettingValue, NewValue) == 0x000010, "Member 'GBGameState_SetMissionSettingValue::NewValue' has a wrong offset!");

// Function GroundBranch.GBGameState.SetObjectiveLocation
// 0x000C (0x000C - 0x0000)
struct GBGameState_SetObjectiveLocation final
{
public:
	struct FVector                                InObjectiveLocation;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetObjectiveLocation) == 0x000004, "Wrong alignment on GBGameState_SetObjectiveLocation");
static_assert(sizeof(GBGameState_SetObjectiveLocation) == 0x00000C, "Wrong size on GBGameState_SetObjectiveLocation");
static_assert(offsetof(GBGameState_SetObjectiveLocation, InObjectiveLocation) == 0x000000, "Member 'GBGameState_SetObjectiveLocation::InObjectiveLocation' has a wrong offset!");

// Function GroundBranch.GBGameState.SetPlayAreaOpen
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetPlayAreaOpen final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetPlayAreaOpen) == 0x000001, "Wrong alignment on GBGameState_SetPlayAreaOpen");
static_assert(sizeof(GBGameState_SetPlayAreaOpen) == 0x000001, "Wrong size on GBGameState_SetPlayAreaOpen");
static_assert(offsetof(GBGameState_SetPlayAreaOpen, bIsOpen) == 0x000000, "Member 'GBGameState_SetPlayAreaOpen::bIsOpen' has a wrong offset!");

// Function GroundBranch.GBGameState.SetPlayerTeamRole
// 0x000C (0x000C - 0x0000)
struct GBGameState_SetPlayerTeamRole final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InRole;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetPlayerTeamRole) == 0x000004, "Wrong alignment on GBGameState_SetPlayerTeamRole");
static_assert(sizeof(GBGameState_SetPlayerTeamRole) == 0x00000C, "Wrong size on GBGameState_SetPlayerTeamRole");
static_assert(offsetof(GBGameState_SetPlayerTeamRole, TeamId) == 0x000000, "Member 'GBGameState_SetPlayerTeamRole::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_SetPlayerTeamRole, InRole) == 0x000004, "Member 'GBGameState_SetPlayerTeamRole::InRole' has a wrong offset!");

// Function GroundBranch.GBGameState.SetRoundIsTemporaryGameMode
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetRoundIsTemporaryGameMode final
{
public:
	bool                                          bRoundIsTemporaryGameMode_0;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetRoundIsTemporaryGameMode) == 0x000001, "Wrong alignment on GBGameState_SetRoundIsTemporaryGameMode");
static_assert(sizeof(GBGameState_SetRoundIsTemporaryGameMode) == 0x000001, "Wrong size on GBGameState_SetRoundIsTemporaryGameMode");
static_assert(offsetof(GBGameState_SetRoundIsTemporaryGameMode, bRoundIsTemporaryGameMode_0) == 0x000000, "Member 'GBGameState_SetRoundIsTemporaryGameMode::bRoundIsTemporaryGameMode_0' has a wrong offset!");

// Function GroundBranch.GBGameState.SetServerBasicInfo
// 0x0030 (0x0030 - 0x0000)
struct GBGameState_SetServerBasicInfo final
{
public:
	struct FGBServerBasicInfo                     NewServerBasicInfo;                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetServerBasicInfo) == 0x000008, "Wrong alignment on GBGameState_SetServerBasicInfo");
static_assert(sizeof(GBGameState_SetServerBasicInfo) == 0x000030, "Wrong size on GBGameState_SetServerBasicInfo");
static_assert(offsetof(GBGameState_SetServerBasicInfo, NewServerBasicInfo) == 0x000000, "Member 'GBGameState_SetServerBasicInfo::NewServerBasicInfo' has a wrong offset!");

// Function GroundBranch.GBGameState.SetServerModList
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_SetServerModList final
{
public:
	TArray<struct FGBModBasicInfo>                InServerModList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetServerModList) == 0x000008, "Wrong alignment on GBGameState_SetServerModList");
static_assert(sizeof(GBGameState_SetServerModList) == 0x000010, "Wrong size on GBGameState_SetServerModList");
static_assert(offsetof(GBGameState_SetServerModList, InServerModList) == 0x000000, "Member 'GBGameState_SetServerModList::InServerModList' has a wrong offset!");

// Function GroundBranch.GBGameState.SetTeamAttitude
// 0x0003 (0x0003 - 0x0000)
struct GBGameState_SetTeamAttitude final
{
public:
	struct FGenericTeamId                         Team;                                              // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         OtherTeam;                                         // 0x0001(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 Attitude;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetTeamAttitude) == 0x000001, "Wrong alignment on GBGameState_SetTeamAttitude");
static_assert(sizeof(GBGameState_SetTeamAttitude) == 0x000003, "Wrong size on GBGameState_SetTeamAttitude");
static_assert(offsetof(GBGameState_SetTeamAttitude, Team) == 0x000000, "Member 'GBGameState_SetTeamAttitude::Team' has a wrong offset!");
static_assert(offsetof(GBGameState_SetTeamAttitude, OtherTeam) == 0x000001, "Member 'GBGameState_SetTeamAttitude::OtherTeam' has a wrong offset!");
static_assert(offsetof(GBGameState_SetTeamAttitude, Attitude) == 0x000002, "Member 'GBGameState_SetTeamAttitude::Attitude' has a wrong offset!");

// Function GroundBranch.GBGameState.SetVolunteersAllowed
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetVolunteersAllowed final
{
public:
	bool                                          bNewVolunteersAllowed;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetVolunteersAllowed) == 0x000001, "Wrong alignment on GBGameState_SetVolunteersAllowed");
static_assert(sizeof(GBGameState_SetVolunteersAllowed) == 0x000001, "Wrong size on GBGameState_SetVolunteersAllowed");
static_assert(offsetof(GBGameState_SetVolunteersAllowed, bNewVolunteersAllowed) == 0x000000, "Member 'GBGameState_SetVolunteersAllowed::bNewVolunteersAllowed' has a wrong offset!");

// Function GroundBranch.GBGameState.SetWatchConfig
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetWatchConfig final
{
public:
	uint8                                         InWatchConfig;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetWatchConfig) == 0x000001, "Wrong alignment on GBGameState_SetWatchConfig");
static_assert(sizeof(GBGameState_SetWatchConfig) == 0x000001, "Wrong size on GBGameState_SetWatchConfig");
static_assert(offsetof(GBGameState_SetWatchConfig, InWatchConfig) == 0x000000, "Member 'GBGameState_SetWatchConfig::InWatchConfig' has a wrong offset!");

// Function GroundBranch.GBGameState.SetWatchMode
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_SetWatchMode final
{
public:
	EWatchMode                                    InWatchMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_SetWatchMode) == 0x000001, "Wrong alignment on GBGameState_SetWatchMode");
static_assert(sizeof(GBGameState_SetWatchMode) == 0x000001, "Wrong size on GBGameState_SetWatchMode");
static_assert(offsetof(GBGameState_SetWatchMode, InWatchMode) == 0x000000, "Member 'GBGameState_SetWatchMode::InWatchMode' has a wrong offset!");

// Function GroundBranch.GBGameState.ArePlayerScoresInitialised
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_ArePlayerScoresInitialised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_ArePlayerScoresInitialised) == 0x000001, "Wrong alignment on GBGameState_ArePlayerScoresInitialised");
static_assert(sizeof(GBGameState_ArePlayerScoresInitialised) == 0x000001, "Wrong size on GBGameState_ArePlayerScoresInitialised");
static_assert(offsetof(GBGameState_ArePlayerScoresInitialised, ReturnValue) == 0x000000, "Member 'GBGameState_ArePlayerScoresInitialised::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.AreTeamScoresInitialised
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_AreTeamScoresInitialised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_AreTeamScoresInitialised) == 0x000001, "Wrong alignment on GBGameState_AreTeamScoresInitialised");
static_assert(sizeof(GBGameState_AreTeamScoresInitialised) == 0x000001, "Wrong size on GBGameState_AreTeamScoresInitialised");
static_assert(offsetof(GBGameState_AreTeamScoresInitialised, ReturnValue) == 0x000000, "Member 'GBGameState_AreTeamScoresInitialised::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.BroadcastGameMessage
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_BroadcastGameMessage final
{
public:
	class FName                                   GameMessageId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_BroadcastGameMessage) == 0x000008, "Wrong alignment on GBGameState_BroadcastGameMessage");
static_assert(sizeof(GBGameState_BroadcastGameMessage) == 0x000020, "Wrong size on GBGameState_BroadcastGameMessage");
static_assert(offsetof(GBGameState_BroadcastGameMessage, GameMessageId) == 0x000000, "Member 'GBGameState_BroadcastGameMessage::GameMessageId' has a wrong offset!");
static_assert(offsetof(GBGameState_BroadcastGameMessage, Type) == 0x000008, "Member 'GBGameState_BroadcastGameMessage::Type' has a wrong offset!");
static_assert(offsetof(GBGameState_BroadcastGameMessage, Duration) == 0x000010, "Member 'GBGameState_BroadcastGameMessage::Duration' has a wrong offset!");
static_assert(offsetof(GBGameState_BroadcastGameMessage, ModID) == 0x000018, "Member 'GBGameState_BroadcastGameMessage::ModID' has a wrong offset!");

// Function GroundBranch.GBGameState.DoesClientHostMod
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_DoesClientHostMod final
{
public:
	struct FUInt64                                ModIDToCheck;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_DoesClientHostMod) == 0x000008, "Wrong alignment on GBGameState_DoesClientHostMod");
static_assert(sizeof(GBGameState_DoesClientHostMod) == 0x000010, "Wrong size on GBGameState_DoesClientHostMod");
static_assert(offsetof(GBGameState_DoesClientHostMod, ModIDToCheck) == 0x000000, "Member 'GBGameState_DoesClientHostMod::ModIDToCheck' has a wrong offset!");
static_assert(offsetof(GBGameState_DoesClientHostMod, ReturnValue) == 0x000008, "Member 'GBGameState_DoesClientHostMod::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.DoesHostAllowPrimaryAsset
// 0x0014 (0x0014 - 0x0000)
struct GBGameState_DoesHostAllowPrimaryAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_DoesHostAllowPrimaryAsset) == 0x000004, "Wrong alignment on GBGameState_DoesHostAllowPrimaryAsset");
static_assert(sizeof(GBGameState_DoesHostAllowPrimaryAsset) == 0x000014, "Wrong size on GBGameState_DoesHostAllowPrimaryAsset");
static_assert(offsetof(GBGameState_DoesHostAllowPrimaryAsset, PrimaryAssetId) == 0x000000, "Member 'GBGameState_DoesHostAllowPrimaryAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(GBGameState_DoesHostAllowPrimaryAsset, ReturnValue) == 0x000010, "Member 'GBGameState_DoesHostAllowPrimaryAsset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.DoesServerHostMod
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_DoesServerHostMod final
{
public:
	struct FUInt64                                ModIDToCheck;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_DoesServerHostMod) == 0x000008, "Wrong alignment on GBGameState_DoesServerHostMod");
static_assert(sizeof(GBGameState_DoesServerHostMod) == 0x000010, "Wrong size on GBGameState_DoesServerHostMod");
static_assert(offsetof(GBGameState_DoesServerHostMod, ModIDToCheck) == 0x000000, "Member 'GBGameState_DoesServerHostMod::ModIDToCheck' has a wrong offset!");
static_assert(offsetof(GBGameState_DoesServerHostMod, ReturnValue) == 0x000008, "Member 'GBGameState_DoesServerHostMod::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetAARWidget
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetAARWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetAARWidget) == 0x000008, "Wrong alignment on GBGameState_GetAARWidget");
static_assert(sizeof(GBGameState_GetAARWidget) == 0x000008, "Wrong size on GBGameState_GetAARWidget");
static_assert(offsetof(GBGameState_GetAARWidget, ReturnValue) == 0x000000, "Member 'GBGameState_GetAARWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetAdjustedPlayerTeamId
// 0x0002 (0x0002 - 0x0000)
struct GBGameState_GetAdjustedPlayerTeamId final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetAdjustedPlayerTeamId) == 0x000001, "Wrong alignment on GBGameState_GetAdjustedPlayerTeamId");
static_assert(sizeof(GBGameState_GetAdjustedPlayerTeamId) == 0x000002, "Wrong size on GBGameState_GetAdjustedPlayerTeamId");
static_assert(offsetof(GBGameState_GetAdjustedPlayerTeamId, TeamId) == 0x000000, "Member 'GBGameState_GetAdjustedPlayerTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetAdjustedPlayerTeamId, ReturnValue) == 0x000001, "Member 'GBGameState_GetAdjustedPlayerTeamId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetBedtimeHours
// 0x000C (0x000C - 0x0000)
struct GBGameState_GetBedtimeHours final
{
public:
	float                                         OutBedtimeStartHour;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBedtimeEndHour;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutUseStandardHourForBedtimes;                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_GetBedtimeHours) == 0x000004, "Wrong alignment on GBGameState_GetBedtimeHours");
static_assert(sizeof(GBGameState_GetBedtimeHours) == 0x00000C, "Wrong size on GBGameState_GetBedtimeHours");
static_assert(offsetof(GBGameState_GetBedtimeHours, OutBedtimeStartHour) == 0x000000, "Member 'GBGameState_GetBedtimeHours::OutBedtimeStartHour' has a wrong offset!");
static_assert(offsetof(GBGameState_GetBedtimeHours, OutBedtimeEndHour) == 0x000004, "Member 'GBGameState_GetBedtimeHours::OutBedtimeEndHour' has a wrong offset!");
static_assert(offsetof(GBGameState_GetBedtimeHours, bOutUseStandardHourForBedtimes) == 0x000008, "Member 'GBGameState_GetBedtimeHours::bOutUseStandardHourForBedtimes' has a wrong offset!");

// Function GroundBranch.GBGameState.GetBriefingRoomWidget
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetBriefingRoomWidget final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetBriefingRoomWidget) == 0x000008, "Wrong alignment on GBGameState_GetBriefingRoomWidget");
static_assert(sizeof(GBGameState_GetBriefingRoomWidget) == 0x000008, "Wrong size on GBGameState_GetBriefingRoomWidget");
static_assert(offsetof(GBGameState_GetBriefingRoomWidget, ReturnValue) == 0x000000, "Member 'GBGameState_GetBriefingRoomWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCampaignMissionObjectiveInfoByRef
// 0x0080 (0x0080 - 0x0000)
struct GBGameState_GetCampaignMissionObjectiveInfoByRef final
{
public:
	TSoftObjectPtr<class AGBMissionObjective>     MissionObjectiveRef;                               // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBCampaignMissionObjectiveInfo        ReturnValue;                                       // 0x0028(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCampaignMissionObjectiveInfoByRef) == 0x000008, "Wrong alignment on GBGameState_GetCampaignMissionObjectiveInfoByRef");
static_assert(sizeof(GBGameState_GetCampaignMissionObjectiveInfoByRef) == 0x000080, "Wrong size on GBGameState_GetCampaignMissionObjectiveInfoByRef");
static_assert(offsetof(GBGameState_GetCampaignMissionObjectiveInfoByRef, MissionObjectiveRef) == 0x000000, "Member 'GBGameState_GetCampaignMissionObjectiveInfoByRef::MissionObjectiveRef' has a wrong offset!");
static_assert(offsetof(GBGameState_GetCampaignMissionObjectiveInfoByRef, ReturnValue) == 0x000028, "Member 'GBGameState_GetCampaignMissionObjectiveInfoByRef::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCampaignMissionObjectiveInfoByTitle
// 0x0068 (0x0068 - 0x0000)
struct GBGameState_GetCampaignMissionObjectiveInfoByTitle final
{
public:
	class FString                                 ObjectiveTitle;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBCampaignMissionObjectiveInfo        ReturnValue;                                       // 0x0010(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCampaignMissionObjectiveInfoByTitle) == 0x000008, "Wrong alignment on GBGameState_GetCampaignMissionObjectiveInfoByTitle");
static_assert(sizeof(GBGameState_GetCampaignMissionObjectiveInfoByTitle) == 0x000068, "Wrong size on GBGameState_GetCampaignMissionObjectiveInfoByTitle");
static_assert(offsetof(GBGameState_GetCampaignMissionObjectiveInfoByTitle, ObjectiveTitle) == 0x000000, "Member 'GBGameState_GetCampaignMissionObjectiveInfoByTitle::ObjectiveTitle' has a wrong offset!");
static_assert(offsetof(GBGameState_GetCampaignMissionObjectiveInfoByTitle, ReturnValue) == 0x000010, "Member 'GBGameState_GetCampaignMissionObjectiveInfoByTitle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCampaignMissionObjectiveInfoList
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetCampaignMissionObjectiveInfoList final
{
public:
	TArray<struct FGBCampaignMissionObjectiveInfo> ReturnValue;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCampaignMissionObjectiveInfoList) == 0x000008, "Wrong alignment on GBGameState_GetCampaignMissionObjectiveInfoList");
static_assert(sizeof(GBGameState_GetCampaignMissionObjectiveInfoList) == 0x000010, "Wrong size on GBGameState_GetCampaignMissionObjectiveInfoList");
static_assert(offsetof(GBGameState_GetCampaignMissionObjectiveInfoList, ReturnValue) == 0x000000, "Member 'GBGameState_GetCampaignMissionObjectiveInfoList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCanRandomiseObjectives
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetCanRandomiseObjectives final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCanRandomiseObjectives) == 0x000001, "Wrong alignment on GBGameState_GetCanRandomiseObjectives");
static_assert(sizeof(GBGameState_GetCanRandomiseObjectives) == 0x000001, "Wrong size on GBGameState_GetCanRandomiseObjectives");
static_assert(offsetof(GBGameState_GetCanRandomiseObjectives, ReturnValue) == 0x000000, "Member 'GBGameState_GetCanRandomiseObjectives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCaptureZone
// 0x000C (0x000C - 0x0000)
struct GBGameState_GetCaptureZone final
{
public:
	struct FGBCaptureZone                         ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCaptureZone) == 0x000004, "Wrong alignment on GBGameState_GetCaptureZone");
static_assert(sizeof(GBGameState_GetCaptureZone) == 0x00000C, "Wrong size on GBGameState_GetCaptureZone");
static_assert(offsetof(GBGameState_GetCaptureZone, ReturnValue) == 0x000000, "Member 'GBGameState_GetCaptureZone::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCumulativeRoundsWonForTeam
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetCumulativeRoundsWonForTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCumulativeRoundsWonForTeam) == 0x000004, "Wrong alignment on GBGameState_GetCumulativeRoundsWonForTeam");
static_assert(sizeof(GBGameState_GetCumulativeRoundsWonForTeam) == 0x000008, "Wrong size on GBGameState_GetCumulativeRoundsWonForTeam");
static_assert(offsetof(GBGameState_GetCumulativeRoundsWonForTeam, TeamId) == 0x000000, "Member 'GBGameState_GetCumulativeRoundsWonForTeam::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetCumulativeRoundsWonForTeam, ReturnValue) == 0x000004, "Member 'GBGameState_GetCumulativeRoundsWonForTeam::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCumulativeScoreForTeam
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetCumulativeScoreForTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCumulativeScoreForTeam) == 0x000004, "Wrong alignment on GBGameState_GetCumulativeScoreForTeam");
static_assert(sizeof(GBGameState_GetCumulativeScoreForTeam) == 0x000008, "Wrong size on GBGameState_GetCumulativeScoreForTeam");
static_assert(offsetof(GBGameState_GetCumulativeScoreForTeam, TeamId) == 0x000000, "Member 'GBGameState_GetCumulativeScoreForTeam::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetCumulativeScoreForTeam, ReturnValue) == 0x000004, "Member 'GBGameState_GetCumulativeScoreForTeam::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetCurrentVariantName
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetCurrentVariantName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetCurrentVariantName) == 0x000004, "Wrong alignment on GBGameState_GetCurrentVariantName");
static_assert(sizeof(GBGameState_GetCurrentVariantName) == 0x000008, "Wrong size on GBGameState_GetCurrentVariantName");
static_assert(offsetof(GBGameState_GetCurrentVariantName, ReturnValue) == 0x000000, "Member 'GBGameState_GetCurrentVariantName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetDifficulty
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetDifficulty final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetDifficulty) == 0x000004, "Wrong alignment on GBGameState_GetDifficulty");
static_assert(sizeof(GBGameState_GetDifficulty) == 0x000004, "Wrong size on GBGameState_GetDifficulty");
static_assert(offsetof(GBGameState_GetDifficulty, ReturnValue) == 0x000000, "Member 'GBGameState_GetDifficulty::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetEnemyPlayerList
// 0x0018 (0x0018 - 0x0000)
struct GBGameState_GetEnemyPlayerList final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeBots;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBPlayerState*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetEnemyPlayerList) == 0x000008, "Wrong alignment on GBGameState_GetEnemyPlayerList");
static_assert(sizeof(GBGameState_GetEnemyPlayerList) == 0x000018, "Wrong size on GBGameState_GetEnemyPlayerList");
static_assert(offsetof(GBGameState_GetEnemyPlayerList, TeamId) == 0x000000, "Member 'GBGameState_GetEnemyPlayerList::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetEnemyPlayerList, bExcludeBots) == 0x000001, "Member 'GBGameState_GetEnemyPlayerList::bExcludeBots' has a wrong offset!");
static_assert(offsetof(GBGameState_GetEnemyPlayerList, ReturnValue) == 0x000008, "Member 'GBGameState_GetEnemyPlayerList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameModeModID
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetGameModeModID final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameModeModID) == 0x000008, "Wrong alignment on GBGameState_GetGameModeModID");
static_assert(sizeof(GBGameState_GetGameModeModID) == 0x000008, "Wrong size on GBGameState_GetGameModeModID");
static_assert(offsetof(GBGameState_GetGameModeModID, ReturnValue) == 0x000000, "Member 'GBGameState_GetGameModeModID::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameModeName
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetGameModeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameModeName) == 0x000004, "Wrong alignment on GBGameState_GetGameModeName");
static_assert(sizeof(GBGameState_GetGameModeName) == 0x000008, "Wrong size on GBGameState_GetGameModeName");
static_assert(offsetof(GBGameState_GetGameModeName, ReturnValue) == 0x000000, "Member 'GBGameState_GetGameModeName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameModeType
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetGameModeType final
{
public:
	EGBGameModeType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameModeType) == 0x000001, "Wrong alignment on GBGameState_GetGameModeType");
static_assert(sizeof(GBGameState_GetGameModeType) == 0x000001, "Wrong size on GBGameState_GetGameModeType");
static_assert(offsetof(GBGameState_GetGameModeType, ReturnValue) == 0x000000, "Member 'GBGameState_GetGameModeType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameObjectives
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetGameObjectives final
{
public:
	TArray<struct FGBGameObjective>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameObjectives) == 0x000008, "Wrong alignment on GBGameState_GetGameObjectives");
static_assert(sizeof(GBGameState_GetGameObjectives) == 0x000010, "Wrong size on GBGameState_GetGameObjectives");
static_assert(offsetof(GBGameState_GetGameObjectives, ReturnValue) == 0x000000, "Member 'GBGameState_GetGameObjectives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetGameStatValue
// 0x0020 (0x0020 - 0x0000)
struct GBGameState_GetGameStatValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetGameStatValue) == 0x000008, "Wrong alignment on GBGameState_GetGameStatValue");
static_assert(sizeof(GBGameState_GetGameStatValue) == 0x000020, "Wrong size on GBGameState_GetGameStatValue");
static_assert(offsetof(GBGameState_GetGameStatValue, Key) == 0x000000, "Member 'GBGameState_GetGameStatValue::Key' has a wrong offset!");
static_assert(offsetof(GBGameState_GetGameStatValue, ReturnValue) == 0x000010, "Member 'GBGameState_GetGameStatValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetHotspotName
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetHotspotName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetHotspotName) == 0x000004, "Wrong alignment on GBGameState_GetHotspotName");
static_assert(sizeof(GBGameState_GetHotspotName) == 0x000008, "Wrong size on GBGameState_GetHotspotName");
static_assert(offsetof(GBGameState_GetHotspotName, ReturnValue) == 0x000000, "Member 'GBGameState_GetHotspotName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetIsCapturing
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetIsCapturing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetIsCapturing) == 0x000001, "Wrong alignment on GBGameState_GetIsCapturing");
static_assert(sizeof(GBGameState_GetIsCapturing) == 0x000001, "Wrong size on GBGameState_GetIsCapturing");
static_assert(offsetof(GBGameState_GetIsCapturing, ReturnValue) == 0x000000, "Member 'GBGameState_GetIsCapturing::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetLastMissionFileName
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetLastMissionFileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetLastMissionFileName) == 0x000008, "Wrong alignment on GBGameState_GetLastMissionFileName");
static_assert(sizeof(GBGameState_GetLastMissionFileName) == 0x000010, "Wrong size on GBGameState_GetLastMissionFileName");
static_assert(offsetof(GBGameState_GetLastMissionFileName, ReturnValue) == 0x000000, "Member 'GBGameState_GetLastMissionFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMapMarkerList
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetMapMarkerList final
{
public:
	TArray<struct FGBMapMarker>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMapMarkerList) == 0x000008, "Wrong alignment on GBGameState_GetMapMarkerList");
static_assert(sizeof(GBGameState_GetMapMarkerList) == 0x000010, "Wrong size on GBGameState_GetMapMarkerList");
static_assert(offsetof(GBGameState_GetMapMarkerList, ReturnValue) == 0x000000, "Member 'GBGameState_GetMapMarkerList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMatchInfo
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetMatchInfo final
{
public:
	struct FGBMatchInfo                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMatchInfo) == 0x000001, "Wrong alignment on GBGameState_GetMatchInfo");
static_assert(sizeof(GBGameState_GetMatchInfo) == 0x000004, "Wrong size on GBGameState_GetMatchInfo");
static_assert(offsetof(GBGameState_GetMatchInfo, ReturnValue) == 0x000000, "Member 'GBGameState_GetMatchInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMatchStartTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetMatchStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMatchStartTime) == 0x000004, "Wrong alignment on GBGameState_GetMatchStartTime");
static_assert(sizeof(GBGameState_GetMatchStartTime) == 0x000004, "Wrong size on GBGameState_GetMatchStartTime");
static_assert(offsetof(GBGameState_GetMatchStartTime, ReturnValue) == 0x000000, "Member 'GBGameState_GetMatchStartTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMatchStats
// 0x0028 (0x0028 - 0x0000)
struct GBGameState_GetMatchStats final
{
public:
	struct FGBMatchStats                          ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMatchStats) == 0x000008, "Wrong alignment on GBGameState_GetMatchStats");
static_assert(sizeof(GBGameState_GetMatchStats) == 0x000028, "Wrong size on GBGameState_GetMatchStats");
static_assert(offsetof(GBGameState_GetMatchStats, ReturnValue) == 0x000000, "Member 'GBGameState_GetMatchStats::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMatchTypeString
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetMatchTypeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMatchTypeString) == 0x000008, "Wrong alignment on GBGameState_GetMatchTypeString");
static_assert(sizeof(GBGameState_GetMatchTypeString) == 0x000010, "Wrong size on GBGameState_GetMatchTypeString");
static_assert(offsetof(GBGameState_GetMatchTypeString, ReturnValue) == 0x000000, "Member 'GBGameState_GetMatchTypeString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMatchWidget
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetMatchWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMatchWidget) == 0x000008, "Wrong alignment on GBGameState_GetMatchWidget");
static_assert(sizeof(GBGameState_GetMatchWidget) == 0x000008, "Wrong size on GBGameState_GetMatchWidget");
static_assert(offsetof(GBGameState_GetMatchWidget, ReturnValue) == 0x000000, "Member 'GBGameState_GetMatchWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMinPlayers
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetMinPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMinPlayers) == 0x000004, "Wrong alignment on GBGameState_GetMinPlayers");
static_assert(sizeof(GBGameState_GetMinPlayers) == 0x000004, "Wrong size on GBGameState_GetMinPlayers");
static_assert(offsetof(GBGameState_GetMinPlayers, ReturnValue) == 0x000000, "Member 'GBGameState_GetMinPlayers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMissionSequenceNumber
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetMissionSequenceNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMissionSequenceNumber) == 0x000004, "Wrong alignment on GBGameState_GetMissionSequenceNumber");
static_assert(sizeof(GBGameState_GetMissionSequenceNumber) == 0x000004, "Wrong size on GBGameState_GetMissionSequenceNumber");
static_assert(offsetof(GBGameState_GetMissionSequenceNumber, ReturnValue) == 0x000000, "Member 'GBGameState_GetMissionSequenceNumber::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMissionSetting
// 0x0030 (0x0030 - 0x0000)
struct GBGameState_GetMissionSetting final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBMissionSetting                      ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMissionSetting) == 0x000008, "Wrong alignment on GBGameState_GetMissionSetting");
static_assert(sizeof(GBGameState_GetMissionSetting) == 0x000030, "Wrong size on GBGameState_GetMissionSetting");
static_assert(offsetof(GBGameState_GetMissionSetting, Name_0) == 0x000000, "Member 'GBGameState_GetMissionSetting::Name_0' has a wrong offset!");
static_assert(offsetof(GBGameState_GetMissionSetting, ReturnValue) == 0x000010, "Member 'GBGameState_GetMissionSetting::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetMissionSettings
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetMissionSettings final
{
public:
	TArray<struct FGBMissionSetting>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetMissionSettings) == 0x000008, "Wrong alignment on GBGameState_GetMissionSettings");
static_assert(sizeof(GBGameState_GetMissionSettings) == 0x000010, "Wrong size on GBGameState_GetMissionSettings");
static_assert(offsetof(GBGameState_GetMissionSettings, ReturnValue) == 0x000000, "Member 'GBGameState_GetMissionSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetNextMapVoteChoices
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetNextMapVoteChoices final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetNextMapVoteChoices) == 0x000008, "Wrong alignment on GBGameState_GetNextMapVoteChoices");
static_assert(sizeof(GBGameState_GetNextMapVoteChoices) == 0x000010, "Wrong size on GBGameState_GetNextMapVoteChoices");
static_assert(offsetof(GBGameState_GetNextMapVoteChoices, ReturnValue) == 0x000000, "Member 'GBGameState_GetNextMapVoteChoices::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetNumPlayers
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetNumPlayers final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeBots;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetNumPlayers) == 0x000004, "Wrong alignment on GBGameState_GetNumPlayers");
static_assert(sizeof(GBGameState_GetNumPlayers) == 0x000008, "Wrong size on GBGameState_GetNumPlayers");
static_assert(offsetof(GBGameState_GetNumPlayers, TeamId) == 0x000000, "Member 'GBGameState_GetNumPlayers::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetNumPlayers, bExcludeBots) == 0x000001, "Member 'GBGameState_GetNumPlayers::bExcludeBots' has a wrong offset!");
static_assert(offsetof(GBGameState_GetNumPlayers, ReturnValue) == 0x000004, "Member 'GBGameState_GetNumPlayers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetObjectiveLocation
// 0x000C (0x000C - 0x0000)
struct GBGameState_GetObjectiveLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetObjectiveLocation) == 0x000004, "Wrong alignment on GBGameState_GetObjectiveLocation");
static_assert(sizeof(GBGameState_GetObjectiveLocation) == 0x00000C, "Wrong size on GBGameState_GetObjectiveLocation");
static_assert(offsetof(GBGameState_GetObjectiveLocation, ReturnValue) == 0x000000, "Member 'GBGameState_GetObjectiveLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPermittedGameModes
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetPermittedGameModes final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPermittedGameModes) == 0x000008, "Wrong alignment on GBGameState_GetPermittedGameModes");
static_assert(sizeof(GBGameState_GetPermittedGameModes) == 0x000010, "Wrong size on GBGameState_GetPermittedGameModes");
static_assert(offsetof(GBGameState_GetPermittedGameModes, ReturnValue) == 0x000000, "Member 'GBGameState_GetPermittedGameModes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPermittedMissionList
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetPermittedMissionList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPermittedMissionList) == 0x000008, "Wrong alignment on GBGameState_GetPermittedMissionList");
static_assert(sizeof(GBGameState_GetPermittedMissionList) == 0x000010, "Wrong size on GBGameState_GetPermittedMissionList");
static_assert(offsetof(GBGameState_GetPermittedMissionList, ReturnValue) == 0x000000, "Member 'GBGameState_GetPermittedMissionList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerList
// 0x0018 (0x0018 - 0x0000)
struct GBGameState_GetPlayerList final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeBots;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBPlayerState*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerList) == 0x000008, "Wrong alignment on GBGameState_GetPlayerList");
static_assert(sizeof(GBGameState_GetPlayerList) == 0x000018, "Wrong size on GBGameState_GetPlayerList");
static_assert(offsetof(GBGameState_GetPlayerList, TeamId) == 0x000000, "Member 'GBGameState_GetPlayerList::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetPlayerList, bExcludeBots) == 0x000001, "Member 'GBGameState_GetPlayerList::bExcludeBots' has a wrong offset!");
static_assert(offsetof(GBGameState_GetPlayerList, ReturnValue) == 0x000008, "Member 'GBGameState_GetPlayerList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerScoreTemplate
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetPlayerScoreTemplate final
{
public:
	struct FGBScoreCollection                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerScoreTemplate) == 0x000008, "Wrong alignment on GBGameState_GetPlayerScoreTemplate");
static_assert(sizeof(GBGameState_GetPlayerScoreTemplate) == 0x000010, "Wrong size on GBGameState_GetPlayerScoreTemplate");
static_assert(offsetof(GBGameState_GetPlayerScoreTemplate, ReturnValue) == 0x000000, "Member 'GBGameState_GetPlayerScoreTemplate::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerTeamCount
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetPlayerTeamCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerTeamCount) == 0x000004, "Wrong alignment on GBGameState_GetPlayerTeamCount");
static_assert(sizeof(GBGameState_GetPlayerTeamCount) == 0x000004, "Wrong size on GBGameState_GetPlayerTeamCount");
static_assert(offsetof(GBGameState_GetPlayerTeamCount, ReturnValue) == 0x000000, "Member 'GBGameState_GetPlayerTeamCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerTeamIdSafe
// 0x0002 (0x0002 - 0x0000)
struct GBGameState_GetPlayerTeamIdSafe final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerTeamIdSafe) == 0x000001, "Wrong alignment on GBGameState_GetPlayerTeamIdSafe");
static_assert(sizeof(GBGameState_GetPlayerTeamIdSafe) == 0x000002, "Wrong size on GBGameState_GetPlayerTeamIdSafe");
static_assert(offsetof(GBGameState_GetPlayerTeamIdSafe, TeamId) == 0x000000, "Member 'GBGameState_GetPlayerTeamIdSafe::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetPlayerTeamIdSafe, ReturnValue) == 0x000001, "Member 'GBGameState_GetPlayerTeamIdSafe::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerTeamInfo
// 0x001C (0x001C - 0x0000)
struct GBGameState_GetPlayerTeamInfo final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBTeamInfo                            ReturnValue;                                       // 0x0004(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerTeamInfo) == 0x000004, "Wrong alignment on GBGameState_GetPlayerTeamInfo");
static_assert(sizeof(GBGameState_GetPlayerTeamInfo) == 0x00001C, "Wrong size on GBGameState_GetPlayerTeamInfo");
static_assert(offsetof(GBGameState_GetPlayerTeamInfo, TeamId) == 0x000000, "Member 'GBGameState_GetPlayerTeamInfo::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetPlayerTeamInfo, ReturnValue) == 0x000004, "Member 'GBGameState_GetPlayerTeamInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetPlayerTeamInfos
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetPlayerTeamInfos final
{
public:
	TArray<struct FGBTeamInfo>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetPlayerTeamInfos) == 0x000008, "Wrong alignment on GBGameState_GetPlayerTeamInfos");
static_assert(sizeof(GBGameState_GetPlayerTeamInfos) == 0x000010, "Wrong size on GBGameState_GetPlayerTeamInfos");
static_assert(offsetof(GBGameState_GetPlayerTeamInfos, ReturnValue) == 0x000000, "Member 'GBGameState_GetPlayerTeamInfos::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetRoundIsTemporaryGameMode
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetRoundIsTemporaryGameMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetRoundIsTemporaryGameMode) == 0x000001, "Wrong alignment on GBGameState_GetRoundIsTemporaryGameMode");
static_assert(sizeof(GBGameState_GetRoundIsTemporaryGameMode) == 0x000001, "Wrong size on GBGameState_GetRoundIsTemporaryGameMode");
static_assert(offsetof(GBGameState_GetRoundIsTemporaryGameMode, ReturnValue) == 0x000000, "Member 'GBGameState_GetRoundIsTemporaryGameMode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetRoundNumber
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetRoundNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetRoundNumber) == 0x000004, "Wrong alignment on GBGameState_GetRoundNumber");
static_assert(sizeof(GBGameState_GetRoundNumber) == 0x000004, "Wrong size on GBGameState_GetRoundNumber");
static_assert(offsetof(GBGameState_GetRoundNumber, ReturnValue) == 0x000000, "Member 'GBGameState_GetRoundNumber::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetRoundStage
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetRoundStage final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetRoundStage) == 0x000004, "Wrong alignment on GBGameState_GetRoundStage");
static_assert(sizeof(GBGameState_GetRoundStage) == 0x000008, "Wrong size on GBGameState_GetRoundStage");
static_assert(offsetof(GBGameState_GetRoundStage, ReturnValue) == 0x000000, "Member 'GBGameState_GetRoundStage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetRoundStageTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetRoundStageTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetRoundStageTime) == 0x000004, "Wrong alignment on GBGameState_GetRoundStageTime");
static_assert(sizeof(GBGameState_GetRoundStageTime) == 0x000004, "Wrong size on GBGameState_GetRoundStageTime");
static_assert(offsetof(GBGameState_GetRoundStageTime, ReturnValue) == 0x000000, "Member 'GBGameState_GetRoundStageTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetRoundTime
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetRoundTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetRoundTime) == 0x000004, "Wrong alignment on GBGameState_GetRoundTime");
static_assert(sizeof(GBGameState_GetRoundTime) == 0x000004, "Wrong size on GBGameState_GetRoundTime");
static_assert(offsetof(GBGameState_GetRoundTime, ReturnValue) == 0x000000, "Member 'GBGameState_GetRoundTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetSearchLocations
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetSearchLocations final
{
public:
	TArray<struct FGBGameObjective>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetSearchLocations) == 0x000008, "Wrong alignment on GBGameState_GetSearchLocations");
static_assert(sizeof(GBGameState_GetSearchLocations) == 0x000010, "Wrong size on GBGameState_GetSearchLocations");
static_assert(offsetof(GBGameState_GetSearchLocations, ReturnValue) == 0x000000, "Member 'GBGameState_GetSearchLocations::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetServerBasicInfo
// 0x0030 (0x0030 - 0x0000)
struct GBGameState_GetServerBasicInfo final
{
public:
	struct FGBServerBasicInfo                     ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetServerBasicInfo) == 0x000008, "Wrong alignment on GBGameState_GetServerBasicInfo");
static_assert(sizeof(GBGameState_GetServerBasicInfo) == 0x000030, "Wrong size on GBGameState_GetServerBasicInfo");
static_assert(offsetof(GBGameState_GetServerBasicInfo, ReturnValue) == 0x000000, "Member 'GBGameState_GetServerBasicInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetServerModList
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetServerModList final
{
public:
	TArray<struct FGBModBasicInfo>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetServerModList) == 0x000008, "Wrong alignment on GBGameState_GetServerModList");
static_assert(sizeof(GBGameState_GetServerModList) == 0x000010, "Wrong size on GBGameState_GetServerModList");
static_assert(offsetof(GBGameState_GetServerModList, ReturnValue) == 0x000000, "Member 'GBGameState_GetServerModList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetServerUsesMods
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetServerUsesMods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetServerUsesMods) == 0x000001, "Wrong alignment on GBGameState_GetServerUsesMods");
static_assert(sizeof(GBGameState_GetServerUsesMods) == 0x000001, "Wrong size on GBGameState_GetServerUsesMods");
static_assert(offsetof(GBGameState_GetServerUsesMods, ReturnValue) == 0x000000, "Member 'GBGameState_GetServerUsesMods::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetTeamElementCount
// 0x0008 (0x0008 - 0x0000)
struct GBGameState_GetTeamElementCount final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPlayOnly;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetTeamElementCount) == 0x000004, "Wrong alignment on GBGameState_GetTeamElementCount");
static_assert(sizeof(GBGameState_GetTeamElementCount) == 0x000008, "Wrong size on GBGameState_GetTeamElementCount");
static_assert(offsetof(GBGameState_GetTeamElementCount, TeamId) == 0x000000, "Member 'GBGameState_GetTeamElementCount::TeamId' has a wrong offset!");
static_assert(offsetof(GBGameState_GetTeamElementCount, bInPlayOnly) == 0x000001, "Member 'GBGameState_GetTeamElementCount::bInPlayOnly' has a wrong offset!");
static_assert(offsetof(GBGameState_GetTeamElementCount, ReturnValue) == 0x000004, "Member 'GBGameState_GetTeamElementCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetTimeLimit
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetTimeLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetTimeLimit) == 0x000004, "Wrong alignment on GBGameState_GetTimeLimit");
static_assert(sizeof(GBGameState_GetTimeLimit) == 0x000004, "Wrong size on GBGameState_GetTimeLimit");
static_assert(offsetof(GBGameState_GetTimeLimit, ReturnValue) == 0x000000, "Member 'GBGameState_GetTimeLimit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetVolunteersAllowed
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetVolunteersAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetVolunteersAllowed) == 0x000001, "Wrong alignment on GBGameState_GetVolunteersAllowed");
static_assert(sizeof(GBGameState_GetVolunteersAllowed) == 0x000001, "Wrong size on GBGameState_GetVolunteersAllowed");
static_assert(offsetof(GBGameState_GetVolunteersAllowed, ReturnValue) == 0x000000, "Member 'GBGameState_GetVolunteersAllowed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetVotingCommands
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_GetVotingCommands final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetVotingCommands) == 0x000008, "Wrong alignment on GBGameState_GetVotingCommands");
static_assert(sizeof(GBGameState_GetVotingCommands) == 0x000010, "Wrong size on GBGameState_GetVotingCommands");
static_assert(offsetof(GBGameState_GetVotingCommands, ReturnValue) == 0x000000, "Member 'GBGameState_GetVotingCommands::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetWatchConfig
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetWatchConfig final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetWatchConfig) == 0x000001, "Wrong alignment on GBGameState_GetWatchConfig");
static_assert(sizeof(GBGameState_GetWatchConfig) == 0x000001, "Wrong size on GBGameState_GetWatchConfig");
static_assert(offsetof(GBGameState_GetWatchConfig, ReturnValue) == 0x000000, "Member 'GBGameState_GetWatchConfig::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetWatchMode
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_GetWatchMode final
{
public:
	EWatchMode                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetWatchMode) == 0x000001, "Wrong alignment on GBGameState_GetWatchMode");
static_assert(sizeof(GBGameState_GetWatchMode) == 0x000001, "Wrong size on GBGameState_GetWatchMode");
static_assert(offsetof(GBGameState_GetWatchMode, ReturnValue) == 0x000000, "Member 'GBGameState_GetWatchMode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetWinningTeamForMatch
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetWinningTeamForMatch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetWinningTeamForMatch) == 0x000004, "Wrong alignment on GBGameState_GetWinningTeamForMatch");
static_assert(sizeof(GBGameState_GetWinningTeamForMatch) == 0x000004, "Wrong size on GBGameState_GetWinningTeamForMatch");
static_assert(offsetof(GBGameState_GetWinningTeamForMatch, ReturnValue) == 0x000000, "Member 'GBGameState_GetWinningTeamForMatch::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.GetWinningTeamForRound
// 0x0004 (0x0004 - 0x0000)
struct GBGameState_GetWinningTeamForRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_GetWinningTeamForRound) == 0x000004, "Wrong alignment on GBGameState_GetWinningTeamForRound");
static_assert(sizeof(GBGameState_GetWinningTeamForRound) == 0x000004, "Wrong size on GBGameState_GetWinningTeamForRound");
static_assert(offsetof(GBGameState_GetWinningTeamForRound, ReturnValue) == 0x000000, "Member 'GBGameState_GetWinningTeamForRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.HasMissionSetting
// 0x0018 (0x0018 - 0x0000)
struct GBGameState_HasMissionSetting final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_HasMissionSetting) == 0x000008, "Wrong alignment on GBGameState_HasMissionSetting");
static_assert(sizeof(GBGameState_HasMissionSetting) == 0x000018, "Wrong size on GBGameState_HasMissionSetting");
static_assert(offsetof(GBGameState_HasMissionSetting, Name_0) == 0x000000, "Member 'GBGameState_HasMissionSetting::Name_0' has a wrong offset!");
static_assert(offsetof(GBGameState_HasMissionSetting, ReturnValue) == 0x000010, "Member 'GBGameState_HasMissionSetting::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.IsGameRuleEnabled
// 0x000C (0x000C - 0x0000)
struct GBGameState_IsGameRuleEnabled final
{
public:
	class FName                                   RuleName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameState_IsGameRuleEnabled) == 0x000004, "Wrong alignment on GBGameState_IsGameRuleEnabled");
static_assert(sizeof(GBGameState_IsGameRuleEnabled) == 0x00000C, "Wrong size on GBGameState_IsGameRuleEnabled");
static_assert(offsetof(GBGameState_IsGameRuleEnabled, RuleName) == 0x000000, "Member 'GBGameState_IsGameRuleEnabled::RuleName' has a wrong offset!");
static_assert(offsetof(GBGameState_IsGameRuleEnabled, ReturnValue) == 0x000008, "Member 'GBGameState_IsGameRuleEnabled::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.IsRoundBased
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_IsRoundBased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_IsRoundBased) == 0x000001, "Wrong alignment on GBGameState_IsRoundBased");
static_assert(sizeof(GBGameState_IsRoundBased) == 0x000001, "Wrong size on GBGameState_IsRoundBased");
static_assert(offsetof(GBGameState_IsRoundBased, ReturnValue) == 0x000000, "Member 'GBGameState_IsRoundBased::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.NotifyIntelSearchCompleted
// 0x0010 (0x0010 - 0x0000)
struct GBGameState_NotifyIntelSearchCompleted final
{
public:
	class AGBGameTrigger*                         GameTrigger;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBSearchableProp*                      SearchablePropActor;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_NotifyIntelSearchCompleted) == 0x000008, "Wrong alignment on GBGameState_NotifyIntelSearchCompleted");
static_assert(sizeof(GBGameState_NotifyIntelSearchCompleted) == 0x000010, "Wrong size on GBGameState_NotifyIntelSearchCompleted");
static_assert(offsetof(GBGameState_NotifyIntelSearchCompleted, GameTrigger) == 0x000000, "Member 'GBGameState_NotifyIntelSearchCompleted::GameTrigger' has a wrong offset!");
static_assert(offsetof(GBGameState_NotifyIntelSearchCompleted, SearchablePropActor) == 0x000008, "Member 'GBGameState_NotifyIntelSearchCompleted::SearchablePropActor' has a wrong offset!");

// Function GroundBranch.GBGameState.PlayAreaOpen
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_PlayAreaOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_PlayAreaOpen) == 0x000001, "Wrong alignment on GBGameState_PlayAreaOpen");
static_assert(sizeof(GBGameState_PlayAreaOpen) == 0x000001, "Wrong size on GBGameState_PlayAreaOpen");
static_assert(offsetof(GBGameState_PlayAreaOpen, ReturnValue) == 0x000000, "Member 'GBGameState_PlayAreaOpen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameState.UsesReadyRoom
// 0x0001 (0x0001 - 0x0000)
struct GBGameState_UsesReadyRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameState_UsesReadyRoom) == 0x000001, "Wrong alignment on GBGameState_UsesReadyRoom");
static_assert(sizeof(GBGameState_UsesReadyRoom) == 0x000001, "Wrong size on GBGameState_UsesReadyRoom");
static_assert(offsetof(GBGameState_UsesReadyRoom, ReturnValue) == 0x000000, "Member 'GBGameState_UsesReadyRoom::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTaggedMontages.GetBestMatchingMontage
// 0x0030 (0x0030 - 0x0000)
struct GBTaggedMontages_GetBestMatchingMontage final
{
public:
	struct FGameplayTagContainer                  InTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InRandAlpha;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTaggedMontages_GetBestMatchingMontage) == 0x000008, "Wrong alignment on GBTaggedMontages_GetBestMatchingMontage");
static_assert(sizeof(GBTaggedMontages_GetBestMatchingMontage) == 0x000030, "Wrong size on GBTaggedMontages_GetBestMatchingMontage");
static_assert(offsetof(GBTaggedMontages_GetBestMatchingMontage, InTags) == 0x000000, "Member 'GBTaggedMontages_GetBestMatchingMontage::InTags' has a wrong offset!");
static_assert(offsetof(GBTaggedMontages_GetBestMatchingMontage, InRandAlpha) == 0x000020, "Member 'GBTaggedMontages_GetBestMatchingMontage::InRandAlpha' has a wrong offset!");
static_assert(offsetof(GBTaggedMontages_GetBestMatchingMontage, ReturnValue) == 0x000028, "Member 'GBTaggedMontages_GetBestMatchingMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTaggedMontages.GetMatchingMontage
// 0x0030 (0x0030 - 0x0000)
struct GBTaggedMontages_GetMatchingMontage final
{
public:
	struct FGameplayTagContainer                  InTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InRandAlpha;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTaggedMontages_GetMatchingMontage) == 0x000008, "Wrong alignment on GBTaggedMontages_GetMatchingMontage");
static_assert(sizeof(GBTaggedMontages_GetMatchingMontage) == 0x000030, "Wrong size on GBTaggedMontages_GetMatchingMontage");
static_assert(offsetof(GBTaggedMontages_GetMatchingMontage, InTags) == 0x000000, "Member 'GBTaggedMontages_GetMatchingMontage::InTags' has a wrong offset!");
static_assert(offsetof(GBTaggedMontages_GetMatchingMontage, InRandAlpha) == 0x000020, "Member 'GBTaggedMontages_GetMatchingMontage::InRandAlpha' has a wrong offset!");
static_assert(offsetof(GBTaggedMontages_GetMatchingMontage, ReturnValue) == 0x000028, "Member 'GBTaggedMontages_GetMatchingMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.GetGBGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct GBGameUserSettings_GetGBGameUserSettings final
{
public:
	class UGBGameUserSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_GetGBGameUserSettings) == 0x000008, "Wrong alignment on GBGameUserSettings_GetGBGameUserSettings");
static_assert(sizeof(GBGameUserSettings_GetGBGameUserSettings) == 0x000008, "Wrong size on GBGameUserSettings_GetGBGameUserSettings");
static_assert(offsetof(GBGameUserSettings_GetGBGameUserSettings, ReturnValue) == 0x000000, "Member 'GBGameUserSettings_GetGBGameUserSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.GetQualityLevelCVarSettingsFromIni
// 0x0038 (0x0038 - 0x0000)
struct GBGameUserSettings_GetQualityLevelCVarSettingsFromIni final
{
public:
	class FString                                 QualitySection;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityLevel;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutCVarKeys;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutCVarValues;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_GetQualityLevelCVarSettingsFromIni) == 0x000008, "Wrong alignment on GBGameUserSettings_GetQualityLevelCVarSettingsFromIni");
static_assert(sizeof(GBGameUserSettings_GetQualityLevelCVarSettingsFromIni) == 0x000038, "Wrong size on GBGameUserSettings_GetQualityLevelCVarSettingsFromIni");
static_assert(offsetof(GBGameUserSettings_GetQualityLevelCVarSettingsFromIni, QualitySection) == 0x000000, "Member 'GBGameUserSettings_GetQualityLevelCVarSettingsFromIni::QualitySection' has a wrong offset!");
static_assert(offsetof(GBGameUserSettings_GetQualityLevelCVarSettingsFromIni, QualityLevel) == 0x000010, "Member 'GBGameUserSettings_GetQualityLevelCVarSettingsFromIni::QualityLevel' has a wrong offset!");
static_assert(offsetof(GBGameUserSettings_GetQualityLevelCVarSettingsFromIni, OutCVarKeys) == 0x000018, "Member 'GBGameUserSettings_GetQualityLevelCVarSettingsFromIni::OutCVarKeys' has a wrong offset!");
static_assert(offsetof(GBGameUserSettings_GetQualityLevelCVarSettingsFromIni, OutCVarValues) == 0x000028, "Member 'GBGameUserSettings_GetQualityLevelCVarSettingsFromIni::OutCVarValues' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.GetAudioVolume
// 0x000C (0x000C - 0x0000)
struct GBGameUserSettings_GetAudioVolume final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_GetAudioVolume) == 0x000004, "Wrong alignment on GBGameUserSettings_GetAudioVolume");
static_assert(sizeof(GBGameUserSettings_GetAudioVolume) == 0x00000C, "Wrong size on GBGameUserSettings_GetAudioVolume");
static_assert(offsetof(GBGameUserSettings_GetAudioVolume, InName) == 0x000000, "Member 'GBGameUserSettings_GetAudioVolume::InName' has a wrong offset!");
static_assert(offsetof(GBGameUserSettings_GetAudioVolume, ReturnValue) == 0x000008, "Member 'GBGameUserSettings_GetAudioVolume::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.GetUnfocusedVolumeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct GBGameUserSettings_GetUnfocusedVolumeMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_GetUnfocusedVolumeMultiplier) == 0x000004, "Wrong alignment on GBGameUserSettings_GetUnfocusedVolumeMultiplier");
static_assert(sizeof(GBGameUserSettings_GetUnfocusedVolumeMultiplier) == 0x000004, "Wrong size on GBGameUserSettings_GetUnfocusedVolumeMultiplier");
static_assert(offsetof(GBGameUserSettings_GetUnfocusedVolumeMultiplier, ReturnValue) == 0x000000, "Member 'GBGameUserSettings_GetUnfocusedVolumeMultiplier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.MuteAudio
// 0x0010 (0x0010 - 0x0000)
struct GBGameUserSettings_MuteAudio final
{
public:
	TArray<class FName>                           ExcludedAudioVolumeNames;                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_MuteAudio) == 0x000008, "Wrong alignment on GBGameUserSettings_MuteAudio");
static_assert(sizeof(GBGameUserSettings_MuteAudio) == 0x000010, "Wrong size on GBGameUserSettings_MuteAudio");
static_assert(offsetof(GBGameUserSettings_MuteAudio, ExcludedAudioVolumeNames) == 0x000000, "Member 'GBGameUserSettings_MuteAudio::ExcludedAudioVolumeNames' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.SetAudioVolume
// 0x000C (0x000C - 0x0000)
struct GBGameUserSettings_SetAudioVolume final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVolume;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_SetAudioVolume) == 0x000004, "Wrong alignment on GBGameUserSettings_SetAudioVolume");
static_assert(sizeof(GBGameUserSettings_SetAudioVolume) == 0x00000C, "Wrong size on GBGameUserSettings_SetAudioVolume");
static_assert(offsetof(GBGameUserSettings_SetAudioVolume, InName) == 0x000000, "Member 'GBGameUserSettings_SetAudioVolume::InName' has a wrong offset!");
static_assert(offsetof(GBGameUserSettings_SetAudioVolume, InVolume) == 0x000008, "Member 'GBGameUserSettings_SetAudioVolume::InVolume' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.SetUnfocusedVolumeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct GBGameUserSettings_SetUnfocusedVolumeMultiplier final
{
public:
	float                                         InVolumeMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_SetUnfocusedVolumeMultiplier) == 0x000004, "Wrong alignment on GBGameUserSettings_SetUnfocusedVolumeMultiplier");
static_assert(sizeof(GBGameUserSettings_SetUnfocusedVolumeMultiplier) == 0x000004, "Wrong size on GBGameUserSettings_SetUnfocusedVolumeMultiplier");
static_assert(offsetof(GBGameUserSettings_SetUnfocusedVolumeMultiplier, InVolumeMultiplier) == 0x000000, "Member 'GBGameUserSettings_SetUnfocusedVolumeMultiplier::InVolumeMultiplier' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.AreQualityLevelsDirty
// 0x0001 (0x0001 - 0x0000)
struct GBGameUserSettings_AreQualityLevelsDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameUserSettings_AreQualityLevelsDirty) == 0x000001, "Wrong alignment on GBGameUserSettings_AreQualityLevelsDirty");
static_assert(sizeof(GBGameUserSettings_AreQualityLevelsDirty) == 0x000001, "Wrong size on GBGameUserSettings_AreQualityLevelsDirty");
static_assert(offsetof(GBGameUserSettings_AreQualityLevelsDirty, ReturnValue) == 0x000000, "Member 'GBGameUserSettings_AreQualityLevelsDirty::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameUserSettings.IsMuted
// 0x000C (0x000C - 0x0000)
struct GBGameUserSettings_IsMuted final
{
public:
	class FName                                   AudioVolumeName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameUserSettings_IsMuted) == 0x000004, "Wrong alignment on GBGameUserSettings_IsMuted");
static_assert(sizeof(GBGameUserSettings_IsMuted) == 0x00000C, "Wrong size on GBGameUserSettings_IsMuted");
static_assert(offsetof(GBGameUserSettings_IsMuted, AudioVolumeName) == 0x000000, "Member 'GBGameUserSettings_IsMuted::AudioVolumeName' has a wrong offset!");
static_assert(offsetof(GBGameUserSettings_IsMuted, ReturnValue) == 0x000008, "Member 'GBGameUserSettings_IsMuted::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameViewportClient.GetGameViewportClient
// 0x0010 (0x0010 - 0x0000)
struct GBGameViewportClient_GetGameViewportClient final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGBGameViewportClient*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameViewportClient_GetGameViewportClient) == 0x000008, "Wrong alignment on GBGameViewportClient_GetGameViewportClient");
static_assert(sizeof(GBGameViewportClient_GetGameViewportClient) == 0x000010, "Wrong size on GBGameViewportClient_GetGameViewportClient");
static_assert(offsetof(GBGameViewportClient_GetGameViewportClient, WorldContextObject) == 0x000000, "Member 'GBGameViewportClient_GetGameViewportClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetGameViewportClient, ReturnValue) == 0x000008, "Member 'GBGameViewportClient_GetGameViewportClient::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameViewportClient.GetNetworkFailureInfo
// 0x0030 (0x0030 - 0x0000)
struct GBGameViewportClient_GetNetworkFailureInfo final
{
public:
	class FString                                 OutLastAttemptedURL;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkFailure                               OutLastNetworkFailureType;                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutLastNetworkErrorString;                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameViewportClient_GetNetworkFailureInfo) == 0x000008, "Wrong alignment on GBGameViewportClient_GetNetworkFailureInfo");
static_assert(sizeof(GBGameViewportClient_GetNetworkFailureInfo) == 0x000030, "Wrong size on GBGameViewportClient_GetNetworkFailureInfo");
static_assert(offsetof(GBGameViewportClient_GetNetworkFailureInfo, OutLastAttemptedURL) == 0x000000, "Member 'GBGameViewportClient_GetNetworkFailureInfo::OutLastAttemptedURL' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetNetworkFailureInfo, OutLastNetworkFailureType) == 0x000010, "Member 'GBGameViewportClient_GetNetworkFailureInfo::OutLastNetworkFailureType' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetNetworkFailureInfo, OutLastNetworkErrorString) == 0x000018, "Member 'GBGameViewportClient_GetNetworkFailureInfo::OutLastNetworkErrorString' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetNetworkFailureInfo, ReturnValue) == 0x000028, "Member 'GBGameViewportClient_GetNetworkFailureInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameViewportClient.GetTravelFailureInfo
// 0x0030 (0x0030 - 0x0000)
struct GBGameViewportClient_GetTravelFailureInfo final
{
public:
	class FString                                 OutLastAttemptedURL;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelFailure                                OutLastTravelFailureType;                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutLastTravelErrorString;                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBGameViewportClient_GetTravelFailureInfo) == 0x000008, "Wrong alignment on GBGameViewportClient_GetTravelFailureInfo");
static_assert(sizeof(GBGameViewportClient_GetTravelFailureInfo) == 0x000030, "Wrong size on GBGameViewportClient_GetTravelFailureInfo");
static_assert(offsetof(GBGameViewportClient_GetTravelFailureInfo, OutLastAttemptedURL) == 0x000000, "Member 'GBGameViewportClient_GetTravelFailureInfo::OutLastAttemptedURL' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetTravelFailureInfo, OutLastTravelFailureType) == 0x000010, "Member 'GBGameViewportClient_GetTravelFailureInfo::OutLastTravelFailureType' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetTravelFailureInfo, OutLastTravelErrorString) == 0x000018, "Member 'GBGameViewportClient_GetTravelFailureInfo::OutLastTravelErrorString' has a wrong offset!");
static_assert(offsetof(GBGameViewportClient_GetTravelFailureInfo, ReturnValue) == 0x000028, "Member 'GBGameViewportClient_GetTravelFailureInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGameViewportClient.GetDisconnectReason
// 0x0018 (0x0018 - 0x0000)
struct GBGameViewportClient_GetDisconnectReason final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGameViewportClient_GetDisconnectReason) == 0x000008, "Wrong alignment on GBGameViewportClient_GetDisconnectReason");
static_assert(sizeof(GBGameViewportClient_GetDisconnectReason) == 0x000018, "Wrong size on GBGameViewportClient_GetDisconnectReason");
static_assert(offsetof(GBGameViewportClient_GetDisconnectReason, ReturnValue) == 0x000000, "Member 'GBGameViewportClient_GetDisconnectReason::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBGlobalAbilitySystem.AddAbilitySystemComp
// 0x0008 (0x0008 - 0x0000)
struct GBGlobalAbilitySystem_AddAbilitySystemComp final
{
public:
	class UGBAbilitySystemComponent*              AbilitySystemComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGlobalAbilitySystem_AddAbilitySystemComp) == 0x000008, "Wrong alignment on GBGlobalAbilitySystem_AddAbilitySystemComp");
static_assert(sizeof(GBGlobalAbilitySystem_AddAbilitySystemComp) == 0x000008, "Wrong size on GBGlobalAbilitySystem_AddAbilitySystemComp");
static_assert(offsetof(GBGlobalAbilitySystem_AddAbilitySystemComp, AbilitySystemComp) == 0x000000, "Member 'GBGlobalAbilitySystem_AddAbilitySystemComp::AbilitySystemComp' has a wrong offset!");

// Function GroundBranch.GBGlobalAbilitySystem.AddGlobalGameplayAbility
// 0x0008 (0x0008 - 0x0000)
struct GBGlobalAbilitySystem_AddGlobalGameplayAbility final
{
public:
	TSubclassOf<class UGBGameplayAbility>         GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGlobalAbilitySystem_AddGlobalGameplayAbility) == 0x000008, "Wrong alignment on GBGlobalAbilitySystem_AddGlobalGameplayAbility");
static_assert(sizeof(GBGlobalAbilitySystem_AddGlobalGameplayAbility) == 0x000008, "Wrong size on GBGlobalAbilitySystem_AddGlobalGameplayAbility");
static_assert(offsetof(GBGlobalAbilitySystem_AddGlobalGameplayAbility, GameplayAbilityClass) == 0x000000, "Member 'GBGlobalAbilitySystem_AddGlobalGameplayAbility::GameplayAbilityClass' has a wrong offset!");

// Function GroundBranch.GBGlobalAbilitySystem.ApplyGlobalGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct GBGlobalAbilitySystem_ApplyGlobalGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGlobalAbilitySystem_ApplyGlobalGameplayEffect) == 0x000008, "Wrong alignment on GBGlobalAbilitySystem_ApplyGlobalGameplayEffect");
static_assert(sizeof(GBGlobalAbilitySystem_ApplyGlobalGameplayEffect) == 0x000008, "Wrong size on GBGlobalAbilitySystem_ApplyGlobalGameplayEffect");
static_assert(offsetof(GBGlobalAbilitySystem_ApplyGlobalGameplayEffect, GameplayEffectClass) == 0x000000, "Member 'GBGlobalAbilitySystem_ApplyGlobalGameplayEffect::GameplayEffectClass' has a wrong offset!");

// Function GroundBranch.GBGlobalAbilitySystem.RemoveAbilitySystemComp
// 0x0008 (0x0008 - 0x0000)
struct GBGlobalAbilitySystem_RemoveAbilitySystemComp final
{
public:
	class UGBAbilitySystemComponent*              AbilitySystemComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGlobalAbilitySystem_RemoveAbilitySystemComp) == 0x000008, "Wrong alignment on GBGlobalAbilitySystem_RemoveAbilitySystemComp");
static_assert(sizeof(GBGlobalAbilitySystem_RemoveAbilitySystemComp) == 0x000008, "Wrong size on GBGlobalAbilitySystem_RemoveAbilitySystemComp");
static_assert(offsetof(GBGlobalAbilitySystem_RemoveAbilitySystemComp, AbilitySystemComp) == 0x000000, "Member 'GBGlobalAbilitySystem_RemoveAbilitySystemComp::AbilitySystemComp' has a wrong offset!");

// Function GroundBranch.GBGlobalAbilitySystem.RemoveGlobalGameplayAbility
// 0x0008 (0x0008 - 0x0000)
struct GBGlobalAbilitySystem_RemoveGlobalGameplayAbility final
{
public:
	TSubclassOf<class UGBGameplayAbility>         GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGlobalAbilitySystem_RemoveGlobalGameplayAbility) == 0x000008, "Wrong alignment on GBGlobalAbilitySystem_RemoveGlobalGameplayAbility");
static_assert(sizeof(GBGlobalAbilitySystem_RemoveGlobalGameplayAbility) == 0x000008, "Wrong size on GBGlobalAbilitySystem_RemoveGlobalGameplayAbility");
static_assert(offsetof(GBGlobalAbilitySystem_RemoveGlobalGameplayAbility, GameplayAbilityClass) == 0x000000, "Member 'GBGlobalAbilitySystem_RemoveGlobalGameplayAbility::GameplayAbilityClass' has a wrong offset!");

// Function GroundBranch.GBGlobalAbilitySystem.RemoveGlobalGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct GBGlobalAbilitySystem_RemoveGlobalGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGlobalAbilitySystem_RemoveGlobalGameplayEffect) == 0x000008, "Wrong alignment on GBGlobalAbilitySystem_RemoveGlobalGameplayEffect");
static_assert(sizeof(GBGlobalAbilitySystem_RemoveGlobalGameplayEffect) == 0x000008, "Wrong size on GBGlobalAbilitySystem_RemoveGlobalGameplayEffect");
static_assert(offsetof(GBGlobalAbilitySystem_RemoveGlobalGameplayEffect, GameplayEffectClass) == 0x000000, "Member 'GBGlobalAbilitySystem_RemoveGlobalGameplayEffect::GameplayEffectClass' has a wrong offset!");

// Function GroundBranch.GBGrenade.ChangeThrowSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBGrenade_ChangeThrowSpeed final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGrenade_ChangeThrowSpeed) == 0x000004, "Wrong alignment on GBGrenade_ChangeThrowSpeed");
static_assert(sizeof(GBGrenade_ChangeThrowSpeed) == 0x000004, "Wrong size on GBGrenade_ChangeThrowSpeed");
static_assert(offsetof(GBGrenade_ChangeThrowSpeed, Direction) == 0x000000, "Member 'GBGrenade_ChangeThrowSpeed::Direction' has a wrong offset!");

// Function GroundBranch.GBGrenade.ServerSetCurrentSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBGrenade_ServerSetCurrentSpeed final
{
public:
	int32                                         NewCurrentSpeed;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGrenade_ServerSetCurrentSpeed) == 0x000004, "Wrong alignment on GBGrenade_ServerSetCurrentSpeed");
static_assert(sizeof(GBGrenade_ServerSetCurrentSpeed) == 0x000004, "Wrong size on GBGrenade_ServerSetCurrentSpeed");
static_assert(offsetof(GBGrenade_ServerSetCurrentSpeed, NewCurrentSpeed) == 0x000000, "Member 'GBGrenade_ServerSetCurrentSpeed::NewCurrentSpeed' has a wrong offset!");

// Function GroundBranch.GBGrenade.GetCurrentSpeed
// 0x0004 (0x0004 - 0x0000)
struct GBGrenade_GetCurrentSpeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBGrenade_GetCurrentSpeed) == 0x000004, "Wrong alignment on GBGrenade_GetCurrentSpeed");
static_assert(sizeof(GBGrenade_GetCurrentSpeed) == 0x000004, "Wrong size on GBGrenade_GetCurrentSpeed");
static_assert(offsetof(GBGrenade_GetCurrentSpeed, ReturnValue) == 0x000000, "Member 'GBGrenade_GetCurrentSpeed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBHead.OnTakeHit
// 0x0014 (0x0014 - 0x0000)
struct GBHead_OnTakeHit final
{
public:
	class FName                                   RefBoneName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RefPosPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHead_OnTakeHit) == 0x000004, "Wrong alignment on GBHead_OnTakeHit");
static_assert(sizeof(GBHead_OnTakeHit) == 0x000014, "Wrong size on GBHead_OnTakeHit");
static_assert(offsetof(GBHead_OnTakeHit, RefBoneName) == 0x000000, "Member 'GBHead_OnTakeHit::RefBoneName' has a wrong offset!");
static_assert(offsetof(GBHead_OnTakeHit, RefPosPosition) == 0x000008, "Member 'GBHead_OnTakeHit::RefPosPosition' has a wrong offset!");

// Function GroundBranch.GBHolster.HolsterItem
// 0x0010 (0x0010 - 0x0000)
struct GBHolster_HolsterItem final
{
public:
	class AGBInvItem*                             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHolster_HolsterItem) == 0x000008, "Wrong alignment on GBHolster_HolsterItem");
static_assert(sizeof(GBHolster_HolsterItem) == 0x000010, "Wrong size on GBHolster_HolsterItem");
static_assert(offsetof(GBHolster_HolsterItem, Item) == 0x000000, "Member 'GBHolster_HolsterItem::Item' has a wrong offset!");
static_assert(offsetof(GBHolster_HolsterItem, ReturnValue) == 0x000008, "Member 'GBHolster_HolsterItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBHolster.GetHolsteredItem
// 0x0008 (0x0008 - 0x0000)
struct GBHolster_GetHolsteredItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHolster_GetHolsteredItem) == 0x000008, "Wrong alignment on GBHolster_GetHolsteredItem");
static_assert(sizeof(GBHolster_GetHolsteredItem) == 0x000008, "Wrong size on GBHolster_GetHolsteredItem");
static_assert(offsetof(GBHolster_GetHolsteredItem, ReturnValue) == 0x000000, "Member 'GBHolster_GetHolsteredItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBHUD.ApplyPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_ApplyPlayerSettings final
{
public:
	class UGBPlayerSettings*                      PlayerSettings;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ApplyPlayerSettings) == 0x000008, "Wrong alignment on GBHUD_ApplyPlayerSettings");
static_assert(sizeof(GBHUD_ApplyPlayerSettings) == 0x000008, "Wrong size on GBHUD_ApplyPlayerSettings");
static_assert(offsetof(GBHUD_ApplyPlayerSettings, PlayerSettings) == 0x000000, "Member 'GBHUD_ApplyPlayerSettings::PlayerSettings' has a wrong offset!");

// Function GroundBranch.GBHUD.ApplyPlayerSettingsEvent
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_ApplyPlayerSettingsEvent final
{
public:
	class UGBPlayerSettings*                      GBPlayerSettings;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ApplyPlayerSettingsEvent) == 0x000008, "Wrong alignment on GBHUD_ApplyPlayerSettingsEvent");
static_assert(sizeof(GBHUD_ApplyPlayerSettingsEvent) == 0x000008, "Wrong size on GBHUD_ApplyPlayerSettingsEvent");
static_assert(offsetof(GBHUD_ApplyPlayerSettingsEvent, GBPlayerSettings) == 0x000000, "Member 'GBHUD_ApplyPlayerSettingsEvent::GBPlayerSettings' has a wrong offset!");

// Function GroundBranch.GBHUD.GetUserMenu
// 0x0028 (0x0028 - 0x0000)
struct GBHUD_GetUserMenu final
{
public:
	class FString                                 MenuName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutMenuContent;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_GetUserMenu) == 0x000008, "Wrong alignment on GBHUD_GetUserMenu");
static_assert(sizeof(GBHUD_GetUserMenu) == 0x000028, "Wrong size on GBHUD_GetUserMenu");
static_assert(offsetof(GBHUD_GetUserMenu, MenuName) == 0x000000, "Member 'GBHUD_GetUserMenu::MenuName' has a wrong offset!");
static_assert(offsetof(GBHUD_GetUserMenu, OutMenuContent) == 0x000010, "Member 'GBHUD_GetUserMenu::OutMenuContent' has a wrong offset!");
static_assert(offsetof(GBHUD_GetUserMenu, ReturnValue) == 0x000020, "Member 'GBHUD_GetUserMenu::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBHUD.HideMenuEvent
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_HideMenuEvent final
{
public:
	class FName                                   MenuType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_HideMenuEvent) == 0x000004, "Wrong alignment on GBHUD_HideMenuEvent");
static_assert(sizeof(GBHUD_HideMenuEvent) == 0x000008, "Wrong size on GBHUD_HideMenuEvent");
static_assert(offsetof(GBHUD_HideMenuEvent, MenuType) == 0x000000, "Member 'GBHUD_HideMenuEvent::MenuType' has a wrong offset!");

// Function GroundBranch.GBHUD.InventorySlot
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_InventorySlot final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_InventorySlot) == 0x000004, "Wrong alignment on GBHUD_InventorySlot");
static_assert(sizeof(GBHUD_InventorySlot) == 0x000008, "Wrong size on GBHUD_InventorySlot");
static_assert(offsetof(GBHUD_InventorySlot, Index_0) == 0x000000, "Member 'GBHUD_InventorySlot::Index_0' has a wrong offset!");
static_assert(offsetof(GBHUD_InventorySlot, bImmediate) == 0x000004, "Member 'GBHUD_InventorySlot::bImmediate' has a wrong offset!");

// Function GroundBranch.GBHUD.OnChatLineAddedEvent
// 0x0028 (0x0028 - 0x0000)
struct GBHUD_OnChatLineAddedEvent final
{
public:
	class AGBPlayerState*                         SenderGBPlayerState;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_OnChatLineAddedEvent) == 0x000008, "Wrong alignment on GBHUD_OnChatLineAddedEvent");
static_assert(sizeof(GBHUD_OnChatLineAddedEvent) == 0x000028, "Wrong size on GBHUD_OnChatLineAddedEvent");
static_assert(offsetof(GBHUD_OnChatLineAddedEvent, SenderGBPlayerState) == 0x000000, "Member 'GBHUD_OnChatLineAddedEvent::SenderGBPlayerState' has a wrong offset!");
static_assert(offsetof(GBHUD_OnChatLineAddedEvent, Type) == 0x000008, "Member 'GBHUD_OnChatLineAddedEvent::Type' has a wrong offset!");
static_assert(offsetof(GBHUD_OnChatLineAddedEvent, DisplayTime) == 0x000010, "Member 'GBHUD_OnChatLineAddedEvent::DisplayTime' has a wrong offset!");
static_assert(offsetof(GBHUD_OnChatLineAddedEvent, Message) == 0x000018, "Member 'GBHUD_OnChatLineAddedEvent::Message' has a wrong offset!");

// Function GroundBranch.GBHUD.OnInventorySlotEvent
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_OnInventorySlotEvent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_OnInventorySlotEvent) == 0x000004, "Wrong alignment on GBHUD_OnInventorySlotEvent");
static_assert(sizeof(GBHUD_OnInventorySlotEvent) == 0x000008, "Wrong size on GBHUD_OnInventorySlotEvent");
static_assert(offsetof(GBHUD_OnInventorySlotEvent, Index_0) == 0x000000, "Member 'GBHUD_OnInventorySlotEvent::Index_0' has a wrong offset!");
static_assert(offsetof(GBHUD_OnInventorySlotEvent, bImmediate) == 0x000004, "Member 'GBHUD_OnInventorySlotEvent::bImmediate' has a wrong offset!");

// Function GroundBranch.GBHUD.OnShowHintEvent
// 0x0028 (0x0028 - 0x0000)
struct GBHUD_OnShowHintEvent final
{
public:
	TSoftClassPtr<class UClass>                   HintWidgetClass;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_OnShowHintEvent) == 0x000008, "Wrong alignment on GBHUD_OnShowHintEvent");
static_assert(sizeof(GBHUD_OnShowHintEvent) == 0x000028, "Wrong size on GBHUD_OnShowHintEvent");
static_assert(offsetof(GBHUD_OnShowHintEvent, HintWidgetClass) == 0x000000, "Member 'GBHUD_OnShowHintEvent::HintWidgetClass' has a wrong offset!");

// Function GroundBranch.GBHUD.OnSuggestHintEvent
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_OnSuggestHintEvent final
{
public:
	class FName                                   HintName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_OnSuggestHintEvent) == 0x000004, "Wrong alignment on GBHUD_OnSuggestHintEvent");
static_assert(sizeof(GBHUD_OnSuggestHintEvent) == 0x000008, "Wrong size on GBHUD_OnSuggestHintEvent");
static_assert(offsetof(GBHUD_OnSuggestHintEvent, HintName) == 0x000000, "Member 'GBHUD_OnSuggestHintEvent::HintName' has a wrong offset!");

// Function GroundBranch.GBHUD.OpenLinearUserMenu
// 0x0010 (0x0010 - 0x0000)
struct GBHUD_OpenLinearUserMenu final
{
public:
	class FString                                 MenuName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_OpenLinearUserMenu) == 0x000008, "Wrong alignment on GBHUD_OpenLinearUserMenu");
static_assert(sizeof(GBHUD_OpenLinearUserMenu) == 0x000010, "Wrong size on GBHUD_OpenLinearUserMenu");
static_assert(offsetof(GBHUD_OpenLinearUserMenu, MenuName) == 0x000000, "Member 'GBHUD_OpenLinearUserMenu::MenuName' has a wrong offset!");

// Function GroundBranch.GBHUD.OpenRadialUserMenu
// 0x0010 (0x0010 - 0x0000)
struct GBHUD_OpenRadialUserMenu final
{
public:
	class FString                                 MenuName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_OpenRadialUserMenu) == 0x000008, "Wrong alignment on GBHUD_OpenRadialUserMenu");
static_assert(sizeof(GBHUD_OpenRadialUserMenu) == 0x000010, "Wrong size on GBHUD_OpenRadialUserMenu");
static_assert(offsetof(GBHUD_OpenRadialUserMenu, MenuName) == 0x000000, "Member 'GBHUD_OpenRadialUserMenu::MenuName' has a wrong offset!");

// Function GroundBranch.GBHUD.OpenUserMenu
// 0x0010 (0x0010 - 0x0000)
struct GBHUD_OpenUserMenu final
{
public:
	class FString                                 MenuName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_OpenUserMenu) == 0x000008, "Wrong alignment on GBHUD_OpenUserMenu");
static_assert(sizeof(GBHUD_OpenUserMenu) == 0x000010, "Wrong size on GBHUD_OpenUserMenu");
static_assert(offsetof(GBHUD_OpenUserMenu, MenuName) == 0x000000, "Member 'GBHUD_OpenUserMenu::MenuName' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowFriendlyPlayerNameEvent
// 0x0018 (0x0018 - 0x0000)
struct GBHUD_ShowFriendlyPlayerNameEvent final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamElement                                  PlayerTeamElement;                                 // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_ShowFriendlyPlayerNameEvent) == 0x000008, "Wrong alignment on GBHUD_ShowFriendlyPlayerNameEvent");
static_assert(sizeof(GBHUD_ShowFriendlyPlayerNameEvent) == 0x000018, "Wrong size on GBHUD_ShowFriendlyPlayerNameEvent");
static_assert(offsetof(GBHUD_ShowFriendlyPlayerNameEvent, PlayerName) == 0x000000, "Member 'GBHUD_ShowFriendlyPlayerNameEvent::PlayerName' has a wrong offset!");
static_assert(offsetof(GBHUD_ShowFriendlyPlayerNameEvent, PlayerTeamElement) == 0x000010, "Member 'GBHUD_ShowFriendlyPlayerNameEvent::PlayerTeamElement' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowHint
// 0x0030 (0x0030 - 0x0000)
struct GBHUD_ShowHint final
{
public:
	class FName                                   HintName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HintWidgetClass;                                   // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ShowHint) == 0x000008, "Wrong alignment on GBHUD_ShowHint");
static_assert(sizeof(GBHUD_ShowHint) == 0x000030, "Wrong size on GBHUD_ShowHint");
static_assert(offsetof(GBHUD_ShowHint, HintName) == 0x000000, "Member 'GBHUD_ShowHint::HintName' has a wrong offset!");
static_assert(offsetof(GBHUD_ShowHint, HintWidgetClass) == 0x000008, "Member 'GBHUD_ShowHint::HintWidgetClass' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowMenuEvent
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_ShowMenuEvent final
{
public:
	class FName                                   MenuType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ShowMenuEvent) == 0x000004, "Wrong alignment on GBHUD_ShowMenuEvent");
static_assert(sizeof(GBHUD_ShowMenuEvent) == 0x000008, "Wrong size on GBHUD_ShowMenuEvent");
static_assert(offsetof(GBHUD_ShowMenuEvent, MenuType) == 0x000000, "Member 'GBHUD_ShowMenuEvent::MenuType' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowRadialItemsMenuEvent
// 0x0010 (0x0010 - 0x0000)
struct GBHUD_ShowRadialItemsMenuEvent final
{
public:
	TArray<class AGBInvItem*>                     Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ShowRadialItemsMenuEvent) == 0x000008, "Wrong alignment on GBHUD_ShowRadialItemsMenuEvent");
static_assert(sizeof(GBHUD_ShowRadialItemsMenuEvent) == 0x000010, "Wrong size on GBHUD_ShowRadialItemsMenuEvent");
static_assert(offsetof(GBHUD_ShowRadialItemsMenuEvent, Items) == 0x000000, "Member 'GBHUD_ShowRadialItemsMenuEvent::Items' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowRadialMenuEvent
// 0x0010 (0x0010 - 0x0000)
struct GBHUD_ShowRadialMenuEvent final
{
public:
	TArray<class UUserWidget*>                    RadialMenuEntries;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ShowRadialMenuEvent) == 0x000008, "Wrong alignment on GBHUD_ShowRadialMenuEvent");
static_assert(sizeof(GBHUD_ShowRadialMenuEvent) == 0x000010, "Wrong size on GBHUD_ShowRadialMenuEvent");
static_assert(offsetof(GBHUD_ShowRadialMenuEvent, RadialMenuEntries) == 0x000000, "Member 'GBHUD_ShowRadialMenuEvent::RadialMenuEntries' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowReadyRoomPlayerNameEvent
// 0x0018 (0x0018 - 0x0000)
struct GBHUD_ShowReadyRoomPlayerNameEvent final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamElement                                  PlayerTeamElement;                                 // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_ShowReadyRoomPlayerNameEvent) == 0x000008, "Wrong alignment on GBHUD_ShowReadyRoomPlayerNameEvent");
static_assert(sizeof(GBHUD_ShowReadyRoomPlayerNameEvent) == 0x000018, "Wrong size on GBHUD_ShowReadyRoomPlayerNameEvent");
static_assert(offsetof(GBHUD_ShowReadyRoomPlayerNameEvent, PlayerName) == 0x000000, "Member 'GBHUD_ShowReadyRoomPlayerNameEvent::PlayerName' has a wrong offset!");
static_assert(offsetof(GBHUD_ShowReadyRoomPlayerNameEvent, PlayerTeamElement) == 0x000010, "Member 'GBHUD_ShowReadyRoomPlayerNameEvent::PlayerTeamElement' has a wrong offset!");

// Function GroundBranch.GBHUD.ShowWarningEvent
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_ShowWarningEvent final
{
public:
	class FName                                   WarningName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_ShowWarningEvent) == 0x000004, "Wrong alignment on GBHUD_ShowWarningEvent");
static_assert(sizeof(GBHUD_ShowWarningEvent) == 0x000008, "Wrong size on GBHUD_ShowWarningEvent");
static_assert(offsetof(GBHUD_ShowWarningEvent, WarningName) == 0x000000, "Member 'GBHUD_ShowWarningEvent::WarningName' has a wrong offset!");

// Function GroundBranch.GBHUD.SuggestHint
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_SuggestHint final
{
public:
	class FName                                   HintName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_SuggestHint) == 0x000004, "Wrong alignment on GBHUD_SuggestHint");
static_assert(sizeof(GBHUD_SuggestHint) == 0x000008, "Wrong size on GBHUD_SuggestHint");
static_assert(offsetof(GBHUD_SuggestHint, HintName) == 0x000000, "Member 'GBHUD_SuggestHint::HintName' has a wrong offset!");

// Function GroundBranch.GBHUD.GetViewTarget
// 0x0008 (0x0008 - 0x0000)
struct GBHUD_GetViewTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBHUD_GetViewTarget) == 0x000008, "Wrong alignment on GBHUD_GetViewTarget");
static_assert(sizeof(GBHUD_GetViewTarget) == 0x000008, "Wrong size on GBHUD_GetViewTarget");
static_assert(offsetof(GBHUD_GetViewTarget, ReturnValue) == 0x000000, "Member 'GBHUD_GetViewTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBHUD.HintValid
// 0x000C (0x000C - 0x0000)
struct GBHUD_HintValid final
{
public:
	class FName                                   HintName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_HintValid) == 0x000004, "Wrong alignment on GBHUD_HintValid");
static_assert(sizeof(GBHUD_HintValid) == 0x00000C, "Wrong size on GBHUD_HintValid");
static_assert(offsetof(GBHUD_HintValid, HintName) == 0x000000, "Member 'GBHUD_HintValid::HintName' has a wrong offset!");
static_assert(offsetof(GBHUD_HintValid, ReturnValue) == 0x000008, "Member 'GBHUD_HintValid::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBHUD.IsMenuVisibleEvent
// 0x000C (0x000C - 0x0000)
struct GBHUD_IsMenuVisibleEvent final
{
public:
	class FName                                   MenuType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBHUD_IsMenuVisibleEvent) == 0x000004, "Wrong alignment on GBHUD_IsMenuVisibleEvent");
static_assert(sizeof(GBHUD_IsMenuVisibleEvent) == 0x00000C, "Wrong size on GBHUD_IsMenuVisibleEvent");
static_assert(offsetof(GBHUD_IsMenuVisibleEvent, MenuType) == 0x000000, "Member 'GBHUD_IsMenuVisibleEvent::MenuType' has a wrong offset!");
static_assert(offsetof(GBHUD_IsMenuVisibleEvent, ReturnValue) == 0x000008, "Member 'GBHUD_IsMenuVisibleEvent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBIngameMapWidget.GetCommandComp
// 0x0008 (0x0008 - 0x0000)
struct GBIngameMapWidget_GetCommandComp final
{
public:
	class UGBPlayerCommandComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBIngameMapWidget_GetCommandComp) == 0x000008, "Wrong alignment on GBIngameMapWidget_GetCommandComp");
static_assert(sizeof(GBIngameMapWidget_GetCommandComp) == 0x000008, "Wrong size on GBIngameMapWidget_GetCommandComp");
static_assert(offsetof(GBIngameMapWidget_GetCommandComp, ReturnValue) == 0x000000, "Member 'GBIngameMapWidget_GetCommandComp::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInputOverrideInterface.OverrideInputAxis
// 0x0028 (0x0028 - 0x0000)
struct GBInputOverrideInterface_OverrideInputAxis final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSamples;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInputOverrideInterface_OverrideInputAxis) == 0x000008, "Wrong alignment on GBInputOverrideInterface_OverrideInputAxis");
static_assert(sizeof(GBInputOverrideInterface_OverrideInputAxis) == 0x000028, "Wrong size on GBInputOverrideInterface_OverrideInputAxis");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputAxis, Key) == 0x000000, "Member 'GBInputOverrideInterface_OverrideInputAxis::Key' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputAxis, Delta) == 0x000018, "Member 'GBInputOverrideInterface_OverrideInputAxis::Delta' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputAxis, DeltaTime) == 0x00001C, "Member 'GBInputOverrideInterface_OverrideInputAxis::DeltaTime' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputAxis, NumSamples) == 0x000020, "Member 'GBInputOverrideInterface_OverrideInputAxis::NumSamples' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputAxis, bGamepad) == 0x000024, "Member 'GBInputOverrideInterface_OverrideInputAxis::bGamepad' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputAxis, ReturnValue) == 0x000025, "Member 'GBInputOverrideInterface_OverrideInputAxis::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInputOverrideInterface.OverrideInputKey
// 0x0028 (0x0028 - 0x0000)
struct GBInputOverrideInterface_OverrideInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPInputEvent                                 EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmountDepressed;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInputOverrideInterface_OverrideInputKey) == 0x000008, "Wrong alignment on GBInputOverrideInterface_OverrideInputKey");
static_assert(sizeof(GBInputOverrideInterface_OverrideInputKey) == 0x000028, "Wrong size on GBInputOverrideInterface_OverrideInputKey");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputKey, Key) == 0x000000, "Member 'GBInputOverrideInterface_OverrideInputKey::Key' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputKey, EventType) == 0x000018, "Member 'GBInputOverrideInterface_OverrideInputKey::EventType' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputKey, AmountDepressed) == 0x00001C, "Member 'GBInputOverrideInterface_OverrideInputKey::AmountDepressed' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputKey, bGamepad) == 0x000020, "Member 'GBInputOverrideInterface_OverrideInputKey::bGamepad' has a wrong offset!");
static_assert(offsetof(GBInputOverrideInterface_OverrideInputKey, ReturnValue) == 0x000021, "Member 'GBInputOverrideInterface_OverrideInputKey::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetPlayers
// 0x0010 (0x0010 - 0x0000)
struct GBInsertionPoint_GetPlayers final
{
public:
	TArray<class AGBPlayerState*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetPlayers) == 0x000008, "Wrong alignment on GBInsertionPoint_GetPlayers");
static_assert(sizeof(GBInsertionPoint_GetPlayers) == 0x000010, "Wrong size on GBInsertionPoint_GetPlayers");
static_assert(offsetof(GBInsertionPoint_GetPlayers, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetPlayers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.SetInsertionPointName
// 0x0008 (0x0008 - 0x0000)
struct GBInsertionPoint_SetInsertionPointName final
{
public:
	class FName                                   NewInsertionPointName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_SetInsertionPointName) == 0x000004, "Wrong alignment on GBInsertionPoint_SetInsertionPointName");
static_assert(sizeof(GBInsertionPoint_SetInsertionPointName) == 0x000008, "Wrong size on GBInsertionPoint_SetInsertionPointName");
static_assert(offsetof(GBInsertionPoint_SetInsertionPointName, NewInsertionPointName) == 0x000000, "Member 'GBInsertionPoint_SetInsertionPointName::NewInsertionPointName' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetMaxSupportedPlayers
// 0x0004 (0x0004 - 0x0000)
struct GBInsertionPoint_GetMaxSupportedPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetMaxSupportedPlayers) == 0x000004, "Wrong alignment on GBInsertionPoint_GetMaxSupportedPlayers");
static_assert(sizeof(GBInsertionPoint_GetMaxSupportedPlayers) == 0x000004, "Wrong size on GBInsertionPoint_GetMaxSupportedPlayers");
static_assert(offsetof(GBInsertionPoint_GetMaxSupportedPlayers, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetMaxSupportedPlayers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetNumberOfActivePlayerStarts
// 0x0004 (0x0004 - 0x0000)
struct GBInsertionPoint_GetNumberOfActivePlayerStarts final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetNumberOfActivePlayerStarts) == 0x000004, "Wrong alignment on GBInsertionPoint_GetNumberOfActivePlayerStarts");
static_assert(sizeof(GBInsertionPoint_GetNumberOfActivePlayerStarts) == 0x000004, "Wrong size on GBInsertionPoint_GetNumberOfActivePlayerStarts");
static_assert(offsetof(GBInsertionPoint_GetNumberOfActivePlayerStarts, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetNumberOfActivePlayerStarts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetSequenceToPlayAfterInfil
// 0x0028 (0x0028 - 0x0000)
struct GBInsertionPoint_GetSequenceToPlayAfterInfil final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetSequenceToPlayAfterInfil) == 0x000008, "Wrong alignment on GBInsertionPoint_GetSequenceToPlayAfterInfil");
static_assert(sizeof(GBInsertionPoint_GetSequenceToPlayAfterInfil) == 0x000028, "Wrong size on GBInsertionPoint_GetSequenceToPlayAfterInfil");
static_assert(offsetof(GBInsertionPoint_GetSequenceToPlayAfterInfil, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetSequenceToPlayAfterInfil::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetSequenceToPlayBeforeInfil
// 0x0028 (0x0028 - 0x0000)
struct GBInsertionPoint_GetSequenceToPlayBeforeInfil final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetSequenceToPlayBeforeInfil) == 0x000008, "Wrong alignment on GBInsertionPoint_GetSequenceToPlayBeforeInfil");
static_assert(sizeof(GBInsertionPoint_GetSequenceToPlayBeforeInfil) == 0x000028, "Wrong size on GBInsertionPoint_GetSequenceToPlayBeforeInfil");
static_assert(offsetof(GBInsertionPoint_GetSequenceToPlayBeforeInfil, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetSequenceToPlayBeforeInfil::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetSideView
// 0x0001 (0x0001 - 0x0000)
struct GBInsertionPoint_GetSideView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetSideView) == 0x000001, "Wrong alignment on GBInsertionPoint_GetSideView");
static_assert(sizeof(GBInsertionPoint_GetSideView) == 0x000001, "Wrong size on GBInsertionPoint_GetSideView");
static_assert(offsetof(GBInsertionPoint_GetSideView, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetSideView::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInsertionPoint.GetTopDownView
// 0x0001 (0x0001 - 0x0000)
struct GBInsertionPoint_GetTopDownView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInsertionPoint_GetTopDownView) == 0x000001, "Wrong alignment on GBInsertionPoint_GetTopDownView");
static_assert(sizeof(GBInsertionPoint_GetTopDownView) == 0x000001, "Wrong size on GBInsertionPoint_GetTopDownView");
static_assert(offsetof(GBInsertionPoint_GetTopDownView, ReturnValue) == 0x000000, "Member 'GBInsertionPoint_GetTopDownView::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.AddRoundToMagazine
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_AddRoundToMagazine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_AddRoundToMagazine) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_AddRoundToMagazine");
static_assert(sizeof(GBInternalMagazineComponent_AddRoundToMagazine) == 0x000001, "Wrong size on GBInternalMagazineComponent_AddRoundToMagazine");
static_assert(offsetof(GBInternalMagazineComponent_AddRoundToMagazine, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_AddRoundToMagazine::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.FindCompatibleRound
// 0x0010 (0x0010 - 0x0000)
struct GBInternalMagazineComponent_FindCompatibleRound final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBBulletItem*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_FindCompatibleRound) == 0x000008, "Wrong alignment on GBInternalMagazineComponent_FindCompatibleRound");
static_assert(sizeof(GBInternalMagazineComponent_FindCompatibleRound) == 0x000010, "Wrong size on GBInternalMagazineComponent_FindCompatibleRound");
static_assert(offsetof(GBInternalMagazineComponent_FindCompatibleRound, Character) == 0x000000, "Member 'GBInternalMagazineComponent_FindCompatibleRound::Character' has a wrong offset!");
static_assert(offsetof(GBInternalMagazineComponent_FindCompatibleRound, ReturnValue) == 0x000008, "Member 'GBInternalMagazineComponent_FindCompatibleRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.SetBoltHeldOpen
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_SetBoltHeldOpen final
{
public:
	bool                                          bNewBoltIsHeldOpen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_SetBoltHeldOpen) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_SetBoltHeldOpen");
static_assert(sizeof(GBInternalMagazineComponent_SetBoltHeldOpen) == 0x000001, "Wrong size on GBInternalMagazineComponent_SetBoltHeldOpen");
static_assert(offsetof(GBInternalMagazineComponent_SetBoltHeldOpen, bNewBoltIsHeldOpen) == 0x000000, "Member 'GBInternalMagazineComponent_SetBoltHeldOpen::bNewBoltIsHeldOpen' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.SetBulletId
// 0x0010 (0x0010 - 0x0000)
struct GBInternalMagazineComponent_SetBulletId final
{
public:
	struct FPrimaryAssetId                        NewBulletId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_SetBulletId) == 0x000004, "Wrong alignment on GBInternalMagazineComponent_SetBulletId");
static_assert(sizeof(GBInternalMagazineComponent_SetBulletId) == 0x000010, "Wrong size on GBInternalMagazineComponent_SetBulletId");
static_assert(offsetof(GBInternalMagazineComponent_SetBulletId, NewBulletId) == 0x000000, "Member 'GBInternalMagazineComponent_SetBulletId::NewBulletId' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.SetChamberedRound
// 0x0008 (0x0008 - 0x0000)
struct GBInternalMagazineComponent_SetChamberedRound final
{
public:
	TSubclassOf<class AGBBulletItem>              NewChamberedRound;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_SetChamberedRound) == 0x000008, "Wrong alignment on GBInternalMagazineComponent_SetChamberedRound");
static_assert(sizeof(GBInternalMagazineComponent_SetChamberedRound) == 0x000008, "Wrong size on GBInternalMagazineComponent_SetChamberedRound");
static_assert(offsetof(GBInternalMagazineComponent_SetChamberedRound, NewChamberedRound) == 0x000000, "Member 'GBInternalMagazineComponent_SetChamberedRound::NewChamberedRound' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.SetCount
// 0x0004 (0x0004 - 0x0000)
struct GBInternalMagazineComponent_SetCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_SetCount) == 0x000004, "Wrong alignment on GBInternalMagazineComponent_SetCount");
static_assert(sizeof(GBInternalMagazineComponent_SetCount) == 0x000004, "Wrong size on GBInternalMagazineComponent_SetCount");
static_assert(offsetof(GBInternalMagazineComponent_SetCount, NewCount) == 0x000000, "Member 'GBInternalMagazineComponent_SetCount::NewCount' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.SetIsFiringFromOpenBolt
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_SetIsFiringFromOpenBolt final
{
public:
	bool                                          bNewIsFiringFromOpenBolt;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_SetIsFiringFromOpenBolt) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_SetIsFiringFromOpenBolt");
static_assert(sizeof(GBInternalMagazineComponent_SetIsFiringFromOpenBolt) == 0x000001, "Wrong size on GBInternalMagazineComponent_SetIsFiringFromOpenBolt");
static_assert(offsetof(GBInternalMagazineComponent_SetIsFiringFromOpenBolt, bNewIsFiringFromOpenBolt) == 0x000000, "Member 'GBInternalMagazineComponent_SetIsFiringFromOpenBolt::bNewIsFiringFromOpenBolt' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.GetBoltHeldOpen
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_GetBoltHeldOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_GetBoltHeldOpen) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_GetBoltHeldOpen");
static_assert(sizeof(GBInternalMagazineComponent_GetBoltHeldOpen) == 0x000001, "Wrong size on GBInternalMagazineComponent_GetBoltHeldOpen");
static_assert(offsetof(GBInternalMagazineComponent_GetBoltHeldOpen, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_GetBoltHeldOpen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.GetBulletItemClass
// 0x0008 (0x0008 - 0x0000)
struct GBInternalMagazineComponent_GetBulletItemClass final
{
public:
	TSubclassOf<class AGBBulletItem>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_GetBulletItemClass) == 0x000008, "Wrong alignment on GBInternalMagazineComponent_GetBulletItemClass");
static_assert(sizeof(GBInternalMagazineComponent_GetBulletItemClass) == 0x000008, "Wrong size on GBInternalMagazineComponent_GetBulletItemClass");
static_assert(offsetof(GBInternalMagazineComponent_GetBulletItemClass, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_GetBulletItemClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.GetCapacity
// 0x0004 (0x0004 - 0x0000)
struct GBInternalMagazineComponent_GetCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_GetCapacity) == 0x000004, "Wrong alignment on GBInternalMagazineComponent_GetCapacity");
static_assert(sizeof(GBInternalMagazineComponent_GetCapacity) == 0x000004, "Wrong size on GBInternalMagazineComponent_GetCapacity");
static_assert(offsetof(GBInternalMagazineComponent_GetCapacity, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_GetCapacity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.GetChamberedRound
// 0x0008 (0x0008 - 0x0000)
struct GBInternalMagazineComponent_GetChamberedRound final
{
public:
	TSubclassOf<class AGBBulletItem>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_GetChamberedRound) == 0x000008, "Wrong alignment on GBInternalMagazineComponent_GetChamberedRound");
static_assert(sizeof(GBInternalMagazineComponent_GetChamberedRound) == 0x000008, "Wrong size on GBInternalMagazineComponent_GetChamberedRound");
static_assert(offsetof(GBInternalMagazineComponent_GetChamberedRound, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_GetChamberedRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.GetCount
// 0x0004 (0x0004 - 0x0000)
struct GBInternalMagazineComponent_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_GetCount) == 0x000004, "Wrong alignment on GBInternalMagazineComponent_GetCount");
static_assert(sizeof(GBInternalMagazineComponent_GetCount) == 0x000004, "Wrong size on GBInternalMagazineComponent_GetCount");
static_assert(offsetof(GBInternalMagazineComponent_GetCount, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_GetCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.GetIsFiringFromOpenBolt
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_GetIsFiringFromOpenBolt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_GetIsFiringFromOpenBolt) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_GetIsFiringFromOpenBolt");
static_assert(sizeof(GBInternalMagazineComponent_GetIsFiringFromOpenBolt) == 0x000001, "Wrong size on GBInternalMagazineComponent_GetIsFiringFromOpenBolt");
static_assert(offsetof(GBInternalMagazineComponent_GetIsFiringFromOpenBolt, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_GetIsFiringFromOpenBolt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.IsLiveRoundChambered
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_IsLiveRoundChambered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_IsLiveRoundChambered) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_IsLiveRoundChambered");
static_assert(sizeof(GBInternalMagazineComponent_IsLiveRoundChambered) == 0x000001, "Wrong size on GBInternalMagazineComponent_IsLiveRoundChambered");
static_assert(offsetof(GBInternalMagazineComponent_IsLiveRoundChambered, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_IsLiveRoundChambered::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInternalMagazineComponent.StartPlusOne
// 0x0001 (0x0001 - 0x0000)
struct GBInternalMagazineComponent_StartPlusOne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInternalMagazineComponent_StartPlusOne) == 0x000001, "Wrong alignment on GBInternalMagazineComponent_StartPlusOne");
static_assert(sizeof(GBInternalMagazineComponent_StartPlusOne) == 0x000001, "Wrong size on GBInternalMagazineComponent_StartPlusOne");
static_assert(offsetof(GBInternalMagazineComponent_StartPlusOne, ReturnValue) == 0x000000, "Member 'GBInternalMagazineComponent_StartPlusOne::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemAudioEventSet.GetAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemAudioEventSet_GetAudioEvent final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemAudioEventSet_GetAudioEvent) == 0x000008, "Wrong alignment on GBInvItemAudioEventSet_GetAudioEvent");
static_assert(sizeof(GBInvItemAudioEventSet_GetAudioEvent) == 0x000010, "Wrong size on GBInvItemAudioEventSet_GetAudioEvent");
static_assert(offsetof(GBInvItemAudioEventSet_GetAudioEvent, MontageName) == 0x000000, "Member 'GBInvItemAudioEventSet_GetAudioEvent::MontageName' has a wrong offset!");
static_assert(offsetof(GBInvItemAudioEventSet_GetAudioEvent, ReturnValue) == 0x000008, "Member 'GBInvItemAudioEventSet_GetAudioEvent::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropOperation.CreateFloatingWidget
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemDragDropOperation_CreateFloatingWidget final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropOperation_CreateFloatingWidget) == 0x000008, "Wrong alignment on GBInvItemDragDropOperation_CreateFloatingWidget");
static_assert(sizeof(GBInvItemDragDropOperation_CreateFloatingWidget) == 0x000010, "Wrong size on GBInvItemDragDropOperation_CreateFloatingWidget");
static_assert(offsetof(GBInvItemDragDropOperation_CreateFloatingWidget, WidgetClass) == 0x000000, "Member 'GBInvItemDragDropOperation_CreateFloatingWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(GBInvItemDragDropOperation_CreateFloatingWidget, ReturnValue) == 0x000008, "Member 'GBInvItemDragDropOperation_CreateFloatingWidget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropOperation.MakeInvItemInteractive
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemDragDropOperation_MakeInvItemInteractive final
{
public:
	class AGBInvItem*                             InvItemn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropOperation_MakeInvItemInteractive) == 0x000008, "Wrong alignment on GBInvItemDragDropOperation_MakeInvItemInteractive");
static_assert(sizeof(GBInvItemDragDropOperation_MakeInvItemInteractive) == 0x000008, "Wrong size on GBInvItemDragDropOperation_MakeInvItemInteractive");
static_assert(offsetof(GBInvItemDragDropOperation_MakeInvItemInteractive, InvItemn) == 0x000000, "Member 'GBInvItemDragDropOperation_MakeInvItemInteractive::InvItemn' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropOperation.GetInvItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemDragDropOperation_GetInvItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropOperation_GetInvItem) == 0x000008, "Wrong alignment on GBInvItemDragDropOperation_GetInvItem");
static_assert(sizeof(GBInvItemDragDropOperation_GetInvItem) == 0x000008, "Wrong size on GBInvItemDragDropOperation_GetInvItem");
static_assert(offsetof(GBInvItemDragDropOperation_GetInvItem, ReturnValue) == 0x000000, "Member 'GBInvItemDragDropOperation_GetInvItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemDragDropOperation.GetRootInvItem
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemDragDropOperation_GetRootInvItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemDragDropOperation_GetRootInvItem) == 0x000008, "Wrong alignment on GBInvItemDragDropOperation_GetRootInvItem");
static_assert(sizeof(GBInvItemDragDropOperation_GetRootInvItem) == 0x000008, "Wrong size on GBInvItemDragDropOperation_GetRootInvItem");
static_assert(offsetof(GBInvItemDragDropOperation_GetRootInvItem, ReturnValue) == 0x000000, "Member 'GBInvItemDragDropOperation_GetRootInvItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemEffectSet.GetEffect
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemEffectSet_GetEffect final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemEffectSet_GetEffect) == 0x000008, "Wrong alignment on GBInvItemEffectSet_GetEffect");
static_assert(sizeof(GBInvItemEffectSet_GetEffect) == 0x000010, "Wrong size on GBInvItemEffectSet_GetEffect");
static_assert(offsetof(GBInvItemEffectSet_GetEffect, EffectName) == 0x000000, "Member 'GBInvItemEffectSet_GetEffect::EffectName' has a wrong offset!");
static_assert(offsetof(GBInvItemEffectSet_GetEffect, ReturnValue) == 0x000008, "Member 'GBInvItemEffectSet_GetEffect::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemMontageSet.GetMontage
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemMontageSet_GetMontage final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemMontageSet_GetMontage) == 0x000008, "Wrong alignment on GBInvItemMontageSet_GetMontage");
static_assert(sizeof(GBInvItemMontageSet_GetMontage) == 0x000010, "Wrong size on GBInvItemMontageSet_GetMontage");
static_assert(offsetof(GBInvItemMontageSet_GetMontage, MontageName) == 0x000000, "Member 'GBInvItemMontageSet_GetMontage::MontageName' has a wrong offset!");
static_assert(offsetof(GBInvItemMontageSet_GetMontage, ReturnValue) == 0x000008, "Member 'GBInvItemMontageSet_GetMontage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.OnBeginCursorOver
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemPickupComponent_OnBeginCursorOver final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_OnBeginCursorOver) == 0x000008, "Wrong alignment on GBInvItemPickupComponent_OnBeginCursorOver");
static_assert(sizeof(GBInvItemPickupComponent_OnBeginCursorOver) == 0x000008, "Wrong size on GBInvItemPickupComponent_OnBeginCursorOver");
static_assert(offsetof(GBInvItemPickupComponent_OnBeginCursorOver, TouchedComponent) == 0x000000, "Member 'GBInvItemPickupComponent_OnBeginCursorOver::TouchedComponent' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.OnEndCursorOver
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemPickupComponent_OnEndCursorOver final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_OnEndCursorOver) == 0x000008, "Wrong alignment on GBInvItemPickupComponent_OnEndCursorOver");
static_assert(sizeof(GBInvItemPickupComponent_OnEndCursorOver) == 0x000008, "Wrong size on GBInvItemPickupComponent_OnEndCursorOver");
static_assert(offsetof(GBInvItemPickupComponent_OnEndCursorOver, TouchedComponent) == 0x000000, "Member 'GBInvItemPickupComponent_OnEndCursorOver::TouchedComponent' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.SetAltPickupTarget
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemPickupComponent_SetAltPickupTarget final
{
public:
	class AGBInvItem*                             NewAltPickupTarget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_SetAltPickupTarget) == 0x000008, "Wrong alignment on GBInvItemPickupComponent_SetAltPickupTarget");
static_assert(sizeof(GBInvItemPickupComponent_SetAltPickupTarget) == 0x000008, "Wrong size on GBInvItemPickupComponent_SetAltPickupTarget");
static_assert(offsetof(GBInvItemPickupComponent_SetAltPickupTarget, NewAltPickupTarget) == 0x000000, "Member 'GBInvItemPickupComponent_SetAltPickupTarget::NewAltPickupTarget' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.SetPickupShapeScale
// 0x000C (0x000C - 0x0000)
struct GBInvItemPickupComponent_SetPickupShapeScale final
{
public:
	struct FVector                                NewPickupShapeScale;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_SetPickupShapeScale) == 0x000004, "Wrong alignment on GBInvItemPickupComponent_SetPickupShapeScale");
static_assert(sizeof(GBInvItemPickupComponent_SetPickupShapeScale) == 0x00000C, "Wrong size on GBInvItemPickupComponent_SetPickupShapeScale");
static_assert(offsetof(GBInvItemPickupComponent_SetPickupShapeScale, NewPickupShapeScale) == 0x000000, "Member 'GBInvItemPickupComponent_SetPickupShapeScale::NewPickupShapeScale' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.SetPickupTarget
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemPickupComponent_SetPickupTarget final
{
public:
	class AGBInvItem*                             NewPickupTarget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_SetPickupTarget) == 0x000008, "Wrong alignment on GBInvItemPickupComponent_SetPickupTarget");
static_assert(sizeof(GBInvItemPickupComponent_SetPickupTarget) == 0x000008, "Wrong size on GBInvItemPickupComponent_SetPickupTarget");
static_assert(offsetof(GBInvItemPickupComponent_SetPickupTarget, NewPickupTarget) == 0x000000, "Member 'GBInvItemPickupComponent_SetPickupTarget::NewPickupTarget' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.GetAltPickupTarget
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemPickupComponent_GetAltPickupTarget final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_GetAltPickupTarget) == 0x000008, "Wrong alignment on GBInvItemPickupComponent_GetAltPickupTarget");
static_assert(sizeof(GBInvItemPickupComponent_GetAltPickupTarget) == 0x000008, "Wrong size on GBInvItemPickupComponent_GetAltPickupTarget");
static_assert(offsetof(GBInvItemPickupComponent_GetAltPickupTarget, ReturnValue) == 0x000000, "Member 'GBInvItemPickupComponent_GetAltPickupTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupComponent.GetPickupTarget
// 0x0008 (0x0008 - 0x0000)
struct GBInvItemPickupComponent_GetPickupTarget final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemPickupComponent_GetPickupTarget) == 0x000008, "Wrong alignment on GBInvItemPickupComponent_GetPickupTarget");
static_assert(sizeof(GBInvItemPickupComponent_GetPickupTarget) == 0x000008, "Wrong size on GBInvItemPickupComponent_GetPickupTarget");
static_assert(offsetof(GBInvItemPickupComponent_GetPickupTarget, ReturnValue) == 0x000000, "Member 'GBInvItemPickupComponent_GetPickupTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemPickupWidget.IsValidPickupTarget
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemPickupWidget_IsValidPickupTarget final
{
public:
	const class AGBInvItem*                       PickupTarget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBInvItemPickupWidget_IsValidPickupTarget) == 0x000008, "Wrong alignment on GBInvItemPickupWidget_IsValidPickupTarget");
static_assert(sizeof(GBInvItemPickupWidget_IsValidPickupTarget) == 0x000010, "Wrong size on GBInvItemPickupWidget_IsValidPickupTarget");
static_assert(offsetof(GBInvItemPickupWidget_IsValidPickupTarget, PickupTarget) == 0x000000, "Member 'GBInvItemPickupWidget_IsValidPickupTarget::PickupTarget' has a wrong offset!");
static_assert(offsetof(GBInvItemPickupWidget_IsValidPickupTarget, ReturnValue) == 0x000008, "Member 'GBInvItemPickupWidget_IsValidPickupTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemSkin.GetInvItemSkinMaterials
// 0x0010 (0x0010 - 0x0000)
struct GBInvItemSkin_GetInvItemSkinMaterials final
{
public:
	TArray<struct FGBInvItemSkinMaterialInfo>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemSkin_GetInvItemSkinMaterials) == 0x000008, "Wrong alignment on GBInvItemSkin_GetInvItemSkinMaterials");
static_assert(sizeof(GBInvItemSkin_GetInvItemSkinMaterials) == 0x000010, "Wrong size on GBInvItemSkin_GetInvItemSkinMaterials");
static_assert(offsetof(GBInvItemSkin_GetInvItemSkinMaterials, ReturnValue) == 0x000000, "Member 'GBInvItemSkin_GetInvItemSkinMaterials::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBInvItemSkin.GetTags
// 0x0020 (0x0020 - 0x0000)
struct GBInvItemSkin_GetTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBInvItemSkin_GetTags) == 0x000008, "Wrong alignment on GBInvItemSkin_GetTags");
static_assert(sizeof(GBInvItemSkin_GetTags) == 0x000020, "Wrong size on GBInvItemSkin_GetTags");
static_assert(offsetof(GBInvItemSkin_GetTags, ReturnValue) == 0x000000, "Member 'GBInvItemSkin_GetTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBItemMeshByTagsUserData.OnCosmeticTagsUpdated
// 0x0020 (0x0020 - 0x0000)
struct GBItemMeshByTagsUserData_OnCosmeticTagsUpdated final
{
public:
	struct FGameplayTagContainer                  InCosmeticTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemMeshByTagsUserData_OnCosmeticTagsUpdated) == 0x000008, "Wrong alignment on GBItemMeshByTagsUserData_OnCosmeticTagsUpdated");
static_assert(sizeof(GBItemMeshByTagsUserData_OnCosmeticTagsUpdated) == 0x000020, "Wrong size on GBItemMeshByTagsUserData_OnCosmeticTagsUpdated");
static_assert(offsetof(GBItemMeshByTagsUserData_OnCosmeticTagsUpdated, InCosmeticTags) == 0x000000, "Member 'GBItemMeshByTagsUserData_OnCosmeticTagsUpdated::InCosmeticTags' has a wrong offset!");

// Function GroundBranch.GBItemMorphByTagsUserData.OnCosmeticTagsUpdated
// 0x0020 (0x0020 - 0x0000)
struct GBItemMorphByTagsUserData_OnCosmeticTagsUpdated final
{
public:
	struct FGameplayTagContainer                  InCosmeticTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemMorphByTagsUserData_OnCosmeticTagsUpdated) == 0x000008, "Wrong alignment on GBItemMorphByTagsUserData_OnCosmeticTagsUpdated");
static_assert(sizeof(GBItemMorphByTagsUserData_OnCosmeticTagsUpdated) == 0x000020, "Wrong size on GBItemMorphByTagsUserData_OnCosmeticTagsUpdated");
static_assert(offsetof(GBItemMorphByTagsUserData_OnCosmeticTagsUpdated, InCosmeticTags) == 0x000000, "Member 'GBItemMorphByTagsUserData_OnCosmeticTagsUpdated::InCosmeticTags' has a wrong offset!");

// Function GroundBranch.GBItemProjectile.OnBounce
// 0x0094 (0x0094 - 0x0000)
struct GBItemProjectile_OnBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemProjectile_OnBounce) == 0x000004, "Wrong alignment on GBItemProjectile_OnBounce");
static_assert(sizeof(GBItemProjectile_OnBounce) == 0x000094, "Wrong size on GBItemProjectile_OnBounce");
static_assert(offsetof(GBItemProjectile_OnBounce, ImpactResult) == 0x000000, "Member 'GBItemProjectile_OnBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(GBItemProjectile_OnBounce, ImpactVelocity) == 0x000088, "Member 'GBItemProjectile_OnBounce::ImpactVelocity' has a wrong offset!");

// Function GroundBranch.GBItemProjectile.OnProxyAssociatedItemParentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GBItemProjectile_OnProxyAssociatedItemParentDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemProjectile_OnProxyAssociatedItemParentDestroyed) == 0x000008, "Wrong alignment on GBItemProjectile_OnProxyAssociatedItemParentDestroyed");
static_assert(sizeof(GBItemProjectile_OnProxyAssociatedItemParentDestroyed) == 0x000008, "Wrong size on GBItemProjectile_OnProxyAssociatedItemParentDestroyed");
static_assert(offsetof(GBItemProjectile_OnProxyAssociatedItemParentDestroyed, DestroyedActor) == 0x000000, "Member 'GBItemProjectile_OnProxyAssociatedItemParentDestroyed::DestroyedActor' has a wrong offset!");

// Function GroundBranch.GBItemProjectile.OnReplaceClientsideProxyEvent
// 0x0010 (0x0010 - 0x0000)
struct GBItemProjectile_OnReplaceClientsideProxyEvent final
{
public:
	class AGBInvItem*                             ClientsideProxyAssociatedItem;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncedLocations;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBItemProjectile_OnReplaceClientsideProxyEvent) == 0x000008, "Wrong alignment on GBItemProjectile_OnReplaceClientsideProxyEvent");
static_assert(sizeof(GBItemProjectile_OnReplaceClientsideProxyEvent) == 0x000010, "Wrong size on GBItemProjectile_OnReplaceClientsideProxyEvent");
static_assert(offsetof(GBItemProjectile_OnReplaceClientsideProxyEvent, ClientsideProxyAssociatedItem) == 0x000000, "Member 'GBItemProjectile_OnReplaceClientsideProxyEvent::ClientsideProxyAssociatedItem' has a wrong offset!");
static_assert(offsetof(GBItemProjectile_OnReplaceClientsideProxyEvent, bSyncedLocations) == 0x000008, "Member 'GBItemProjectile_OnReplaceClientsideProxyEvent::bSyncedLocations' has a wrong offset!");

// Function GroundBranch.GBItemProjectile.OnStop
// 0x0088 (0x0088 - 0x0000)
struct GBItemProjectile_OnStop final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemProjectile_OnStop) == 0x000004, "Wrong alignment on GBItemProjectile_OnStop");
static_assert(sizeof(GBItemProjectile_OnStop) == 0x000088, "Wrong size on GBItemProjectile_OnStop");
static_assert(offsetof(GBItemProjectile_OnStop, HitResult) == 0x000000, "Member 'GBItemProjectile_OnStop::HitResult' has a wrong offset!");

// Function GroundBranch.GBItemProjectile.IsClientsideProxy
// 0x0001 (0x0001 - 0x0000)
struct GBItemProjectile_IsClientsideProxy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemProjectile_IsClientsideProxy) == 0x000001, "Wrong alignment on GBItemProjectile_IsClientsideProxy");
static_assert(sizeof(GBItemProjectile_IsClientsideProxy) == 0x000001, "Wrong size on GBItemProjectile_IsClientsideProxy");
static_assert(offsetof(GBItemProjectile_IsClientsideProxy, ReturnValue) == 0x000000, "Member 'GBItemProjectile_IsClientsideProxy::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBItemViewOverlayWidget.OnAssociatedItemDestroyed
// 0x0008 (0x0008 - 0x0000)
struct GBItemViewOverlayWidget_OnAssociatedItemDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemViewOverlayWidget_OnAssociatedItemDestroyed) == 0x000008, "Wrong alignment on GBItemViewOverlayWidget_OnAssociatedItemDestroyed");
static_assert(sizeof(GBItemViewOverlayWidget_OnAssociatedItemDestroyed) == 0x000008, "Wrong size on GBItemViewOverlayWidget_OnAssociatedItemDestroyed");
static_assert(offsetof(GBItemViewOverlayWidget_OnAssociatedItemDestroyed, DestroyedActor) == 0x000000, "Member 'GBItemViewOverlayWidget_OnAssociatedItemDestroyed::DestroyedActor' has a wrong offset!");

// Function GroundBranch.GBItemViewOverlayWidget.SetAssociatedItem
// 0x0008 (0x0008 - 0x0000)
struct GBItemViewOverlayWidget_SetAssociatedItem final
{
public:
	class AGBInvItem*                             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemViewOverlayWidget_SetAssociatedItem) == 0x000008, "Wrong alignment on GBItemViewOverlayWidget_SetAssociatedItem");
static_assert(sizeof(GBItemViewOverlayWidget_SetAssociatedItem) == 0x000008, "Wrong size on GBItemViewOverlayWidget_SetAssociatedItem");
static_assert(offsetof(GBItemViewOverlayWidget_SetAssociatedItem, Item) == 0x000000, "Member 'GBItemViewOverlayWidget_SetAssociatedItem::Item' has a wrong offset!");

// Function GroundBranch.GBItemViewOverlayWidget.GetAssociatedItem
// 0x0008 (0x0008 - 0x0000)
struct GBItemViewOverlayWidget_GetAssociatedItem final
{
public:
	class AGBInvItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemViewOverlayWidget_GetAssociatedItem) == 0x000008, "Wrong alignment on GBItemViewOverlayWidget_GetAssociatedItem");
static_assert(sizeof(GBItemViewOverlayWidget_GetAssociatedItem) == 0x000008, "Wrong size on GBItemViewOverlayWidget_GetAssociatedItem");
static_assert(offsetof(GBItemViewOverlayWidget_GetAssociatedItem, ReturnValue) == 0x000000, "Member 'GBItemViewOverlayWidget_GetAssociatedItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBItemViewOverlayWidget.GetGBCharacterViewTarget
// 0x0008 (0x0008 - 0x0000)
struct GBItemViewOverlayWidget_GetGBCharacterViewTarget final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemViewOverlayWidget_GetGBCharacterViewTarget) == 0x000008, "Wrong alignment on GBItemViewOverlayWidget_GetGBCharacterViewTarget");
static_assert(sizeof(GBItemViewOverlayWidget_GetGBCharacterViewTarget) == 0x000008, "Wrong size on GBItemViewOverlayWidget_GetGBCharacterViewTarget");
static_assert(offsetof(GBItemViewOverlayWidget_GetGBCharacterViewTarget, ReturnValue) == 0x000000, "Member 'GBItemViewOverlayWidget_GetGBCharacterViewTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBItemViewOverlayWidget.GetOwningGBPlayerController
// 0x0008 (0x0008 - 0x0000)
struct GBItemViewOverlayWidget_GetOwningGBPlayerController final
{
public:
	class AGBPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBItemViewOverlayWidget_GetOwningGBPlayerController) == 0x000008, "Wrong alignment on GBItemViewOverlayWidget_GetOwningGBPlayerController");
static_assert(sizeof(GBItemViewOverlayWidget_GetOwningGBPlayerController) == 0x000008, "Wrong size on GBItemViewOverlayWidget_GetOwningGBPlayerController");
static_assert(offsetof(GBItemViewOverlayWidget_GetOwningGBPlayerController, ReturnValue) == 0x000000, "Member 'GBItemViewOverlayWidget_GetOwningGBPlayerController::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.AILoadoutToFullLoadoutFileName
// 0x0028 (0x0028 - 0x0000)
struct GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutFileName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName");
static_assert(sizeof(GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName) == 0x000028, "Wrong size on GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName");
static_assert(offsetof(GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName, LoadoutFileName) == 0x000008, "Member 'GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName::LoadoutFileName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.ConvertItemBuildToLuaTable
// 0x0060 (0x0060 - 0x0000)
struct GBKitFunctionLibrary_ConvertItemBuildToLuaTable final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      ItemBuildJson;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplitItemField;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLuaValue                              ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_ConvertItemBuildToLuaTable) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_ConvertItemBuildToLuaTable");
static_assert(sizeof(GBKitFunctionLibrary_ConvertItemBuildToLuaTable) == 0x000060, "Wrong size on GBKitFunctionLibrary_ConvertItemBuildToLuaTable");
static_assert(offsetof(GBKitFunctionLibrary_ConvertItemBuildToLuaTable, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_ConvertItemBuildToLuaTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertItemBuildToLuaTable, ItemBuildJson) == 0x000008, "Member 'GBKitFunctionLibrary_ConvertItemBuildToLuaTable::ItemBuildJson' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertItemBuildToLuaTable, bSplitItemField) == 0x000010, "Member 'GBKitFunctionLibrary_ConvertItemBuildToLuaTable::bSplitItemField' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertItemBuildToLuaTable, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_ConvertItemBuildToLuaTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.ConvertKitFileNameToLoadoutName
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutFileName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName");
static_assert(sizeof(GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName) == 0x000020, "Wrong size on GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName");
static_assert(offsetof(GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName, LoadoutFileName) == 0x000008, "Member 'GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName::LoadoutFileName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.ConvertOldKitsInPath
// 0x0028 (0x0028 - 0x0000)
struct GBKitFunctionLibrary_ConvertOldKitsInPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extension;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_ConvertOldKitsInPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_ConvertOldKitsInPath");
static_assert(sizeof(GBKitFunctionLibrary_ConvertOldKitsInPath) == 0x000028, "Wrong size on GBKitFunctionLibrary_ConvertOldKitsInPath");
static_assert(offsetof(GBKitFunctionLibrary_ConvertOldKitsInPath, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_ConvertOldKitsInPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertOldKitsInPath, Path) == 0x000008, "Member 'GBKitFunctionLibrary_ConvertOldKitsInPath::Path' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ConvertOldKitsInPath, Extension) == 0x000018, "Member 'GBKitFunctionLibrary_ConvertOldKitsInPath::Extension' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.CreateDummyKitInfo
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_CreateDummyKitInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKitInfo*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_CreateDummyKitInfo) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_CreateDummyKitInfo");
static_assert(sizeof(GBKitFunctionLibrary_CreateDummyKitInfo) == 0x000010, "Wrong size on GBKitFunctionLibrary_CreateDummyKitInfo");
static_assert(offsetof(GBKitFunctionLibrary_CreateDummyKitInfo, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_CreateDummyKitInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateDummyKitInfo, ReturnValue) == 0x000008, "Member 'GBKitFunctionLibrary_CreateDummyKitInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.CreateJsonTypeString
// 0x0030 (0x0030 - 0x0000)
struct GBKitFunctionLibrary_CreateJsonTypeString final
{
public:
	struct FGameplayTagContainer                  InvItemTags;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_CreateJsonTypeString) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_CreateJsonTypeString");
static_assert(sizeof(GBKitFunctionLibrary_CreateJsonTypeString) == 0x000030, "Wrong size on GBKitFunctionLibrary_CreateJsonTypeString");
static_assert(offsetof(GBKitFunctionLibrary_CreateJsonTypeString, InvItemTags) == 0x000000, "Member 'GBKitFunctionLibrary_CreateJsonTypeString::InvItemTags' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateJsonTypeString, ReturnValue) == 0x000020, "Member 'GBKitFunctionLibrary_CreateJsonTypeString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.CreateKitFromItem
// 0x0030 (0x0030 - 0x0000)
struct GBKitFunctionLibrary_CreateKitFromItem final
{
public:
	class FString                                 BuildName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBInvItem*                             Item;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnversioned;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVaRestJsonObject*                      OutKitJsonObj;                                     // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_CreateKitFromItem) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_CreateKitFromItem");
static_assert(sizeof(GBKitFunctionLibrary_CreateKitFromItem) == 0x000030, "Wrong size on GBKitFunctionLibrary_CreateKitFromItem");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItem, BuildName) == 0x000000, "Member 'GBKitFunctionLibrary_CreateKitFromItem::BuildName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItem, Item) == 0x000010, "Member 'GBKitFunctionLibrary_CreateKitFromItem::Item' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItem, bUnversioned) == 0x000018, "Member 'GBKitFunctionLibrary_CreateKitFromItem::bUnversioned' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItem, OutKitJsonObj) == 0x000020, "Member 'GBKitFunctionLibrary_CreateKitFromItem::OutKitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItem, ReturnValue) == 0x000028, "Member 'GBKitFunctionLibrary_CreateKitFromItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.CreateKitFromItems
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_CreateKitFromItems final
{
public:
	TArray<class AGBInvItem*>                     Items;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      OutKitJsonObj;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_CreateKitFromItems) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_CreateKitFromItems");
static_assert(sizeof(GBKitFunctionLibrary_CreateKitFromItems) == 0x000020, "Wrong size on GBKitFunctionLibrary_CreateKitFromItems");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItems, Items) == 0x000000, "Member 'GBKitFunctionLibrary_CreateKitFromItems::Items' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItems, OutKitJsonObj) == 0x000010, "Member 'GBKitFunctionLibrary_CreateKitFromItems::OutKitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitFromItems, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_CreateKitFromItems::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.CreateKitInfo
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_CreateKitInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KitName;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKitInfo*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_CreateKitInfo) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_CreateKitInfo");
static_assert(sizeof(GBKitFunctionLibrary_CreateKitInfo) == 0x000020, "Wrong size on GBKitFunctionLibrary_CreateKitInfo");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitInfo, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_CreateKitInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitInfo, KitName) == 0x000008, "Member 'GBKitFunctionLibrary_CreateKitInfo::KitName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitInfo, KitJsonObj) == 0x000010, "Member 'GBKitFunctionLibrary_CreateKitInfo::KitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_CreateKitInfo, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_CreateKitInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetBuildNameField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetBuildNameField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetBuildNameField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetBuildNameField");
static_assert(sizeof(GBKitFunctionLibrary_GetBuildNameField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetBuildNameField");
static_assert(offsetof(GBKitFunctionLibrary_GetBuildNameField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetBuildNameField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetChildrenField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetChildrenField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetChildrenField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetChildrenField");
static_assert(sizeof(GBKitFunctionLibrary_GetChildrenField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetChildrenField");
static_assert(offsetof(GBKitFunctionLibrary_GetChildrenField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetChildrenField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetDefaultBotLoadoutsPath
// 0x0018 (0x0018 - 0x0000)
struct GBKitFunctionLibrary_GetDefaultBotLoadoutsPath final
{
public:
	class FName                                   TeamName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetDefaultBotLoadoutsPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetDefaultBotLoadoutsPath");
static_assert(sizeof(GBKitFunctionLibrary_GetDefaultBotLoadoutsPath) == 0x000018, "Wrong size on GBKitFunctionLibrary_GetDefaultBotLoadoutsPath");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultBotLoadoutsPath, TeamName) == 0x000000, "Member 'GBKitFunctionLibrary_GetDefaultBotLoadoutsPath::TeamName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultBotLoadoutsPath, ReturnValue) == 0x000008, "Member 'GBKitFunctionLibrary_GetDefaultBotLoadoutsPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetDefaultItemBuildTag
// 0x0008 (0x0008 - 0x0000)
struct GBKitFunctionLibrary_GetDefaultItemBuildTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetDefaultItemBuildTag) == 0x000004, "Wrong alignment on GBKitFunctionLibrary_GetDefaultItemBuildTag");
static_assert(sizeof(GBKitFunctionLibrary_GetDefaultItemBuildTag) == 0x000008, "Wrong size on GBKitFunctionLibrary_GetDefaultItemBuildTag");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultItemBuildTag, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetDefaultItemBuildTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetDefaultKitInfo
// 0x0018 (0x0018 - 0x0000)
struct GBKitFunctionLibrary_GetDefaultKitInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadoutName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKitInfo*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetDefaultKitInfo) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetDefaultKitInfo");
static_assert(sizeof(GBKitFunctionLibrary_GetDefaultKitInfo) == 0x000018, "Wrong size on GBKitFunctionLibrary_GetDefaultKitInfo");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultKitInfo, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_GetDefaultKitInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultKitInfo, LoadoutName) == 0x000008, "Member 'GBKitFunctionLibrary_GetDefaultKitInfo::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultKitInfo, ReturnValue) == 0x000010, "Member 'GBKitFunctionLibrary_GetDefaultKitInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetDefaultLoadoutFilename
// 0x0018 (0x0018 - 0x0000)
struct GBKitFunctionLibrary_GetDefaultLoadoutFilename final
{
public:
	class FName                                   LoadoutName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetDefaultLoadoutFilename) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetDefaultLoadoutFilename");
static_assert(sizeof(GBKitFunctionLibrary_GetDefaultLoadoutFilename) == 0x000018, "Wrong size on GBKitFunctionLibrary_GetDefaultLoadoutFilename");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultLoadoutFilename, LoadoutName) == 0x000000, "Member 'GBKitFunctionLibrary_GetDefaultLoadoutFilename::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultLoadoutFilename, ReturnValue) == 0x000008, "Member 'GBKitFunctionLibrary_GetDefaultLoadoutFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetDefaultPatchesPath
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetDefaultPatchesPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetDefaultPatchesPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetDefaultPatchesPath");
static_assert(sizeof(GBKitFunctionLibrary_GetDefaultPatchesPath) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetDefaultPatchesPath");
static_assert(offsetof(GBKitFunctionLibrary_GetDefaultPatchesPath, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetDefaultPatchesPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetFallbackPatchPathField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetFallbackPatchPathField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetFallbackPatchPathField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetFallbackPatchPathField");
static_assert(sizeof(GBKitFunctionLibrary_GetFallbackPatchPathField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetFallbackPatchPathField");
static_assert(offsetof(GBKitFunctionLibrary_GetFallbackPatchPathField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetFallbackPatchPathField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetFallbackPatchTintField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetFallbackPatchTintField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetFallbackPatchTintField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetFallbackPatchTintField");
static_assert(sizeof(GBKitFunctionLibrary_GetFallbackPatchTintField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetFallbackPatchTintField");
static_assert(offsetof(GBKitFunctionLibrary_GetFallbackPatchTintField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetFallbackPatchTintField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetFullPatchPath
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_GetFullPatchPath final
{
public:
	class FString                                 PatchName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetFullPatchPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetFullPatchPath");
static_assert(sizeof(GBKitFunctionLibrary_GetFullPatchPath) == 0x000020, "Wrong size on GBKitFunctionLibrary_GetFullPatchPath");
static_assert(offsetof(GBKitFunctionLibrary_GetFullPatchPath, PatchName) == 0x000000, "Member 'GBKitFunctionLibrary_GetFullPatchPath::PatchName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetFullPatchPath, ReturnValue) == 0x000010, "Member 'GBKitFunctionLibrary_GetFullPatchPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetHashField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetHashField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetHashField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetHashField");
static_assert(sizeof(GBKitFunctionLibrary_GetHashField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetHashField");
static_assert(offsetof(GBKitFunctionLibrary_GetHashField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetHashField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetItemBuildField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetItemBuildField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetItemBuildField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetItemBuildField");
static_assert(sizeof(GBKitFunctionLibrary_GetItemBuildField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetItemBuildField");
static_assert(offsetof(GBKitFunctionLibrary_GetItemBuildField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetItemBuildField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetItemDataField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetItemDataField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetItemDataField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetItemDataField");
static_assert(sizeof(GBKitFunctionLibrary_GetItemDataField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetItemDataField");
static_assert(offsetof(GBKitFunctionLibrary_GetItemDataField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetItemDataField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetItemField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetItemField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetItemField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetItemField");
static_assert(sizeof(GBKitFunctionLibrary_GetItemField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetItemField");
static_assert(offsetof(GBKitFunctionLibrary_GetItemField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetItemField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetKitExtension
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetKitExtension final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetKitExtension) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetKitExtension");
static_assert(sizeof(GBKitFunctionLibrary_GetKitExtension) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetKitExtension");
static_assert(offsetof(GBKitFunctionLibrary_GetKitExtension, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetKitExtension::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetKitItemList
// 0x0038 (0x0038 - 0x0000)
struct GBKitFunctionLibrary_GetKitItemList final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipAuth;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBInvItem*>                     OutItems;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_GetKitItemList) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetKitItemList");
static_assert(sizeof(GBKitFunctionLibrary_GetKitItemList) == 0x000038, "Wrong size on GBKitFunctionLibrary_GetKitItemList");
static_assert(offsetof(GBKitFunctionLibrary_GetKitItemList, Owner) == 0x000000, "Member 'GBKitFunctionLibrary_GetKitItemList::Owner' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitItemList, KitJsonObj) == 0x000008, "Member 'GBKitFunctionLibrary_GetKitItemList::KitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitItemList, ProfileName) == 0x000010, "Member 'GBKitFunctionLibrary_GetKitItemList::ProfileName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitItemList, bSkipAuth) == 0x000018, "Member 'GBKitFunctionLibrary_GetKitItemList::bSkipAuth' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitItemList, OutItems) == 0x000020, "Member 'GBKitFunctionLibrary_GetKitItemList::OutItems' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitItemList, ReturnValue) == 0x000030, "Member 'GBKitFunctionLibrary_GetKitItemList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetKitPrimaryAssetIds
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_GetKitPrimaryAssetIds final
{
public:
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                OutPrimaryAssetIds;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_GetKitPrimaryAssetIds) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetKitPrimaryAssetIds");
static_assert(sizeof(GBKitFunctionLibrary_GetKitPrimaryAssetIds) == 0x000020, "Wrong size on GBKitFunctionLibrary_GetKitPrimaryAssetIds");
static_assert(offsetof(GBKitFunctionLibrary_GetKitPrimaryAssetIds, KitJsonObj) == 0x000000, "Member 'GBKitFunctionLibrary_GetKitPrimaryAssetIds::KitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitPrimaryAssetIds, OutPrimaryAssetIds) == 0x000008, "Member 'GBKitFunctionLibrary_GetKitPrimaryAssetIds::OutPrimaryAssetIds' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitPrimaryAssetIds, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_GetKitPrimaryAssetIds::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetKitValidationInfo
// 0x00B8 (0x00B8 - 0x0000)
struct GBKitFunctionLibrary_GetKitValidationInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadoutName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredInvItemTypeTags;                           // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludeInvItemTags;                                // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGBKitValidationInfo                   ReturnValue;                                       // 0x0058(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetKitValidationInfo) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetKitValidationInfo");
static_assert(sizeof(GBKitFunctionLibrary_GetKitValidationInfo) == 0x0000B8, "Wrong size on GBKitFunctionLibrary_GetKitValidationInfo");
static_assert(offsetof(GBKitFunctionLibrary_GetKitValidationInfo, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_GetKitValidationInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitValidationInfo, LoadoutName) == 0x000008, "Member 'GBKitFunctionLibrary_GetKitValidationInfo::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitValidationInfo, KitJsonObj) == 0x000010, "Member 'GBKitFunctionLibrary_GetKitValidationInfo::KitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitValidationInfo, RequiredInvItemTypeTags) == 0x000018, "Member 'GBKitFunctionLibrary_GetKitValidationInfo::RequiredInvItemTypeTags' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitValidationInfo, ExcludeInvItemTags) == 0x000038, "Member 'GBKitFunctionLibrary_GetKitValidationInfo::ExcludeInvItemTags' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetKitValidationInfo, ReturnValue) == 0x000058, "Member 'GBKitFunctionLibrary_GetKitValidationInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetKitVersion
// 0x0004 (0x0004 - 0x0000)
struct GBKitFunctionLibrary_GetKitVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetKitVersion) == 0x000004, "Wrong alignment on GBKitFunctionLibrary_GetKitVersion");
static_assert(sizeof(GBKitFunctionLibrary_GetKitVersion) == 0x000004, "Wrong size on GBKitFunctionLibrary_GetKitVersion");
static_assert(offsetof(GBKitFunctionLibrary_GetKitVersion, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetKitVersion::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetModifiedField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetModifiedField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetModifiedField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetModifiedField");
static_assert(sizeof(GBKitFunctionLibrary_GetModifiedField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetModifiedField");
static_assert(offsetof(GBKitFunctionLibrary_GetModifiedField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetModifiedField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetPatchAuthorAndName
// 0x0030 (0x0030 - 0x0000)
struct GBKitFunctionLibrary_GetPatchAuthorAndName final
{
public:
	class FString                                 PatchFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutAuthor;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPatchName;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetPatchAuthorAndName) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetPatchAuthorAndName");
static_assert(sizeof(GBKitFunctionLibrary_GetPatchAuthorAndName) == 0x000030, "Wrong size on GBKitFunctionLibrary_GetPatchAuthorAndName");
static_assert(offsetof(GBKitFunctionLibrary_GetPatchAuthorAndName, PatchFilename) == 0x000000, "Member 'GBKitFunctionLibrary_GetPatchAuthorAndName::PatchFilename' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetPatchAuthorAndName, OutAuthor) == 0x000010, "Member 'GBKitFunctionLibrary_GetPatchAuthorAndName::OutAuthor' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetPatchAuthorAndName, OutPatchName) == 0x000020, "Member 'GBKitFunctionLibrary_GetPatchAuthorAndName::OutPatchName' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetPatchPathField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetPatchPathField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetPatchPathField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetPatchPathField");
static_assert(sizeof(GBKitFunctionLibrary_GetPatchPathField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetPatchPathField");
static_assert(offsetof(GBKitFunctionLibrary_GetPatchPathField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetPatchPathField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetPatchTintField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetPatchTintField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetPatchTintField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetPatchTintField");
static_assert(sizeof(GBKitFunctionLibrary_GetPatchTintField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetPatchTintField");
static_assert(offsetof(GBKitFunctionLibrary_GetPatchTintField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetPatchTintField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetPresetNameField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetPresetNameField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetPresetNameField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetPresetNameField");
static_assert(sizeof(GBKitFunctionLibrary_GetPresetNameField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetPresetNameField");
static_assert(offsetof(GBKitFunctionLibrary_GetPresetNameField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetPresetNameField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetPresetsField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetPresetsField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetPresetsField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetPresetsField");
static_assert(sizeof(GBKitFunctionLibrary_GetPresetsField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetPresetsField");
static_assert(offsetof(GBKitFunctionLibrary_GetPresetsField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetPresetsField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetRequiredInvItemTypeTags
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_GetRequiredInvItemTypeTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetRequiredInvItemTypeTags) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetRequiredInvItemTypeTags");
static_assert(sizeof(GBKitFunctionLibrary_GetRequiredInvItemTypeTags) == 0x000020, "Wrong size on GBKitFunctionLibrary_GetRequiredInvItemTypeTags");
static_assert(offsetof(GBKitFunctionLibrary_GetRequiredInvItemTypeTags, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetRequiredInvItemTypeTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetSkinField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetSkinField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetSkinField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetSkinField");
static_assert(sizeof(GBKitFunctionLibrary_GetSkinField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetSkinField");
static_assert(offsetof(GBKitFunctionLibrary_GetSkinField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetSkinField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetTypeField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetTypeField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetTypeField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetTypeField");
static_assert(sizeof(GBKitFunctionLibrary_GetTypeField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetTypeField");
static_assert(offsetof(GBKitFunctionLibrary_GetTypeField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetTypeField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserBotLoadoutsPath
// 0x0018 (0x0018 - 0x0000)
struct GBKitFunctionLibrary_GetUserBotLoadoutsPath final
{
public:
	class FName                                   TeamName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserBotLoadoutsPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserBotLoadoutsPath");
static_assert(sizeof(GBKitFunctionLibrary_GetUserBotLoadoutsPath) == 0x000018, "Wrong size on GBKitFunctionLibrary_GetUserBotLoadoutsPath");
static_assert(offsetof(GBKitFunctionLibrary_GetUserBotLoadoutsPath, TeamName) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserBotLoadoutsPath::TeamName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserBotLoadoutsPath, ReturnValue) == 0x000008, "Member 'GBKitFunctionLibrary_GetUserBotLoadoutsPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserItemBuildFilename
// 0x0030 (0x0030 - 0x0000)
struct GBKitFunctionLibrary_GetUserItemBuildFilename final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemBuild;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserItemBuildFilename) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserItemBuildFilename");
static_assert(sizeof(GBKitFunctionLibrary_GetUserItemBuildFilename) == 0x000030, "Wrong size on GBKitFunctionLibrary_GetUserItemBuildFilename");
static_assert(offsetof(GBKitFunctionLibrary_GetUserItemBuildFilename, Type) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserItemBuildFilename::Type' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserItemBuildFilename, ItemBuild) == 0x000010, "Member 'GBKitFunctionLibrary_GetUserItemBuildFilename::ItemBuild' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserItemBuildFilename, ReturnValue) == 0x000020, "Member 'GBKitFunctionLibrary_GetUserItemBuildFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserItemBuildPath
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_GetUserItemBuildPath final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserItemBuildPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserItemBuildPath");
static_assert(sizeof(GBKitFunctionLibrary_GetUserItemBuildPath) == 0x000020, "Wrong size on GBKitFunctionLibrary_GetUserItemBuildPath");
static_assert(offsetof(GBKitFunctionLibrary_GetUserItemBuildPath, Type) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserItemBuildPath::Type' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserItemBuildPath, ReturnValue) == 0x000010, "Member 'GBKitFunctionLibrary_GetUserItemBuildPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserLoadoutFilename
// 0x0018 (0x0018 - 0x0000)
struct GBKitFunctionLibrary_GetUserLoadoutFilename final
{
public:
	class FName                                   LoadoutName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserLoadoutFilename) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserLoadoutFilename");
static_assert(sizeof(GBKitFunctionLibrary_GetUserLoadoutFilename) == 0x000018, "Wrong size on GBKitFunctionLibrary_GetUserLoadoutFilename");
static_assert(offsetof(GBKitFunctionLibrary_GetUserLoadoutFilename, LoadoutName) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserLoadoutFilename::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserLoadoutFilename, ReturnValue) == 0x000008, "Member 'GBKitFunctionLibrary_GetUserLoadoutFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserPatchesPath
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetUserPatchesPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserPatchesPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserPatchesPath");
static_assert(sizeof(GBKitFunctionLibrary_GetUserPatchesPath) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetUserPatchesPath");
static_assert(offsetof(GBKitFunctionLibrary_GetUserPatchesPath, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserPatchesPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserPresetFilename
// 0x0030 (0x0030 - 0x0000)
struct GBKitFunctionLibrary_GetUserPresetFilename final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Preset;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserPresetFilename) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserPresetFilename");
static_assert(sizeof(GBKitFunctionLibrary_GetUserPresetFilename) == 0x000030, "Wrong size on GBKitFunctionLibrary_GetUserPresetFilename");
static_assert(offsetof(GBKitFunctionLibrary_GetUserPresetFilename, Type) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserPresetFilename::Type' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserPresetFilename, Preset) == 0x000010, "Member 'GBKitFunctionLibrary_GetUserPresetFilename::Preset' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserPresetFilename, ReturnValue) == 0x000020, "Member 'GBKitFunctionLibrary_GetUserPresetFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetUserPresetsPath
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_GetUserPresetsPath final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetUserPresetsPath) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetUserPresetsPath");
static_assert(sizeof(GBKitFunctionLibrary_GetUserPresetsPath) == 0x000020, "Wrong size on GBKitFunctionLibrary_GetUserPresetsPath");
static_assert(offsetof(GBKitFunctionLibrary_GetUserPresetsPath, Type) == 0x000000, "Member 'GBKitFunctionLibrary_GetUserPresetsPath::Type' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_GetUserPresetsPath, ReturnValue) == 0x000010, "Member 'GBKitFunctionLibrary_GetUserPresetsPath::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.GetVersionField
// 0x0010 (0x0010 - 0x0000)
struct GBKitFunctionLibrary_GetVersionField final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_GetVersionField) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_GetVersionField");
static_assert(sizeof(GBKitFunctionLibrary_GetVersionField) == 0x000010, "Wrong size on GBKitFunctionLibrary_GetVersionField");
static_assert(offsetof(GBKitFunctionLibrary_GetVersionField, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_GetVersionField::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.HasKitsToConvert
// 0x0001 (0x0001 - 0x0000)
struct GBKitFunctionLibrary_HasKitsToConvert final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_HasKitsToConvert) == 0x000001, "Wrong alignment on GBKitFunctionLibrary_HasKitsToConvert");
static_assert(sizeof(GBKitFunctionLibrary_HasKitsToConvert) == 0x000001, "Wrong size on GBKitFunctionLibrary_HasKitsToConvert");
static_assert(offsetof(GBKitFunctionLibrary_HasKitsToConvert, ReturnValue) == 0x000000, "Member 'GBKitFunctionLibrary_HasKitsToConvert::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.HasRequiredInvItemTypeTags
// 0x0038 (0x0038 - 0x0000)
struct GBKitFunctionLibrary_HasRequiredInvItemTypeTags final
{
public:
	TArray<struct FPrimaryAssetId>                PrimaryAssetIds;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredInvItemTypeTags;                           // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_HasRequiredInvItemTypeTags) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_HasRequiredInvItemTypeTags");
static_assert(sizeof(GBKitFunctionLibrary_HasRequiredInvItemTypeTags) == 0x000038, "Wrong size on GBKitFunctionLibrary_HasRequiredInvItemTypeTags");
static_assert(offsetof(GBKitFunctionLibrary_HasRequiredInvItemTypeTags, PrimaryAssetIds) == 0x000000, "Member 'GBKitFunctionLibrary_HasRequiredInvItemTypeTags::PrimaryAssetIds' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_HasRequiredInvItemTypeTags, RequiredInvItemTypeTags) == 0x000010, "Member 'GBKitFunctionLibrary_HasRequiredInvItemTypeTags::RequiredInvItemTypeTags' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_HasRequiredInvItemTypeTags, ReturnValue) == 0x000030, "Member 'GBKitFunctionLibrary_HasRequiredInvItemTypeTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.KitDump
// 0x0018 (0x0018 - 0x0000)
struct GBKitFunctionLibrary_KitDump final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_KitDump) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_KitDump");
static_assert(sizeof(GBKitFunctionLibrary_KitDump) == 0x000018, "Wrong size on GBKitFunctionLibrary_KitDump");
static_assert(offsetof(GBKitFunctionLibrary_KitDump, Message) == 0x000000, "Member 'GBKitFunctionLibrary_KitDump::Message' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_KitDump, KitJsonObj) == 0x000010, "Member 'GBKitFunctionLibrary_KitDump::KitJsonObj' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.KitValidation_Failed
// 0x0068 (0x0068 - 0x0000)
struct GBKitFunctionLibrary_KitValidation_Failed final
{
public:
	struct FGBKitValidationInfo                   KitValidationInfo;                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_KitValidation_Failed) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_KitValidation_Failed");
static_assert(sizeof(GBKitFunctionLibrary_KitValidation_Failed) == 0x000068, "Wrong size on GBKitFunctionLibrary_KitValidation_Failed");
static_assert(offsetof(GBKitFunctionLibrary_KitValidation_Failed, KitValidationInfo) == 0x000000, "Member 'GBKitFunctionLibrary_KitValidation_Failed::KitValidationInfo' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_KitValidation_Failed, ReturnValue) == 0x000060, "Member 'GBKitFunctionLibrary_KitValidation_Failed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.KitValidation_ToString
// 0x0070 (0x0070 - 0x0000)
struct GBKitFunctionLibrary_KitValidation_ToString final
{
public:
	struct FGBKitValidationInfo                   KitValidationInfo;                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_KitValidation_ToString) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_KitValidation_ToString");
static_assert(sizeof(GBKitFunctionLibrary_KitValidation_ToString) == 0x000070, "Wrong size on GBKitFunctionLibrary_KitValidation_ToString");
static_assert(offsetof(GBKitFunctionLibrary_KitValidation_ToString, KitValidationInfo) == 0x000000, "Member 'GBKitFunctionLibrary_KitValidation_ToString::KitValidationInfo' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_KitValidation_ToString, ReturnValue) == 0x000060, "Member 'GBKitFunctionLibrary_KitValidation_ToString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.LoadKitFile
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_LoadKitFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      OutKitJsonObj;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_LoadKitFile) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_LoadKitFile");
static_assert(sizeof(GBKitFunctionLibrary_LoadKitFile) == 0x000020, "Wrong size on GBKitFunctionLibrary_LoadKitFile");
static_assert(offsetof(GBKitFunctionLibrary_LoadKitFile, Filename) == 0x000000, "Member 'GBKitFunctionLibrary_LoadKitFile::Filename' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadKitFile, OutKitJsonObj) == 0x000010, "Member 'GBKitFunctionLibrary_LoadKitFile::OutKitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadKitFile, ReturnValue) == 0x000018, "Member 'GBKitFunctionLibrary_LoadKitFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.LoadPatch
// 0x0038 (0x0038 - 0x0000)
struct GBKitFunctionLibrary_LoadPatch final
{
public:
	class FString                                 PatchFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OutPatchImage;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OutPatchNormal;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutImageWidth;                                     // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutImageHeight;                                    // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_LoadPatch) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_LoadPatch");
static_assert(sizeof(GBKitFunctionLibrary_LoadPatch) == 0x000038, "Wrong size on GBKitFunctionLibrary_LoadPatch");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, PatchFilename) == 0x000000, "Member 'GBKitFunctionLibrary_LoadPatch::PatchFilename' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, OutPatchImage) == 0x000010, "Member 'GBKitFunctionLibrary_LoadPatch::OutPatchImage' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, OutPatchNormal) == 0x000018, "Member 'GBKitFunctionLibrary_LoadPatch::OutPatchNormal' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, OutImageWidth) == 0x000020, "Member 'GBKitFunctionLibrary_LoadPatch::OutImageWidth' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, OutImageHeight) == 0x000024, "Member 'GBKitFunctionLibrary_LoadPatch::OutImageHeight' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, WorldContextObject) == 0x000028, "Member 'GBKitFunctionLibrary_LoadPatch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_LoadPatch, ReturnValue) == 0x000030, "Member 'GBKitFunctionLibrary_LoadPatch::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.MakeValidLoadoutFilename
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_MakeValidLoadoutFilename final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_MakeValidLoadoutFilename) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_MakeValidLoadoutFilename");
static_assert(sizeof(GBKitFunctionLibrary_MakeValidLoadoutFilename) == 0x000020, "Wrong size on GBKitFunctionLibrary_MakeValidLoadoutFilename");
static_assert(offsetof(GBKitFunctionLibrary_MakeValidLoadoutFilename, Filename) == 0x000000, "Member 'GBKitFunctionLibrary_MakeValidLoadoutFilename::Filename' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_MakeValidLoadoutFilename, ReturnValue) == 0x000010, "Member 'GBKitFunctionLibrary_MakeValidLoadoutFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.ProcessFailedKit
// 0x0078 (0x0078 - 0x0000)
struct GBKitFunctionLibrary_ProcessFailedKit final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVaRestJsonObject*                      KitJsonObj;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGBKitValidationInfo                   KitValidationInfo;                                 // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRemove;                                           // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0071(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKitFunctionLibrary_ProcessFailedKit) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_ProcessFailedKit");
static_assert(sizeof(GBKitFunctionLibrary_ProcessFailedKit) == 0x000078, "Wrong size on GBKitFunctionLibrary_ProcessFailedKit");
static_assert(offsetof(GBKitFunctionLibrary_ProcessFailedKit, WorldContextObject) == 0x000000, "Member 'GBKitFunctionLibrary_ProcessFailedKit::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ProcessFailedKit, KitJsonObj) == 0x000008, "Member 'GBKitFunctionLibrary_ProcessFailedKit::KitJsonObj' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ProcessFailedKit, KitValidationInfo) == 0x000010, "Member 'GBKitFunctionLibrary_ProcessFailedKit::KitValidationInfo' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ProcessFailedKit, bRemove) == 0x000070, "Member 'GBKitFunctionLibrary_ProcessFailedKit::bRemove' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ProcessFailedKit, ReturnValue) == 0x000071, "Member 'GBKitFunctionLibrary_ProcessFailedKit::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.StripItemTypePrefix
// 0x0020 (0x0020 - 0x0000)
struct GBKitFunctionLibrary_StripItemTypePrefix final
{
public:
	class FString                                 InvItemTypeAsString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_StripItemTypePrefix) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_StripItemTypePrefix");
static_assert(sizeof(GBKitFunctionLibrary_StripItemTypePrefix) == 0x000020, "Wrong size on GBKitFunctionLibrary_StripItemTypePrefix");
static_assert(offsetof(GBKitFunctionLibrary_StripItemTypePrefix, InvItemTypeAsString) == 0x000000, "Member 'GBKitFunctionLibrary_StripItemTypePrefix::InvItemTypeAsString' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_StripItemTypePrefix, ReturnValue) == 0x000010, "Member 'GBKitFunctionLibrary_StripItemTypePrefix::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitFunctionLibrary.ValidateOrReplaceInvItemSkin
// 0x0038 (0x0038 - 0x0000)
struct GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvItemSkinTypeTag;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        DesiredInvItemSkinId;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AGBCharacter*                     Character;                                         // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        OutValidInvItemSkinId;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin) == 0x000008, "Wrong alignment on GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin");
static_assert(sizeof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin) == 0x000038, "Wrong size on GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin");
static_assert(offsetof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin, ProfileName) == 0x000000, "Member 'GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin::ProfileName' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin, InvItemSkinTypeTag) == 0x000008, "Member 'GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin::InvItemSkinTypeTag' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin, DesiredInvItemSkinId) == 0x000010, "Member 'GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin::DesiredInvItemSkinId' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin, Character) == 0x000020, "Member 'GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin::Character' has a wrong offset!");
static_assert(offsetof(GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin, OutValidInvItemSkinId) == 0x000028, "Member 'GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin::OutValidInvItemSkinId' has a wrong offset!");

// Function GroundBranch.GBKitInfo.AddPatch
// 0x0058 (0x0058 - 0x0000)
struct GBKitInfo_AddPatch final
{
public:
	struct FGameplayTag                           PatchNameTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PatchPath;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        TintMaterial;                                      // 0x0018(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FallbackPatchPath;                                 // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        FallbackTintMaterial;                              // 0x0040(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_AddPatch) == 0x000008, "Wrong alignment on GBKitInfo_AddPatch");
static_assert(sizeof(GBKitInfo_AddPatch) == 0x000058, "Wrong size on GBKitInfo_AddPatch");
static_assert(offsetof(GBKitInfo_AddPatch, PatchNameTag) == 0x000000, "Member 'GBKitInfo_AddPatch::PatchNameTag' has a wrong offset!");
static_assert(offsetof(GBKitInfo_AddPatch, PatchPath) == 0x000008, "Member 'GBKitInfo_AddPatch::PatchPath' has a wrong offset!");
static_assert(offsetof(GBKitInfo_AddPatch, TintMaterial) == 0x000018, "Member 'GBKitInfo_AddPatch::TintMaterial' has a wrong offset!");
static_assert(offsetof(GBKitInfo_AddPatch, FallbackPatchPath) == 0x000030, "Member 'GBKitInfo_AddPatch::FallbackPatchPath' has a wrong offset!");
static_assert(offsetof(GBKitInfo_AddPatch, FallbackTintMaterial) == 0x000040, "Member 'GBKitInfo_AddPatch::FallbackTintMaterial' has a wrong offset!");

// Function GroundBranch.GBKitInfo.ApplyToCharacter
// 0x0008 (0x0008 - 0x0000)
struct GBKitInfo_ApplyToCharacter final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_ApplyToCharacter) == 0x000008, "Wrong alignment on GBKitInfo_ApplyToCharacter");
static_assert(sizeof(GBKitInfo_ApplyToCharacter) == 0x000008, "Wrong size on GBKitInfo_ApplyToCharacter");
static_assert(offsetof(GBKitInfo_ApplyToCharacter, Character) == 0x000000, "Member 'GBKitInfo_ApplyToCharacter::Character' has a wrong offset!");

// Function GroundBranch.GBKitInfo.SetCallSign
// 0x0010 (0x0010 - 0x0000)
struct GBKitInfo_SetCallSign final
{
public:
	class FString                                 NewCallSign;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_SetCallSign) == 0x000008, "Wrong alignment on GBKitInfo_SetCallSign");
static_assert(sizeof(GBKitInfo_SetCallSign) == 0x000010, "Wrong size on GBKitInfo_SetCallSign");
static_assert(offsetof(GBKitInfo_SetCallSign, NewCallSign) == 0x000000, "Member 'GBKitInfo_SetCallSign::NewCallSign' has a wrong offset!");

// Function GroundBranch.GBKitInfo.BP_GetKitJsonObj
// 0x0008 (0x0008 - 0x0000)
struct GBKitInfo_BP_GetKitJsonObj final
{
public:
	class UVaRestJsonObject*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_BP_GetKitJsonObj) == 0x000008, "Wrong alignment on GBKitInfo_BP_GetKitJsonObj");
static_assert(sizeof(GBKitInfo_BP_GetKitJsonObj) == 0x000008, "Wrong size on GBKitInfo_BP_GetKitJsonObj");
static_assert(offsetof(GBKitInfo_BP_GetKitJsonObj, ReturnValue) == 0x000000, "Member 'GBKitInfo_BP_GetKitJsonObj::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitInfo.GetCallSign
// 0x0010 (0x0010 - 0x0000)
struct GBKitInfo_GetCallSign final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_GetCallSign) == 0x000008, "Wrong alignment on GBKitInfo_GetCallSign");
static_assert(sizeof(GBKitInfo_GetCallSign) == 0x000010, "Wrong size on GBKitInfo_GetCallSign");
static_assert(offsetof(GBKitInfo_GetCallSign, ReturnValue) == 0x000000, "Member 'GBKitInfo_GetCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitInfo.GetKitName
// 0x0008 (0x0008 - 0x0000)
struct GBKitInfo_GetKitName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_GetKitName) == 0x000004, "Wrong alignment on GBKitInfo_GetKitName");
static_assert(sizeof(GBKitInfo_GetKitName) == 0x000008, "Wrong size on GBKitInfo_GetKitName");
static_assert(offsetof(GBKitInfo_GetKitName, ReturnValue) == 0x000000, "Member 'GBKitInfo_GetKitName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitInfo.GetPatchColourTextureAtlas
// 0x0008 (0x0008 - 0x0000)
struct GBKitInfo_GetPatchColourTextureAtlas final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_GetPatchColourTextureAtlas) == 0x000008, "Wrong alignment on GBKitInfo_GetPatchColourTextureAtlas");
static_assert(sizeof(GBKitInfo_GetPatchColourTextureAtlas) == 0x000008, "Wrong size on GBKitInfo_GetPatchColourTextureAtlas");
static_assert(offsetof(GBKitInfo_GetPatchColourTextureAtlas, ReturnValue) == 0x000000, "Member 'GBKitInfo_GetPatchColourTextureAtlas::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKitInfo.GetPatchNormalTextureAtlas
// 0x0008 (0x0008 - 0x0000)
struct GBKitInfo_GetPatchNormalTextureAtlas final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKitInfo_GetPatchNormalTextureAtlas) == 0x000008, "Wrong alignment on GBKitInfo_GetPatchNormalTextureAtlas");
static_assert(sizeof(GBKitInfo_GetPatchNormalTextureAtlas) == 0x000008, "Wrong size on GBKitInfo_GetPatchNormalTextureAtlas");
static_assert(offsetof(GBKitInfo_GetPatchNormalTextureAtlas, ReturnValue) == 0x000000, "Member 'GBKitInfo_GetPatchNormalTextureAtlas::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.AICharacterDied
// 0x000C (0x000C - 0x0000)
struct GBKytController_AICharacterDied final
{
public:
	struct FVector                                DeathLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_AICharacterDied) == 0x000004, "Wrong alignment on GBKytController_AICharacterDied");
static_assert(sizeof(GBKytController_AICharacterDied) == 0x00000C, "Wrong size on GBKytController_AICharacterDied");
static_assert(offsetof(GBKytController_AICharacterDied, DeathLocation) == 0x000000, "Member 'GBKytController_AICharacterDied::DeathLocation' has a wrong offset!");

// Function GroundBranch.GBKytController.CommandIssued
// 0x0028 (0x0028 - 0x0000)
struct GBKytController_CommandIssued final
{
public:
	int32                                         CommandIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Commander;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OptLocation;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OptTargetActor;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_CommandIssued) == 0x000008, "Wrong alignment on GBKytController_CommandIssued");
static_assert(sizeof(GBKytController_CommandIssued) == 0x000028, "Wrong size on GBKytController_CommandIssued");
static_assert(offsetof(GBKytController_CommandIssued, CommandIdx) == 0x000000, "Member 'GBKytController_CommandIssued::CommandIdx' has a wrong offset!");
static_assert(offsetof(GBKytController_CommandIssued, Commander) == 0x000008, "Member 'GBKytController_CommandIssued::Commander' has a wrong offset!");
static_assert(offsetof(GBKytController_CommandIssued, OptLocation) == 0x000010, "Member 'GBKytController_CommandIssued::OptLocation' has a wrong offset!");
static_assert(offsetof(GBKytController_CommandIssued, OptTargetActor) == 0x000020, "Member 'GBKytController_CommandIssued::OptTargetActor' has a wrong offset!");

// Function GroundBranch.GBKytController.ComputeAndSetNextGuardPoint
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_ComputeAndSetNextGuardPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_ComputeAndSetNextGuardPoint) == 0x000001, "Wrong alignment on GBKytController_ComputeAndSetNextGuardPoint");
static_assert(sizeof(GBKytController_ComputeAndSetNextGuardPoint) == 0x000001, "Wrong size on GBKytController_ComputeAndSetNextGuardPoint");
static_assert(offsetof(GBKytController_ComputeAndSetNextGuardPoint, ReturnValue) == 0x000000, "Member 'GBKytController_ComputeAndSetNextGuardPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.DebugFreeze
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_DebugFreeze final
{
public:
	bool                                          bShouldFreeze;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_DebugFreeze) == 0x000001, "Wrong alignment on GBKytController_DebugFreeze");
static_assert(sizeof(GBKytController_DebugFreeze) == 0x000001, "Wrong size on GBKytController_DebugFreeze");
static_assert(offsetof(GBKytController_DebugFreeze, bShouldFreeze) == 0x000000, "Member 'GBKytController_DebugFreeze::bShouldFreeze' has a wrong offset!");

// Function GroundBranch.GBKytController.FindHidingSpot
// 0x0020 (0x0020 - 0x0000)
struct GBKytController_FindHidingSpot final
{
public:
	class AActor*                                 HideFrom;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClassFilter;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutHidingSpots;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_FindHidingSpot) == 0x000008, "Wrong alignment on GBKytController_FindHidingSpot");
static_assert(sizeof(GBKytController_FindHidingSpot) == 0x000020, "Wrong size on GBKytController_FindHidingSpot");
static_assert(offsetof(GBKytController_FindHidingSpot, HideFrom) == 0x000000, "Member 'GBKytController_FindHidingSpot::HideFrom' has a wrong offset!");
static_assert(offsetof(GBKytController_FindHidingSpot, ActorClassFilter) == 0x000008, "Member 'GBKytController_FindHidingSpot::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(GBKytController_FindHidingSpot, OutHidingSpots) == 0x000010, "Member 'GBKytController_FindHidingSpot::OutHidingSpots' has a wrong offset!");

// Function GroundBranch.GBKytController.FlashlightWarn
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_FlashlightWarn final
{
public:
	class AGBCharacter*                           InstigatorChar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_FlashlightWarn) == 0x000008, "Wrong alignment on GBKytController_FlashlightWarn");
static_assert(sizeof(GBKytController_FlashlightWarn) == 0x000008, "Wrong size on GBKytController_FlashlightWarn");
static_assert(offsetof(GBKytController_FlashlightWarn, InstigatorChar) == 0x000000, "Member 'GBKytController_FlashlightWarn::InstigatorChar' has a wrong offset!");

// Function GroundBranch.GBKytController.Freeze
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_Freeze final
{
public:
	float                                         FreezeTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_Freeze) == 0x000004, "Wrong alignment on GBKytController_Freeze");
static_assert(sizeof(GBKytController_Freeze) == 0x000004, "Wrong size on GBKytController_Freeze");
static_assert(offsetof(GBKytController_Freeze, FreezeTime) == 0x000000, "Member 'GBKytController_Freeze::FreezeTime' has a wrong offset!");

// Function GroundBranch.GBKytController.GetAIState
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_GetAIState final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetAIState) == 0x000001, "Wrong alignment on GBKytController_GetAIState");
static_assert(sizeof(GBKytController_GetAIState) == 0x000001, "Wrong size on GBKytController_GetAIState");
static_assert(offsetof(GBKytController_GetAIState, ReturnValue) == 0x000000, "Member 'GBKytController_GetAIState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetAlertness
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_GetAlertness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetAlertness) == 0x000004, "Wrong alignment on GBKytController_GetAlertness");
static_assert(sizeof(GBKytController_GetAlertness) == 0x000004, "Wrong size on GBKytController_GetAlertness");
static_assert(offsetof(GBKytController_GetAlertness, ReturnValue) == 0x000000, "Member 'GBKytController_GetAlertness::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetCommonBlackboard
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_GetCommonBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetCommonBlackboard) == 0x000008, "Wrong alignment on GBKytController_GetCommonBlackboard");
static_assert(sizeof(GBKytController_GetCommonBlackboard) == 0x000008, "Wrong size on GBKytController_GetCommonBlackboard");
static_assert(offsetof(GBKytController_GetCommonBlackboard, ReturnValue) == 0x000000, "Member 'GBKytController_GetCommonBlackboard::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetPerceptionCount
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_GetPerceptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetPerceptionCount) == 0x000004, "Wrong alignment on GBKytController_GetPerceptionCount");
static_assert(sizeof(GBKytController_GetPerceptionCount) == 0x000004, "Wrong size on GBKytController_GetPerceptionCount");
static_assert(offsetof(GBKytController_GetPerceptionCount, ReturnValue) == 0x000000, "Member 'GBKytController_GetPerceptionCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetVisibilityModifier
// 0x0010 (0x0010 - 0x0000)
struct GBKytController_GetVisibilityModifier final
{
public:
	class AGBCharacter*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKytController_GetVisibilityModifier) == 0x000008, "Wrong alignment on GBKytController_GetVisibilityModifier");
static_assert(sizeof(GBKytController_GetVisibilityModifier) == 0x000010, "Wrong size on GBKytController_GetVisibilityModifier");
static_assert(offsetof(GBKytController_GetVisibilityModifier, Target) == 0x000000, "Member 'GBKytController_GetVisibilityModifier::Target' has a wrong offset!");
static_assert(offsetof(GBKytController_GetVisibilityModifier, ReturnValue) == 0x000008, "Member 'GBKytController_GetVisibilityModifier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GrenadeWarn
// 0x000C (0x000C - 0x0000)
struct GBKytController_GrenadeWarn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GrenadeWarn) == 0x000004, "Wrong alignment on GBKytController_GrenadeWarn");
static_assert(sizeof(GBKytController_GrenadeWarn) == 0x00000C, "Wrong size on GBKytController_GrenadeWarn");
static_assert(offsetof(GBKytController_GrenadeWarn, Location) == 0x000000, "Member 'GBKytController_GrenadeWarn::Location' has a wrong offset!");

// Function GroundBranch.GBKytController.HasTarget
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_HasTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_HasTarget) == 0x000001, "Wrong alignment on GBKytController_HasTarget");
static_assert(sizeof(GBKytController_HasTarget) == 0x000001, "Wrong size on GBKytController_HasTarget");
static_assert(offsetof(GBKytController_HasTarget, ReturnValue) == 0x000000, "Member 'GBKytController_HasTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.IsFrozen
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_IsFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_IsFrozen) == 0x000001, "Wrong alignment on GBKytController_IsFrozen");
static_assert(sizeof(GBKytController_IsFrozen) == 0x000001, "Wrong size on GBKytController_IsFrozen");
static_assert(offsetof(GBKytController_IsFrozen, ReturnValue) == 0x000000, "Member 'GBKytController_IsFrozen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.MoveCommandUpdated
// 0x0018 (0x0018 - 0x0000)
struct GBKytController_MoveCommandUpdated final
{
public:
	struct FAIMoveCommand                         NextMoveCommand;                                   // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_MoveCommandUpdated) == 0x000008, "Wrong alignment on GBKytController_MoveCommandUpdated");
static_assert(sizeof(GBKytController_MoveCommandUpdated) == 0x000018, "Wrong size on GBKytController_MoveCommandUpdated");
static_assert(offsetof(GBKytController_MoveCommandUpdated, NextMoveCommand) == 0x000000, "Member 'GBKytController_MoveCommandUpdated::NextMoveCommand' has a wrong offset!");

// Function GroundBranch.GBKytController.NeedsReload
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_NeedsReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_NeedsReload) == 0x000001, "Wrong alignment on GBKytController_NeedsReload");
static_assert(sizeof(GBKytController_NeedsReload) == 0x000001, "Wrong size on GBKytController_NeedsReload");
static_assert(offsetof(GBKytController_NeedsReload, ReturnValue) == 0x000000, "Member 'GBKytController_NeedsReload::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.OnLoadoutApplied
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_OnLoadoutApplied final
{
public:
	class AGBCharacter*                           InGBCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_OnLoadoutApplied) == 0x000008, "Wrong alignment on GBKytController_OnLoadoutApplied");
static_assert(sizeof(GBKytController_OnLoadoutApplied) == 0x000008, "Wrong size on GBKytController_OnLoadoutApplied");
static_assert(offsetof(GBKytController_OnLoadoutApplied, InGBCharacter) == 0x000000, "Member 'GBKytController_OnLoadoutApplied::InGBCharacter' has a wrong offset!");

// Function GroundBranch.GBKytController.ReceiveGoCodeChanged
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_ReceiveGoCodeChanged final
{
public:
	EAIGoCodes                                    NewGoCode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_ReceiveGoCodeChanged) == 0x000001, "Wrong alignment on GBKytController_ReceiveGoCodeChanged");
static_assert(sizeof(GBKytController_ReceiveGoCodeChanged) == 0x000001, "Wrong size on GBKytController_ReceiveGoCodeChanged");
static_assert(offsetof(GBKytController_ReceiveGoCodeChanged, NewGoCode) == 0x000000, "Member 'GBKytController_ReceiveGoCodeChanged::NewGoCode' has a wrong offset!");

// Function GroundBranch.GBKytController.ReceiveMoveCommand
// 0x0018 (0x0018 - 0x0000)
struct GBKytController_ReceiveMoveCommand final
{
public:
	struct FAIMoveCommand                         MoveCommand;                                       // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_ReceiveMoveCommand) == 0x000008, "Wrong alignment on GBKytController_ReceiveMoveCommand");
static_assert(sizeof(GBKytController_ReceiveMoveCommand) == 0x000018, "Wrong size on GBKytController_ReceiveMoveCommand");
static_assert(offsetof(GBKytController_ReceiveMoveCommand, MoveCommand) == 0x000000, "Member 'GBKytController_ReceiveMoveCommand::MoveCommand' has a wrong offset!");

// Function GroundBranch.GBKytController.ReceiveROEChanged
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_ReceiveROEChanged final
{
public:
	EAIRulesEngage                                NewROE;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_ReceiveROEChanged) == 0x000001, "Wrong alignment on GBKytController_ReceiveROEChanged");
static_assert(sizeof(GBKytController_ReceiveROEChanged) == 0x000001, "Wrong size on GBKytController_ReceiveROEChanged");
static_assert(offsetof(GBKytController_ReceiveROEChanged, NewROE) == 0x000000, "Member 'GBKytController_ReceiveROEChanged::NewROE' has a wrong offset!");

// Function GroundBranch.GBKytController.SetAIFocus
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_SetAIFocus final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_SetAIFocus) == 0x000008, "Wrong alignment on GBKytController_SetAIFocus");
static_assert(sizeof(GBKytController_SetAIFocus) == 0x000008, "Wrong size on GBKytController_SetAIFocus");
static_assert(offsetof(GBKytController_SetAIFocus, FocusTarget) == 0x000000, "Member 'GBKytController_SetAIFocus::FocusTarget' has a wrong offset!");

// Function GroundBranch.GBKytController.SetAIState
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_SetAIState final
{
public:
	EGBAIState                                    NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_SetAIState) == 0x000001, "Wrong alignment on GBKytController_SetAIState");
static_assert(sizeof(GBKytController_SetAIState) == 0x000001, "Wrong size on GBKytController_SetAIState");
static_assert(offsetof(GBKytController_SetAIState, NewState) == 0x000000, "Member 'GBKytController_SetAIState::NewState' has a wrong offset!");

// Function GroundBranch.GBKytController.SetSearchTime
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_SetSearchTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_SetSearchTime) == 0x000004, "Wrong alignment on GBKytController_SetSearchTime");
static_assert(sizeof(GBKytController_SetSearchTime) == 0x000004, "Wrong size on GBKytController_SetSearchTime");
static_assert(offsetof(GBKytController_SetSearchTime, NewValue) == 0x000000, "Member 'GBKytController_SetSearchTime::NewValue' has a wrong offset!");

// Function GroundBranch.GBKytController.SetSquad
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_SetSquad final
{
public:
	class AGBAISquad*                             NewSquad;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_SetSquad) == 0x000008, "Wrong alignment on GBKytController_SetSquad");
static_assert(sizeof(GBKytController_SetSquad) == 0x000008, "Wrong size on GBKytController_SetSquad");
static_assert(offsetof(GBKytController_SetSquad, NewSquad) == 0x000000, "Member 'GBKytController_SetSquad::NewSquad' has a wrong offset!");

// Function GroundBranch.GBKytController.SetWantsPlayerState
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_SetWantsPlayerState final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_SetWantsPlayerState) == 0x000001, "Wrong alignment on GBKytController_SetWantsPlayerState");
static_assert(sizeof(GBKytController_SetWantsPlayerState) == 0x000001, "Wrong size on GBKytController_SetWantsPlayerState");
static_assert(offsetof(GBKytController_SetWantsPlayerState, bValue) == 0x000000, "Member 'GBKytController_SetWantsPlayerState::bValue' has a wrong offset!");

// Function GroundBranch.GBKytController.UdpateAimTarget
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_UdpateAimTarget final
{
public:
	class AActor*                                 NewAimTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_UdpateAimTarget) == 0x000008, "Wrong alignment on GBKytController_UdpateAimTarget");
static_assert(sizeof(GBKytController_UdpateAimTarget) == 0x000008, "Wrong size on GBKytController_UdpateAimTarget");
static_assert(offsetof(GBKytController_UdpateAimTarget, NewAimTarget) == 0x000000, "Member 'GBKytController_UdpateAimTarget::NewAimTarget' has a wrong offset!");

// Function GroundBranch.GBKytController.UpdateBlackboardSearchParams
// 0x0020 (0x0020 - 0x0000)
struct GBKytController_UpdateBlackboardSearchParams final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SearchDirection;                                   // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchTime;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKytController_UpdateBlackboardSearchParams) == 0x000004, "Wrong alignment on GBKytController_UpdateBlackboardSearchParams");
static_assert(sizeof(GBKytController_UpdateBlackboardSearchParams) == 0x000020, "Wrong size on GBKytController_UpdateBlackboardSearchParams");
static_assert(offsetof(GBKytController_UpdateBlackboardSearchParams, TargetLocation) == 0x000000, "Member 'GBKytController_UpdateBlackboardSearchParams::TargetLocation' has a wrong offset!");
static_assert(offsetof(GBKytController_UpdateBlackboardSearchParams, SearchDirection) == 0x00000C, "Member 'GBKytController_UpdateBlackboardSearchParams::SearchDirection' has a wrong offset!");
static_assert(offsetof(GBKytController_UpdateBlackboardSearchParams, SearchTime) == 0x000018, "Member 'GBKytController_UpdateBlackboardSearchParams::SearchTime' has a wrong offset!");
static_assert(offsetof(GBKytController_UpdateBlackboardSearchParams, ReturnValue) == 0x00001C, "Member 'GBKytController_UpdateBlackboardSearchParams::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetGBChar
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_GetGBChar final
{
public:
	class AGBCharacter*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetGBChar) == 0x000008, "Wrong alignment on GBKytController_GetGBChar");
static_assert(sizeof(GBKytController_GetGBChar) == 0x000008, "Wrong size on GBKytController_GetGBChar");
static_assert(offsetof(GBKytController_GetGBChar, ReturnValue) == 0x000000, "Member 'GBKytController_GetGBChar::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetGrenadeLaunchVelocity
// 0x000C (0x000C - 0x0000)
struct GBKytController_GetGrenadeLaunchVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetGrenadeLaunchVelocity) == 0x000004, "Wrong alignment on GBKytController_GetGrenadeLaunchVelocity");
static_assert(sizeof(GBKytController_GetGrenadeLaunchVelocity) == 0x00000C, "Wrong size on GBKytController_GetGrenadeLaunchVelocity");
static_assert(offsetof(GBKytController_GetGrenadeLaunchVelocity, ReturnValue) == 0x000000, "Member 'GBKytController_GetGrenadeLaunchVelocity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetSearchTime
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_GetSearchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetSearchTime) == 0x000004, "Wrong alignment on GBKytController_GetSearchTime");
static_assert(sizeof(GBKytController_GetSearchTime) == 0x000004, "Wrong size on GBKytController_GetSearchTime");
static_assert(offsetof(GBKytController_GetSearchTime, ReturnValue) == 0x000000, "Member 'GBKytController_GetSearchTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetSquad
// 0x0008 (0x0008 - 0x0000)
struct GBKytController_GetSquad final
{
public:
	class AGBAISquad*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetSquad) == 0x000008, "Wrong alignment on GBKytController_GetSquad");
static_assert(sizeof(GBKytController_GetSquad) == 0x000008, "Wrong size on GBKytController_GetSquad");
static_assert(offsetof(GBKytController_GetSquad, ReturnValue) == 0x000000, "Member 'GBKytController_GetSquad::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetSquadSize
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_GetSquadSize final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetSquadSize) == 0x000001, "Wrong alignment on GBKytController_GetSquadSize");
static_assert(sizeof(GBKytController_GetSquadSize) == 0x000001, "Wrong size on GBKytController_GetSquadSize");
static_assert(offsetof(GBKytController_GetSquadSize, ReturnValue) == 0x000000, "Member 'GBKytController_GetSquadSize::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetSuppressionValue
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_GetSuppressionValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetSuppressionValue) == 0x000004, "Wrong alignment on GBKytController_GetSuppressionValue");
static_assert(sizeof(GBKytController_GetSuppressionValue) == 0x000004, "Wrong size on GBKytController_GetSuppressionValue");
static_assert(offsetof(GBKytController_GetSuppressionValue, ReturnValue) == 0x000000, "Member 'GBKytController_GetSuppressionValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.GetTimeOnCurrentTarget
// 0x0004 (0x0004 - 0x0000)
struct GBKytController_GetTimeOnCurrentTarget final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_GetTimeOnCurrentTarget) == 0x000004, "Wrong alignment on GBKytController_GetTimeOnCurrentTarget");
static_assert(sizeof(GBKytController_GetTimeOnCurrentTarget) == 0x000004, "Wrong size on GBKytController_GetTimeOnCurrentTarget");
static_assert(offsetof(GBKytController_GetTimeOnCurrentTarget, ReturnValue) == 0x000000, "Member 'GBKytController_GetTimeOnCurrentTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_IsAlive) == 0x000001, "Wrong alignment on GBKytController_IsAlive");
static_assert(sizeof(GBKytController_IsAlive) == 0x000001, "Wrong size on GBKytController_IsAlive");
static_assert(offsetof(GBKytController_IsAlive, ReturnValue) == 0x000000, "Member 'GBKytController_IsAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytController.IsDebugFrozen
// 0x0001 (0x0001 - 0x0000)
struct GBKytController_IsDebugFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytController_IsDebugFrozen) == 0x000001, "Wrong alignment on GBKytController_IsDebugFrozen");
static_assert(sizeof(GBKytController_IsDebugFrozen) == 0x000001, "Wrong size on GBKytController_IsDebugFrozen");
static_assert(offsetof(GBKytController_IsDebugFrozen, ReturnValue) == 0x000000, "Member 'GBKytController_IsDebugFrozen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytDetectableActor.Detected
// 0x0008 (0x0008 - 0x0000)
struct GBKytDetectableActor_Detected final
{
public:
	class AActor*                                 DetectedBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytDetectableActor_Detected) == 0x000008, "Wrong alignment on GBKytDetectableActor_Detected");
static_assert(sizeof(GBKytDetectableActor_Detected) == 0x000008, "Wrong size on GBKytDetectableActor_Detected");
static_assert(offsetof(GBKytDetectableActor_Detected, DetectedBy) == 0x000000, "Member 'GBKytDetectableActor_Detected::DetectedBy' has a wrong offset!");

// Function GroundBranch.GBKytDetectableActor.ShouldBeUsedAsTarget
// 0x0001 (0x0001 - 0x0000)
struct GBKytDetectableActor_ShouldBeUsedAsTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytDetectableActor_ShouldBeUsedAsTarget) == 0x000001, "Wrong alignment on GBKytDetectableActor_ShouldBeUsedAsTarget");
static_assert(sizeof(GBKytDetectableActor_ShouldBeUsedAsTarget) == 0x000001, "Wrong size on GBKytDetectableActor_ShouldBeUsedAsTarget");
static_assert(offsetof(GBKytDetectableActor_ShouldBeUsedAsTarget, ReturnValue) == 0x000000, "Member 'GBKytDetectableActor_ShouldBeUsedAsTarget::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytFriendlyController.CommandReceived
// 0x0018 (0x0018 - 0x0000)
struct GBKytFriendlyController_CommandReceived final
{
public:
	EGBAICommands                                 Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytFriendlyController_CommandReceived) == 0x000008, "Wrong alignment on GBKytFriendlyController_CommandReceived");
static_assert(sizeof(GBKytFriendlyController_CommandReceived) == 0x000018, "Wrong size on GBKytFriendlyController_CommandReceived");
static_assert(offsetof(GBKytFriendlyController_CommandReceived, Command) == 0x000000, "Member 'GBKytFriendlyController_CommandReceived::Command' has a wrong offset!");
static_assert(offsetof(GBKytFriendlyController_CommandReceived, Location) == 0x000004, "Member 'GBKytFriendlyController_CommandReceived::Location' has a wrong offset!");
static_assert(offsetof(GBKytFriendlyController_CommandReceived, Actor) == 0x000010, "Member 'GBKytFriendlyController_CommandReceived::Actor' has a wrong offset!");

// Function GroundBranch.GBKytFriendlyController.GetCommandBlackboard
// 0x0008 (0x0008 - 0x0000)
struct GBKytFriendlyController_GetCommandBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBKytFriendlyController_GetCommandBlackboard) == 0x000008, "Wrong alignment on GBKytFriendlyController_GetCommandBlackboard");
static_assert(sizeof(GBKytFriendlyController_GetCommandBlackboard) == 0x000008, "Wrong size on GBKytFriendlyController_GetCommandBlackboard");
static_assert(offsetof(GBKytFriendlyController_GetCommandBlackboard, ReturnValue) == 0x000000, "Member 'GBKytFriendlyController_GetCommandBlackboard::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytFriendlyController.OnControlledCharacterHit
// 0x00B0 (0x00B0 - 0x0000)
struct GBKytFriendlyController_OnControlledCharacterHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKytFriendlyController_OnControlledCharacterHit) == 0x000008, "Wrong alignment on GBKytFriendlyController_OnControlledCharacterHit");
static_assert(sizeof(GBKytFriendlyController_OnControlledCharacterHit) == 0x0000B0, "Wrong size on GBKytFriendlyController_OnControlledCharacterHit");
static_assert(offsetof(GBKytFriendlyController_OnControlledCharacterHit, HitComponent) == 0x000000, "Member 'GBKytFriendlyController_OnControlledCharacterHit::HitComponent' has a wrong offset!");
static_assert(offsetof(GBKytFriendlyController_OnControlledCharacterHit, OtherActor) == 0x000008, "Member 'GBKytFriendlyController_OnControlledCharacterHit::OtherActor' has a wrong offset!");
static_assert(offsetof(GBKytFriendlyController_OnControlledCharacterHit, OtherComp) == 0x000010, "Member 'GBKytFriendlyController_OnControlledCharacterHit::OtherComp' has a wrong offset!");
static_assert(offsetof(GBKytFriendlyController_OnControlledCharacterHit, NormalImpulse) == 0x000018, "Member 'GBKytFriendlyController_OnControlledCharacterHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(GBKytFriendlyController_OnControlledCharacterHit, Hit) == 0x000024, "Member 'GBKytFriendlyController_OnControlledCharacterHit::Hit' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.AddRoundToTube
// 0x0010 (0x0010 - 0x0000)
struct GBTubeMagComponent_AddRoundToTube final
{
public:
	TSubclassOf<class AGBBulletItem>              NewRound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBTubeMagComponent_AddRoundToTube) == 0x000008, "Wrong alignment on GBTubeMagComponent_AddRoundToTube");
static_assert(sizeof(GBTubeMagComponent_AddRoundToTube) == 0x000010, "Wrong size on GBTubeMagComponent_AddRoundToTube");
static_assert(offsetof(GBTubeMagComponent_AddRoundToTube, NewRound) == 0x000000, "Member 'GBTubeMagComponent_AddRoundToTube::NewRound' has a wrong offset!");
static_assert(offsetof(GBTubeMagComponent_AddRoundToTube, ReturnValue) == 0x000008, "Member 'GBTubeMagComponent_AddRoundToTube::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.AddToTube
// 0x0008 (0x0008 - 0x0000)
struct GBTubeMagComponent_AddToTube final
{
public:
	TSubclassOf<class AGBBulletItem>              NewBulletItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_AddToTube) == 0x000008, "Wrong alignment on GBTubeMagComponent_AddToTube");
static_assert(sizeof(GBTubeMagComponent_AddToTube) == 0x000008, "Wrong size on GBTubeMagComponent_AddToTube");
static_assert(offsetof(GBTubeMagComponent_AddToTube, NewBulletItem) == 0x000000, "Member 'GBTubeMagComponent_AddToTube::NewBulletItem' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.FindCompatibleRound
// 0x0010 (0x0010 - 0x0000)
struct GBTubeMagComponent_FindCompatibleRound final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBBulletItem*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_FindCompatibleRound) == 0x000008, "Wrong alignment on GBTubeMagComponent_FindCompatibleRound");
static_assert(sizeof(GBTubeMagComponent_FindCompatibleRound) == 0x000010, "Wrong size on GBTubeMagComponent_FindCompatibleRound");
static_assert(offsetof(GBTubeMagComponent_FindCompatibleRound, Character) == 0x000000, "Member 'GBTubeMagComponent_FindCompatibleRound::Character' has a wrong offset!");
static_assert(offsetof(GBTubeMagComponent_FindCompatibleRound, ReturnValue) == 0x000008, "Member 'GBTubeMagComponent_FindCompatibleRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetTubeContents
// 0x0010 (0x0010 - 0x0000)
struct GBTubeMagComponent_GetTubeContents final
{
public:
	TArray<TSubclassOf<class AGBBulletItem>>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetTubeContents) == 0x000008, "Wrong alignment on GBTubeMagComponent_GetTubeContents");
static_assert(sizeof(GBTubeMagComponent_GetTubeContents) == 0x000010, "Wrong size on GBTubeMagComponent_GetTubeContents");
static_assert(offsetof(GBTubeMagComponent_GetTubeContents, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetTubeContents::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.RemoveFromTube
// 0x0008 (0x0008 - 0x0000)
struct GBTubeMagComponent_RemoveFromTube final
{
public:
	TSubclassOf<class AGBBulletItem>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_RemoveFromTube) == 0x000008, "Wrong alignment on GBTubeMagComponent_RemoveFromTube");
static_assert(sizeof(GBTubeMagComponent_RemoveFromTube) == 0x000008, "Wrong size on GBTubeMagComponent_RemoveFromTube");
static_assert(offsetof(GBTubeMagComponent_RemoveFromTube, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_RemoveFromTube::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.SetBoltHeldOpen
// 0x0001 (0x0001 - 0x0000)
struct GBTubeMagComponent_SetBoltHeldOpen final
{
public:
	bool                                          bNewBoltIsHeldOpen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_SetBoltHeldOpen) == 0x000001, "Wrong alignment on GBTubeMagComponent_SetBoltHeldOpen");
static_assert(sizeof(GBTubeMagComponent_SetBoltHeldOpen) == 0x000001, "Wrong size on GBTubeMagComponent_SetBoltHeldOpen");
static_assert(offsetof(GBTubeMagComponent_SetBoltHeldOpen, bNewBoltIsHeldOpen) == 0x000000, "Member 'GBTubeMagComponent_SetBoltHeldOpen::bNewBoltIsHeldOpen' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.SetBulletId
// 0x0010 (0x0010 - 0x0000)
struct GBTubeMagComponent_SetBulletId final
{
public:
	struct FPrimaryAssetId                        NewBulletId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_SetBulletId) == 0x000004, "Wrong alignment on GBTubeMagComponent_SetBulletId");
static_assert(sizeof(GBTubeMagComponent_SetBulletId) == 0x000010, "Wrong size on GBTubeMagComponent_SetBulletId");
static_assert(offsetof(GBTubeMagComponent_SetBulletId, NewBulletId) == 0x000000, "Member 'GBTubeMagComponent_SetBulletId::NewBulletId' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.SetChamberedRound
// 0x0008 (0x0008 - 0x0000)
struct GBTubeMagComponent_SetChamberedRound final
{
public:
	TSubclassOf<class AGBBulletItem>              NewChamberedRound;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_SetChamberedRound) == 0x000008, "Wrong alignment on GBTubeMagComponent_SetChamberedRound");
static_assert(sizeof(GBTubeMagComponent_SetChamberedRound) == 0x000008, "Wrong size on GBTubeMagComponent_SetChamberedRound");
static_assert(offsetof(GBTubeMagComponent_SetChamberedRound, NewChamberedRound) == 0x000000, "Member 'GBTubeMagComponent_SetChamberedRound::NewChamberedRound' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.SetIsFiringFromOpenBolt
// 0x0001 (0x0001 - 0x0000)
struct GBTubeMagComponent_SetIsFiringFromOpenBolt final
{
public:
	bool                                          bNewIsFiringFromOpenBolt;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_SetIsFiringFromOpenBolt) == 0x000001, "Wrong alignment on GBTubeMagComponent_SetIsFiringFromOpenBolt");
static_assert(sizeof(GBTubeMagComponent_SetIsFiringFromOpenBolt) == 0x000001, "Wrong size on GBTubeMagComponent_SetIsFiringFromOpenBolt");
static_assert(offsetof(GBTubeMagComponent_SetIsFiringFromOpenBolt, bNewIsFiringFromOpenBolt) == 0x000000, "Member 'GBTubeMagComponent_SetIsFiringFromOpenBolt::bNewIsFiringFromOpenBolt' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetBoltHeldOpen
// 0x0001 (0x0001 - 0x0000)
struct GBTubeMagComponent_GetBoltHeldOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetBoltHeldOpen) == 0x000001, "Wrong alignment on GBTubeMagComponent_GetBoltHeldOpen");
static_assert(sizeof(GBTubeMagComponent_GetBoltHeldOpen) == 0x000001, "Wrong size on GBTubeMagComponent_GetBoltHeldOpen");
static_assert(offsetof(GBTubeMagComponent_GetBoltHeldOpen, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetBoltHeldOpen::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetBulletItemClass
// 0x0008 (0x0008 - 0x0000)
struct GBTubeMagComponent_GetBulletItemClass final
{
public:
	TSubclassOf<class AGBBulletItem>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetBulletItemClass) == 0x000008, "Wrong alignment on GBTubeMagComponent_GetBulletItemClass");
static_assert(sizeof(GBTubeMagComponent_GetBulletItemClass) == 0x000008, "Wrong size on GBTubeMagComponent_GetBulletItemClass");
static_assert(offsetof(GBTubeMagComponent_GetBulletItemClass, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetBulletItemClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetCapacity
// 0x0004 (0x0004 - 0x0000)
struct GBTubeMagComponent_GetCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetCapacity) == 0x000004, "Wrong alignment on GBTubeMagComponent_GetCapacity");
static_assert(sizeof(GBTubeMagComponent_GetCapacity) == 0x000004, "Wrong size on GBTubeMagComponent_GetCapacity");
static_assert(offsetof(GBTubeMagComponent_GetCapacity, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetCapacity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetChamberedRound
// 0x0008 (0x0008 - 0x0000)
struct GBTubeMagComponent_GetChamberedRound final
{
public:
	TSubclassOf<class AGBBulletItem>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetChamberedRound) == 0x000008, "Wrong alignment on GBTubeMagComponent_GetChamberedRound");
static_assert(sizeof(GBTubeMagComponent_GetChamberedRound) == 0x000008, "Wrong size on GBTubeMagComponent_GetChamberedRound");
static_assert(offsetof(GBTubeMagComponent_GetChamberedRound, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetChamberedRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetCount
// 0x0004 (0x0004 - 0x0000)
struct GBTubeMagComponent_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetCount) == 0x000004, "Wrong alignment on GBTubeMagComponent_GetCount");
static_assert(sizeof(GBTubeMagComponent_GetCount) == 0x000004, "Wrong size on GBTubeMagComponent_GetCount");
static_assert(offsetof(GBTubeMagComponent_GetCount, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.GetIsFiringFromOpenBolt
// 0x0001 (0x0001 - 0x0000)
struct GBTubeMagComponent_GetIsFiringFromOpenBolt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_GetIsFiringFromOpenBolt) == 0x000001, "Wrong alignment on GBTubeMagComponent_GetIsFiringFromOpenBolt");
static_assert(sizeof(GBTubeMagComponent_GetIsFiringFromOpenBolt) == 0x000001, "Wrong size on GBTubeMagComponent_GetIsFiringFromOpenBolt");
static_assert(offsetof(GBTubeMagComponent_GetIsFiringFromOpenBolt, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_GetIsFiringFromOpenBolt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.IsLiveRoundChambered
// 0x0001 (0x0001 - 0x0000)
struct GBTubeMagComponent_IsLiveRoundChambered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_IsLiveRoundChambered) == 0x000001, "Wrong alignment on GBTubeMagComponent_IsLiveRoundChambered");
static_assert(sizeof(GBTubeMagComponent_IsLiveRoundChambered) == 0x000001, "Wrong size on GBTubeMagComponent_IsLiveRoundChambered");
static_assert(offsetof(GBTubeMagComponent_IsLiveRoundChambered, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_IsLiveRoundChambered::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTubeMagComponent.StartPlusOne
// 0x0001 (0x0001 - 0x0000)
struct GBTubeMagComponent_StartPlusOne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTubeMagComponent_StartPlusOne) == 0x000001, "Wrong alignment on GBTubeMagComponent_StartPlusOne");
static_assert(sizeof(GBTubeMagComponent_StartPlusOne) == 0x000001, "Wrong size on GBTubeMagComponent_StartPlusOne");
static_assert(offsetof(GBTubeMagComponent_StartPlusOne, ReturnValue) == 0x000000, "Member 'GBTubeMagComponent_StartPlusOne::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytStatics.DoesPathExist
// 0x0028 (0x0028 - 0x0000)
struct GBKytStatics_DoesPathExist final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InStart;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InEnd;                                             // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKytStatics_DoesPathExist) == 0x000008, "Wrong alignment on GBKytStatics_DoesPathExist");
static_assert(sizeof(GBKytStatics_DoesPathExist) == 0x000028, "Wrong size on GBKytStatics_DoesPathExist");
static_assert(offsetof(GBKytStatics_DoesPathExist, WorldContextObject) == 0x000000, "Member 'GBKytStatics_DoesPathExist::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKytStatics_DoesPathExist, InStart) == 0x000008, "Member 'GBKytStatics_DoesPathExist::InStart' has a wrong offset!");
static_assert(offsetof(GBKytStatics_DoesPathExist, InEnd) == 0x000014, "Member 'GBKytStatics_DoesPathExist::InEnd' has a wrong offset!");
static_assert(offsetof(GBKytStatics_DoesPathExist, ReturnValue) == 0x000020, "Member 'GBKytStatics_DoesPathExist::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytStatics.GetRandomReachablePointInRadius
// 0x0028 (0x0028 - 0x0000)
struct GBKytStatics_GetRandomReachablePointInRadius final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOrigin;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutRandomPoint;                                    // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKytStatics_GetRandomReachablePointInRadius) == 0x000008, "Wrong alignment on GBKytStatics_GetRandomReachablePointInRadius");
static_assert(sizeof(GBKytStatics_GetRandomReachablePointInRadius) == 0x000028, "Wrong size on GBKytStatics_GetRandomReachablePointInRadius");
static_assert(offsetof(GBKytStatics_GetRandomReachablePointInRadius, WorldContextObject) == 0x000000, "Member 'GBKytStatics_GetRandomReachablePointInRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKytStatics_GetRandomReachablePointInRadius, InOrigin) == 0x000008, "Member 'GBKytStatics_GetRandomReachablePointInRadius::InOrigin' has a wrong offset!");
static_assert(offsetof(GBKytStatics_GetRandomReachablePointInRadius, Radius) == 0x000014, "Member 'GBKytStatics_GetRandomReachablePointInRadius::Radius' has a wrong offset!");
static_assert(offsetof(GBKytStatics_GetRandomReachablePointInRadius, OutRandomPoint) == 0x000018, "Member 'GBKytStatics_GetRandomReachablePointInRadius::OutRandomPoint' has a wrong offset!");
static_assert(offsetof(GBKytStatics_GetRandomReachablePointInRadius, ReturnValue) == 0x000024, "Member 'GBKytStatics_GetRandomReachablePointInRadius::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBKytStatics.IsOnNavMesh
// 0x0030 (0x0030 - 0x0000)
struct GBKytStatics_IsOnNavMesh final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointToCheck;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ErrorTolerance;                                    // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutResolvedLocation;                               // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBKytStatics_IsOnNavMesh) == 0x000008, "Wrong alignment on GBKytStatics_IsOnNavMesh");
static_assert(sizeof(GBKytStatics_IsOnNavMesh) == 0x000030, "Wrong size on GBKytStatics_IsOnNavMesh");
static_assert(offsetof(GBKytStatics_IsOnNavMesh, WorldContextObject) == 0x000000, "Member 'GBKytStatics_IsOnNavMesh::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBKytStatics_IsOnNavMesh, PointToCheck) == 0x000008, "Member 'GBKytStatics_IsOnNavMesh::PointToCheck' has a wrong offset!");
static_assert(offsetof(GBKytStatics_IsOnNavMesh, ErrorTolerance) == 0x000014, "Member 'GBKytStatics_IsOnNavMesh::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(GBKytStatics_IsOnNavMesh, OutResolvedLocation) == 0x000020, "Member 'GBKytStatics_IsOnNavMesh::OutResolvedLocation' has a wrong offset!");
static_assert(offsetof(GBKytStatics_IsOnNavMesh, ReturnValue) == 0x00002C, "Member 'GBKytStatics_IsOnNavMesh::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLadder.OnBeginCursorOver
// 0x0008 (0x0008 - 0x0000)
struct GBLadder_OnBeginCursorOver final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLadder_OnBeginCursorOver) == 0x000008, "Wrong alignment on GBLadder_OnBeginCursorOver");
static_assert(sizeof(GBLadder_OnBeginCursorOver) == 0x000008, "Wrong size on GBLadder_OnBeginCursorOver");
static_assert(offsetof(GBLadder_OnBeginCursorOver, TouchedComponent) == 0x000000, "Member 'GBLadder_OnBeginCursorOver::TouchedComponent' has a wrong offset!");

// Function GroundBranch.GBLadder.OnEndCursorOver
// 0x0008 (0x0008 - 0x0000)
struct GBLadder_OnEndCursorOver final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLadder_OnEndCursorOver) == 0x000008, "Wrong alignment on GBLadder_OnEndCursorOver");
static_assert(sizeof(GBLadder_OnEndCursorOver) == 0x000008, "Wrong size on GBLadder_OnEndCursorOver");
static_assert(offsetof(GBLadder_OnEndCursorOver, TouchedComponent) == 0x000000, "Member 'GBLadder_OnEndCursorOver::TouchedComponent' has a wrong offset!");

// Function GroundBranch.GBLadderComponent.GetLadderBottom
// 0x0004 (0x0004 - 0x0000)
struct GBLadderComponent_GetLadderBottom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLadderComponent_GetLadderBottom) == 0x000004, "Wrong alignment on GBLadderComponent_GetLadderBottom");
static_assert(sizeof(GBLadderComponent_GetLadderBottom) == 0x000004, "Wrong size on GBLadderComponent_GetLadderBottom");
static_assert(offsetof(GBLadderComponent_GetLadderBottom, ReturnValue) == 0x000000, "Member 'GBLadderComponent_GetLadderBottom::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLadderComponent.GetLadderTop
// 0x0004 (0x0004 - 0x0000)
struct GBLadderComponent_GetLadderTop final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLadderComponent_GetLadderTop) == 0x000004, "Wrong alignment on GBLadderComponent_GetLadderTop");
static_assert(sizeof(GBLadderComponent_GetLadderTop) == 0x000004, "Wrong size on GBLadderComponent_GetLadderTop");
static_assert(offsetof(GBLadderComponent_GetLadderTop, ReturnValue) == 0x000000, "Member 'GBLadderComponent_GetLadderTop::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLocalPlayer.Benchmark
// 0x0010 (0x0010 - 0x0000)
struct GBLocalPlayer_Benchmark final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLocalPlayer_Benchmark) == 0x000008, "Wrong alignment on GBLocalPlayer_Benchmark");
static_assert(sizeof(GBLocalPlayer_Benchmark) == 0x000010, "Wrong size on GBLocalPlayer_Benchmark");
static_assert(offsetof(GBLocalPlayer_Benchmark, Parameters) == 0x000000, "Member 'GBLocalPlayer_Benchmark::Parameters' has a wrong offset!");

// Function GroundBranch.GBLocalPlayer.GetPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBLocalPlayer_GetPlayerSettings final
{
public:
	class UGBPlayerSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLocalPlayer_GetPlayerSettings) == 0x000008, "Wrong alignment on GBLocalPlayer_GetPlayerSettings");
static_assert(sizeof(GBLocalPlayer_GetPlayerSettings) == 0x000008, "Wrong size on GBLocalPlayer_GetPlayerSettings");
static_assert(offsetof(GBLocalPlayer_GetPlayerSettings, ReturnValue) == 0x000000, "Member 'GBLocalPlayer_GetPlayerSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.AddTag
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_AddTag final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_AddTag) == 0x000008, "Wrong alignment on GBLuaActorPackage_AddTag");
static_assert(sizeof(GBLuaActorPackage_AddTag) == 0x000090, "Wrong size on GBLuaActorPackage_AddTag");
static_assert(offsetof(GBLuaActorPackage_AddTag, InActor) == 0x000000, "Member 'GBLuaActorPackage_AddTag::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_AddTag, InTag) == 0x000048, "Member 'GBLuaActorPackage_AddTag::InTag' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetActorRefInternal
// 0x0050 (0x0050 - 0x0000)
struct GBLuaActorPackage_GetActorRefInternal final
{
public:
	struct FLuaValue                              PossibleActor;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetActorRefInternal) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetActorRefInternal");
static_assert(sizeof(GBLuaActorPackage_GetActorRefInternal) == 0x000050, "Wrong size on GBLuaActorPackage_GetActorRefInternal");
static_assert(offsetof(GBLuaActorPackage_GetActorRefInternal, PossibleActor) == 0x000000, "Member 'GBLuaActorPackage_GetActorRefInternal::PossibleActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetActorRefInternal, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetActorRefInternal::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetLocation
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_GetLocation final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetLocation) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetLocation");
static_assert(sizeof(GBLuaActorPackage_GetLocation) == 0x000090, "Wrong size on GBLuaActorPackage_GetLocation");
static_assert(offsetof(GBLuaActorPackage_GetLocation, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetLocation::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetLocation, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetName
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_GetName final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetName) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetName");
static_assert(sizeof(GBLuaActorPackage_GetName) == 0x000090, "Wrong size on GBLuaActorPackage_GetName");
static_assert(offsetof(GBLuaActorPackage_GetName, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetName::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetName, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetOverlappingPlayers
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_GetOverlappingPlayers final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetOverlappingPlayers) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetOverlappingPlayers");
static_assert(sizeof(GBLuaActorPackage_GetOverlappingPlayers) == 0x000090, "Wrong size on GBLuaActorPackage_GetOverlappingPlayers");
static_assert(offsetof(GBLuaActorPackage_GetOverlappingPlayers, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetOverlappingPlayers::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetOverlappingPlayers, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetOverlappingPlayers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetOverlaps
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaActorPackage_GetOverlaps final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InActorClass;                                      // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetOverlaps) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetOverlaps");
static_assert(sizeof(GBLuaActorPackage_GetOverlaps) == 0x0000D8, "Wrong size on GBLuaActorPackage_GetOverlaps");
static_assert(offsetof(GBLuaActorPackage_GetOverlaps, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetOverlaps::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetOverlaps, InActorClass) == 0x000048, "Member 'GBLuaActorPackage_GetOverlaps::InActorClass' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetOverlaps, ReturnValue) == 0x000090, "Member 'GBLuaActorPackage_GetOverlaps::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetRotation
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_GetRotation final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetRotation) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetRotation");
static_assert(sizeof(GBLuaActorPackage_GetRotation) == 0x000090, "Wrong size on GBLuaActorPackage_GetRotation");
static_assert(offsetof(GBLuaActorPackage_GetRotation, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetRotation::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetRotation, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetRotation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetTag
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaActorPackage_GetTag final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              Index_0;                                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetTag) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetTag");
static_assert(sizeof(GBLuaActorPackage_GetTag) == 0x0000D8, "Wrong size on GBLuaActorPackage_GetTag");
static_assert(offsetof(GBLuaActorPackage_GetTag, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetTag::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetTag, Index_0) == 0x000048, "Member 'GBLuaActorPackage_GetTag::Index_0' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetTag, ReturnValue) == 0x000090, "Member 'GBLuaActorPackage_GetTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetTags
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_GetTags final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetTags) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetTags");
static_assert(sizeof(GBLuaActorPackage_GetTags) == 0x000090, "Wrong size on GBLuaActorPackage_GetTags");
static_assert(offsetof(GBLuaActorPackage_GetTags, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetTags::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetTags, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.GetTeamId
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_GetTeamId final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_GetTeamId) == 0x000008, "Wrong alignment on GBLuaActorPackage_GetTeamId");
static_assert(sizeof(GBLuaActorPackage_GetTeamId) == 0x000090, "Wrong size on GBLuaActorPackage_GetTeamId");
static_assert(offsetof(GBLuaActorPackage_GetTeamId, InActor) == 0x000000, "Member 'GBLuaActorPackage_GetTeamId::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_GetTeamId, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_GetTeamId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.HasTag
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaActorPackage_HasTag final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_HasTag) == 0x000008, "Wrong alignment on GBLuaActorPackage_HasTag");
static_assert(sizeof(GBLuaActorPackage_HasTag) == 0x0000D8, "Wrong size on GBLuaActorPackage_HasTag");
static_assert(offsetof(GBLuaActorPackage_HasTag, InActor) == 0x000000, "Member 'GBLuaActorPackage_HasTag::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_HasTag, InTag) == 0x000048, "Member 'GBLuaActorPackage_HasTag::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_HasTag, ReturnValue) == 0x000090, "Member 'GBLuaActorPackage_HasTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.IsActive
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_IsActive final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_IsActive) == 0x000008, "Wrong alignment on GBLuaActorPackage_IsActive");
static_assert(sizeof(GBLuaActorPackage_IsActive) == 0x000090, "Wrong size on GBLuaActorPackage_IsActive");
static_assert(offsetof(GBLuaActorPackage_IsActive, InActor) == 0x000000, "Member 'GBLuaActorPackage_IsActive::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_IsActive, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_IsActive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.IsColliding
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_IsColliding final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_IsColliding) == 0x000008, "Wrong alignment on GBLuaActorPackage_IsColliding");
static_assert(sizeof(GBLuaActorPackage_IsColliding) == 0x000090, "Wrong size on GBLuaActorPackage_IsColliding");
static_assert(offsetof(GBLuaActorPackage_IsColliding, InActor) == 0x000000, "Member 'GBLuaActorPackage_IsColliding::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_IsColliding, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_IsColliding::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.IsOverlapping
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaActorPackage_IsOverlapping final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              OtherActor;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_IsOverlapping) == 0x000008, "Wrong alignment on GBLuaActorPackage_IsOverlapping");
static_assert(sizeof(GBLuaActorPackage_IsOverlapping) == 0x0000D8, "Wrong size on GBLuaActorPackage_IsOverlapping");
static_assert(offsetof(GBLuaActorPackage_IsOverlapping, InActor) == 0x000000, "Member 'GBLuaActorPackage_IsOverlapping::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_IsOverlapping, OtherActor) == 0x000048, "Member 'GBLuaActorPackage_IsOverlapping::OtherActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_IsOverlapping, ReturnValue) == 0x000090, "Member 'GBLuaActorPackage_IsOverlapping::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.IsWithinTriggerVolume
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaActorPackage_IsWithinTriggerVolume final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InGameTrigger;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_IsWithinTriggerVolume) == 0x000008, "Wrong alignment on GBLuaActorPackage_IsWithinTriggerVolume");
static_assert(sizeof(GBLuaActorPackage_IsWithinTriggerVolume) == 0x0000D8, "Wrong size on GBLuaActorPackage_IsWithinTriggerVolume");
static_assert(offsetof(GBLuaActorPackage_IsWithinTriggerVolume, InActor) == 0x000000, "Member 'GBLuaActorPackage_IsWithinTriggerVolume::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_IsWithinTriggerVolume, InGameTrigger) == 0x000048, "Member 'GBLuaActorPackage_IsWithinTriggerVolume::InGameTrigger' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_IsWithinTriggerVolume, ReturnValue) == 0x000090, "Member 'GBLuaActorPackage_IsWithinTriggerVolume::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.RemoveTag
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_RemoveTag final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_RemoveTag) == 0x000008, "Wrong alignment on GBLuaActorPackage_RemoveTag");
static_assert(sizeof(GBLuaActorPackage_RemoveTag) == 0x000090, "Wrong size on GBLuaActorPackage_RemoveTag");
static_assert(offsetof(GBLuaActorPackage_RemoveTag, InActor) == 0x000000, "Member 'GBLuaActorPackage_RemoveTag::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_RemoveTag, InTag) == 0x000048, "Member 'GBLuaActorPackage_RemoveTag::InTag' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.SetActive
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_SetActive final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewActive;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_SetActive) == 0x000008, "Wrong alignment on GBLuaActorPackage_SetActive");
static_assert(sizeof(GBLuaActorPackage_SetActive) == 0x000090, "Wrong size on GBLuaActorPackage_SetActive");
static_assert(offsetof(GBLuaActorPackage_SetActive, InActor) == 0x000000, "Member 'GBLuaActorPackage_SetActive::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_SetActive, InNewActive) == 0x000048, "Member 'GBLuaActorPackage_SetActive::InNewActive' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.SetEnableCollision
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_SetEnableCollision final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              Enabled;                                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_SetEnableCollision) == 0x000008, "Wrong alignment on GBLuaActorPackage_SetEnableCollision");
static_assert(sizeof(GBLuaActorPackage_SetEnableCollision) == 0x000090, "Wrong size on GBLuaActorPackage_SetEnableCollision");
static_assert(offsetof(GBLuaActorPackage_SetEnableCollision, InActor) == 0x000000, "Member 'GBLuaActorPackage_SetEnableCollision::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_SetEnableCollision, Enabled) == 0x000048, "Member 'GBLuaActorPackage_SetEnableCollision::Enabled' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.SetHidden
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_SetHidden final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              inHidden;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_SetHidden) == 0x000008, "Wrong alignment on GBLuaActorPackage_SetHidden");
static_assert(sizeof(GBLuaActorPackage_SetHidden) == 0x000090, "Wrong size on GBLuaActorPackage_SetHidden");
static_assert(offsetof(GBLuaActorPackage_SetHidden, InActor) == 0x000000, "Member 'GBLuaActorPackage_SetHidden::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_SetHidden, inHidden) == 0x000048, "Member 'GBLuaActorPackage_SetHidden::inHidden' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.SetTeamId
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaActorPackage_SetTeamId final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_SetTeamId) == 0x000008, "Wrong alignment on GBLuaActorPackage_SetTeamId");
static_assert(sizeof(GBLuaActorPackage_SetTeamId) == 0x0000D8, "Wrong size on GBLuaActorPackage_SetTeamId");
static_assert(offsetof(GBLuaActorPackage_SetTeamId, InActor) == 0x000000, "Member 'GBLuaActorPackage_SetTeamId::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_SetTeamId, InTeamId) == 0x000048, "Member 'GBLuaActorPackage_SetTeamId::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_SetTeamId, ReturnValue) == 0x000090, "Member 'GBLuaActorPackage_SetTeamId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaActorPackage.ToString
// 0x0090 (0x0090 - 0x0000)
struct GBLuaActorPackage_ToString final
{
public:
	struct FLuaValue                              InActor;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaActorPackage_ToString) == 0x000008, "Wrong alignment on GBLuaActorPackage_ToString");
static_assert(sizeof(GBLuaActorPackage_ToString) == 0x000090, "Wrong size on GBLuaActorPackage_ToString");
static_assert(offsetof(GBLuaActorPackage_ToString, InActor) == 0x000000, "Member 'GBLuaActorPackage_ToString::InActor' has a wrong offset!");
static_assert(offsetof(GBLuaActorPackage_ToString, ReturnValue) == 0x000048, "Member 'GBLuaActorPackage_ToString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetSpawnIsActiveAtCurrentTimeOfDay
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay final
{
public:
	struct FLuaValue                              InSpawnPoint;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay");
static_assert(sizeof(GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay) == 0x000090, "Wrong size on GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay");
static_assert(offsetof(GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay, InSpawnPoint) == 0x000000, "Member 'GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay::InSpawnPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.TriggerFleeState
// 0x0048 (0x0048 - 0x0000)
struct GBLuaAIPackage_TriggerFleeState final
{
public:
	struct FLuaValue                              FleeFromLocation;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_TriggerFleeState) == 0x000008, "Wrong alignment on GBLuaAIPackage_TriggerFleeState");
static_assert(sizeof(GBLuaAIPackage_TriggerFleeState) == 0x000048, "Wrong size on GBLuaAIPackage_TriggerFleeState");
static_assert(offsetof(GBLuaAIPackage_TriggerFleeState, FleeFromLocation) == 0x000000, "Member 'GBLuaAIPackage_TriggerFleeState::FleeFromLocation' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.VerifyAILoadoutExists
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_VerifyAILoadoutExists final
{
public:
	struct FLuaValue                              InLoadoutFilename;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_VerifyAILoadoutExists) == 0x000008, "Wrong alignment on GBLuaAIPackage_VerifyAILoadoutExists");
static_assert(sizeof(GBLuaAIPackage_VerifyAILoadoutExists) == 0x000090, "Wrong size on GBLuaAIPackage_VerifyAILoadoutExists");
static_assert(offsetof(GBLuaAIPackage_VerifyAILoadoutExists, InLoadoutFilename) == 0x000000, "Member 'GBLuaAIPackage_VerifyAILoadoutExists::InLoadoutFilename' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_VerifyAILoadoutExists, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_VerifyAILoadoutExists::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.CheckLocationReachable
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_CheckLocationReachable final
{
public:
	struct FLuaValue                              InStartLoc;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InEndLoc;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_CheckLocationReachable) == 0x000008, "Wrong alignment on GBLuaAIPackage_CheckLocationReachable");
static_assert(sizeof(GBLuaAIPackage_CheckLocationReachable) == 0x0000D8, "Wrong size on GBLuaAIPackage_CheckLocationReachable");
static_assert(offsetof(GBLuaAIPackage_CheckLocationReachable, InStartLoc) == 0x000000, "Member 'GBLuaAIPackage_CheckLocationReachable::InStartLoc' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CheckLocationReachable, InEndLoc) == 0x000048, "Member 'GBLuaAIPackage_CheckLocationReachable::InEndLoc' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CheckLocationReachable, ReturnValue) == 0x000090, "Member 'GBLuaAIPackage_CheckLocationReachable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.CleanUp
// 0x0048 (0x0048 - 0x0000)
struct GBLuaAIPackage_CleanUp final
{
public:
	struct FLuaValue                              InAIControllerTag;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_CleanUp) == 0x000008, "Wrong alignment on GBLuaAIPackage_CleanUp");
static_assert(sizeof(GBLuaAIPackage_CleanUp) == 0x000048, "Wrong size on GBLuaAIPackage_CleanUp");
static_assert(offsetof(GBLuaAIPackage_CleanUp, InAIControllerTag) == 0x000000, "Member 'GBLuaAIPackage_CleanUp::InAIControllerTag' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.Create
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_Create final
{
public:
	struct FLuaValue                              InSpawnPoint;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAIControllerTag;                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFreezeTime;                                      // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_Create) == 0x000008, "Wrong alignment on GBLuaAIPackage_Create");
static_assert(sizeof(GBLuaAIPackage_Create) == 0x0000D8, "Wrong size on GBLuaAIPackage_Create");
static_assert(offsetof(GBLuaAIPackage_Create, InSpawnPoint) == 0x000000, "Member 'GBLuaAIPackage_Create::InSpawnPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_Create, InAIControllerTag) == 0x000048, "Member 'GBLuaAIPackage_Create::InAIControllerTag' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_Create, InFreezeTime) == 0x000090, "Member 'GBLuaAIPackage_Create::InFreezeTime' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.CreateOverDuration
// 0x0120 (0x0120 - 0x0000)
struct GBLuaAIPackage_CreateOverDuration final
{
public:
	struct FLuaValue                              InDuration;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InCount;                                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InOrderedSpawnPoints;                              // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAIControllerTag;                                 // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_CreateOverDuration) == 0x000008, "Wrong alignment on GBLuaAIPackage_CreateOverDuration");
static_assert(sizeof(GBLuaAIPackage_CreateOverDuration) == 0x000120, "Wrong size on GBLuaAIPackage_CreateOverDuration");
static_assert(offsetof(GBLuaAIPackage_CreateOverDuration, InDuration) == 0x000000, "Member 'GBLuaAIPackage_CreateOverDuration::InDuration' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CreateOverDuration, InCount) == 0x000048, "Member 'GBLuaAIPackage_CreateOverDuration::InCount' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CreateOverDuration, InOrderedSpawnPoints) == 0x000090, "Member 'GBLuaAIPackage_CreateOverDuration::InOrderedSpawnPoints' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CreateOverDuration, InAIControllerTag) == 0x0000D8, "Member 'GBLuaAIPackage_CreateOverDuration::InAIControllerTag' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.CreateWithTransform
// 0x0120 (0x0120 - 0x0000)
struct GBLuaAIPackage_CreateWithTransform final
{
public:
	struct FLuaValue                              InVirtualSpawnPoint;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSpawnTransform;                                  // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAIControllerTag;                                 // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFreezeTime;                                      // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_CreateWithTransform) == 0x000008, "Wrong alignment on GBLuaAIPackage_CreateWithTransform");
static_assert(sizeof(GBLuaAIPackage_CreateWithTransform) == 0x000120, "Wrong size on GBLuaAIPackage_CreateWithTransform");
static_assert(offsetof(GBLuaAIPackage_CreateWithTransform, InVirtualSpawnPoint) == 0x000000, "Member 'GBLuaAIPackage_CreateWithTransform::InVirtualSpawnPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CreateWithTransform, InSpawnTransform) == 0x000048, "Member 'GBLuaAIPackage_CreateWithTransform::InSpawnTransform' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CreateWithTransform, InAIControllerTag) == 0x000090, "Member 'GBLuaAIPackage_CreateWithTransform::InAIControllerTag' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_CreateWithTransform, InFreezeTime) == 0x0000D8, "Member 'GBLuaAIPackage_CreateWithTransform::InFreezeTime' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetAIHotspotName
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_GetAIHotspotName final
{
public:
	struct FLuaValue                              InAIHotspot;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetAIHotspotName) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetAIHotspotName");
static_assert(sizeof(GBLuaAIPackage_GetAIHotspotName) == 0x000090, "Wrong size on GBLuaAIPackage_GetAIHotspotName");
static_assert(offsetof(GBLuaAIPackage_GetAIHotspotName, InAIHotspot) == 0x000000, "Member 'GBLuaAIPackage_GetAIHotspotName::InAIHotspot' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetAIHotspotName, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_GetAIHotspotName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetControllers
// 0x0168 (0x0168 - 0x0000)
struct GBLuaAIPackage_GetControllers final
{
public:
	struct FLuaValue                              InControllerClass;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSquadId;                                         // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0120(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetControllers) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetControllers");
static_assert(sizeof(GBLuaAIPackage_GetControllers) == 0x000168, "Wrong size on GBLuaAIPackage_GetControllers");
static_assert(offsetof(GBLuaAIPackage_GetControllers, InControllerClass) == 0x000000, "Member 'GBLuaAIPackage_GetControllers::InControllerClass' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetControllers, InTag) == 0x000048, "Member 'GBLuaAIPackage_GetControllers::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetControllers, InTeamId) == 0x000090, "Member 'GBLuaAIPackage_GetControllers::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetControllers, InSquadId) == 0x0000D8, "Member 'GBLuaAIPackage_GetControllers::InSquadId' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetControllers, ReturnValue) == 0x000120, "Member 'GBLuaAIPackage_GetControllers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetGuardPointName
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_GetGuardPointName final
{
public:
	struct FLuaValue                              InGuardPoint;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetGuardPointName) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetGuardPointName");
static_assert(sizeof(GBLuaAIPackage_GetGuardPointName) == 0x000090, "Wrong size on GBLuaAIPackage_GetGuardPointName");
static_assert(offsetof(GBLuaAIPackage_GetGuardPointName, InGuardPoint) == 0x000000, "Member 'GBLuaAIPackage_GetGuardPointName::InGuardPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetGuardPointName, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_GetGuardPointName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetMaxCount
// 0x0048 (0x0048 - 0x0000)
struct GBLuaAIPackage_GetMaxCount final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetMaxCount) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetMaxCount");
static_assert(sizeof(GBLuaAIPackage_GetMaxCount) == 0x000048, "Wrong size on GBLuaAIPackage_GetMaxCount");
static_assert(offsetof(GBLuaAIPackage_GetMaxCount, ReturnValue) == 0x000000, "Member 'GBLuaAIPackage_GetMaxCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetRandomReachablePointInRadius
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_GetRandomReachablePointInRadius final
{
public:
	struct FLuaValue                              InOrigin;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InRadius;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetRandomReachablePointInRadius) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetRandomReachablePointInRadius");
static_assert(sizeof(GBLuaAIPackage_GetRandomReachablePointInRadius) == 0x0000D8, "Wrong size on GBLuaAIPackage_GetRandomReachablePointInRadius");
static_assert(offsetof(GBLuaAIPackage_GetRandomReachablePointInRadius, InOrigin) == 0x000000, "Member 'GBLuaAIPackage_GetRandomReachablePointInRadius::InOrigin' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetRandomReachablePointInRadius, InRadius) == 0x000048, "Member 'GBLuaAIPackage_GetRandomReachablePointInRadius::InRadius' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetRandomReachablePointInRadius, ReturnValue) == 0x000090, "Member 'GBLuaAIPackage_GetRandomReachablePointInRadius::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetSpawnPointInfo
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_GetSpawnPointInfo final
{
public:
	struct FLuaValue                              InSpawnPoint;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetSpawnPointInfo) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetSpawnPointInfo");
static_assert(sizeof(GBLuaAIPackage_GetSpawnPointInfo) == 0x000090, "Wrong size on GBLuaAIPackage_GetSpawnPointInfo");
static_assert(offsetof(GBLuaAIPackage_GetSpawnPointInfo, InSpawnPoint) == 0x000000, "Member 'GBLuaAIPackage_GetSpawnPointInfo::InSpawnPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetSpawnPointInfo, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_GetSpawnPointInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetSquadId
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_GetSquadId final
{
public:
	struct FLuaValue                              InAIController;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetSquadId) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetSquadId");
static_assert(sizeof(GBLuaAIPackage_GetSquadId) == 0x000090, "Wrong size on GBLuaAIPackage_GetSquadId");
static_assert(offsetof(GBLuaAIPackage_GetSquadId, InAIController) == 0x000000, "Member 'GBLuaAIPackage_GetSquadId::InAIController' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetSquadId, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_GetSquadId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.GetSquadOrders
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_GetSquadOrders final
{
public:
	struct FLuaValue                              InAIController;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_GetSquadOrders) == 0x000008, "Wrong alignment on GBLuaAIPackage_GetSquadOrders");
static_assert(sizeof(GBLuaAIPackage_GetSquadOrders) == 0x000090, "Wrong size on GBLuaAIPackage_GetSquadOrders");
static_assert(offsetof(GBLuaAIPackage_GetSquadOrders, InAIController) == 0x000000, "Member 'GBLuaAIPackage_GetSquadOrders::InAIController' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_GetSquadOrders, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_GetSquadOrders::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.IsAI
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_IsAI final
{
public:
	struct FLuaValue                              InAIController;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAIControllerTag;                                 // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_IsAI) == 0x000008, "Wrong alignment on GBLuaAIPackage_IsAI");
static_assert(sizeof(GBLuaAIPackage_IsAI) == 0x0000D8, "Wrong size on GBLuaAIPackage_IsAI");
static_assert(offsetof(GBLuaAIPackage_IsAI, InAIController) == 0x000000, "Member 'GBLuaAIPackage_IsAI::InAIController' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_IsAI, InAIControllerTag) == 0x000048, "Member 'GBLuaAIPackage_IsAI::InAIControllerTag' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_IsAI, ReturnValue) == 0x000090, "Member 'GBLuaAIPackage_IsAI::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.IsOnNavMesh
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_IsOnNavMesh final
{
public:
	struct FLuaValue                              InLocationOrActor;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_IsOnNavMesh) == 0x000008, "Wrong alignment on GBLuaAIPackage_IsOnNavMesh");
static_assert(sizeof(GBLuaAIPackage_IsOnNavMesh) == 0x000090, "Wrong size on GBLuaAIPackage_IsOnNavMesh");
static_assert(offsetof(GBLuaAIPackage_IsOnNavMesh, InLocationOrActor) == 0x000000, "Member 'GBLuaAIPackage_IsOnNavMesh::InLocationOrActor' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_IsOnNavMesh, ReturnValue) == 0x000048, "Member 'GBLuaAIPackage_IsOnNavMesh::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.IsSpawnPointInHotspot
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_IsSpawnPointInHotspot final
{
public:
	struct FLuaValue                              InAISpawnPoint;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAIHotspot;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_IsSpawnPointInHotspot) == 0x000008, "Wrong alignment on GBLuaAIPackage_IsSpawnPointInHotspot");
static_assert(sizeof(GBLuaAIPackage_IsSpawnPointInHotspot) == 0x0000D8, "Wrong size on GBLuaAIPackage_IsSpawnPointInHotspot");
static_assert(offsetof(GBLuaAIPackage_IsSpawnPointInHotspot, InAISpawnPoint) == 0x000000, "Member 'GBLuaAIPackage_IsSpawnPointInHotspot::InAISpawnPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_IsSpawnPointInHotspot, InAIHotspot) == 0x000048, "Member 'GBLuaAIPackage_IsSpawnPointInHotspot::InAIHotspot' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_IsSpawnPointInHotspot, ReturnValue) == 0x000090, "Member 'GBLuaAIPackage_IsSpawnPointInHotspot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.KillAI
// 0x0048 (0x0048 - 0x0000)
struct GBLuaAIPackage_KillAI final
{
public:
	struct FLuaValue                              AIController;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_KillAI) == 0x000008, "Wrong alignment on GBLuaAIPackage_KillAI");
static_assert(sizeof(GBLuaAIPackage_KillAI) == 0x000048, "Wrong size on GBLuaAIPackage_KillAI");
static_assert(offsetof(GBLuaAIPackage_KillAI, AIController) == 0x000000, "Member 'GBLuaAIPackage_KillAI::AIController' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.ProjectPointToNavigation
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_ProjectPointToNavigation final
{
public:
	struct FLuaValue                              InPoint;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InQueryExtent;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_ProjectPointToNavigation) == 0x000008, "Wrong alignment on GBLuaAIPackage_ProjectPointToNavigation");
static_assert(sizeof(GBLuaAIPackage_ProjectPointToNavigation) == 0x0000D8, "Wrong size on GBLuaAIPackage_ProjectPointToNavigation");
static_assert(offsetof(GBLuaAIPackage_ProjectPointToNavigation, InPoint) == 0x000000, "Member 'GBLuaAIPackage_ProjectPointToNavigation::InPoint' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_ProjectPointToNavigation, InQueryExtent) == 0x000048, "Member 'GBLuaAIPackage_ProjectPointToNavigation::InQueryExtent' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_ProjectPointToNavigation, ReturnValue) == 0x000090, "Member 'GBLuaAIPackage_ProjectPointToNavigation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.SetSearchTarget
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaAIPackage_SetSearchTarget final
{
public:
	struct FLuaValue                              InAIController;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTargetLocation;                                  // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSearchTime;                                      // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_SetSearchTarget) == 0x000008, "Wrong alignment on GBLuaAIPackage_SetSearchTarget");
static_assert(sizeof(GBLuaAIPackage_SetSearchTarget) == 0x0000D8, "Wrong size on GBLuaAIPackage_SetSearchTarget");
static_assert(offsetof(GBLuaAIPackage_SetSearchTarget, InAIController) == 0x000000, "Member 'GBLuaAIPackage_SetSearchTarget::InAIController' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSearchTarget, InTargetLocation) == 0x000048, "Member 'GBLuaAIPackage_SetSearchTarget::InTargetLocation' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSearchTarget, InSearchTime) == 0x000090, "Member 'GBLuaAIPackage_SetSearchTarget::InSearchTime' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.SetSquadOrders
// 0x0168 (0x0168 - 0x0000)
struct GBLuaAIPackage_SetSquadOrders final
{
public:
	struct FLuaValue                              InControllerClass;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSquadId;                                         // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSquadOrders;                                     // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_SetSquadOrders) == 0x000008, "Wrong alignment on GBLuaAIPackage_SetSquadOrders");
static_assert(sizeof(GBLuaAIPackage_SetSquadOrders) == 0x000168, "Wrong size on GBLuaAIPackage_SetSquadOrders");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrders, InControllerClass) == 0x000000, "Member 'GBLuaAIPackage_SetSquadOrders::InControllerClass' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrders, InTag) == 0x000048, "Member 'GBLuaAIPackage_SetSquadOrders::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrders, InTeamId) == 0x000090, "Member 'GBLuaAIPackage_SetSquadOrders::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrders, InSquadId) == 0x0000D8, "Member 'GBLuaAIPackage_SetSquadOrders::InSquadId' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrders, InSquadOrders) == 0x000120, "Member 'GBLuaAIPackage_SetSquadOrders::InSquadOrders' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.SetSquadOrdersForAIController
// 0x0090 (0x0090 - 0x0000)
struct GBLuaAIPackage_SetSquadOrdersForAIController final
{
public:
	struct FLuaValue                              InAIController;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSquadOrders;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_SetSquadOrdersForAIController) == 0x000008, "Wrong alignment on GBLuaAIPackage_SetSquadOrdersForAIController");
static_assert(sizeof(GBLuaAIPackage_SetSquadOrdersForAIController) == 0x000090, "Wrong size on GBLuaAIPackage_SetSquadOrdersForAIController");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrdersForAIController, InAIController) == 0x000000, "Member 'GBLuaAIPackage_SetSquadOrdersForAIController::InAIController' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadOrdersForAIController, InSquadOrders) == 0x000048, "Member 'GBLuaAIPackage_SetSquadOrdersForAIController::InSquadOrders' has a wrong offset!");

// Function GroundBranch.GBLuaAIPackage.SetSquadSearchTarget
// 0x01B0 (0x01B0 - 0x0000)
struct GBLuaAIPackage_SetSquadSearchTarget final
{
public:
	struct FLuaValue                              InControllerClass;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSquadId;                                         // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTargetLocation;                                  // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSearchTime;                                      // 0x0168(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaAIPackage_SetSquadSearchTarget) == 0x000008, "Wrong alignment on GBLuaAIPackage_SetSquadSearchTarget");
static_assert(sizeof(GBLuaAIPackage_SetSquadSearchTarget) == 0x0001B0, "Wrong size on GBLuaAIPackage_SetSquadSearchTarget");
static_assert(offsetof(GBLuaAIPackage_SetSquadSearchTarget, InControllerClass) == 0x000000, "Member 'GBLuaAIPackage_SetSquadSearchTarget::InControllerClass' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadSearchTarget, InTag) == 0x000048, "Member 'GBLuaAIPackage_SetSquadSearchTarget::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadSearchTarget, InTeamId) == 0x000090, "Member 'GBLuaAIPackage_SetSquadSearchTarget::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadSearchTarget, InSquadId) == 0x0000D8, "Member 'GBLuaAIPackage_SetSquadSearchTarget::InSquadId' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadSearchTarget, InTargetLocation) == 0x000120, "Member 'GBLuaAIPackage_SetSquadSearchTarget::InTargetLocation' has a wrong offset!");
static_assert(offsetof(GBLuaAIPackage_SetSquadSearchTarget, InSearchTime) == 0x000168, "Member 'GBLuaAIPackage_SetSquadSearchTarget::InSearchTime' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.BalanceTeams
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_BalanceTeams final
{
public:
	struct FLuaValue                              InAttackingTeamId;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDefendingTeamId;                                 // 0x0048(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InIdealTeamSizeDifference;                         // 0x0090(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAutoBalanceType;                                 // 0x00D8(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_BalanceTeams) == 0x000008, "Wrong alignment on GBLuaGameModePackage_BalanceTeams");
static_assert(sizeof(GBLuaGameModePackage_BalanceTeams) == 0x000120, "Wrong size on GBLuaGameModePackage_BalanceTeams");
static_assert(offsetof(GBLuaGameModePackage_BalanceTeams, InAttackingTeamId) == 0x000000, "Member 'GBLuaGameModePackage_BalanceTeams::InAttackingTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_BalanceTeams, InDefendingTeamId) == 0x000048, "Member 'GBLuaGameModePackage_BalanceTeams::InDefendingTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_BalanceTeams, InIdealTeamSizeDifference) == 0x000090, "Member 'GBLuaGameModePackage_BalanceTeams::InIdealTeamSizeDifference' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_BalanceTeams, InAutoBalanceType) == 0x0000D8, "Member 'GBLuaGameModePackage_BalanceTeams::InAutoBalanceType' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.CreateBlackOut
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_CreateBlackOut final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              FadeIn;                                            // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_CreateBlackOut) == 0x000008, "Wrong alignment on GBLuaGameModePackage_CreateBlackOut");
static_assert(sizeof(GBLuaGameModePackage_CreateBlackOut) == 0x000090, "Wrong size on GBLuaGameModePackage_CreateBlackOut");
static_assert(offsetof(GBLuaGameModePackage_CreateBlackOut, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_CreateBlackOut::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_CreateBlackOut, FadeIn) == 0x000048, "Member 'GBLuaGameModePackage_CreateBlackOut::FadeIn' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.EnterPlayArea
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_EnterPlayArea final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_EnterPlayArea) == 0x000008, "Wrong alignment on GBLuaGameModePackage_EnterPlayArea");
static_assert(sizeof(GBLuaGameModePackage_EnterPlayArea) == 0x000048, "Wrong size on GBLuaGameModePackage_EnterPlayArea");
static_assert(offsetof(GBLuaGameModePackage_EnterPlayArea, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaGameModePackage_EnterPlayArea::InPlayerIdOrObject' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.EnterReadyRoom
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_EnterReadyRoom final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_EnterReadyRoom) == 0x000008, "Wrong alignment on GBLuaGameModePackage_EnterReadyRoom");
static_assert(sizeof(GBLuaGameModePackage_EnterReadyRoom) == 0x000048, "Wrong size on GBLuaGameModePackage_EnterReadyRoom");
static_assert(offsetof(GBLuaGameModePackage_EnterReadyRoom, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaGameModePackage_EnterReadyRoom::InPlayerIdOrObject' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetBestLateComerInsertionPoint
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetBestLateComerInsertionPoint final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetBestLateComerInsertionPoint) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetBestLateComerInsertionPoint");
static_assert(sizeof(GBLuaGameModePackage_GetBestLateComerInsertionPoint) == 0x000090, "Wrong size on GBLuaGameModePackage_GetBestLateComerInsertionPoint");
static_assert(offsetof(GBLuaGameModePackage_GetBestLateComerInsertionPoint, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaGameModePackage_GetBestLateComerInsertionPoint::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetBestLateComerInsertionPoint, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetBestLateComerInsertionPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetCurrentPlayingSequenceInfo
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetCurrentPlayingSequenceInfo final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetCurrentPlayingSequenceInfo) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetCurrentPlayingSequenceInfo");
static_assert(sizeof(GBLuaGameModePackage_GetCurrentPlayingSequenceInfo) == 0x000048, "Wrong size on GBLuaGameModePackage_GetCurrentPlayingSequenceInfo");
static_assert(offsetof(GBLuaGameModePackage_GetCurrentPlayingSequenceInfo, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetCurrentPlayingSequenceInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetExfilSequenceActors
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetExfilSequenceActors final
{
public:
	struct FLuaValue                              InExtractionPoint;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetExfilSequenceActors) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetExfilSequenceActors");
static_assert(sizeof(GBLuaGameModePackage_GetExfilSequenceActors) == 0x000090, "Wrong size on GBLuaGameModePackage_GetExfilSequenceActors");
static_assert(offsetof(GBLuaGameModePackage_GetExfilSequenceActors, InExtractionPoint) == 0x000000, "Member 'GBLuaGameModePackage_GetExfilSequenceActors::InExtractionPoint' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetExfilSequenceActors, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetExfilSequenceActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetGameStatValue
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetGameStatValue final
{
public:
	struct FLuaValue                              InGameStatKey;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetGameStatValue) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetGameStatValue");
static_assert(sizeof(GBLuaGameModePackage_GetGameStatValue) == 0x000090, "Wrong size on GBLuaGameModePackage_GetGameStatValue");
static_assert(offsetof(GBLuaGameModePackage_GetGameStatValue, InGameStatKey) == 0x000000, "Member 'GBLuaGameModePackage_GetGameStatValue::InGameStatKey' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetGameStatValue, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetGameStatValue::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetInfilSequenceActors
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetInfilSequenceActors final
{
public:
	struct FLuaValue                              InInsertionPoint;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetInfilSequenceActors) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetInfilSequenceActors");
static_assert(sizeof(GBLuaGameModePackage_GetInfilSequenceActors) == 0x000090, "Wrong size on GBLuaGameModePackage_GetInfilSequenceActors");
static_assert(offsetof(GBLuaGameModePackage_GetInfilSequenceActors, InInsertionPoint) == 0x000000, "Member 'GBLuaGameModePackage_GetInfilSequenceActors::InInsertionPoint' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetInfilSequenceActors, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetInfilSequenceActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetMainSequenceActors
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetMainSequenceActors final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetMainSequenceActors) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetMainSequenceActors");
static_assert(sizeof(GBLuaGameModePackage_GetMainSequenceActors) == 0x000048, "Wrong size on GBLuaGameModePackage_GetMainSequenceActors");
static_assert(offsetof(GBLuaGameModePackage_GetMainSequenceActors, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetMainSequenceActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetMissionCompletionFraction
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetMissionCompletionFraction final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetMissionCompletionFraction) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetMissionCompletionFraction");
static_assert(sizeof(GBLuaGameModePackage_GetMissionCompletionFraction) == 0x000048, "Wrong size on GBLuaGameModePackage_GetMissionCompletionFraction");
static_assert(offsetof(GBLuaGameModePackage_GetMissionCompletionFraction, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetMissionCompletionFraction::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetSearchablePropType
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetSearchablePropType final
{
public:
	struct FLuaValue                              InSearchableProp;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetSearchablePropType) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetSearchablePropType");
static_assert(sizeof(GBLuaGameModePackage_GetSearchablePropType) == 0x000090, "Wrong size on GBLuaGameModePackage_GetSearchablePropType");
static_assert(offsetof(GBLuaGameModePackage_GetSearchablePropType, InSearchableProp) == 0x000000, "Member 'GBLuaGameModePackage_GetSearchablePropType::InSearchableProp' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetSearchablePropType, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetSearchablePropType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetSearchablePropYieldsIntel
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetSearchablePropYieldsIntel final
{
public:
	struct FLuaValue                              InSearchableProp;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetSearchablePropYieldsIntel) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetSearchablePropYieldsIntel");
static_assert(sizeof(GBLuaGameModePackage_GetSearchablePropYieldsIntel) == 0x000090, "Wrong size on GBLuaGameModePackage_GetSearchablePropYieldsIntel");
static_assert(offsetof(GBLuaGameModePackage_GetSearchablePropYieldsIntel, InSearchableProp) == 0x000000, "Member 'GBLuaGameModePackage_GetSearchablePropYieldsIntel::InSearchableProp' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetSearchablePropYieldsIntel, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetSearchablePropYieldsIntel::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.IsSequencePlaying
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_IsSequencePlaying final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_IsSequencePlaying) == 0x000008, "Wrong alignment on GBLuaGameModePackage_IsSequencePlaying");
static_assert(sizeof(GBLuaGameModePackage_IsSequencePlaying) == 0x000048, "Wrong size on GBLuaGameModePackage_IsSequencePlaying");
static_assert(offsetof(GBLuaGameModePackage_IsSequencePlaying, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_IsSequencePlaying::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.NotifyMissionSettingValueChanged
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_NotifyMissionSettingValueChanged final
{
public:
	struct FLuaValue                              InSettingName;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_NotifyMissionSettingValueChanged) == 0x000008, "Wrong alignment on GBLuaGameModePackage_NotifyMissionSettingValueChanged");
static_assert(sizeof(GBLuaGameModePackage_NotifyMissionSettingValueChanged) == 0x000048, "Wrong size on GBLuaGameModePackage_NotifyMissionSettingValueChanged");
static_assert(offsetof(GBLuaGameModePackage_NotifyMissionSettingValueChanged, InSettingName) == 0x000000, "Member 'GBLuaGameModePackage_NotifyMissionSettingValueChanged::InSettingName' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.NotifyObjectiveStatusUpdate
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_NotifyObjectiveStatusUpdate final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMissionObjectiveActor;                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InStatusUpdateType;                                // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFloatParam;                                      // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_NotifyObjectiveStatusUpdate) == 0x000008, "Wrong alignment on GBLuaGameModePackage_NotifyObjectiveStatusUpdate");
static_assert(sizeof(GBLuaGameModePackage_NotifyObjectiveStatusUpdate) == 0x000120, "Wrong size on GBLuaGameModePackage_NotifyObjectiveStatusUpdate");
static_assert(offsetof(GBLuaGameModePackage_NotifyObjectiveStatusUpdate, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_NotifyObjectiveStatusUpdate::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_NotifyObjectiveStatusUpdate, InMissionObjectiveActor) == 0x000048, "Member 'GBLuaGameModePackage_NotifyObjectiveStatusUpdate::InMissionObjectiveActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_NotifyObjectiveStatusUpdate, InStatusUpdateType) == 0x000090, "Member 'GBLuaGameModePackage_NotifyObjectiveStatusUpdate::InStatusUpdateType' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_NotifyObjectiveStatusUpdate, InFloatParam) == 0x0000D8, "Member 'GBLuaGameModePackage_NotifyObjectiveStatusUpdate::InFloatParam' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.PrepLatecomer
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_PrepLatecomer final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_PrepLatecomer) == 0x000008, "Wrong alignment on GBLuaGameModePackage_PrepLatecomer");
static_assert(sizeof(GBLuaGameModePackage_PrepLatecomer) == 0x000090, "Wrong size on GBLuaGameModePackage_PrepLatecomer");
static_assert(offsetof(GBLuaGameModePackage_PrepLatecomer, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaGameModePackage_PrepLatecomer::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_PrepLatecomer, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_PrepLatecomer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.RemoveBlackOut
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_RemoveBlackOut final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              FadeOut;                                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_RemoveBlackOut) == 0x000008, "Wrong alignment on GBLuaGameModePackage_RemoveBlackOut");
static_assert(sizeof(GBLuaGameModePackage_RemoveBlackOut) == 0x000090, "Wrong size on GBLuaGameModePackage_RemoveBlackOut");
static_assert(offsetof(GBLuaGameModePackage_RemoveBlackOut, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_RemoveBlackOut::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_RemoveBlackOut, FadeOut) == 0x000048, "Member 'GBLuaGameModePackage_RemoveBlackOut::FadeOut' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.ResetBalanceTeams
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_ResetBalanceTeams final
{
public:
	struct FLuaValue                              NewNumberOfMovementsToTrack;                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              NewAutoBalanceLightTouchSetting;                   // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_ResetBalanceTeams) == 0x000008, "Wrong alignment on GBLuaGameModePackage_ResetBalanceTeams");
static_assert(sizeof(GBLuaGameModePackage_ResetBalanceTeams) == 0x000090, "Wrong size on GBLuaGameModePackage_ResetBalanceTeams");
static_assert(offsetof(GBLuaGameModePackage_ResetBalanceTeams, NewNumberOfMovementsToTrack) == 0x000000, "Member 'GBLuaGameModePackage_ResetBalanceTeams::NewNumberOfMovementsToTrack' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_ResetBalanceTeams, NewAutoBalanceLightTouchSetting) == 0x000048, "Member 'GBLuaGameModePackage_ResetBalanceTeams::NewAutoBalanceLightTouchSetting' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetMissionSettingValue
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_SetMissionSettingValue final
{
public:
	struct FLuaValue                              SettingName;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              SettingValue;                                      // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetMissionSettingValue) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetMissionSettingValue");
static_assert(sizeof(GBLuaGameModePackage_SetMissionSettingValue) == 0x000090, "Wrong size on GBLuaGameModePackage_SetMissionSettingValue");
static_assert(offsetof(GBLuaGameModePackage_SetMissionSettingValue, SettingName) == 0x000000, "Member 'GBLuaGameModePackage_SetMissionSettingValue::SettingName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetMissionSettingValue, SettingValue) == 0x000048, "Member 'GBLuaGameModePackage_SetMissionSettingValue::SettingValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetObjectiveStatus
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_SetObjectiveStatus final
{
public:
	struct FLuaValue                              InMissionObjectiveActor;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewObjectiveStatus;                              // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetObjectiveStatus) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetObjectiveStatus");
static_assert(sizeof(GBLuaGameModePackage_SetObjectiveStatus) == 0x000090, "Wrong size on GBLuaGameModePackage_SetObjectiveStatus");
static_assert(offsetof(GBLuaGameModePackage_SetObjectiveStatus, InMissionObjectiveActor) == 0x000000, "Member 'GBLuaGameModePackage_SetObjectiveStatus::InMissionObjectiveActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetObjectiveStatus, InNewObjectiveStatus) == 0x000048, "Member 'GBLuaGameModePackage_SetObjectiveStatus::InNewObjectiveStatus' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetSearchablePropYieldsIntel
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_SetSearchablePropYieldsIntel final
{
public:
	struct FLuaValue                              InSearchableProp;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              NewYieldsIntel;                                    // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetSearchablePropYieldsIntel) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetSearchablePropYieldsIntel");
static_assert(sizeof(GBLuaGameModePackage_SetSearchablePropYieldsIntel) == 0x000090, "Wrong size on GBLuaGameModePackage_SetSearchablePropYieldsIntel");
static_assert(offsetof(GBLuaGameModePackage_SetSearchablePropYieldsIntel, InSearchableProp) == 0x000000, "Member 'GBLuaGameModePackage_SetSearchablePropYieldsIntel::InSearchableProp' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetSearchablePropYieldsIntel, NewYieldsIntel) == 0x000048, "Member 'GBLuaGameModePackage_SetSearchablePropYieldsIntel::NewYieldsIntel' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.StopCurrentSequencePlayback
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_StopCurrentSequencePlayback final
{
public:
	struct FLuaValue                              SuppressBlackOutAfter;                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_StopCurrentSequencePlayback) == 0x000008, "Wrong alignment on GBLuaGameModePackage_StopCurrentSequencePlayback");
static_assert(sizeof(GBLuaGameModePackage_StopCurrentSequencePlayback) == 0x000048, "Wrong size on GBLuaGameModePackage_StopCurrentSequencePlayback");
static_assert(offsetof(GBLuaGameModePackage_StopCurrentSequencePlayback, SuppressBlackOutAfter) == 0x000000, "Member 'GBLuaGameModePackage_StopCurrentSequencePlayback::SuppressBlackOutAfter' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.TriggerLevelSequenceActor
// 0x01F8 (0x01F8 - 0x0000)
struct GBLuaGameModePackage_TriggerLevelSequenceActor final
{
public:
	struct FLuaValue                              InLevelSequenceActor;                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              IsCutscene;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              CanAbort;                                          // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ResetActors;                                       // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              HidePlayers;                                       // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              BlackOutAfter;                                     // 0x0168(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x01B0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_TriggerLevelSequenceActor) == 0x000008, "Wrong alignment on GBLuaGameModePackage_TriggerLevelSequenceActor");
static_assert(sizeof(GBLuaGameModePackage_TriggerLevelSequenceActor) == 0x0001F8, "Wrong size on GBLuaGameModePackage_TriggerLevelSequenceActor");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, InLevelSequenceActor) == 0x000000, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::InLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, IsCutscene) == 0x000048, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::IsCutscene' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, CanAbort) == 0x000090, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::CanAbort' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, ResetActors) == 0x0000D8, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::ResetActors' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, HidePlayers) == 0x000120, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::HidePlayers' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, BlackOutAfter) == 0x000168, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::BlackOutAfter' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_TriggerLevelSequenceActor, ReturnValue) == 0x0001B0, "Member 'GBLuaGameModePackage_TriggerLevelSequenceActor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AddBots
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_AddBots final
{
public:
	struct FLuaValue                              InCount;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AddBots) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AddBots");
static_assert(sizeof(GBLuaGameModePackage_AddBots) == 0x000090, "Wrong size on GBLuaGameModePackage_AddBots");
static_assert(offsetof(GBLuaGameModePackage_AddBots, InCount) == 0x000000, "Member 'GBLuaGameModePackage_AddBots::InCount' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddBots, InTeamId) == 0x000048, "Member 'GBLuaGameModePackage_AddBots::InTeamId' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AddGameObjective
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_AddGameObjective final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InName;                                            // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InObjectiveType;                                   // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AddGameObjective) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AddGameObjective");
static_assert(sizeof(GBLuaGameModePackage_AddGameObjective) == 0x0000D8, "Wrong size on GBLuaGameModePackage_AddGameObjective");
static_assert(offsetof(GBLuaGameModePackage_AddGameObjective, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_AddGameObjective::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddGameObjective, InName) == 0x000048, "Member 'GBLuaGameModePackage_AddGameObjective::InName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddGameObjective, InObjectiveType) == 0x000090, "Member 'GBLuaGameModePackage_AddGameObjective::InObjectiveType' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AddGameStat
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_AddGameStat final
{
public:
	struct FLuaValue                              InGameStat;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AddGameStat) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AddGameStat");
static_assert(sizeof(GBLuaGameModePackage_AddGameStat) == 0x000048, "Wrong size on GBLuaGameModePackage_AddGameStat");
static_assert(offsetof(GBLuaGameModePackage_AddGameStat, InGameStat) == 0x000000, "Member 'GBLuaGameModePackage_AddGameStat::InGameStat' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AddObjectiveMarker
// 0x01B0 (0x01B0 - 0x0000)
struct GBLuaGameModePackage_AddObjectiveMarker final
{
public:
	struct FLuaValue                              InLocation;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMarkerName;                                      // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMarkerType;                                      // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              Inactive;                                          // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0168(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AddObjectiveMarker) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AddObjectiveMarker");
static_assert(sizeof(GBLuaGameModePackage_AddObjectiveMarker) == 0x0001B0, "Wrong size on GBLuaGameModePackage_AddObjectiveMarker");
static_assert(offsetof(GBLuaGameModePackage_AddObjectiveMarker, InLocation) == 0x000000, "Member 'GBLuaGameModePackage_AddObjectiveMarker::InLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddObjectiveMarker, InTeamId) == 0x000048, "Member 'GBLuaGameModePackage_AddObjectiveMarker::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddObjectiveMarker, InMarkerName) == 0x000090, "Member 'GBLuaGameModePackage_AddObjectiveMarker::InMarkerName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddObjectiveMarker, InMarkerType) == 0x0000D8, "Member 'GBLuaGameModePackage_AddObjectiveMarker::InMarkerType' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddObjectiveMarker, Inactive) == 0x000120, "Member 'GBLuaGameModePackage_AddObjectiveMarker::Inactive' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddObjectiveMarker, ReturnValue) == 0x000168, "Member 'GBLuaGameModePackage_AddObjectiveMarker::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AddPlayerTeam
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_AddPlayerTeam final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamName;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InPlayerLoadoutName;                               // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AddPlayerTeam) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AddPlayerTeam");
static_assert(sizeof(GBLuaGameModePackage_AddPlayerTeam) == 0x0000D8, "Wrong size on GBLuaGameModePackage_AddPlayerTeam");
static_assert(offsetof(GBLuaGameModePackage_AddPlayerTeam, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_AddPlayerTeam::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddPlayerTeam, InTeamName) == 0x000048, "Member 'GBLuaGameModePackage_AddPlayerTeam::InTeamName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddPlayerTeam, InPlayerLoadoutName) == 0x000090, "Member 'GBLuaGameModePackage_AddPlayerTeam::InPlayerLoadoutName' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AddSearchLocation
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_AddSearchLocation final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InName;                                            // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InObjectiveType;                                   // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AddSearchLocation) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AddSearchLocation");
static_assert(sizeof(GBLuaGameModePackage_AddSearchLocation) == 0x0000D8, "Wrong size on GBLuaGameModePackage_AddSearchLocation");
static_assert(offsetof(GBLuaGameModePackage_AddSearchLocation, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_AddSearchLocation::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddSearchLocation, InName) == 0x000048, "Member 'GBLuaGameModePackage_AddSearchLocation::InName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AddSearchLocation, InObjectiveType) == 0x000090, "Member 'GBLuaGameModePackage_AddSearchLocation::InObjectiveType' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.AwardTeamScore
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_AwardTeamScore final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InScoreName;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InScoreMultiple;                                   // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_AwardTeamScore) == 0x000008, "Wrong alignment on GBLuaGameModePackage_AwardTeamScore");
static_assert(sizeof(GBLuaGameModePackage_AwardTeamScore) == 0x0000D8, "Wrong size on GBLuaGameModePackage_AwardTeamScore");
static_assert(offsetof(GBLuaGameModePackage_AwardTeamScore, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_AwardTeamScore::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AwardTeamScore, InScoreName) == 0x000048, "Member 'GBLuaGameModePackage_AwardTeamScore::InScoreName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_AwardTeamScore, InScoreMultiple) == 0x000090, "Member 'GBLuaGameModePackage_AwardTeamScore::InScoreMultiple' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.BroadcastGameMessage
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_BroadcastGameMessage final
{
public:
	struct FLuaValue                              InGameMessageId;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InType;                                            // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDuration;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_BroadcastGameMessage) == 0x000008, "Wrong alignment on GBLuaGameModePackage_BroadcastGameMessage");
static_assert(sizeof(GBLuaGameModePackage_BroadcastGameMessage) == 0x0000D8, "Wrong size on GBLuaGameModePackage_BroadcastGameMessage");
static_assert(offsetof(GBLuaGameModePackage_BroadcastGameMessage, InGameMessageId) == 0x000000, "Member 'GBLuaGameModePackage_BroadcastGameMessage::InGameMessageId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_BroadcastGameMessage, InType) == 0x000048, "Member 'GBLuaGameModePackage_BroadcastGameMessage::InType' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_BroadcastGameMessage, InDuration) == 0x000090, "Member 'GBLuaGameModePackage_BroadcastGameMessage::InDuration' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.FormatString
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_FormatString final
{
public:
	struct FLuaValue                              InFormatTable;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_FormatString) == 0x000008, "Wrong alignment on GBLuaGameModePackage_FormatString");
static_assert(sizeof(GBLuaGameModePackage_FormatString) == 0x000090, "Wrong size on GBLuaGameModePackage_FormatString");
static_assert(offsetof(GBLuaGameModePackage_FormatString, InFormatTable) == 0x000000, "Member 'GBLuaGameModePackage_FormatString::InFormatTable' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_FormatString, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_FormatString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.FreezeBots
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_FreezeBots final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_FreezeBots) == 0x000008, "Wrong alignment on GBLuaGameModePackage_FreezeBots");
static_assert(sizeof(GBLuaGameModePackage_FreezeBots) == 0x000048, "Wrong size on GBLuaGameModePackage_FreezeBots");
static_assert(offsetof(GBLuaGameModePackage_FreezeBots, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_FreezeBots::InTeamId' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetCurrentMissionTags
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetCurrentMissionTags final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetCurrentMissionTags) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetCurrentMissionTags");
static_assert(sizeof(GBLuaGameModePackage_GetCurrentMissionTags) == 0x000048, "Wrong size on GBLuaGameModePackage_GetCurrentMissionTags");
static_assert(offsetof(GBLuaGameModePackage_GetCurrentMissionTags, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetCurrentMissionTags::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetInsertionPointName
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetInsertionPointName final
{
public:
	struct FLuaValue                              InInsertionPoint;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetInsertionPointName) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetInsertionPointName");
static_assert(sizeof(GBLuaGameModePackage_GetInsertionPointName) == 0x000090, "Wrong size on GBLuaGameModePackage_GetInsertionPointName");
static_assert(offsetof(GBLuaGameModePackage_GetInsertionPointName, InInsertionPoint) == 0x000000, "Member 'GBLuaGameModePackage_GetInsertionPointName::InInsertionPoint' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetInsertionPointName, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetInsertionPointName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetObjectiveInfo
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetObjectiveInfo final
{
public:
	struct FLuaValue                              InMissionObjectiveActor;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetObjectiveInfo) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetObjectiveInfo");
static_assert(sizeof(GBLuaGameModePackage_GetObjectiveInfo) == 0x000090, "Wrong size on GBLuaGameModePackage_GetObjectiveInfo");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveInfo, InMissionObjectiveActor) == 0x000000, "Member 'GBLuaGameModePackage_GetObjectiveInfo::InMissionObjectiveActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveInfo, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetObjectiveInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetObjectiveScript
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetObjectiveScript final
{
public:
	struct FLuaValue                              InMissionObjectiveActor;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetObjectiveScript) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetObjectiveScript");
static_assert(sizeof(GBLuaGameModePackage_GetObjectiveScript) == 0x000090, "Wrong size on GBLuaGameModePackage_GetObjectiveScript");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveScript, InMissionObjectiveActor) == 0x000000, "Member 'GBLuaGameModePackage_GetObjectiveScript::InMissionObjectiveActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveScript, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetObjectiveScript::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetObjectiveStatus
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetObjectiveStatus final
{
public:
	struct FLuaValue                              InMissionObjectiveActor;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetObjectiveStatus) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetObjectiveStatus");
static_assert(sizeof(GBLuaGameModePackage_GetObjectiveStatus) == 0x000090, "Wrong size on GBLuaGameModePackage_GetObjectiveStatus");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveStatus, InMissionObjectiveActor) == 0x000000, "Member 'GBLuaGameModePackage_GetObjectiveStatus::InMissionObjectiveActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveStatus, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetObjectiveStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetObjectiveStatusAsName
// 0x000C (0x000C - 0x0000)
struct GBLuaGameModePackage_GetObjectiveStatusAsName final
{
public:
	EGBMissionObjectiveStatus                     ObjectiveStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetObjectiveStatusAsName) == 0x000004, "Wrong alignment on GBLuaGameModePackage_GetObjectiveStatusAsName");
static_assert(sizeof(GBLuaGameModePackage_GetObjectiveStatusAsName) == 0x00000C, "Wrong size on GBLuaGameModePackage_GetObjectiveStatusAsName");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveStatusAsName, ObjectiveStatus) == 0x000000, "Member 'GBLuaGameModePackage_GetObjectiveStatusAsName::ObjectiveStatus' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetObjectiveStatusAsName, ReturnValue) == 0x000004, "Member 'GBLuaGameModePackage_GetObjectiveStatusAsName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetPlayerCount
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetPlayerCount final
{
public:
	struct FLuaValue                              InExcludeBots;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetPlayerCount) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetPlayerCount");
static_assert(sizeof(GBLuaGameModePackage_GetPlayerCount) == 0x000090, "Wrong size on GBLuaGameModePackage_GetPlayerCount");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerCount, InExcludeBots) == 0x000000, "Member 'GBLuaGameModePackage_GetPlayerCount::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerCount, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetPlayerList
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_GetPlayerList final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InExcludeBots;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetPlayerList) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetPlayerList");
static_assert(sizeof(GBLuaGameModePackage_GetPlayerList) == 0x0000D8, "Wrong size on GBLuaGameModePackage_GetPlayerList");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerList, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_GetPlayerList::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerList, InExcludeBots) == 0x000048, "Member 'GBLuaGameModePackage_GetPlayerList::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerList, ReturnValue) == 0x000090, "Member 'GBLuaGameModePackage_GetPlayerList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetPlayerListByLives
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_GetPlayerListByLives final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMinLives;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InExcludeBots;                                     // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetPlayerListByLives) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetPlayerListByLives");
static_assert(sizeof(GBLuaGameModePackage_GetPlayerListByLives) == 0x000120, "Wrong size on GBLuaGameModePackage_GetPlayerListByLives");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByLives, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_GetPlayerListByLives::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByLives, InMinLives) == 0x000048, "Member 'GBLuaGameModePackage_GetPlayerListByLives::InMinLives' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByLives, InExcludeBots) == 0x000090, "Member 'GBLuaGameModePackage_GetPlayerListByLives::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByLives, ReturnValue) == 0x0000D8, "Member 'GBLuaGameModePackage_GetPlayerListByLives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetPlayerListByStatus
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_GetPlayerListByStatus final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InReadyStatus;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InExcludeBots;                                     // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetPlayerListByStatus) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetPlayerListByStatus");
static_assert(sizeof(GBLuaGameModePackage_GetPlayerListByStatus) == 0x000120, "Wrong size on GBLuaGameModePackage_GetPlayerListByStatus");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByStatus, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_GetPlayerListByStatus::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByStatus, InReadyStatus) == 0x000048, "Member 'GBLuaGameModePackage_GetPlayerListByStatus::InReadyStatus' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByStatus, InExcludeBots) == 0x000090, "Member 'GBLuaGameModePackage_GetPlayerListByStatus::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetPlayerListByStatus, ReturnValue) == 0x0000D8, "Member 'GBLuaGameModePackage_GetPlayerListByStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetReadyPlayerTeamCounts
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetReadyPlayerTeamCounts final
{
public:
	struct FLuaValue                              InExcludeBots;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetReadyPlayerTeamCounts) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetReadyPlayerTeamCounts");
static_assert(sizeof(GBLuaGameModePackage_GetReadyPlayerTeamCounts) == 0x000090, "Wrong size on GBLuaGameModePackage_GetReadyPlayerTeamCounts");
static_assert(offsetof(GBLuaGameModePackage_GetReadyPlayerTeamCounts, InExcludeBots) == 0x000000, "Member 'GBLuaGameModePackage_GetReadyPlayerTeamCounts::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetReadyPlayerTeamCounts, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetReadyPlayerTeamCounts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetRoundStage
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetRoundStage final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetRoundStage) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetRoundStage");
static_assert(sizeof(GBLuaGameModePackage_GetRoundStage) == 0x000048, "Wrong size on GBLuaGameModePackage_GetRoundStage");
static_assert(offsetof(GBLuaGameModePackage_GetRoundStage, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetRoundStage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetRoundStageTime
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetRoundStageTime final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetRoundStageTime) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetRoundStageTime");
static_assert(sizeof(GBLuaGameModePackage_GetRoundStageTime) == 0x000048, "Wrong size on GBLuaGameModePackage_GetRoundStageTime");
static_assert(offsetof(GBLuaGameModePackage_GetRoundStageTime, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetRoundStageTime::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetScript
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetScript final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetScript) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetScript");
static_assert(sizeof(GBLuaGameModePackage_GetScript) == 0x000048, "Wrong size on GBLuaGameModePackage_GetScript");
static_assert(offsetof(GBLuaGameModePackage_GetScript, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetScript::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetSpawnProtectionVolumeHasNoImmunity
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity final
{
public:
	struct FLuaValue                              InSpawnProtectionVolume;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity");
static_assert(sizeof(GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity) == 0x000090, "Wrong size on GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity");
static_assert(offsetof(GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity, InSpawnProtectionVolume) == 0x000000, "Member 'GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity::InSpawnProtectionVolume' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity, ReturnValue) == 0x000048, "Member 'GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetTimeOfDay
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_GetTimeOfDay final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetTimeOfDay) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetTimeOfDay");
static_assert(sizeof(GBLuaGameModePackage_GetTimeOfDay) == 0x000048, "Wrong size on GBLuaGameModePackage_GetTimeOfDay");
static_assert(offsetof(GBLuaGameModePackage_GetTimeOfDay, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_GetTimeOfDay::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetVolunteerList
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_GetVolunteerList final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InExcludeBots;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetVolunteerList) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetVolunteerList");
static_assert(sizeof(GBLuaGameModePackage_GetVolunteerList) == 0x0000D8, "Wrong size on GBLuaGameModePackage_GetVolunteerList");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerList, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_GetVolunteerList::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerList, InExcludeBots) == 0x000048, "Member 'GBLuaGameModePackage_GetVolunteerList::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerList, ReturnValue) == 0x000090, "Member 'GBLuaGameModePackage_GetVolunteerList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetVolunteerListByLives
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_GetVolunteerListByLives final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMinLives;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InExcludeBots;                                     // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetVolunteerListByLives) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetVolunteerListByLives");
static_assert(sizeof(GBLuaGameModePackage_GetVolunteerListByLives) == 0x000120, "Wrong size on GBLuaGameModePackage_GetVolunteerListByLives");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByLives, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_GetVolunteerListByLives::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByLives, InMinLives) == 0x000048, "Member 'GBLuaGameModePackage_GetVolunteerListByLives::InMinLives' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByLives, InExcludeBots) == 0x000090, "Member 'GBLuaGameModePackage_GetVolunteerListByLives::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByLives, ReturnValue) == 0x0000D8, "Member 'GBLuaGameModePackage_GetVolunteerListByLives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.GetVolunteerListByStatus
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_GetVolunteerListByStatus final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InReadyStatus;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InExcludeBots;                                     // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_GetVolunteerListByStatus) == 0x000008, "Wrong alignment on GBLuaGameModePackage_GetVolunteerListByStatus");
static_assert(sizeof(GBLuaGameModePackage_GetVolunteerListByStatus) == 0x000120, "Wrong size on GBLuaGameModePackage_GetVolunteerListByStatus");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByStatus, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_GetVolunteerListByStatus::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByStatus, InReadyStatus) == 0x000048, "Member 'GBLuaGameModePackage_GetVolunteerListByStatus::InReadyStatus' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByStatus, InExcludeBots) == 0x000090, "Member 'GBLuaGameModePackage_GetVolunteerListByStatus::InExcludeBots' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_GetVolunteerListByStatus, ReturnValue) == 0x0000D8, "Member 'GBLuaGameModePackage_GetVolunteerListByStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.IsEditingMission
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_IsEditingMission final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_IsEditingMission) == 0x000008, "Wrong alignment on GBLuaGameModePackage_IsEditingMission");
static_assert(sizeof(GBLuaGameModePackage_IsEditingMission) == 0x000048, "Wrong size on GBLuaGameModePackage_IsEditingMission");
static_assert(offsetof(GBLuaGameModePackage_IsEditingMission, ReturnValue) == 0x000000, "Member 'GBLuaGameModePackage_IsEditingMission::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.RemoveBots
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_RemoveBots final
{
public:
	struct FLuaValue                              InCount;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTeamId;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_RemoveBots) == 0x000008, "Wrong alignment on GBLuaGameModePackage_RemoveBots");
static_assert(sizeof(GBLuaGameModePackage_RemoveBots) == 0x000090, "Wrong size on GBLuaGameModePackage_RemoveBots");
static_assert(offsetof(GBLuaGameModePackage_RemoveBots, InCount) == 0x000000, "Member 'GBLuaGameModePackage_RemoveBots::InCount' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_RemoveBots, InTeamId) == 0x000048, "Member 'GBLuaGameModePackage_RemoveBots::InTeamId' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SendMessageToPlayerById
// 0x0018 (0x0018 - 0x0000)
struct GBLuaGameModePackage_SendMessageToPlayerById final
{
public:
	int32                                         InPlayerId;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMessage;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMessageType;                                     // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMessageDuration;                                 // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SendMessageToPlayerById) == 0x000004, "Wrong alignment on GBLuaGameModePackage_SendMessageToPlayerById");
static_assert(sizeof(GBLuaGameModePackage_SendMessageToPlayerById) == 0x000018, "Wrong size on GBLuaGameModePackage_SendMessageToPlayerById");
static_assert(offsetof(GBLuaGameModePackage_SendMessageToPlayerById, InPlayerId) == 0x000000, "Member 'GBLuaGameModePackage_SendMessageToPlayerById::InPlayerId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SendMessageToPlayerById, InMessage) == 0x000004, "Member 'GBLuaGameModePackage_SendMessageToPlayerById::InMessage' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SendMessageToPlayerById, InMessageType) == 0x00000C, "Member 'GBLuaGameModePackage_SendMessageToPlayerById::InMessageType' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SendMessageToPlayerById, InMessageDuration) == 0x000014, "Member 'GBLuaGameModePackage_SendMessageToPlayerById::InMessageDuration' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetCaptureState
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetCaptureState final
{
public:
	struct FLuaValue                              IsCapturing;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetCaptureState) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetCaptureState");
static_assert(sizeof(GBLuaGameModePackage_SetCaptureState) == 0x000048, "Wrong size on GBLuaGameModePackage_SetCaptureState");
static_assert(offsetof(GBLuaGameModePackage_SetCaptureState, IsCapturing) == 0x000000, "Member 'GBLuaGameModePackage_SetCaptureState::IsCapturing' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetCaptureZone
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameModePackage_SetCaptureZone final
{
public:
	struct FLuaValue                              InCaptureRadius;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InCaptureHeight;                                   // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDefenderTeamId;                                  // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InZoneIsSpherical;                                 // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetCaptureZone) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetCaptureZone");
static_assert(sizeof(GBLuaGameModePackage_SetCaptureZone) == 0x000120, "Wrong size on GBLuaGameModePackage_SetCaptureZone");
static_assert(offsetof(GBLuaGameModePackage_SetCaptureZone, InCaptureRadius) == 0x000000, "Member 'GBLuaGameModePackage_SetCaptureZone::InCaptureRadius' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetCaptureZone, InCaptureHeight) == 0x000048, "Member 'GBLuaGameModePackage_SetCaptureZone::InCaptureHeight' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetCaptureZone, InDefenderTeamId) == 0x000090, "Member 'GBLuaGameModePackage_SetCaptureZone::InDefenderTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetCaptureZone, InZoneIsSpherical) == 0x0000D8, "Member 'GBLuaGameModePackage_SetCaptureZone::InZoneIsSpherical' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetDefaultRoundStageTime
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_SetDefaultRoundStageTime final
{
public:
	struct FLuaValue                              InRoundStageName;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewTimeLimit;                                    // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetDefaultRoundStageTime) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetDefaultRoundStageTime");
static_assert(sizeof(GBLuaGameModePackage_SetDefaultRoundStageTime) == 0x000090, "Wrong size on GBLuaGameModePackage_SetDefaultRoundStageTime");
static_assert(offsetof(GBLuaGameModePackage_SetDefaultRoundStageTime, InRoundStageName) == 0x000000, "Member 'GBLuaGameModePackage_SetDefaultRoundStageTime::InRoundStageName' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetDefaultRoundStageTime, InNewTimeLimit) == 0x000048, "Member 'GBLuaGameModePackage_SetDefaultRoundStageTime::InNewTimeLimit' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetGameModeName
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetGameModeName final
{
public:
	struct FLuaValue                              InGameModeName;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetGameModeName) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetGameModeName");
static_assert(sizeof(GBLuaGameModePackage_SetGameModeName) == 0x000048, "Wrong size on GBLuaGameModePackage_SetGameModeName");
static_assert(offsetof(GBLuaGameModePackage_SetGameModeName, InGameModeName) == 0x000000, "Member 'GBLuaGameModePackage_SetGameModeName::InGameModeName' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetObjectiveLocation
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetObjectiveLocation final
{
public:
	struct FLuaValue                              InObjectiveLocation;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetObjectiveLocation) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetObjectiveLocation");
static_assert(sizeof(GBLuaGameModePackage_SetObjectiveLocation) == 0x000048, "Wrong size on GBLuaGameModePackage_SetObjectiveLocation");
static_assert(offsetof(GBLuaGameModePackage_SetObjectiveLocation, InObjectiveLocation) == 0x000000, "Member 'GBLuaGameModePackage_SetObjectiveLocation::InObjectiveLocation' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetPlayerScoreTypes
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetPlayerScoreTypes final
{
public:
	struct FLuaValue                              InScoreTypeTable;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetPlayerScoreTypes) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetPlayerScoreTypes");
static_assert(sizeof(GBLuaGameModePackage_SetPlayerScoreTypes) == 0x000048, "Wrong size on GBLuaGameModePackage_SetPlayerScoreTypes");
static_assert(offsetof(GBLuaGameModePackage_SetPlayerScoreTypes, InScoreTypeTable) == 0x000000, "Member 'GBLuaGameModePackage_SetPlayerScoreTypes::InScoreTypeTable' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetPlayerTeamRole
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_SetPlayerTeamRole final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewRole;                                         // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetPlayerTeamRole) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetPlayerTeamRole");
static_assert(sizeof(GBLuaGameModePackage_SetPlayerTeamRole) == 0x000090, "Wrong size on GBLuaGameModePackage_SetPlayerTeamRole");
static_assert(offsetof(GBLuaGameModePackage_SetPlayerTeamRole, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_SetPlayerTeamRole::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetPlayerTeamRole, InNewRole) == 0x000048, "Member 'GBLuaGameModePackage_SetPlayerTeamRole::InNewRole' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetRoundIsTemporaryGameMode
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetRoundIsTemporaryGameMode final
{
public:
	struct FLuaValue                              IsTemporary;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetRoundIsTemporaryGameMode) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetRoundIsTemporaryGameMode");
static_assert(sizeof(GBLuaGameModePackage_SetRoundIsTemporaryGameMode) == 0x000048, "Wrong size on GBLuaGameModePackage_SetRoundIsTemporaryGameMode");
static_assert(offsetof(GBLuaGameModePackage_SetRoundIsTemporaryGameMode, IsTemporary) == 0x000000, "Member 'GBLuaGameModePackage_SetRoundIsTemporaryGameMode::IsTemporary' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetRoundStage
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetRoundStage final
{
public:
	struct FLuaValue                              InRoundStageName;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetRoundStage) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetRoundStage");
static_assert(sizeof(GBLuaGameModePackage_SetRoundStage) == 0x000048, "Wrong size on GBLuaGameModePackage_SetRoundStage");
static_assert(offsetof(GBLuaGameModePackage_SetRoundStage, InRoundStageName) == 0x000000, "Member 'GBLuaGameModePackage_SetRoundStage::InRoundStageName' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetRoundStageTime
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetRoundStageTime final
{
public:
	struct FLuaValue                              InRoundStageTime;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetRoundStageTime) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetRoundStageTime");
static_assert(sizeof(GBLuaGameModePackage_SetRoundStageTime) == 0x000048, "Wrong size on GBLuaGameModePackage_SetRoundStageTime");
static_assert(offsetof(GBLuaGameModePackage_SetRoundStageTime, InRoundStageTime) == 0x000000, "Member 'GBLuaGameModePackage_SetRoundStageTime::InRoundStageTime' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetTeamAttitude
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameModePackage_SetTeamAttitude final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InOtherTeamId;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAttitude;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetTeamAttitude) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetTeamAttitude");
static_assert(sizeof(GBLuaGameModePackage_SetTeamAttitude) == 0x0000D8, "Wrong size on GBLuaGameModePackage_SetTeamAttitude");
static_assert(offsetof(GBLuaGameModePackage_SetTeamAttitude, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_SetTeamAttitude::InTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetTeamAttitude, InOtherTeamId) == 0x000048, "Member 'GBLuaGameModePackage_SetTeamAttitude::InOtherTeamId' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetTeamAttitude, InAttitude) == 0x000090, "Member 'GBLuaGameModePackage_SetTeamAttitude::InAttitude' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetTeamScoreTypes
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_SetTeamScoreTypes final
{
public:
	struct FLuaValue                              InScoreTypeTable;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetTeamScoreTypes) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetTeamScoreTypes");
static_assert(sizeof(GBLuaGameModePackage_SetTeamScoreTypes) == 0x000048, "Wrong size on GBLuaGameModePackage_SetTeamScoreTypes");
static_assert(offsetof(GBLuaGameModePackage_SetTeamScoreTypes, InScoreTypeTable) == 0x000000, "Member 'GBLuaGameModePackage_SetTeamScoreTypes::InScoreTypeTable' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SetWatchMode
// 0x0168 (0x0168 - 0x0000)
struct GBLuaGameModePackage_SetWatchMode final
{
public:
	struct FLuaValue                              InWatchMode;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDisplayBearing;                                  // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDisplayDistance;                                 // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDisplayUpDown;                                   // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMeasure2D;                                       // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SetWatchMode) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SetWatchMode");
static_assert(sizeof(GBLuaGameModePackage_SetWatchMode) == 0x000168, "Wrong size on GBLuaGameModePackage_SetWatchMode");
static_assert(offsetof(GBLuaGameModePackage_SetWatchMode, InWatchMode) == 0x000000, "Member 'GBLuaGameModePackage_SetWatchMode::InWatchMode' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetWatchMode, InDisplayBearing) == 0x000048, "Member 'GBLuaGameModePackage_SetWatchMode::InDisplayBearing' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetWatchMode, InDisplayDistance) == 0x000090, "Member 'GBLuaGameModePackage_SetWatchMode::InDisplayDistance' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetWatchMode, InDisplayUpDown) == 0x0000D8, "Member 'GBLuaGameModePackage_SetWatchMode::InDisplayUpDown' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SetWatchMode, InMeasure2D) == 0x000120, "Member 'GBLuaGameModePackage_SetWatchMode::InMeasure2D' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.SpawnEffectAtLocation
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameModePackage_SpawnEffectAtLocation final
{
public:
	struct FLuaValue                              InEffectClass;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLocation;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_SpawnEffectAtLocation) == 0x000008, "Wrong alignment on GBLuaGameModePackage_SpawnEffectAtLocation");
static_assert(sizeof(GBLuaGameModePackage_SpawnEffectAtLocation) == 0x000090, "Wrong size on GBLuaGameModePackage_SpawnEffectAtLocation");
static_assert(offsetof(GBLuaGameModePackage_SpawnEffectAtLocation, InEffectClass) == 0x000000, "Member 'GBLuaGameModePackage_SpawnEffectAtLocation::InEffectClass' has a wrong offset!");
static_assert(offsetof(GBLuaGameModePackage_SpawnEffectAtLocation, InLocation) == 0x000048, "Member 'GBLuaGameModePackage_SpawnEffectAtLocation::InLocation' has a wrong offset!");

// Function GroundBranch.GBLuaGameModePackage.UnFreezeBots
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameModePackage_UnFreezeBots final
{
public:
	struct FLuaValue                              InTeamId;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameModePackage_UnFreezeBots) == 0x000008, "Wrong alignment on GBLuaGameModePackage_UnFreezeBots");
static_assert(sizeof(GBLuaGameModePackage_UnFreezeBots) == 0x000048, "Wrong size on GBLuaGameModePackage_UnFreezeBots");
static_assert(offsetof(GBLuaGameModePackage_UnFreezeBots, InTeamId) == 0x000000, "Member 'GBLuaGameModePackage_UnFreezeBots::InTeamId' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.DisplayDebugLine
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameplayStaticsPackage_DisplayDebugLine final
{
public:
	struct FLuaValue                              InStartLocation;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InEndLocation;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDuration;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_DisplayDebugLine) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_DisplayDebugLine");
static_assert(sizeof(GBLuaGameplayStaticsPackage_DisplayDebugLine) == 0x0000D8, "Wrong size on GBLuaGameplayStaticsPackage_DisplayDebugLine");
static_assert(offsetof(GBLuaGameplayStaticsPackage_DisplayDebugLine, InStartLocation) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_DisplayDebugLine::InStartLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_DisplayDebugLine, InEndLocation) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_DisplayDebugLine::InEndLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_DisplayDebugLine, InDuration) == 0x000090, "Member 'GBLuaGameplayStaticsPackage_DisplayDebugLine::InDuration' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.DisplayDebugSphere
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameplayStaticsPackage_DisplayDebugSphere final
{
public:
	struct FLuaValue                              InLocation;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InRadius;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDuration;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_DisplayDebugSphere) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_DisplayDebugSphere");
static_assert(sizeof(GBLuaGameplayStaticsPackage_DisplayDebugSphere) == 0x0000D8, "Wrong size on GBLuaGameplayStaticsPackage_DisplayDebugSphere");
static_assert(offsetof(GBLuaGameplayStaticsPackage_DisplayDebugSphere, InLocation) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_DisplayDebugSphere::InLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_DisplayDebugSphere, InRadius) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_DisplayDebugSphere::InRadius' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_DisplayDebugSphere, InDuration) == 0x000090, "Member 'GBLuaGameplayStaticsPackage_DisplayDebugSphere::InDuration' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.GetAllActorsOfClass
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameplayStaticsPackage_GetAllActorsOfClass final
{
public:
	struct FLuaValue                              InActorClass;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_GetAllActorsOfClass) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_GetAllActorsOfClass");
static_assert(sizeof(GBLuaGameplayStaticsPackage_GetAllActorsOfClass) == 0x000090, "Wrong size on GBLuaGameplayStaticsPackage_GetAllActorsOfClass");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsOfClass, InActorClass) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsOfClass::InActorClass' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsOfClass, ReturnValue) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsOfClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.GetAllActorsOfClassWithTag
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag final
{
public:
	struct FLuaValue                              InActorClass;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag");
static_assert(sizeof(GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag) == 0x0000D8, "Wrong size on GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag, InActorClass) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag::InActorClass' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag, InTag) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag, ReturnValue) == 0x000090, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.GetAllActorsWithTag
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameplayStaticsPackage_GetAllActorsWithTag final
{
public:
	struct FLuaValue                              InTag;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_GetAllActorsWithTag) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_GetAllActorsWithTag");
static_assert(sizeof(GBLuaGameplayStaticsPackage_GetAllActorsWithTag) == 0x000090, "Wrong size on GBLuaGameplayStaticsPackage_GetAllActorsWithTag");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsWithTag, InTag) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsWithTag::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetAllActorsWithTag, ReturnValue) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_GetAllActorsWithTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.GetNetMode
// 0x0048 (0x0048 - 0x0000)
struct GBLuaGameplayStaticsPackage_GetNetMode final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_GetNetMode) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_GetNetMode");
static_assert(sizeof(GBLuaGameplayStaticsPackage_GetNetMode) == 0x000048, "Wrong size on GBLuaGameplayStaticsPackage_GetNetMode");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetNetMode, ReturnValue) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_GetNetMode::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.GetPatrolRouteLinkedActors
// 0x0090 (0x0090 - 0x0000)
struct GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors final
{
public:
	struct FLuaValue                              InPatrolRouteActor;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors");
static_assert(sizeof(GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors) == 0x000090, "Wrong size on GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors, InPatrolRouteActor) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors::InPatrolRouteActor' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors, ReturnValue) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.GetValidatedSpawnLocation
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation final
{
public:
	struct FLuaValue                              InSpawnLocation;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InCapsuleHalfHeight;                               // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InCapsuleRadius;                                   // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation");
static_assert(sizeof(GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation) == 0x000120, "Wrong size on GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation, InSpawnLocation) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation, InCapsuleHalfHeight) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation::InCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation, InCapsuleRadius) == 0x000090, "Member 'GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation, ReturnValue) == 0x0000D8, "Member 'GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.PlaceItemAt
// 0x0120 (0x0120 - 0x0000)
struct GBLuaGameplayStaticsPackage_PlaceItemAt final
{
public:
	struct FLuaValue                              InItemClass;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLocation;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InRotation;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_PlaceItemAt) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_PlaceItemAt");
static_assert(sizeof(GBLuaGameplayStaticsPackage_PlaceItemAt) == 0x000120, "Wrong size on GBLuaGameplayStaticsPackage_PlaceItemAt");
static_assert(offsetof(GBLuaGameplayStaticsPackage_PlaceItemAt, InItemClass) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_PlaceItemAt::InItemClass' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_PlaceItemAt, InLocation) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_PlaceItemAt::InLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_PlaceItemAt, InRotation) == 0x000090, "Member 'GBLuaGameplayStaticsPackage_PlaceItemAt::InRotation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_PlaceItemAt, ReturnValue) == 0x0000D8, "Member 'GBLuaGameplayStaticsPackage_PlaceItemAt::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaGameplayStaticsPackage.TraceVisible
// 0x0168 (0x0168 - 0x0000)
struct GBLuaGameplayStaticsPackage_TraceVisible final
{
public:
	struct FLuaValue                              InStartLocation;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InEndLocation;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InIgnoreActors;                                    // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDebug;                                           // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0120(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaGameplayStaticsPackage_TraceVisible) == 0x000008, "Wrong alignment on GBLuaGameplayStaticsPackage_TraceVisible");
static_assert(sizeof(GBLuaGameplayStaticsPackage_TraceVisible) == 0x000168, "Wrong size on GBLuaGameplayStaticsPackage_TraceVisible");
static_assert(offsetof(GBLuaGameplayStaticsPackage_TraceVisible, InStartLocation) == 0x000000, "Member 'GBLuaGameplayStaticsPackage_TraceVisible::InStartLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_TraceVisible, InEndLocation) == 0x000048, "Member 'GBLuaGameplayStaticsPackage_TraceVisible::InEndLocation' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_TraceVisible, InIgnoreActors) == 0x000090, "Member 'GBLuaGameplayStaticsPackage_TraceVisible::InIgnoreActors' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_TraceVisible, InDebug) == 0x0000D8, "Member 'GBLuaGameplayStaticsPackage_TraceVisible::InDebug' has a wrong offset!");
static_assert(offsetof(GBLuaGameplayStaticsPackage_TraceVisible, ReturnValue) == 0x000120, "Member 'GBLuaGameplayStaticsPackage_TraceVisible::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaInterface.GetLuaTable
// 0x0048 (0x0048 - 0x0000)
struct GBLuaInterface_GetLuaTable final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInterface_GetLuaTable) == 0x000008, "Wrong alignment on GBLuaInterface_GetLuaTable");
static_assert(sizeof(GBLuaInterface_GetLuaTable) == 0x000048, "Wrong size on GBLuaInterface_GetLuaTable");
static_assert(offsetof(GBLuaInterface_GetLuaTable, ReturnValue) == 0x000000, "Member 'GBLuaInterface_GetLuaTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.AddCustomKitTableToLoadoutTable
// 0x0090 (0x0090 - 0x0000)
struct GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable final
{
public:
	struct FLuaValue                              InCustomKitTable;                                  // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLoadoutTable;                                    // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable");
static_assert(sizeof(GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable) == 0x000090, "Wrong size on GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable");
static_assert(offsetof(GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable, InCustomKitTable) == 0x000000, "Member 'GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable::InCustomKitTable' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable, InLoadoutTable) == 0x000048, "Member 'GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable::InLoadoutTable' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.CreateLoadoutFromTable
// 0x0120 (0x0120 - 0x0000)
struct GBLuaInventoryPackage_CreateLoadoutFromTable final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLoadoutName;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLoadoutTable;                                    // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSplitItemField;                                  // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_CreateLoadoutFromTable) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_CreateLoadoutFromTable");
static_assert(sizeof(GBLuaInventoryPackage_CreateLoadoutFromTable) == 0x000120, "Wrong size on GBLuaInventoryPackage_CreateLoadoutFromTable");
static_assert(offsetof(GBLuaInventoryPackage_CreateLoadoutFromTable, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaInventoryPackage_CreateLoadoutFromTable::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_CreateLoadoutFromTable, InLoadoutName) == 0x000048, "Member 'GBLuaInventoryPackage_CreateLoadoutFromTable::InLoadoutName' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_CreateLoadoutFromTable, InLoadoutTable) == 0x000090, "Member 'GBLuaInventoryPackage_CreateLoadoutFromTable::InLoadoutTable' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_CreateLoadoutFromTable, InSplitItemField) == 0x0000D8, "Member 'GBLuaInventoryPackage_CreateLoadoutFromTable::InSplitItemField' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.GetPlayerLoadoutAsTable
// 0x0120 (0x0120 - 0x0000)
struct GBLuaInventoryPackage_GetPlayerLoadoutAsTable final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              LoadoutName;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSplitItemField;                                  // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_GetPlayerLoadoutAsTable) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_GetPlayerLoadoutAsTable");
static_assert(sizeof(GBLuaInventoryPackage_GetPlayerLoadoutAsTable) == 0x000120, "Wrong size on GBLuaInventoryPackage_GetPlayerLoadoutAsTable");
static_assert(offsetof(GBLuaInventoryPackage_GetPlayerLoadoutAsTable, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaInventoryPackage_GetPlayerLoadoutAsTable::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetPlayerLoadoutAsTable, LoadoutName) == 0x000048, "Member 'GBLuaInventoryPackage_GetPlayerLoadoutAsTable::LoadoutName' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetPlayerLoadoutAsTable, InSplitItemField) == 0x000090, "Member 'GBLuaInventoryPackage_GetPlayerLoadoutAsTable::InSplitItemField' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetPlayerLoadoutAsTable, ReturnValue) == 0x0000D8, "Member 'GBLuaInventoryPackage_GetPlayerLoadoutAsTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.RemoveItemTypesFromLoadoutTable
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable final
{
public:
	struct FLuaValue                              InItemTypesToRemove;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLoadoutTable;                                    // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSplitItemField;                                  // 0x0090(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable");
static_assert(sizeof(GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable) == 0x0000D8, "Wrong size on GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable");
static_assert(offsetof(GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable, InItemTypesToRemove) == 0x000000, "Member 'GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable::InItemTypesToRemove' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable, InLoadoutTable) == 0x000048, "Member 'GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable::InLoadoutTable' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable, InSplitItemField) == 0x000090, "Member 'GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable::InSplitItemField' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.SetItemFieldFromTable
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaInventoryPackage_SetItemFieldFromTable final
{
public:
	struct FLuaValue                              LoadoutReferenceObject;                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ItemType;                                          // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              NewItemData;                                       // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_SetItemFieldFromTable) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_SetItemFieldFromTable");
static_assert(sizeof(GBLuaInventoryPackage_SetItemFieldFromTable) == 0x0000D8, "Wrong size on GBLuaInventoryPackage_SetItemFieldFromTable");
static_assert(offsetof(GBLuaInventoryPackage_SetItemFieldFromTable, LoadoutReferenceObject) == 0x000000, "Member 'GBLuaInventoryPackage_SetItemFieldFromTable::LoadoutReferenceObject' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_SetItemFieldFromTable, ItemType) == 0x000048, "Member 'GBLuaInventoryPackage_SetItemFieldFromTable::ItemType' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_SetItemFieldFromTable, NewItemData) == 0x000090, "Member 'GBLuaInventoryPackage_SetItemFieldFromTable::NewItemData' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.VerifyLoadoutExists
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaInventoryPackage_VerifyLoadoutExists final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLoadoutName;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_VerifyLoadoutExists) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_VerifyLoadoutExists");
static_assert(sizeof(GBLuaInventoryPackage_VerifyLoadoutExists) == 0x0000D8, "Wrong size on GBLuaInventoryPackage_VerifyLoadoutExists");
static_assert(offsetof(GBLuaInventoryPackage_VerifyLoadoutExists, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaInventoryPackage_VerifyLoadoutExists::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_VerifyLoadoutExists, InLoadoutName) == 0x000048, "Member 'GBLuaInventoryPackage_VerifyLoadoutExists::InLoadoutName' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_VerifyLoadoutExists, ReturnValue) == 0x000090, "Member 'GBLuaInventoryPackage_VerifyLoadoutExists::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.ClearItemField
// 0x0090 (0x0090 - 0x0000)
struct GBLuaInventoryPackage_ClearItemField final
{
public:
	struct FLuaValue                              InKitJsonObj;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InItemType;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_ClearItemField) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_ClearItemField");
static_assert(sizeof(GBLuaInventoryPackage_ClearItemField) == 0x000090, "Wrong size on GBLuaInventoryPackage_ClearItemField");
static_assert(offsetof(GBLuaInventoryPackage_ClearItemField, InKitJsonObj) == 0x000000, "Member 'GBLuaInventoryPackage_ClearItemField::InKitJsonObj' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_ClearItemField, InItemType) == 0x000048, "Member 'GBLuaInventoryPackage_ClearItemField::InItemType' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.GetCustomKitAsTable
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaInventoryPackage_GetCustomKitAsTable final
{
public:
	struct FLuaValue                              InKitFileName;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSplitItemField;                                  // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_GetCustomKitAsTable) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_GetCustomKitAsTable");
static_assert(sizeof(GBLuaInventoryPackage_GetCustomKitAsTable) == 0x0000D8, "Wrong size on GBLuaInventoryPackage_GetCustomKitAsTable");
static_assert(offsetof(GBLuaInventoryPackage_GetCustomKitAsTable, InKitFileName) == 0x000000, "Member 'GBLuaInventoryPackage_GetCustomKitAsTable::InKitFileName' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetCustomKitAsTable, InSplitItemField) == 0x000048, "Member 'GBLuaInventoryPackage_GetCustomKitAsTable::InSplitItemField' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetCustomKitAsTable, ReturnValue) == 0x000090, "Member 'GBLuaInventoryPackage_GetCustomKitAsTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.GetItemDisplayName
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaInventoryPackage_GetItemDisplayName final
{
public:
	struct FLuaValue                              InItemType;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InItemAssetPath;                                   // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_GetItemDisplayName) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_GetItemDisplayName");
static_assert(sizeof(GBLuaInventoryPackage_GetItemDisplayName) == 0x0000D8, "Wrong size on GBLuaInventoryPackage_GetItemDisplayName");
static_assert(offsetof(GBLuaInventoryPackage_GetItemDisplayName, InItemType) == 0x000000, "Member 'GBLuaInventoryPackage_GetItemDisplayName::InItemType' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetItemDisplayName, InItemAssetPath) == 0x000048, "Member 'GBLuaInventoryPackage_GetItemDisplayName::InItemAssetPath' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_GetItemDisplayName, ReturnValue) == 0x000090, "Member 'GBLuaInventoryPackage_GetItemDisplayName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaInventoryPackage.LimitSupplies
// 0x0168 (0x0168 - 0x0000)
struct GBLuaInventoryPackage_LimitSupplies final
{
public:
	struct FLuaValue                              InKitJsonObj;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFragsLimit;                                      // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InSmokesLimit;                                     // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFlashbangsLimit;                                 // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InBreachChargeLimit;                               // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaInventoryPackage_LimitSupplies) == 0x000008, "Wrong alignment on GBLuaInventoryPackage_LimitSupplies");
static_assert(sizeof(GBLuaInventoryPackage_LimitSupplies) == 0x000168, "Wrong size on GBLuaInventoryPackage_LimitSupplies");
static_assert(offsetof(GBLuaInventoryPackage_LimitSupplies, InKitJsonObj) == 0x000000, "Member 'GBLuaInventoryPackage_LimitSupplies::InKitJsonObj' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_LimitSupplies, InFragsLimit) == 0x000048, "Member 'GBLuaInventoryPackage_LimitSupplies::InFragsLimit' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_LimitSupplies, InSmokesLimit) == 0x000090, "Member 'GBLuaInventoryPackage_LimitSupplies::InSmokesLimit' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_LimitSupplies, InFlashbangsLimit) == 0x0000D8, "Member 'GBLuaInventoryPackage_LimitSupplies::InFlashbangsLimit' has a wrong offset!");
static_assert(offsetof(GBLuaInventoryPackage_LimitSupplies, InBreachChargeLimit) == 0x000120, "Member 'GBLuaInventoryPackage_LimitSupplies::InBreachChargeLimit' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.AddIgnoreUseInputReason
// 0x0048 (0x0048 - 0x0000)
struct GBLuaPlayerPackage_AddIgnoreUseInputReason final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_AddIgnoreUseInputReason) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_AddIgnoreUseInputReason");
static_assert(sizeof(GBLuaPlayerPackage_AddIgnoreUseInputReason) == 0x000048, "Wrong size on GBLuaPlayerPackage_AddIgnoreUseInputReason");
static_assert(offsetof(GBLuaPlayerPackage_AddIgnoreUseInputReason, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_AddIgnoreUseInputReason::InPlayerIdOrObject' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.AwardPlayerScore
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_AwardPlayerScore final
{
public:
	struct FLuaValue                              InPlayerIdOrObjectState;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InScoreName;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InScoreMultiple;                                   // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_AwardPlayerScore) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_AwardPlayerScore");
static_assert(sizeof(GBLuaPlayerPackage_AwardPlayerScore) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_AwardPlayerScore");
static_assert(offsetof(GBLuaPlayerPackage_AwardPlayerScore, InPlayerIdOrObjectState) == 0x000000, "Member 'GBLuaPlayerPackage_AwardPlayerScore::InPlayerIdOrObjectState' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_AwardPlayerScore, InScoreName) == 0x000048, "Member 'GBLuaPlayerPackage_AwardPlayerScore::InScoreName' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_AwardPlayerScore, InScoreMultiple) == 0x000090, "Member 'GBLuaPlayerPackage_AwardPlayerScore::InScoreMultiple' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.Damage
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_Damage final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDamageAmount;                                    // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDamageType;                                      // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_Damage) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_Damage");
static_assert(sizeof(GBLuaPlayerPackage_Damage) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_Damage");
static_assert(offsetof(GBLuaPlayerPackage_Damage, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_Damage::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_Damage, InDamageAmount) == 0x000048, "Member 'GBLuaPlayerPackage_Damage::InDamageAmount' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_Damage, InDamageType) == 0x000090, "Member 'GBLuaPlayerPackage_Damage::InDamageType' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.FreezePlayer
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_FreezePlayer final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDuration;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_FreezePlayer) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_FreezePlayer");
static_assert(sizeof(GBLuaPlayerPackage_FreezePlayer) == 0x000090, "Wrong size on GBLuaPlayerPackage_FreezePlayer");
static_assert(offsetof(GBLuaPlayerPackage_FreezePlayer, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_FreezePlayer::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_FreezePlayer, InDuration) == 0x000048, "Member 'GBLuaPlayerPackage_FreezePlayer::InDuration' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetCallSign
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetCallSign final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetCallSign) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetCallSign");
static_assert(sizeof(GBLuaPlayerPackage_GetCallSign) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetCallSign");
static_assert(offsetof(GBLuaPlayerPackage_GetCallSign, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetCallSign::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetCallSign, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetCallSign::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetCharacter
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetCharacter final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetCharacter) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetCharacter");
static_assert(sizeof(GBLuaPlayerPackage_GetCharacter) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetCharacter");
static_assert(offsetof(GBLuaPlayerPackage_GetCharacter, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetCharacter::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetCharacter, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetCharacter::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetInsertionPoint
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetInsertionPoint final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetInsertionPoint) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetInsertionPoint");
static_assert(sizeof(GBLuaPlayerPackage_GetInsertionPoint) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetInsertionPoint");
static_assert(offsetof(GBLuaPlayerPackage_GetInsertionPoint, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetInsertionPoint::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetInsertionPoint, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetInsertionPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetInventory
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetInventory final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetInventory) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetInventory");
static_assert(sizeof(GBLuaPlayerPackage_GetInventory) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetInventory");
static_assert(offsetof(GBLuaPlayerPackage_GetInventory, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetInventory::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetInventory, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetInventory::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetLives
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetLives final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetLives) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetLives");
static_assert(sizeof(GBLuaPlayerPackage_GetLives) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetLives");
static_assert(offsetof(GBLuaPlayerPackage_GetLives, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetLives::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetLives, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetLives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetName
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetName final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetName) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetName");
static_assert(sizeof(GBLuaPlayerPackage_GetName) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetName");
static_assert(offsetof(GBLuaPlayerPackage_GetName, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetName::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetName, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetPlayerStat
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_GetPlayerStat final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InKey;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetPlayerStat) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetPlayerStat");
static_assert(sizeof(GBLuaPlayerPackage_GetPlayerStat) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_GetPlayerStat");
static_assert(offsetof(GBLuaPlayerPackage_GetPlayerStat, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetPlayerStat::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetPlayerStat, InKey) == 0x000048, "Member 'GBLuaPlayerPackage_GetPlayerStat::InKey' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetPlayerStat, ReturnValue) == 0x000090, "Member 'GBLuaPlayerPackage_GetPlayerStat::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetReadyStatus
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetReadyStatus final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetReadyStatus) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetReadyStatus");
static_assert(sizeof(GBLuaPlayerPackage_GetReadyStatus) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetReadyStatus");
static_assert(offsetof(GBLuaPlayerPackage_GetReadyStatus, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetReadyStatus::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetReadyStatus, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetReadyStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetVolunteerStatus
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetVolunteerStatus final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetVolunteerStatus) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetVolunteerStatus");
static_assert(sizeof(GBLuaPlayerPackage_GetVolunteerStatus) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetVolunteerStatus");
static_assert(offsetof(GBLuaPlayerPackage_GetVolunteerStatus, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetVolunteerStatus::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetVolunteerStatus, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetVolunteerStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GiveItem
// 0x0120 (0x0120 - 0x0000)
struct GBLuaPlayerPackage_GiveItem final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InItemClass;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InEquip;                                           // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GiveItem) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GiveItem");
static_assert(sizeof(GBLuaPlayerPackage_GiveItem) == 0x000120, "Wrong size on GBLuaPlayerPackage_GiveItem");
static_assert(offsetof(GBLuaPlayerPackage_GiveItem, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GiveItem::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GiveItem, InItemClass) == 0x000048, "Member 'GBLuaPlayerPackage_GiveItem::InItemClass' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GiveItem, InEquip) == 0x000090, "Member 'GBLuaPlayerPackage_GiveItem::InEquip' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GiveItem, ReturnValue) == 0x0000D8, "Member 'GBLuaPlayerPackage_GiveItem::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.HasGameplayTag
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_HasGameplayTag final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTagName;                                         // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_HasGameplayTag) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_HasGameplayTag");
static_assert(sizeof(GBLuaPlayerPackage_HasGameplayTag) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_HasGameplayTag");
static_assert(offsetof(GBLuaPlayerPackage_HasGameplayTag, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_HasGameplayTag::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_HasGameplayTag, InTagName) == 0x000048, "Member 'GBLuaPlayerPackage_HasGameplayTag::InTagName' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_HasGameplayTag, ReturnValue) == 0x000090, "Member 'GBLuaPlayerPackage_HasGameplayTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.HasItemWithTag
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_HasItemWithTag final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_HasItemWithTag) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_HasItemWithTag");
static_assert(sizeof(GBLuaPlayerPackage_HasItemWithTag) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_HasItemWithTag");
static_assert(offsetof(GBLuaPlayerPackage_HasItemWithTag, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_HasItemWithTag::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_HasItemWithTag, InTag) == 0x000048, "Member 'GBLuaPlayerPackage_HasItemWithTag::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_HasItemWithTag, ReturnValue) == 0x000090, "Member 'GBLuaPlayerPackage_HasItemWithTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.IsABot
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_IsABot final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_IsABot) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_IsABot");
static_assert(sizeof(GBLuaPlayerPackage_IsABot) == 0x000090, "Wrong size on GBLuaPlayerPackage_IsABot");
static_assert(offsetof(GBLuaPlayerPackage_IsABot, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_IsABot::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_IsABot, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_IsABot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.IsAlive
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_IsAlive final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_IsAlive) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_IsAlive");
static_assert(sizeof(GBLuaPlayerPackage_IsAlive) == 0x000090, "Wrong size on GBLuaPlayerPackage_IsAlive");
static_assert(offsetof(GBLuaPlayerPackage_IsAlive, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_IsAlive::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_IsAlive, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_IsAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.Kill
// 0x0048 (0x0048 - 0x0000)
struct GBLuaPlayerPackage_Kill final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_Kill) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_Kill");
static_assert(sizeof(GBLuaPlayerPackage_Kill) == 0x000048, "Wrong size on GBLuaPlayerPackage_Kill");
static_assert(offsetof(GBLuaPlayerPackage_Kill, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_Kill::InPlayerIdOrObject' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.NotifyObjectiveStatusUpdate
// 0x0120 (0x0120 - 0x0000)
struct GBLuaPlayerPackage_NotifyObjectiveStatusUpdate final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMissionObjectiveActor;                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InStatusUpdateType;                                // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFloatParam;                                      // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_NotifyObjectiveStatusUpdate) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_NotifyObjectiveStatusUpdate");
static_assert(sizeof(GBLuaPlayerPackage_NotifyObjectiveStatusUpdate) == 0x000120, "Wrong size on GBLuaPlayerPackage_NotifyObjectiveStatusUpdate");
static_assert(offsetof(GBLuaPlayerPackage_NotifyObjectiveStatusUpdate, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_NotifyObjectiveStatusUpdate::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_NotifyObjectiveStatusUpdate, InMissionObjectiveActor) == 0x000048, "Member 'GBLuaPlayerPackage_NotifyObjectiveStatusUpdate::InMissionObjectiveActor' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_NotifyObjectiveStatusUpdate, InStatusUpdateType) == 0x000090, "Member 'GBLuaPlayerPackage_NotifyObjectiveStatusUpdate::InStatusUpdateType' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_NotifyObjectiveStatusUpdate, InFloatParam) == 0x0000D8, "Member 'GBLuaPlayerPackage_NotifyObjectiveStatusUpdate::InFloatParam' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.RemoveIgnoreUseInputReason
// 0x0048 (0x0048 - 0x0000)
struct GBLuaPlayerPackage_RemoveIgnoreUseInputReason final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_RemoveIgnoreUseInputReason) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_RemoveIgnoreUseInputReason");
static_assert(sizeof(GBLuaPlayerPackage_RemoveIgnoreUseInputReason) == 0x000048, "Wrong size on GBLuaPlayerPackage_RemoveIgnoreUseInputReason");
static_assert(offsetof(GBLuaPlayerPackage_RemoveIgnoreUseInputReason, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_RemoveIgnoreUseInputReason::InPlayerIdOrObject' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.ResetPlayerScores
// 0x0048 (0x0048 - 0x0000)
struct GBLuaPlayerPackage_ResetPlayerScores final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_ResetPlayerScores) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_ResetPlayerScores");
static_assert(sizeof(GBLuaPlayerPackage_ResetPlayerScores) == 0x000048, "Wrong size on GBLuaPlayerPackage_ResetPlayerScores");
static_assert(offsetof(GBLuaPlayerPackage_ResetPlayerScores, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_ResetPlayerScores::InPlayerIdOrObject' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.SetAllowedToRestart
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_SetAllowedToRestart final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InAllowed;                                         // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_SetAllowedToRestart) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_SetAllowedToRestart");
static_assert(sizeof(GBLuaPlayerPackage_SetAllowedToRestart) == 0x000090, "Wrong size on GBLuaPlayerPackage_SetAllowedToRestart");
static_assert(offsetof(GBLuaPlayerPackage_SetAllowedToRestart, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_SetAllowedToRestart::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_SetAllowedToRestart, InAllowed) == 0x000048, "Member 'GBLuaPlayerPackage_SetAllowedToRestart::InAllowed' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.SetInsertionPoint
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_SetInsertionPoint final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewInsertionPoint;                               // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_SetInsertionPoint) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_SetInsertionPoint");
static_assert(sizeof(GBLuaPlayerPackage_SetInsertionPoint) == 0x000090, "Wrong size on GBLuaPlayerPackage_SetInsertionPoint");
static_assert(offsetof(GBLuaPlayerPackage_SetInsertionPoint, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_SetInsertionPoint::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_SetInsertionPoint, InNewInsertionPoint) == 0x000048, "Member 'GBLuaPlayerPackage_SetInsertionPoint::InNewInsertionPoint' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.SetLives
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_SetLives final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewLives;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_SetLives) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_SetLives");
static_assert(sizeof(GBLuaPlayerPackage_SetLives) == 0x000090, "Wrong size on GBLuaPlayerPackage_SetLives");
static_assert(offsetof(GBLuaPlayerPackage_SetLives, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_SetLives::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_SetLives, InNewLives) == 0x000048, "Member 'GBLuaPlayerPackage_SetLives::InNewLives' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.SetReadyStatus
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_SetReadyStatus final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InNewStatus;                                       // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_SetReadyStatus) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_SetReadyStatus");
static_assert(sizeof(GBLuaPlayerPackage_SetReadyStatus) == 0x000090, "Wrong size on GBLuaPlayerPackage_SetReadyStatus");
static_assert(offsetof(GBLuaPlayerPackage_SetReadyStatus, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_SetReadyStatus::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_SetReadyStatus, InNewStatus) == 0x000048, "Member 'GBLuaPlayerPackage_SetReadyStatus::InNewStatus' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.SetVolunteerStatus
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_SetVolunteerStatus final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InVolunteered;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_SetVolunteerStatus) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_SetVolunteerStatus");
static_assert(sizeof(GBLuaPlayerPackage_SetVolunteerStatus) == 0x000090, "Wrong size on GBLuaPlayerPackage_SetVolunteerStatus");
static_assert(offsetof(GBLuaPlayerPackage_SetVolunteerStatus, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_SetVolunteerStatus::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_SetVolunteerStatus, InVolunteered) == 0x000048, "Member 'GBLuaPlayerPackage_SetVolunteerStatus::InVolunteered' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.ShowGameMessage
// 0x0120 (0x0120 - 0x0000)
struct GBLuaPlayerPackage_ShowGameMessage final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InMessage;                                         // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InType;                                            // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDuration;                                        // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_ShowGameMessage) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_ShowGameMessage");
static_assert(sizeof(GBLuaPlayerPackage_ShowGameMessage) == 0x000120, "Wrong size on GBLuaPlayerPackage_ShowGameMessage");
static_assert(offsetof(GBLuaPlayerPackage_ShowGameMessage, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_ShowGameMessage::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowGameMessage, InMessage) == 0x000048, "Member 'GBLuaPlayerPackage_ShowGameMessage::InMessage' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowGameMessage, InType) == 0x000090, "Member 'GBLuaPlayerPackage_ShowGameMessage::InType' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowGameMessage, InDuration) == 0x0000D8, "Member 'GBLuaPlayerPackage_ShowGameMessage::InDuration' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.ShowHint
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_ShowHint final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InHintName;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InWidgetName;                                      // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_ShowHint) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_ShowHint");
static_assert(sizeof(GBLuaPlayerPackage_ShowHint) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_ShowHint");
static_assert(offsetof(GBLuaPlayerPackage_ShowHint, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_ShowHint::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowHint, InHintName) == 0x000048, "Member 'GBLuaPlayerPackage_ShowHint::InHintName' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowHint, InWidgetName) == 0x000090, "Member 'GBLuaPlayerPackage_ShowHint::InWidgetName' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.ShowWorldPrompt
// 0x0120 (0x0120 - 0x0000)
struct GBLuaPlayerPackage_ShowWorldPrompt final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLocation;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTag;                                             // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InDuration;                                        // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_ShowWorldPrompt) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_ShowWorldPrompt");
static_assert(sizeof(GBLuaPlayerPackage_ShowWorldPrompt) == 0x000120, "Wrong size on GBLuaPlayerPackage_ShowWorldPrompt");
static_assert(offsetof(GBLuaPlayerPackage_ShowWorldPrompt, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_ShowWorldPrompt::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowWorldPrompt, InLocation) == 0x000048, "Member 'GBLuaPlayerPackage_ShowWorldPrompt::InLocation' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowWorldPrompt, InTag) == 0x000090, "Member 'GBLuaPlayerPackage_ShowWorldPrompt::InTag' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ShowWorldPrompt, InDuration) == 0x0000D8, "Member 'GBLuaPlayerPackage_ShowWorldPrompt::InDuration' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.SpawnEffectAtPlayer
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_SpawnEffectAtPlayer final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InEffectClass;                                     // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_SpawnEffectAtPlayer) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_SpawnEffectAtPlayer");
static_assert(sizeof(GBLuaPlayerPackage_SpawnEffectAtPlayer) == 0x000090, "Wrong size on GBLuaPlayerPackage_SpawnEffectAtPlayer");
static_assert(offsetof(GBLuaPlayerPackage_SpawnEffectAtPlayer, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_SpawnEffectAtPlayer::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_SpawnEffectAtPlayer, InEffectClass) == 0x000048, "Member 'GBLuaPlayerPackage_SpawnEffectAtPlayer::InEffectClass' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.Teleport
// 0x00D8 (0x00D8 - 0x0000)
struct GBLuaPlayerPackage_Teleport final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLocation;                                        // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InRotation;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_Teleport) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_Teleport");
static_assert(sizeof(GBLuaPlayerPackage_Teleport) == 0x0000D8, "Wrong size on GBLuaPlayerPackage_Teleport");
static_assert(offsetof(GBLuaPlayerPackage_Teleport, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_Teleport::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_Teleport, InLocation) == 0x000048, "Member 'GBLuaPlayerPackage_Teleport::InLocation' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_Teleport, InRotation) == 0x000090, "Member 'GBLuaPlayerPackage_Teleport::InRotation' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.ValidatePlayer
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_ValidatePlayer final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_ValidatePlayer) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_ValidatePlayer");
static_assert(sizeof(GBLuaPlayerPackage_ValidatePlayer) == 0x000090, "Wrong size on GBLuaPlayerPackage_ValidatePlayer");
static_assert(offsetof(GBLuaPlayerPackage_ValidatePlayer, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_ValidatePlayer::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_ValidatePlayer, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_ValidatePlayer::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.CheckCallSignProfanity
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_CheckCallSignProfanity final
{
public:
	struct FLuaValue                              InCallSign;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_CheckCallSignProfanity) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_CheckCallSignProfanity");
static_assert(sizeof(GBLuaPlayerPackage_CheckCallSignProfanity) == 0x000090, "Wrong size on GBLuaPlayerPackage_CheckCallSignProfanity");
static_assert(offsetof(GBLuaPlayerPackage_CheckCallSignProfanity, InCallSign) == 0x000000, "Member 'GBLuaPlayerPackage_CheckCallSignProfanity::InCallSign' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_CheckCallSignProfanity, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_CheckCallSignProfanity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaPlayerPackage.GetPlayerState
// 0x0090 (0x0090 - 0x0000)
struct GBLuaPlayerPackage_GetPlayerState final
{
public:
	struct FLuaValue                              InPlayerIdOrObject;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaPlayerPackage_GetPlayerState) == 0x000008, "Wrong alignment on GBLuaPlayerPackage_GetPlayerState");
static_assert(sizeof(GBLuaPlayerPackage_GetPlayerState) == 0x000090, "Wrong size on GBLuaPlayerPackage_GetPlayerState");
static_assert(offsetof(GBLuaPlayerPackage_GetPlayerState, InPlayerIdOrObject) == 0x000000, "Member 'GBLuaPlayerPackage_GetPlayerState::InPlayerIdOrObject' has a wrong offset!");
static_assert(offsetof(GBLuaPlayerPackage_GetPlayerState, ReturnValue) == 0x000048, "Member 'GBLuaPlayerPackage_GetPlayerState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBLuaTimerPackage.ClearTimer
// 0x0048 (0x0048 - 0x0000)
struct GBLuaTimerPackage_ClearTimer final
{
public:
	struct FLuaValue                              InTimerHandle;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaTimerPackage_ClearTimer) == 0x000008, "Wrong alignment on GBLuaTimerPackage_ClearTimer");
static_assert(sizeof(GBLuaTimerPackage_ClearTimer) == 0x000048, "Wrong size on GBLuaTimerPackage_ClearTimer");
static_assert(offsetof(GBLuaTimerPackage_ClearTimer, InTimerHandle) == 0x000000, "Member 'GBLuaTimerPackage_ClearTimer::InTimerHandle' has a wrong offset!");

// Function GroundBranch.GBLuaTimerPackage.SetTimer
// 0x0168 (0x0168 - 0x0000)
struct GBLuaTimerPackage_SetTimer final
{
public:
	struct FLuaValue                              InTimerHandle;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InTable;                                           // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InFunction;                                        // 0x0090(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InRate;                                            // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              InLoop;                                            // 0x0120(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBLuaTimerPackage_SetTimer) == 0x000008, "Wrong alignment on GBLuaTimerPackage_SetTimer");
static_assert(sizeof(GBLuaTimerPackage_SetTimer) == 0x000168, "Wrong size on GBLuaTimerPackage_SetTimer");
static_assert(offsetof(GBLuaTimerPackage_SetTimer, InTimerHandle) == 0x000000, "Member 'GBLuaTimerPackage_SetTimer::InTimerHandle' has a wrong offset!");
static_assert(offsetof(GBLuaTimerPackage_SetTimer, InTable) == 0x000048, "Member 'GBLuaTimerPackage_SetTimer::InTable' has a wrong offset!");
static_assert(offsetof(GBLuaTimerPackage_SetTimer, InFunction) == 0x000090, "Member 'GBLuaTimerPackage_SetTimer::InFunction' has a wrong offset!");
static_assert(offsetof(GBLuaTimerPackage_SetTimer, InRate) == 0x0000D8, "Member 'GBLuaTimerPackage_SetTimer::InRate' has a wrong offset!");
static_assert(offsetof(GBLuaTimerPackage_SetTimer, InLoop) == 0x000120, "Member 'GBLuaTimerPackage_SetTimer::InLoop' has a wrong offset!");

// Function GroundBranch.GBMagazine.AdjustCount
// 0x0008 (0x0008 - 0x0000)
struct GBMagazine_AdjustCount final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBMagazine_AdjustCount) == 0x000004, "Wrong alignment on GBMagazine_AdjustCount");
static_assert(sizeof(GBMagazine_AdjustCount) == 0x000008, "Wrong size on GBMagazine_AdjustCount");
static_assert(offsetof(GBMagazine_AdjustCount, Amount) == 0x000000, "Member 'GBMagazine_AdjustCount::Amount' has a wrong offset!");
static_assert(offsetof(GBMagazine_AdjustCount, ReturnValue) == 0x000004, "Member 'GBMagazine_AdjustCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMagazine.SetBulletId
// 0x0010 (0x0010 - 0x0000)
struct GBMagazine_SetBulletId final
{
public:
	struct FPrimaryAssetId                        NewBulletId;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMagazine_SetBulletId) == 0x000004, "Wrong alignment on GBMagazine_SetBulletId");
static_assert(sizeof(GBMagazine_SetBulletId) == 0x000010, "Wrong size on GBMagazine_SetBulletId");
static_assert(offsetof(GBMagazine_SetBulletId, NewBulletId) == 0x000000, "Member 'GBMagazine_SetBulletId::NewBulletId' has a wrong offset!");

// Function GroundBranch.GBMagazine.SetCount
// 0x0004 (0x0004 - 0x0000)
struct GBMagazine_SetCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMagazine_SetCount) == 0x000004, "Wrong alignment on GBMagazine_SetCount");
static_assert(sizeof(GBMagazine_SetCount) == 0x000004, "Wrong size on GBMagazine_SetCount");
static_assert(offsetof(GBMagazine_SetCount, NewCount) == 0x000000, "Member 'GBMagazine_SetCount::NewCount' has a wrong offset!");

// Function GroundBranch.GBMagazine.GetBulletProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct GBMagazine_GetBulletProjectileClass final
{
public:
	TSubclassOf<class AGBBulletProjectile>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMagazine_GetBulletProjectileClass) == 0x000008, "Wrong alignment on GBMagazine_GetBulletProjectileClass");
static_assert(sizeof(GBMagazine_GetBulletProjectileClass) == 0x000008, "Wrong size on GBMagazine_GetBulletProjectileClass");
static_assert(offsetof(GBMagazine_GetBulletProjectileClass, ReturnValue) == 0x000000, "Member 'GBMagazine_GetBulletProjectileClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMagazine.GetCapacity
// 0x0004 (0x0004 - 0x0000)
struct GBMagazine_GetCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMagazine_GetCapacity) == 0x000004, "Wrong alignment on GBMagazine_GetCapacity");
static_assert(sizeof(GBMagazine_GetCapacity) == 0x000004, "Wrong size on GBMagazine_GetCapacity");
static_assert(offsetof(GBMagazine_GetCapacity, ReturnValue) == 0x000000, "Member 'GBMagazine_GetCapacity::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMagazine.GetCount
// 0x0004 (0x0004 - 0x0000)
struct GBMagazine_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMagazine_GetCount) == 0x000004, "Wrong alignment on GBMagazine_GetCount");
static_assert(sizeof(GBMagazine_GetCount) == 0x000004, "Wrong size on GBMagazine_GetCount");
static_assert(offsetof(GBMagazine_GetCount, ReturnValue) == 0x000000, "Member 'GBMagazine_GetCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMagazine.GetTraceColourIndexForRound
// 0x0001 (0x0001 - 0x0000)
struct GBMagazine_GetTraceColourIndexForRound final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMagazine_GetTraceColourIndexForRound) == 0x000001, "Wrong alignment on GBMagazine_GetTraceColourIndexForRound");
static_assert(sizeof(GBMagazine_GetTraceColourIndexForRound) == 0x000001, "Wrong size on GBMagazine_GetTraceColourIndexForRound");
static_assert(offsetof(GBMagazine_GetTraceColourIndexForRound, ReturnValue) == 0x000000, "Member 'GBMagazine_GetTraceColourIndexForRound::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMinimap.GetApplicableMissionVariantNames
// 0x0010 (0x0010 - 0x0000)
struct GBMinimap_GetApplicableMissionVariantNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMinimap_GetApplicableMissionVariantNames) == 0x000008, "Wrong alignment on GBMinimap_GetApplicableMissionVariantNames");
static_assert(sizeof(GBMinimap_GetApplicableMissionVariantNames) == 0x000010, "Wrong size on GBMinimap_GetApplicableMissionVariantNames");
static_assert(offsetof(GBMinimap_GetApplicableMissionVariantNames, ReturnValue) == 0x000000, "Member 'GBMinimap_GetApplicableMissionVariantNames::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetCampaignHotspotBriefingToken
// 0x0018 (0x0018 - 0x0000)
struct GBMissionData_GetCampaignHotspotBriefingToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetCampaignHotspotBriefingToken) == 0x000008, "Wrong alignment on GBMissionData_GetCampaignHotspotBriefingToken");
static_assert(sizeof(GBMissionData_GetCampaignHotspotBriefingToken) == 0x000018, "Wrong size on GBMissionData_GetCampaignHotspotBriefingToken");
static_assert(offsetof(GBMissionData_GetCampaignHotspotBriefingToken, InHotspotCodename) == 0x000000, "Member 'GBMissionData_GetCampaignHotspotBriefingToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignHotspotBriefingToken, ReturnValue) == 0x000008, "Member 'GBMissionData_GetCampaignHotspotBriefingToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetCampaignMissionBriefingToken
// 0x0030 (0x0030 - 0x0000)
struct GBMissionData_GetCampaignMissionBriefingToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BriefingField;                                     // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetCampaignMissionBriefingToken) == 0x000008, "Wrong alignment on GBMissionData_GetCampaignMissionBriefingToken");
static_assert(sizeof(GBMissionData_GetCampaignMissionBriefingToken) == 0x000030, "Wrong size on GBMissionData_GetCampaignMissionBriefingToken");
static_assert(offsetof(GBMissionData_GetCampaignMissionBriefingToken, InHotspotCodename) == 0x000000, "Member 'GBMissionData_GetCampaignMissionBriefingToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionBriefingToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionData_GetCampaignMissionBriefingToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionBriefingToken, BriefingField) == 0x000010, "Member 'GBMissionData_GetCampaignMissionBriefingToken::BriefingField' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionBriefingToken, ReturnValue) == 0x000020, "Member 'GBMissionData_GetCampaignMissionBriefingToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetCampaignMissionNameToken
// 0x0020 (0x0020 - 0x0000)
struct GBMissionData_GetCampaignMissionNameToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetCampaignMissionNameToken) == 0x000008, "Wrong alignment on GBMissionData_GetCampaignMissionNameToken");
static_assert(sizeof(GBMissionData_GetCampaignMissionNameToken) == 0x000020, "Wrong size on GBMissionData_GetCampaignMissionNameToken");
static_assert(offsetof(GBMissionData_GetCampaignMissionNameToken, InHotspotCodename) == 0x000000, "Member 'GBMissionData_GetCampaignMissionNameToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionNameToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionData_GetCampaignMissionNameToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionNameToken, ReturnValue) == 0x000010, "Member 'GBMissionData_GetCampaignMissionNameToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetCampaignMissionTypeToken
// 0x0020 (0x0020 - 0x0000)
struct GBMissionData_GetCampaignMissionTypeToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetCampaignMissionTypeToken) == 0x000008, "Wrong alignment on GBMissionData_GetCampaignMissionTypeToken");
static_assert(sizeof(GBMissionData_GetCampaignMissionTypeToken) == 0x000020, "Wrong size on GBMissionData_GetCampaignMissionTypeToken");
static_assert(offsetof(GBMissionData_GetCampaignMissionTypeToken, InHotspotCodename) == 0x000000, "Member 'GBMissionData_GetCampaignMissionTypeToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionTypeToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionData_GetCampaignMissionTypeToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignMissionTypeToken, ReturnValue) == 0x000010, "Member 'GBMissionData_GetCampaignMissionTypeToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetCampaignObjectiveNameToken
// 0x0030 (0x0030 - 0x0000)
struct GBMissionData_GetCampaignObjectiveNameToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMissionTitle;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetCampaignObjectiveNameToken) == 0x000008, "Wrong alignment on GBMissionData_GetCampaignObjectiveNameToken");
static_assert(sizeof(GBMissionData_GetCampaignObjectiveNameToken) == 0x000030, "Wrong size on GBMissionData_GetCampaignObjectiveNameToken");
static_assert(offsetof(GBMissionData_GetCampaignObjectiveNameToken, InHotspotCodename) == 0x000000, "Member 'GBMissionData_GetCampaignObjectiveNameToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignObjectiveNameToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionData_GetCampaignObjectiveNameToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignObjectiveNameToken, InMissionTitle) == 0x000010, "Member 'GBMissionData_GetCampaignObjectiveNameToken::InMissionTitle' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetCampaignObjectiveNameToken, ReturnValue) == 0x000020, "Member 'GBMissionData_GetCampaignObjectiveNameToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetMissionSaveAsFilename
// 0x0040 (0x0040 - 0x0000)
struct GBMissionData_GetMissionSaveAsFilename final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InVariantName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InScriptName;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetMissionSaveAsFilename) == 0x000008, "Wrong alignment on GBMissionData_GetMissionSaveAsFilename");
static_assert(sizeof(GBMissionData_GetMissionSaveAsFilename) == 0x000040, "Wrong size on GBMissionData_GetMissionSaveAsFilename");
static_assert(offsetof(GBMissionData_GetMissionSaveAsFilename, InHotspotCodename) == 0x000000, "Member 'GBMissionData_GetMissionSaveAsFilename::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetMissionSaveAsFilename, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionData_GetMissionSaveAsFilename::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetMissionSaveAsFilename, InVariantName) == 0x000010, "Member 'GBMissionData_GetMissionSaveAsFilename::InVariantName' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetMissionSaveAsFilename, InScriptName) == 0x000020, "Member 'GBMissionData_GetMissionSaveAsFilename::InScriptName' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetMissionSaveAsFilename, ReturnValue) == 0x000030, "Member 'GBMissionData_GetMissionSaveAsFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetObjectiveDataFromMissionFile
// 0x0040 (0x0040 - 0x0000)
struct GBMissionData_GetObjectiveDataFromMissionFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionFileName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeHiddenObjectives;                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBObjectiveData                       ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetObjectiveDataFromMissionFile) == 0x000008, "Wrong alignment on GBMissionData_GetObjectiveDataFromMissionFile");
static_assert(sizeof(GBMissionData_GetObjectiveDataFromMissionFile) == 0x000040, "Wrong size on GBMissionData_GetObjectiveDataFromMissionFile");
static_assert(offsetof(GBMissionData_GetObjectiveDataFromMissionFile, WorldContextObject) == 0x000000, "Member 'GBMissionData_GetObjectiveDataFromMissionFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetObjectiveDataFromMissionFile, MissionFileName) == 0x000008, "Member 'GBMissionData_GetObjectiveDataFromMissionFile::MissionFileName' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetObjectiveDataFromMissionFile, bIncludeHiddenObjectives) == 0x000018, "Member 'GBMissionData_GetObjectiveDataFromMissionFile::bIncludeHiddenObjectives' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetObjectiveDataFromMissionFile, ReturnValue) == 0x000020, "Member 'GBMissionData_GetObjectiveDataFromMissionFile::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.AddAILoadout
// 0x0020 (0x0020 - 0x0000)
struct GBMissionData_AddAILoadout final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutFileName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBMissionData_AddAILoadout) == 0x000008, "Wrong alignment on GBMissionData_AddAILoadout");
static_assert(sizeof(GBMissionData_AddAILoadout) == 0x000020, "Wrong size on GBMissionData_AddAILoadout");
static_assert(offsetof(GBMissionData_AddAILoadout, WorldContextObject) == 0x000000, "Member 'GBMissionData_AddAILoadout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBMissionData_AddAILoadout, LoadoutFileName) == 0x000008, "Member 'GBMissionData_AddAILoadout::LoadoutFileName' has a wrong offset!");
static_assert(offsetof(GBMissionData_AddAILoadout, ReturnValue) == 0x000018, "Member 'GBMissionData_AddAILoadout::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.CreateLoadoutInfo
// 0x0028 (0x0028 - 0x0000)
struct GBMissionData_CreateLoadoutInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditing;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoadoutFileName;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBKitInfo*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_CreateLoadoutInfo) == 0x000008, "Wrong alignment on GBMissionData_CreateLoadoutInfo");
static_assert(sizeof(GBMissionData_CreateLoadoutInfo) == 0x000028, "Wrong size on GBMissionData_CreateLoadoutInfo");
static_assert(offsetof(GBMissionData_CreateLoadoutInfo, WorldContextObject) == 0x000000, "Member 'GBMissionData_CreateLoadoutInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBMissionData_CreateLoadoutInfo, bIsEditing) == 0x000008, "Member 'GBMissionData_CreateLoadoutInfo::bIsEditing' has a wrong offset!");
static_assert(offsetof(GBMissionData_CreateLoadoutInfo, LoadoutFileName) == 0x000010, "Member 'GBMissionData_CreateLoadoutInfo::LoadoutFileName' has a wrong offset!");
static_assert(offsetof(GBMissionData_CreateLoadoutInfo, ReturnValue) == 0x000020, "Member 'GBMissionData_CreateLoadoutInfo::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.GetBotDefs
// 0x0018 (0x0018 - 0x0000)
struct GBMissionData_GetBotDefs final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_GetBotDefs) == 0x000008, "Wrong alignment on GBMissionData_GetBotDefs");
static_assert(sizeof(GBMissionData_GetBotDefs) == 0x000018, "Wrong size on GBMissionData_GetBotDefs");
static_assert(offsetof(GBMissionData_GetBotDefs, TeamId) == 0x000000, "Member 'GBMissionData_GetBotDefs::TeamId' has a wrong offset!");
static_assert(offsetof(GBMissionData_GetBotDefs, ReturnValue) == 0x000008, "Member 'GBMissionData_GetBotDefs::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionData.SetBotDefs
// 0x0018 (0x0018 - 0x0000)
struct GBMissionData_SetBotDefs final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         NewDefs;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionData_SetBotDefs) == 0x000008, "Wrong alignment on GBMissionData_SetBotDefs");
static_assert(sizeof(GBMissionData_SetBotDefs) == 0x000018, "Wrong size on GBMissionData_SetBotDefs");
static_assert(offsetof(GBMissionData_SetBotDefs, TeamId) == 0x000000, "Member 'GBMissionData_SetBotDefs::TeamId' has a wrong offset!");
static_assert(offsetof(GBMissionData_SetBotDefs, NewDefs) == 0x000008, "Member 'GBMissionData_SetBotDefs::NewDefs' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveCompleteGenericToken
// 0x0018 (0x0018 - 0x0000)
struct GBMissionObjective_GetObjectiveCompleteGenericToken final
{
public:
	class FName                                   ObjectiveType;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveCompleteGenericToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveCompleteGenericToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveCompleteGenericToken) == 0x000018, "Wrong size on GBMissionObjective_GetObjectiveCompleteGenericToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveCompleteGenericToken, ObjectiveType) == 0x000000, "Member 'GBMissionObjective_GetObjectiveCompleteGenericToken::ObjectiveType' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveCompleteGenericToken, ReturnValue) == 0x000008, "Member 'GBMissionObjective_GetObjectiveCompleteGenericToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveCompleteSpecificToken
// 0x0030 (0x0030 - 0x0000)
struct GBMissionObjective_GetObjectiveCompleteSpecificToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMissionTitle;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveCompleteSpecificToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveCompleteSpecificToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveCompleteSpecificToken) == 0x000030, "Wrong size on GBMissionObjective_GetObjectiveCompleteSpecificToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveCompleteSpecificToken, InHotspotCodename) == 0x000000, "Member 'GBMissionObjective_GetObjectiveCompleteSpecificToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveCompleteSpecificToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionObjective_GetObjectiveCompleteSpecificToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveCompleteSpecificToken, InMissionTitle) == 0x000010, "Member 'GBMissionObjective_GetObjectiveCompleteSpecificToken::InMissionTitle' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveCompleteSpecificToken, ReturnValue) == 0x000020, "Member 'GBMissionObjective_GetObjectiveCompleteSpecificToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveFailedGenericToken
// 0x0018 (0x0018 - 0x0000)
struct GBMissionObjective_GetObjectiveFailedGenericToken final
{
public:
	class FName                                   ObjectiveType;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveFailedGenericToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveFailedGenericToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveFailedGenericToken) == 0x000018, "Wrong size on GBMissionObjective_GetObjectiveFailedGenericToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveFailedGenericToken, ObjectiveType) == 0x000000, "Member 'GBMissionObjective_GetObjectiveFailedGenericToken::ObjectiveType' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveFailedGenericToken, ReturnValue) == 0x000008, "Member 'GBMissionObjective_GetObjectiveFailedGenericToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveFailedSpecificToken
// 0x0030 (0x0030 - 0x0000)
struct GBMissionObjective_GetObjectiveFailedSpecificToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMissionTitle;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveFailedSpecificToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveFailedSpecificToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveFailedSpecificToken) == 0x000030, "Wrong size on GBMissionObjective_GetObjectiveFailedSpecificToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveFailedSpecificToken, InHotspotCodename) == 0x000000, "Member 'GBMissionObjective_GetObjectiveFailedSpecificToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveFailedSpecificToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionObjective_GetObjectiveFailedSpecificToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveFailedSpecificToken, InMissionTitle) == 0x000010, "Member 'GBMissionObjective_GetObjectiveFailedSpecificToken::InMissionTitle' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveFailedSpecificToken, ReturnValue) == 0x000020, "Member 'GBMissionObjective_GetObjectiveFailedSpecificToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveSubObjectiveCompleteGenericToken
// 0x0018 (0x0018 - 0x0000)
struct GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken final
{
public:
	class FName                                   ObjectiveType;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken) == 0x000018, "Wrong size on GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken, ObjectiveType) == 0x000000, "Member 'GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken::ObjectiveType' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken, ReturnValue) == 0x000008, "Member 'GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveSubObjectiveCompleteSpecificToken
// 0x0030 (0x0030 - 0x0000)
struct GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMissionTitle;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken) == 0x000030, "Wrong size on GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken, InHotspotCodename) == 0x000000, "Member 'GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken, InMissionTitle) == 0x000010, "Member 'GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken::InMissionTitle' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken, ReturnValue) == 0x000020, "Member 'GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveTimedActionGenericToken
// 0x0018 (0x0018 - 0x0000)
struct GBMissionObjective_GetObjectiveTimedActionGenericToken final
{
public:
	class FName                                   ObjectiveType;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveTimedActionGenericToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveTimedActionGenericToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveTimedActionGenericToken) == 0x000018, "Wrong size on GBMissionObjective_GetObjectiveTimedActionGenericToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveTimedActionGenericToken, ObjectiveType) == 0x000000, "Member 'GBMissionObjective_GetObjectiveTimedActionGenericToken::ObjectiveType' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveTimedActionGenericToken, ReturnValue) == 0x000008, "Member 'GBMissionObjective_GetObjectiveTimedActionGenericToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveTimedActionSpecificToken
// 0x0030 (0x0030 - 0x0000)
struct GBMissionObjective_GetObjectiveTimedActionSpecificToken final
{
public:
	class FName                                   InHotspotCodename;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMissionSequenceNumber;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMissionTitle;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveTimedActionSpecificToken) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveTimedActionSpecificToken");
static_assert(sizeof(GBMissionObjective_GetObjectiveTimedActionSpecificToken) == 0x000030, "Wrong size on GBMissionObjective_GetObjectiveTimedActionSpecificToken");
static_assert(offsetof(GBMissionObjective_GetObjectiveTimedActionSpecificToken, InHotspotCodename) == 0x000000, "Member 'GBMissionObjective_GetObjectiveTimedActionSpecificToken::InHotspotCodename' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveTimedActionSpecificToken, InMissionSequenceNumber) == 0x000008, "Member 'GBMissionObjective_GetObjectiveTimedActionSpecificToken::InMissionSequenceNumber' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveTimedActionSpecificToken, InMissionTitle) == 0x000010, "Member 'GBMissionObjective_GetObjectiveTimedActionSpecificToken::InMissionTitle' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetObjectiveTimedActionSpecificToken, ReturnValue) == 0x000020, "Member 'GBMissionObjective_GetObjectiveTimedActionSpecificToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetSortedMissionObjectiveInfoSimple
// 0x0038 (0x0038 - 0x0000)
struct GBMissionObjective_GetSortedMissionObjectiveInfoSimple final
{
public:
	TArray<struct FGBCampaignMissionObjectiveInfo> InAllObjectiveInfoList;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         TeamId_0;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGBCampaignMissionObjectiveInfo> OutPrimaryList;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGBCampaignMissionObjectiveInfo> OutSecondaryList;                                 // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetSortedMissionObjectiveInfoSimple) == 0x000008, "Wrong alignment on GBMissionObjective_GetSortedMissionObjectiveInfoSimple");
static_assert(sizeof(GBMissionObjective_GetSortedMissionObjectiveInfoSimple) == 0x000038, "Wrong size on GBMissionObjective_GetSortedMissionObjectiveInfoSimple");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectiveInfoSimple, InAllObjectiveInfoList) == 0x000000, "Member 'GBMissionObjective_GetSortedMissionObjectiveInfoSimple::InAllObjectiveInfoList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectiveInfoSimple, TeamId_0) == 0x000010, "Member 'GBMissionObjective_GetSortedMissionObjectiveInfoSimple::TeamId_0' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectiveInfoSimple, OutPrimaryList) == 0x000018, "Member 'GBMissionObjective_GetSortedMissionObjectiveInfoSimple::OutPrimaryList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectiveInfoSimple, OutSecondaryList) == 0x000028, "Member 'GBMissionObjective_GetSortedMissionObjectiveInfoSimple::OutSecondaryList' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetSortedMissionObjectives
// 0x0068 (0x0068 - 0x0000)
struct GBMissionObjective_GetSortedMissionObjectives final
{
public:
	TArray<class AGBMissionObjective*>            InAllObjectivesList;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         TeamId_0;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBMissionObjective*>            OutInactiveList;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGBMissionObjective*>            OutActiveList;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGBMissionObjective*>            OutPartiallyCompleteList;                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGBMissionObjective*>            OutFailedList;                                     // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGBMissionObjective*>            OutCompletedList;                                  // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetSortedMissionObjectives) == 0x000008, "Wrong alignment on GBMissionObjective_GetSortedMissionObjectives");
static_assert(sizeof(GBMissionObjective_GetSortedMissionObjectives) == 0x000068, "Wrong size on GBMissionObjective_GetSortedMissionObjectives");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, InAllObjectivesList) == 0x000000, "Member 'GBMissionObjective_GetSortedMissionObjectives::InAllObjectivesList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, TeamId_0) == 0x000010, "Member 'GBMissionObjective_GetSortedMissionObjectives::TeamId_0' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, OutInactiveList) == 0x000018, "Member 'GBMissionObjective_GetSortedMissionObjectives::OutInactiveList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, OutActiveList) == 0x000028, "Member 'GBMissionObjective_GetSortedMissionObjectives::OutActiveList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, OutPartiallyCompleteList) == 0x000038, "Member 'GBMissionObjective_GetSortedMissionObjectives::OutPartiallyCompleteList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, OutFailedList) == 0x000048, "Member 'GBMissionObjective_GetSortedMissionObjectives::OutFailedList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectives, OutCompletedList) == 0x000058, "Member 'GBMissionObjective_GetSortedMissionObjectives::OutCompletedList' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetSortedMissionObjectivesSimple
// 0x0038 (0x0038 - 0x0000)
struct GBMissionObjective_GetSortedMissionObjectivesSimple final
{
public:
	TArray<class AGBMissionObjective*>            InAllObjectivesList;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         TeamId_0;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBMissionObjective*>            OutPrimaryList;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AGBMissionObjective*>            OutSecondaryList;                                  // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetSortedMissionObjectivesSimple) == 0x000008, "Wrong alignment on GBMissionObjective_GetSortedMissionObjectivesSimple");
static_assert(sizeof(GBMissionObjective_GetSortedMissionObjectivesSimple) == 0x000038, "Wrong size on GBMissionObjective_GetSortedMissionObjectivesSimple");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectivesSimple, InAllObjectivesList) == 0x000000, "Member 'GBMissionObjective_GetSortedMissionObjectivesSimple::InAllObjectivesList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectivesSimple, TeamId_0) == 0x000010, "Member 'GBMissionObjective_GetSortedMissionObjectivesSimple::TeamId_0' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectivesSimple, OutPrimaryList) == 0x000018, "Member 'GBMissionObjective_GetSortedMissionObjectivesSimple::OutPrimaryList' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_GetSortedMissionObjectivesSimple, OutSecondaryList) == 0x000028, "Member 'GBMissionObjective_GetSortedMissionObjectivesSimple::OutSecondaryList' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveScriptTable
// 0x0048 (0x0048 - 0x0000)
struct GBMissionObjective_GetObjectiveScriptTable final
{
public:
	struct FLuaValue                              ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveScriptTable) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveScriptTable");
static_assert(sizeof(GBMissionObjective_GetObjectiveScriptTable) == 0x000048, "Wrong size on GBMissionObjective_GetObjectiveScriptTable");
static_assert(offsetof(GBMissionObjective_GetObjectiveScriptTable, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetObjectiveScriptTable::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.OnObjectiveStatusChanged
// 0x0008 (0x0008 - 0x0000)
struct GBMissionObjective_OnObjectiveStatusChanged final
{
public:
	class AGBMissionObjective*                    MissionObjective;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_OnObjectiveStatusChanged) == 0x000008, "Wrong alignment on GBMissionObjective_OnObjectiveStatusChanged");
static_assert(sizeof(GBMissionObjective_OnObjectiveStatusChanged) == 0x000008, "Wrong size on GBMissionObjective_OnObjectiveStatusChanged");
static_assert(offsetof(GBMissionObjective_OnObjectiveStatusChanged, MissionObjective) == 0x000000, "Member 'GBMissionObjective_OnObjectiveStatusChanged::MissionObjective' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.OnSearchReportedInVolume
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_OnSearchReportedInVolume final
{
public:
	class AGBGameTrigger*                         GameTrigger;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBSearchableProp*                      SearchedActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_OnSearchReportedInVolume) == 0x000008, "Wrong alignment on GBMissionObjective_OnSearchReportedInVolume");
static_assert(sizeof(GBMissionObjective_OnSearchReportedInVolume) == 0x000010, "Wrong size on GBMissionObjective_OnSearchReportedInVolume");
static_assert(offsetof(GBMissionObjective_OnSearchReportedInVolume, GameTrigger) == 0x000000, "Member 'GBMissionObjective_OnSearchReportedInVolume::GameTrigger' has a wrong offset!");
static_assert(offsetof(GBMissionObjective_OnSearchReportedInVolume, SearchedActor) == 0x000008, "Member 'GBMissionObjective_OnSearchReportedInVolume::SearchedActor' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.SetGenericBool
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_SetGenericBool final
{
public:
	bool                                          bNewGenericBool;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_SetGenericBool) == 0x000001, "Wrong alignment on GBMissionObjective_SetGenericBool");
static_assert(sizeof(GBMissionObjective_SetGenericBool) == 0x000001, "Wrong size on GBMissionObjective_SetGenericBool");
static_assert(offsetof(GBMissionObjective_SetGenericBool, bNewGenericBool) == 0x000000, "Member 'GBMissionObjective_SetGenericBool::bNewGenericBool' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.SetGenericBool2
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_SetGenericBool2 final
{
public:
	bool                                          bNewGenericBool2;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_SetGenericBool2) == 0x000001, "Wrong alignment on GBMissionObjective_SetGenericBool2");
static_assert(sizeof(GBMissionObjective_SetGenericBool2) == 0x000001, "Wrong size on GBMissionObjective_SetGenericBool2");
static_assert(offsetof(GBMissionObjective_SetGenericBool2, bNewGenericBool2) == 0x000000, "Member 'GBMissionObjective_SetGenericBool2::bNewGenericBool2' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.SetLinkedActorList
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_SetLinkedActorList final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          NewLinkedActorList;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_SetLinkedActorList) == 0x000008, "Wrong alignment on GBMissionObjective_SetLinkedActorList");
static_assert(sizeof(GBMissionObjective_SetLinkedActorList) == 0x000010, "Wrong size on GBMissionObjective_SetLinkedActorList");
static_assert(offsetof(GBMissionObjective_SetLinkedActorList, NewLinkedActorList) == 0x000000, "Member 'GBMissionObjective_SetLinkedActorList::NewLinkedActorList' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.SetMissionObjectiveStatus
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_SetMissionObjectiveStatus final
{
public:
	EGBMissionObjectiveStatus                     NewMissionObjectiveStatus;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_SetMissionObjectiveStatus) == 0x000001, "Wrong alignment on GBMissionObjective_SetMissionObjectiveStatus");
static_assert(sizeof(GBMissionObjective_SetMissionObjectiveStatus) == 0x000001, "Wrong size on GBMissionObjective_SetMissionObjectiveStatus");
static_assert(offsetof(GBMissionObjective_SetMissionObjectiveStatus, NewMissionObjectiveStatus) == 0x000000, "Member 'GBMissionObjective_SetMissionObjectiveStatus::NewMissionObjectiveStatus' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.SetObjectiveType
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_SetObjectiveType final
{
public:
	class FString                                 NewObjectiveScriptFilename;                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_SetObjectiveType) == 0x000008, "Wrong alignment on GBMissionObjective_SetObjectiveType");
static_assert(sizeof(GBMissionObjective_SetObjectiveType) == 0x000010, "Wrong size on GBMissionObjective_SetObjectiveType");
static_assert(offsetof(GBMissionObjective_SetObjectiveType, NewObjectiveScriptFilename) == 0x000000, "Member 'GBMissionObjective_SetObjectiveType::NewObjectiveScriptFilename' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.SetPrerequisiteObjectives
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_SetPrerequisiteObjectives final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          NewPrerequisiteObjectives;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_SetPrerequisiteObjectives) == 0x000008, "Wrong alignment on GBMissionObjective_SetPrerequisiteObjectives");
static_assert(sizeof(GBMissionObjective_SetPrerequisiteObjectives) == 0x000010, "Wrong size on GBMissionObjective_SetPrerequisiteObjectives");
static_assert(offsetof(GBMissionObjective_SetPrerequisiteObjectives, NewPrerequisiteObjectives) == 0x000000, "Member 'GBMissionObjective_SetPrerequisiteObjectives::NewPrerequisiteObjectives' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.WaitingOnPrerequisiteObjectives
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_WaitingOnPrerequisiteObjectives final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_WaitingOnPrerequisiteObjectives) == 0x000001, "Wrong alignment on GBMissionObjective_WaitingOnPrerequisiteObjectives");
static_assert(sizeof(GBMissionObjective_WaitingOnPrerequisiteObjectives) == 0x000001, "Wrong size on GBMissionObjective_WaitingOnPrerequisiteObjectives");
static_assert(offsetof(GBMissionObjective_WaitingOnPrerequisiteObjectives, ReturnValue) == 0x000000, "Member 'GBMissionObjective_WaitingOnPrerequisiteObjectives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetBestMissionStatusUpdateToken
// 0x0008 (0x0008 - 0x0000)
struct GBMissionObjective_GetBestMissionStatusUpdateToken final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetBestMissionStatusUpdateToken) == 0x000004, "Wrong alignment on GBMissionObjective_GetBestMissionStatusUpdateToken");
static_assert(sizeof(GBMissionObjective_GetBestMissionStatusUpdateToken) == 0x000008, "Wrong size on GBMissionObjective_GetBestMissionStatusUpdateToken");
static_assert(offsetof(GBMissionObjective_GetBestMissionStatusUpdateToken, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetBestMissionStatusUpdateToken::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetBoolDescription
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetBoolDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetBoolDescription) == 0x000008, "Wrong alignment on GBMissionObjective_GetBoolDescription");
static_assert(sizeof(GBMissionObjective_GetBoolDescription) == 0x000010, "Wrong size on GBMissionObjective_GetBoolDescription");
static_assert(offsetof(GBMissionObjective_GetBoolDescription, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetBoolDescription::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetBoolDescription2
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetBoolDescription2 final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetBoolDescription2) == 0x000008, "Wrong alignment on GBMissionObjective_GetBoolDescription2");
static_assert(sizeof(GBMissionObjective_GetBoolDescription2) == 0x000010, "Wrong size on GBMissionObjective_GetBoolDescription2");
static_assert(offsetof(GBMissionObjective_GetBoolDescription2, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetBoolDescription2::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetDontLinkToSelf
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetDontLinkToSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetDontLinkToSelf) == 0x000001, "Wrong alignment on GBMissionObjective_GetDontLinkToSelf");
static_assert(sizeof(GBMissionObjective_GetDontLinkToSelf) == 0x000001, "Wrong size on GBMissionObjective_GetDontLinkToSelf");
static_assert(offsetof(GBMissionObjective_GetDontLinkToSelf, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetDontLinkToSelf::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetGenericBool
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetGenericBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetGenericBool) == 0x000001, "Wrong alignment on GBMissionObjective_GetGenericBool");
static_assert(sizeof(GBMissionObjective_GetGenericBool) == 0x000001, "Wrong size on GBMissionObjective_GetGenericBool");
static_assert(offsetof(GBMissionObjective_GetGenericBool, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetGenericBool::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetGenericBool2
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetGenericBool2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetGenericBool2) == 0x000001, "Wrong alignment on GBMissionObjective_GetGenericBool2");
static_assert(sizeof(GBMissionObjective_GetGenericBool2) == 0x000001, "Wrong size on GBMissionObjective_GetGenericBool2");
static_assert(offsetof(GBMissionObjective_GetGenericBool2, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetGenericBool2::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetIsHiddenObjective
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetIsHiddenObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetIsHiddenObjective) == 0x000001, "Wrong alignment on GBMissionObjective_GetIsHiddenObjective");
static_assert(sizeof(GBMissionObjective_GetIsHiddenObjective) == 0x000001, "Wrong size on GBMissionObjective_GetIsHiddenObjective");
static_assert(offsetof(GBMissionObjective_GetIsHiddenObjective, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetIsHiddenObjective::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetIsPrimaryObjective
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetIsPrimaryObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetIsPrimaryObjective) == 0x000001, "Wrong alignment on GBMissionObjective_GetIsPrimaryObjective");
static_assert(sizeof(GBMissionObjective_GetIsPrimaryObjective) == 0x000001, "Wrong size on GBMissionObjective_GetIsPrimaryObjective");
static_assert(offsetof(GBMissionObjective_GetIsPrimaryObjective, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetIsPrimaryObjective::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetLinkedActorClass
// 0x0008 (0x0008 - 0x0000)
struct GBMissionObjective_GetLinkedActorClass final
{
public:
	TSubclassOf<class AActor>                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetLinkedActorClass) == 0x000008, "Wrong alignment on GBMissionObjective_GetLinkedActorClass");
static_assert(sizeof(GBMissionObjective_GetLinkedActorClass) == 0x000008, "Wrong size on GBMissionObjective_GetLinkedActorClass");
static_assert(offsetof(GBMissionObjective_GetLinkedActorClass, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetLinkedActorClass::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetLinkedActorDescription
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetLinkedActorDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetLinkedActorDescription) == 0x000008, "Wrong alignment on GBMissionObjective_GetLinkedActorDescription");
static_assert(sizeof(GBMissionObjective_GetLinkedActorDescription) == 0x000010, "Wrong size on GBMissionObjective_GetLinkedActorDescription");
static_assert(offsetof(GBMissionObjective_GetLinkedActorDescription, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetLinkedActorDescription::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetLinkedActorList
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetLinkedActorList final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetLinkedActorList) == 0x000008, "Wrong alignment on GBMissionObjective_GetLinkedActorList");
static_assert(sizeof(GBMissionObjective_GetLinkedActorList) == 0x000010, "Wrong size on GBMissionObjective_GetLinkedActorList");
static_assert(offsetof(GBMissionObjective_GetLinkedActorList, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetLinkedActorList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetListDisplayPriority
// 0x0004 (0x0004 - 0x0000)
struct GBMissionObjective_GetListDisplayPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetListDisplayPriority) == 0x000004, "Wrong alignment on GBMissionObjective_GetListDisplayPriority");
static_assert(sizeof(GBMissionObjective_GetListDisplayPriority) == 0x000004, "Wrong size on GBMissionObjective_GetListDisplayPriority");
static_assert(offsetof(GBMissionObjective_GetListDisplayPriority, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetListDisplayPriority::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetMissionObjectiveStatus
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetMissionObjectiveStatus final
{
public:
	EGBMissionObjectiveStatus                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetMissionObjectiveStatus) == 0x000001, "Wrong alignment on GBMissionObjective_GetMissionObjectiveStatus");
static_assert(sizeof(GBMissionObjective_GetMissionObjectiveStatus) == 0x000001, "Wrong size on GBMissionObjective_GetMissionObjectiveStatus");
static_assert(offsetof(GBMissionObjective_GetMissionObjectiveStatus, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetMissionObjectiveStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveScriptFilename
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetObjectiveScriptFilename final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveScriptFilename) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveScriptFilename");
static_assert(sizeof(GBMissionObjective_GetObjectiveScriptFilename) == 0x000010, "Wrong size on GBMissionObjective_GetObjectiveScriptFilename");
static_assert(offsetof(GBMissionObjective_GetObjectiveScriptFilename, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetObjectiveScriptFilename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveTitle
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetObjectiveTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveTitle) == 0x000008, "Wrong alignment on GBMissionObjective_GetObjectiveTitle");
static_assert(sizeof(GBMissionObjective_GetObjectiveTitle) == 0x000010, "Wrong size on GBMissionObjective_GetObjectiveTitle");
static_assert(offsetof(GBMissionObjective_GetObjectiveTitle, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetObjectiveTitle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetObjectiveType
// 0x0008 (0x0008 - 0x0000)
struct GBMissionObjective_GetObjectiveType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetObjectiveType) == 0x000004, "Wrong alignment on GBMissionObjective_GetObjectiveType");
static_assert(sizeof(GBMissionObjective_GetObjectiveType) == 0x000008, "Wrong size on GBMissionObjective_GetObjectiveType");
static_assert(offsetof(GBMissionObjective_GetObjectiveType, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetObjectiveType::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetPrerequisiteObjectives
// 0x0010 (0x0010 - 0x0000)
struct GBMissionObjective_GetPrerequisiteObjectives final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetPrerequisiteObjectives) == 0x000008, "Wrong alignment on GBMissionObjective_GetPrerequisiteObjectives");
static_assert(sizeof(GBMissionObjective_GetPrerequisiteObjectives) == 0x000010, "Wrong size on GBMissionObjective_GetPrerequisiteObjectives");
static_assert(offsetof(GBMissionObjective_GetPrerequisiteObjectives, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetPrerequisiteObjectives::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetUseBool
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetUseBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetUseBool) == 0x000001, "Wrong alignment on GBMissionObjective_GetUseBool");
static_assert(sizeof(GBMissionObjective_GetUseBool) == 0x000001, "Wrong size on GBMissionObjective_GetUseBool");
static_assert(offsetof(GBMissionObjective_GetUseBool, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetUseBool::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetUseBool2
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetUseBool2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetUseBool2) == 0x000001, "Wrong alignment on GBMissionObjective_GetUseBool2");
static_assert(sizeof(GBMissionObjective_GetUseBool2) == 0x000001, "Wrong size on GBMissionObjective_GetUseBool2");
static_assert(offsetof(GBMissionObjective_GetUseBool2, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetUseBool2::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetUseLinkedActorList
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetUseLinkedActorList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetUseLinkedActorList) == 0x000001, "Wrong alignment on GBMissionObjective_GetUseLinkedActorList");
static_assert(sizeof(GBMissionObjective_GetUseLinkedActorList) == 0x000001, "Wrong size on GBMissionObjective_GetUseLinkedActorList");
static_assert(offsetof(GBMissionObjective_GetUseLinkedActorList, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetUseLinkedActorList::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetUseOnlyMissionActors
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetUseOnlyMissionActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetUseOnlyMissionActors) == 0x000001, "Wrong alignment on GBMissionObjective_GetUseOnlyMissionActors");
static_assert(sizeof(GBMissionObjective_GetUseOnlyMissionActors) == 0x000001, "Wrong size on GBMissionObjective_GetUseOnlyMissionActors");
static_assert(offsetof(GBMissionObjective_GetUseOnlyMissionActors, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetUseOnlyMissionActors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBMissionObjective.GetUseSingleLinkedActor
// 0x0001 (0x0001 - 0x0000)
struct GBMissionObjective_GetUseSingleLinkedActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBMissionObjective_GetUseSingleLinkedActor) == 0x000001, "Wrong alignment on GBMissionObjective_GetUseSingleLinkedActor");
static_assert(sizeof(GBMissionObjective_GetUseSingleLinkedActor) == 0x000001, "Wrong size on GBMissionObjective_GetUseSingleLinkedActor");
static_assert(offsetof(GBMissionObjective_GetUseSingleLinkedActor, ReturnValue) == 0x000000, "Member 'GBMissionObjective_GetUseSingleLinkedActor::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBNavBlocker.OnActiveStateChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct GBNavBlocker_OnActiveStateChangedEvent final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBNavBlocker_OnActiveStateChangedEvent) == 0x000001, "Wrong alignment on GBNavBlocker_OnActiveStateChangedEvent");
static_assert(sizeof(GBNavBlocker_OnActiveStateChangedEvent) == 0x000001, "Wrong size on GBNavBlocker_OnActiveStateChangedEvent");
static_assert(offsetof(GBNavBlocker_OnActiveStateChangedEvent, bNewActive) == 0x000000, "Member 'GBNavBlocker_OnActiveStateChangedEvent::bNewActive' has a wrong offset!");

// Function GroundBranch.GBNavLinkProxy_Ladder.GetLadderRef
// 0x0008 (0x0008 - 0x0000)
struct GBNavLinkProxy_Ladder_GetLadderRef final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBNavLinkProxy_Ladder_GetLadderRef) == 0x000008, "Wrong alignment on GBNavLinkProxy_Ladder_GetLadderRef");
static_assert(sizeof(GBNavLinkProxy_Ladder_GetLadderRef) == 0x000008, "Wrong size on GBNavLinkProxy_Ladder_GetLadderRef");
static_assert(offsetof(GBNavLinkProxy_Ladder_GetLadderRef, ReturnValue) == 0x000000, "Member 'GBNavLinkProxy_Ladder_GetLadderRef::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBOperatorDataAsset.MakeUniqueId
// 0x0028 (0x0028 - 0x0000)
struct GBOperatorDataAsset_MakeUniqueId final
{
public:
	class FString                                 FirstName_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Surname_0;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBOperatorDataAsset_MakeUniqueId) == 0x000008, "Wrong alignment on GBOperatorDataAsset_MakeUniqueId");
static_assert(sizeof(GBOperatorDataAsset_MakeUniqueId) == 0x000028, "Wrong size on GBOperatorDataAsset_MakeUniqueId");
static_assert(offsetof(GBOperatorDataAsset_MakeUniqueId, FirstName_0) == 0x000000, "Member 'GBOperatorDataAsset_MakeUniqueId::FirstName_0' has a wrong offset!");
static_assert(offsetof(GBOperatorDataAsset_MakeUniqueId, Surname_0) == 0x000010, "Member 'GBOperatorDataAsset_MakeUniqueId::Surname_0' has a wrong offset!");
static_assert(offsetof(GBOperatorDataAsset_MakeUniqueId, ReturnValue) == 0x000020, "Member 'GBOperatorDataAsset_MakeUniqueId::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBOperatorDataAsset.GetOperatorDetails
// 0x00A8 (0x00A8 - 0x0000)
struct GBOperatorDataAsset_GetOperatorDetails final
{
public:
	struct FGBOperatorDetails                     ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBOperatorDataAsset_GetOperatorDetails) == 0x000008, "Wrong alignment on GBOperatorDataAsset_GetOperatorDetails");
static_assert(sizeof(GBOperatorDataAsset_GetOperatorDetails) == 0x0000A8, "Wrong size on GBOperatorDataAsset_GetOperatorDetails");
static_assert(offsetof(GBOperatorDataAsset_GetOperatorDetails, ReturnValue) == 0x000000, "Member 'GBOperatorDataAsset_GetOperatorDetails::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBOperatorDataAsset.GetUniqueCodename
// 0x0010 (0x0010 - 0x0000)
struct GBOperatorDataAsset_GetUniqueCodename final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBOperatorDataAsset_GetUniqueCodename) == 0x000008, "Wrong alignment on GBOperatorDataAsset_GetUniqueCodename");
static_assert(sizeof(GBOperatorDataAsset_GetUniqueCodename) == 0x000010, "Wrong size on GBOperatorDataAsset_GetUniqueCodename");
static_assert(offsetof(GBOperatorDataAsset_GetUniqueCodename, ReturnValue) == 0x000000, "Member 'GBOperatorDataAsset_GetUniqueCodename::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPatch.OnPlayerStateDelegate
// 0x0008 (0x0008 - 0x0000)
struct GBPatch_OnPlayerStateDelegate final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPatch_OnPlayerStateDelegate) == 0x000008, "Wrong alignment on GBPatch_OnPlayerStateDelegate");
static_assert(sizeof(GBPatch_OnPlayerStateDelegate) == 0x000008, "Wrong size on GBPatch_OnPlayerStateDelegate");
static_assert(offsetof(GBPatch_OnPlayerStateDelegate, GBPlayerState) == 0x000000, "Member 'GBPatch_OnPlayerStateDelegate::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBPatchGeneratorWidget.SetCallSignEvent
// 0x0010 (0x0010 - 0x0000)
struct GBPatchGeneratorWidget_SetCallSignEvent final
{
public:
	class FString                                 NewCallSign;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPatchGeneratorWidget_SetCallSignEvent) == 0x000008, "Wrong alignment on GBPatchGeneratorWidget_SetCallSignEvent");
static_assert(sizeof(GBPatchGeneratorWidget_SetCallSignEvent) == 0x000010, "Wrong size on GBPatchGeneratorWidget_SetCallSignEvent");
static_assert(offsetof(GBPatchGeneratorWidget_SetCallSignEvent, NewCallSign) == 0x000000, "Member 'GBPatchGeneratorWidget_SetCallSignEvent::NewCallSign' has a wrong offset!");

// Function GroundBranch.GBPlatform.OnTakeHit
// 0x0014 (0x0014 - 0x0000)
struct GBPlatform_OnTakeHit final
{
public:
	class FName                                   RefBoneName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RefPosPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlatform_OnTakeHit) == 0x000004, "Wrong alignment on GBPlatform_OnTakeHit");
static_assert(sizeof(GBPlatform_OnTakeHit) == 0x000014, "Wrong size on GBPlatform_OnTakeHit");
static_assert(offsetof(GBPlatform_OnTakeHit, RefBoneName) == 0x000000, "Member 'GBPlatform_OnTakeHit::RefBoneName' has a wrong offset!");
static_assert(offsetof(GBPlatform_OnTakeHit, RefPosPosition) == 0x000008, "Member 'GBPlatform_OnTakeHit::RefPosPosition' has a wrong offset!");

// Function GroundBranch.GBPlayerCameraManager.GetCameraStyle
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerCameraManager_GetCameraStyle final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCameraManager_GetCameraStyle) == 0x000004, "Wrong alignment on GBPlayerCameraManager_GetCameraStyle");
static_assert(sizeof(GBPlayerCameraManager_GetCameraStyle) == 0x000008, "Wrong size on GBPlayerCameraManager_GetCameraStyle");
static_assert(offsetof(GBPlayerCameraManager_GetCameraStyle, ReturnValue) == 0x000000, "Member 'GBPlayerCameraManager_GetCameraStyle::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerCameraManager.GetViewPitchMax
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerCameraManager_GetViewPitchMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCameraManager_GetViewPitchMax) == 0x000004, "Wrong alignment on GBPlayerCameraManager_GetViewPitchMax");
static_assert(sizeof(GBPlayerCameraManager_GetViewPitchMax) == 0x000004, "Wrong size on GBPlayerCameraManager_GetViewPitchMax");
static_assert(offsetof(GBPlayerCameraManager_GetViewPitchMax, ReturnValue) == 0x000000, "Member 'GBPlayerCameraManager_GetViewPitchMax::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerCameraManager.GetViewPitchMin
// 0x0004 (0x0004 - 0x0000)
struct GBPlayerCameraManager_GetViewPitchMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCameraManager_GetViewPitchMin) == 0x000004, "Wrong alignment on GBPlayerCameraManager_GetViewPitchMin");
static_assert(sizeof(GBPlayerCameraManager_GetViewPitchMin) == 0x000004, "Wrong size on GBPlayerCameraManager_GetViewPitchMin");
static_assert(offsetof(GBPlayerCameraManager_GetViewPitchMin, ReturnValue) == 0x000000, "Member 'GBPlayerCameraManager_GetViewPitchMin::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerCommandComponent.AddWaypoint
// 0x0028 (0x0028 - 0x0000)
struct GBPlayerCommandComponent_AddWaypoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIGoCodes                                    GoCode;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIMoveCommand                         ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCommandComponent_AddWaypoint) == 0x000008, "Wrong alignment on GBPlayerCommandComponent_AddWaypoint");
static_assert(sizeof(GBPlayerCommandComponent_AddWaypoint) == 0x000028, "Wrong size on GBPlayerCommandComponent_AddWaypoint");
static_assert(offsetof(GBPlayerCommandComponent_AddWaypoint, Location) == 0x000000, "Member 'GBPlayerCommandComponent_AddWaypoint::Location' has a wrong offset!");
static_assert(offsetof(GBPlayerCommandComponent_AddWaypoint, GoCode) == 0x00000C, "Member 'GBPlayerCommandComponent_AddWaypoint::GoCode' has a wrong offset!");
static_assert(offsetof(GBPlayerCommandComponent_AddWaypoint, ReturnValue) == 0x000010, "Member 'GBPlayerCommandComponent_AddWaypoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPlayerCommandComponent.ChangeROE
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerCommandComponent_ChangeROE final
{
public:
	EAIRulesEngage                                NewROE;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCommandComponent_ChangeROE) == 0x000001, "Wrong alignment on GBPlayerCommandComponent_ChangeROE");
static_assert(sizeof(GBPlayerCommandComponent_ChangeROE) == 0x000001, "Wrong size on GBPlayerCommandComponent_ChangeROE");
static_assert(offsetof(GBPlayerCommandComponent_ChangeROE, NewROE) == 0x000000, "Member 'GBPlayerCommandComponent_ChangeROE::NewROE' has a wrong offset!");

// Function GroundBranch.GBPlayerCommandComponent.DistributeCommand
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerCommandComponent_DistributeCommand final
{
public:
	EGBAICommands                                 Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OptLocation;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OptActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCommandComponent_DistributeCommand) == 0x000008, "Wrong alignment on GBPlayerCommandComponent_DistributeCommand");
static_assert(sizeof(GBPlayerCommandComponent_DistributeCommand) == 0x000018, "Wrong size on GBPlayerCommandComponent_DistributeCommand");
static_assert(offsetof(GBPlayerCommandComponent_DistributeCommand, Command) == 0x000000, "Member 'GBPlayerCommandComponent_DistributeCommand::Command' has a wrong offset!");
static_assert(offsetof(GBPlayerCommandComponent_DistributeCommand, OptLocation) == 0x000004, "Member 'GBPlayerCommandComponent_DistributeCommand::OptLocation' has a wrong offset!");
static_assert(offsetof(GBPlayerCommandComponent_DistributeCommand, OptActor) == 0x000010, "Member 'GBPlayerCommandComponent_DistributeCommand::OptActor' has a wrong offset!");

// Function GroundBranch.GBPlayerCommandComponent.IssueGoCommand
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerCommandComponent_IssueGoCommand final
{
public:
	EAIGoCodes                                    NewGoCode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCommandComponent_IssueGoCommand) == 0x000001, "Wrong alignment on GBPlayerCommandComponent_IssueGoCommand");
static_assert(sizeof(GBPlayerCommandComponent_IssueGoCommand) == 0x000001, "Wrong size on GBPlayerCommandComponent_IssueGoCommand");
static_assert(offsetof(GBPlayerCommandComponent_IssueGoCommand, NewGoCode) == 0x000000, "Member 'GBPlayerCommandComponent_IssueGoCommand::NewGoCode' has a wrong offset!");

// Function GroundBranch.GBPlayerCommandComponent.SetWaypoint
// 0x0018 (0x0018 - 0x0000)
struct GBPlayerCommandComponent_SetWaypoint final
{
public:
	struct FAIMoveCommand                         MoveCommand;                                       // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerCommandComponent_SetWaypoint) == 0x000008, "Wrong alignment on GBPlayerCommandComponent_SetWaypoint");
static_assert(sizeof(GBPlayerCommandComponent_SetWaypoint) == 0x000018, "Wrong size on GBPlayerCommandComponent_SetWaypoint");
static_assert(offsetof(GBPlayerCommandComponent_SetWaypoint, MoveCommand) == 0x000000, "Member 'GBPlayerCommandComponent_SetWaypoint::MoveCommand' has a wrong offset!");

// Function GroundBranch.GBPlayerInput.ApplyPlayerSettings
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerInput_ApplyPlayerSettings final
{
public:
	class UGBPlayerSettings*                      PlayerSettings;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerInput_ApplyPlayerSettings) == 0x000008, "Wrong alignment on GBPlayerInput_ApplyPlayerSettings");
static_assert(sizeof(GBPlayerInput_ApplyPlayerSettings) == 0x000008, "Wrong size on GBPlayerInput_ApplyPlayerSettings");
static_assert(offsetof(GBPlayerInput_ApplyPlayerSettings, PlayerSettings) == 0x000000, "Member 'GBPlayerInput_ApplyPlayerSettings::PlayerSettings' has a wrong offset!");

// Function GroundBranch.GBPlayerNightVisionStatus.OnCameraStyleChanged
// 0x0010 (0x0010 - 0x0000)
struct GBPlayerNightVisionStatus_OnCameraStyleChanged final
{
public:
	class FName                                   OldCameraStyle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewCameraStyle;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerNightVisionStatus_OnCameraStyleChanged) == 0x000004, "Wrong alignment on GBPlayerNightVisionStatus_OnCameraStyleChanged");
static_assert(sizeof(GBPlayerNightVisionStatus_OnCameraStyleChanged) == 0x000010, "Wrong size on GBPlayerNightVisionStatus_OnCameraStyleChanged");
static_assert(offsetof(GBPlayerNightVisionStatus_OnCameraStyleChanged, OldCameraStyle) == 0x000000, "Member 'GBPlayerNightVisionStatus_OnCameraStyleChanged::OldCameraStyle' has a wrong offset!");
static_assert(offsetof(GBPlayerNightVisionStatus_OnCameraStyleChanged, NewCameraStyle) == 0x000008, "Member 'GBPlayerNightVisionStatus_OnCameraStyleChanged::NewCameraStyle' has a wrong offset!");

// Function GroundBranch.GBPlayerNightVisionStatus.OnSpectatorNightVisionModeChanged
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged final
{
public:
	class AGBPlayerController*                    PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged) == 0x000008, "Wrong alignment on GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged");
static_assert(sizeof(GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged) == 0x000008, "Wrong size on GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged");
static_assert(offsetof(GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged, PlayerController) == 0x000000, "Member 'GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged::PlayerController' has a wrong offset!");

// Function GroundBranch.GBPlayerNightVisionStatus.OnViewTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct GBPlayerNightVisionStatus_OnViewTargetChanged final
{
public:
	class AGBPlayerController*                    PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerNightVisionStatus_OnViewTargetChanged) == 0x000008, "Wrong alignment on GBPlayerNightVisionStatus_OnViewTargetChanged");
static_assert(sizeof(GBPlayerNightVisionStatus_OnViewTargetChanged) == 0x000008, "Wrong size on GBPlayerNightVisionStatus_OnViewTargetChanged");
static_assert(offsetof(GBPlayerNightVisionStatus_OnViewTargetChanged, PlayerController) == 0x000000, "Member 'GBPlayerNightVisionStatus_OnViewTargetChanged::PlayerController' has a wrong offset!");

// Function GroundBranch.GBPlayerNightVisionStatus.GetPlayerNightVisionStatus
// 0x0001 (0x0001 - 0x0000)
struct GBPlayerNightVisionStatus_GetPlayerNightVisionStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPlayerNightVisionStatus_GetPlayerNightVisionStatus) == 0x000001, "Wrong alignment on GBPlayerNightVisionStatus_GetPlayerNightVisionStatus");
static_assert(sizeof(GBPlayerNightVisionStatus_GetPlayerNightVisionStatus) == 0x000001, "Wrong size on GBPlayerNightVisionStatus_GetPlayerNightVisionStatus");
static_assert(offsetof(GBPlayerNightVisionStatus_GetPlayerNightVisionStatus, ReturnValue) == 0x000000, "Member 'GBPlayerNightVisionStatus_GetPlayerNightVisionStatus::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBPortalSystemManager.RemoveLight
// 0x0008 (0x0008 - 0x0000)
struct GBPortalSystemManager_RemoveLight final
{
public:
	class ULightComponent*                        LightComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBPortalSystemManager_RemoveLight) == 0x000008, "Wrong alignment on GBPortalSystemManager_RemoveLight");
static_assert(sizeof(GBPortalSystemManager_RemoveLight) == 0x000008, "Wrong size on GBPortalSystemManager_RemoveLight");
static_assert(offsetof(GBPortalSystemManager_RemoveLight, LightComponent) == 0x000000, "Member 'GBPortalSystemManager_RemoveLight::LightComponent' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetAttachmentOverlaps
// 0x0018 (0x0018 - 0x0000)
struct GBRailAttachment_GetAttachmentOverlaps final
{
public:
	bool                                          bForceCollision;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBRailAttachment*>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_GetAttachmentOverlaps) == 0x000008, "Wrong alignment on GBRailAttachment_GetAttachmentOverlaps");
static_assert(sizeof(GBRailAttachment_GetAttachmentOverlaps) == 0x000018, "Wrong size on GBRailAttachment_GetAttachmentOverlaps");
static_assert(offsetof(GBRailAttachment_GetAttachmentOverlaps, bForceCollision) == 0x000000, "Member 'GBRailAttachment_GetAttachmentOverlaps::bForceCollision' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_GetAttachmentOverlaps, ReturnValue) == 0x000008, "Member 'GBRailAttachment_GetAttachmentOverlaps::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetBackOffset
// 0x0010 (0x0010 - 0x0000)
struct GBRailAttachment_GetBackOffset final
{
public:
	struct FVector                                OutBackOffset;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBRailAttachment_GetBackOffset) == 0x000004, "Wrong alignment on GBRailAttachment_GetBackOffset");
static_assert(sizeof(GBRailAttachment_GetBackOffset) == 0x000010, "Wrong size on GBRailAttachment_GetBackOffset");
static_assert(offsetof(GBRailAttachment_GetBackOffset, OutBackOffset) == 0x000000, "Member 'GBRailAttachment_GetBackOffset::OutBackOffset' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_GetBackOffset, ReturnValue) == 0x00000C, "Member 'GBRailAttachment_GetBackOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetRailMountValidation
// 0x0001 (0x0001 - 0x0000)
struct GBRailAttachment_GetRailMountValidation final
{
public:
	ERailMountValidation                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_GetRailMountValidation) == 0x000001, "Wrong alignment on GBRailAttachment_GetRailMountValidation");
static_assert(sizeof(GBRailAttachment_GetRailMountValidation) == 0x000001, "Wrong size on GBRailAttachment_GetRailMountValidation");
static_assert(offsetof(GBRailAttachment_GetRailMountValidation, ReturnValue) == 0x000000, "Member 'GBRailAttachment_GetRailMountValidation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetValidMountPointOffsets
// 0x0018 (0x0018 - 0x0000)
struct GBRailAttachment_GetValidMountPointOffsets final
{
public:
	class AGBInvItem*                             BaseItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_GetValidMountPointOffsets) == 0x000008, "Wrong alignment on GBRailAttachment_GetValidMountPointOffsets");
static_assert(sizeof(GBRailAttachment_GetValidMountPointOffsets) == 0x000018, "Wrong size on GBRailAttachment_GetValidMountPointOffsets");
static_assert(offsetof(GBRailAttachment_GetValidMountPointOffsets, BaseItem) == 0x000000, "Member 'GBRailAttachment_GetValidMountPointOffsets::BaseItem' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_GetValidMountPointOffsets, ReturnValue) == 0x000008, "Member 'GBRailAttachment_GetValidMountPointOffsets::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetValidRailOffsetsFor
// 0x0018 (0x0018 - 0x0000)
struct GBRailAttachment_GetValidRailOffsetsFor final
{
public:
	class AGBFirearm*                             ParentFirearm;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FValidatedRecoilSlots>          OutValidatedRecoilSlots;                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_GetValidRailOffsetsFor) == 0x000008, "Wrong alignment on GBRailAttachment_GetValidRailOffsetsFor");
static_assert(sizeof(GBRailAttachment_GetValidRailOffsetsFor) == 0x000018, "Wrong size on GBRailAttachment_GetValidRailOffsetsFor");
static_assert(offsetof(GBRailAttachment_GetValidRailOffsetsFor, ParentFirearm) == 0x000000, "Member 'GBRailAttachment_GetValidRailOffsetsFor::ParentFirearm' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_GetValidRailOffsetsFor, OutValidatedRecoilSlots) == 0x000008, "Member 'GBRailAttachment_GetValidRailOffsetsFor::OutValidatedRecoilSlots' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.IsCompatibleWithRail
// 0x0010 (0x0010 - 0x0000)
struct GBRailAttachment_IsCompatibleWithRail final
{
public:
	class UGBRailComponent*                       RailComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBRailAttachment_IsCompatibleWithRail) == 0x000008, "Wrong alignment on GBRailAttachment_IsCompatibleWithRail");
static_assert(sizeof(GBRailAttachment_IsCompatibleWithRail) == 0x000010, "Wrong size on GBRailAttachment_IsCompatibleWithRail");
static_assert(offsetof(GBRailAttachment_IsCompatibleWithRail, RailComp) == 0x000000, "Member 'GBRailAttachment_IsCompatibleWithRail::RailComp' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_IsCompatibleWithRail, ReturnValue) == 0x000008, "Member 'GBRailAttachment_IsCompatibleWithRail::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.IsNotTooFarBack
// 0x0018 (0x0018 - 0x0000)
struct GBRailAttachment_IsNotTooFarBack final
{
public:
	class AGBFirearm*                             ParentFirearm;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBRailAttachment_IsNotTooFarBack) == 0x000008, "Wrong alignment on GBRailAttachment_IsNotTooFarBack");
static_assert(sizeof(GBRailAttachment_IsNotTooFarBack) == 0x000018, "Wrong size on GBRailAttachment_IsNotTooFarBack");
static_assert(offsetof(GBRailAttachment_IsNotTooFarBack, ParentFirearm) == 0x000000, "Member 'GBRailAttachment_IsNotTooFarBack::ParentFirearm' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_IsNotTooFarBack, WorldLocation) == 0x000008, "Member 'GBRailAttachment_IsNotTooFarBack::WorldLocation' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_IsNotTooFarBack, ReturnValue) == 0x000014, "Member 'GBRailAttachment_IsNotTooFarBack::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.IsNotTooFarForward
// 0x0018 (0x0018 - 0x0000)
struct GBRailAttachment_IsNotTooFarForward final
{
public:
	class AGBFirearm*                             ParentFirearm;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBRailAttachment_IsNotTooFarForward) == 0x000008, "Wrong alignment on GBRailAttachment_IsNotTooFarForward");
static_assert(sizeof(GBRailAttachment_IsNotTooFarForward) == 0x000018, "Wrong size on GBRailAttachment_IsNotTooFarForward");
static_assert(offsetof(GBRailAttachment_IsNotTooFarForward, ParentFirearm) == 0x000000, "Member 'GBRailAttachment_IsNotTooFarForward::ParentFirearm' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_IsNotTooFarForward, WorldLocation) == 0x000008, "Member 'GBRailAttachment_IsNotTooFarForward::WorldLocation' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_IsNotTooFarForward, ReturnValue) == 0x000014, "Member 'GBRailAttachment_IsNotTooFarForward::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.SetRecoilSlot
// 0x0004 (0x0004 - 0x0000)
struct GBRailAttachment_SetRecoilSlot final
{
public:
	int32                                         NewRecoilSlot;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_SetRecoilSlot) == 0x000004, "Wrong alignment on GBRailAttachment_SetRecoilSlot");
static_assert(sizeof(GBRailAttachment_SetRecoilSlot) == 0x000004, "Wrong size on GBRailAttachment_SetRecoilSlot");
static_assert(offsetof(GBRailAttachment_SetRecoilSlot, NewRecoilSlot) == 0x000000, "Member 'GBRailAttachment_SetRecoilSlot::NewRecoilSlot' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.StackCheck
// 0x0010 (0x0010 - 0x0000)
struct GBRailAttachment_StackCheck final
{
public:
	const class UGBRailComponent*                 RailComp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBRailAttachment_StackCheck) == 0x000008, "Wrong alignment on GBRailAttachment_StackCheck");
static_assert(sizeof(GBRailAttachment_StackCheck) == 0x000010, "Wrong size on GBRailAttachment_StackCheck");
static_assert(offsetof(GBRailAttachment_StackCheck, RailComp) == 0x000000, "Member 'GBRailAttachment_StackCheck::RailComp' has a wrong offset!");
static_assert(offsetof(GBRailAttachment_StackCheck, ReturnValue) == 0x000008, "Member 'GBRailAttachment_StackCheck::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetMountPoints
// 0x0010 (0x0010 - 0x0000)
struct GBRailAttachment_GetMountPoints final
{
public:
	TArray<class UGBRailMountComponent*>          ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_GetMountPoints) == 0x000008, "Wrong alignment on GBRailAttachment_GetMountPoints");
static_assert(sizeof(GBRailAttachment_GetMountPoints) == 0x000010, "Wrong size on GBRailAttachment_GetMountPoints");
static_assert(offsetof(GBRailAttachment_GetMountPoints, ReturnValue) == 0x000000, "Member 'GBRailAttachment_GetMountPoints::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRailAttachment.GetRecoilSlot
// 0x0004 (0x0004 - 0x0000)
struct GBRailAttachment_GetRecoilSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRailAttachment_GetRecoilSlot) == 0x000004, "Wrong alignment on GBRailAttachment_GetRecoilSlot");
static_assert(sizeof(GBRailAttachment_GetRecoilSlot) == 0x000004, "Wrong size on GBRailAttachment_GetRecoilSlot");
static_assert(offsetof(GBRailAttachment_GetRecoilSlot, ReturnValue) == 0x000000, "Member 'GBRailAttachment_GetRecoilSlot::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRestraint.HasLineOfSightToHostage
// 0x0020 (0x0020 - 0x0000)
struct GBRestraint_HasLineOfSightToHostage final
{
public:
	struct FVector                                TraceFrom;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           IgnoreActor;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBRestraint_HasLineOfSightToHostage) == 0x000008, "Wrong alignment on GBRestraint_HasLineOfSightToHostage");
static_assert(sizeof(GBRestraint_HasLineOfSightToHostage) == 0x000020, "Wrong size on GBRestraint_HasLineOfSightToHostage");
static_assert(offsetof(GBRestraint_HasLineOfSightToHostage, TraceFrom) == 0x000000, "Member 'GBRestraint_HasLineOfSightToHostage::TraceFrom' has a wrong offset!");
static_assert(offsetof(GBRestraint_HasLineOfSightToHostage, IgnoreActor) == 0x000010, "Member 'GBRestraint_HasLineOfSightToHostage::IgnoreActor' has a wrong offset!");
static_assert(offsetof(GBRestraint_HasLineOfSightToHostage, ReturnValue) == 0x000018, "Member 'GBRestraint_HasLineOfSightToHostage::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBRestraint.OnBeginCursorOver
// 0x0008 (0x0008 - 0x0000)
struct GBRestraint_OnBeginCursorOver final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_OnBeginCursorOver) == 0x000008, "Wrong alignment on GBRestraint_OnBeginCursorOver");
static_assert(sizeof(GBRestraint_OnBeginCursorOver) == 0x000008, "Wrong size on GBRestraint_OnBeginCursorOver");
static_assert(offsetof(GBRestraint_OnBeginCursorOver, TouchedComponent) == 0x000000, "Member 'GBRestraint_OnBeginCursorOver::TouchedComponent' has a wrong offset!");

// Function GroundBranch.GBRestraint.OnEndCursorOver
// 0x0008 (0x0008 - 0x0000)
struct GBRestraint_OnEndCursorOver final
{
public:
	class UPrimitiveComponent*                    TouchedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_OnEndCursorOver) == 0x000008, "Wrong alignment on GBRestraint_OnEndCursorOver");
static_assert(sizeof(GBRestraint_OnEndCursorOver) == 0x000008, "Wrong size on GBRestraint_OnEndCursorOver");
static_assert(offsetof(GBRestraint_OnEndCursorOver, TouchedComponent) == 0x000000, "Member 'GBRestraint_OnEndCursorOver::TouchedComponent' has a wrong offset!");

// Function GroundBranch.GBRestraint.OnPlayerInteractionChanged
// 0x0008 (0x0008 - 0x0000)
struct GBRestraint_OnPlayerInteractionChanged final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_OnPlayerInteractionChanged) == 0x000008, "Wrong alignment on GBRestraint_OnPlayerInteractionChanged");
static_assert(sizeof(GBRestraint_OnPlayerInteractionChanged) == 0x000008, "Wrong size on GBRestraint_OnPlayerInteractionChanged");
static_assert(offsetof(GBRestraint_OnPlayerInteractionChanged, GBPlayerState) == 0x000000, "Member 'GBRestraint_OnPlayerInteractionChanged::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBRestraint.OnRep_HasIntimidators
// 0x0001 (0x0001 - 0x0000)
struct GBRestraint_OnRep_HasIntimidators final
{
public:
	bool                                          PreviousValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_OnRep_HasIntimidators) == 0x000001, "Wrong alignment on GBRestraint_OnRep_HasIntimidators");
static_assert(sizeof(GBRestraint_OnRep_HasIntimidators) == 0x000001, "Wrong size on GBRestraint_OnRep_HasIntimidators");
static_assert(offsetof(GBRestraint_OnRep_HasIntimidators, PreviousValue) == 0x000000, "Member 'GBRestraint_OnRep_HasIntimidators::PreviousValue' has a wrong offset!");

// Function GroundBranch.GBRestraint.SetLeadingRelationship
// 0x0010 (0x0010 - 0x0000)
struct GBRestraint_SetLeadingRelationship final
{
public:
	class AGBPlayerState*                         LeadingPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerState*                         LedPlayerState;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_SetLeadingRelationship) == 0x000008, "Wrong alignment on GBRestraint_SetLeadingRelationship");
static_assert(sizeof(GBRestraint_SetLeadingRelationship) == 0x000010, "Wrong size on GBRestraint_SetLeadingRelationship");
static_assert(offsetof(GBRestraint_SetLeadingRelationship, LeadingPlayerState) == 0x000000, "Member 'GBRestraint_SetLeadingRelationship::LeadingPlayerState' has a wrong offset!");
static_assert(offsetof(GBRestraint_SetLeadingRelationship, LedPlayerState) == 0x000008, "Member 'GBRestraint_SetLeadingRelationship::LedPlayerState' has a wrong offset!");

// Function GroundBranch.GBRestraint.UnsetLeadingRelationship
// 0x0010 (0x0010 - 0x0000)
struct GBRestraint_UnsetLeadingRelationship final
{
public:
	class AGBPlayerState*                         LeadingPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBPlayerState*                         LedPlayerState;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_UnsetLeadingRelationship) == 0x000008, "Wrong alignment on GBRestraint_UnsetLeadingRelationship");
static_assert(sizeof(GBRestraint_UnsetLeadingRelationship) == 0x000010, "Wrong size on GBRestraint_UnsetLeadingRelationship");
static_assert(offsetof(GBRestraint_UnsetLeadingRelationship, LeadingPlayerState) == 0x000000, "Member 'GBRestraint_UnsetLeadingRelationship::LeadingPlayerState' has a wrong offset!");
static_assert(offsetof(GBRestraint_UnsetLeadingRelationship, LedPlayerState) == 0x000008, "Member 'GBRestraint_UnsetLeadingRelationship::LedPlayerState' has a wrong offset!");

// Function GroundBranch.GBRestraint.UpdatePlayerInteractionStatus
// 0x0008 (0x0008 - 0x0000)
struct GBRestraint_UpdatePlayerInteractionStatus final
{
public:
	class AGBPlayerState*                         PreviousValue;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_UpdatePlayerInteractionStatus) == 0x000008, "Wrong alignment on GBRestraint_UpdatePlayerInteractionStatus");
static_assert(sizeof(GBRestraint_UpdatePlayerInteractionStatus) == 0x000008, "Wrong size on GBRestraint_UpdatePlayerInteractionStatus");
static_assert(offsetof(GBRestraint_UpdatePlayerInteractionStatus, PreviousValue) == 0x000000, "Member 'GBRestraint_UpdatePlayerInteractionStatus::PreviousValue' has a wrong offset!");

// Function GroundBranch.GBRestraint.GetUsingGBPlayerState
// 0x0008 (0x0008 - 0x0000)
struct GBRestraint_GetUsingGBPlayerState final
{
public:
	class AGBPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBRestraint_GetUsingGBPlayerState) == 0x000008, "Wrong alignment on GBRestraint_GetUsingGBPlayerState");
static_assert(sizeof(GBRestraint_GetUsingGBPlayerState) == 0x000008, "Wrong size on GBRestraint_GetUsingGBPlayerState");
static_assert(offsetof(GBRestraint_GetUsingGBPlayerState, ReturnValue) == 0x000000, "Member 'GBRestraint_GetUsingGBPlayerState::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetAmbientNightIllumination
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetAmbientNightIllumination final
{
public:
	float                                         InMoonElevation;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLunarPhase;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyCreatorWeatherPreset*               InWeatherPreset;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetAmbientNightIllumination) == 0x000008, "Wrong alignment on GBSky_GetAmbientNightIllumination");
static_assert(sizeof(GBSky_GetAmbientNightIllumination) == 0x000018, "Wrong size on GBSky_GetAmbientNightIllumination");
static_assert(offsetof(GBSky_GetAmbientNightIllumination, InMoonElevation) == 0x000000, "Member 'GBSky_GetAmbientNightIllumination::InMoonElevation' has a wrong offset!");
static_assert(offsetof(GBSky_GetAmbientNightIllumination, InLunarPhase) == 0x000004, "Member 'GBSky_GetAmbientNightIllumination::InLunarPhase' has a wrong offset!");
static_assert(offsetof(GBSky_GetAmbientNightIllumination, InWeatherPreset) == 0x000008, "Member 'GBSky_GetAmbientNightIllumination::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetAmbientNightIllumination, ReturnValue) == 0x000010, "Member 'GBSky_GetAmbientNightIllumination::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetCloudCover
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetCloudCover final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetCloudCover) == 0x000008, "Wrong alignment on GBSky_GetCloudCover");
static_assert(sizeof(GBSky_GetCloudCover) == 0x000010, "Wrong size on GBSky_GetCloudCover");
static_assert(offsetof(GBSky_GetCloudCover, InWeatherPreset) == 0x000000, "Member 'GBSky_GetCloudCover::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetCloudCover, ReturnValue) == 0x000008, "Member 'GBSky_GetCloudCover::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetFogAmount
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetFogAmount final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetFogAmount) == 0x000008, "Wrong alignment on GBSky_GetFogAmount");
static_assert(sizeof(GBSky_GetFogAmount) == 0x000010, "Wrong size on GBSky_GetFogAmount");
static_assert(offsetof(GBSky_GetFogAmount, InWeatherPreset) == 0x000000, "Member 'GBSky_GetFogAmount::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetFogAmount, ReturnValue) == 0x000008, "Member 'GBSky_GetFogAmount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetGroundCover
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetGroundCover final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroundCoverType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetGroundCover) == 0x000008, "Wrong alignment on GBSky_GetGroundCover");
static_assert(sizeof(GBSky_GetGroundCover) == 0x000010, "Wrong size on GBSky_GetGroundCover");
static_assert(offsetof(GBSky_GetGroundCover, InWeatherPreset) == 0x000000, "Member 'GBSky_GetGroundCover::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetGroundCover, ReturnValue) == 0x000008, "Member 'GBSky_GetGroundCover::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetLunarPhase
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetLunarPhase final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetLunarPhase) == 0x000004, "Wrong alignment on GBSky_GetLunarPhase");
static_assert(sizeof(GBSky_GetLunarPhase) == 0x000010, "Wrong size on GBSky_GetLunarPhase");
static_assert(offsetof(GBSky_GetLunarPhase, InYear) == 0x000000, "Member 'GBSky_GetLunarPhase::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhase, InMonth) == 0x000004, "Member 'GBSky_GetLunarPhase::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhase, InDay) == 0x000008, "Member 'GBSky_GetLunarPhase::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhase, ReturnValue) == 0x00000C, "Member 'GBSky_GetLunarPhase::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetLunarPhaseArea
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetLunarPhaseArea final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetLunarPhaseArea) == 0x000004, "Wrong alignment on GBSky_GetLunarPhaseArea");
static_assert(sizeof(GBSky_GetLunarPhaseArea) == 0x000010, "Wrong size on GBSky_GetLunarPhaseArea");
static_assert(offsetof(GBSky_GetLunarPhaseArea, InYear) == 0x000000, "Member 'GBSky_GetLunarPhaseArea::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhaseArea, InMonth) == 0x000004, "Member 'GBSky_GetLunarPhaseArea::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhaseArea, InDay) == 0x000008, "Member 'GBSky_GetLunarPhaseArea::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhaseArea, ReturnValue) == 0x00000C, "Member 'GBSky_GetLunarPhaseArea::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetLunarPhaseAreaForPhase
// 0x0008 (0x0008 - 0x0000)
struct GBSky_GetLunarPhaseAreaForPhase final
{
public:
	float                                         InPhase;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetLunarPhaseAreaForPhase) == 0x000004, "Wrong alignment on GBSky_GetLunarPhaseAreaForPhase");
static_assert(sizeof(GBSky_GetLunarPhaseAreaForPhase) == 0x000008, "Wrong size on GBSky_GetLunarPhaseAreaForPhase");
static_assert(offsetof(GBSky_GetLunarPhaseAreaForPhase, InPhase) == 0x000000, "Member 'GBSky_GetLunarPhaseAreaForPhase::InPhase' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhaseAreaForPhase, ReturnValue) == 0x000004, "Member 'GBSky_GetLunarPhaseAreaForPhase::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetLunarPhaseName
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetLunarPhaseName final
{
public:
	float                                         InPhase;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetLunarPhaseName) == 0x000008, "Wrong alignment on GBSky_GetLunarPhaseName");
static_assert(sizeof(GBSky_GetLunarPhaseName) == 0x000018, "Wrong size on GBSky_GetLunarPhaseName");
static_assert(offsetof(GBSky_GetLunarPhaseName, InPhase) == 0x000000, "Member 'GBSky_GetLunarPhaseName::InPhase' has a wrong offset!");
static_assert(offsetof(GBSky_GetLunarPhaseName, ReturnValue) == 0x000008, "Member 'GBSky_GetLunarPhaseName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetMoonIllumination
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetMoonIllumination final
{
public:
	float                                         InMoonElevation;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLunarPhase;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyCreatorWeatherPreset*               InWeatherPreset;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetMoonIllumination) == 0x000008, "Wrong alignment on GBSky_GetMoonIllumination");
static_assert(sizeof(GBSky_GetMoonIllumination) == 0x000018, "Wrong size on GBSky_GetMoonIllumination");
static_assert(offsetof(GBSky_GetMoonIllumination, InMoonElevation) == 0x000000, "Member 'GBSky_GetMoonIllumination::InMoonElevation' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonIllumination, InLunarPhase) == 0x000004, "Member 'GBSky_GetMoonIllumination::InLunarPhase' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonIllumination, InWeatherPreset) == 0x000008, "Member 'GBSky_GetMoonIllumination::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonIllumination, ReturnValue) == 0x000010, "Member 'GBSky_GetMoonIllumination::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetNightAidedVisibility
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetNightAidedVisibility final
{
public:
	float                                         InMoonIllumination;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAmbientIllumination;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetNightAidedVisibility) == 0x000008, "Wrong alignment on GBSky_GetNightAidedVisibility");
static_assert(sizeof(GBSky_GetNightAidedVisibility) == 0x000018, "Wrong size on GBSky_GetNightAidedVisibility");
static_assert(offsetof(GBSky_GetNightAidedVisibility, InMoonIllumination) == 0x000000, "Member 'GBSky_GetNightAidedVisibility::InMoonIllumination' has a wrong offset!");
static_assert(offsetof(GBSky_GetNightAidedVisibility, InAmbientIllumination) == 0x000004, "Member 'GBSky_GetNightAidedVisibility::InAmbientIllumination' has a wrong offset!");
static_assert(offsetof(GBSky_GetNightAidedVisibility, InWeatherPreset) == 0x000008, "Member 'GBSky_GetNightAidedVisibility::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetNightAidedVisibility, ReturnValue) == 0x000010, "Member 'GBSky_GetNightAidedVisibility::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetNightUnaidedVisibility
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetNightUnaidedVisibility final
{
public:
	float                                         InMoonIllumination;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAmbientIllumination;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetNightUnaidedVisibility) == 0x000008, "Wrong alignment on GBSky_GetNightUnaidedVisibility");
static_assert(sizeof(GBSky_GetNightUnaidedVisibility) == 0x000018, "Wrong size on GBSky_GetNightUnaidedVisibility");
static_assert(offsetof(GBSky_GetNightUnaidedVisibility, InMoonIllumination) == 0x000000, "Member 'GBSky_GetNightUnaidedVisibility::InMoonIllumination' has a wrong offset!");
static_assert(offsetof(GBSky_GetNightUnaidedVisibility, InAmbientIllumination) == 0x000004, "Member 'GBSky_GetNightUnaidedVisibility::InAmbientIllumination' has a wrong offset!");
static_assert(offsetof(GBSky_GetNightUnaidedVisibility, InWeatherPreset) == 0x000008, "Member 'GBSky_GetNightUnaidedVisibility::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetNightUnaidedVisibility, ReturnValue) == 0x000010, "Member 'GBSky_GetNightUnaidedVisibility::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetRainAmount
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetRainAmount final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetRainAmount) == 0x000008, "Wrong alignment on GBSky_GetRainAmount");
static_assert(sizeof(GBSky_GetRainAmount) == 0x000010, "Wrong size on GBSky_GetRainAmount");
static_assert(offsetof(GBSky_GetRainAmount, InWeatherPreset) == 0x000000, "Member 'GBSky_GetRainAmount::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetRainAmount, ReturnValue) == 0x000008, "Member 'GBSky_GetRainAmount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSnowAmount
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetSnowAmount final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetSnowAmount) == 0x000008, "Wrong alignment on GBSky_GetSnowAmount");
static_assert(sizeof(GBSky_GetSnowAmount) == 0x000010, "Wrong size on GBSky_GetSnowAmount");
static_assert(offsetof(GBSky_GetSnowAmount, InWeatherPreset) == 0x000000, "Member 'GBSky_GetSnowAmount::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetSnowAmount, ReturnValue) == 0x000008, "Member 'GBSky_GetSnowAmount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetVisibilityName
// 0x000C (0x000C - 0x0000)
struct GBSky_GetVisibilityName final
{
public:
	float                                         InVisibility;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetVisibilityName) == 0x000004, "Wrong alignment on GBSky_GetVisibilityName");
static_assert(sizeof(GBSky_GetVisibilityName) == 0x00000C, "Wrong size on GBSky_GetVisibilityName");
static_assert(offsetof(GBSky_GetVisibilityName, InVisibility) == 0x000000, "Member 'GBSky_GetVisibilityName::InVisibility' has a wrong offset!");
static_assert(offsetof(GBSky_GetVisibilityName, ReturnValue) == 0x000004, "Member 'GBSky_GetVisibilityName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetWeatherVisibility
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetWeatherVisibility final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetWeatherVisibility) == 0x000008, "Wrong alignment on GBSky_GetWeatherVisibility");
static_assert(sizeof(GBSky_GetWeatherVisibility) == 0x000010, "Wrong size on GBSky_GetWeatherVisibility");
static_assert(offsetof(GBSky_GetWeatherVisibility, InWeatherPreset) == 0x000000, "Member 'GBSky_GetWeatherVisibility::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetWeatherVisibility, ReturnValue) == 0x000008, "Member 'GBSky_GetWeatherVisibility::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetWindAmount
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetWindAmount final
{
public:
	const class USkyCreatorWeatherPreset*         InWeatherPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetWindAmount) == 0x000008, "Wrong alignment on GBSky_GetWindAmount");
static_assert(sizeof(GBSky_GetWindAmount) == 0x000010, "Wrong size on GBSky_GetWindAmount");
static_assert(offsetof(GBSky_GetWindAmount, InWeatherPreset) == 0x000000, "Member 'GBSky_GetWindAmount::InWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetWindAmount, ReturnValue) == 0x000008, "Member 'GBSky_GetWindAmount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.AddOrUpdateBlendable
// 0x0018 (0x0018 - 0x0000)
struct GBSky_AddOrUpdateBlendable final
{
public:
	TScriptInterface<class IBlendableInterface>   InBlendableObject;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         InWeight;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_AddOrUpdateBlendable) == 0x000008, "Wrong alignment on GBSky_AddOrUpdateBlendable");
static_assert(sizeof(GBSky_AddOrUpdateBlendable) == 0x000018, "Wrong size on GBSky_AddOrUpdateBlendable");
static_assert(offsetof(GBSky_AddOrUpdateBlendable, InBlendableObject) == 0x000000, "Member 'GBSky_AddOrUpdateBlendable::InBlendableObject' has a wrong offset!");
static_assert(offsetof(GBSky_AddOrUpdateBlendable, InWeight) == 0x000010, "Member 'GBSky_AddOrUpdateBlendable::InWeight' has a wrong offset!");

// Function GroundBranch.GBSky.GetCurrentNVGMultiplier
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetCurrentNVGMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetCurrentNVGMultiplier) == 0x000004, "Wrong alignment on GBSky_GetCurrentNVGMultiplier");
static_assert(sizeof(GBSky_GetCurrentNVGMultiplier) == 0x000004, "Wrong size on GBSky_GetCurrentNVGMultiplier");
static_assert(offsetof(GBSky_GetCurrentNVGMultiplier, ReturnValue) == 0x000000, "Member 'GBSky_GetCurrentNVGMultiplier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetMoonlightScalingFactors
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetMoonlightScalingFactors final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetMoonlightScalingFactors) == 0x000004, "Wrong alignment on GBSky_GetMoonlightScalingFactors");
static_assert(sizeof(GBSky_GetMoonlightScalingFactors) == 0x000004, "Wrong size on GBSky_GetMoonlightScalingFactors");
static_assert(offsetof(GBSky_GetMoonlightScalingFactors, ReturnValue) == 0x000000, "Member 'GBSky_GetMoonlightScalingFactors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetRandomWeatherPresetCategoryAndType
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetRandomWeatherPresetCategoryAndType final
{
public:
	class FName                                   OutCategory;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutType;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetRandomWeatherPresetCategoryAndType) == 0x000004, "Wrong alignment on GBSky_GetRandomWeatherPresetCategoryAndType");
static_assert(sizeof(GBSky_GetRandomWeatherPresetCategoryAndType) == 0x000010, "Wrong size on GBSky_GetRandomWeatherPresetCategoryAndType");
static_assert(offsetof(GBSky_GetRandomWeatherPresetCategoryAndType, OutCategory) == 0x000000, "Member 'GBSky_GetRandomWeatherPresetCategoryAndType::OutCategory' has a wrong offset!");
static_assert(offsetof(GBSky_GetRandomWeatherPresetCategoryAndType, OutType) == 0x000008, "Member 'GBSky_GetRandomWeatherPresetCategoryAndType::OutType' has a wrong offset!");

// Function GroundBranch.GBSky.GetRandomWeatherPresetTypeInCategory
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetRandomWeatherPresetTypeInCategory final
{
public:
	class FName                                   InCategory;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetRandomWeatherPresetTypeInCategory) == 0x000004, "Wrong alignment on GBSky_GetRandomWeatherPresetTypeInCategory");
static_assert(sizeof(GBSky_GetRandomWeatherPresetTypeInCategory) == 0x000010, "Wrong size on GBSky_GetRandomWeatherPresetTypeInCategory");
static_assert(offsetof(GBSky_GetRandomWeatherPresetTypeInCategory, InCategory) == 0x000000, "Member 'GBSky_GetRandomWeatherPresetTypeInCategory::InCategory' has a wrong offset!");
static_assert(offsetof(GBSky_GetRandomWeatherPresetTypeInCategory, ReturnValue) == 0x000008, "Member 'GBSky_GetRandomWeatherPresetTypeInCategory::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSkylightScalingFactors
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetSkylightScalingFactors final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSkylightScalingFactors) == 0x000004, "Wrong alignment on GBSky_GetSkylightScalingFactors");
static_assert(sizeof(GBSky_GetSkylightScalingFactors) == 0x000004, "Wrong size on GBSky_GetSkylightScalingFactors");
static_assert(offsetof(GBSky_GetSkylightScalingFactors, ReturnValue) == 0x000000, "Member 'GBSky_GetSkylightScalingFactors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSunAndMoonSequence
// 0x0048 (0x0048 - 0x0000)
struct GBSky_GetSunAndMoonSequence final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfSteps;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 OutTimes;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OutSunSequence;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OutMoonSequence;                                   // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OutSunriseTime;                                    // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSunsetTime;                                     // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSunAndMoonSequence) == 0x000008, "Wrong alignment on GBSky_GetSunAndMoonSequence");
static_assert(sizeof(GBSky_GetSunAndMoonSequence) == 0x000048, "Wrong size on GBSky_GetSunAndMoonSequence");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, InYear) == 0x000000, "Member 'GBSky_GetSunAndMoonSequence::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, InMonth) == 0x000004, "Member 'GBSky_GetSunAndMoonSequence::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, InDay) == 0x000008, "Member 'GBSky_GetSunAndMoonSequence::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, NumberOfSteps) == 0x00000C, "Member 'GBSky_GetSunAndMoonSequence::NumberOfSteps' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, OutTimes) == 0x000010, "Member 'GBSky_GetSunAndMoonSequence::OutTimes' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, OutSunSequence) == 0x000020, "Member 'GBSky_GetSunAndMoonSequence::OutSunSequence' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, OutMoonSequence) == 0x000030, "Member 'GBSky_GetSunAndMoonSequence::OutMoonSequence' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, OutSunriseTime) == 0x000040, "Member 'GBSky_GetSunAndMoonSequence::OutSunriseTime' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunAndMoonSequence, OutSunsetTime) == 0x000044, "Member 'GBSky_GetSunAndMoonSequence::OutSunsetTime' has a wrong offset!");

// Function GroundBranch.GBSky.GetTimeSpanTagBlended
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetTimeSpanTagBlended final
{
public:
	EGBTimeSpanBlendType                          BlendType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBBlendedTimeSpan                     ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetTimeSpanTagBlended) == 0x000004, "Wrong alignment on GBSky_GetTimeSpanTagBlended");
static_assert(sizeof(GBSky_GetTimeSpanTagBlended) == 0x000018, "Wrong size on GBSky_GetTimeSpanTagBlended");
static_assert(offsetof(GBSky_GetTimeSpanTagBlended, BlendType) == 0x000000, "Member 'GBSky_GetTimeSpanTagBlended::BlendType' has a wrong offset!");
static_assert(offsetof(GBSky_GetTimeSpanTagBlended, ReturnValue) == 0x000004, "Member 'GBSky_GetTimeSpanTagBlended::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.IsTimeSpanNearlyEqual
// 0x0024 (0x0024 - 0x0000)
struct GBSky_IsTimeSpanNearlyEqual final
{
public:
	struct FGBBlendedTimeSpan                     Timespan;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DesiredTimeSpan;                                   // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountNeeded;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_IsTimeSpanNearlyEqual) == 0x000004, "Wrong alignment on GBSky_IsTimeSpanNearlyEqual");
static_assert(sizeof(GBSky_IsTimeSpanNearlyEqual) == 0x000024, "Wrong size on GBSky_IsTimeSpanNearlyEqual");
static_assert(offsetof(GBSky_IsTimeSpanNearlyEqual, Timespan) == 0x000000, "Member 'GBSky_IsTimeSpanNearlyEqual::Timespan' has a wrong offset!");
static_assert(offsetof(GBSky_IsTimeSpanNearlyEqual, DesiredTimeSpan) == 0x000014, "Member 'GBSky_IsTimeSpanNearlyEqual::DesiredTimeSpan' has a wrong offset!");
static_assert(offsetof(GBSky_IsTimeSpanNearlyEqual, AmountNeeded) == 0x00001C, "Member 'GBSky_IsTimeSpanNearlyEqual::AmountNeeded' has a wrong offset!");
static_assert(offsetof(GBSky_IsTimeSpanNearlyEqual, ReturnValue) == 0x000020, "Member 'GBSky_IsTimeSpanNearlyEqual::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.MapStandardHourToActualHour
// 0x0010 (0x0010 - 0x0000)
struct GBSky_MapStandardHourToActualHour final
{
public:
	float                                         StandardHour;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunriseTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunsetTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_MapStandardHourToActualHour) == 0x000004, "Wrong alignment on GBSky_MapStandardHourToActualHour");
static_assert(sizeof(GBSky_MapStandardHourToActualHour) == 0x000010, "Wrong size on GBSky_MapStandardHourToActualHour");
static_assert(offsetof(GBSky_MapStandardHourToActualHour, StandardHour) == 0x000000, "Member 'GBSky_MapStandardHourToActualHour::StandardHour' has a wrong offset!");
static_assert(offsetof(GBSky_MapStandardHourToActualHour, InSunriseTime) == 0x000004, "Member 'GBSky_MapStandardHourToActualHour::InSunriseTime' has a wrong offset!");
static_assert(offsetof(GBSky_MapStandardHourToActualHour, InSunsetTime) == 0x000008, "Member 'GBSky_MapStandardHourToActualHour::InSunsetTime' has a wrong offset!");
static_assert(offsetof(GBSky_MapStandardHourToActualHour, ReturnValue) == 0x00000C, "Member 'GBSky_MapStandardHourToActualHour::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.OnChangedInitialTimeOfDay
// 0x0001 (0x0001 - 0x0000)
struct GBSky_OnChangedInitialTimeOfDay final
{
public:
	bool                                          bIsTransitionalTime;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_OnChangedInitialTimeOfDay) == 0x000001, "Wrong alignment on GBSky_OnChangedInitialTimeOfDay");
static_assert(sizeof(GBSky_OnChangedInitialTimeOfDay) == 0x000001, "Wrong size on GBSky_OnChangedInitialTimeOfDay");
static_assert(offsetof(GBSky_OnChangedInitialTimeOfDay, bIsTransitionalTime) == 0x000000, "Member 'GBSky_OnChangedInitialTimeOfDay::bIsTransitionalTime' has a wrong offset!");

// Function GroundBranch.GBSky.OnTimeChangeEvent
// 0x0001 (0x0001 - 0x0000)
struct GBSky_OnTimeChangeEvent final
{
public:
	bool                                          bIsTransitionalTime;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_OnTimeChangeEvent) == 0x000001, "Wrong alignment on GBSky_OnTimeChangeEvent");
static_assert(sizeof(GBSky_OnTimeChangeEvent) == 0x000001, "Wrong size on GBSky_OnTimeChangeEvent");
static_assert(offsetof(GBSky_OnTimeChangeEvent, bIsTransitionalTime) == 0x000000, "Member 'GBSky_OnTimeChangeEvent::bIsTransitionalTime' has a wrong offset!");

// Function GroundBranch.GBSky.ResetTimeOfDayAlarms
// 0x0010 (0x0010 - 0x0000)
struct GBSky_ResetTimeOfDayAlarms final
{
public:
	TArray<struct FGBTimeOfDayAlarm>              TimeOfDayAlarmInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_ResetTimeOfDayAlarms) == 0x000008, "Wrong alignment on GBSky_ResetTimeOfDayAlarms");
static_assert(sizeof(GBSky_ResetTimeOfDayAlarms) == 0x000010, "Wrong size on GBSky_ResetTimeOfDayAlarms");
static_assert(offsetof(GBSky_ResetTimeOfDayAlarms, TimeOfDayAlarmInfo) == 0x000000, "Member 'GBSky_ResetTimeOfDayAlarms::TimeOfDayAlarmInfo' has a wrong offset!");

// Function GroundBranch.GBSky.SetCurrentWeatherPreset
// 0x0008 (0x0008 - 0x0000)
struct GBSky_SetCurrentWeatherPreset final
{
public:
	class USkyCreatorWeatherPreset*               InWeatherPreset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetCurrentWeatherPreset) == 0x000008, "Wrong alignment on GBSky_SetCurrentWeatherPreset");
static_assert(sizeof(GBSky_SetCurrentWeatherPreset) == 0x000008, "Wrong size on GBSky_SetCurrentWeatherPreset");
static_assert(offsetof(GBSky_SetCurrentWeatherPreset, InWeatherPreset) == 0x000000, "Member 'GBSky_SetCurrentWeatherPreset::InWeatherPreset' has a wrong offset!");

// Function GroundBranch.GBSky.SetInitialTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct GBSky_SetInitialTimeOfDay final
{
public:
	int32                                         NewInitialTimeOfDay;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetInitialTimeOfDay) == 0x000004, "Wrong alignment on GBSky_SetInitialTimeOfDay");
static_assert(sizeof(GBSky_SetInitialTimeOfDay) == 0x000004, "Wrong size on GBSky_SetInitialTimeOfDay");
static_assert(offsetof(GBSky_SetInitialTimeOfDay, NewInitialTimeOfDay) == 0x000000, "Member 'GBSky_SetInitialTimeOfDay::NewInitialTimeOfDay' has a wrong offset!");

// Function GroundBranch.GBSky.SetLowerHemisphereDesaturateAmount
// 0x0004 (0x0004 - 0x0000)
struct GBSky_SetLowerHemisphereDesaturateAmount final
{
public:
	float                                         InDesaturateAmount;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetLowerHemisphereDesaturateAmount) == 0x000004, "Wrong alignment on GBSky_SetLowerHemisphereDesaturateAmount");
static_assert(sizeof(GBSky_SetLowerHemisphereDesaturateAmount) == 0x000004, "Wrong size on GBSky_SetLowerHemisphereDesaturateAmount");
static_assert(offsetof(GBSky_SetLowerHemisphereDesaturateAmount, InDesaturateAmount) == 0x000000, "Member 'GBSky_SetLowerHemisphereDesaturateAmount::InDesaturateAmount' has a wrong offset!");

// Function GroundBranch.GBSky.SetMissionTimePreset
// 0x0001 (0x0001 - 0x0000)
struct GBSky_SetMissionTimePreset final
{
public:
	EMissionTimeLabel                             InMissionTimePreset;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetMissionTimePreset) == 0x000001, "Wrong alignment on GBSky_SetMissionTimePreset");
static_assert(sizeof(GBSky_SetMissionTimePreset) == 0x000001, "Wrong size on GBSky_SetMissionTimePreset");
static_assert(offsetof(GBSky_SetMissionTimePreset, InMissionTimePreset) == 0x000000, "Member 'GBSky_SetMissionTimePreset::InMissionTimePreset' has a wrong offset!");

// Function GroundBranch.GBSky.SetMoonlightScaling
// 0x0004 (0x0004 - 0x0000)
struct GBSky_SetMoonlightScaling final
{
public:
	float                                         NewMoonlightScaling;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetMoonlightScaling) == 0x000004, "Wrong alignment on GBSky_SetMoonlightScaling");
static_assert(sizeof(GBSky_SetMoonlightScaling) == 0x000004, "Wrong size on GBSky_SetMoonlightScaling");
static_assert(offsetof(GBSky_SetMoonlightScaling, NewMoonlightScaling) == 0x000000, "Member 'GBSky_SetMoonlightScaling::NewMoonlightScaling' has a wrong offset!");

// Function GroundBranch.GBSky.SetSkylightScaling
// 0x0004 (0x0004 - 0x0000)
struct GBSky_SetSkylightScaling final
{
public:
	float                                         NewSkylightScaling;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetSkylightScaling) == 0x000004, "Wrong alignment on GBSky_SetSkylightScaling");
static_assert(sizeof(GBSky_SetSkylightScaling) == 0x000004, "Wrong size on GBSky_SetSkylightScaling");
static_assert(offsetof(GBSky_SetSkylightScaling, NewSkylightScaling) == 0x000000, "Member 'GBSky_SetSkylightScaling::NewSkylightScaling' has a wrong offset!");

// Function GroundBranch.GBSky.SetSkylightScalingOverride
// 0x000C (0x000C - 0x0000)
struct GBSky_SetSkylightScalingOverride final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetSkylightScalingOverride) == 0x000004, "Wrong alignment on GBSky_SetSkylightScalingOverride");
static_assert(sizeof(GBSky_SetSkylightScalingOverride) == 0x00000C, "Wrong size on GBSky_SetSkylightScalingOverride");
static_assert(offsetof(GBSky_SetSkylightScalingOverride, Type) == 0x000000, "Member 'GBSky_SetSkylightScalingOverride::Type' has a wrong offset!");
static_assert(offsetof(GBSky_SetSkylightScalingOverride, Alpha) == 0x000008, "Member 'GBSky_SetSkylightScalingOverride::Alpha' has a wrong offset!");

// Function GroundBranch.GBSky.SetSunlightScaling
// 0x0004 (0x0004 - 0x0000)
struct GBSky_SetSunlightScaling final
{
public:
	float                                         NewSunlightScaling;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetSunlightScaling) == 0x000004, "Wrong alignment on GBSky_SetSunlightScaling");
static_assert(sizeof(GBSky_SetSunlightScaling) == 0x000004, "Wrong size on GBSky_SetSunlightScaling");
static_assert(offsetof(GBSky_SetSunlightScaling, NewSunlightScaling) == 0x000000, "Member 'GBSky_SetSunlightScaling::NewSunlightScaling' has a wrong offset!");

// Function GroundBranch.GBSky.SetTimeOfDayAlarms
// 0x0010 (0x0010 - 0x0000)
struct GBSky_SetTimeOfDayAlarms final
{
public:
	TArray<struct FGBTimeOfDayAlarm>              TimeOfDayAlarmInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetTimeOfDayAlarms) == 0x000008, "Wrong alignment on GBSky_SetTimeOfDayAlarms");
static_assert(sizeof(GBSky_SetTimeOfDayAlarms) == 0x000010, "Wrong size on GBSky_SetTimeOfDayAlarms");
static_assert(offsetof(GBSky_SetTimeOfDayAlarms, TimeOfDayAlarmInfo) == 0x000000, "Member 'GBSky_SetTimeOfDayAlarms::TimeOfDayAlarmInfo' has a wrong offset!");

// Function GroundBranch.GBSky.SetTimeOfDayFromString
// 0x0010 (0x0010 - 0x0000)
struct GBSky_SetTimeOfDayFromString final
{
public:
	class FString                                 TimeOfDayString;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetTimeOfDayFromString) == 0x000008, "Wrong alignment on GBSky_SetTimeOfDayFromString");
static_assert(sizeof(GBSky_SetTimeOfDayFromString) == 0x000010, "Wrong size on GBSky_SetTimeOfDayFromString");
static_assert(offsetof(GBSky_SetTimeOfDayFromString, TimeOfDayString) == 0x000000, "Member 'GBSky_SetTimeOfDayFromString::TimeOfDayString' has a wrong offset!");

// Function GroundBranch.GBSky.SetWeatherSystemIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct GBSky_SetWeatherSystemIsEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetWeatherSystemIsEnabled) == 0x000001, "Wrong alignment on GBSky_SetWeatherSystemIsEnabled");
static_assert(sizeof(GBSky_SetWeatherSystemIsEnabled) == 0x000001, "Wrong size on GBSky_SetWeatherSystemIsEnabled");
static_assert(offsetof(GBSky_SetWeatherSystemIsEnabled, bIsEnabled) == 0x000000, "Member 'GBSky_SetWeatherSystemIsEnabled::bIsEnabled' has a wrong offset!");

// Function GroundBranch.GBSky.SetYearMonthDay
// 0x000C (0x000C - 0x0000)
struct GBSky_SetYearMonthDay final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_SetYearMonthDay) == 0x000004, "Wrong alignment on GBSky_SetYearMonthDay");
static_assert(sizeof(GBSky_SetYearMonthDay) == 0x00000C, "Wrong size on GBSky_SetYearMonthDay");
static_assert(offsetof(GBSky_SetYearMonthDay, InYear) == 0x000000, "Member 'GBSky_SetYearMonthDay::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_SetYearMonthDay, InMonth) == 0x000004, "Member 'GBSky_SetYearMonthDay::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_SetYearMonthDay, InDay) == 0x000008, "Member 'GBSky_SetYearMonthDay::InDay' has a wrong offset!");

// Function GroundBranch.GBSky.UnsetTimeOfDayAlarms
// 0x0010 (0x0010 - 0x0000)
struct GBSky_UnsetTimeOfDayAlarms final
{
public:
	TArray<struct FGBTimeOfDayAlarm>              TimeOfDayAlarmInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_UnsetTimeOfDayAlarms) == 0x000008, "Wrong alignment on GBSky_UnsetTimeOfDayAlarms");
static_assert(sizeof(GBSky_UnsetTimeOfDayAlarms) == 0x000010, "Wrong size on GBSky_UnsetTimeOfDayAlarms");
static_assert(offsetof(GBSky_UnsetTimeOfDayAlarms, TimeOfDayAlarmInfo) == 0x000000, "Member 'GBSky_UnsetTimeOfDayAlarms::TimeOfDayAlarmInfo' has a wrong offset!");

// Function GroundBranch.GBSky.GetAllWeatherPresets
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetAllWeatherPresets final
{
public:
	bool                                          bAllSeasons;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeason                                       SelectedSeason;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkyCreatorWeatherPreset*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetAllWeatherPresets) == 0x000008, "Wrong alignment on GBSky_GetAllWeatherPresets");
static_assert(sizeof(GBSky_GetAllWeatherPresets) == 0x000018, "Wrong size on GBSky_GetAllWeatherPresets");
static_assert(offsetof(GBSky_GetAllWeatherPresets, bAllSeasons) == 0x000000, "Member 'GBSky_GetAllWeatherPresets::bAllSeasons' has a wrong offset!");
static_assert(offsetof(GBSky_GetAllWeatherPresets, SelectedSeason) == 0x000001, "Member 'GBSky_GetAllWeatherPresets::SelectedSeason' has a wrong offset!");
static_assert(offsetof(GBSky_GetAllWeatherPresets, ReturnValue) == 0x000008, "Member 'GBSky_GetAllWeatherPresets::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetCurrentMoonlightStrength
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetCurrentMoonlightStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetCurrentMoonlightStrength) == 0x000004, "Wrong alignment on GBSky_GetCurrentMoonlightStrength");
static_assert(sizeof(GBSky_GetCurrentMoonlightStrength) == 0x000004, "Wrong size on GBSky_GetCurrentMoonlightStrength");
static_assert(offsetof(GBSky_GetCurrentMoonlightStrength, ReturnValue) == 0x000000, "Member 'GBSky_GetCurrentMoonlightStrength::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetCurrentSeason
// 0x0001 (0x0001 - 0x0000)
struct GBSky_GetCurrentSeason final
{
public:
	ESeason                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetCurrentSeason) == 0x000001, "Wrong alignment on GBSky_GetCurrentSeason");
static_assert(sizeof(GBSky_GetCurrentSeason) == 0x000001, "Wrong size on GBSky_GetCurrentSeason");
static_assert(offsetof(GBSky_GetCurrentSeason, ReturnValue) == 0x000000, "Member 'GBSky_GetCurrentSeason::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetCurrentSunlightStrength
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetCurrentSunlightStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetCurrentSunlightStrength) == 0x000004, "Wrong alignment on GBSky_GetCurrentSunlightStrength");
static_assert(sizeof(GBSky_GetCurrentSunlightStrength) == 0x000004, "Wrong size on GBSky_GetCurrentSunlightStrength");
static_assert(offsetof(GBSky_GetCurrentSunlightStrength, ReturnValue) == 0x000000, "Member 'GBSky_GetCurrentSunlightStrength::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetCurrentWeatherPreset
// 0x0008 (0x0008 - 0x0000)
struct GBSky_GetCurrentWeatherPreset final
{
public:
	class USkyCreatorWeatherPreset*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetCurrentWeatherPreset) == 0x000008, "Wrong alignment on GBSky_GetCurrentWeatherPreset");
static_assert(sizeof(GBSky_GetCurrentWeatherPreset) == 0x000008, "Wrong size on GBSky_GetCurrentWeatherPreset");
static_assert(offsetof(GBSky_GetCurrentWeatherPreset, ReturnValue) == 0x000000, "Member 'GBSky_GetCurrentWeatherPreset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetDSTOnDate
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetDSTOnDate final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBSky_GetDSTOnDate) == 0x000004, "Wrong alignment on GBSky_GetDSTOnDate");
static_assert(sizeof(GBSky_GetDSTOnDate) == 0x000010, "Wrong size on GBSky_GetDSTOnDate");
static_assert(offsetof(GBSky_GetDSTOnDate, InYear) == 0x000000, "Member 'GBSky_GetDSTOnDate::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetDSTOnDate, InMonth) == 0x000004, "Member 'GBSky_GetDSTOnDate::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetDSTOnDate, InDay) == 0x000008, "Member 'GBSky_GetDSTOnDate::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetDSTOnDate, ReturnValue) == 0x00000C, "Member 'GBSky_GetDSTOnDate::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetHour
// 0x0008 (0x0008 - 0x0000)
struct GBSky_GetHour final
{
public:
	bool                                          bGetTargetTime;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetHour) == 0x000004, "Wrong alignment on GBSky_GetHour");
static_assert(sizeof(GBSky_GetHour) == 0x000008, "Wrong size on GBSky_GetHour");
static_assert(offsetof(GBSky_GetHour, bGetTargetTime) == 0x000000, "Member 'GBSky_GetHour::bGetTargetTime' has a wrong offset!");
static_assert(offsetof(GBSky_GetHour, ReturnValue) == 0x000004, "Member 'GBSky_GetHour::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetHoursMinutesSeconds
// 0x000C (0x000C - 0x0000)
struct GBSky_GetHoursMinutesSeconds final
{
public:
	int32                                         OutHours;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMinutes;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeconds;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetHoursMinutesSeconds) == 0x000004, "Wrong alignment on GBSky_GetHoursMinutesSeconds");
static_assert(sizeof(GBSky_GetHoursMinutesSeconds) == 0x00000C, "Wrong size on GBSky_GetHoursMinutesSeconds");
static_assert(offsetof(GBSky_GetHoursMinutesSeconds, OutHours) == 0x000000, "Member 'GBSky_GetHoursMinutesSeconds::OutHours' has a wrong offset!");
static_assert(offsetof(GBSky_GetHoursMinutesSeconds, OutMinutes) == 0x000004, "Member 'GBSky_GetHoursMinutesSeconds::OutMinutes' has a wrong offset!");
static_assert(offsetof(GBSky_GetHoursMinutesSeconds, OutSeconds) == 0x000008, "Member 'GBSky_GetHoursMinutesSeconds::OutSeconds' has a wrong offset!");

// Function GroundBranch.GBSky.GetInitialTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetInitialTimeOfDay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetInitialTimeOfDay) == 0x000004, "Wrong alignment on GBSky_GetInitialTimeOfDay");
static_assert(sizeof(GBSky_GetInitialTimeOfDay) == 0x000004, "Wrong size on GBSky_GetInitialTimeOfDay");
static_assert(offsetof(GBSky_GetInitialTimeOfDay, ReturnValue) == 0x000000, "Member 'GBSky_GetInitialTimeOfDay::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetMinLightLevelScale
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetMinLightLevelScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetMinLightLevelScale) == 0x000004, "Wrong alignment on GBSky_GetMinLightLevelScale");
static_assert(sizeof(GBSky_GetMinLightLevelScale) == 0x000004, "Wrong size on GBSky_GetMinLightLevelScale");
static_assert(offsetof(GBSky_GetMinLightLevelScale, ReturnValue) == 0x000000, "Member 'GBSky_GetMinLightLevelScale::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetMissionTimePreset
// 0x0001 (0x0001 - 0x0000)
struct GBSky_GetMissionTimePreset final
{
public:
	EMissionTimeLabel                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetMissionTimePreset) == 0x000001, "Wrong alignment on GBSky_GetMissionTimePreset");
static_assert(sizeof(GBSky_GetMissionTimePreset) == 0x000001, "Wrong size on GBSky_GetMissionTimePreset");
static_assert(offsetof(GBSky_GetMissionTimePreset, ReturnValue) == 0x000000, "Member 'GBSky_GetMissionTimePreset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetMoonElevation
// 0x001C (0x001C - 0x0000)
struct GBSky_GetMoonElevation final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHours;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMinutes;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSeconds;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetMoonElevation) == 0x000004, "Wrong alignment on GBSky_GetMoonElevation");
static_assert(sizeof(GBSky_GetMoonElevation) == 0x00001C, "Wrong size on GBSky_GetMoonElevation");
static_assert(offsetof(GBSky_GetMoonElevation, InYear) == 0x000000, "Member 'GBSky_GetMoonElevation::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonElevation, InMonth) == 0x000004, "Member 'GBSky_GetMoonElevation::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonElevation, InDay) == 0x000008, "Member 'GBSky_GetMoonElevation::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonElevation, InHours) == 0x00000C, "Member 'GBSky_GetMoonElevation::InHours' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonElevation, InMinutes) == 0x000010, "Member 'GBSky_GetMoonElevation::InMinutes' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonElevation, InSeconds) == 0x000014, "Member 'GBSky_GetMoonElevation::InSeconds' has a wrong offset!");
static_assert(offsetof(GBSky_GetMoonElevation, ReturnValue) == 0x000018, "Member 'GBSky_GetMoonElevation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetMoonlightScaling
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetMoonlightScaling final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetMoonlightScaling) == 0x000004, "Wrong alignment on GBSky_GetMoonlightScaling");
static_assert(sizeof(GBSky_GetMoonlightScaling) == 0x000004, "Wrong size on GBSky_GetMoonlightScaling");
static_assert(offsetof(GBSky_GetMoonlightScaling, ReturnValue) == 0x000000, "Member 'GBSky_GetMoonlightScaling::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetNorthOffset
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetNorthOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetNorthOffset) == 0x000004, "Wrong alignment on GBSky_GetNorthOffset");
static_assert(sizeof(GBSky_GetNorthOffset) == 0x000004, "Wrong size on GBSky_GetNorthOffset");
static_assert(offsetof(GBSky_GetNorthOffset, ReturnValue) == 0x000000, "Member 'GBSky_GetNorthOffset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSkylightScaling
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetSkylightScaling final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSkylightScaling) == 0x000004, "Wrong alignment on GBSky_GetSkylightScaling");
static_assert(sizeof(GBSky_GetSkylightScaling) == 0x000004, "Wrong size on GBSky_GetSkylightScaling");
static_assert(offsetof(GBSky_GetSkylightScaling, ReturnValue) == 0x000000, "Member 'GBSky_GetSkylightScaling::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetStandardHour
// 0x0008 (0x0008 - 0x0000)
struct GBSky_GetStandardHour final
{
public:
	bool                                          bGetTargetTime;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetStandardHour) == 0x000004, "Wrong alignment on GBSky_GetStandardHour");
static_assert(sizeof(GBSky_GetStandardHour) == 0x000008, "Wrong size on GBSky_GetStandardHour");
static_assert(offsetof(GBSky_GetStandardHour, bGetTargetTime) == 0x000000, "Member 'GBSky_GetStandardHour::bGetTargetTime' has a wrong offset!");
static_assert(offsetof(GBSky_GetStandardHour, ReturnValue) == 0x000004, "Member 'GBSky_GetStandardHour::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSunElevation
// 0x001C (0x001C - 0x0000)
struct GBSky_GetSunElevation final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHours;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMinutes;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSeconds;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSunElevation) == 0x000004, "Wrong alignment on GBSky_GetSunElevation");
static_assert(sizeof(GBSky_GetSunElevation) == 0x00001C, "Wrong size on GBSky_GetSunElevation");
static_assert(offsetof(GBSky_GetSunElevation, InYear) == 0x000000, "Member 'GBSky_GetSunElevation::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunElevation, InMonth) == 0x000004, "Member 'GBSky_GetSunElevation::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunElevation, InDay) == 0x000008, "Member 'GBSky_GetSunElevation::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunElevation, InHours) == 0x00000C, "Member 'GBSky_GetSunElevation::InHours' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunElevation, InMinutes) == 0x000010, "Member 'GBSky_GetSunElevation::InMinutes' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunElevation, InSeconds) == 0x000014, "Member 'GBSky_GetSunElevation::InSeconds' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunElevation, ReturnValue) == 0x000018, "Member 'GBSky_GetSunElevation::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSunlightScaling
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetSunlightScaling final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSunlightScaling) == 0x000004, "Wrong alignment on GBSky_GetSunlightScaling");
static_assert(sizeof(GBSky_GetSunlightScaling) == 0x000004, "Wrong size on GBSky_GetSunlightScaling");
static_assert(offsetof(GBSky_GetSunlightScaling, ReturnValue) == 0x000000, "Member 'GBSky_GetSunlightScaling::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSunlightScalingFactors
// 0x0004 (0x0004 - 0x0000)
struct GBSky_GetSunlightScalingFactors final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSunlightScalingFactors) == 0x000004, "Wrong alignment on GBSky_GetSunlightScalingFactors");
static_assert(sizeof(GBSky_GetSunlightScalingFactors) == 0x000004, "Wrong size on GBSky_GetSunlightScalingFactors");
static_assert(offsetof(GBSky_GetSunlightScalingFactors, ReturnValue) == 0x000000, "Member 'GBSky_GetSunlightScalingFactors::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetSunriseAndSunsetTime
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetSunriseAndSunsetTime final
{
public:
	int32                                         InYear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSunriseTime;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSunsetTime;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfEvaluationSteps;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetSunriseAndSunsetTime) == 0x000004, "Wrong alignment on GBSky_GetSunriseAndSunsetTime");
static_assert(sizeof(GBSky_GetSunriseAndSunsetTime) == 0x000018, "Wrong size on GBSky_GetSunriseAndSunsetTime");
static_assert(offsetof(GBSky_GetSunriseAndSunsetTime, InYear) == 0x000000, "Member 'GBSky_GetSunriseAndSunsetTime::InYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunriseAndSunsetTime, InMonth) == 0x000004, "Member 'GBSky_GetSunriseAndSunsetTime::InMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunriseAndSunsetTime, InDay) == 0x000008, "Member 'GBSky_GetSunriseAndSunsetTime::InDay' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunriseAndSunsetTime, OutSunriseTime) == 0x00000C, "Member 'GBSky_GetSunriseAndSunsetTime::OutSunriseTime' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunriseAndSunsetTime, OutSunsetTime) == 0x000010, "Member 'GBSky_GetSunriseAndSunsetTime::OutSunsetTime' has a wrong offset!");
static_assert(offsetof(GBSky_GetSunriseAndSunsetTime, NumberOfEvaluationSteps) == 0x000014, "Member 'GBSky_GetSunriseAndSunsetTime::NumberOfEvaluationSteps' has a wrong offset!");

// Function GroundBranch.GBSky.GetTimeOfDayString
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetTimeOfDayString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetTimeOfDayString) == 0x000008, "Wrong alignment on GBSky_GetTimeOfDayString");
static_assert(sizeof(GBSky_GetTimeOfDayString) == 0x000010, "Wrong size on GBSky_GetTimeOfDayString");
static_assert(offsetof(GBSky_GetTimeOfDayString, ReturnValue) == 0x000000, "Member 'GBSky_GetTimeOfDayString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetTimeSpanTag
// 0x0008 (0x0008 - 0x0000)
struct GBSky_GetTimeSpanTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetTimeSpanTag) == 0x000004, "Wrong alignment on GBSky_GetTimeSpanTag");
static_assert(sizeof(GBSky_GetTimeSpanTag) == 0x000008, "Wrong size on GBSky_GetTimeSpanTag");
static_assert(offsetof(GBSky_GetTimeSpanTag, ReturnValue) == 0x000000, "Member 'GBSky_GetTimeSpanTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetWeatherPresetProperties
// 0x0030 (0x0030 - 0x0000)
struct GBSky_GetWeatherPresetProperties final
{
public:
	const class USkyCreatorWeatherPreset*         SelectedWeatherPreset;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherCategory;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutWeatherType;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutWeatherDescription;                             // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetWeatherPresetProperties) == 0x000008, "Wrong alignment on GBSky_GetWeatherPresetProperties");
static_assert(sizeof(GBSky_GetWeatherPresetProperties) == 0x000030, "Wrong size on GBSky_GetWeatherPresetProperties");
static_assert(offsetof(GBSky_GetWeatherPresetProperties, SelectedWeatherPreset) == 0x000000, "Member 'GBSky_GetWeatherPresetProperties::SelectedWeatherPreset' has a wrong offset!");
static_assert(offsetof(GBSky_GetWeatherPresetProperties, OutWeatherCategory) == 0x000008, "Member 'GBSky_GetWeatherPresetProperties::OutWeatherCategory' has a wrong offset!");
static_assert(offsetof(GBSky_GetWeatherPresetProperties, OutWeatherType) == 0x000010, "Member 'GBSky_GetWeatherPresetProperties::OutWeatherType' has a wrong offset!");
static_assert(offsetof(GBSky_GetWeatherPresetProperties, OutWeatherDescription) == 0x000018, "Member 'GBSky_GetWeatherPresetProperties::OutWeatherDescription' has a wrong offset!");

// Function GroundBranch.GBSky.GetWeatherPresetsForSeason
// 0x0018 (0x0018 - 0x0000)
struct GBSky_GetWeatherPresetsForSeason final
{
public:
	ESeason                                       SelectedSeason;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkyCreatorWeatherPreset*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetWeatherPresetsForSeason) == 0x000008, "Wrong alignment on GBSky_GetWeatherPresetsForSeason");
static_assert(sizeof(GBSky_GetWeatherPresetsForSeason) == 0x000018, "Wrong size on GBSky_GetWeatherPresetsForSeason");
static_assert(offsetof(GBSky_GetWeatherPresetsForSeason, SelectedSeason) == 0x000000, "Member 'GBSky_GetWeatherPresetsForSeason::SelectedSeason' has a wrong offset!");
static_assert(offsetof(GBSky_GetWeatherPresetsForSeason, ReturnValue) == 0x000008, "Member 'GBSky_GetWeatherPresetsForSeason::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetWeatherString
// 0x0010 (0x0010 - 0x0000)
struct GBSky_GetWeatherString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetWeatherString) == 0x000008, "Wrong alignment on GBSky_GetWeatherString");
static_assert(sizeof(GBSky_GetWeatherString) == 0x000010, "Wrong size on GBSky_GetWeatherString");
static_assert(offsetof(GBSky_GetWeatherString, ReturnValue) == 0x000000, "Member 'GBSky_GetWeatherString::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetWeatherSystemIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct GBSky_GetWeatherSystemIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetWeatherSystemIsEnabled) == 0x000001, "Wrong alignment on GBSky_GetWeatherSystemIsEnabled");
static_assert(sizeof(GBSky_GetWeatherSystemIsEnabled) == 0x000001, "Wrong size on GBSky_GetWeatherSystemIsEnabled");
static_assert(offsetof(GBSky_GetWeatherSystemIsEnabled, ReturnValue) == 0x000000, "Member 'GBSky_GetWeatherSystemIsEnabled::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSky.GetYearMonthDay
// 0x000C (0x000C - 0x0000)
struct GBSky_GetYearMonthDay final
{
public:
	int32                                         OutYear;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMonth;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDay;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_GetYearMonthDay) == 0x000004, "Wrong alignment on GBSky_GetYearMonthDay");
static_assert(sizeof(GBSky_GetYearMonthDay) == 0x00000C, "Wrong size on GBSky_GetYearMonthDay");
static_assert(offsetof(GBSky_GetYearMonthDay, OutYear) == 0x000000, "Member 'GBSky_GetYearMonthDay::OutYear' has a wrong offset!");
static_assert(offsetof(GBSky_GetYearMonthDay, OutMonth) == 0x000004, "Member 'GBSky_GetYearMonthDay::OutMonth' has a wrong offset!");
static_assert(offsetof(GBSky_GetYearMonthDay, OutDay) == 0x000008, "Member 'GBSky_GetYearMonthDay::OutDay' has a wrong offset!");

// Function GroundBranch.GBSky.MapActualHourToStandardHour
// 0x0010 (0x0010 - 0x0000)
struct GBSky_MapActualHourToStandardHour final
{
public:
	float                                         ActualHour;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunriseTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunsetTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSky_MapActualHourToStandardHour) == 0x000004, "Wrong alignment on GBSky_MapActualHourToStandardHour");
static_assert(sizeof(GBSky_MapActualHourToStandardHour) == 0x000010, "Wrong size on GBSky_MapActualHourToStandardHour");
static_assert(offsetof(GBSky_MapActualHourToStandardHour, ActualHour) == 0x000000, "Member 'GBSky_MapActualHourToStandardHour::ActualHour' has a wrong offset!");
static_assert(offsetof(GBSky_MapActualHourToStandardHour, InSunriseTime) == 0x000004, "Member 'GBSky_MapActualHourToStandardHour::InSunriseTime' has a wrong offset!");
static_assert(offsetof(GBSky_MapActualHourToStandardHour, InSunsetTime) == 0x000008, "Member 'GBSky_MapActualHourToStandardHour::InSunsetTime' has a wrong offset!");
static_assert(offsetof(GBSky_MapActualHourToStandardHour, ReturnValue) == 0x00000C, "Member 'GBSky_MapActualHourToStandardHour::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSpatialAudioVolume.OnPlayerReadyRoomStatusChanged
// 0x0008 (0x0008 - 0x0000)
struct GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged final
{
public:
	class AGBPlayerState*                         GBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged) == 0x000008, "Wrong alignment on GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged");
static_assert(sizeof(GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged) == 0x000008, "Wrong size on GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged");
static_assert(offsetof(GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged, GBPlayerState) == 0x000000, "Member 'GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged::GBPlayerState' has a wrong offset!");

// Function GroundBranch.GBSpectatorPawn.OnViewTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct GBSpectatorPawn_OnViewTargetChanged final
{
public:
	class AGBPlayerController*                    PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSpectatorPawn_OnViewTargetChanged) == 0x000008, "Wrong alignment on GBSpectatorPawn_OnViewTargetChanged");
static_assert(sizeof(GBSpectatorPawn_OnViewTargetChanged) == 0x000008, "Wrong size on GBSpectatorPawn_OnViewTargetChanged");
static_assert(offsetof(GBSpectatorPawn_OnViewTargetChanged, PlayerController) == 0x000000, "Member 'GBSpectatorPawn_OnViewTargetChanged::PlayerController' has a wrong offset!");

// Function GroundBranch.GBSpectatorPawn.ServerSpectatorViewActor
// 0x0008 (0x0008 - 0x0000)
struct GBSpectatorPawn_ServerSpectatorViewActor final
{
public:
	class AActor*                                 ActorTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSpectatorPawn_ServerSpectatorViewActor) == 0x000008, "Wrong alignment on GBSpectatorPawn_ServerSpectatorViewActor");
static_assert(sizeof(GBSpectatorPawn_ServerSpectatorViewActor) == 0x000008, "Wrong size on GBSpectatorPawn_ServerSpectatorViewActor");
static_assert(offsetof(GBSpectatorPawn_ServerSpectatorViewActor, ActorTarget) == 0x000000, "Member 'GBSpectatorPawn_ServerSpectatorViewActor::ActorTarget' has a wrong offset!");

// Function GroundBranch.GBSpectatorPawn.SpectatorSetCamera
// 0x0008 (0x0008 - 0x0000)
struct GBSpectatorPawn_SpectatorSetCamera final
{
public:
	class FName                                   NewCameraStyle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSpectatorPawn_SpectatorSetCamera) == 0x000004, "Wrong alignment on GBSpectatorPawn_SpectatorSetCamera");
static_assert(sizeof(GBSpectatorPawn_SpectatorSetCamera) == 0x000008, "Wrong size on GBSpectatorPawn_SpectatorSetCamera");
static_assert(offsetof(GBSpectatorPawn_SpectatorSetCamera, NewCameraStyle) == 0x000000, "Member 'GBSpectatorPawn_SpectatorSetCamera::NewCameraStyle' has a wrong offset!");

// Function GroundBranch.GBSpectatorPawn.SpectatorViewActor
// 0x0008 (0x0008 - 0x0000)
struct GBSpectatorPawn_SpectatorViewActor final
{
public:
	class AActor*                                 ActorTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSpectatorPawn_SpectatorViewActor) == 0x000008, "Wrong alignment on GBSpectatorPawn_SpectatorViewActor");
static_assert(sizeof(GBSpectatorPawn_SpectatorViewActor) == 0x000008, "Wrong size on GBSpectatorPawn_SpectatorViewActor");
static_assert(offsetof(GBSpectatorPawn_SpectatorViewActor, ActorTarget) == 0x000000, "Member 'GBSpectatorPawn_SpectatorViewActor::ActorTarget' has a wrong offset!");

// Function GroundBranch.GBSquadState.GetSquadAliveCount
// 0x0004 (0x0004 - 0x0000)
struct GBSquadState_GetSquadAliveCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSquadState_GetSquadAliveCount) == 0x000004, "Wrong alignment on GBSquadState_GetSquadAliveCount");
static_assert(sizeof(GBSquadState_GetSquadAliveCount) == 0x000004, "Wrong size on GBSquadState_GetSquadAliveCount");
static_assert(offsetof(GBSquadState_GetSquadAliveCount, ReturnValue) == 0x000000, "Member 'GBSquadState_GetSquadAliveCount::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBSquadState.IsSquadAlive
// 0x0001 (0x0001 - 0x0000)
struct GBSquadState_IsSquadAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBSquadState_IsSquadAlive) == 0x000001, "Wrong alignment on GBSquadState_IsSquadAlive");
static_assert(sizeof(GBSquadState_IsSquadAlive) == 0x000001, "Wrong size on GBSquadState_IsSquadAlive");
static_assert(offsetof(GBSquadState_IsSquadAlive, ReturnValue) == 0x000000, "Member 'GBSquadState_IsSquadAlive::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBTimeOfDayAlarmComponent.SetTimeOfDayAlarms
// 0x0020 (0x0020 - 0x0000)
struct GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms final
{
public:
	TArray<struct FGBTimeOfDayAlarm>              InTimeOfDayAlarmInfo;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const class FName AlarmName)>  InDelegate;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms) == 0x000008, "Wrong alignment on GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms");
static_assert(sizeof(GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms) == 0x000020, "Wrong size on GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms");
static_assert(offsetof(GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms, InTimeOfDayAlarmInfo) == 0x000000, "Member 'GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms::InTimeOfDayAlarmInfo' has a wrong offset!");
static_assert(offsetof(GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms, InDelegate) == 0x000010, "Member 'GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms::InDelegate' has a wrong offset!");

// Function GroundBranch.GBTimeOfDayAlarmComponent.TimeOfDayAlarmsDelegate
// 0x0008 (0x0008 - 0x0000)
struct GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate final
{
public:
	class FName                                   AlarmName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate) == 0x000004, "Wrong alignment on GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate");
static_assert(sizeof(GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate) == 0x000008, "Wrong size on GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate");
static_assert(offsetof(GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate, AlarmName) == 0x000000, "Member 'GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate::AlarmName' has a wrong offset!");

// Function GroundBranch.GBUseInterface.AddUser
// 0x0008 (0x0008 - 0x0000)
struct GBUseInterface_AddUser final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_AddUser) == 0x000008, "Wrong alignment on GBUseInterface_AddUser");
static_assert(sizeof(GBUseInterface_AddUser) == 0x000008, "Wrong size on GBUseInterface_AddUser");
static_assert(offsetof(GBUseInterface_AddUser, Controller) == 0x000000, "Member 'GBUseInterface_AddUser::Controller' has a wrong offset!");

// Function GroundBranch.GBUseInterface.AIQuestion
// 0x0018 (0x0018 - 0x0000)
struct GBUseInterface_AIQuestion final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_AIQuestion) == 0x000008, "Wrong alignment on GBUseInterface_AIQuestion");
static_assert(sizeof(GBUseInterface_AIQuestion) == 0x000018, "Wrong size on GBUseInterface_AIQuestion");
static_assert(offsetof(GBUseInterface_AIQuestion, Controller) == 0x000000, "Member 'GBUseInterface_AIQuestion::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIQuestion, UseType) == 0x000008, "Member 'GBUseInterface_AIQuestion::UseType' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIQuestion, ReturnValue) == 0x000010, "Member 'GBUseInterface_AIQuestion::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUseInterface.AIQuestionWithParams
// 0x0028 (0x0028 - 0x0000)
struct GBUseInterface_AIQuestionWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_AIQuestionWithParams) == 0x000008, "Wrong alignment on GBUseInterface_AIQuestionWithParams");
static_assert(sizeof(GBUseInterface_AIQuestionWithParams) == 0x000028, "Wrong size on GBUseInterface_AIQuestionWithParams");
static_assert(offsetof(GBUseInterface_AIQuestionWithParams, Controller) == 0x000000, "Member 'GBUseInterface_AIQuestionWithParams::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIQuestionWithParams, UseType) == 0x000008, "Member 'GBUseInterface_AIQuestionWithParams::UseType' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIQuestionWithParams, Params_0) == 0x000010, "Member 'GBUseInterface_AIQuestionWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIQuestionWithParams, ReturnValue) == 0x000020, "Member 'GBUseInterface_AIQuestionWithParams::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUseInterface.AIUse
// 0x0010 (0x0010 - 0x0000)
struct GBUseInterface_AIUse final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_AIUse) == 0x000008, "Wrong alignment on GBUseInterface_AIUse");
static_assert(sizeof(GBUseInterface_AIUse) == 0x000010, "Wrong size on GBUseInterface_AIUse");
static_assert(offsetof(GBUseInterface_AIUse, Controller) == 0x000000, "Member 'GBUseInterface_AIUse::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIUse, UseType) == 0x000008, "Member 'GBUseInterface_AIUse::UseType' has a wrong offset!");

// Function GroundBranch.GBUseInterface.AIUseWithParams
// 0x0020 (0x0020 - 0x0000)
struct GBUseInterface_AIUseWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_AIUseWithParams) == 0x000008, "Wrong alignment on GBUseInterface_AIUseWithParams");
static_assert(sizeof(GBUseInterface_AIUseWithParams) == 0x000020, "Wrong size on GBUseInterface_AIUseWithParams");
static_assert(offsetof(GBUseInterface_AIUseWithParams, Controller) == 0x000000, "Member 'GBUseInterface_AIUseWithParams::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIUseWithParams, UseType) == 0x000008, "Member 'GBUseInterface_AIUseWithParams::UseType' has a wrong offset!");
static_assert(offsetof(GBUseInterface_AIUseWithParams, Params_0) == 0x000010, "Member 'GBUseInterface_AIUseWithParams::Params_0' has a wrong offset!");

// Function GroundBranch.GBUseInterface.ClientUse
// 0x0010 (0x0010 - 0x0000)
struct GBUseInterface_ClientUse final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_ClientUse) == 0x000008, "Wrong alignment on GBUseInterface_ClientUse");
static_assert(sizeof(GBUseInterface_ClientUse) == 0x000010, "Wrong size on GBUseInterface_ClientUse");
static_assert(offsetof(GBUseInterface_ClientUse, Controller) == 0x000000, "Member 'GBUseInterface_ClientUse::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_ClientUse, UseType) == 0x000008, "Member 'GBUseInterface_ClientUse::UseType' has a wrong offset!");

// Function GroundBranch.GBUseInterface.ClientUseWithParams
// 0x0020 (0x0020 - 0x0000)
struct GBUseInterface_ClientUseWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_ClientUseWithParams) == 0x000008, "Wrong alignment on GBUseInterface_ClientUseWithParams");
static_assert(sizeof(GBUseInterface_ClientUseWithParams) == 0x000020, "Wrong size on GBUseInterface_ClientUseWithParams");
static_assert(offsetof(GBUseInterface_ClientUseWithParams, Controller) == 0x000000, "Member 'GBUseInterface_ClientUseWithParams::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_ClientUseWithParams, UseType) == 0x000008, "Member 'GBUseInterface_ClientUseWithParams::UseType' has a wrong offset!");
static_assert(offsetof(GBUseInterface_ClientUseWithParams, Params_0) == 0x000010, "Member 'GBUseInterface_ClientUseWithParams::Params_0' has a wrong offset!");

// Function GroundBranch.GBUseInterface.RemoveUser
// 0x0008 (0x0008 - 0x0000)
struct GBUseInterface_RemoveUser final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_RemoveUser) == 0x000008, "Wrong alignment on GBUseInterface_RemoveUser");
static_assert(sizeof(GBUseInterface_RemoveUser) == 0x000008, "Wrong size on GBUseInterface_RemoveUser");
static_assert(offsetof(GBUseInterface_RemoveUser, Controller) == 0x000000, "Member 'GBUseInterface_RemoveUser::Controller' has a wrong offset!");

// Function GroundBranch.GBUseInterface.ServerUse
// 0x0010 (0x0010 - 0x0000)
struct GBUseInterface_ServerUse final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_ServerUse) == 0x000008, "Wrong alignment on GBUseInterface_ServerUse");
static_assert(sizeof(GBUseInterface_ServerUse) == 0x000010, "Wrong size on GBUseInterface_ServerUse");
static_assert(offsetof(GBUseInterface_ServerUse, Controller) == 0x000000, "Member 'GBUseInterface_ServerUse::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_ServerUse, UseType) == 0x000008, "Member 'GBUseInterface_ServerUse::UseType' has a wrong offset!");

// Function GroundBranch.GBUseInterface.ServerUseWithParams
// 0x0020 (0x0020 - 0x0000)
struct GBUseInterface_ServerUseWithParams final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params_0;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_ServerUseWithParams) == 0x000008, "Wrong alignment on GBUseInterface_ServerUseWithParams");
static_assert(sizeof(GBUseInterface_ServerUseWithParams) == 0x000020, "Wrong size on GBUseInterface_ServerUseWithParams");
static_assert(offsetof(GBUseInterface_ServerUseWithParams, Controller) == 0x000000, "Member 'GBUseInterface_ServerUseWithParams::Controller' has a wrong offset!");
static_assert(offsetof(GBUseInterface_ServerUseWithParams, UseType) == 0x000008, "Member 'GBUseInterface_ServerUseWithParams::UseType' has a wrong offset!");
static_assert(offsetof(GBUseInterface_ServerUseWithParams, Params_0) == 0x000010, "Member 'GBUseInterface_ServerUseWithParams::Params_0' has a wrong offset!");

// Function GroundBranch.GBUseInterface.GetNumUsers
// 0x0004 (0x0004 - 0x0000)
struct GBUseInterface_GetNumUsers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_GetNumUsers) == 0x000004, "Wrong alignment on GBUseInterface_GetNumUsers");
static_assert(sizeof(GBUseInterface_GetNumUsers) == 0x000004, "Wrong size on GBUseInterface_GetNumUsers");
static_assert(offsetof(GBUseInterface_GetNumUsers, ReturnValue) == 0x000000, "Member 'GBUseInterface_GetNumUsers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBUseInterface.IsTeamSpecific
// 0x0001 (0x0001 - 0x0000)
struct GBUseInterface_IsTeamSpecific final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBUseInterface_IsTeamSpecific) == 0x000001, "Wrong alignment on GBUseInterface_IsTeamSpecific");
static_assert(sizeof(GBUseInterface_IsTeamSpecific) == 0x000001, "Wrong size on GBUseInterface_IsTeamSpecific");
static_assert(offsetof(GBUseInterface_IsTeamSpecific, ReturnValue) == 0x000000, "Member 'GBUseInterface_IsTeamSpecific::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBVOIPManager.GetDeviceNames
// 0x0010 (0x0010 - 0x0000)
struct GBVOIPManager_GetDeviceNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBVOIPManager_GetDeviceNames) == 0x000008, "Wrong alignment on GBVOIPManager_GetDeviceNames");
static_assert(sizeof(GBVOIPManager_GetDeviceNames) == 0x000010, "Wrong size on GBVOIPManager_GetDeviceNames");
static_assert(offsetof(GBVOIPManager_GetDeviceNames, ReturnValue) == 0x000000, "Member 'GBVOIPManager_GetDeviceNames::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBVOIPManager.OnPlayerCharVoicePostEventCallback
// 0x0010 (0x0010 - 0x0000)
struct GBVOIPManager_OnPlayerCharVoicePostEventCallback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBVOIPManager_OnPlayerCharVoicePostEventCallback) == 0x000008, "Wrong alignment on GBVOIPManager_OnPlayerCharVoicePostEventCallback");
static_assert(sizeof(GBVOIPManager_OnPlayerCharVoicePostEventCallback) == 0x000010, "Wrong size on GBVOIPManager_OnPlayerCharVoicePostEventCallback");
static_assert(offsetof(GBVOIPManager_OnPlayerCharVoicePostEventCallback, CallbackType) == 0x000000, "Member 'GBVOIPManager_OnPlayerCharVoicePostEventCallback::CallbackType' has a wrong offset!");
static_assert(offsetof(GBVOIPManager_OnPlayerCharVoicePostEventCallback, CallbackInfo) == 0x000008, "Member 'GBVOIPManager_OnPlayerCharVoicePostEventCallback::CallbackInfo' has a wrong offset!");

// Function GroundBranch.GBVOIPManager.SetCharVoiceSwitchEvent
// 0x0010 (0x0010 - 0x0000)
struct GBVOIPManager_SetCharVoiceSwitchEvent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRadio;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocal;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBVOIPManager_SetCharVoiceSwitchEvent) == 0x000008, "Wrong alignment on GBVOIPManager_SetCharVoiceSwitchEvent");
static_assert(sizeof(GBVOIPManager_SetCharVoiceSwitchEvent) == 0x000010, "Wrong size on GBVOIPManager_SetCharVoiceSwitchEvent");
static_assert(offsetof(GBVOIPManager_SetCharVoiceSwitchEvent, AkComponent) == 0x000000, "Member 'GBVOIPManager_SetCharVoiceSwitchEvent::AkComponent' has a wrong offset!");
static_assert(offsetof(GBVOIPManager_SetCharVoiceSwitchEvent, bIsRadio) == 0x000008, "Member 'GBVOIPManager_SetCharVoiceSwitchEvent::bIsRadio' has a wrong offset!");
static_assert(offsetof(GBVOIPManager_SetCharVoiceSwitchEvent, bIsLocal) == 0x000009, "Member 'GBVOIPManager_SetCharVoiceSwitchEvent::bIsLocal' has a wrong offset!");

// Function GroundBranch.GBVOIPManager.SetDevice
// 0x0010 (0x0010 - 0x0000)
struct GBVOIPManager_SetDevice final
{
public:
	class FString                                 DeviceName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBVOIPManager_SetDevice) == 0x000008, "Wrong alignment on GBVOIPManager_SetDevice");
static_assert(sizeof(GBVOIPManager_SetDevice) == 0x000010, "Wrong size on GBVOIPManager_SetDevice");
static_assert(offsetof(GBVOIPManager_SetDevice, DeviceName) == 0x000000, "Member 'GBVOIPManager_SetDevice::DeviceName' has a wrong offset!");

// Function GroundBranch.GBVOIPManager.SetVOIPSwitchEvent
// 0x0010 (0x0010 - 0x0000)
struct GBVOIPManager_SetVOIPSwitchEvent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOIPType                                     VOIPType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBVOIPManager_SetVOIPSwitchEvent) == 0x000008, "Wrong alignment on GBVOIPManager_SetVOIPSwitchEvent");
static_assert(sizeof(GBVOIPManager_SetVOIPSwitchEvent) == 0x000010, "Wrong size on GBVOIPManager_SetVOIPSwitchEvent");
static_assert(offsetof(GBVOIPManager_SetVOIPSwitchEvent, AkComponent) == 0x000000, "Member 'GBVOIPManager_SetVOIPSwitchEvent::AkComponent' has a wrong offset!");
static_assert(offsetof(GBVOIPManager_SetVOIPSwitchEvent, VOIPType) == 0x000008, "Member 'GBVOIPManager_SetVOIPSwitchEvent::VOIPType' has a wrong offset!");

// Function GroundBranch.GBVOIPManager.GetCurrentDeviceName
// 0x0010 (0x0010 - 0x0000)
struct GBVOIPManager_GetCurrentDeviceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBVOIPManager_GetCurrentDeviceName) == 0x000008, "Wrong alignment on GBVOIPManager_GetCurrentDeviceName");
static_assert(sizeof(GBVOIPManager_GetCurrentDeviceName) == 0x000010, "Wrong size on GBVOIPManager_GetCurrentDeviceName");
static_assert(offsetof(GBVOIPManager_GetCurrentDeviceName, ReturnValue) == 0x000000, "Member 'GBVOIPManager_GetCurrentDeviceName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetWorldSettings
// 0x0010 (0x0010 - 0x0000)
struct GBWorldSettings_GetWorldSettings final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGBWorldSettings*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetWorldSettings) == 0x000008, "Wrong alignment on GBWorldSettings_GetWorldSettings");
static_assert(sizeof(GBWorldSettings_GetWorldSettings) == 0x000010, "Wrong size on GBWorldSettings_GetWorldSettings");
static_assert(offsetof(GBWorldSettings_GetWorldSettings, WorldContextObject) == 0x000000, "Member 'GBWorldSettings_GetWorldSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GBWorldSettings_GetWorldSettings, ReturnValue) == 0x000008, "Member 'GBWorldSettings_GetWorldSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetAIHearingMultiplier
// 0x0004 (0x0004 - 0x0000)
struct GBWorldSettings_GetAIHearingMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetAIHearingMultiplier) == 0x000004, "Wrong alignment on GBWorldSettings_GetAIHearingMultiplier");
static_assert(sizeof(GBWorldSettings_GetAIHearingMultiplier) == 0x000004, "Wrong size on GBWorldSettings_GetAIHearingMultiplier");
static_assert(offsetof(GBWorldSettings_GetAIHearingMultiplier, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetAIHearingMultiplier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetAIVisibilityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct GBWorldSettings_GetAIVisibilityMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetAIVisibilityMultiplier) == 0x000004, "Wrong alignment on GBWorldSettings_GetAIVisibilityMultiplier");
static_assert(sizeof(GBWorldSettings_GetAIVisibilityMultiplier) == 0x000004, "Wrong size on GBWorldSettings_GetAIVisibilityMultiplier");
static_assert(offsetof(GBWorldSettings_GetAIVisibilityMultiplier, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetAIVisibilityMultiplier::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetAllowedSeasons
// 0x0010 (0x0010 - 0x0000)
struct GBWorldSettings_GetAllowedSeasons final
{
public:
	TArray<ESeason>                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetAllowedSeasons) == 0x000008, "Wrong alignment on GBWorldSettings_GetAllowedSeasons");
static_assert(sizeof(GBWorldSettings_GetAllowedSeasons) == 0x000010, "Wrong size on GBWorldSettings_GetAllowedSeasons");
static_assert(offsetof(GBWorldSettings_GetAllowedSeasons, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetAllowedSeasons::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetDefaultSpatialSoundTag
// 0x0008 (0x0008 - 0x0000)
struct GBWorldSettings_GetDefaultSpatialSoundTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetDefaultSpatialSoundTag) == 0x000004, "Wrong alignment on GBWorldSettings_GetDefaultSpatialSoundTag");
static_assert(sizeof(GBWorldSettings_GetDefaultSpatialSoundTag) == 0x000008, "Wrong size on GBWorldSettings_GetDefaultSpatialSoundTag");
static_assert(offsetof(GBWorldSettings_GetDefaultSpatialSoundTag, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetDefaultSpatialSoundTag::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetFirstAllowableMonth
// 0x0008 (0x0008 - 0x0000)
struct GBWorldSettings_GetFirstAllowableMonth final
{
public:
	int32                                         StartMonth;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetFirstAllowableMonth) == 0x000004, "Wrong alignment on GBWorldSettings_GetFirstAllowableMonth");
static_assert(sizeof(GBWorldSettings_GetFirstAllowableMonth) == 0x000008, "Wrong size on GBWorldSettings_GetFirstAllowableMonth");
static_assert(offsetof(GBWorldSettings_GetFirstAllowableMonth, StartMonth) == 0x000000, "Member 'GBWorldSettings_GetFirstAllowableMonth::StartMonth' has a wrong offset!");
static_assert(offsetof(GBWorldSettings_GetFirstAllowableMonth, ReturnValue) == 0x000004, "Member 'GBWorldSettings_GetFirstAllowableMonth::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetIsMonthAllowed
// 0x0008 (0x0008 - 0x0000)
struct GBWorldSettings_GetIsMonthAllowed final
{
public:
	int32                                         InMonth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GBWorldSettings_GetIsMonthAllowed) == 0x000004, "Wrong alignment on GBWorldSettings_GetIsMonthAllowed");
static_assert(sizeof(GBWorldSettings_GetIsMonthAllowed) == 0x000008, "Wrong size on GBWorldSettings_GetIsMonthAllowed");
static_assert(offsetof(GBWorldSettings_GetIsMonthAllowed, InMonth) == 0x000000, "Member 'GBWorldSettings_GetIsMonthAllowed::InMonth' has a wrong offset!");
static_assert(offsetof(GBWorldSettings_GetIsMonthAllowed, ReturnValue) == 0x000004, "Member 'GBWorldSettings_GetIsMonthAllowed::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetLatitude
// 0x0004 (0x0004 - 0x0000)
struct GBWorldSettings_GetLatitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetLatitude) == 0x000004, "Wrong alignment on GBWorldSettings_GetLatitude");
static_assert(sizeof(GBWorldSettings_GetLatitude) == 0x000004, "Wrong size on GBWorldSettings_GetLatitude");
static_assert(offsetof(GBWorldSettings_GetLatitude, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetLatitude::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetLevelSummary
// 0x0008 (0x0008 - 0x0000)
struct GBWorldSettings_GetLevelSummary final
{
public:
	class UGBLevelSummary*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetLevelSummary) == 0x000008, "Wrong alignment on GBWorldSettings_GetLevelSummary");
static_assert(sizeof(GBWorldSettings_GetLevelSummary) == 0x000008, "Wrong size on GBWorldSettings_GetLevelSummary");
static_assert(offsetof(GBWorldSettings_GetLevelSummary, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetLevelSummary::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetListOfAllowableMonthNumbers
// 0x0010 (0x0010 - 0x0000)
struct GBWorldSettings_GetListOfAllowableMonthNumbers final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetListOfAllowableMonthNumbers) == 0x000008, "Wrong alignment on GBWorldSettings_GetListOfAllowableMonthNumbers");
static_assert(sizeof(GBWorldSettings_GetListOfAllowableMonthNumbers) == 0x000010, "Wrong size on GBWorldSettings_GetListOfAllowableMonthNumbers");
static_assert(offsetof(GBWorldSettings_GetListOfAllowableMonthNumbers, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetListOfAllowableMonthNumbers::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetLocalClimatePreset
// 0x0008 (0x0008 - 0x0000)
struct GBWorldSettings_GetLocalClimatePreset final
{
public:
	class UGBClimatePreset*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetLocalClimatePreset) == 0x000008, "Wrong alignment on GBWorldSettings_GetLocalClimatePreset");
static_assert(sizeof(GBWorldSettings_GetLocalClimatePreset) == 0x000008, "Wrong size on GBWorldSettings_GetLocalClimatePreset");
static_assert(offsetof(GBWorldSettings_GetLocalClimatePreset, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetLocalClimatePreset::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetLocalClimateSettings
// 0x0060 (0x0060 - 0x0000)
struct GBWorldSettings_GetLocalClimateSettings final
{
public:
	struct FGBClimateSettings                     ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetLocalClimateSettings) == 0x000008, "Wrong alignment on GBWorldSettings_GetLocalClimateSettings");
static_assert(sizeof(GBWorldSettings_GetLocalClimateSettings) == 0x000060, "Wrong size on GBWorldSettings_GetLocalClimateSettings");
static_assert(offsetof(GBWorldSettings_GetLocalClimateSettings, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetLocalClimateSettings::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetLocationIsClassified
// 0x0001 (0x0001 - 0x0000)
struct GBWorldSettings_GetLocationIsClassified final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetLocationIsClassified) == 0x000001, "Wrong alignment on GBWorldSettings_GetLocationIsClassified");
static_assert(sizeof(GBWorldSettings_GetLocationIsClassified) == 0x000001, "Wrong size on GBWorldSettings_GetLocationIsClassified");
static_assert(offsetof(GBWorldSettings_GetLocationIsClassified, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetLocationIsClassified::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetLongitude
// 0x0004 (0x0004 - 0x0000)
struct GBWorldSettings_GetLongitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetLongitude) == 0x000004, "Wrong alignment on GBWorldSettings_GetLongitude");
static_assert(sizeof(GBWorldSettings_GetLongitude) == 0x000004, "Wrong size on GBWorldSettings_GetLongitude");
static_assert(offsetof(GBWorldSettings_GetLongitude, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetLongitude::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetNumberFriendlyAI
// 0x0004 (0x0004 - 0x0000)
struct GBWorldSettings_GetNumberFriendlyAI final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetNumberFriendlyAI) == 0x000004, "Wrong alignment on GBWorldSettings_GetNumberFriendlyAI");
static_assert(sizeof(GBWorldSettings_GetNumberFriendlyAI) == 0x000004, "Wrong size on GBWorldSettings_GetNumberFriendlyAI");
static_assert(offsetof(GBWorldSettings_GetNumberFriendlyAI, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetNumberFriendlyAI::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetObservesDST
// 0x0001 (0x0001 - 0x0000)
struct GBWorldSettings_GetObservesDST final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetObservesDST) == 0x000001, "Wrong alignment on GBWorldSettings_GetObservesDST");
static_assert(sizeof(GBWorldSettings_GetObservesDST) == 0x000001, "Wrong size on GBWorldSettings_GetObservesDST");
static_assert(offsetof(GBWorldSettings_GetObservesDST, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetObservesDST::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetPreferredMissionTimes
// 0x0010 (0x0010 - 0x0000)
struct GBWorldSettings_GetPreferredMissionTimes final
{
public:
	TArray<EMissionTimeLabel>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetPreferredMissionTimes) == 0x000008, "Wrong alignment on GBWorldSettings_GetPreferredMissionTimes");
static_assert(sizeof(GBWorldSettings_GetPreferredMissionTimes) == 0x000010, "Wrong size on GBWorldSettings_GetPreferredMissionTimes");
static_assert(offsetof(GBWorldSettings_GetPreferredMissionTimes, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetPreferredMissionTimes::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetSequenceToPlayAfterMissionFail
// 0x0028 (0x0028 - 0x0000)
struct GBWorldSettings_GetSequenceToPlayAfterMissionFail final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetSequenceToPlayAfterMissionFail) == 0x000008, "Wrong alignment on GBWorldSettings_GetSequenceToPlayAfterMissionFail");
static_assert(sizeof(GBWorldSettings_GetSequenceToPlayAfterMissionFail) == 0x000028, "Wrong size on GBWorldSettings_GetSequenceToPlayAfterMissionFail");
static_assert(offsetof(GBWorldSettings_GetSequenceToPlayAfterMissionFail, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetSequenceToPlayAfterMissionFail::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetSequenceToPlayAfterMissionSuccess
// 0x0028 (0x0028 - 0x0000)
struct GBWorldSettings_GetSequenceToPlayAfterMissionSuccess final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetSequenceToPlayAfterMissionSuccess) == 0x000008, "Wrong alignment on GBWorldSettings_GetSequenceToPlayAfterMissionSuccess");
static_assert(sizeof(GBWorldSettings_GetSequenceToPlayAfterMissionSuccess) == 0x000028, "Wrong size on GBWorldSettings_GetSequenceToPlayAfterMissionSuccess");
static_assert(offsetof(GBWorldSettings_GetSequenceToPlayAfterMissionSuccess, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetSequenceToPlayAfterMissionSuccess::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetSequenceToPlayBeforeMissionStarts
// 0x0028 (0x0028 - 0x0000)
struct GBWorldSettings_GetSequenceToPlayBeforeMissionStarts final
{
public:
	TSoftObjectPtr<class ALevelSequenceActor>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetSequenceToPlayBeforeMissionStarts) == 0x000008, "Wrong alignment on GBWorldSettings_GetSequenceToPlayBeforeMissionStarts");
static_assert(sizeof(GBWorldSettings_GetSequenceToPlayBeforeMissionStarts) == 0x000028, "Wrong size on GBWorldSettings_GetSequenceToPlayBeforeMissionStarts");
static_assert(offsetof(GBWorldSettings_GetSequenceToPlayBeforeMissionStarts, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetSequenceToPlayBeforeMissionStarts::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetShouldCreateDebugSquad
// 0x0001 (0x0001 - 0x0000)
struct GBWorldSettings_GetShouldCreateDebugSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetShouldCreateDebugSquad) == 0x000001, "Wrong alignment on GBWorldSettings_GetShouldCreateDebugSquad");
static_assert(sizeof(GBWorldSettings_GetShouldCreateDebugSquad) == 0x000001, "Wrong size on GBWorldSettings_GetShouldCreateDebugSquad");
static_assert(offsetof(GBWorldSettings_GetShouldCreateDebugSquad, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetShouldCreateDebugSquad::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetSpawnFriendlyAI
// 0x0001 (0x0001 - 0x0000)
struct GBWorldSettings_GetSpawnFriendlyAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetSpawnFriendlyAI) == 0x000001, "Wrong alignment on GBWorldSettings_GetSpawnFriendlyAI");
static_assert(sizeof(GBWorldSettings_GetSpawnFriendlyAI) == 0x000001, "Wrong size on GBWorldSettings_GetSpawnFriendlyAI");
static_assert(offsetof(GBWorldSettings_GetSpawnFriendlyAI, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetSpawnFriendlyAI::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetTerritoryName
// 0x0008 (0x0008 - 0x0000)
struct GBWorldSettings_GetTerritoryName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetTerritoryName) == 0x000004, "Wrong alignment on GBWorldSettings_GetTerritoryName");
static_assert(sizeof(GBWorldSettings_GetTerritoryName) == 0x000008, "Wrong size on GBWorldSettings_GetTerritoryName");
static_assert(offsetof(GBWorldSettings_GetTerritoryName, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetTerritoryName::ReturnValue' has a wrong offset!");

// Function GroundBranch.GBWorldSettings.GetTimeZone
// 0x0004 (0x0004 - 0x0000)
struct GBWorldSettings_GetTimeZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GBWorldSettings_GetTimeZone) == 0x000004, "Wrong alignment on GBWorldSettings_GetTimeZone");
static_assert(sizeof(GBWorldSettings_GetTimeZone) == 0x000004, "Wrong size on GBWorldSettings_GetTimeZone");
static_assert(offsetof(GBWorldSettings_GetTimeZone, ReturnValue) == 0x000000, "Member 'GBWorldSettings_GetTimeZone::ReturnValue' has a wrong offset!");

// Function GroundBranch.JoyColorWheel.GetColor
// 0x0010 (0x0010 - 0x0000)
struct JoyColorWheel_GetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoyColorWheel_GetColor) == 0x000004, "Wrong alignment on JoyColorWheel_GetColor");
static_assert(sizeof(JoyColorWheel_GetColor) == 0x000010, "Wrong size on JoyColorWheel_GetColor");
static_assert(offsetof(JoyColorWheel_GetColor, ReturnValue) == 0x000000, "Member 'JoyColorWheel_GetColor::ReturnValue' has a wrong offset!");

// Function GroundBranch.JoyColorWheel.SetColor
// 0x0014 (0x0014 - 0x0000)
struct JoyColorWheel_SetColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipAnimation;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JoyColorWheel_SetColor) == 0x000004, "Wrong alignment on JoyColorWheel_SetColor");
static_assert(sizeof(JoyColorWheel_SetColor) == 0x000014, "Wrong size on JoyColorWheel_SetColor");
static_assert(offsetof(JoyColorWheel_SetColor, NewColor) == 0x000000, "Member 'JoyColorWheel_SetColor::NewColor' has a wrong offset!");
static_assert(offsetof(JoyColorWheel_SetColor, SkipAnimation) == 0x000010, "Member 'JoyColorWheel_SetColor::SkipAnimation' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.AreLineSegmentsCrossing
// 0x0034 (0x0034 - 0x0000)
struct TKMathFunctionLibrary_AreLineSegmentsCrossing final
{
public:
	struct FVector                                pointA1;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pointA2;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pointB1;                                           // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pointB2;                                           // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_AreLineSegmentsCrossing) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_AreLineSegmentsCrossing");
static_assert(sizeof(TKMathFunctionLibrary_AreLineSegmentsCrossing) == 0x000034, "Wrong size on TKMathFunctionLibrary_AreLineSegmentsCrossing");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, pointA1) == 0x000000, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::pointA1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, pointA2) == 0x00000C, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::pointA2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, pointB1) == 0x000018, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::pointB1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, pointB2) == 0x000024, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::pointB2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_AreLineSegmentsCrossing, ReturnValue) == 0x000030, "Member 'TKMathFunctionLibrary_AreLineSegmentsCrossing::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ClosestPointOnLineSegment
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_ClosestPointOnLineSegment final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineStart;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointOnLineSegment) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointOnLineSegment");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointOnLineSegment) == 0x000030, "Wrong size on TKMathFunctionLibrary_ClosestPointOnLineSegment");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSegment, Point) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSegment::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSegment, LineStart) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSegment::LineStart' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSegment, LineEnd) == 0x000018, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSegment::LineEnd' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnLineSegment, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_ClosestPointOnLineSegment::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ClosestPointOnSphereToLine
// 0x0034 (0x0034 - 0x0000)
struct TKMathFunctionLibrary_ClosestPointOnSphereToLine final
{
public:
	struct FVector                                SphereOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineOrigin;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir;                                           // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointOnSphereToLine) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointOnSphereToLine");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointOnSphereToLine) == 0x000034, "Wrong size on TKMathFunctionLibrary_ClosestPointOnSphereToLine");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, SphereOrigin) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::SphereOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, SphereRadius) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::SphereRadius' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, LineOrigin) == 0x000010, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::LineOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, LineDir) == 0x00001C, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::LineDir' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointOnSphereToLine, ReturnValue) == 0x000028, "Member 'TKMathFunctionLibrary_ClosestPointOnSphereToLine::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ClosestPointsOfLineSegments
// 0x0048 (0x0048 - 0x0000)
struct TKMathFunctionLibrary_ClosestPointsOfLineSegments final
{
public:
	struct FVector                                Line1Start;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line1End;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line2Start;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Line2End;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointsOfLineSegments) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointsOfLineSegments");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointsOfLineSegments) == 0x000048, "Wrong size on TKMathFunctionLibrary_ClosestPointsOfLineSegments");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line1Start) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line1Start' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line1End) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line1End' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line2Start) == 0x000018, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line2Start' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, Line2End) == 0x000024, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::Line2End' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, LinePoint1) == 0x000030, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOfLineSegments, LinePoint2) == 0x00003C, "Member 'TKMathFunctionLibrary_ClosestPointsOfLineSegments::LinePoint2' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ClosestPointsOnTwoLines
// 0x004C (0x004C - 0x0000)
struct TKMathFunctionLibrary_ClosestPointsOnTwoLines final
{
public:
	struct FVector                                closestPointLine1;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                closestPointLine2;                                 // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                lineVec1;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                lineVec2;                                          // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_ClosestPointsOnTwoLines) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ClosestPointsOnTwoLines");
static_assert(sizeof(TKMathFunctionLibrary_ClosestPointsOnTwoLines) == 0x00004C, "Wrong size on TKMathFunctionLibrary_ClosestPointsOnTwoLines");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, closestPointLine1) == 0x000000, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::closestPointLine1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, closestPointLine2) == 0x00000C, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::closestPointLine2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, LinePoint1) == 0x000018, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, lineVec1) == 0x000024, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::lineVec1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, LinePoint2) == 0x000030, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::LinePoint2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, lineVec2) == 0x00003C, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::lineVec2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ClosestPointsOnTwoLines, ReturnValue) == 0x000048, "Member 'TKMathFunctionLibrary_ClosestPointsOnTwoLines::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ConvertAnchorToAnchor
// 0x0048 (0x0048 - 0x0000)
struct TKMathFunctionLibrary_ConvertAnchorToAnchor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchors                               CurrentAnchor;                                     // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Offsets;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnchors                               TargetAnchor;                                      // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ConvertedOffsets;                                  // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ConvertAnchorToAnchor) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_ConvertAnchorToAnchor");
static_assert(sizeof(TKMathFunctionLibrary_ConvertAnchorToAnchor) == 0x000048, "Wrong size on TKMathFunctionLibrary_ConvertAnchorToAnchor");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, WorldContextObject) == 0x000000, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, CurrentAnchor) == 0x000008, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::CurrentAnchor' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, Offsets) == 0x000018, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::Offsets' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, TargetAnchor) == 0x000028, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::TargetAnchor' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertAnchorToAnchor, ConvertedOffsets) == 0x000038, "Member 'TKMathFunctionLibrary_ConvertAnchorToAnchor::ConvertedOffsets' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ConvertPhysicsLinearVelocity
// 0x0014 (0x0014 - 0x0000)
struct TKMathFunctionLibrary_ConvertPhysicsLinearVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedUnit                                    SpeedUnit;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ConvertPhysicsLinearVelocity");
static_assert(sizeof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity) == 0x000014, "Wrong size on TKMathFunctionLibrary_ConvertPhysicsLinearVelocity");
static_assert(offsetof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity, Velocity) == 0x000000, "Member 'TKMathFunctionLibrary_ConvertPhysicsLinearVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity, SpeedUnit) == 0x00000C, "Member 'TKMathFunctionLibrary_ConvertPhysicsLinearVelocity::SpeedUnit' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ConvertPhysicsLinearVelocity, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_ConvertPhysicsLinearVelocity::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.GetVelocityAtPoint
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_GetVelocityAtPoint final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebugInfo;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_GetVelocityAtPoint) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_GetVelocityAtPoint");
static_assert(sizeof(TKMathFunctionLibrary_GetVelocityAtPoint) == 0x000030, "Wrong size on TKMathFunctionLibrary_GetVelocityAtPoint");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, Target) == 0x000000, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::Target' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, Point) == 0x000008, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, BoneName) == 0x000014, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::BoneName' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, DrawDebugInfo) == 0x00001C, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::DrawDebugInfo' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GetVelocityAtPoint, ReturnValue) == 0x000020, "Member 'TKMathFunctionLibrary_GetVelocityAtPoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.GridSnap
// 0x001C (0x001C - 0x0000)
struct TKMathFunctionLibrary_GridSnap final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grid;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_GridSnap) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_GridSnap");
static_assert(sizeof(TKMathFunctionLibrary_GridSnap) == 0x00001C, "Wrong size on TKMathFunctionLibrary_GridSnap");
static_assert(offsetof(TKMathFunctionLibrary_GridSnap, A) == 0x000000, "Member 'TKMathFunctionLibrary_GridSnap::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GridSnap, Grid) == 0x00000C, "Member 'TKMathFunctionLibrary_GridSnap::Grid' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_GridSnap, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_GridSnap::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.IsEvenNumber
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_IsEvenNumber final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsEvenNumber) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsEvenNumber");
static_assert(sizeof(TKMathFunctionLibrary_IsEvenNumber) == 0x000008, "Wrong size on TKMathFunctionLibrary_IsEvenNumber");
static_assert(offsetof(TKMathFunctionLibrary_IsEvenNumber, A) == 0x000000, "Member 'TKMathFunctionLibrary_IsEvenNumber::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsEvenNumber, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_IsEvenNumber::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.IsLineInsideSphere
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_IsLineInsideSphere final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineLength;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereOrigin;                                      // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsLineInsideSphere) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsLineInsideSphere");
static_assert(sizeof(TKMathFunctionLibrary_IsLineInsideSphere) == 0x000030, "Wrong size on TKMathFunctionLibrary_IsLineInsideSphere");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, LineStart) == 0x000000, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::LineStart' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, LineDir) == 0x00000C, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::LineDir' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, LineLength) == 0x000018, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::LineLength' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, SphereOrigin) == 0x00001C, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::SphereOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, SphereRadius) == 0x000028, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsLineInsideSphere, ReturnValue) == 0x00002C, "Member 'TKMathFunctionLibrary_IsLineInsideSphere::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.IsMultipleOf
// 0x000C (0x000C - 0x0000)
struct TKMathFunctionLibrary_IsMultipleOf final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsMultipleOf) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsMultipleOf");
static_assert(sizeof(TKMathFunctionLibrary_IsMultipleOf) == 0x00000C, "Wrong size on TKMathFunctionLibrary_IsMultipleOf");
static_assert(offsetof(TKMathFunctionLibrary_IsMultipleOf, A) == 0x000000, "Member 'TKMathFunctionLibrary_IsMultipleOf::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsMultipleOf, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_IsMultipleOf::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsMultipleOf, ReturnValue) == 0x000008, "Member 'TKMathFunctionLibrary_IsMultipleOf::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.IsPointInsideBox
// 0x0028 (0x0028 - 0x0000)
struct TKMathFunctionLibrary_IsPointInsideBox final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxOrigin;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsPointInsideBox) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsPointInsideBox");
static_assert(sizeof(TKMathFunctionLibrary_IsPointInsideBox) == 0x000028, "Wrong size on TKMathFunctionLibrary_IsPointInsideBox");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, Point) == 0x000000, "Member 'TKMathFunctionLibrary_IsPointInsideBox::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, BoxOrigin) == 0x00000C, "Member 'TKMathFunctionLibrary_IsPointInsideBox::BoxOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, BoxExtent) == 0x000018, "Member 'TKMathFunctionLibrary_IsPointInsideBox::BoxExtent' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPointInsideBox, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_IsPointInsideBox::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.IsPowerOfTwo
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_IsPowerOfTwo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_IsPowerOfTwo) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_IsPowerOfTwo");
static_assert(sizeof(TKMathFunctionLibrary_IsPowerOfTwo) == 0x000008, "Wrong size on TKMathFunctionLibrary_IsPowerOfTwo");
static_assert(offsetof(TKMathFunctionLibrary_IsPowerOfTwo, X) == 0x000000, "Member 'TKMathFunctionLibrary_IsPowerOfTwo::X' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_IsPowerOfTwo, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_IsPowerOfTwo::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.LineExtentBoxIntersection
// 0x0060 (0x0060 - 0x0000)
struct TKMathFunctionLibrary_LineExtentBoxIntersection final
{
public:
	struct FBox                                   InBox;                                             // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x004C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTime;                                           // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_LineExtentBoxIntersection) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_LineExtentBoxIntersection");
static_assert(sizeof(TKMathFunctionLibrary_LineExtentBoxIntersection) == 0x000060, "Wrong size on TKMathFunctionLibrary_LineExtentBoxIntersection");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, InBox) == 0x000000, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::InBox' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, Start) == 0x00001C, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::Start' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, End) == 0x000028, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::End' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, Extent) == 0x000034, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::Extent' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, HitLocation) == 0x000040, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::HitLocation' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, HitNormal) == 0x00004C, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::HitNormal' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, HitTime) == 0x000058, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::HitTime' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineExtentBoxIntersection, ReturnValue) == 0x00005C, "Member 'TKMathFunctionLibrary_LineExtentBoxIntersection::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.LineToLineIntersection
// 0x0040 (0x0040 - 0x0000)
struct TKMathFunctionLibrary_LineToLineIntersection final
{
public:
	struct FVector                                IntersectionPoint;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint1;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir1;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDir2;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_LineToLineIntersection) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_LineToLineIntersection");
static_assert(sizeof(TKMathFunctionLibrary_LineToLineIntersection) == 0x000040, "Wrong size on TKMathFunctionLibrary_LineToLineIntersection");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, IntersectionPoint) == 0x000000, "Member 'TKMathFunctionLibrary_LineToLineIntersection::IntersectionPoint' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LinePoint1) == 0x00000C, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LineDir1) == 0x000018, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LineDir1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LinePoint2) == 0x000024, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LinePoint2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, LineDir2) == 0x000030, "Member 'TKMathFunctionLibrary_LineToLineIntersection::LineDir2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_LineToLineIntersection, ReturnValue) == 0x00003C, "Member 'TKMathFunctionLibrary_LineToLineIntersection::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.NegateFloat
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_NegateFloat final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateFloat) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateFloat");
static_assert(sizeof(TKMathFunctionLibrary_NegateFloat) == 0x000008, "Wrong size on TKMathFunctionLibrary_NegateFloat");
static_assert(offsetof(TKMathFunctionLibrary_NegateFloat, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateFloat::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateFloat, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_NegateFloat::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.NegateInt
// 0x0008 (0x0008 - 0x0000)
struct TKMathFunctionLibrary_NegateInt final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateInt) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateInt");
static_assert(sizeof(TKMathFunctionLibrary_NegateInt) == 0x000008, "Wrong size on TKMathFunctionLibrary_NegateInt");
static_assert(offsetof(TKMathFunctionLibrary_NegateInt, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateInt::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateInt, ReturnValue) == 0x000004, "Member 'TKMathFunctionLibrary_NegateInt::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.NegateVector2D
// 0x0010 (0x0010 - 0x0000)
struct TKMathFunctionLibrary_NegateVector2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_NegateVector2D) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_NegateVector2D");
static_assert(sizeof(TKMathFunctionLibrary_NegateVector2D) == 0x000010, "Wrong size on TKMathFunctionLibrary_NegateVector2D");
static_assert(offsetof(TKMathFunctionLibrary_NegateVector2D, A) == 0x000000, "Member 'TKMathFunctionLibrary_NegateVector2D::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_NegateVector2D, ReturnValue) == 0x000008, "Member 'TKMathFunctionLibrary_NegateVector2D::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.PointOnWhichSideOfLineSegment
// 0x0028 (0x0028 - 0x0000)
struct TKMathFunctionLibrary_PointOnWhichSideOfLineSegment final
{
public:
	struct FVector                                LinePoint1;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinePoint2;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_PointOnWhichSideOfLineSegment");
static_assert(sizeof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment) == 0x000028, "Wrong size on TKMathFunctionLibrary_PointOnWhichSideOfLineSegment");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, LinePoint1) == 0x000000, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::LinePoint1' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, LinePoint2) == 0x00000C, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::LinePoint2' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, Point) == 0x000018, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_PointOnWhichSideOfLineSegment, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_PointOnWhichSideOfLineSegment::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.ProjectPointOnLine
// 0x0030 (0x0030 - 0x0000)
struct TKMathFunctionLibrary_ProjectPointOnLine final
{
public:
	struct FVector                                LineOrigin;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDirection;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_ProjectPointOnLine) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_ProjectPointOnLine");
static_assert(sizeof(TKMathFunctionLibrary_ProjectPointOnLine) == 0x000030, "Wrong size on TKMathFunctionLibrary_ProjectPointOnLine");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, LineOrigin) == 0x000000, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::LineOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, LineDirection) == 0x00000C, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::LineDirection' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, Point) == 0x000018, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_ProjectPointOnLine, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_ProjectPointOnLine::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.RoundToLowerMultiple
// 0x0010 (0x0010 - 0x0000)
struct TKMathFunctionLibrary_RoundToLowerMultiple final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          skipSelf;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_RoundToLowerMultiple) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_RoundToLowerMultiple");
static_assert(sizeof(TKMathFunctionLibrary_RoundToLowerMultiple) == 0x000010, "Wrong size on TKMathFunctionLibrary_RoundToLowerMultiple");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, A) == 0x000000, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, skipSelf) == 0x000008, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::skipSelf' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToLowerMultiple, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_RoundToLowerMultiple::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.RoundToNearestMultiple
// 0x000C (0x000C - 0x0000)
struct TKMathFunctionLibrary_RoundToNearestMultiple final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_RoundToNearestMultiple) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_RoundToNearestMultiple");
static_assert(sizeof(TKMathFunctionLibrary_RoundToNearestMultiple) == 0x00000C, "Wrong size on TKMathFunctionLibrary_RoundToNearestMultiple");
static_assert(offsetof(TKMathFunctionLibrary_RoundToNearestMultiple, A) == 0x000000, "Member 'TKMathFunctionLibrary_RoundToNearestMultiple::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToNearestMultiple, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_RoundToNearestMultiple::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToNearestMultiple, ReturnValue) == 0x000008, "Member 'TKMathFunctionLibrary_RoundToNearestMultiple::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.RoundToUpperMultiple
// 0x0010 (0x0010 - 0x0000)
struct TKMathFunctionLibrary_RoundToUpperMultiple final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Multiple;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          skipSelf;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_RoundToUpperMultiple) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_RoundToUpperMultiple");
static_assert(sizeof(TKMathFunctionLibrary_RoundToUpperMultiple) == 0x000010, "Wrong size on TKMathFunctionLibrary_RoundToUpperMultiple");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, A) == 0x000000, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, Multiple) == 0x000004, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::Multiple' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, skipSelf) == 0x000008, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::skipSelf' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_RoundToUpperMultiple, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_RoundToUpperMultiple::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.SetCenterOfMassOffset
// 0x0020 (0x0020 - 0x0000)
struct TKMathFunctionLibrary_SetCenterOfMassOffset final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_SetCenterOfMassOffset) == 0x000008, "Wrong alignment on TKMathFunctionLibrary_SetCenterOfMassOffset");
static_assert(sizeof(TKMathFunctionLibrary_SetCenterOfMassOffset) == 0x000020, "Wrong size on TKMathFunctionLibrary_SetCenterOfMassOffset");
static_assert(offsetof(TKMathFunctionLibrary_SetCenterOfMassOffset, Target) == 0x000000, "Member 'TKMathFunctionLibrary_SetCenterOfMassOffset::Target' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetCenterOfMassOffset, Offset) == 0x000008, "Member 'TKMathFunctionLibrary_SetCenterOfMassOffset::Offset' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetCenterOfMassOffset, BoneName) == 0x000014, "Member 'TKMathFunctionLibrary_SetCenterOfMassOffset::BoneName' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.SetVectorLength
// 0x001C (0x001C - 0x0000)
struct TKMathFunctionLibrary_SetVectorLength final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_SetVectorLength) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_SetVectorLength");
static_assert(sizeof(TKMathFunctionLibrary_SetVectorLength) == 0x00001C, "Wrong size on TKMathFunctionLibrary_SetVectorLength");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, A) == 0x000000, "Member 'TKMathFunctionLibrary_SetVectorLength::A' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, Size) == 0x00000C, "Member 'TKMathFunctionLibrary_SetVectorLength::Size' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SetVectorLength, ReturnValue) == 0x000010, "Member 'TKMathFunctionLibrary_SetVectorLength::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.SignedDistancePlanePoint
// 0x0028 (0x0028 - 0x0000)
struct TKMathFunctionLibrary_SignedDistancePlanePoint final
{
public:
	struct FVector                                PlaneNormal;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlanePoint;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_SignedDistancePlanePoint) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_SignedDistancePlanePoint");
static_assert(sizeof(TKMathFunctionLibrary_SignedDistancePlanePoint) == 0x000028, "Wrong size on TKMathFunctionLibrary_SignedDistancePlanePoint");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, PlaneNormal) == 0x000000, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::PlaneNormal' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, PlanePoint) == 0x00000C, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::PlanePoint' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, Point) == 0x000018, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::Point' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SignedDistancePlanePoint, ReturnValue) == 0x000024, "Member 'TKMathFunctionLibrary_SignedDistancePlanePoint::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.SphereBoxIntersection
// 0x002C (0x002C - 0x0000)
struct TKMathFunctionLibrary_SphereBoxIntersection final
{
public:
	struct FVector                                SphereOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxOrigin;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TKMathFunctionLibrary_SphereBoxIntersection) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_SphereBoxIntersection");
static_assert(sizeof(TKMathFunctionLibrary_SphereBoxIntersection) == 0x00002C, "Wrong size on TKMathFunctionLibrary_SphereBoxIntersection");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, SphereOrigin) == 0x000000, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::SphereOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, SphereRadius) == 0x00000C, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::SphereRadius' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, BoxOrigin) == 0x000010, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::BoxOrigin' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, BoxExtent) == 0x00001C, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::BoxExtent' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_SphereBoxIntersection, ReturnValue) == 0x000028, "Member 'TKMathFunctionLibrary_SphereBoxIntersection::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.VectorDegreesToRadians
// 0x0018 (0x0018 - 0x0000)
struct TKMathFunctionLibrary_VectorDegreesToRadians final
{
public:
	struct FVector                                DegVector;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_VectorDegreesToRadians) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_VectorDegreesToRadians");
static_assert(sizeof(TKMathFunctionLibrary_VectorDegreesToRadians) == 0x000018, "Wrong size on TKMathFunctionLibrary_VectorDegreesToRadians");
static_assert(offsetof(TKMathFunctionLibrary_VectorDegreesToRadians, DegVector) == 0x000000, "Member 'TKMathFunctionLibrary_VectorDegreesToRadians::DegVector' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_VectorDegreesToRadians, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_VectorDegreesToRadians::ReturnValue' has a wrong offset!");

// Function GroundBranch.TKMathFunctionLibrary.VectorRadiansToDegrees
// 0x0018 (0x0018 - 0x0000)
struct TKMathFunctionLibrary_VectorRadiansToDegrees final
{
public:
	struct FVector                                RadVector;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TKMathFunctionLibrary_VectorRadiansToDegrees) == 0x000004, "Wrong alignment on TKMathFunctionLibrary_VectorRadiansToDegrees");
static_assert(sizeof(TKMathFunctionLibrary_VectorRadiansToDegrees) == 0x000018, "Wrong size on TKMathFunctionLibrary_VectorRadiansToDegrees");
static_assert(offsetof(TKMathFunctionLibrary_VectorRadiansToDegrees, RadVector) == 0x000000, "Member 'TKMathFunctionLibrary_VectorRadiansToDegrees::RadVector' has a wrong offset!");
static_assert(offsetof(TKMathFunctionLibrary_VectorRadiansToDegrees, ReturnValue) == 0x00000C, "Member 'TKMathFunctionLibrary_VectorRadiansToDegrees::ReturnValue' has a wrong offset!");

}

