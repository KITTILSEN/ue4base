#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AIControls

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_AIControls.WBP_AIControls_C
// 0x0020 (0x0308 - 0x02E8)
class UWBP_AIControls_C final : public UGBRadialMenuWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         AngleSize;                                         // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BGMaterial;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         New_Index;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	int32 CalculateSelectionIndexFromVector(const struct FVector& InputVector);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void BPEvent_SetDynamicMaterialParams(int32 NumberOfDivisions);
	void BPEvent_NewActiveSelection(int32 NewIndex);
	void BPEvent_ClearCurrentSelection();
	void ExecuteUbergraph_WBP_AIControls(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_AIControls_C">();
	}
	static class UWBP_AIControls_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_AIControls_C>();
	}
};
static_assert(alignof(UWBP_AIControls_C) == 0x000008, "Wrong alignment on UWBP_AIControls_C");
static_assert(sizeof(UWBP_AIControls_C) == 0x000308, "Wrong size on UWBP_AIControls_C");
static_assert(offsetof(UWBP_AIControls_C, UberGraphFrame) == 0x0002E8, "Member 'UWBP_AIControls_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_AIControls_C, AngleSize) == 0x0002F0, "Member 'UWBP_AIControls_C::AngleSize' has a wrong offset!");
static_assert(offsetof(UWBP_AIControls_C, BGMaterial) == 0x0002F8, "Member 'UWBP_AIControls_C::BGMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_AIControls_C, New_Index) == 0x000300, "Member 'UWBP_AIControls_C::New_Index' has a wrong offset!");

}

