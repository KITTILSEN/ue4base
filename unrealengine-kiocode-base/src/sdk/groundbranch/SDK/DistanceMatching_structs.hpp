#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DistanceMatching

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DistanceMatching.EDistanceMatchingType
// NumValues: 0x0007
enum class EDistanceMatchingType : uint8
{
	Start                                    = 0,
	Stop                                     = 1,
	Pivot                                    = 2,
	Jump                                     = 3,
	Fall                                     = 4,
	None                                     = 5,
	EDistanceMatchingType_MAX                = 6,
};

// ScriptStruct DistanceMatching.AnimNode_DistanceMatching
// 0x0050 (0x0088 - 0x0038)
struct FAnimNode_DistanceMatching final : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      PrevSequence;                                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Sequence;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceInputCurveName;                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceCurveName;                                 // 0x0074(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableDistanceLimit : 1;                          // 0x007C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceLimit;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DistanceMatching) == 0x000008, "Wrong alignment on FAnimNode_DistanceMatching");
static_assert(sizeof(FAnimNode_DistanceMatching) == 0x000088, "Wrong size on FAnimNode_DistanceMatching");
static_assert(offsetof(FAnimNode_DistanceMatching, PrevSequence) == 0x000050, "Member 'FAnimNode_DistanceMatching::PrevSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, Sequence) == 0x000060, "Member 'FAnimNode_DistanceMatching::Sequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, DistanceInputCurveName) == 0x000068, "Member 'FAnimNode_DistanceMatching::DistanceInputCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, Distance) == 0x000070, "Member 'FAnimNode_DistanceMatching::Distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, DistanceCurveName) == 0x000074, "Member 'FAnimNode_DistanceMatching::DistanceCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, DistanceLimit) == 0x000080, "Member 'FAnimNode_DistanceMatching::DistanceLimit' has a wrong offset!");

// ScriptStruct DistanceMatching.PredictResult
// 0x0014 (0x0014 - 0x0000)
struct FPredictResult final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPredictResult) == 0x000004, "Wrong alignment on FPredictResult");
static_assert(sizeof(FPredictResult) == 0x000014, "Wrong size on FPredictResult");
static_assert(offsetof(FPredictResult, Location) == 0x000000, "Member 'FPredictResult::Location' has a wrong offset!");
static_assert(offsetof(FPredictResult, Distance) == 0x00000C, "Member 'FPredictResult::Distance' has a wrong offset!");
static_assert(offsetof(FPredictResult, Time) == 0x000010, "Member 'FPredictResult::Time' has a wrong offset!");

}

