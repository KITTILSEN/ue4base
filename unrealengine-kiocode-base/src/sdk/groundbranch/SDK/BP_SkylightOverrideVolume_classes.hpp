#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkylightOverrideVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkylightOverrideVolume.BP_SkylightOverrideVolume_C
// 0x00A8 (0x02D0 - 0x0228)
class ABP_SkylightOverrideVolume_C final : public ATriggerBox
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   DebugCube;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AGBSky*                                 GBSkyRef;                                          // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GBSkyLight_C*                       SkyLight;                                          // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowDebugBox;                                     // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeAlphaValue;                                    // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFadeAlphaValue;                              // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLightLevel;                                     // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSpeed;                                         // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFadeSpeed;                                  // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeIntensity;                                     // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkylightOverrideVolume_C*           Master;                                            // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempOldLightLevel;                                 // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       TimeOfDayToFade;                                   // 0x0278(0x0050)(Edit, BlueprintVisible)
	class FName                                   SkylightScalingOverrideTypeName;                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SkylightOverrideVolume(int32 EntryPoint);
	void OnTimeOfDayChanged(class AGBSky* SkyActor);
	void ServerUnbindCharacterEnteredPlayArea();
	void OnCharacterEnteredPlayArea(class AGBGameMode* GameMode, class AGBCharacter* GBCharacter);
	void ServerBindCharacterEnteredPlayArea();
	void ClientProcessNewSkylightAlphaIntensity(float NewSkylightAlphaIntensity, class FName VolumeName);
	void ServerProcessNewMinLightLevel(float NewMinLightLevelForCharacter, class FName VolumeName, class AGBCharacter* GBCharacter);
	void ClientCheckOverlaps(class FName CallingVolumeName);
	void ServerCheckOverlaps(class AGBCharacter* GBCharacter, class FName CallingVolumeName);
	void UnbindLocalPlayerEvents();
	void OnReadyRoomStatusChanged(class AGBPlayerState* PlayerState);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnComponentEndOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnComponentBeginOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void LocalPlayerCheck();
	void BindLocalPlayerEvents();
	void OnPlayerControllerStateChanged_Event_0(class FName OldState, class FName NewState);
	void SetFadeValues();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetVolumeDataFromOverlaps(class AActor* Actor, float* MinLightLevel_0, float* SkylightFadeIntensity, class FName* VolumeName, float* FadeSpeed_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkylightOverrideVolume_C">();
	}
	static class ABP_SkylightOverrideVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkylightOverrideVolume_C>();
	}
};
static_assert(alignof(ABP_SkylightOverrideVolume_C) == 0x000008, "Wrong alignment on ABP_SkylightOverrideVolume_C");
static_assert(sizeof(ABP_SkylightOverrideVolume_C) == 0x0002D0, "Wrong size on ABP_SkylightOverrideVolume_C");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, UberGraphFrame) == 0x000228, "Member 'ABP_SkylightOverrideVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, DebugCube) == 0x000230, "Member 'ABP_SkylightOverrideVolume_C::DebugCube' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, GBSkyRef) == 0x000238, "Member 'ABP_SkylightOverrideVolume_C::GBSkyRef' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, SkyLight) == 0x000240, "Member 'ABP_SkylightOverrideVolume_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, bShowDebugBox) == 0x000248, "Member 'ABP_SkylightOverrideVolume_C::bShowDebugBox' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, FadeAlphaValue) == 0x00024C, "Member 'ABP_SkylightOverrideVolume_C::FadeAlphaValue' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, TargetFadeAlphaValue) == 0x000250, "Member 'ABP_SkylightOverrideVolume_C::TargetFadeAlphaValue' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, MinLightLevel) == 0x000254, "Member 'ABP_SkylightOverrideVolume_C::MinLightLevel' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, FadeSpeed) == 0x000258, "Member 'ABP_SkylightOverrideVolume_C::FadeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, CurrentFadeSpeed) == 0x00025C, "Member 'ABP_SkylightOverrideVolume_C::CurrentFadeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, FadeIntensity) == 0x000260, "Member 'ABP_SkylightOverrideVolume_C::FadeIntensity' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, Master) == 0x000268, "Member 'ABP_SkylightOverrideVolume_C::Master' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, TempOldLightLevel) == 0x000270, "Member 'ABP_SkylightOverrideVolume_C::TempOldLightLevel' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, TimeOfDayToFade) == 0x000278, "Member 'ABP_SkylightOverrideVolume_C::TimeOfDayToFade' has a wrong offset!");
static_assert(offsetof(ABP_SkylightOverrideVolume_C, SkylightScalingOverrideTypeName) == 0x0002C8, "Member 'ABP_SkylightOverrideVolume_C::SkylightScalingOverrideTypeName' has a wrong offset!");

}

