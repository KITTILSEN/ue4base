#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMModdingPlugin

#include "Basic.hpp"

#include "RBZooKeeper_structs.hpp"
#include "ModKit_structs.hpp"
#include "FMModdingPlugin_structs.hpp"
#include "LuaMachine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RBSteamworks_structs.hpp"


namespace SDK::Params
{

// Function FMModdingPlugin.FMModdingAdmin.Get
// 0x0008 (0x0008 - 0x0000)
struct FMModdingAdmin_Get final
{
public:
	class UFMModdingAdmin*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingAdmin_Get) == 0x000008, "Wrong alignment on FMModdingAdmin_Get");
static_assert(sizeof(FMModdingAdmin_Get) == 0x000008, "Wrong size on FMModdingAdmin_Get");
static_assert(offsetof(FMModdingAdmin_Get, ReturnValue) == 0x000000, "Member 'FMModdingAdmin_Get::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingAdmin.AdminSet
// 0x0030 (0x0030 - 0x0000)
struct FMModdingAdmin_AdminSet final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZKReplicatedContent                   Content;                                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingAdmin_AdminSet) == 0x000008, "Wrong alignment on FMModdingAdmin_AdminSet");
static_assert(sizeof(FMModdingAdmin_AdminSet) == 0x000030, "Wrong size on FMModdingAdmin_AdminSet");
static_assert(offsetof(FMModdingAdmin_AdminSet, UniqueId) == 0x000000, "Member 'FMModdingAdmin_AdminSet::UniqueId' has a wrong offset!");
static_assert(offsetof(FMModdingAdmin_AdminSet, Content) == 0x000010, "Member 'FMModdingAdmin_AdminSet::Content' has a wrong offset!");
static_assert(offsetof(FMModdingAdmin_AdminSet, ReturnValue) == 0x000028, "Member 'FMModdingAdmin_AdminSet::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingAdmin.FillRequest
// 0x0038 (0x0038 - 0x0000)
struct FMModdingAdmin_FillRequest final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequestType;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZKReplicatedContent                   FilledRequest;                                     // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingAdmin_FillRequest) == 0x000008, "Wrong alignment on FMModdingAdmin_FillRequest");
static_assert(sizeof(FMModdingAdmin_FillRequest) == 0x000038, "Wrong size on FMModdingAdmin_FillRequest");
static_assert(offsetof(FMModdingAdmin_FillRequest, UniqueId) == 0x000000, "Member 'FMModdingAdmin_FillRequest::UniqueId' has a wrong offset!");
static_assert(offsetof(FMModdingAdmin_FillRequest, RequestType) == 0x000010, "Member 'FMModdingAdmin_FillRequest::RequestType' has a wrong offset!");
static_assert(offsetof(FMModdingAdmin_FillRequest, FilledRequest) == 0x000018, "Member 'FMModdingAdmin_FillRequest::FilledRequest' has a wrong offset!");
static_assert(offsetof(FMModdingAdmin_FillRequest, ReturnValue) == 0x000030, "Member 'FMModdingAdmin_FillRequest::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.BlueprintLuaCall
// 0x00B8 (0x00B8 - 0x0000)
struct FMModdingFunctionLibrary_BlueprintLuaCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ScriptTable;                                       // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0070(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_BlueprintLuaCall) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_BlueprintLuaCall");
static_assert(sizeof(FMModdingFunctionLibrary_BlueprintLuaCall) == 0x0000B8, "Wrong size on FMModdingFunctionLibrary_BlueprintLuaCall");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCall, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_BlueprintLuaCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCall, ScriptTable) == 0x000008, "Member 'FMModdingFunctionLibrary_BlueprintLuaCall::ScriptTable' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCall, FunctionName) == 0x000050, "Member 'FMModdingFunctionLibrary_BlueprintLuaCall::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCall, Filename) == 0x000060, "Member 'FMModdingFunctionLibrary_BlueprintLuaCall::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCall, ReturnValue) == 0x000070, "Member 'FMModdingFunctionLibrary_BlueprintLuaCall::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.BlueprintLuaCallWithArgs
// 0x00C8 (0x00C8 - 0x0000)
struct FMModdingFunctionLibrary_BlueprintLuaCallWithArgs final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ScriptTable;                                       // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0070(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0080(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_BlueprintLuaCallWithArgs");
static_assert(sizeof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs) == 0x0000C8, "Wrong size on FMModdingFunctionLibrary_BlueprintLuaCallWithArgs");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_BlueprintLuaCallWithArgs::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs, ScriptTable) == 0x000008, "Member 'FMModdingFunctionLibrary_BlueprintLuaCallWithArgs::ScriptTable' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs, FunctionName) == 0x000050, "Member 'FMModdingFunctionLibrary_BlueprintLuaCallWithArgs::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs, Filename) == 0x000060, "Member 'FMModdingFunctionLibrary_BlueprintLuaCallWithArgs::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs, InArgs) == 0x000070, "Member 'FMModdingFunctionLibrary_BlueprintLuaCallWithArgs::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_BlueprintLuaCallWithArgs, ReturnValue) == 0x000080, "Member 'FMModdingFunctionLibrary_BlueprintLuaCallWithArgs::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CondenseModReferencesInFileName
// 0x0030 (0x0030 - 0x0000)
struct FMModdingFunctionLibrary_CondenseModReferencesInFileName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveDotExt;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveGame;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CondenseModReferencesInFileName) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CondenseModReferencesInFileName");
static_assert(sizeof(FMModdingFunctionLibrary_CondenseModReferencesInFileName) == 0x000030, "Wrong size on FMModdingFunctionLibrary_CondenseModReferencesInFileName");
static_assert(offsetof(FMModdingFunctionLibrary_CondenseModReferencesInFileName, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CondenseModReferencesInFileName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CondenseModReferencesInFileName, InFilename) == 0x000008, "Member 'FMModdingFunctionLibrary_CondenseModReferencesInFileName::InFilename' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CondenseModReferencesInFileName, bRemoveDotExt) == 0x000018, "Member 'FMModdingFunctionLibrary_CondenseModReferencesInFileName::bRemoveDotExt' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CondenseModReferencesInFileName, bRemoveGame) == 0x000019, "Member 'FMModdingFunctionLibrary_CondenseModReferencesInFileName::bRemoveGame' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CondenseModReferencesInFileName, ReturnValue) == 0x000020, "Member 'FMModdingFunctionLibrary_CondenseModReferencesInFileName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModDetailsQueryRef
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateModDetailsQueryRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMModdingModDetailsQuery*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateModDetailsQueryRef) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateModDetailsQueryRef");
static_assert(sizeof(FMModdingFunctionLibrary_CreateModDetailsQueryRef) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateModDetailsQueryRef");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModDetailsQueryRef, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateModDetailsQueryRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModDetailsQueryRef, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateModDetailsQueryRef::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModKitCreateWorkshopItemRef
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModKitCreateWorkshopItem*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef");
static_assert(sizeof(FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateModKitCreateWorkshopItemRef::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModKitUploadWorkshopItemRef
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModKitUploadWorkshopItem*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef");
static_assert(sizeof(FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateModKitUploadWorkshopItemRef::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateModMetadata
// 0x00A0 (0x00A0 - 0x0000)
struct FMModdingFunctionLibrary_CreateModMetadata final
{
public:
	struct FUInt64                                WorkshopID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModType                                      ModType;                                           // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModMetadata                           ReturnValue;                                       // 0x0040(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateModMetadata) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateModMetadata");
static_assert(sizeof(FMModdingFunctionLibrary_CreateModMetadata) == 0x0000A0, "Wrong size on FMModdingFunctionLibrary_CreateModMetadata");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModMetadata, WorkshopID) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateModMetadata::WorkshopID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModMetadata, Title) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateModMetadata::Title' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModMetadata, Description) == 0x000018, "Member 'FMModdingFunctionLibrary_CreateModMetadata::Description' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModMetadata, CreatedBy) == 0x000028, "Member 'FMModdingFunctionLibrary_CreateModMetadata::CreatedBy' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModMetadata, ModType) == 0x000038, "Member 'FMModdingFunctionLibrary_CreateModMetadata::ModType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateModMetadata, ReturnValue) == 0x000040, "Member 'FMModdingFunctionLibrary_CreateModMetadata::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateNonAssetFoldersForMod
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateNonAssetFoldersForMod final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateNonAssetFoldersForMod) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateNonAssetFoldersForMod");
static_assert(sizeof(FMModdingFunctionLibrary_CreateNonAssetFoldersForMod) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateNonAssetFoldersForMod");
static_assert(offsetof(FMModdingFunctionLibrary_CreateNonAssetFoldersForMod, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateNonAssetFoldersForMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateNonAssetFoldersForMod, ModID) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateNonAssetFoldersForMod::ModID' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateServerPlayersQueryRef
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateServerPlayersQueryRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMModdingServerPlayersQuery*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateServerPlayersQueryRef) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateServerPlayersQueryRef");
static_assert(sizeof(FMModdingFunctionLibrary_CreateServerPlayersQueryRef) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateServerPlayersQueryRef");
static_assert(offsetof(FMModdingFunctionLibrary_CreateServerPlayersQueryRef, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateServerPlayersQueryRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateServerPlayersQueryRef, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateServerPlayersQueryRef::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateTitleQueryRef
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateTitleQueryRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMModdingTitleQuery*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateTitleQueryRef) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateTitleQueryRef");
static_assert(sizeof(FMModdingFunctionLibrary_CreateTitleQueryRef) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateTitleQueryRef");
static_assert(offsetof(FMModdingFunctionLibrary_CreateTitleQueryRef, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateTitleQueryRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateTitleQueryRef, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateTitleQueryRef::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.CreateUserModsQueryRef
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_CreateUserModsQueryRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMModdingUserModsQuery*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_CreateUserModsQueryRef) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_CreateUserModsQueryRef");
static_assert(sizeof(FMModdingFunctionLibrary_CreateUserModsQueryRef) == 0x000010, "Wrong size on FMModdingFunctionLibrary_CreateUserModsQueryRef");
static_assert(offsetof(FMModdingFunctionLibrary_CreateUserModsQueryRef, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_CreateUserModsQueryRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_CreateUserModsQueryRef, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_CreateUserModsQueryRef::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.DoesHostAllowAsset
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_DoesHostAllowAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        AssetId;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_DoesHostAllowAsset) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_DoesHostAllowAsset");
static_assert(sizeof(FMModdingFunctionLibrary_DoesHostAllowAsset) == 0x000020, "Wrong size on FMModdingFunctionLibrary_DoesHostAllowAsset");
static_assert(offsetof(FMModdingFunctionLibrary_DoesHostAllowAsset, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_DoesHostAllowAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_DoesHostAllowAsset, AssetId) == 0x000008, "Member 'FMModdingFunctionLibrary_DoesHostAllowAsset::AssetId' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_DoesHostAllowAsset, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_DoesHostAllowAsset::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.ExpandModReferencesInFileName
// 0x0040 (0x0040 - 0x0000)
struct FMModdingFunctionLibrary_ExpandModReferencesInFileName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DotExt;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddProjectDir;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakeRelativeToProjectContentDir;                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_ExpandModReferencesInFileName) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_ExpandModReferencesInFileName");
static_assert(sizeof(FMModdingFunctionLibrary_ExpandModReferencesInFileName) == 0x000040, "Wrong size on FMModdingFunctionLibrary_ExpandModReferencesInFileName");
static_assert(offsetof(FMModdingFunctionLibrary_ExpandModReferencesInFileName, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_ExpandModReferencesInFileName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ExpandModReferencesInFileName, InFilename) == 0x000008, "Member 'FMModdingFunctionLibrary_ExpandModReferencesInFileName::InFilename' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ExpandModReferencesInFileName, DotExt) == 0x000018, "Member 'FMModdingFunctionLibrary_ExpandModReferencesInFileName::DotExt' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ExpandModReferencesInFileName, bAddProjectDir) == 0x000028, "Member 'FMModdingFunctionLibrary_ExpandModReferencesInFileName::bAddProjectDir' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ExpandModReferencesInFileName, bMakeRelativeToProjectContentDir) == 0x000029, "Member 'FMModdingFunctionLibrary_ExpandModReferencesInFileName::bMakeRelativeToProjectContentDir' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ExpandModReferencesInFileName, ReturnValue) == 0x000030, "Member 'FMModdingFunctionLibrary_ExpandModReferencesInFileName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GenerateCallSignsFromPlayerName
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName");
static_assert(sizeof(FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName) == 0x000020, "Wrong size on FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName");
static_assert(offsetof(FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName, PlayerName) == 0x000000, "Member 'FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName::PlayerName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName, ReturnValue) == 0x000010, "Member 'FMModdingFunctionLibrary_GenerateCallSignsFromPlayerName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetAllWorkshopTags
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_GetAllWorkshopTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetAllWorkshopTags) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetAllWorkshopTags");
static_assert(sizeof(FMModdingFunctionLibrary_GetAllWorkshopTags) == 0x000010, "Wrong size on FMModdingFunctionLibrary_GetAllWorkshopTags");
static_assert(offsetof(FMModdingFunctionLibrary_GetAllWorkshopTags, ReturnValue) == 0x000000, "Member 'FMModdingFunctionLibrary_GetAllWorkshopTags::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetAssetsByPathIncludingMods
// 0x0040 (0x0040 - 0x0000)
struct FMModdingFunctionLibrary_GetAssetsByPathIncludingMods final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBResourceType                               GBResourceType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAssetData>                     OutAssetData;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartialFilePathOverride;                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeMods;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetAssetsByPathIncludingMods");
static_assert(sizeof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods) == 0x000040, "Wrong size on FMModdingFunctionLibrary_GetAssetsByPathIncludingMods");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, GBResourceType) == 0x000008, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, OutAssetData) == 0x000010, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::OutAssetData' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, bRecursive) == 0x000020, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::bRecursive' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, PartialFilePathOverride) == 0x000028, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::PartialFilePathOverride' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, bIncludeOnlyOnDiskAssets) == 0x000038, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::bIncludeOnlyOnDiskAssets' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, bExcludeMods) == 0x000039, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::bExcludeMods' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetAssetsByPathIncludingMods, ReturnValue) == 0x00003A, "Member 'FMModdingFunctionLibrary_GetAssetsByPathIncludingMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetBaseGameOrModFileNameFromPartial
// 0x0058 (0x0058 - 0x0000)
struct FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial final
{
public:
	class FString                                 InPartialFilePath;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeafName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativePath;                                     // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ModID;                                             // 0x0038(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial");
static_assert(sizeof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial) == 0x000058, "Wrong size on FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, InPartialFilePath) == 0x000000, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::InPartialFilePath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, LeafName) == 0x000010, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::LeafName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, FileExtension) == 0x000020, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::FileExtension' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, bRelativePath) == 0x000030, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::bRelativePath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, ModID) == 0x000038, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, WorldContextObject) == 0x000040, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial, ReturnValue) == 0x000048, "Member 'FMModdingFunctionLibrary_GetBaseGameOrModFileNameFromPartial::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetCurrentPlayerSteamID
// 0x0008 (0x0008 - 0x0000)
struct FMModdingFunctionLibrary_GetCurrentPlayerSteamID final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetCurrentPlayerSteamID) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetCurrentPlayerSteamID");
static_assert(sizeof(FMModdingFunctionLibrary_GetCurrentPlayerSteamID) == 0x000008, "Wrong size on FMModdingFunctionLibrary_GetCurrentPlayerSteamID");
static_assert(offsetof(FMModdingFunctionLibrary_GetCurrentPlayerSteamID, ReturnValue) == 0x000000, "Member 'FMModdingFunctionLibrary_GetCurrentPlayerSteamID::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetDirectoryFromWorkshopID
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetDirectoryFromWorkshopID final
{
public:
	class FString                                 DirectoryPath;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                WorkshopID;                                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetDirectoryFromWorkshopID) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetDirectoryFromWorkshopID");
static_assert(sizeof(FMModdingFunctionLibrary_GetDirectoryFromWorkshopID) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetDirectoryFromWorkshopID");
static_assert(offsetof(FMModdingFunctionLibrary_GetDirectoryFromWorkshopID, DirectoryPath) == 0x000000, "Member 'FMModdingFunctionLibrary_GetDirectoryFromWorkshopID::DirectoryPath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetDirectoryFromWorkshopID, WorkshopID) == 0x000010, "Member 'FMModdingFunctionLibrary_GetDirectoryFromWorkshopID::WorkshopID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetDirectoryFromWorkshopID, WorldContextObject) == 0x000018, "Member 'FMModdingFunctionLibrary_GetDirectoryFromWorkshopID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetDirectoryFromWorkshopID, ReturnValue) == 0x000020, "Member 'FMModdingFunctionLibrary_GetDirectoryFromWorkshopID::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileExtensionForGBResourceType
// 0x0018 (0x0018 - 0x0000)
struct FMModdingFunctionLibrary_GetFileExtensionForGBResourceType final
{
public:
	EGBResourceType                               InGBResourceType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetFileExtensionForGBResourceType) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFileExtensionForGBResourceType");
static_assert(sizeof(FMModdingFunctionLibrary_GetFileExtensionForGBResourceType) == 0x000018, "Wrong size on FMModdingFunctionLibrary_GetFileExtensionForGBResourceType");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileExtensionForGBResourceType, InGBResourceType) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFileExtensionForGBResourceType::InGBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileExtensionForGBResourceType, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetFileExtensionForGBResourceType::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileList
// 0x0040 (0x0040 - 0x0000)
struct FMModdingFunctionLibrary_GetFileList final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extension;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimPathAndExt;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FileList;                                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetFileList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFileList");
static_assert(sizeof(FMModdingFunctionLibrary_GetFileList) == 0x000040, "Wrong size on FMModdingFunctionLibrary_GetFileList");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileList, FilePath) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFileList::FilePath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileList, Extension) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFileList::Extension' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileList, bTrimPathAndExt) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFileList::bTrimPathAndExt' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileList, FileList) == 0x000028, "Member 'FMModdingFunctionLibrary_GetFileList::FileList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileList, ReturnValue) == 0x000038, "Member 'FMModdingFunctionLibrary_GetFileList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileListIncludingModIDList
// 0x0048 (0x0048 - 0x0000)
struct FMModdingFunctionLibrary_GetFileListIncludingModIDList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBResourceType                               GBResourceType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimmed;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FileList;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUInt64>                        ModIDList;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PartialFilePathOverride;                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetFileListIncludingModIDList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFileListIncludingModIDList");
static_assert(sizeof(FMModdingFunctionLibrary_GetFileListIncludingModIDList) == 0x000048, "Wrong size on FMModdingFunctionLibrary_GetFileListIncludingModIDList");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, GBResourceType) == 0x000008, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, bTrimmed) == 0x000009, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::bTrimmed' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, FileList) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::FileList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, ModIDList) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::ModIDList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, PartialFilePathOverride) == 0x000030, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::PartialFilePathOverride' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingModIDList, ReturnValue) == 0x000040, "Member 'FMModdingFunctionLibrary_GetFileListIncludingModIDList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFileListIncludingMods
// 0x0038 (0x0038 - 0x0000)
struct FMModdingFunctionLibrary_GetFileListIncludingMods final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBResourceType                               GBResourceType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimmed;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FileList;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PartialFilePathOverride;                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetFileListIncludingMods) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFileListIncludingMods");
static_assert(sizeof(FMModdingFunctionLibrary_GetFileListIncludingMods) == 0x000038, "Wrong size on FMModdingFunctionLibrary_GetFileListIncludingMods");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingMods, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFileListIncludingMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingMods, GBResourceType) == 0x000008, "Member 'FMModdingFunctionLibrary_GetFileListIncludingMods::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingMods, bTrimmed) == 0x000009, "Member 'FMModdingFunctionLibrary_GetFileListIncludingMods::bTrimmed' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingMods, FileList) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFileListIncludingMods::FileList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingMods, PartialFilePathOverride) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFileListIncludingMods::PartialFilePathOverride' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFileListIncludingMods, ReturnValue) == 0x000030, "Member 'FMModdingFunctionLibrary_GetFileListIncludingMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFolderList
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetFolderList final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FolderList;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RecurseIntoFolders;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetFolderList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFolderList");
static_assert(sizeof(FMModdingFunctionLibrary_GetFolderList) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetFolderList");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderList, FilePath) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFolderList::FilePath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderList, FolderList) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFolderList::FolderList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderList, RecurseIntoFolders) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFolderList::RecurseIntoFolders' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderList, ReturnValue) == 0x000021, "Member 'FMModdingFunctionLibrary_GetFolderList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFolderListIncludingModIDList
// 0x0048 (0x0048 - 0x0000)
struct FMModdingFunctionLibrary_GetFolderListIncludingModIDList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBResourceType                               GBResourceType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FolderList;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUInt64>                        ModIDList;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PartialFilePathOverride;                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecurseIntoFolders;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFolderListIncludingModIDList");
static_assert(sizeof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList) == 0x000048, "Wrong size on FMModdingFunctionLibrary_GetFolderListIncludingModIDList");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, GBResourceType) == 0x000008, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, FolderList) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::FolderList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, ModIDList) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::ModIDList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, PartialFilePathOverride) == 0x000030, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::PartialFilePathOverride' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, RecurseIntoFolders) == 0x000040, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::RecurseIntoFolders' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingModIDList, ReturnValue) == 0x000041, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingModIDList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFolderListIncludingMods
// 0x0038 (0x0038 - 0x0000)
struct FMModdingFunctionLibrary_GetFolderListIncludingMods final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBResourceType                               GBResourceType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FolderList;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PartialFilePathOverride;                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecurseIntoFolders;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetFolderListIncludingMods) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFolderListIncludingMods");
static_assert(sizeof(FMModdingFunctionLibrary_GetFolderListIncludingMods) == 0x000038, "Wrong size on FMModdingFunctionLibrary_GetFolderListIncludingMods");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingMods, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingMods, GBResourceType) == 0x000008, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingMods::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingMods, FolderList) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingMods::FolderList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingMods, PartialFilePathOverride) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingMods::PartialFilePathOverride' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingMods, RecurseIntoFolders) == 0x000030, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingMods::RecurseIntoFolders' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFolderListIncludingMods, ReturnValue) == 0x000031, "Member 'FMModdingFunctionLibrary_GetFolderListIncludingMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetFullFilePathFromPartial
// 0x0038 (0x0038 - 0x0000)
struct FMModdingFunctionLibrary_GetFullFilePathFromPartial final
{
public:
	class FString                                 InPartialFilePath;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativePath;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ModID;                                             // 0x0018(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetFullFilePathFromPartial) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetFullFilePathFromPartial");
static_assert(sizeof(FMModdingFunctionLibrary_GetFullFilePathFromPartial) == 0x000038, "Wrong size on FMModdingFunctionLibrary_GetFullFilePathFromPartial");
static_assert(offsetof(FMModdingFunctionLibrary_GetFullFilePathFromPartial, InPartialFilePath) == 0x000000, "Member 'FMModdingFunctionLibrary_GetFullFilePathFromPartial::InPartialFilePath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFullFilePathFromPartial, bRelativePath) == 0x000010, "Member 'FMModdingFunctionLibrary_GetFullFilePathFromPartial::bRelativePath' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFullFilePathFromPartial, ModID) == 0x000018, "Member 'FMModdingFunctionLibrary_GetFullFilePathFromPartial::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFullFilePathFromPartial, WorldContextObject) == 0x000020, "Member 'FMModdingFunctionLibrary_GetFullFilePathFromPartial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetFullFilePathFromPartial, ReturnValue) == 0x000028, "Member 'FMModdingFunctionLibrary_GetFullFilePathFromPartial::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetIsUsingServerMods
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_GetIsUsingServerMods final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetIsUsingServerMods) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetIsUsingServerMods");
static_assert(sizeof(FMModdingFunctionLibrary_GetIsUsingServerMods) == 0x000010, "Wrong size on FMModdingFunctionLibrary_GetIsUsingServerMods");
static_assert(offsetof(FMModdingFunctionLibrary_GetIsUsingServerMods, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetIsUsingServerMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetIsUsingServerMods, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetIsUsingServerMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDForAssetData
// 0x0070 (0x0070 - 0x0000)
struct FMModdingFunctionLibrary_GetModIDForAssetData final
{
public:
	struct FAssetData                             AssetData;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModIDForAssetData) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModIDForAssetData");
static_assert(sizeof(FMModdingFunctionLibrary_GetModIDForAssetData) == 0x000070, "Wrong size on FMModdingFunctionLibrary_GetModIDForAssetData");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDForAssetData, AssetData) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModIDForAssetData::AssetData' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDForAssetData, WorldContextObject) == 0x000060, "Member 'FMModdingFunctionLibrary_GetModIDForAssetData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDForAssetData, ReturnValue) == 0x000068, "Member 'FMModdingFunctionLibrary_GetModIDForAssetData::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDForPrimaryAssetId
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_GetModIDForPrimaryAssetId final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModIDForPrimaryAssetId) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModIDForPrimaryAssetId");
static_assert(sizeof(FMModdingFunctionLibrary_GetModIDForPrimaryAssetId) == 0x000020, "Wrong size on FMModdingFunctionLibrary_GetModIDForPrimaryAssetId");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDForPrimaryAssetId, PrimaryAssetId) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModIDForPrimaryAssetId::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDForPrimaryAssetId, WorldContextObject) == 0x000010, "Member 'FMModdingFunctionLibrary_GetModIDForPrimaryAssetId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDForPrimaryAssetId, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetModIDForPrimaryAssetId::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDFromFileName
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetModIDFromFileName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCondensed;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModIDFromFileName) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModIDFromFileName");
static_assert(sizeof(FMModdingFunctionLibrary_GetModIDFromFileName) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetModIDFromFileName");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDFromFileName, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModIDFromFileName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDFromFileName, InFilename) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModIDFromFileName::InFilename' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDFromFileName, bIsCondensed) == 0x000018, "Member 'FMModdingFunctionLibrary_GetModIDFromFileName::bIsCondensed' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDFromFileName, ReturnValue) == 0x000020, "Member 'FMModdingFunctionLibrary_GetModIDFromFileName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIDFromStringTableName
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_GetModIDFromStringTableName final
{
public:
	class FName                                   InStringTableName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModIDFromStringTableName) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModIDFromStringTableName");
static_assert(sizeof(FMModdingFunctionLibrary_GetModIDFromStringTableName) == 0x000010, "Wrong size on FMModdingFunctionLibrary_GetModIDFromStringTableName");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDFromStringTableName, InStringTableName) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModIDFromStringTableName::InStringTableName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIDFromStringTableName, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModIDFromStringTableName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModInfoFromModList
// 0x0030 (0x0030 - 0x0000)
struct FMModdingFunctionLibrary_GetModInfoFromModList final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGBModBasicInfo>                ModList;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMustBeActive;                                     // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBModBasicInfo                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModInfoFromModList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModInfoFromModList");
static_assert(sizeof(FMModdingFunctionLibrary_GetModInfoFromModList) == 0x000030, "Wrong size on FMModdingFunctionLibrary_GetModInfoFromModList");
static_assert(offsetof(FMModdingFunctionLibrary_GetModInfoFromModList, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModInfoFromModList::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModInfoFromModList, ModList) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModInfoFromModList::ModList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModInfoFromModList, bMustBeActive) == 0x000018, "Member 'FMModdingFunctionLibrary_GetModInfoFromModList::bMustBeActive' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModInfoFromModList, ReturnValue) == 0x000020, "Member 'FMModdingFunctionLibrary_GetModInfoFromModList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIsActiveInModList
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_GetModIsActiveInModList final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGBModBasicInfo>                ModList;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetModIsActiveInModList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModIsActiveInModList");
static_assert(sizeof(FMModdingFunctionLibrary_GetModIsActiveInModList) == 0x000020, "Wrong size on FMModdingFunctionLibrary_GetModIsActiveInModList");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIsActiveInModList, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModIsActiveInModList::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIsActiveInModList, ModList) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModIsActiveInModList::ModList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIsActiveInModList, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetModIsActiveInModList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModIsEnabled
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_GetModIsEnabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServer;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetModIsEnabled) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModIsEnabled");
static_assert(sizeof(FMModdingFunctionLibrary_GetModIsEnabled) == 0x000010, "Wrong size on FMModdingFunctionLibrary_GetModIsEnabled");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIsEnabled, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModIsEnabled::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIsEnabled, bServer) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModIsEnabled::bServer' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModIsEnabled, ReturnValue) == 0x000009, "Member 'FMModdingFunctionLibrary_GetModIsEnabled::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModKitSubsystem
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_GetModKitSubsystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModKitSubsystem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModKitSubsystem) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModKitSubsystem");
static_assert(sizeof(FMModdingFunctionLibrary_GetModKitSubsystem) == 0x000010, "Wrong size on FMModdingFunctionLibrary_GetModKitSubsystem");
static_assert(offsetof(FMModdingFunctionLibrary_GetModKitSubsystem, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModKitSubsystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModKitSubsystem, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModKitSubsystem::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModNameFromModID
// 0x0018 (0x0018 - 0x0000)
struct FMModdingFunctionLibrary_GetModNameFromModID final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModNameFromModID) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModNameFromModID");
static_assert(sizeof(FMModdingFunctionLibrary_GetModNameFromModID) == 0x000018, "Wrong size on FMModdingFunctionLibrary_GetModNameFromModID");
static_assert(offsetof(FMModdingFunctionLibrary_GetModNameFromModID, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModNameFromModID::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModNameFromModID, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModNameFromModID::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModPath
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetModPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakePathRelativeToContentDir;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModPath) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModPath");
static_assert(sizeof(FMModdingFunctionLibrary_GetModPath) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetModPath");
static_assert(offsetof(FMModdingFunctionLibrary_GetModPath, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModPath, ModID) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModPath::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModPath, bMakePathRelativeToContentDir) == 0x000010, "Member 'FMModdingFunctionLibrary_GetModPath::bMakePathRelativeToContentDir' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModPath, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetModPath::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModPriority
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_GetModPriority final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_GetModPriority) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModPriority");
static_assert(sizeof(FMModdingFunctionLibrary_GetModPriority) == 0x000010, "Wrong size on FMModdingFunctionLibrary_GetModPriority");
static_assert(offsetof(FMModdingFunctionLibrary_GetModPriority, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModPriority::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModPriority, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModPriority::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetModsPath
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetModsPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakePathRelativeToContentDir;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetModsPath) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetModsPath");
static_assert(sizeof(FMModdingFunctionLibrary_GetModsPath) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetModsPath");
static_assert(offsetof(FMModdingFunctionLibrary_GetModsPath, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetModsPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModsPath, ModID) == 0x000008, "Member 'FMModdingFunctionLibrary_GetModsPath::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModsPath, bMakePathRelativeToContentDir) == 0x000010, "Member 'FMModdingFunctionLibrary_GetModsPath::bMakePathRelativeToContentDir' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetModsPath, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetModsPath::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetNonAssetResourcesForMod
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetNonAssetResourcesForMod final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimmed;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGBResourceList>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetNonAssetResourcesForMod) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetNonAssetResourcesForMod");
static_assert(sizeof(FMModdingFunctionLibrary_GetNonAssetResourcesForMod) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetNonAssetResourcesForMod");
static_assert(offsetof(FMModdingFunctionLibrary_GetNonAssetResourcesForMod, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_GetNonAssetResourcesForMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetNonAssetResourcesForMod, ModID) == 0x000008, "Member 'FMModdingFunctionLibrary_GetNonAssetResourcesForMod::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetNonAssetResourcesForMod, bTrimmed) == 0x000010, "Member 'FMModdingFunctionLibrary_GetNonAssetResourcesForMod::bTrimmed' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetNonAssetResourcesForMod, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetNonAssetResourcesForMod::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetPartialFilePathForGBResourceType
// 0x0018 (0x0018 - 0x0000)
struct FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType final
{
public:
	EGBResourceType                               InGBResourceType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType");
static_assert(sizeof(FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType) == 0x000018, "Wrong size on FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType");
static_assert(offsetof(FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType, InGBResourceType) == 0x000000, "Member 'FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType::InGBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_GetPartialFilePathForGBResourceType::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetStringNameSpaceFromModID
// 0x0028 (0x0028 - 0x0000)
struct FMModdingFunctionLibrary_GetStringNameSpaceFromModID final
{
public:
	class FString                                 InStringNameSpace;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetStringNameSpaceFromModID) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetStringNameSpaceFromModID");
static_assert(sizeof(FMModdingFunctionLibrary_GetStringNameSpaceFromModID) == 0x000028, "Wrong size on FMModdingFunctionLibrary_GetStringNameSpaceFromModID");
static_assert(offsetof(FMModdingFunctionLibrary_GetStringNameSpaceFromModID, InStringNameSpace) == 0x000000, "Member 'FMModdingFunctionLibrary_GetStringNameSpaceFromModID::InStringNameSpace' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetStringNameSpaceFromModID, ModID) == 0x000010, "Member 'FMModdingFunctionLibrary_GetStringNameSpaceFromModID::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetStringNameSpaceFromModID, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetStringNameSpaceFromModID::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetStringTableNameFromModID
// 0x0018 (0x0018 - 0x0000)
struct FMModdingFunctionLibrary_GetStringTableNameFromModID final
{
public:
	class FName                                   InStringTableId;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetStringTableNameFromModID) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetStringTableNameFromModID");
static_assert(sizeof(FMModdingFunctionLibrary_GetStringTableNameFromModID) == 0x000018, "Wrong size on FMModdingFunctionLibrary_GetStringTableNameFromModID");
static_assert(offsetof(FMModdingFunctionLibrary_GetStringTableNameFromModID, InStringTableId) == 0x000000, "Member 'FMModdingFunctionLibrary_GetStringTableNameFromModID::InStringTableId' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetStringTableNameFromModID, ModID) == 0x000008, "Member 'FMModdingFunctionLibrary_GetStringTableNameFromModID::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetStringTableNameFromModID, ReturnValue) == 0x000010, "Member 'FMModdingFunctionLibrary_GetStringTableNameFromModID::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetWorkshopIDForPluginName
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_GetWorkshopIDForPluginName final
{
public:
	class FString                                 PluginName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetWorkshopIDForPluginName) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_GetWorkshopIDForPluginName");
static_assert(sizeof(FMModdingFunctionLibrary_GetWorkshopIDForPluginName) == 0x000020, "Wrong size on FMModdingFunctionLibrary_GetWorkshopIDForPluginName");
static_assert(offsetof(FMModdingFunctionLibrary_GetWorkshopIDForPluginName, PluginName) == 0x000000, "Member 'FMModdingFunctionLibrary_GetWorkshopIDForPluginName::PluginName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetWorkshopIDForPluginName, WorldContextObject) == 0x000010, "Member 'FMModdingFunctionLibrary_GetWorkshopIDForPluginName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetWorkshopIDForPluginName, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_GetWorkshopIDForPluginName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.GetWorkshopTagForResourceType
// 0x000C (0x000C - 0x0000)
struct FMModdingFunctionLibrary_GetWorkshopTagForResourceType final
{
public:
	EGBResourceType                               GBResourceType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_GetWorkshopTagForResourceType) == 0x000004, "Wrong alignment on FMModdingFunctionLibrary_GetWorkshopTagForResourceType");
static_assert(sizeof(FMModdingFunctionLibrary_GetWorkshopTagForResourceType) == 0x00000C, "Wrong size on FMModdingFunctionLibrary_GetWorkshopTagForResourceType");
static_assert(offsetof(FMModdingFunctionLibrary_GetWorkshopTagForResourceType, GBResourceType) == 0x000000, "Member 'FMModdingFunctionLibrary_GetWorkshopTagForResourceType::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_GetWorkshopTagForResourceType, ReturnValue) == 0x000004, "Member 'FMModdingFunctionLibrary_GetWorkshopTagForResourceType::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.MakeSteamStrings
// 0x0048 (0x0048 - 0x0000)
struct FMModdingFunctionLibrary_MakeSteamStrings final
{
public:
	TArray<class FString>                         StringsToEncode;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutLabels;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutStrings;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StringPrefix;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBSteamBufferType                            SteamBufferType;                                   // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_MakeSteamStrings) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_MakeSteamStrings");
static_assert(sizeof(FMModdingFunctionLibrary_MakeSteamStrings) == 0x000048, "Wrong size on FMModdingFunctionLibrary_MakeSteamStrings");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStrings, StringsToEncode) == 0x000000, "Member 'FMModdingFunctionLibrary_MakeSteamStrings::StringsToEncode' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStrings, OutLabels) == 0x000010, "Member 'FMModdingFunctionLibrary_MakeSteamStrings::OutLabels' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStrings, OutStrings) == 0x000020, "Member 'FMModdingFunctionLibrary_MakeSteamStrings::OutStrings' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStrings, StringPrefix) == 0x000030, "Member 'FMModdingFunctionLibrary_MakeSteamStrings::StringPrefix' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStrings, SteamBufferType) == 0x000040, "Member 'FMModdingFunctionLibrary_MakeSteamStrings::SteamBufferType' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.MakeSteamStringsFromUInt64
// 0x0048 (0x0048 - 0x0000)
struct FMModdingFunctionLibrary_MakeSteamStringsFromUInt64 final
{
public:
	TArray<struct FUInt64>                        IDsToEncode;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutLabels;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutStrings;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StringPrefix;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBSteamBufferType                            SteamBufferType;                                   // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_MakeSteamStringsFromUInt64");
static_assert(sizeof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64) == 0x000048, "Wrong size on FMModdingFunctionLibrary_MakeSteamStringsFromUInt64");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64, IDsToEncode) == 0x000000, "Member 'FMModdingFunctionLibrary_MakeSteamStringsFromUInt64::IDsToEncode' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64, OutLabels) == 0x000010, "Member 'FMModdingFunctionLibrary_MakeSteamStringsFromUInt64::OutLabels' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64, OutStrings) == 0x000020, "Member 'FMModdingFunctionLibrary_MakeSteamStringsFromUInt64::OutStrings' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64, StringPrefix) == 0x000030, "Member 'FMModdingFunctionLibrary_MakeSteamStringsFromUInt64::StringPrefix' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_MakeSteamStringsFromUInt64, SteamBufferType) == 0x000040, "Member 'FMModdingFunctionLibrary_MakeSteamStringsFromUInt64::SteamBufferType' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.ModListContainsMod
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_ModListContainsMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGBModBasicInfo>                ModList;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMustBeActive;                                     // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_ModListContainsMod) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_ModListContainsMod");
static_assert(sizeof(FMModdingFunctionLibrary_ModListContainsMod) == 0x000020, "Wrong size on FMModdingFunctionLibrary_ModListContainsMod");
static_assert(offsetof(FMModdingFunctionLibrary_ModListContainsMod, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_ModListContainsMod::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ModListContainsMod, ModList) == 0x000008, "Member 'FMModdingFunctionLibrary_ModListContainsMod::ModList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ModListContainsMod, bMustBeActive) == 0x000018, "Member 'FMModdingFunctionLibrary_ModListContainsMod::bMustBeActive' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ModListContainsMod, ReturnValue) == 0x000019, "Member 'FMModdingFunctionLibrary_ModListContainsMod::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.ReadLobbyDataStrings
// 0x0030 (0x0030 - 0x0000)
struct FMModdingFunctionLibrary_ReadLobbyDataStrings final
{
public:
	TArray<class FString>                         OutDecodedStrings;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StringPrefix;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                LobbyID;                                           // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_ReadLobbyDataStrings) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_ReadLobbyDataStrings");
static_assert(sizeof(FMModdingFunctionLibrary_ReadLobbyDataStrings) == 0x000030, "Wrong size on FMModdingFunctionLibrary_ReadLobbyDataStrings");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStrings, OutDecodedStrings) == 0x000000, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStrings::OutDecodedStrings' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStrings, StringPrefix) == 0x000010, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStrings::StringPrefix' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStrings, LobbyID) == 0x000020, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStrings::LobbyID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStrings, ReturnValue) == 0x000028, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStrings::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.ReadLobbyDataStringsIntoUInt64
// 0x0030 (0x0030 - 0x0000)
struct FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64 final
{
public:
	TArray<struct FUInt64>                        OutDecodedIDs;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StringPrefix;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                LobbyID;                                           // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64");
static_assert(sizeof(FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64) == 0x000030, "Wrong size on FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64, OutDecodedIDs) == 0x000000, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64::OutDecodedIDs' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64, StringPrefix) == 0x000010, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64::StringPrefix' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64, LobbyID) == 0x000020, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64::LobbyID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64, ReturnValue) == 0x000028, "Member 'FMModdingFunctionLibrary_ReadLobbyDataStringsIntoUInt64::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.RemoveModFromModList
// 0x0018 (0x0018 - 0x0000)
struct FMModdingFunctionLibrary_RemoveModFromModList final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGBModBasicInfo>                ModList;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_RemoveModFromModList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_RemoveModFromModList");
static_assert(sizeof(FMModdingFunctionLibrary_RemoveModFromModList) == 0x000018, "Wrong size on FMModdingFunctionLibrary_RemoveModFromModList");
static_assert(offsetof(FMModdingFunctionLibrary_RemoveModFromModList, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_RemoveModFromModList::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_RemoveModFromModList, ModList) == 0x000008, "Member 'FMModdingFunctionLibrary_RemoveModFromModList::ModList' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.RemoveModIDFromStringTableName
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_RemoveModIDFromStringTableName final
{
public:
	class FName                                   InStringTableName;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_RemoveModIDFromStringTableName) == 0x000004, "Wrong alignment on FMModdingFunctionLibrary_RemoveModIDFromStringTableName");
static_assert(sizeof(FMModdingFunctionLibrary_RemoveModIDFromStringTableName) == 0x000010, "Wrong size on FMModdingFunctionLibrary_RemoveModIDFromStringTableName");
static_assert(offsetof(FMModdingFunctionLibrary_RemoveModIDFromStringTableName, InStringTableName) == 0x000000, "Member 'FMModdingFunctionLibrary_RemoveModIDFromStringTableName::InStringTableName' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_RemoveModIDFromStringTableName, ReturnValue) == 0x000008, "Member 'FMModdingFunctionLibrary_RemoveModIDFromStringTableName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.RunLuaFileInEnvironment
// 0x0068 (0x0068 - 0x0000)
struct FMModdingFunctionLibrary_RunLuaFileInEnvironment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULuaState>                  LuaStateClass;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingFunctionLibrary_RunLuaFileInEnvironment) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_RunLuaFileInEnvironment");
static_assert(sizeof(FMModdingFunctionLibrary_RunLuaFileInEnvironment) == 0x000068, "Wrong size on FMModdingFunctionLibrary_RunLuaFileInEnvironment");
static_assert(offsetof(FMModdingFunctionLibrary_RunLuaFileInEnvironment, WorldContextObject) == 0x000000, "Member 'FMModdingFunctionLibrary_RunLuaFileInEnvironment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_RunLuaFileInEnvironment, Filename) == 0x000008, "Member 'FMModdingFunctionLibrary_RunLuaFileInEnvironment::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_RunLuaFileInEnvironment, LuaStateClass) == 0x000018, "Member 'FMModdingFunctionLibrary_RunLuaFileInEnvironment::LuaStateClass' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_RunLuaFileInEnvironment, ReturnValue) == 0x000020, "Member 'FMModdingFunctionLibrary_RunLuaFileInEnvironment::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.SetModIsActiveInModList
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_SetModIsActiveInModList final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGBModBasicInfo>                ModList;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSetActive;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_SetModIsActiveInModList) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_SetModIsActiveInModList");
static_assert(sizeof(FMModdingFunctionLibrary_SetModIsActiveInModList) == 0x000020, "Wrong size on FMModdingFunctionLibrary_SetModIsActiveInModList");
static_assert(offsetof(FMModdingFunctionLibrary_SetModIsActiveInModList, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_SetModIsActiveInModList::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_SetModIsActiveInModList, ModList) == 0x000008, "Member 'FMModdingFunctionLibrary_SetModIsActiveInModList::ModList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_SetModIsActiveInModList, bSetActive) == 0x000018, "Member 'FMModdingFunctionLibrary_SetModIsActiveInModList::bSetActive' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.SetModIsEnabled
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_SetModIsEnabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServer;                                           // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_SetModIsEnabled) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_SetModIsEnabled");
static_assert(sizeof(FMModdingFunctionLibrary_SetModIsEnabled) == 0x000010, "Wrong size on FMModdingFunctionLibrary_SetModIsEnabled");
static_assert(offsetof(FMModdingFunctionLibrary_SetModIsEnabled, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_SetModIsEnabled::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_SetModIsEnabled, bIsEnabled) == 0x000008, "Member 'FMModdingFunctionLibrary_SetModIsEnabled::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_SetModIsEnabled, bServer) == 0x000009, "Member 'FMModdingFunctionLibrary_SetModIsEnabled::bServer' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.SetModPriority
// 0x0010 (0x0010 - 0x0000)
struct FMModdingFunctionLibrary_SetModPriority final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewModPriority;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_SetModPriority) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_SetModPriority");
static_assert(sizeof(FMModdingFunctionLibrary_SetModPriority) == 0x000010, "Wrong size on FMModdingFunctionLibrary_SetModPriority");
static_assert(offsetof(FMModdingFunctionLibrary_SetModPriority, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_SetModPriority::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_SetModPriority, NewModPriority) == 0x000008, "Member 'FMModdingFunctionLibrary_SetModPriority::NewModPriority' has a wrong offset!");

// Function FMModdingPlugin.FMModdingFunctionLibrary.UInt64ListContainsMod
// 0x0020 (0x0020 - 0x0000)
struct FMModdingFunctionLibrary_UInt64ListContainsMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUInt64>                        ModList;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingFunctionLibrary_UInt64ListContainsMod) == 0x000008, "Wrong alignment on FMModdingFunctionLibrary_UInt64ListContainsMod");
static_assert(sizeof(FMModdingFunctionLibrary_UInt64ListContainsMod) == 0x000020, "Wrong size on FMModdingFunctionLibrary_UInt64ListContainsMod");
static_assert(offsetof(FMModdingFunctionLibrary_UInt64ListContainsMod, ModID) == 0x000000, "Member 'FMModdingFunctionLibrary_UInt64ListContainsMod::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_UInt64ListContainsMod, ModList) == 0x000008, "Member 'FMModdingFunctionLibrary_UInt64ListContainsMod::ModList' has a wrong offset!");
static_assert(offsetof(FMModdingFunctionLibrary_UInt64ListContainsMod, ReturnValue) == 0x000018, "Member 'FMModdingFunctionLibrary_UInt64ListContainsMod::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_AddToArray
// 0x0040 (0x0040 - 0x0000)
struct FMModdingManager_Config_AddToArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_Config_AddToArray) == 0x000008, "Wrong alignment on FMModdingManager_Config_AddToArray");
static_assert(sizeof(FMModdingManager_Config_AddToArray) == 0x000040, "Wrong size on FMModdingManager_Config_AddToArray");
static_assert(offsetof(FMModdingManager_Config_AddToArray, Filename) == 0x000000, "Member 'FMModdingManager_Config_AddToArray::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_AddToArray, Section) == 0x000010, "Member 'FMModdingManager_Config_AddToArray::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_AddToArray, Key) == 0x000020, "Member 'FMModdingManager_Config_AddToArray::Key' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_AddToArray, Value) == 0x000030, "Member 'FMModdingManager_Config_AddToArray::Value' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_DeleteArray
// 0x0030 (0x0030 - 0x0000)
struct FMModdingManager_Config_DeleteArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_Config_DeleteArray) == 0x000008, "Wrong alignment on FMModdingManager_Config_DeleteArray");
static_assert(sizeof(FMModdingManager_Config_DeleteArray) == 0x000030, "Wrong size on FMModdingManager_Config_DeleteArray");
static_assert(offsetof(FMModdingManager_Config_DeleteArray, Filename) == 0x000000, "Member 'FMModdingManager_Config_DeleteArray::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_DeleteArray, Section) == 0x000010, "Member 'FMModdingManager_Config_DeleteArray::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_DeleteArray, Key) == 0x000020, "Member 'FMModdingManager_Config_DeleteArray::Key' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_GetArray
// 0x0048 (0x0048 - 0x0000)
struct FMModdingManager_Config_GetArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRawFilename;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_Config_GetArray) == 0x000008, "Wrong alignment on FMModdingManager_Config_GetArray");
static_assert(sizeof(FMModdingManager_Config_GetArray) == 0x000048, "Wrong size on FMModdingManager_Config_GetArray");
static_assert(offsetof(FMModdingManager_Config_GetArray, Filename) == 0x000000, "Member 'FMModdingManager_Config_GetArray::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetArray, Section) == 0x000010, "Member 'FMModdingManager_Config_GetArray::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetArray, Key) == 0x000020, "Member 'FMModdingManager_Config_GetArray::Key' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetArray, bValid) == 0x000030, "Member 'FMModdingManager_Config_GetArray::bValid' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetArray, bRawFilename) == 0x000031, "Member 'FMModdingManager_Config_GetArray::bRawFilename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetArray, ReturnValue) == 0x000038, "Member 'FMModdingManager_Config_GetArray::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_GetInt
// 0x0038 (0x0038 - 0x0000)
struct FMModdingManager_Config_GetInt final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_Config_GetInt) == 0x000008, "Wrong alignment on FMModdingManager_Config_GetInt");
static_assert(sizeof(FMModdingManager_Config_GetInt) == 0x000038, "Wrong size on FMModdingManager_Config_GetInt");
static_assert(offsetof(FMModdingManager_Config_GetInt, Filename) == 0x000000, "Member 'FMModdingManager_Config_GetInt::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetInt, Section) == 0x000010, "Member 'FMModdingManager_Config_GetInt::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetInt, Key) == 0x000020, "Member 'FMModdingManager_Config_GetInt::Key' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetInt, bValid) == 0x000030, "Member 'FMModdingManager_Config_GetInt::bValid' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_GetInt, ReturnValue) == 0x000034, "Member 'FMModdingManager_Config_GetInt::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_RemoveFromArray
// 0x0040 (0x0040 - 0x0000)
struct FMModdingManager_Config_RemoveFromArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_Config_RemoveFromArray) == 0x000008, "Wrong alignment on FMModdingManager_Config_RemoveFromArray");
static_assert(sizeof(FMModdingManager_Config_RemoveFromArray) == 0x000040, "Wrong size on FMModdingManager_Config_RemoveFromArray");
static_assert(offsetof(FMModdingManager_Config_RemoveFromArray, Filename) == 0x000000, "Member 'FMModdingManager_Config_RemoveFromArray::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_RemoveFromArray, Section) == 0x000010, "Member 'FMModdingManager_Config_RemoveFromArray::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_RemoveFromArray, Key) == 0x000020, "Member 'FMModdingManager_Config_RemoveFromArray::Key' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_RemoveFromArray, Value) == 0x000030, "Member 'FMModdingManager_Config_RemoveFromArray::Value' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_Save
// 0x0018 (0x0018 - 0x0000)
struct FMModdingManager_Config_Save final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRawFilename;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_Config_Save) == 0x000008, "Wrong alignment on FMModdingManager_Config_Save");
static_assert(sizeof(FMModdingManager_Config_Save) == 0x000018, "Wrong size on FMModdingManager_Config_Save");
static_assert(offsetof(FMModdingManager_Config_Save, Filename) == 0x000000, "Member 'FMModdingManager_Config_Save::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_Save, bRawFilename) == 0x000010, "Member 'FMModdingManager_Config_Save::bRawFilename' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_SetArray
// 0x0048 (0x0048 - 0x0000)
struct FMModdingManager_Config_SetArray final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRawFilename;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_Config_SetArray) == 0x000008, "Wrong alignment on FMModdingManager_Config_SetArray");
static_assert(sizeof(FMModdingManager_Config_SetArray) == 0x000048, "Wrong size on FMModdingManager_Config_SetArray");
static_assert(offsetof(FMModdingManager_Config_SetArray, Filename) == 0x000000, "Member 'FMModdingManager_Config_SetArray::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetArray, Section) == 0x000010, "Member 'FMModdingManager_Config_SetArray::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetArray, Key) == 0x000020, "Member 'FMModdingManager_Config_SetArray::Key' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetArray, Values) == 0x000030, "Member 'FMModdingManager_Config_SetArray::Values' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetArray, bRawFilename) == 0x000040, "Member 'FMModdingManager_Config_SetArray::bRawFilename' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Config_SetInt
// 0x0038 (0x0038 - 0x0000)
struct FMModdingManager_Config_SetInt final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_Config_SetInt) == 0x000008, "Wrong alignment on FMModdingManager_Config_SetInt");
static_assert(sizeof(FMModdingManager_Config_SetInt) == 0x000038, "Wrong size on FMModdingManager_Config_SetInt");
static_assert(offsetof(FMModdingManager_Config_SetInt, Filename) == 0x000000, "Member 'FMModdingManager_Config_SetInt::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetInt, Section) == 0x000010, "Member 'FMModdingManager_Config_SetInt::Section' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetInt, Key) == 0x000020, "Member 'FMModdingManager_Config_SetInt::Key' has a wrong offset!");
static_assert(offsetof(FMModdingManager_Config_SetInt, Value) == 0x000030, "Member 'FMModdingManager_Config_SetInt::Value' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.Get
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_Get final
{
public:
	class UFMModdingManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_Get) == 0x000008, "Wrong alignment on FMModdingManager_Get");
static_assert(sizeof(FMModdingManager_Get) == 0x000008, "Wrong size on FMModdingManager_Get");
static_assert(offsetof(FMModdingManager_Get, ReturnValue) == 0x000000, "Member 'FMModdingManager_Get::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetConfigFilename
// 0x0020 (0x0020 - 0x0000)
struct FMModdingManager_GetConfigFilename final
{
public:
	class FString                                 ConfigFile;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetConfigFilename) == 0x000008, "Wrong alignment on FMModdingManager_GetConfigFilename");
static_assert(sizeof(FMModdingManager_GetConfigFilename) == 0x000020, "Wrong size on FMModdingManager_GetConfigFilename");
static_assert(offsetof(FMModdingManager_GetConfigFilename, ConfigFile) == 0x000000, "Member 'FMModdingManager_GetConfigFilename::ConfigFile' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetConfigFilename, ReturnValue) == 0x000010, "Member 'FMModdingManager_GetConfigFilename::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunction
// 0x00E8 (0x00E8 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunction final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00A0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunction) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunction");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunction) == 0x0000E8, "Wrong size on FMModdingManager_AttemptToCallGameModeFunction");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunction, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunction::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunction, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunction::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunction, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunction::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunction, ReturnValue) == 0x0000A0, "Member 'FMModdingManager_AttemptToCallGameModeFunction::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutators
// 0x00A0 (0x00A0 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunctionAndMutators final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunctionAndMutators) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunctionAndMutators");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunctionAndMutators) == 0x0000A0, "Wrong size on FMModdingManager_AttemptToCallGameModeFunctionAndMutators");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutators, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutators::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutators, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutators::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutators, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutators::InArgs' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool
// 0x00E8 (0x00E8 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00A0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool) == 0x0000E8, "Wrong size on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool, ReturnValue) == 0x0000A0, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyBool::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger
// 0x00E8 (0x00E8 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00A0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger) == 0x0000E8, "Wrong size on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger, ReturnValue) == 0x0000A0, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyInteger::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString
// 0x00E8 (0x00E8 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00A0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString) == 0x0000E8, "Wrong size on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString, ReturnValue) == 0x0000A0, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsAbortOnAnyString::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsCanIntercept
// 0x00A8 (0x00A8 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept) == 0x0000A8, "Wrong size on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept, ReturnValue) == 0x0000A0, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsCanIntercept::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallGameModeFunctionAndMutatorsReversed
// 0x00A0 (0x00A0 - 0x0000)
struct FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed final
{
public:
	struct FLuaScriptInfo                         GameModeScriptInfo;                                // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed");
static_assert(sizeof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed) == 0x0000A0, "Wrong size on FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed, GameModeScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed::GameModeScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallGameModeFunctionAndMutatorsReversed::InArgs' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallLuaFunction
// 0x00E8 (0x00E8 - 0x0000)
struct FMModdingManager_AttemptToCallLuaFunction final
{
public:
	struct FLuaScriptInfo                         LuaScriptInfo;                                     // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x00A0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallLuaFunction) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallLuaFunction");
static_assert(sizeof(FMModdingManager_AttemptToCallLuaFunction) == 0x0000E8, "Wrong size on FMModdingManager_AttemptToCallLuaFunction");
static_assert(offsetof(FMModdingManager_AttemptToCallLuaFunction, LuaScriptInfo) == 0x000000, "Member 'FMModdingManager_AttemptToCallLuaFunction::LuaScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallLuaFunction, FunctionName) == 0x000080, "Member 'FMModdingManager_AttemptToCallLuaFunction::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallLuaFunction, InArgs) == 0x000090, "Member 'FMModdingManager_AttemptToCallLuaFunction::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallLuaFunction, ReturnValue) == 0x0000A0, "Member 'FMModdingManager_AttemptToCallLuaFunction::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionInMod
// 0x0070 (0x0070 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctionInMod final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0028(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctionInMod) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctionInMod");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctionInMod) == 0x000070, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctionInMod");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionInMod, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctionInMod::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionInMod, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctionInMod::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionInMod, ModID) == 0x000020, "Member 'FMModdingManager_AttemptToCallMutatorFunctionInMod::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionInMod, ReturnValue) == 0x000028, "Member 'FMModdingManager_AttemptToCallMutatorFunctionInMod::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctions
// 0x0020 (0x0020 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctions final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctions) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctions");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctions) == 0x000020, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctions");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctions, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctions::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctions, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctions::InArgs' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsAbortOnAnyInteger
// 0x0068 (0x0068 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger) == 0x000068, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger, ReturnValue) == 0x000020, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyInteger::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsAbortOnAnyString
// 0x0068 (0x0068 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString) == 0x000068, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString, ReturnValue) == 0x000020, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyString::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsAbortOnAnyTable
// 0x0068 (0x0068 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable) == 0x000068, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable, ReturnValue) == 0x000020, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsAbortOnAnyTable::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsCanIntercept
// 0x0028 (0x0028 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept) == 0x000028, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept::InArgs' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept, ReturnValue) == 0x000020, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsCanIntercept::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.AttemptToCallMutatorFunctionsReversed
// 0x0020 (0x0020 - 0x0000)
struct FMModdingManager_AttemptToCallMutatorFunctionsReversed final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLuaValue>                      InArgs;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_AttemptToCallMutatorFunctionsReversed) == 0x000008, "Wrong alignment on FMModdingManager_AttemptToCallMutatorFunctionsReversed");
static_assert(sizeof(FMModdingManager_AttemptToCallMutatorFunctionsReversed) == 0x000020, "Wrong size on FMModdingManager_AttemptToCallMutatorFunctionsReversed");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsReversed, FunctionName) == 0x000000, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsReversed::FunctionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_AttemptToCallMutatorFunctionsReversed, InArgs) == 0x000010, "Member 'FMModdingManager_AttemptToCallMutatorFunctionsReversed::InArgs' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.CreateInstanceOfScript
// 0x0068 (0x0068 - 0x0000)
struct FMModdingManager_CreateInstanceOfScript final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULuaState>                  LuaStateClass;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptFilename;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_CreateInstanceOfScript) == 0x000008, "Wrong alignment on FMModdingManager_CreateInstanceOfScript");
static_assert(sizeof(FMModdingManager_CreateInstanceOfScript) == 0x000068, "Wrong size on FMModdingManager_CreateInstanceOfScript");
static_assert(offsetof(FMModdingManager_CreateInstanceOfScript, WorldContextObject) == 0x000000, "Member 'FMModdingManager_CreateInstanceOfScript::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingManager_CreateInstanceOfScript, LuaStateClass) == 0x000008, "Member 'FMModdingManager_CreateInstanceOfScript::LuaStateClass' has a wrong offset!");
static_assert(offsetof(FMModdingManager_CreateInstanceOfScript, ScriptFilename) == 0x000010, "Member 'FMModdingManager_CreateInstanceOfScript::ScriptFilename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_CreateInstanceOfScript, ReturnValue) == 0x000020, "Member 'FMModdingManager_CreateInstanceOfScript::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.FindLuaMutator
// 0x00A0 (0x00A0 - 0x0000)
struct FMModdingManager_FindLuaMutator final
{
public:
	struct FLuaScriptInfo                         OutLuaScriptInfo;                                  // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0080(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MutatorName;                                       // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_FindLuaMutator) == 0x000008, "Wrong alignment on FMModdingManager_FindLuaMutator");
static_assert(sizeof(FMModdingManager_FindLuaMutator) == 0x0000A0, "Wrong size on FMModdingManager_FindLuaMutator");
static_assert(offsetof(FMModdingManager_FindLuaMutator, OutLuaScriptInfo) == 0x000000, "Member 'FMModdingManager_FindLuaMutator::OutLuaScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_FindLuaMutator, ModID) == 0x000080, "Member 'FMModdingManager_FindLuaMutator::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_FindLuaMutator, MutatorName) == 0x000088, "Member 'FMModdingManager_FindLuaMutator::MutatorName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_FindLuaMutator, ReturnValue) == 0x000098, "Member 'FMModdingManager_FindLuaMutator::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GenerateInstalledModList
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_GenerateInstalledModList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GenerateInstalledModList) == 0x000008, "Wrong alignment on FMModdingManager_GenerateInstalledModList");
static_assert(sizeof(FMModdingManager_GenerateInstalledModList) == 0x000008, "Wrong size on FMModdingManager_GenerateInstalledModList");
static_assert(offsetof(FMModdingManager_GenerateInstalledModList, WorldContextObject) == 0x000000, "Member 'FMModdingManager_GenerateInstalledModList::WorldContextObject' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetActiveLuaMutators
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_GetActiveLuaMutators final
{
public:
	TArray<struct FLuaScriptInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetActiveLuaMutators) == 0x000008, "Wrong alignment on FMModdingManager_GetActiveLuaMutators");
static_assert(sizeof(FMModdingManager_GetActiveLuaMutators) == 0x000010, "Wrong size on FMModdingManager_GetActiveLuaMutators");
static_assert(offsetof(FMModdingManager_GetActiveLuaMutators, ReturnValue) == 0x000000, "Member 'FMModdingManager_GetActiveLuaMutators::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetCachedFileListIncludingModIDList
// 0x0038 (0x0038 - 0x0000)
struct FMModdingManager_GetCachedFileListIncludingModIDList final
{
public:
	EGBResourceType                               GBResourceType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimmed;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FileList;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUInt64>                        ModIDList;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_GetCachedFileListIncludingModIDList) == 0x000008, "Wrong alignment on FMModdingManager_GetCachedFileListIncludingModIDList");
static_assert(sizeof(FMModdingManager_GetCachedFileListIncludingModIDList) == 0x000038, "Wrong size on FMModdingManager_GetCachedFileListIncludingModIDList");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingModIDList, GBResourceType) == 0x000000, "Member 'FMModdingManager_GetCachedFileListIncludingModIDList::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingModIDList, bTrimmed) == 0x000001, "Member 'FMModdingManager_GetCachedFileListIncludingModIDList::bTrimmed' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingModIDList, FileList) == 0x000008, "Member 'FMModdingManager_GetCachedFileListIncludingModIDList::FileList' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingModIDList, ModIDList) == 0x000018, "Member 'FMModdingManager_GetCachedFileListIncludingModIDList::ModIDList' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingModIDList, WorldContextObject) == 0x000028, "Member 'FMModdingManager_GetCachedFileListIncludingModIDList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingModIDList, ReturnValue) == 0x000030, "Member 'FMModdingManager_GetCachedFileListIncludingModIDList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetCachedFileListIncludingMods
// 0x0028 (0x0028 - 0x0000)
struct FMModdingManager_GetCachedFileListIncludingMods final
{
public:
	EGBResourceType                               GBResourceType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrimmed;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FileList;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_GetCachedFileListIncludingMods) == 0x000008, "Wrong alignment on FMModdingManager_GetCachedFileListIncludingMods");
static_assert(sizeof(FMModdingManager_GetCachedFileListIncludingMods) == 0x000028, "Wrong size on FMModdingManager_GetCachedFileListIncludingMods");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingMods, GBResourceType) == 0x000000, "Member 'FMModdingManager_GetCachedFileListIncludingMods::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingMods, bTrimmed) == 0x000001, "Member 'FMModdingManager_GetCachedFileListIncludingMods::bTrimmed' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingMods, FileList) == 0x000008, "Member 'FMModdingManager_GetCachedFileListIncludingMods::FileList' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingMods, WorldContextObject) == 0x000018, "Member 'FMModdingManager_GetCachedFileListIncludingMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetCachedFileListIncludingMods, ReturnValue) == 0x000020, "Member 'FMModdingManager_GetCachedFileListIncludingMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetCurrentExecutingModID
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_GetCurrentExecutingModID final
{
public:
	struct FUInt64                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetCurrentExecutingModID) == 0x000008, "Wrong alignment on FMModdingManager_GetCurrentExecutingModID");
static_assert(sizeof(FMModdingManager_GetCurrentExecutingModID) == 0x000008, "Wrong size on FMModdingManager_GetCurrentExecutingModID");
static_assert(offsetof(FMModdingManager_GetCurrentExecutingModID, ReturnValue) == 0x000000, "Member 'FMModdingManager_GetCurrentExecutingModID::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetLuaScriptInfoForMutatorFileName
// 0x0090 (0x0090 - 0x0000)
struct FMModdingManager_GetLuaScriptInfoForMutatorFileName final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaScriptInfo                         ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetLuaScriptInfoForMutatorFileName) == 0x000008, "Wrong alignment on FMModdingManager_GetLuaScriptInfoForMutatorFileName");
static_assert(sizeof(FMModdingManager_GetLuaScriptInfoForMutatorFileName) == 0x000090, "Wrong size on FMModdingManager_GetLuaScriptInfoForMutatorFileName");
static_assert(offsetof(FMModdingManager_GetLuaScriptInfoForMutatorFileName, Filename) == 0x000000, "Member 'FMModdingManager_GetLuaScriptInfoForMutatorFileName::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetLuaScriptInfoForMutatorFileName, ReturnValue) == 0x000010, "Member 'FMModdingManager_GetLuaScriptInfoForMutatorFileName::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetModDetails
// 0x0018 (0x0018 - 0x0000)
struct FMModdingManager_GetModDetails final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUGCFileInfo& ModDetails, bool bSuccess)> Delegate;                  // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetModDetails) == 0x000008, "Wrong alignment on FMModdingManager_GetModDetails");
static_assert(sizeof(FMModdingManager_GetModDetails) == 0x000018, "Wrong size on FMModdingManager_GetModDetails");
static_assert(offsetof(FMModdingManager_GetModDetails, ModID) == 0x000000, "Member 'FMModdingManager_GetModDetails::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetModDetails, Delegate) == 0x000008, "Member 'FMModdingManager_GetModDetails::Delegate' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetModListForServer
// 0x0078 (0x0078 - 0x0000)
struct FMModdingManager_GetModListForServer final
{
public:
	struct FSteamServerDetails                    SteamServerDetails;                                // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FUInt64>& ModList, bool bSuccess)> Delegate;                  // 0x0068(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetModListForServer) == 0x000008, "Wrong alignment on FMModdingManager_GetModListForServer");
static_assert(sizeof(FMModdingManager_GetModListForServer) == 0x000078, "Wrong size on FMModdingManager_GetModListForServer");
static_assert(offsetof(FMModdingManager_GetModListForServer, SteamServerDetails) == 0x000000, "Member 'FMModdingManager_GetModListForServer::SteamServerDetails' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetModListForServer, Delegate) == 0x000068, "Member 'FMModdingManager_GetModListForServer::Delegate' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetMutatorOption
// 0x00A8 (0x00A8 - 0x0000)
struct FMModdingManager_GetMutatorOption final
{
public:
	struct FLuaScriptInfo                         ScriptInfo;                                        // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   OptionName;                                        // 0x0080(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConfig;                                        // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLuaScriptOption                       ReturnValue;                                       // 0x008C(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetMutatorOption) == 0x000008, "Wrong alignment on FMModdingManager_GetMutatorOption");
static_assert(sizeof(FMModdingManager_GetMutatorOption) == 0x0000A8, "Wrong size on FMModdingManager_GetMutatorOption");
static_assert(offsetof(FMModdingManager_GetMutatorOption, ScriptInfo) == 0x000000, "Member 'FMModdingManager_GetMutatorOption::ScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOption, OptionName) == 0x000080, "Member 'FMModdingManager_GetMutatorOption::OptionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOption, bUseConfig) == 0x000088, "Member 'FMModdingManager_GetMutatorOption::bUseConfig' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOption, ReturnValue) == 0x00008C, "Member 'FMModdingManager_GetMutatorOption::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetMutatorOptionByFilename
// 0x0038 (0x0038 - 0x0000)
struct FMModdingManager_GetMutatorOptionByFilename final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionName;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConfig;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLuaScriptOption                       ReturnValue;                                       // 0x001C(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetMutatorOptionByFilename) == 0x000008, "Wrong alignment on FMModdingManager_GetMutatorOptionByFilename");
static_assert(sizeof(FMModdingManager_GetMutatorOptionByFilename) == 0x000038, "Wrong size on FMModdingManager_GetMutatorOptionByFilename");
static_assert(offsetof(FMModdingManager_GetMutatorOptionByFilename, Filename) == 0x000000, "Member 'FMModdingManager_GetMutatorOptionByFilename::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptionByFilename, OptionName) == 0x000010, "Member 'FMModdingManager_GetMutatorOptionByFilename::OptionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptionByFilename, bUseConfig) == 0x000018, "Member 'FMModdingManager_GetMutatorOptionByFilename::bUseConfig' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptionByFilename, ReturnValue) == 0x00001C, "Member 'FMModdingManager_GetMutatorOptionByFilename::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetMutatorOptions
// 0x0098 (0x0098 - 0x0000)
struct FMModdingManager_GetMutatorOptions final
{
public:
	struct FLuaScriptInfo                         ScriptInfo;                                        // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseConfig;                                        // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLuaScriptOption>               ReturnValue;                                       // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetMutatorOptions) == 0x000008, "Wrong alignment on FMModdingManager_GetMutatorOptions");
static_assert(sizeof(FMModdingManager_GetMutatorOptions) == 0x000098, "Wrong size on FMModdingManager_GetMutatorOptions");
static_assert(offsetof(FMModdingManager_GetMutatorOptions, ScriptInfo) == 0x000000, "Member 'FMModdingManager_GetMutatorOptions::ScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptions, bUseConfig) == 0x000080, "Member 'FMModdingManager_GetMutatorOptions::bUseConfig' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptions, ReturnValue) == 0x000088, "Member 'FMModdingManager_GetMutatorOptions::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetMutatorOptionsByFilename
// 0x0028 (0x0028 - 0x0000)
struct FMModdingManager_GetMutatorOptionsByFilename final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConfig;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLuaScriptOption>               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetMutatorOptionsByFilename) == 0x000008, "Wrong alignment on FMModdingManager_GetMutatorOptionsByFilename");
static_assert(sizeof(FMModdingManager_GetMutatorOptionsByFilename) == 0x000028, "Wrong size on FMModdingManager_GetMutatorOptionsByFilename");
static_assert(offsetof(FMModdingManager_GetMutatorOptionsByFilename, Filename) == 0x000000, "Member 'FMModdingManager_GetMutatorOptionsByFilename::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptionsByFilename, bUseConfig) == 0x000010, "Member 'FMModdingManager_GetMutatorOptionsByFilename::bUseConfig' has a wrong offset!");
static_assert(offsetof(FMModdingManager_GetMutatorOptionsByFilename, ReturnValue) == 0x000018, "Member 'FMModdingManager_GetMutatorOptionsByFilename::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.PrepAllLuaMutators
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_PrepAllLuaMutators final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_PrepAllLuaMutators) == 0x000008, "Wrong alignment on FMModdingManager_PrepAllLuaMutators");
static_assert(sizeof(FMModdingManager_PrepAllLuaMutators) == 0x000008, "Wrong size on FMModdingManager_PrepAllLuaMutators");
static_assert(offsetof(FMModdingManager_PrepAllLuaMutators, WorldContextObject) == 0x000000, "Member 'FMModdingManager_PrepAllLuaMutators::WorldContextObject' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.PrepLuaMutatorsForMod
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_PrepLuaMutatorsForMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_PrepLuaMutatorsForMod) == 0x000008, "Wrong alignment on FMModdingManager_PrepLuaMutatorsForMod");
static_assert(sizeof(FMModdingManager_PrepLuaMutatorsForMod) == 0x000010, "Wrong size on FMModdingManager_PrepLuaMutatorsForMod");
static_assert(offsetof(FMModdingManager_PrepLuaMutatorsForMod, ModID) == 0x000000, "Member 'FMModdingManager_PrepLuaMutatorsForMod::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_PrepLuaMutatorsForMod, WorldContextObject) == 0x000008, "Member 'FMModdingManager_PrepLuaMutatorsForMod::WorldContextObject' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.RunLuaFileInEnvironment
// 0x00D8 (0x00D8 - 0x0000)
struct FMModdingManager_RunLuaFileInEnvironment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULuaState>                  LuaStateClass;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLuaScriptInfo                         LuaScriptInfo;                                     // 0x0010(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FLuaValue                              ReturnValue;                                       // 0x0090(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_RunLuaFileInEnvironment) == 0x000008, "Wrong alignment on FMModdingManager_RunLuaFileInEnvironment");
static_assert(sizeof(FMModdingManager_RunLuaFileInEnvironment) == 0x0000D8, "Wrong size on FMModdingManager_RunLuaFileInEnvironment");
static_assert(offsetof(FMModdingManager_RunLuaFileInEnvironment, WorldContextObject) == 0x000000, "Member 'FMModdingManager_RunLuaFileInEnvironment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMModdingManager_RunLuaFileInEnvironment, LuaStateClass) == 0x000008, "Member 'FMModdingManager_RunLuaFileInEnvironment::LuaStateClass' has a wrong offset!");
static_assert(offsetof(FMModdingManager_RunLuaFileInEnvironment, LuaScriptInfo) == 0x000010, "Member 'FMModdingManager_RunLuaFileInEnvironment::LuaScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_RunLuaFileInEnvironment, ReturnValue) == 0x000090, "Member 'FMModdingManager_RunLuaFileInEnvironment::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetActiveLuaMutators
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_SetActiveLuaMutators final
{
public:
	TArray<struct FLuaScriptInfo>                 UpdatedActiveLuaMutators;                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_SetActiveLuaMutators) == 0x000008, "Wrong alignment on FMModdingManager_SetActiveLuaMutators");
static_assert(sizeof(FMModdingManager_SetActiveLuaMutators) == 0x000010, "Wrong size on FMModdingManager_SetActiveLuaMutators");
static_assert(offsetof(FMModdingManager_SetActiveLuaMutators, UpdatedActiveLuaMutators) == 0x000000, "Member 'FMModdingManager_SetActiveLuaMutators::UpdatedActiveLuaMutators' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetCurrentExecutingModID
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_SetCurrentExecutingModID final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_SetCurrentExecutingModID) == 0x000008, "Wrong alignment on FMModdingManager_SetCurrentExecutingModID");
static_assert(sizeof(FMModdingManager_SetCurrentExecutingModID) == 0x000008, "Wrong size on FMModdingManager_SetCurrentExecutingModID");
static_assert(offsetof(FMModdingManager_SetCurrentExecutingModID, ModID) == 0x000000, "Member 'FMModdingManager_SetCurrentExecutingModID::ModID' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetModDisabled
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_SetModDisabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_SetModDisabled) == 0x000008, "Wrong alignment on FMModdingManager_SetModDisabled");
static_assert(sizeof(FMModdingManager_SetModDisabled) == 0x000010, "Wrong size on FMModdingManager_SetModDisabled");
static_assert(offsetof(FMModdingManager_SetModDisabled, ModID) == 0x000000, "Member 'FMModdingManager_SetModDisabled::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetModDisabled, bDisabled) == 0x000008, "Member 'FMModdingManager_SetModDisabled::bDisabled' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetMutatorOptionsFromMissionSettings
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_SetMutatorOptionsFromMissionSettings final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_SetMutatorOptionsFromMissionSettings) == 0x000008, "Wrong alignment on FMModdingManager_SetMutatorOptionsFromMissionSettings");
static_assert(sizeof(FMModdingManager_SetMutatorOptionsFromMissionSettings) == 0x000010, "Wrong size on FMModdingManager_SetMutatorOptionsFromMissionSettings");
static_assert(offsetof(FMModdingManager_SetMutatorOptionsFromMissionSettings, Params_0) == 0x000000, "Member 'FMModdingManager_SetMutatorOptionsFromMissionSettings::Params_0' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetMutatorOptionValue
// 0x0090 (0x0090 - 0x0000)
struct FMModdingManager_SetMutatorOptionValue final
{
public:
	struct FLuaScriptInfo                         ScriptInfo;                                        // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   OptionName;                                        // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetConfig;                                        // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x008D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_SetMutatorOptionValue) == 0x000008, "Wrong alignment on FMModdingManager_SetMutatorOptionValue");
static_assert(sizeof(FMModdingManager_SetMutatorOptionValue) == 0x000090, "Wrong size on FMModdingManager_SetMutatorOptionValue");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValue, ScriptInfo) == 0x000000, "Member 'FMModdingManager_SetMutatorOptionValue::ScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValue, OptionName) == 0x000080, "Member 'FMModdingManager_SetMutatorOptionValue::OptionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValue, NewValue) == 0x000088, "Member 'FMModdingManager_SetMutatorOptionValue::NewValue' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValue, bSetConfig) == 0x00008C, "Member 'FMModdingManager_SetMutatorOptionValue::bSetConfig' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValue, ReturnValue) == 0x00008D, "Member 'FMModdingManager_SetMutatorOptionValue::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetMutatorOptionValueByFilename
// 0x0020 (0x0020 - 0x0000)
struct FMModdingManager_SetMutatorOptionValueByFilename final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetConfig;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_SetMutatorOptionValueByFilename) == 0x000008, "Wrong alignment on FMModdingManager_SetMutatorOptionValueByFilename");
static_assert(sizeof(FMModdingManager_SetMutatorOptionValueByFilename) == 0x000020, "Wrong size on FMModdingManager_SetMutatorOptionValueByFilename");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValueByFilename, Filename) == 0x000000, "Member 'FMModdingManager_SetMutatorOptionValueByFilename::Filename' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValueByFilename, OptionName) == 0x000010, "Member 'FMModdingManager_SetMutatorOptionValueByFilename::OptionName' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValueByFilename, NewValue) == 0x000018, "Member 'FMModdingManager_SetMutatorOptionValueByFilename::NewValue' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValueByFilename, bSetConfig) == 0x00001C, "Member 'FMModdingManager_SetMutatorOptionValueByFilename::bSetConfig' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetMutatorOptionValueByFilename, ReturnValue) == 0x00001D, "Member 'FMModdingManager_SetMutatorOptionValueByFilename::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetServerAuthoritative
// 0x0088 (0x0088 - 0x0000)
struct FMModdingManager_SetServerAuthoritative final
{
public:
	struct FLuaScriptInfo                         ScriptInfo;                                        // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bNewServerAuthoritative;                           // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_SetServerAuthoritative) == 0x000008, "Wrong alignment on FMModdingManager_SetServerAuthoritative");
static_assert(sizeof(FMModdingManager_SetServerAuthoritative) == 0x000088, "Wrong size on FMModdingManager_SetServerAuthoritative");
static_assert(offsetof(FMModdingManager_SetServerAuthoritative, ScriptInfo) == 0x000000, "Member 'FMModdingManager_SetServerAuthoritative::ScriptInfo' has a wrong offset!");
static_assert(offsetof(FMModdingManager_SetServerAuthoritative, bNewServerAuthoritative) == 0x000080, "Member 'FMModdingManager_SetServerAuthoritative::bNewServerAuthoritative' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SetServerModListForClient
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_SetServerModListForClient final
{
public:
	TArray<struct FUInt64>                        InServerModListForClient;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_SetServerModListForClient) == 0x000008, "Wrong alignment on FMModdingManager_SetServerModListForClient");
static_assert(sizeof(FMModdingManager_SetServerModListForClient) == 0x000010, "Wrong size on FMModdingManager_SetServerModListForClient");
static_assert(offsetof(FMModdingManager_SetServerModListForClient, InServerModListForClient) == 0x000000, "Member 'FMModdingManager_SetServerModListForClient::InServerModListForClient' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.SubscribeToMod
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_SubscribeToMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_SubscribeToMod) == 0x000008, "Wrong alignment on FMModdingManager_SubscribeToMod");
static_assert(sizeof(FMModdingManager_SubscribeToMod) == 0x000008, "Wrong size on FMModdingManager_SubscribeToMod");
static_assert(offsetof(FMModdingManager_SubscribeToMod, ModID) == 0x000000, "Member 'FMModdingManager_SubscribeToMod::ModID' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.UnloadLuaMutatorsForMod
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_UnloadLuaMutatorsForMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_UnloadLuaMutatorsForMod) == 0x000008, "Wrong alignment on FMModdingManager_UnloadLuaMutatorsForMod");
static_assert(sizeof(FMModdingManager_UnloadLuaMutatorsForMod) == 0x000008, "Wrong size on FMModdingManager_UnloadLuaMutatorsForMod");
static_assert(offsetof(FMModdingManager_UnloadLuaMutatorsForMod, ModID) == 0x000000, "Member 'FMModdingManager_UnloadLuaMutatorsForMod::ModID' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.UnsubscribeFromMod
// 0x0008 (0x0008 - 0x0000)
struct FMModdingManager_UnsubscribeFromMod final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_UnsubscribeFromMod) == 0x000008, "Wrong alignment on FMModdingManager_UnsubscribeFromMod");
static_assert(sizeof(FMModdingManager_UnsubscribeFromMod) == 0x000008, "Wrong size on FMModdingManager_UnsubscribeFromMod");
static_assert(offsetof(FMModdingManager_UnsubscribeFromMod, ModID) == 0x000000, "Member 'FMModdingManager_UnsubscribeFromMod::ModID' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.UpdateCachedFileList
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_UpdateCachedFileList final
{
public:
	EGBResourceType                               GBResourceType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_UpdateCachedFileList) == 0x000008, "Wrong alignment on FMModdingManager_UpdateCachedFileList");
static_assert(sizeof(FMModdingManager_UpdateCachedFileList) == 0x000010, "Wrong size on FMModdingManager_UpdateCachedFileList");
static_assert(offsetof(FMModdingManager_UpdateCachedFileList, GBResourceType) == 0x000000, "Member 'FMModdingManager_UpdateCachedFileList::GBResourceType' has a wrong offset!");
static_assert(offsetof(FMModdingManager_UpdateCachedFileList, WorldContextObject) == 0x000008, "Member 'FMModdingManager_UpdateCachedFileList::WorldContextObject' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetActiveModList
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_GetActiveModList final
{
public:
	TArray<struct FUInt64>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetActiveModList) == 0x000008, "Wrong alignment on FMModdingManager_GetActiveModList");
static_assert(sizeof(FMModdingManager_GetActiveModList) == 0x000010, "Wrong size on FMModdingManager_GetActiveModList");
static_assert(offsetof(FMModdingManager_GetActiveModList, ReturnValue) == 0x000000, "Member 'FMModdingManager_GetActiveModList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetInstalledModList
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_GetInstalledModList final
{
public:
	TArray<struct FUInt64>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetInstalledModList) == 0x000008, "Wrong alignment on FMModdingManager_GetInstalledModList");
static_assert(sizeof(FMModdingManager_GetInstalledModList) == 0x000010, "Wrong size on FMModdingManager_GetInstalledModList");
static_assert(offsetof(FMModdingManager_GetInstalledModList, ReturnValue) == 0x000000, "Member 'FMModdingManager_GetInstalledModList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.GetSubscribedModList
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_GetSubscribedModList final
{
public:
	TArray<struct FUInt64>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingManager_GetSubscribedModList) == 0x000008, "Wrong alignment on FMModdingManager_GetSubscribedModList");
static_assert(sizeof(FMModdingManager_GetSubscribedModList) == 0x000010, "Wrong size on FMModdingManager_GetSubscribedModList");
static_assert(offsetof(FMModdingManager_GetSubscribedModList, ReturnValue) == 0x000000, "Member 'FMModdingManager_GetSubscribedModList::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.IsModActive
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_IsModActive final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServer;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_IsModActive) == 0x000008, "Wrong alignment on FMModdingManager_IsModActive");
static_assert(sizeof(FMModdingManager_IsModActive) == 0x000010, "Wrong size on FMModdingManager_IsModActive");
static_assert(offsetof(FMModdingManager_IsModActive, ModID) == 0x000000, "Member 'FMModdingManager_IsModActive::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_IsModActive, bServer) == 0x000008, "Member 'FMModdingManager_IsModActive::bServer' has a wrong offset!");
static_assert(offsetof(FMModdingManager_IsModActive, ReturnValue) == 0x000009, "Member 'FMModdingManager_IsModActive::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.IsModDisabled
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_IsModDisabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServer;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_IsModDisabled) == 0x000008, "Wrong alignment on FMModdingManager_IsModDisabled");
static_assert(sizeof(FMModdingManager_IsModDisabled) == 0x000010, "Wrong size on FMModdingManager_IsModDisabled");
static_assert(offsetof(FMModdingManager_IsModDisabled, ModID) == 0x000000, "Member 'FMModdingManager_IsModDisabled::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_IsModDisabled, bServer) == 0x000008, "Member 'FMModdingManager_IsModDisabled::bServer' has a wrong offset!");
static_assert(offsetof(FMModdingManager_IsModDisabled, ReturnValue) == 0x000009, "Member 'FMModdingManager_IsModDisabled::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.IsModInstalled
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_IsModInstalled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_IsModInstalled) == 0x000008, "Wrong alignment on FMModdingManager_IsModInstalled");
static_assert(sizeof(FMModdingManager_IsModInstalled) == 0x000010, "Wrong size on FMModdingManager_IsModInstalled");
static_assert(offsetof(FMModdingManager_IsModInstalled, ModID) == 0x000000, "Member 'FMModdingManager_IsModInstalled::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_IsModInstalled, ReturnValue) == 0x000008, "Member 'FMModdingManager_IsModInstalled::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingManager.IsModSubscribed
// 0x0010 (0x0010 - 0x0000)
struct FMModdingManager_IsModSubscribed final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingManager_IsModSubscribed) == 0x000008, "Wrong alignment on FMModdingManager_IsModSubscribed");
static_assert(sizeof(FMModdingManager_IsModSubscribed) == 0x000010, "Wrong size on FMModdingManager_IsModSubscribed");
static_assert(offsetof(FMModdingManager_IsModSubscribed, ModID) == 0x000000, "Member 'FMModdingManager_IsModSubscribed::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingManager_IsModSubscribed, ReturnValue) == 0x000008, "Member 'FMModdingManager_IsModSubscribed::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModDetailsQuery.RequestModDetails
// 0x0008 (0x0008 - 0x0000)
struct FMModdingModDetailsQuery_RequestModDetails final
{
public:
	struct FUInt64                                InID;                                              // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModDetailsQuery_RequestModDetails) == 0x000008, "Wrong alignment on FMModdingModDetailsQuery_RequestModDetails");
static_assert(sizeof(FMModdingModDetailsQuery_RequestModDetails) == 0x000008, "Wrong size on FMModdingModDetailsQuery_RequestModDetails");
static_assert(offsetof(FMModdingModDetailsQuery_RequestModDetails, InID) == 0x000000, "Member 'FMModdingModDetailsQuery_RequestModDetails::InID' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.Initialize
// 0x0018 (0x0018 - 0x0000)
struct FMModdingModSync_Initialize final
{
public:
	TArray<struct FUInt64>                        InModList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInUseUI;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingModSync_Initialize) == 0x000008, "Wrong alignment on FMModdingModSync_Initialize");
static_assert(sizeof(FMModdingModSync_Initialize) == 0x000018, "Wrong size on FMModdingModSync_Initialize");
static_assert(offsetof(FMModdingModSync_Initialize, InModList) == 0x000000, "Member 'FMModdingModSync_Initialize::InModList' has a wrong offset!");
static_assert(offsetof(FMModdingModSync_Initialize, bInUseUI) == 0x000010, "Member 'FMModdingModSync_Initialize::bInUseUI' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.OnModGlobalSyncStatusUpdatedEvent
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent final
{
public:
	EFMSyncStatus                                 NewSyncStatus;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent) == 0x000001, "Wrong alignment on FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent");
static_assert(sizeof(FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent) == 0x000001, "Wrong size on FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent");
static_assert(offsetof(FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent, NewSyncStatus) == 0x000000, "Member 'FMModdingModSync_OnModGlobalSyncStatusUpdatedEvent::NewSyncStatus' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.OnModSyncEvent
// 0x0010 (0x0010 - 0x0000)
struct FMModdingModSync_OnModSyncEvent final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSyncSuccessful;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingModSync_OnModSyncEvent) == 0x000008, "Wrong alignment on FMModdingModSync_OnModSyncEvent");
static_assert(sizeof(FMModdingModSync_OnModSyncEvent) == 0x000010, "Wrong size on FMModdingModSync_OnModSyncEvent");
static_assert(offsetof(FMModdingModSync_OnModSyncEvent, ModID) == 0x000000, "Member 'FMModdingModSync_OnModSyncEvent::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingModSync_OnModSyncEvent, bWasSyncSuccessful) == 0x000008, "Member 'FMModdingModSync_OnModSyncEvent::bWasSyncSuccessful' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.OnModSyncFinishedEvent
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_OnModSyncFinishedEvent final
{
public:
	bool                                          bWasSyncSuccessful;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_OnModSyncFinishedEvent) == 0x000001, "Wrong alignment on FMModdingModSync_OnModSyncFinishedEvent");
static_assert(sizeof(FMModdingModSync_OnModSyncFinishedEvent) == 0x000001, "Wrong size on FMModdingModSync_OnModSyncFinishedEvent");
static_assert(offsetof(FMModdingModSync_OnModSyncFinishedEvent, bWasSyncSuccessful) == 0x000000, "Member 'FMModdingModSync_OnModSyncFinishedEvent::bWasSyncSuccessful' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.OnModSyncMountUnmountEvent
// 0x000C (0x000C - 0x0000)
struct FMModdingModSync_OnModSyncMountUnmountEvent final
{
public:
	int32                                         NumModsRemaining;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalModsToMountOrUnmount;                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMounting;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingModSync_OnModSyncMountUnmountEvent) == 0x000004, "Wrong alignment on FMModdingModSync_OnModSyncMountUnmountEvent");
static_assert(sizeof(FMModdingModSync_OnModSyncMountUnmountEvent) == 0x00000C, "Wrong size on FMModdingModSync_OnModSyncMountUnmountEvent");
static_assert(offsetof(FMModdingModSync_OnModSyncMountUnmountEvent, NumModsRemaining) == 0x000000, "Member 'FMModdingModSync_OnModSyncMountUnmountEvent::NumModsRemaining' has a wrong offset!");
static_assert(offsetof(FMModdingModSync_OnModSyncMountUnmountEvent, TotalModsToMountOrUnmount) == 0x000004, "Member 'FMModdingModSync_OnModSyncMountUnmountEvent::TotalModsToMountOrUnmount' has a wrong offset!");
static_assert(offsetof(FMModdingModSync_OnModSyncMountUnmountEvent, bMounting) == 0x000008, "Member 'FMModdingModSync_OnModSyncMountUnmountEvent::bMounting' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.SetGlobalSyncStatus
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_SetGlobalSyncStatus final
{
public:
	EFMSyncStatus                                 NewSyncStatus;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_SetGlobalSyncStatus) == 0x000001, "Wrong alignment on FMModdingModSync_SetGlobalSyncStatus");
static_assert(sizeof(FMModdingModSync_SetGlobalSyncStatus) == 0x000001, "Wrong size on FMModdingModSync_SetGlobalSyncStatus");
static_assert(offsetof(FMModdingModSync_SetGlobalSyncStatus, NewSyncStatus) == 0x000000, "Member 'FMModdingModSync_SetGlobalSyncStatus::NewSyncStatus' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.AreModDetailsLoaded
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_AreModDetailsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_AreModDetailsLoaded) == 0x000001, "Wrong alignment on FMModdingModSync_AreModDetailsLoaded");
static_assert(sizeof(FMModdingModSync_AreModDetailsLoaded) == 0x000001, "Wrong size on FMModdingModSync_AreModDetailsLoaded");
static_assert(offsetof(FMModdingModSync_AreModDetailsLoaded, ReturnValue) == 0x000000, "Member 'FMModdingModSync_AreModDetailsLoaded::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.GetGlobalSyncStatus
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_GetGlobalSyncStatus final
{
public:
	EFMSyncStatus                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_GetGlobalSyncStatus) == 0x000001, "Wrong alignment on FMModdingModSync_GetGlobalSyncStatus");
static_assert(sizeof(FMModdingModSync_GetGlobalSyncStatus) == 0x000001, "Wrong size on FMModdingModSync_GetGlobalSyncStatus");
static_assert(offsetof(FMModdingModSync_GetGlobalSyncStatus, ReturnValue) == 0x000000, "Member 'FMModdingModSync_GetGlobalSyncStatus::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.IsAnySyncRequired
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_IsAnySyncRequired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_IsAnySyncRequired) == 0x000001, "Wrong alignment on FMModdingModSync_IsAnySyncRequired");
static_assert(sizeof(FMModdingModSync_IsAnySyncRequired) == 0x000001, "Wrong size on FMModdingModSync_IsAnySyncRequired");
static_assert(offsetof(FMModdingModSync_IsAnySyncRequired, ReturnValue) == 0x000000, "Member 'FMModdingModSync_IsAnySyncRequired::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingModSync.IsModSyncRequired
// 0x0001 (0x0001 - 0x0000)
struct FMModdingModSync_IsModSyncRequired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingModSync_IsModSyncRequired) == 0x000001, "Wrong alignment on FMModdingModSync_IsModSyncRequired");
static_assert(sizeof(FMModdingModSync_IsModSyncRequired) == 0x000001, "Wrong size on FMModdingModSync_IsModSyncRequired");
static_assert(offsetof(FMModdingModSync_IsModSyncRequired, ReturnValue) == 0x000000, "Member 'FMModdingModSync_IsModSyncRequired::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingServerPlayersQuery.RequestPlayersList
// 0x0078 (0x0078 - 0x0000)
struct FMModdingServerPlayersQuery_RequestPlayersList final
{
public:
	struct FSteamServerDetails                    SteamServerDetails;                                // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class FString>& PlayerNameList, bool bSuccess)> Delegate;            // 0x0068(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingServerPlayersQuery_RequestPlayersList) == 0x000008, "Wrong alignment on FMModdingServerPlayersQuery_RequestPlayersList");
static_assert(sizeof(FMModdingServerPlayersQuery_RequestPlayersList) == 0x000078, "Wrong size on FMModdingServerPlayersQuery_RequestPlayersList");
static_assert(offsetof(FMModdingServerPlayersQuery_RequestPlayersList, SteamServerDetails) == 0x000000, "Member 'FMModdingServerPlayersQuery_RequestPlayersList::SteamServerDetails' has a wrong offset!");
static_assert(offsetof(FMModdingServerPlayersQuery_RequestPlayersList, Delegate) == 0x000068, "Member 'FMModdingServerPlayersQuery_RequestPlayersList::Delegate' has a wrong offset!");

// Function FMModdingPlugin.FMModdingServerPlayersQuery.ReturnPlayersList
// 0x0001 (0x0001 - 0x0000)
struct FMModdingServerPlayersQuery_ReturnPlayersList final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingServerPlayersQuery_ReturnPlayersList) == 0x000001, "Wrong alignment on FMModdingServerPlayersQuery_ReturnPlayersList");
static_assert(sizeof(FMModdingServerPlayersQuery_ReturnPlayersList) == 0x000001, "Wrong size on FMModdingServerPlayersQuery_ReturnPlayersList");
static_assert(offsetof(FMModdingServerPlayersQuery_ReturnPlayersList, bSuccess) == 0x000000, "Member 'FMModdingServerPlayersQuery_ReturnPlayersList::bSuccess' has a wrong offset!");

// Function FMModdingPlugin.FMModdingServerPlayersQuery.IsRefreshing
// 0x0001 (0x0001 - 0x0000)
struct FMModdingServerPlayersQuery_IsRefreshing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingServerPlayersQuery_IsRefreshing) == 0x000001, "Wrong alignment on FMModdingServerPlayersQuery_IsRefreshing");
static_assert(sizeof(FMModdingServerPlayersQuery_IsRefreshing) == 0x000001, "Wrong size on FMModdingServerPlayersQuery_IsRefreshing");
static_assert(offsetof(FMModdingServerPlayersQuery_IsRefreshing, ReturnValue) == 0x000000, "Member 'FMModdingServerPlayersQuery_IsRefreshing::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.Get
// 0x0008 (0x0008 - 0x0000)
struct FMModdingSettings_Get final
{
public:
	class UFMModdingSettings*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_Get) == 0x000008, "Wrong alignment on FMModdingSettings_Get");
static_assert(sizeof(FMModdingSettings_Get) == 0x000008, "Wrong size on FMModdingSettings_Get");
static_assert(offsetof(FMModdingSettings_Get, ReturnValue) == 0x000000, "Member 'FMModdingSettings_Get::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.AddCensoredPatch
// 0x0010 (0x0010 - 0x0000)
struct FMModdingSettings_AddCensoredPatch final
{
public:
	class FString                                 PatchFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_AddCensoredPatch) == 0x000008, "Wrong alignment on FMModdingSettings_AddCensoredPatch");
static_assert(sizeof(FMModdingSettings_AddCensoredPatch) == 0x000010, "Wrong size on FMModdingSettings_AddCensoredPatch");
static_assert(offsetof(FMModdingSettings_AddCensoredPatch, PatchFilename) == 0x000000, "Member 'FMModdingSettings_AddCensoredPatch::PatchFilename' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.RemoveCensoredPatch
// 0x0010 (0x0010 - 0x0000)
struct FMModdingSettings_RemoveCensoredPatch final
{
public:
	class FString                                 PatchFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_RemoveCensoredPatch) == 0x000008, "Wrong alignment on FMModdingSettings_RemoveCensoredPatch");
static_assert(sizeof(FMModdingSettings_RemoveCensoredPatch) == 0x000010, "Wrong size on FMModdingSettings_RemoveCensoredPatch");
static_assert(offsetof(FMModdingSettings_RemoveCensoredPatch, PatchFilename) == 0x000000, "Member 'FMModdingSettings_RemoveCensoredPatch::PatchFilename' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetAreAnyPatchesCensored
// 0x0001 (0x0001 - 0x0000)
struct FMModdingSettings_GetAreAnyPatchesCensored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_GetAreAnyPatchesCensored) == 0x000001, "Wrong alignment on FMModdingSettings_GetAreAnyPatchesCensored");
static_assert(sizeof(FMModdingSettings_GetAreAnyPatchesCensored) == 0x000001, "Wrong size on FMModdingSettings_GetAreAnyPatchesCensored");
static_assert(offsetof(FMModdingSettings_GetAreAnyPatchesCensored, ReturnValue) == 0x000000, "Member 'FMModdingSettings_GetAreAnyPatchesCensored::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetDisabledMods
// 0x0010 (0x0010 - 0x0000)
struct FMModdingSettings_GetDisabledMods final
{
public:
	TArray<struct FUInt64>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_GetDisabledMods) == 0x000008, "Wrong alignment on FMModdingSettings_GetDisabledMods");
static_assert(sizeof(FMModdingSettings_GetDisabledMods) == 0x000010, "Wrong size on FMModdingSettings_GetDisabledMods");
static_assert(offsetof(FMModdingSettings_GetDisabledMods, ReturnValue) == 0x000000, "Member 'FMModdingSettings_GetDisabledMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetIsPatchCensored
// 0x0018 (0x0018 - 0x0000)
struct FMModdingSettings_GetIsPatchCensored final
{
public:
	class FString                                 PatchFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingSettings_GetIsPatchCensored) == 0x000008, "Wrong alignment on FMModdingSettings_GetIsPatchCensored");
static_assert(sizeof(FMModdingSettings_GetIsPatchCensored) == 0x000018, "Wrong size on FMModdingSettings_GetIsPatchCensored");
static_assert(offsetof(FMModdingSettings_GetIsPatchCensored, PatchFilename) == 0x000000, "Member 'FMModdingSettings_GetIsPatchCensored::PatchFilename' has a wrong offset!");
static_assert(offsetof(FMModdingSettings_GetIsPatchCensored, ReturnValue) == 0x000010, "Member 'FMModdingSettings_GetIsPatchCensored::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetModIsDisabled
// 0x0010 (0x0010 - 0x0000)
struct FMModdingSettings_GetModIsDisabled final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingSettings_GetModIsDisabled) == 0x000008, "Wrong alignment on FMModdingSettings_GetModIsDisabled");
static_assert(sizeof(FMModdingSettings_GetModIsDisabled) == 0x000010, "Wrong size on FMModdingSettings_GetModIsDisabled");
static_assert(offsetof(FMModdingSettings_GetModIsDisabled, ModID) == 0x000000, "Member 'FMModdingSettings_GetModIsDisabled::ModID' has a wrong offset!");
static_assert(offsetof(FMModdingSettings_GetModIsDisabled, ReturnValue) == 0x000008, "Member 'FMModdingSettings_GetModIsDisabled::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetPatchVisibility
// 0x0001 (0x0001 - 0x0000)
struct FMModdingSettings_GetPatchVisibility final
{
public:
	EGBPatchVisibility                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_GetPatchVisibility) == 0x000001, "Wrong alignment on FMModdingSettings_GetPatchVisibility");
static_assert(sizeof(FMModdingSettings_GetPatchVisibility) == 0x000001, "Wrong size on FMModdingSettings_GetPatchVisibility");
static_assert(offsetof(FMModdingSettings_GetPatchVisibility, ReturnValue) == 0x000000, "Member 'FMModdingSettings_GetPatchVisibility::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetServerMods
// 0x0010 (0x0010 - 0x0000)
struct FMModdingSettings_GetServerMods final
{
public:
	TArray<struct FGBModBasicInfo>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_GetServerMods) == 0x000008, "Wrong alignment on FMModdingSettings_GetServerMods");
static_assert(sizeof(FMModdingSettings_GetServerMods) == 0x000010, "Wrong size on FMModdingSettings_GetServerMods");
static_assert(offsetof(FMModdingSettings_GetServerMods, ReturnValue) == 0x000000, "Member 'FMModdingSettings_GetServerMods::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingSettings.GetUseLocalModListForServer
// 0x0001 (0x0001 - 0x0000)
struct FMModdingSettings_GetUseLocalModListForServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingSettings_GetUseLocalModListForServer) == 0x000001, "Wrong alignment on FMModdingSettings_GetUseLocalModListForServer");
static_assert(sizeof(FMModdingSettings_GetUseLocalModListForServer) == 0x000001, "Wrong size on FMModdingSettings_GetUseLocalModListForServer");
static_assert(offsetof(FMModdingSettings_GetUseLocalModListForServer, ReturnValue) == 0x000000, "Member 'FMModdingSettings_GetUseLocalModListForServer::ReturnValue' has a wrong offset!");

// Function FMModdingPlugin.FMModdingTitleQuery.RequestModList
// 0x0020 (0x0020 - 0x0000)
struct FMModdingTitleQuery_RequestModList final
{
public:
	class FString                                 InSearchText;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InWorkshopTag;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyCurrentGameVersion;                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMModdingTitleQuery_RequestModList) == 0x000008, "Wrong alignment on FMModdingTitleQuery_RequestModList");
static_assert(sizeof(FMModdingTitleQuery_RequestModList) == 0x000020, "Wrong size on FMModdingTitleQuery_RequestModList");
static_assert(offsetof(FMModdingTitleQuery_RequestModList, InSearchText) == 0x000000, "Member 'FMModdingTitleQuery_RequestModList::InSearchText' has a wrong offset!");
static_assert(offsetof(FMModdingTitleQuery_RequestModList, InWorkshopTag) == 0x000010, "Member 'FMModdingTitleQuery_RequestModList::InWorkshopTag' has a wrong offset!");
static_assert(offsetof(FMModdingTitleQuery_RequestModList, bOnlyCurrentGameVersion) == 0x000018, "Member 'FMModdingTitleQuery_RequestModList::bOnlyCurrentGameVersion' has a wrong offset!");

// Function FMModdingPlugin.FMModdingUserModsQuery.RequestUserModList
// 0x0008 (0x0008 - 0x0000)
struct FMModdingUserModsQuery_RequestUserModList final
{
public:
	struct FUInt64                                InSteamUserID;                                     // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMModdingUserModsQuery_RequestUserModList) == 0x000008, "Wrong alignment on FMModdingUserModsQuery_RequestUserModList");
static_assert(sizeof(FMModdingUserModsQuery_RequestUserModList) == 0x000008, "Wrong size on FMModdingUserModsQuery_RequestUserModList");
static_assert(offsetof(FMModdingUserModsQuery_RequestUserModList, InSteamUserID) == 0x000000, "Member 'FMModdingUserModsQuery_RequestUserModList::InSteamUserID' has a wrong offset!");

}

