#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Minimap_Origin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Minimap_Origin.BP_Minimap_Origin_C
// 0x0090 (0x02C0 - 0x0230)
class ABP_Minimap_Origin_C final : public AGBMinimap
{
public:
	class UBillboardComponent*                    Billboard;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               Side_SceneCaptureComponent2D;                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TopPlane;                                          // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Extent_Right;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Extent_Left;                                       // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Extent_Bottom;                                     // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Extent_Top;                                        // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               Top_SceneCaptureComponent2D;                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TopLeft;                                           // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BottomRight;                                       // 0x0284(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPreview;                                          // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          bTopView;                                          // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSideView;                                         // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEastWestLayout;                                   // 0x0293(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MinimapTexture;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x02A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         PowerOfTwoValue;                                   // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Top_FOV;                                           // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SideFOV;                                           // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraProjectionMode                         TopProjectionType;                                 // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraProjectionMode                         SideProjectionType;                                // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Get2dPosition(const struct FVector& SourceLocation, bool bWantSideView, struct FVector2D* OutCanvasPosition);
	void SaveImageToDisk();
	void SetupCaptureComp();
	void Setup();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Minimap_Origin_C">();
	}
	static class ABP_Minimap_Origin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Minimap_Origin_C>();
	}
};
static_assert(alignof(ABP_Minimap_Origin_C) == 0x000008, "Wrong alignment on ABP_Minimap_Origin_C");
static_assert(sizeof(ABP_Minimap_Origin_C) == 0x0002C0, "Wrong size on ABP_Minimap_Origin_C");
static_assert(offsetof(ABP_Minimap_Origin_C, Billboard) == 0x000230, "Member 'ABP_Minimap_Origin_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Scene) == 0x000238, "Member 'ABP_Minimap_Origin_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Side_SceneCaptureComponent2D) == 0x000240, "Member 'ABP_Minimap_Origin_C::Side_SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, TopPlane) == 0x000248, "Member 'ABP_Minimap_Origin_C::TopPlane' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Extent_Right) == 0x000250, "Member 'ABP_Minimap_Origin_C::Extent_Right' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Extent_Left) == 0x000258, "Member 'ABP_Minimap_Origin_C::Extent_Left' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Extent_Bottom) == 0x000260, "Member 'ABP_Minimap_Origin_C::Extent_Bottom' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Extent_Top) == 0x000268, "Member 'ABP_Minimap_Origin_C::Extent_Top' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Top_SceneCaptureComponent2D) == 0x000270, "Member 'ABP_Minimap_Origin_C::Top_SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, TopLeft) == 0x000278, "Member 'ABP_Minimap_Origin_C::TopLeft' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, BottomRight) == 0x000284, "Member 'ABP_Minimap_Origin_C::BottomRight' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, bPreview) == 0x000290, "Member 'ABP_Minimap_Origin_C::bPreview' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, bTopView) == 0x000291, "Member 'ABP_Minimap_Origin_C::bTopView' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, bSideView) == 0x000292, "Member 'ABP_Minimap_Origin_C::bSideView' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, bEastWestLayout) == 0x000293, "Member 'ABP_Minimap_Origin_C::bEastWestLayout' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, MinimapTexture) == 0x000298, "Member 'ABP_Minimap_Origin_C::MinimapTexture' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Center) == 0x0002A0, "Member 'ABP_Minimap_Origin_C::Center' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, PowerOfTwoValue) == 0x0002AC, "Member 'ABP_Minimap_Origin_C::PowerOfTwoValue' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, Top_FOV) == 0x0002B0, "Member 'ABP_Minimap_Origin_C::Top_FOV' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, SideFOV) == 0x0002B4, "Member 'ABP_Minimap_Origin_C::SideFOV' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, TopProjectionType) == 0x0002B8, "Member 'ABP_Minimap_Origin_C::TopProjectionType' has a wrong offset!");
static_assert(offsetof(ABP_Minimap_Origin_C, SideProjectionType) == 0x0002B9, "Member 'ABP_Minimap_Origin_C::SideProjectionType' has a wrong offset!");

}

