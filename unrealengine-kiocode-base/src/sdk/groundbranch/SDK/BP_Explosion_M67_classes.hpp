#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Explosion_M67

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Explosion_M67.BP_Explosion_M67_C
// 0x0140 (0x0360 - 0x0220)
class ABP_Explosion_M67_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URadialForceComponent*                  RadialForce;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComponent;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShake;                                       // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0248(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         Ignore;                                            // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                ExplosionOrigin;                                   // 0x0268(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DamagedActors;                                     // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         MinDamageRadius;                                   // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDamageRadius;                                   // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckForTeamKills;                                // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      SurfacesToIgnore;                                  // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UNiagaraSystem*                         DefaultNiagaraFX;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToTraceToGetPhysMat;                       // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UPhysicalMaterial*, class UNiagaraSystem*> PhysMat2NiagaraFXMap;                      // 0x02B8(0x0050)(Edit, BlueprintVisible)
	class UNiagaraSystem*                         NiagaraFXToUse;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Normal;                                     // 0x0318(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalSize;                                         // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalLife;                                         // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ExplosionDecalMID;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCameraShakeRadius;                              // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStunRadius;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinStunRadius;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeStunScale;                                  // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID;                                         // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageMeshComponentAlwaysDistance;                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Underwater;                                        // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Explosion_M67(int32 EntryPoint);
	void PlaySound();
	void CheckWaterLevel();
	void PlayCameraShake();
	void SpawnDecal();
	void DamageActor(class AActor* DamagedActor, const struct FHitResult& Hit);
	void SpawnFX();
	void CauseRadialDamage();
	void ReceiveBeginPlay();
	void DamageCharacter(class AGBCharacter* InGBCharacter);
	void GetNearestPhysMat(class UPhysicalMaterial** HitPhysMat);
	void Stun_Local_Player(float InAlpha);
	void GetWaterLevel(bool* Underwater_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Explosion_M67_C">();
	}
	static class ABP_Explosion_M67_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Explosion_M67_C>();
	}
};
static_assert(alignof(ABP_Explosion_M67_C) == 0x000008, "Wrong alignment on ABP_Explosion_M67_C");
static_assert(sizeof(ABP_Explosion_M67_C) == 0x000360, "Wrong size on ABP_Explosion_M67_C");
static_assert(offsetof(ABP_Explosion_M67_C, UberGraphFrame) == 0x000220, "Member 'ABP_Explosion_M67_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, RadialForce) == 0x000228, "Member 'ABP_Explosion_M67_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, AkComponent) == 0x000230, "Member 'ABP_Explosion_M67_C::AkComponent' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_Explosion_M67_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, CameraShake) == 0x000240, "Member 'ABP_Explosion_M67_C::CameraShake' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, ObjectTypes) == 0x000248, "Member 'ABP_Explosion_M67_C::ObjectTypes' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, Ignore) == 0x000258, "Member 'ABP_Explosion_M67_C::Ignore' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, ExplosionOrigin) == 0x000268, "Member 'ABP_Explosion_M67_C::ExplosionOrigin' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DamagedActors) == 0x000278, "Member 'ABP_Explosion_M67_C::DamagedActors' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, MinDamageRadius) == 0x000288, "Member 'ABP_Explosion_M67_C::MinDamageRadius' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, MaxDamageRadius) == 0x00028C, "Member 'ABP_Explosion_M67_C::MaxDamageRadius' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, bCheckForTeamKills) == 0x000290, "Member 'ABP_Explosion_M67_C::bCheckForTeamKills' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, SurfacesToIgnore) == 0x000298, "Member 'ABP_Explosion_M67_C::SurfacesToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DefaultNiagaraFX) == 0x0002A8, "Member 'ABP_Explosion_M67_C::DefaultNiagaraFX' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DistanceToTraceToGetPhysMat) == 0x0002B0, "Member 'ABP_Explosion_M67_C::DistanceToTraceToGetPhysMat' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, PhysMat2NiagaraFXMap) == 0x0002B8, "Member 'ABP_Explosion_M67_C::PhysMat2NiagaraFXMap' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, NiagaraFXToUse) == 0x000308, "Member 'ABP_Explosion_M67_C::NiagaraFXToUse' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DecalMaterial) == 0x000310, "Member 'ABP_Explosion_M67_C::DecalMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, Impact_Normal) == 0x000318, "Member 'ABP_Explosion_M67_C::Impact_Normal' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DecalSize) == 0x000324, "Member 'ABP_Explosion_M67_C::DecalSize' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DecalLife) == 0x000328, "Member 'ABP_Explosion_M67_C::DecalLife' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, ExplosionDecalMID) == 0x000330, "Member 'ABP_Explosion_M67_C::ExplosionDecalMID' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, Normal) == 0x000338, "Member 'ABP_Explosion_M67_C::Normal' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, MaxCameraShakeRadius) == 0x000344, "Member 'ABP_Explosion_M67_C::MaxCameraShakeRadius' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, MaxStunRadius) == 0x000348, "Member 'ABP_Explosion_M67_C::MaxStunRadius' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, MinStunRadius) == 0x00034C, "Member 'ABP_Explosion_M67_C::MinStunRadius' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, GrenadeStunScale) == 0x000350, "Member 'ABP_Explosion_M67_C::GrenadeStunScale' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, PlayingID) == 0x000354, "Member 'ABP_Explosion_M67_C::PlayingID' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, DamageMeshComponentAlwaysDistance) == 0x000358, "Member 'ABP_Explosion_M67_C::DamageMeshComponentAlwaysDistance' has a wrong offset!");
static_assert(offsetof(ABP_Explosion_M67_C, Underwater) == 0x00035C, "Member 'ABP_Explosion_M67_C::Underwater' has a wrong offset!");

}

