#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeatHaze

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HeatHaze.BP_HeatHaze_C
// 0x0078 (0x0298 - 0x0220)
class ABP_HeatHaze_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  HeatHazePostProcess;                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeStartDistance;                             // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeTransitionLength;                          // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           TimeOfDayMPC;                                      // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeatHazeStartDistanceParameterName;                // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeatHazeTransitionLengthParameterName;             // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeatHazeOriginParameterName;                       // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraModifier*                        HeatHazeCameraModifierRef;                         // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeGlobalIntensitySummer;                     // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeGlobalIntensityWinter;                     // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeMinimumIntensity;                          // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeStartHour;                                 // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeRampUpDuration;                            // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeEndHour;                                   // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatHazeRampDownDuration;                          // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeOfDayHeatHazeIntensity;                        // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentHeatHazeIntensity;                          // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeatHazeIntensityParameterName;                    // 0x028C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HeatHaze(int32 EntryPoint);
	void UpdateHeatHazeIntensity();
	void UpdatePostProcessVisibility();
	void OnTimeOfDayChanged(class AGBSky* SkyActor);
	void OnReadyRoomStatusChanged(class AGBPlayerState* PlayerState);
	void SetStaticMPCValues();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetSeasonalFactor(float* SeasonalFactor);
	void GetGlobalScaling(float* GlobalScaling);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HeatHaze_C">();
	}
	static class ABP_HeatHaze_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HeatHaze_C>();
	}
};
static_assert(alignof(ABP_HeatHaze_C) == 0x000008, "Wrong alignment on ABP_HeatHaze_C");
static_assert(sizeof(ABP_HeatHaze_C) == 0x000298, "Wrong size on ABP_HeatHaze_C");
static_assert(offsetof(ABP_HeatHaze_C, UberGraphFrame) == 0x000220, "Member 'ABP_HeatHaze_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazePostProcess) == 0x000228, "Member 'ABP_HeatHaze_C::HeatHazePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, Billboard) == 0x000230, "Member 'ABP_HeatHaze_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeStartDistance) == 0x000238, "Member 'ABP_HeatHaze_C::HeatHazeStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeTransitionLength) == 0x00023C, "Member 'ABP_HeatHaze_C::HeatHazeTransitionLength' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, TimeOfDayMPC) == 0x000240, "Member 'ABP_HeatHaze_C::TimeOfDayMPC' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeStartDistanceParameterName) == 0x000248, "Member 'ABP_HeatHaze_C::HeatHazeStartDistanceParameterName' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeTransitionLengthParameterName) == 0x000250, "Member 'ABP_HeatHaze_C::HeatHazeTransitionLengthParameterName' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeOriginParameterName) == 0x000258, "Member 'ABP_HeatHaze_C::HeatHazeOriginParameterName' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeCameraModifierRef) == 0x000260, "Member 'ABP_HeatHaze_C::HeatHazeCameraModifierRef' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeGlobalIntensitySummer) == 0x000268, "Member 'ABP_HeatHaze_C::HeatHazeGlobalIntensitySummer' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeGlobalIntensityWinter) == 0x00026C, "Member 'ABP_HeatHaze_C::HeatHazeGlobalIntensityWinter' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeMinimumIntensity) == 0x000270, "Member 'ABP_HeatHaze_C::HeatHazeMinimumIntensity' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeStartHour) == 0x000274, "Member 'ABP_HeatHaze_C::HeatHazeStartHour' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeRampUpDuration) == 0x000278, "Member 'ABP_HeatHaze_C::HeatHazeRampUpDuration' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeEndHour) == 0x00027C, "Member 'ABP_HeatHaze_C::HeatHazeEndHour' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeRampDownDuration) == 0x000280, "Member 'ABP_HeatHaze_C::HeatHazeRampDownDuration' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, TimeOfDayHeatHazeIntensity) == 0x000284, "Member 'ABP_HeatHaze_C::TimeOfDayHeatHazeIntensity' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, CurrentHeatHazeIntensity) == 0x000288, "Member 'ABP_HeatHaze_C::CurrentHeatHazeIntensity' has a wrong offset!");
static_assert(offsetof(ABP_HeatHaze_C, HeatHazeIntensityParameterName) == 0x00028C, "Member 'ABP_HeatHaze_C::HeatHazeIntensityParameterName' has a wrong offset!");

}

