#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GroundBranch

#include "Basic.hpp"

#include "GroundBranch_classes.hpp"
#include "GroundBranch_parameters.hpp"


namespace SDK
{

// Function GroundBranch.GBInvItem.SpawnInvItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBInvItem>           InvItemClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InvItemOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::SpawnInvItem(TSubclassOf<class AGBInvItem> InvItemClass, class AActor* InvItemOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBInvItem", "SpawnInvItem");

	Params::GBInvItem_SpawnInvItem Parms{};

	Parms.InvItemClass = InvItemClass;
	Parms.InvItemOwner = InvItemOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.AddAttachedUseMenuEntries
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      UsageMenu                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::AddAttachedUseMenuEntries(class UUserWidget* UsageMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "AddAttachedUseMenuEntries");

	Params::GBInvItem_AddAttachedUseMenuEntries Parms{};

	Parms.UsageMenu = UsageMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.AddedToCharacter
// (Final, Native, Public)
// Parameters:
// class AGBCharacter*                     NewParentCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::AddedToCharacter(class AGBCharacter* NewParentCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "AddedToCharacter");

	Params::GBInvItem_AddedToCharacter Parms{};

	Parms.NewParentCharacter = NewParentCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.AddedToItem
// (Final, Native, Public)
// Parameters:
// class AGBInvItem*                       NewParentItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::AddedToItem(class AGBInvItem* NewParentItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "AddedToItem");

	Params::GBInvItem_AddedToItem Parms{};

	Parms.NewParentItem = NewParentItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.AddNewItemCameraModifier
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGBItemCameraModifier>ItemCameraModifierClass                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBItemCameraModifier*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBItemCameraModifier* AGBInvItem::AddNewItemCameraModifier(TSubclassOf<class UGBItemCameraModifier> ItemCameraModifierClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "AddNewItemCameraModifier");

	Params::GBInvItem_AddNewItemCameraModifier Parms{};

	Parms.ItemCameraModifierClass = ItemCameraModifierClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.AddToInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::AddToInventory(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "AddToInventory");

	Params::GBInvItem_AddToInventory Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.AllowUsageWhileAttached
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::AllowUsageWhileAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "AllowUsageWhileAttached");

	Params::GBInvItem_AllowUsageWhileAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.ApplyPlayerSettings
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGBPlayerSettings*                GBPlayerSettings                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::ApplyPlayerSettings(class UGBPlayerSettings* GBPlayerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ApplyPlayerSettings");

	Params::GBInvItem_ApplyPlayerSettings Parms{};

	Parms.GBPlayerSettings = GBPlayerSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.BP_AttachItemTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         LocationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         RotationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::BP_AttachItemTo(class USceneComponent* Parent, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "BP_AttachItemTo");

	Params::GBInvItem_BP_AttachItemTo Parms{};

	Parms.Parent = Parent;
	Parms.SocketName = SocketName;
	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.BP_DetachItemFrom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDetachmentRule                         LocationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDetachmentRule                         RotationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::BP_DetachItemFrom(EDetachmentRule LocationRule, EDetachmentRule RotationRule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "BP_DetachItemFrom");

	Params::GBInvItem_BP_DetachItemFrom Parms{};

	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.CanAddChild
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       PotentialChild                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::CanAddChild(class AGBInvItem* PotentialChild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CanAddChild");

	Params::GBInvItem_CanAddChild Parms{};

	Parms.PotentialChild = PotentialChild;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.CanAddToCharacter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::CanAddToCharacter(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CanAddToCharacter");

	Params::GBInvItem_CanAddToCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.CanBeAddedAsChild
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       PotentialParent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::CanBeAddedAsChild(class AGBInvItem* PotentialParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CanBeAddedAsChild");

	Params::GBInvItem_CanBeAddedAsChild Parms{};

	Parms.PotentialParent = PotentialParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.ChangeOwnerOnlyRelevancy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOnlyOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::ChangeOwnerOnlyRelevancy(bool bOnlyOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ChangeOwnerOnlyRelevancy");

	Params::GBInvItem_ChangeOwnerOnlyRelevancy Parms{};

	Parms.bOnlyOwner = bOnlyOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.CharacterDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::CharacterDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CharacterDestroyed");

	Params::GBInvItem_CharacterDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.ClientAddToInventory
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::ClientAddToInventory(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ClientAddToInventory");

	Params::GBInvItem_ClientAddToInventory Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.ClientForceDestroy
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBInvItem::ClientForceDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ClientForceDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.ClientRemoveFromInventory
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::ClientRemoveFromInventory(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ClientRemoveFromInventory");

	Params::GBInvItem_ClientRemoveFromInventory Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.CreateClientsideProxy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::CreateClientsideProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CreateClientsideProxy");

	Params::GBInvItem_CreateClientsideProxy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.CreateMIDs
// (Final, Native, Protected, BlueprintCallable)

void AGBInvItem::CreateMIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CreateMIDs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.CreateMIDsEvent
// (Native, Event, Protected, BlueprintEvent)

void AGBInvItem::CreateMIDsEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "CreateMIDsEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.DecodeKit
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UVaRestJsonObject*                ItemAsJson                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DecodedOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       DecodedParentItem                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::DecodeKit(class UVaRestJsonObject* ItemAsJson, class AActor* DecodedOwner, class AGBInvItem* DecodedParentItem, const class FName& ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "DecodeKit");

	Params::GBInvItem_DecodeKit Parms{};

	Parms.ItemAsJson = ItemAsJson;
	Parms.DecodedOwner = DecodedOwner;
	Parms.DecodedParentItem = DecodedParentItem;
	Parms.ProfileName = ProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.DenyDrop
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::DenyDrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "DenyDrop");

	Params::GBInvItem_DenyDrop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.DenyUnequip
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::DenyUnequip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "DenyUnequip");

	Params::GBInvItem_DenyUnequip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.DoDropFrom
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   InVelocity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InAngularVelocity                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBDroppedInvItem*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBDroppedInvItem* AGBInvItem::DoDropFrom(const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& InVelocity, const struct FVector& InAngularVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "DoDropFrom");

	Params::GBInvItem_DoDropFrom Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);
	Parms.InVelocity = std::move(InVelocity);
	Parms.InAngularVelocity = std::move(InAngularVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.EditItemSetup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     UICharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::EditItemSetup(class AGBCharacter* UICharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "EditItemSetup");

	Params::GBInvItem_EditItemSetup Parms{};

	Parms.UICharacter = UICharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.EncodeKit
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UVaRestJsonObject*                ItemAsJson                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::EncodeKit(class UVaRestJsonObject* ItemAsJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "EncodeKit");

	Params::GBInvItem_EncodeKit Parms{};

	Parms.ItemAsJson = ItemAsJson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.FindParentItems
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBInvItem::FindParentItems(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "FindParentItems");

	Params::GBInvItem_FindParentItems Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.ForceCreateMIDs
// (Final, Native, Public, BlueprintCallable)

void AGBInvItem::ForceCreateMIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ForceCreateMIDs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.ForceLoadGameplayAbilities
// (Final, Native, Protected, BlueprintCallable)

void AGBInvItem::ForceLoadGameplayAbilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ForceLoadGameplayAbilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.ForceLODZero
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBInvItem::ForceLODZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ForceLODZero");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.GetChildInvItemsOfClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBInvItem>           InvItemClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBInvItem::GetChildInvItemsOfClass(TSubclassOf<class AGBInvItem> InvItemClass, bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetChildInvItemsOfClass");

	Params::GBInvItem_GetChildInvItemsOfClass Parms{};

	Parms.InvItemClass = InvItemClass;
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetEquipMontageSection
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGBChangeEquippedInfo&     ChangeEquippedInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBInvItem::GetEquipMontageSection(EHand TargetHand, const struct FGBChangeEquippedInfo& ChangeEquippedInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetEquipMontageSection");

	Params::GBInvItem_GetEquipMontageSection Parms{};

	Parms.TargetHand = TargetHand;
	Parms.ChangeEquippedInfo = std::move(ChangeEquippedInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetHiddenComponents
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPrimitiveComponent*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPrimitiveComponent*> AGBInvItem::GetHiddenComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetHiddenComponents");

	Params::GBInvItem_GetHiddenComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetPatchSocketNameMap
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FGameplayTag>* OutSocketToPatchNameTagMap                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::GetPatchSocketNameMap(class USceneComponent* SceneComp, TMap<class FName, struct FGameplayTag>* OutSocketToPatchNameTagMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetPatchSocketNameMap");

	Params::GBInvItem_GetPatchSocketNameMap Parms{};

	Parms.SceneComp = SceneComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSocketToPatchNameTagMap != nullptr)
		*OutSocketToPatchNameTagMap = std::move(Parms.OutSocketToPatchNameTagMap);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetPositionAlphaTargets
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   TargetEngagedAlpha                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetOffTargetAlpha                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutTargetEngagedAlpha                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutTargetOffTargetAlpha                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutOffTargetInterpSpeed                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::GetPositionAlphaTargets(float TargetEngagedAlpha, float TargetOffTargetAlpha, float* OutTargetEngagedAlpha, float* OutTargetOffTargetAlpha, float* OutOffTargetInterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetPositionAlphaTargets");

	Params::GBInvItem_GetPositionAlphaTargets Parms{};

	Parms.TargetEngagedAlpha = TargetEngagedAlpha;
	Parms.TargetOffTargetAlpha = TargetOffTargetAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargetEngagedAlpha != nullptr)
		*OutTargetEngagedAlpha = Parms.OutTargetEngagedAlpha;

	if (OutTargetOffTargetAlpha != nullptr)
		*OutTargetOffTargetAlpha = Parms.OutTargetOffTargetAlpha;

	if (OutOffTargetInterpSpeed != nullptr)
		*OutOffTargetInterpSpeed = Parms.OutOffTargetInterpSpeed;
}


// Function GroundBranch.GBInvItem.GetStaminaMultipliers
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  RecoveryMultiplier                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  ExhaustionMultiplier                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::GetStaminaMultipliers(float* RecoveryMultiplier, float* ExhaustionMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetStaminaMultipliers");

	Params::GBInvItem_GetStaminaMultipliers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RecoveryMultiplier != nullptr)
		*RecoveryMultiplier = Parms.RecoveryMultiplier;

	if (ExhaustionMultiplier != nullptr)
		*ExhaustionMultiplier = Parms.ExhaustionMultiplier;
}


// Function GroundBranch.GBInvItem.GetStaticMeshPatchMaterial
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMaterialInterface> AGBInvItem::GetStaticMeshPatchMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetStaticMeshPatchMaterial");

	Params::GBInvItem_GetStaticMeshPatchMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetStatKey
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBInvItem::GetStatKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetStatKey");

	Params::GBInvItem_GetStatKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetUnequipInfo
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBUnequipInfo                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGBUnequipInfo AGBInvItem::GetUnequipInfo(EHand TargetHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetUnequipInfo");

	Params::GBInvItem_GetUnequipInfo Parms{};

	Parms.TargetHand = TargetHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetUnequipMontageSection
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGBChangeEquippedInfo&     ChangeEquippedInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGBUnequipInfo&            LeftUnequipInfo                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGBUnequipInfo&            RightUnequipInfo                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBInvItem::GetUnequipMontageSection(EHand TargetHand, const struct FGBChangeEquippedInfo& ChangeEquippedInfo, const struct FGBUnequipInfo& LeftUnequipInfo, const struct FGBUnequipInfo& RightUnequipInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetUnequipMontageSection");

	Params::GBInvItem_GetUnequipMontageSection Parms{};

	Parms.TargetHand = TargetHand;
	Parms.ChangeEquippedInfo = std::move(ChangeEquippedInfo);
	Parms.LeftUnequipInfo = std::move(LeftUnequipInfo);
	Parms.RightUnequipInfo = std::move(RightUnequipInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetWeaponsPositionTransitionTime
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EGBWeaponPosition                       FromPosition                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBWeaponPosition                       ToPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBInvItem::GetWeaponsPositionTransitionTime(EGBWeaponPosition FromPosition, EGBWeaponPosition ToPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetWeaponsPositionTransitionTime");

	Params::GBInvItem_GetWeaponsPositionTransitionTime Parms{};

	Parms.FromPosition = FromPosition;
	Parms.ToPosition = ToPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.MarkAsClientsideProxy
// (Final, Native, Public, BlueprintCallable)

void AGBInvItem::MarkAsClientsideProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "MarkAsClientsideProxy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnAddedToCharacter
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     NewParentCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnAddedToCharacter(class AGBCharacter* NewParentCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnAddedToCharacter");

	Params::GBInvItem_OnAddedToCharacter Parms{};

	Parms.NewParentCharacter = NewParentCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnAddedToInventoryEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnAddedToInventoryEvent(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnAddedToInventoryEvent");

	Params::GBInvItem_OnAddedToInventoryEvent Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBInvItem.OnAddedToItem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       NewParentItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnAddedToItem(class AGBInvItem* NewParentItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnAddedToItem");

	Params::GBInvItem_OnAddedToItem Parms{};

	Parms.NewParentItem = NewParentItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnAddingChild
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       AddedChild                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnAddingChild(class AGBInvItem* AddedChild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnAddingChild");

	Params::GBInvItem_OnAddingChild Parms{};

	Parms.AddedChild = AddedChild;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnBeingDropped
// (Native, Event, Public, BlueprintEvent)

void AGBInvItem::OnBeingDropped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnBeingDropped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnBeingEquipped
// (Native, Event, Public, BlueprintEvent)

void AGBInvItem::OnBeingEquipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnBeingEquipped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnBeingUnequipped
// (Native, Event, Public, BlueprintEvent)

void AGBInvItem::OnBeingUnequipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnBeingUnequipped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnClientsideProxyCreatedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       Proxy                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnClientsideProxyCreatedEvent(class AGBInvItem* Proxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnClientsideProxyCreatedEvent");

	Params::GBInvItem_OnClientsideProxyCreatedEvent Parms{};

	Parms.Proxy = Proxy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBInvItem.OnCosmeticTagsUpdated
// (Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayTagContainer&     InCosmeticTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBInvItem::OnCosmeticTagsUpdated(const struct FGameplayTagContainer& InCosmeticTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnCosmeticTagsUpdated");

	Params::GBInvItem_OnCosmeticTagsUpdated Parms{};

	Parms.InCosmeticTags = std::move(InCosmeticTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnForceLoadGameplayAbilitiesComplete
// (Final, Native, Protected)

void AGBInvItem::OnForceLoadGameplayAbilitiesComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnForceLoadGameplayAbilitiesComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnRemovedFromCharacter
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     OldParentCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OldSocketName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnRemovedFromCharacter(class AGBCharacter* OldParentCharacter, class FName OldSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnRemovedFromCharacter");

	Params::GBInvItem_OnRemovedFromCharacter Parms{};

	Parms.OldParentCharacter = OldParentCharacter;
	Parms.OldSocketName = OldSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnRemovedFromInventoryEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnRemovedFromInventoryEvent(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnRemovedFromInventoryEvent");

	Params::GBInvItem_OnRemovedFromInventoryEvent Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBInvItem.OnRemovedFromItem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       OldParentItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  OldParentComp                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OldParentSocket                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnRemovedFromItem(class AGBInvItem* OldParentItem, class USceneComponent* OldParentComp, class FName OldParentSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnRemovedFromItem");

	Params::GBInvItem_OnRemovedFromItem Parms{};

	Parms.OldParentItem = OldParentItem;
	Parms.OldParentComp = OldParentComp;
	Parms.OldParentSocket = OldParentSocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnRemovingChild
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       RemovedChild                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::OnRemovingChild(class AGBInvItem* RemovedChild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnRemovingChild");

	Params::GBInvItem_OnRemovingChild Parms{};

	Parms.RemovedChild = RemovedChild;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OnRep_InvItemSkinId
// (Native, Protected)

void AGBInvItem::OnRep_InvItemSkinId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OnRep_InvItemSkinId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.OtherTagsSatisfied
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     InCosmeticTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::OtherTagsSatisfied(const struct FGameplayTagContainer& InCosmeticTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "OtherTagsSatisfied");

	Params::GBInvItem_OtherTagsSatisfied Parms{};

	Parms.InCosmeticTags = std::move(InCosmeticTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.PlaceAt
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AGBDroppedInvItem*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBDroppedInvItem* AGBInvItem::PlaceAt(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "PlaceAt");

	Params::GBInvItem_PlaceAt Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.PositionAlphaMet
// (Native, Event, Public, BlueprintEvent)

void AGBInvItem::PositionAlphaMet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "PositionAlphaMet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.PositionTransitionBegins
// (Native, Event, Public, BlueprintEvent)

void AGBInvItem::PositionTransitionBegins()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "PositionTransitionBegins");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.PostDecode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::PostDecode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "PostDecode");

	Params::GBInvItem_PostDecode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.PreEncodeCheck
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBInvItem::PreEncodeCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "PreEncodeCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.Refill
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBInvItem::Refill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "Refill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.RemovedFromCharacter
// (Final, Native, Public, HasOutParams)
// Parameters:
// class AGBCharacter*                     OldParentCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      OldSocketName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::RemovedFromCharacter(class AGBCharacter* OldParentCharacter, const class FName& OldSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "RemovedFromCharacter");

	Params::GBInvItem_RemovedFromCharacter Parms{};

	Parms.OldParentCharacter = OldParentCharacter;
	Parms.OldSocketName = OldSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.RemovedFromItem
// (Final, Native, Public, HasOutParams)
// Parameters:
// class AGBInvItem*                       OldParentItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  OldParentComp                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      OldParentSocket                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::RemovedFromItem(class AGBInvItem* OldParentItem, class USceneComponent* OldParentComp, const class FName& OldParentSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "RemovedFromItem");

	Params::GBInvItem_RemovedFromItem Parms{};

	Parms.OldParentItem = OldParentItem;
	Parms.OldParentComp = OldParentComp;
	Parms.OldParentSocket = OldParentSocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.RemoveFromInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::RemoveFromInventory(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "RemoveFromInventory");

	Params::GBInvItem_RemoveFromInventory Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.RemoveFromSkinnedDecalSampler
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::RemoveFromSkinnedDecalSampler(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "RemoveFromSkinnedDecalSampler");

	Params::GBInvItem_RemoveFromSkinnedDecalSampler Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.RemoveItemCameraModifier
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// class UGBItemCameraModifier*            ItemCameraModifierToRemove                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::RemoveItemCameraModifier(class UGBItemCameraModifier* ItemCameraModifierToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "RemoveItemCameraModifier");

	Params::GBInvItem_RemoveItemCameraModifier Parms{};

	Parms.ItemCameraModifierToRemove = ItemCameraModifierToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.SetInvItemSkinId
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewInvItemSkinId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::SetInvItemSkinId(const struct FPrimaryAssetId& NewInvItemSkinId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "SetInvItemSkinId");

	Params::GBInvItem_SetInvItemSkinId Parms{};

	Parms.NewInvItemSkinId = std::move(NewInvItemSkinId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.SetupSightComponents
// (Native, Public, BlueprintCallable)

void AGBInvItem::SetupSightComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "SetupSightComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.SyncMontageWithOtherItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       OtherItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MontageName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::SyncMontageWithOtherItem(class AGBInvItem* OtherItem, class FName MontageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "SyncMontageWithOtherItem");

	Params::GBInvItem_SyncMontageWithOtherItem Parms{};

	Parms.OtherItem = OtherItem;
	Parms.MontageName = MontageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.TryActivateItemAbilityByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::TryActivateItemAbilityByTag(const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "TryActivateItemAbilityByTag");

	Params::GBInvItem_TryActivateItemAbilityByTag Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.TryActivateItemAbilityByTagWithPayload
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayEventData&        Payload                                                (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::TryActivateItemAbilityByTagWithPayload(const struct FGameplayTag& GameplayTag, const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "TryActivateItemAbilityByTagWithPayload");

	Params::GBInvItem_TryActivateItemAbilityByTagWithPayload Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.UpdateAudioValues
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void AGBInvItem::UpdateAudioValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "UpdateAudioValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.UpdatePatches
// (Final, Native, Public, BlueprintCallable)

void AGBInvItem::UpdatePatches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "UpdatePatches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.UpdateWetness
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   InRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInvItem::UpdateWetness(float InRadius, const struct FVector& InLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "UpdateWetness");

	Params::GBInvItem_UpdateWetness Parms{};

	Parms.InRadius = InRadius;
	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItem.ValidateDecodedItem
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString*                          OutFailureReason                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::ValidateDecodedItem(class FString* OutFailureReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "ValidateDecodedItem");

	Params::GBInvItem_ValidateDecodedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFailureReason != nullptr)
		*OutFailureReason = std::move(Parms.OutFailureReason);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetAnimLayerClassRef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UAnimInstance>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UAnimInstance> AGBInvItem::GetAnimLayerClassRef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetAnimLayerClassRef");

	Params::GBInvItem_GetAnimLayerClassRef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetBaseItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::GetBaseItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetBaseItem");

	Params::GBInvItem_GetBaseItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetCharMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MontageName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* AGBInvItem::GetCharMontage(class FName MontageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetCharMontage");

	Params::GBInvItem_GetCharMontage Parms{};

	Parms.MontageName = MontageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetChildInvItems
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    bAllChildren                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBInvItem::GetChildInvItems(bool bAllChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetChildInvItems");

	Params::GBInvItem_GetChildInvItems Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetChildInvItemsAttachedTo
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBInvItem::GetChildInvItemsAttachedTo(class USceneComponent* Component, class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetChildInvItemsAttachedTo");

	Params::GBInvItem_GetChildInvItemsAttachedTo Parms{};

	Parms.Component = Component;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetChildInvItemsWithTags
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTagContainer&     WithTags                                               (Parm, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBInvItem::GetChildInvItemsWithTags(const struct FGameplayTagContainer& WithTags, bool bExactMatch, bool bAllChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetChildInvItemsWithTags");

	Params::GBInvItem_GetChildInvItemsWithTags Parms{};

	Parms.WithTags = std::move(WithTags);
	Parms.bExactMatch = bExactMatch;
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetCosmeticTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer AGBInvItem::GetCosmeticTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetCosmeticTags");

	Params::GBInvItem_GetCosmeticTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetCurrentSight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBSightComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBSightComponent* AGBInvItem::GetCurrentSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetCurrentSight");

	Params::GBInvItem_GetCurrentSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetCustomisationWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> AGBInvItem::GetCustomisationWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetCustomisationWidget");

	Params::GBInvItem_GetCustomisationWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGBInvItem::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetDisplayName");

	Params::GBInvItem_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetDragDropOperation
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer&     DragOpTags                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UGBInvItemDragDropOperation>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGBInvItemDragDropOperation> AGBInvItem::GetDragDropOperation(const struct FGameplayTagContainer& DragOpTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetDragDropOperation");

	Params::GBInvItem_GetDragDropOperation Parms{};

	Parms.DragOpTags = std::move(DragOpTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetEffect
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             EffectName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraSystem* AGBInvItem::GetEffect(class FName EffectName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetEffect");

	Params::GBInvItem_GetEffect Parms{};

	Parms.EffectName = EffectName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetFirstChildInvItemAttachedTo
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::GetFirstChildInvItemAttachedTo(class USceneComponent* Component, class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetFirstChildInvItemAttachedTo");

	Params::GBInvItem_GetFirstChildInvItemAttachedTo Parms{};

	Parms.Component = Component;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetFirstChildInvItemOfClass
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class AGBInvItem>           InvItemClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::GetFirstChildInvItemOfClass(TSubclassOf<class AGBInvItem> InvItemClass, bool bAllChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetFirstChildInvItemOfClass");

	Params::GBInvItem_GetFirstChildInvItemOfClass Parms{};

	Parms.InvItemClass = InvItemClass;
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetFirstChildInvItemWithTags
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTagContainer&     WithTags                                               (Parm, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::GetFirstChildInvItemWithTags(const struct FGameplayTagContainer& WithTags, bool bExactMatch, bool bAllChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetFirstChildInvItemWithTags");

	Params::GBInvItem_GetFirstChildInvItemWithTags Parms{};

	Parms.WithTags = std::move(WithTags);
	Parms.bExactMatch = bExactMatch;
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetGameplayAbilitySpecHandles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGameplayAbilitySpecHandle>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGameplayAbilitySpecHandle> AGBInvItem::GetGameplayAbilitySpecHandles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetGameplayAbilitySpecHandles");

	Params::GBInvItem_GetGameplayAbilitySpecHandles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetGBInstigator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBInvItem::GetGBInstigator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetGBInstigator");

	Params::GBInvItem_GetGBInstigator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetHandEnum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHand AGBInvItem::GetHandEnum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetHandEnum");

	Params::GBInvItem_GetHandEnum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> AGBInvItem::GetIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetIcon");

	Params::GBInvItem_GetIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetInventorySlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBInvItem::GetInventorySlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetInventorySlot");

	Params::GBInvItem_GetInventorySlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetInventorySlotWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> AGBInvItem::GetInventorySlotWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetInventorySlotWidget");

	Params::GBInvItem_GetInventorySlotWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetInvItemSkinId
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId AGBInvItem::GetInvItemSkinId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetInvItemSkinId");

	Params::GBInvItem_GetInvItemSkinId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetInvItemTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer AGBInvItem::GetInvItemTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetInvItemTags");

	Params::GBInvItem_GetInvItemTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetItemWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBInvItem::GetItemWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetItemWeight");

	Params::GBInvItem_GetItemWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetMontage
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MontageName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* AGBInvItem::GetMontage(class FName MontageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetMontage");

	Params::GBInvItem_GetMontage Parms{};

	Parms.MontageName = MontageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetParentItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBInvItem::GetParentItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetParentItem");

	Params::GBInvItem_GetParentItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.GetSound
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SoundName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* AGBInvItem::GetSound(class FName SoundName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "GetSound");

	Params::GBInvItem_GetSound Parms{};

	Parms.SoundName = SoundName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.IsClientsideProxy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::IsClientsideProxy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "IsClientsideProxy");

	Params::GBInvItem_IsClientsideProxy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.IsEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::IsEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "IsEquipped");

	Params::GBInvItem_IsEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItem.UsesGameplayAbilityByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGBGameplayAbility>   GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInvItem::UsesGameplayAbilityByClass(TSubclassOf<class UGBGameplayAbility> GameplayAbilityClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItem", "UsesGameplayAbilityByClass");

	Params::GBInvItem_UsesGameplayAbilityByClass Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletItem.GetBulletProjectileClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletProjectile>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletProjectile> AGBBulletItem::GetBulletProjectileClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletItem", "GetBulletProjectileClass");

	Params::GBBulletItem_GetBulletProjectileClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddGameplayEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::AddGameplayEffect(class AActor* Actor, TSubclassOf<class UGameplayEffect> GameplayEffectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "AddGameplayEffect");

	Params::GBAbilitySystemBlueprintLibrary_AddGameplayEffect Parms{};

	Parms.Actor = Actor;
	Parms.GameplayEffectClass = GameplayEffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddGameplayEffectWithDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::AddGameplayEffectWithDuration(class AActor* Actor, TSubclassOf<class UGameplayEffect> GameplayEffectClass, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "AddGameplayEffectWithDuration");

	Params::GBAbilitySystemBlueprintLibrary_AddGameplayEffectWithDuration Parms{};

	Parms.Actor = Actor;
	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddLooseGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::AddLooseGameplayTag(class AActor* Actor, const struct FGameplayTag& GameplayTag, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "AddLooseGameplayTag");

	Params::GBAbilitySystemBlueprintLibrary_AddLooseGameplayTag Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTag = std::move(GameplayTag);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.AddLooseGameplayTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     GameplayTags                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::AddLooseGameplayTags(class AActor* Actor, const struct FGameplayTagContainer& GameplayTags, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "AddLooseGameplayTags");

	Params::GBAbilitySystemBlueprintLibrary_AddLooseGameplayTags Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTags = std::move(GameplayTags);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.CancelAbilities
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     WithTags                                               (Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     WithoutTags                                            (Parm, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 Ignore                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::CancelAbilities(class AActor* Actor, const struct FGameplayTagContainer& WithTags, const struct FGameplayTagContainer& WithoutTags, class UGameplayAbility* Ignore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "CancelAbilities");

	Params::GBAbilitySystemBlueprintLibrary_CancelAbilities Parms{};

	Parms.Actor = Actor;
	Parms.WithTags = std::move(WithTags);
	Parms.WithoutTags = std::move(WithoutTags);
	Parms.Ignore = Ignore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ClearLooseGameplayTagsByParent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              ParentGameplayTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::ClearLooseGameplayTagsByParent(class AActor* Actor, const struct FGameplayTag& ParentGameplayTag, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "ClearLooseGameplayTagsByParent");

	Params::GBAbilitySystemBlueprintLibrary_ClearLooseGameplayTagsByParent Parms{};

	Parms.Actor = Actor;
	Parms.ParentGameplayTag = std::move(ParentGameplayTag);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConditionalAddLooseGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::ConditionalAddLooseGameplayTag(class AActor* Actor, const struct FGameplayTag& GameplayTag, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "ConditionalAddLooseGameplayTag");

	Params::GBAbilitySystemBlueprintLibrary_ConditionalAddLooseGameplayTag Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTag = std::move(GameplayTag);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConditionalRemoveLooseGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::ConditionalRemoveLooseGameplayTag(class AActor* Actor, const struct FGameplayTag& GameplayTag, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "ConditionalRemoveLooseGameplayTag");

	Params::GBAbilitySystemBlueprintLibrary_ConditionalRemoveLooseGameplayTag Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTag = std::move(GameplayTag);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConvertNameToGameplayTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      TagName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ErrorIfNotFound                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBAbilitySystemBlueprintLibrary::ConvertNameToGameplayTag(const class FName& TagName, bool ErrorIfNotFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "ConvertNameToGameplayTag");

	Params::GBAbilitySystemBlueprintLibrary_ConvertNameToGameplayTag Parms{};

	Parms.TagName = TagName;
	Parms.ErrorIfNotFound = ErrorIfNotFound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.ConvertStringToGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TagString                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ErrorIfNotFound                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBAbilitySystemBlueprintLibrary::ConvertStringToGameplayTag(const class FString& TagString, bool ErrorIfNotFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "ConvertStringToGameplayTag");

	Params::GBAbilitySystemBlueprintLibrary_ConvertStringToGameplayTag Parms{};

	Parms.TagString = std::move(TagString);
	Parms.ErrorIfNotFound = ErrorIfNotFound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayEffect_IsValidHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FActiveGameplayEffectHandle&GameplayEffectHandle                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::GameplayEffect_IsValidHandle(const struct FActiveGameplayEffectHandle& GameplayEffectHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GameplayEffect_IsValidHandle");

	Params::GBAbilitySystemBlueprintLibrary_GameplayEffect_IsValidHandle Parms{};

	Parms.GameplayEffectHandle = std::move(GameplayEffectHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTag_FromSocketName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              ParentGameplayTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBAbilitySystemBlueprintLibrary::GameplayTag_FromSocketName(const class FName& SocketName, const struct FGameplayTag& ParentGameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GameplayTag_FromSocketName");

	Params::GBAbilitySystemBlueprintLibrary_GameplayTag_FromSocketName Parms{};

	Parms.SocketName = SocketName;
	Parms.ParentGameplayTag = std::move(ParentGameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTag_ToSocketName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              ParentGameplayTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBAbilitySystemBlueprintLibrary::GameplayTag_ToSocketName(const struct FGameplayTag& GameplayTag, const struct FGameplayTag& ParentGameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GameplayTag_ToSocketName");

	Params::GBAbilitySystemBlueprintLibrary_GameplayTag_ToSocketName Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.ParentGameplayTag = std::move(ParentGameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTagContainer_Filter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     SourceContainer                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     OtherContainer                                         (Parm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           OutFilteredContainer                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::GameplayTagContainer_Filter(const struct FGameplayTagContainer& SourceContainer, const struct FGameplayTagContainer& OtherContainer, struct FGameplayTagContainer* OutFilteredContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GameplayTagContainer_Filter");

	Params::GBAbilitySystemBlueprintLibrary_GameplayTagContainer_Filter Parms{};

	Parms.SourceContainer = std::move(SourceContainer);
	Parms.OtherContainer = std::move(OtherContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFilteredContainer != nullptr)
		*OutFilteredContainer = std::move(Parms.OutFilteredContainer);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTagContainer_FilterExact
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     SourceContainer                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     OtherContainer                                         (Parm, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           OutFilteredContainer                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::GameplayTagContainer_FilterExact(const struct FGameplayTagContainer& SourceContainer, const struct FGameplayTagContainer& OtherContainer, struct FGameplayTagContainer* OutFilteredContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GameplayTagContainer_FilterExact");

	Params::GBAbilitySystemBlueprintLibrary_GameplayTagContainer_FilterExact Parms{};

	Parms.SourceContainer = std::move(SourceContainer);
	Parms.OtherContainer = std::move(OtherContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFilteredContainer != nullptr)
		*OutFilteredContainer = std::move(Parms.OutFilteredContainer);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GameplayTagContainer_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     Container                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::GameplayTagContainer_IsValid(const struct FGameplayTagContainer& Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GameplayTagContainer_IsValid");

	Params::GBAbilitySystemBlueprintLibrary_GameplayTagContainer_IsValid Parms{};

	Parms.Container = std::move(Container);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GetPrimaryFirearmTypeTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBAbilitySystemBlueprintLibrary::GetPrimaryFirearmTypeTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GetPrimaryFirearmTypeTags");

	Params::GBAbilitySystemBlueprintLibrary_GetPrimaryFirearmTypeTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.GetSidearmFirearmTypeTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBAbilitySystemBlueprintLibrary::GetSidearmFirearmTypeTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "GetSidearmFirearmTypeTags");

	Params::GBAbilitySystemBlueprintLibrary_GetSidearmFirearmTypeTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RegisterGameplayTagEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 NewCount)>         OnGameplayTagChanged                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// struct FGBGameplayTagEventHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBGameplayTagEventHandle UGBAbilitySystemBlueprintLibrary::RegisterGameplayTagEvent(class AActor* Actor, const struct FGameplayTag& Tag, TDelegate<void(int32 NewCount)> OnGameplayTagChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "RegisterGameplayTagEvent");

	Params::GBAbilitySystemBlueprintLibrary_RegisterGameplayTagEvent Parms{};

	Parms.Actor = Actor;
	Parms.Tag = std::move(Tag);
	Parms.OnGameplayTagChanged = OnGameplayTagChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RemoveGameplayEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::RemoveGameplayEffect(class AActor* Actor, TSubclassOf<class UGameplayEffect> GameplayEffectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "RemoveGameplayEffect");

	Params::GBAbilitySystemBlueprintLibrary_RemoveGameplayEffect Parms{};

	Parms.Actor = Actor;
	Parms.GameplayEffectClass = GameplayEffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RemoveLooseGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::RemoveLooseGameplayTag(class AActor* Actor, const struct FGameplayTag& GameplayTag, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "RemoveLooseGameplayTag");

	Params::GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTag Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTag = std::move(GameplayTag);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RemoveLooseGameplayTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     GameplayTags                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::RemoveLooseGameplayTags(class AActor* Actor, const struct FGameplayTagContainer& GameplayTags, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "RemoveLooseGameplayTags");

	Params::GBAbilitySystemBlueprintLibrary_RemoveLooseGameplayTags Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTags = std::move(GameplayTags);
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.RequestGameplayTagChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              ParentTag                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBAbilitySystemBlueprintLibrary::RequestGameplayTagChildren(const struct FGameplayTag& ParentTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "RequestGameplayTagChildren");

	Params::GBAbilitySystemBlueprintLibrary_RequestGameplayTagChildren Parms{};

	Parms.ParentTag = std::move(ParentTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.SetLooseGameplayTagCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldReplicate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemBlueprintLibrary::SetLooseGameplayTagCount(class AActor* Actor, const struct FGameplayTag& GameplayTag, int32 NewCount, bool bShouldReplicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "SetLooseGameplayTagCount");

	Params::GBAbilitySystemBlueprintLibrary_SetLooseGameplayTagCount Parms{};

	Parms.Actor = Actor;
	Parms.GameplayTag = std::move(GameplayTag);
	Parms.NewCount = NewCount;
	Parms.bShouldReplicate = bShouldReplicate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.SetRemoveAbilityOnEnd
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::SetRemoveAbilityOnEnd(class AActor* Actor, class UGameplayAbility* Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "SetRemoveAbilityOnEnd");

	Params::GBAbilitySystemBlueprintLibrary_SetRemoveAbilityOnEnd Parms{};

	Parms.Actor = Actor;
	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemBlueprintLibrary.UnregisterGameplayTagEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGBGameplayTagEventHandle&       Handle                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGBAbilitySystemBlueprintLibrary::UnregisterGameplayTagEvent(struct FGBGameplayTagEventHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilitySystemBlueprintLibrary", "UnregisterGameplayTagEvent");

	Params::GBAbilitySystemBlueprintLibrary_UnregisterGameplayTagEvent Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function GroundBranch.GBAbilitySystemComponent.BlockAbilitiesWithoutTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBAbilitySystemComponent::BlockAbilitiesWithoutTags(const struct FGameplayTagContainer& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilitySystemComponent", "BlockAbilitiesWithoutTags");

	Params::GBAbilitySystemComponent_BlockAbilitiesWithoutTags Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemComponent.CancelAbilityByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayAbility>     InAbilityToCancel                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemComponent::CancelAbilityByClass(TSubclassOf<class UGameplayAbility> InAbilityToCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilitySystemComponent", "CancelAbilityByClass");

	Params::GBAbilitySystemComponent_CancelAbilityByClass Parms{};

	Parms.InAbilityToCancel = InAbilityToCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemComponent.SetGameplayEffectDurationHandle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FActiveGameplayEffectHandle&Handle                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAbilitySystemComponent::SetGameplayEffectDurationHandle(const struct FActiveGameplayEffectHandle& Handle, float NewDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilitySystemComponent", "SetGameplayEffectDurationHandle");

	Params::GBAbilitySystemComponent_SetGameplayEffectDurationHandle Parms{};

	Parms.Handle = std::move(Handle);
	Parms.NewDuration = NewDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilitySystemComponent.UnBlockAbilitiesWithoutTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBAbilitySystemComponent::UnBlockAbilitiesWithoutTags(const struct FGameplayTagContainer& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilitySystemComponent", "UnBlockAbilitiesWithoutTags");

	Params::GBAbilitySystemComponent_UnBlockAbilitiesWithoutTags Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilitySystemComponent.GetFirstActiveGameplayEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UGameplayEffect>&GameplayEffectClass                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle UGBAbilitySystemComponent::GetFirstActiveGameplayEffect(const TSubclassOf<class UGameplayEffect>& GameplayEffectClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilitySystemComponent", "GetFirstActiveGameplayEffect");

	Params::GBAbilitySystemComponent_GetFirstActiveGameplayEffect Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletMovementComponent.GetDragCoefficient
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBBulletMovementComponent::GetDragCoefficient(float Speed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletMovementComponent", "GetDragCoefficient");

	Params::GBBulletMovementComponent_GetDragCoefficient Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_CharacterWalkTo.CharacterWalkTo
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   RotationRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxFailedMoveTime                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_CharacterWalkTo*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_CharacterWalkTo* UGBAbilityTask_CharacterWalkTo::CharacterWalkTo(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FVector& Location, float Radius, const struct FRotator& Rotation, float RotationRate, float MaxFailedMoveTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_CharacterWalkTo", "CharacterWalkTo");

	Params::GBAbilityTask_CharacterWalkTo_CharacterWalkTo Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRate = RotationRate;
	Parms.MaxFailedMoveTime = MaxFailedMoveTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.SpawnBullet
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           BulletOwner                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGBBulletProjectile>  BulletClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ShotDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityModifier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSimulated                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBBulletProjectile*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBBulletProjectile* AGBBulletProjectile::SpawnBullet(class AActor* BulletOwner, TSubclassOf<class AGBBulletProjectile> BulletClass, const struct FVector& SpawnLocation, const struct FVector& ShotDirection, float VelocityModifier, bool bSimulated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBBulletProjectile", "SpawnBullet");

	Params::GBBulletProjectile_SpawnBullet Parms{};

	Parms.BulletOwner = BulletOwner;
	Parms.BulletClass = BulletClass;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.ShotDirection = std::move(ShotDirection);
	Parms.VelocityModifier = VelocityModifier;
	Parms.bSimulated = bSimulated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.CharacterImpact
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::CharacterImpact(class AGBCharacter* Character, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "CharacterImpact");

	Params::GBBulletProjectile_CharacterImpact Parms{};

	Parms.Character = Character;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.CreateTracerEvent
// (Event, Public, BlueprintEvent)

void AGBBulletProjectile::CreateTracerEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "CreateTracerEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBBulletProjectile.ImpactDamage
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::ImpactDamage(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "ImpactDamage");

	Params::GBBulletProjectile_ImpactDamage Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.ImpactEffect
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bExiting                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::ImpactEffect(const struct FHitResult& HitResult, bool bExiting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "ImpactEffect");

	Params::GBBulletProjectile_ImpactEffect Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.bExiting = bExiting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.InitForSimulatedTrajectory
// (Final, Native, Public, BlueprintCallable)

void AGBBulletProjectile::InitForSimulatedTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "InitForSimulatedTrajectory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.OnBulletWarnSphereEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::OnBulletWarnSphereEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnBulletWarnSphereEndOverlap");

	Params::GBBulletProjectile_OnBulletWarnSphereEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.OnExit
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::OnExit(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnExit");

	Params::GBBulletProjectile_OnExit Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.OnExitEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::OnExitEvent(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnExitEvent");

	Params::GBBulletProjectile_OnExitEvent Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBBulletProjectile.OnImpact
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::OnImpact(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnImpact");

	Params::GBBulletProjectile_OnImpact Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.OnRep_BulletReplicatedMovement
// (Native, Public)

void AGBBulletProjectile::OnRep_BulletReplicatedMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnRep_BulletReplicatedMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.OnStop
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::OnStop(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnStop");

	Params::GBBulletProjectile_OnStop Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.OnStopEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBBulletProjectile::OnStopEvent(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "OnStopEvent");

	Params::GBBulletProjectile_OnStopEvent Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBBulletProjectile.SetBulletIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewBulletIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetBulletIndex(uint8 NewBulletIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetBulletIndex");

	Params::GBBulletProjectile_SetBulletIndex Parms{};

	Parms.NewBulletIndex = NewBulletIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SetDragCoefficientOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetDragCoefficientOverride(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetDragCoefficientOverride");

	Params::GBBulletProjectile_SetDragCoefficientOverride Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SetDumpedKEToDamageScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetDumpedKEToDamageScale(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetDumpedKEToDamageScale");

	Params::GBBulletProjectile_SetDumpedKEToDamageScale Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SetDumpedKEToDamageScaleDeviation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetDumpedKEToDamageScaleDeviation(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetDumpedKEToDamageScaleDeviation");

	Params::GBBulletProjectile_SetDumpedKEToDamageScaleDeviation Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SetParentBullet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBBulletProjectile*              NewParentBullet                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetParentBullet(class AGBBulletProjectile* NewParentBullet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetParentBullet");

	Params::GBBulletProjectile_SetParentBullet Parms{};

	Parms.NewParentBullet = NewParentBullet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SetStatKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewStatKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetStatKey(const class FString& NewStatKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetStatKey");

	Params::GBBulletProjectile_SetStatKey Parms{};

	Parms.NewStatKey = std::move(NewStatKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SetTracerColourIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewTracerColourIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SetTracerColourIndex(uint8 NewTracerColourIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SetTracerColourIndex");

	Params::GBBulletProjectile_SetTracerColourIndex Parms{};

	Parms.NewTracerColourIndex = NewTracerColourIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBulletProjectile.SimulateTrajectory
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                SimTM                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const float                             SimTime                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SimTimeStep                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MaxDistance                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 OutTrajectoryPoints                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool*                                   bOutSimulatedImpact                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBulletProjectile::SimulateTrajectory(const struct FTransform& SimTM, const float SimTime, const float SimTimeStep, const float MaxDistance, TArray<struct FVector>* OutTrajectoryPoints, bool* bOutSimulatedImpact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "SimulateTrajectory");

	Params::GBBulletProjectile_SimulateTrajectory Parms{};

	Parms.SimTM = std::move(SimTM);
	Parms.SimTime = SimTime;
	Parms.SimTimeStep = SimTimeStep;
	Parms.MaxDistance = MaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrajectoryPoints != nullptr)
		*OutTrajectoryPoints = std::move(Parms.OutTrajectoryPoints);

	if (bOutSimulatedImpact != nullptr)
		*bOutSimulatedImpact = Parms.bOutSimulatedImpact;
}


// Function GroundBranch.GBBulletProjectile.GetBulletIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBBulletProjectile::GetBulletIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetBulletIndex");

	Params::GBBulletProjectile_GetBulletIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.GetBulletMovementComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBBulletMovementComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBBulletMovementComponent* AGBBulletProjectile::GetBulletMovementComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetBulletMovementComp");

	Params::GBBulletProjectile_GetBulletMovementComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.GetDumpedKEToDamageScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBBulletProjectile::GetDumpedKEToDamageScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetDumpedKEToDamageScale");

	Params::GBBulletProjectile_GetDumpedKEToDamageScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.GetDumpedKEToDamageScaleDeviation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBBulletProjectile::GetDumpedKEToDamageScaleDeviation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetDumpedKEToDamageScaleDeviation");

	Params::GBBulletProjectile_GetDumpedKEToDamageScaleDeviation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.GetImpactComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkComponent*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkComponent* AGBBulletProjectile::GetImpactComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetImpactComp");

	Params::GBBulletProjectile_GetImpactComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.GetStatKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBBulletProjectile::GetStatKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetStatKey");

	Params::GBBulletProjectile_GetStatKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.GetTracerColourIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBBulletProjectile::GetTracerColourIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "GetTracerColourIndex");

	Params::GBBulletProjectile_GetTracerColourIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.IsDebuggingBullets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBBulletProjectile::IsDebuggingBullets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "IsDebuggingBullets");

	Params::GBBulletProjectile_IsDebuggingBullets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBulletProjectile.IsSimulatedOnly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBBulletProjectile::IsSimulatedOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBulletProjectile", "IsSimulatedOnly");

	Params::GBBulletProjectile_IsSimulatedOnly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_Tick.Tick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_Tick*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_Tick* UGBAbilityTask_Tick::Tick(class UGameplayAbility* OwningAbility, class FName TaskInstanceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_Tick", "Tick");

	Params::GBAbilityTask_Tick_Tick Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.WaitForAbilityEnded
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              WithTag                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              WithoutTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeTriggeredAbilities                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TriggerOnce                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_WaitAbilityEnded*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_WaitAbilityEnded* UGBAbilityTask_WaitAbilityEnded::WaitForAbilityEnded(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag, const struct FGameplayTag& WithoutTag, bool IncludeTriggeredAbilities, bool TriggerOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_WaitAbilityEnded", "WaitForAbilityEnded");

	Params::GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.WithTag = std::move(WithTag);
	Parms.WithoutTag = std::move(WithoutTag);
	Parms.IncludeTriggeredAbilities = IncludeTriggeredAbilities;
	Parms.TriggerOnce = TriggerOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.WaitForAbilityEnded_Query
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagQuery&         Query                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    IncludeTriggeredAbilities                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TriggerOnce                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_WaitAbilityEnded*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_WaitAbilityEnded* UGBAbilityTask_WaitAbilityEnded::WaitForAbilityEnded_Query(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& Query, bool IncludeTriggeredAbilities, bool TriggerOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_WaitAbilityEnded", "WaitForAbilityEnded_Query");

	Params::GBAbilityTask_WaitAbilityEnded_WaitForAbilityEnded_Query Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Query = std::move(Query);
	Parms.IncludeTriggeredAbilities = IncludeTriggeredAbilities;
	Parms.TriggerOnce = TriggerOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.WaitForAbilityEndedWithTagRequirements
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagRequirements&  TagRequirements                                        (Parm, NativeAccessSpecifierPublic)
// bool                                    IncludeTriggeredAbilities                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TriggerOnce                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_WaitAbilityEnded*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_WaitAbilityEnded* UGBAbilityTask_WaitAbilityEnded::WaitForAbilityEndedWithTagRequirements(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& TagRequirements, bool IncludeTriggeredAbilities, bool TriggerOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_WaitAbilityEnded", "WaitForAbilityEndedWithTagRequirements");

	Params::GBAbilityTask_WaitAbilityEnded_WaitForAbilityEndedWithTagRequirements Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TagRequirements = std::move(TagRequirements);
	Parms.IncludeTriggeredAbilities = IncludeTriggeredAbilities;
	Parms.TriggerOnce = TriggerOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitAbilityEnded.OnAbilityEnded
// (Final, Native, Private)
// Parameters:
// class UGameplayAbility*                 EndedAbility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAbilityTask_WaitAbilityEnded::OnAbilityEnded(class UGameplayAbility* EndedAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilityTask_WaitAbilityEnded", "OnAbilityEnded");

	Params::GBAbilityTask_WaitAbilityEnded_OnAbilityEnded Parms{};

	Parms.EndedAbility = EndedAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCameraModifier.BlueprintAddedToCamera
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBPlayerCameraManager*           GBPlayerCameraManager                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCameraModifier::BlueprintAddedToCamera(class AGBPlayerCameraManager* GBPlayerCameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "BlueprintAddedToCamera");

	Params::GBCameraModifier_BlueprintAddedToCamera Parms{};

	Parms.GBPlayerCameraManager = GBPlayerCameraManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCameraModifier.BlueprintPreApplyCameraModifier
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBPlayerCameraManager*           GBPlayerCameraManager                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCameraModifier::BlueprintPreApplyCameraModifier(class AGBPlayerCameraManager* GBPlayerCameraManager, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "BlueprintPreApplyCameraModifier");

	Params::GBCameraModifier_BlueprintPreApplyCameraModifier Parms{};

	Parms.GBPlayerCameraManager = GBPlayerCameraManager;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCameraModifier.BlueprintProcessViewRotation
// (BlueprintCosmetic, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           ViewTarget                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator*                        OutViewRotation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator*                        OutDeltaRot                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCameraModifier::BlueprintProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "BlueprintProcessViewRotation");

	Params::GBCameraModifier_BlueprintProcessViewRotation Parms{};

	Parms.ViewTarget = ViewTarget;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (OutViewRotation != nullptr)
		*OutViewRotation = std::move(Parms.OutViewRotation);

	if (OutDeltaRot != nullptr)
		*OutDeltaRot = std::move(Parms.OutDeltaRot);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCameraModifier.BlueprintRemovedFromCamera
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBPlayerCameraManager*           GBPlayerCameraManager                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCameraModifier::BlueprintRemovedFromCamera(class AGBPlayerCameraManager* GBPlayerCameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "BlueprintRemovedFromCamera");

	Params::GBCameraModifier_BlueprintRemovedFromCamera Parms{};

	Parms.GBPlayerCameraManager = GBPlayerCameraManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCameraModifier.OnCameraStyleChanged
// (Native, Protected)
// Parameters:
// class FName                             OldCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCameraModifier::OnCameraStyleChanged(class FName OldCameraStyle, class FName NewCameraStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "OnCameraStyleChanged");

	Params::GBCameraModifier_OnCameraStyleChanged Parms{};

	Parms.OldCameraStyle = OldCameraStyle;
	Parms.NewCameraStyle = NewCameraStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCameraModifier.OnCameraStyleChangedEvent
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             OldCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCameraModifier::OnCameraStyleChangedEvent(class FName OldCameraStyle, class FName NewCameraStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "OnCameraStyleChangedEvent");

	Params::GBCameraModifier_OnCameraStyleChangedEvent Parms{};

	Parms.OldCameraStyle = OldCameraStyle;
	Parms.NewCameraStyle = NewCameraStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCameraModifier.OnModifierDisabledEvent
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UGBCameraModifier::OnModifierDisabledEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "OnModifierDisabledEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBCameraModifier.OnModifierEnabledEvent
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UGBCameraModifier::OnModifierEnabledEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "OnModifierEnabledEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBCameraModifier.GetGBPlayerCameraManager
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBPlayerCameraManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerCameraManager* UGBCameraModifier::GetGBPlayerCameraManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "GetGBPlayerCameraManager");

	Params::GBCameraModifier_GetGBPlayerCameraManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCameraModifier.GetGBPlayerController
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerController* UGBCameraModifier::GetGBPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCameraModifier", "GetGBPlayerController");

	Params::GBCameraModifier_GetGBPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitActionPress.WaitActionPress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTestAlreadyPressed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_WaitActionPress*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_WaitActionPress* UGBAbilityTask_WaitActionPress::WaitActionPress(class UGameplayAbility* OwningAbility, class FName ActionName, bool bTestAlreadyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_WaitActionPress", "WaitActionPress");

	Params::GBAbilityTask_WaitActionPress_WaitActionPress Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.ActionName = ActionName;
	Parms.bTestAlreadyPressed = bTestAlreadyPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitActionPress.OnPressCallback
// (Final, Native, Public)

void UGBAbilityTask_WaitActionPress::OnPressCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilityTask_WaitActionPress", "OnPressCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGBCampaignSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBCampaignSettings* UGBCampaignSettings::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBCampaignSettings", "Get");

	Params::GBCampaignSettings_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.AddOperatorToRoster
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGBOperatorDetails&        OperatorDetails                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bUpdateConfig                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCampaignSettings::AddOperatorToRoster(const struct FGBOperatorDetails& OperatorDetails, const bool bUpdateConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "AddOperatorToRoster");

	Params::GBCampaignSettings_AddOperatorToRoster Parms{};

	Parms.OperatorDetails = std::move(OperatorDetails);
	Parms.bUpdateConfig = bUpdateConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.FillRoster
// (Final, Native, Public, BlueprintCallable)

void UGBCampaignSettings::FillRoster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "FillRoster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.GenerateAvailableCodenames
// (Final, Native, Private)

void UGBCampaignSettings::GenerateAvailableCodenames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GenerateAvailableCodenames");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.GetAvailableCodenames
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGBCampaignSettings::GetAvailableCodenames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetAvailableCodenames");

	Params::GBCampaignSettings_GetAvailableCodenames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.GetCompletionDetailsForMission
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      InHotspotCodename                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBMissionCompletionDetails      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBMissionCompletionDetails UGBCampaignSettings::GetCompletionDetailsForMission(const class FName& InHotspotCodename, const int32 InMissionSequenceNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetCompletionDetailsForMission");

	Params::GBCampaignSettings_GetCompletionDetailsForMission Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.GetCompletionForHotspot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      InHotspotCodename                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutSinglePlayerCompletion                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutCoopCompletion                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCampaignSettings::GetCompletionForHotspot(const class FName& InHotspotCodename, float* OutSinglePlayerCompletion, float* OutCoopCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetCompletionForHotspot");

	Params::GBCampaignSettings_GetCompletionForHotspot Parms{};

	Parms.InHotspotCodename = InHotspotCodename;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSinglePlayerCompletion != nullptr)
		*OutSinglePlayerCompletion = Parms.OutSinglePlayerCompletion;

	if (OutCoopCompletion != nullptr)
		*OutCoopCompletion = Parms.OutCoopCompletion;
}


// Function GroundBranch.GBCampaignSettings.GetIndexInOperatorDetailsList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FGBOperatorDetails>&OperatorList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGBOperatorDetails&        OperatorDetails                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBCampaignSettings::GetIndexInOperatorDetailsList(const TArray<struct FGBOperatorDetails>& OperatorList, const struct FGBOperatorDetails& OperatorDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetIndexInOperatorDetailsList");

	Params::GBCampaignSettings_GetIndexInOperatorDetailsList Parms{};

	Parms.OperatorList = std::move(OperatorList);
	Parms.OperatorDetails = std::move(OperatorDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.GetKIAList
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGBOperatorDetails>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBOperatorDetails> UGBCampaignSettings::GetKIAList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetKIAList");

	Params::GBCampaignSettings_GetKIAList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.GetNewOperator
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGBOperatorDetails               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBOperatorDetails UGBCampaignSettings::GetNewOperator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetNewOperator");

	Params::GBCampaignSettings_GetNewOperator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.GetOperatorRoster
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGBOperatorDetails>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBOperatorDetails> UGBCampaignSettings::GetOperatorRoster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "GetOperatorRoster");

	Params::GBCampaignSettings_GetOperatorRoster Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCampaignSettings.MarkOperatorKIA
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGBOperatorDetails&        OperatorDetails                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBCampaignSettings::MarkOperatorKIA(const struct FGBOperatorDetails& OperatorDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "MarkOperatorKIA");

	Params::GBCampaignSettings_MarkOperatorKIA Parms{};

	Parms.OperatorDetails = std::move(OperatorDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.ResetCampaign
// (Final, Native, Public, BlueprintCallable)

void UGBCampaignSettings::ResetCampaign()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "ResetCampaign");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.ResetCompletionDetailsForHotspot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      InHotspotCodename                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCampaignSettings::ResetCompletionDetailsForHotspot(const class FName& InHotspotCodename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "ResetCompletionDetailsForHotspot");

	Params::GBCampaignSettings_ResetCompletionDetailsForHotspot Parms{};

	Parms.InHotspotCodename = InHotspotCodename;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.ResetCompletionDetailsForMission
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      InHotspotCodename                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCampaignSettings::ResetCompletionDetailsForMission(const class FName& InHotspotCodename, const int32 InMissionSequenceNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "ResetCompletionDetailsForMission");

	Params::GBCampaignSettings_ResetCompletionDetailsForMission Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCampaignSettings.SetCompletionDetailsForMission
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      InHotspotCodename                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bSinglePlayer                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             CompletionAmount                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCampaignSettings::SetCompletionDetailsForMission(const class FName& InHotspotCodename, const int32 InMissionSequenceNumber, const bool bSinglePlayer, const float CompletionAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCampaignSettings", "SetCompletionDetailsForMission");

	Params::GBCampaignSettings_SetCompletionDetailsForMission Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.bSinglePlayer = bSinglePlayer;
	Parms.CompletionAmount = CompletionAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilityTask_WaitActionRelease.WaitActionRelease
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTestAlreadyReleased                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_WaitActionRelease* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_WaitActionRelease* UGBAbilityTask_WaitActionRelease::WaitActionRelease(class UGameplayAbility* OwningAbility, class FName ActionName, bool bTestAlreadyReleased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_WaitActionRelease", "WaitActionRelease");

	Params::GBAbilityTask_WaitActionRelease_WaitActionRelease Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.ActionName = ActionName;
	Parms.bTestAlreadyReleased = bTestAlreadyReleased;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAbilityTask_WaitActionRelease.OnReleaseCallback
// (Final, Native, Public)

void UGBAbilityTask_WaitActionRelease::OnReleaseCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAbilityTask_WaitActionRelease", "OnReleaseCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAbilityTask_WaitForNextTick.WaitForNextTick
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAbilityTask_WaitForNextTick*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAbilityTask_WaitForNextTick* UGBAbilityTask_WaitForNextTick::WaitForNextTick(class UGameplayAbility* OwningAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAbilityTask_WaitForNextTick", "WaitForNextTick");

	Params::GBAbilityTask_WaitForNextTick_WaitForNextTick Parms{};

	Parms.OwningAbility = OwningAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetOppositeHandEnum
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHand                                   EquippedType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHand                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHand AGBCharacter::GetOppositeHandEnum(EHand EquippedType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBCharacter", "GetOppositeHandEnum");

	Params::GBCharacter_GetOppositeHandEnum Parms{};

	Parms.EquippedType = EquippedType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.AddArmStrengthInstantLoss
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::AddArmStrengthInstantLoss(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "AddArmStrengthInstantLoss");

	Params::GBCharacter_AddArmStrengthInstantLoss Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.AddDefaultItems
// (Native, Public, BlueprintCallable)

void AGBCharacter::AddDefaultItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "AddDefaultItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.AddDefaultItemsEvent
// (Event, Protected, BlueprintEvent)

void AGBCharacter::AddDefaultItemsEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "AddDefaultItemsEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBCharacter.AddRecoil
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGBRecoilData&             RecoilData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGBCharacter::AddRecoil(const struct FGBRecoilData& RecoilData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "AddRecoil");

	Params::GBCharacter_AddRecoil Parms{};

	Parms.RecoilData = std::move(RecoilData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.AddStaminaInstantLoss
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::AddStaminaInstantLoss(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "AddStaminaInstantLoss");

	Params::GBCharacter_AddStaminaInstantLoss Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.AnimNotifyFootstep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInLeftFoot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::AnimNotifyFootstep(bool bInLeftFoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "AnimNotifyFootstep");

	Params::GBCharacter_AnimNotifyFootstep Parms{};

	Parms.bInLeftFoot = bInLeftFoot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.CanDamageRadial
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   DamageOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EPhysicalSurface>&         SurfaceTypesToIgnore                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::CanDamageRadial(const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, ECollisionChannel TraceChannel, const TArray<EPhysicalSurface>& SurfaceTypesToIgnore, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "CanDamageRadial");

	Params::GBCharacter_CanDamageRadial Parms{};

	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.TraceChannel = TraceChannel;
	Parms.SurfaceTypesToIgnore = std::move(SurfaceTypesToIgnore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.CleanUpLocalInventory
// (Final, Native, Public, BlueprintCallable)

void AGBCharacter::CleanUpLocalInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "CleanUpLocalInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ClearBraceInfo
// (Final, Native, Public)

void AGBCharacter::ClearBraceInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ClearBraceInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ClearSimilarItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     InvItemTags                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       Exclude                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::ClearSimilarItems(const struct FGameplayTagContainer& InvItemTags, bool bExactMatch, class AGBInvItem* Exclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ClearSimilarItems");

	Params::GBCharacter_ClearSimilarItems Parms{};

	Parms.InvItemTags = std::move(InvItemTags);
	Parms.bExactMatch = bExactMatch;
	Parms.Exclude = Exclude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.ClientAddDefaultItems
// (Net, NetReliable, Native, Event, Protected, NetClient)

void AGBCharacter::ClientAddDefaultItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ClientAddDefaultItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ClientSyncEquipped
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AGBInvItem*                       ServerEquippedLeft                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ServerEquippedRight                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ClientSyncEquipped(class AGBInvItem* ServerEquippedLeft, class AGBInvItem* ServerEquippedRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ClientSyncEquipped");

	Params::GBCharacter_ClientSyncEquipped Parms{};

	Parms.ServerEquippedLeft = ServerEquippedLeft;
	Parms.ServerEquippedRight = ServerEquippedRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.DestroyInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceClient                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::DestroyInventory(bool bForceClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "DestroyInventory");

	Params::GBCharacter_DestroyInventory Parms{};

	Parms.bForceClient = bForceClient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ForceClientEquippedSync
// (Final, Native, Public, BlueprintCallable)

void AGBCharacter::ForceClientEquippedSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ForceClientEquippedSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.GetInvItemAttachedToSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetInvItemAttachedToSocket(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetInvItemAttachedToSocket");

	Params::GBCharacter_GetInvItemAttachedToSocket Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetInvItemsAttachedToSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBCharacter::GetInvItemsAttachedToSocket(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetInvItemsAttachedToSocket");

	Params::GBCharacter_GetInvItemsAttachedToSocket Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetItemAttachedToSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetItemAttachedToSocket(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetItemAttachedToSocket");

	Params::GBCharacter_GetItemAttachedToSocket Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetMinLightLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetMinLightLevel(const class FName& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetMinLightLevel");

	Params::GBCharacter_GetMinLightLevel Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IncrementBulletIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBCharacter::IncrementBulletIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IncrementBulletIndex");

	Params::GBCharacter_IncrementBulletIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsFrozen
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsFrozen");

	Params::GBCharacter_IsFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.ModifyDamageCaused
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// int32&                                  AppliedDamage                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32&                                  Damage                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector&                         Momentum                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::ModifyDamageCaused(int32& AppliedDamage, int32& Damage, struct FVector& Momentum, const struct FHitResult& HitInfo, class AActor* Victim, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ModifyDamageCaused");

	Params::GBCharacter_ModifyDamageCaused Parms{};

	Parms.AppliedDamage = AppliedDamage;
	Parms.Damage = Damage;
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.Victim = Victim;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AppliedDamage = Parms.AppliedDamage;
	Damage = Parms.Damage;
	Momentum = std::move(Parms.Momentum);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.ModifyDamageTaken
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// int32&                                  AppliedDamage                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32&                                  Damage                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector&                         Momentum                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::ModifyDamageTaken(int32& AppliedDamage, int32& Damage, struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ModifyDamageTaken");

	Params::GBCharacter_ModifyDamageTaken Parms{};

	Parms.AppliedDamage = AppliedDamage;
	Parms.Damage = Damage;
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AppliedDamage = Parms.AppliedDamage;
	Damage = Parms.Damage;
	Momentum = std::move(Parms.Momentum);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.NetMulticastPlayVoice
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// const class FName                       Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadioMessage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::NetMulticastPlayVoice(const class FName Key, bool bIsRadioMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "NetMulticastPlayVoice");

	Params::GBCharacter_NetMulticastPlayVoice Parms{};

	Parms.Key = Key;
	Parms.bIsRadioMessage = bIsRadioMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.NetworkedMontageJumpToSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::NetworkedMontageJumpToSection(class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "NetworkedMontageJumpToSection");

	Params::GBCharacter_NetworkedMontageJumpToSection Parms{};

	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.NotifyPlayerHasFired
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             ShotSoundLevel                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::NotifyPlayerHasFired(const float ShotSoundLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "NotifyPlayerHasFired");

	Params::GBCharacter_NotifyPlayerHasFired Parms{};

	Parms.ShotSoundLevel = ShotSoundLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnEndProneEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaledHalfHeightAdjust                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnEndProneEvent(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnEndProneEvent");

	Params::GBCharacter_OnEndProneEvent Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCharacter.OnHopped
// (Native, Event, Public, BlueprintEvent)

void AGBCharacter::OnHopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnHopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnLandedEffects
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   FallingSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnLandedEffects(const struct FHitResult& Hit, float FallingSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnLandedEffects");

	Params::GBCharacter_OnLandedEffects Parms{};

	Parms.Hit = std::move(Hit);
	Parms.FallingSpeed = FallingSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCharacter.OnMantleEvent
// (Event, Protected, BlueprintEvent)

void AGBCharacter::OnMantleEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnMantleEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBCharacter.OnPhysicsCollision
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBCharacter::OnPhysicsCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnPhysicsCollision");

	Params::GBCharacter_OnPhysicsCollision Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnPlayVoiceEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    VoiceAudioEvent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLocalPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnPlayVoiceEvent(class UAkAudioEvent* VoiceAudioEvent, bool bIsLocalPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnPlayVoiceEvent");

	Params::GBCharacter_OnPlayVoiceEvent Parms{};

	Parms.VoiceAudioEvent = VoiceAudioEvent;
	Parms.bIsLocalPlayer = bIsLocalPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCharacter.OnRep_CharVoiceInfo
// (Native, Protected)

void AGBCharacter::OnRep_CharVoiceInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_CharVoiceInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_CurrentAnimLayerClass
// (Final, Native, Protected)

void AGBCharacter::OnRep_CurrentAnimLayerClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_CurrentAnimLayerClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_DeathState
// (Native, Protected)
// Parameters:
// EGBDeathState                           OldDeathState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnRep_DeathState(EGBDeathState OldDeathState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_DeathState");

	Params::GBCharacter_OnRep_DeathState Parms{};

	Parms.OldDeathState = OldDeathState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_EquippedLeft
// (Final, Native, Protected)
// Parameters:
// class AGBInvItem*                       LastLeftEquipped                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnRep_EquippedLeft(class AGBInvItem* LastLeftEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_EquippedLeft");

	Params::GBCharacter_OnRep_EquippedLeft Parms{};

	Parms.LastLeftEquipped = LastLeftEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_EquippedRight
// (Final, Native, Protected)
// Parameters:
// class AGBInvItem*                       LastRightEquipped                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnRep_EquippedRight(class AGBInvItem* LastRightEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_EquippedRight");

	Params::GBCharacter_OnRep_EquippedRight Parms{};

	Parms.LastRightEquipped = LastRightEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_IsProne
// (Native, Protected)

void AGBCharacter::OnRep_IsProne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_IsProne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_LoadoutInfo
// (Native, Protected)

void AGBCharacter::OnRep_LoadoutInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_LoadoutInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_RecoilCount
// (Final, Native, Protected)

void AGBCharacter::OnRep_RecoilCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_RecoilCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_RemoteDesiredEngagedAlpha
// (Native, Protected)

void AGBCharacter::OnRep_RemoteDesiredEngagedAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_RemoteDesiredEngagedAlpha");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_RemoteDesiredLeanAlpha
// (Native, Protected)

void AGBCharacter::OnRep_RemoteDesiredLeanAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_RemoteDesiredLeanAlpha");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_RemoteDesiredOffTargetAlpha
// (Native, Protected)

void AGBCharacter::OnRep_RemoteDesiredOffTargetAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_RemoteDesiredOffTargetAlpha");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnRep_RNGSeed
// (Final, Native, Protected)

void AGBCharacter::OnRep_RNGSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnRep_RNGSeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.OnStaminaChangedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   OldStamina                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnStaminaChangedEvent(float OldStamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnStaminaChangedEvent");

	Params::GBCharacter_OnStaminaChangedEvent Parms{};

	Parms.OldStamina = OldStamina;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCharacter.OnStartProneEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaledHalfHeightAdjust                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::OnStartProneEvent(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnStartProneEvent");

	Params::GBCharacter_OnStartProneEvent Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBCharacter.OnStopVoiceEvent
// (Event, Protected, BlueprintEvent)

void AGBCharacter::OnStopVoiceEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OnStopVoiceEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBCharacter.OptOut
// (Native, Public, BlueprintCallable)

void AGBCharacter::OptOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "OptOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.PlayDamageEffects
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void AGBCharacter::PlayDamageEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "PlayDamageEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.PlayNetworkedMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SyncName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimInstance>        AnimLayerClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplicateToOwner                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::PlayNetworkedMontage(class UAnimMontage* AnimMontage, class FName SyncName, float PlayRate, class FName StartSectionName, TSubclassOf<class UAnimInstance> AnimLayerClass, bool bReplicateToOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "PlayNetworkedMontage");

	Params::GBCharacter_PlayNetworkedMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SyncName = SyncName;
	Parms.PlayRate = PlayRate;
	Parms.StartSectionName = StartSectionName;
	Parms.AnimLayerClass = AnimLayerClass;
	Parms.bReplicateToOwner = bReplicateToOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.PlayTakeHitEffects
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void AGBCharacter::PlayTakeHitEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "PlayTakeHitEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.PlayVoice
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadioMessage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::PlayVoice(const class FName Key, bool bIsRadioMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "PlayVoice");

	Params::GBCharacter_PlayVoice Parms{};

	Parms.Key = Key;
	Parms.bIsRadioMessage = bIsRadioMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.Prone
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::Prone(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "Prone");

	Params::GBCharacter_Prone Parms{};

	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.RemoveMeshComponentFromSkinnedDecalSampler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           MeshToRemove                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::RemoveMeshComponentFromSkinnedDecalSampler(class USkeletalMeshComponent* MeshToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "RemoveMeshComponentFromSkinnedDecalSampler");

	Params::GBCharacter_RemoveMeshComponentFromSkinnedDecalSampler Parms{};

	Parms.MeshToRemove = MeshToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ResetSkinnedDecalSampler
// (Final, Native, Public, BlueprintCallable)

void AGBCharacter::ResetSkinnedDecalSampler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ResetSkinnedDecalSampler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SeededFRandRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InMin                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::SeededFRandRange(float InMin, float InMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SeededFRandRange");

	Params::GBCharacter_SeededFRandRange Parms{};

	Parms.InMin = InMin;
	Parms.InMax = InMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.ServerClearBraceInfo
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBCharacter::ServerClearBraceInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerClearBraceInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetBraceLocation
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FVector&                   NewBraceLocation                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetBraceLocation(const struct FVector& NewBraceLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetBraceLocation");

	Params::GBCharacter_ServerSetBraceLocation Parms{};

	Parms.NewBraceLocation = std::move(NewBraceLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetDesiredEngagedAlpha
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   AlphaAsByte                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetDesiredEngagedAlpha(uint8 AlphaAsByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetDesiredEngagedAlpha");

	Params::GBCharacter_ServerSetDesiredEngagedAlpha Parms{};

	Parms.AlphaAsByte = AlphaAsByte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetDesiredLeanAlpha
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   AlphaAsByte                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetDesiredLeanAlpha(uint8 AlphaAsByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetDesiredLeanAlpha");

	Params::GBCharacter_ServerSetDesiredLeanAlpha Parms{};

	Parms.AlphaAsByte = AlphaAsByte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetDesiredOffTargetAlpha
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   AlphaAsByte                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetDesiredOffTargetAlpha(uint8 AlphaAsByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetDesiredOffTargetAlpha");

	Params::GBCharacter_ServerSetDesiredOffTargetAlpha Parms{};

	Parms.AlphaAsByte = AlphaAsByte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetLightLevel
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FName&                      Type                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetLightLevel(const class FName& Type, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetLightLevel");

	Params::GBCharacter_ServerSetLightLevel Parms{};

	Parms.Type = Type;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetMinLightLevel
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FName&                      Type                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetMinLightLevel(const class FName& Type, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetMinLightLevel");

	Params::GBCharacter_ServerSetMinLightLevel Parms{};

	Parms.Type = Type;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetRemoteHeadOffset
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   NewRemoteHeadPitchDif                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewRemoteHeadYawDif                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetRemoteHeadOffset(uint8 NewRemoteHeadPitchDif, uint8 NewRemoteHeadYawDif)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetRemoteHeadOffset");

	Params::GBCharacter_ServerSetRemoteHeadOffset Parms{};

	Parms.NewRemoteHeadPitchDif = NewRemoteHeadPitchDif;
	Parms.NewRemoteHeadYawDif = NewRemoteHeadYawDif;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetWantsToRun
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bNewWantsToRun                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetWantsToRun(bool bNewWantsToRun)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetWantsToRun");

	Params::GBCharacter_ServerSetWantsToRun Parms{};

	Parms.bNewWantsToRun = bNewWantsToRun;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ServerSetWantsToSprint
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bNewWantsToSprint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::ServerSetWantsToSprint(bool bNewWantsToSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ServerSetWantsToSprint");

	Params::GBCharacter_ServerSetWantsToSprint Parms{};

	Parms.bNewWantsToSprint = bNewWantsToSprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetBraceInfo
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FVector&                   NewBraceLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetBraceInfo(const struct FVector& NewBraceLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetBraceInfo");

	Params::GBCharacter_SetBraceInfo Parms{};

	Parms.NewBraceLocation = std::move(NewBraceLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetCharVoiceInfo
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewCharVoiceDataId                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewVoiceActorIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetCharVoiceInfo(const struct FPrimaryAssetId& NewCharVoiceDataId, uint8 NewVoiceActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetCharVoiceInfo");

	Params::GBCharacter_SetCharVoiceInfo Parms{};

	Parms.NewCharVoiceDataId = std::move(NewCharVoiceDataId);
	Parms.NewVoiceActorIndex = NewVoiceActorIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetCurrentAnimLayerClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UAnimInstance>        NewAnimLayerClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetCurrentAnimLayerClass(TSubclassOf<class UAnimInstance> NewAnimLayerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetCurrentAnimLayerClass");

	Params::GBCharacter_SetCurrentAnimLayerClass Parms{};

	Parms.NewAnimLayerClass = NewAnimLayerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetCurrentHand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHand                                   NewHand                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetCurrentHand(EHand NewHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetCurrentHand");

	Params::GBCharacter_SetCurrentHand Parms{};

	Parms.NewHand = NewHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetDesiredEngagedAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewDesiredEngagedAlpha                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetDesiredEngagedAlpha(float NewDesiredEngagedAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetDesiredEngagedAlpha");

	Params::GBCharacter_SetDesiredEngagedAlpha Parms{};

	Parms.NewDesiredEngagedAlpha = NewDesiredEngagedAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetDesiredLeanAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetDesiredLeanAlpha(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetDesiredLeanAlpha");

	Params::GBCharacter_SetDesiredLeanAlpha Parms{};

	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetDesiredOffTargetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewDesiredOffTargetAlpha                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetDesiredOffTargetAlpha(float NewDesiredOffTargetAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetDesiredOffTargetAlpha");

	Params::GBCharacter_SetDesiredOffTargetAlpha Parms{};

	Parms.NewDesiredOffTargetAlpha = NewDesiredOffTargetAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetEquipped
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       NewEquipped                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       LastEquipped                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetEquipped(EHand TargetHand, class AGBInvItem* NewEquipped, class AGBInvItem* LastEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetEquipped");

	Params::GBCharacter_SetEquipped Parms{};

	Parms.TargetHand = TargetHand;
	Parms.NewEquipped = NewEquipped;
	Parms.LastEquipped = LastEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetLightLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetLightLevel(const class FName& Type, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetLightLevel");

	Params::GBCharacter_SetLightLevel Parms{};

	Parms.Type = Type;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetLoadoutInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBKitInfo*                       NewLoadoutInfo                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetLoadoutInfo(class AGBKitInfo* NewLoadoutInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetLoadoutInfo");

	Params::GBCharacter_SetLoadoutInfo Parms{};

	Parms.NewLoadoutInfo = NewLoadoutInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetMaxArmStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMaxArmStrength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetMaxArmStrength(float NewMaxArmStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetMaxArmStrength");

	Params::GBCharacter_SetMaxArmStrength Parms{};

	Parms.NewMaxArmStrength = NewMaxArmStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetMaxStamina
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMaxStamina                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetMaxStamina(float NewMaxStamina)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetMaxStamina");

	Params::GBCharacter_SetMaxStamina Parms{};

	Parms.NewMaxStamina = NewMaxStamina;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetMinLightLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetMinLightLevel(const class FName& Type, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetMinLightLevel");

	Params::GBCharacter_SetMinLightLevel Parms{};

	Parms.Type = Type;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetNetworkedMontageNextSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionNameToChange                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NextSection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetNetworkedMontageNextSection(class UAnimMontage* AnimMontage, class FName SectionNameToChange, class FName NextSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetNetworkedMontageNextSection");

	Params::GBCharacter_SetNetworkedMontageNextSection Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SectionNameToChange = SectionNameToChange;
	Parms.NextSection = NextSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetRagdollPhysics
// (Native, Protected)

void AGBCharacter::SetRagdollPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetRagdollPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetRecoilCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewRecoilCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetRecoilCount(uint8 NewRecoilCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetRecoilCount");

	Params::GBCharacter_SetRecoilCount Parms{};

	Parms.NewRecoilCount = NewRecoilCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetRemoteHeadOffset
// (Final, Native, Protected)

void AGBCharacter::SetRemoteHeadOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetRemoteHeadOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetWantsToRun
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewWantsToRun                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetWantsToRun(bool bNewWantsToRun)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetWantsToRun");

	Params::GBCharacter_SetWantsToRun Parms{};

	Parms.bNewWantsToRun = bNewWantsToRun;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.SetWantsToSprint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewWantsToSprint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::SetWantsToSprint(bool bNewWantsToSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "SetWantsToSprint");

	Params::GBCharacter_SetWantsToSprint Parms{};

	Parms.bNewWantsToSprint = bNewWantsToSprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.StopNetworkedMontage
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::StopNetworkedMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "StopNetworkedMontage");

	Params::GBCharacter_StopNetworkedMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.StopVoice
// (Native, Public, BlueprintCallable)

void AGBCharacter::StopVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "StopVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.TakeFallingDamage
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   FallingSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::TakeFallingDamage(const struct FHitResult& Hit, float FallingSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "TakeFallingDamage");

	Params::GBCharacter_TakeFallingDamage Parms{};

	Parms.Hit = std::move(Hit);
	Parms.FallingSpeed = FallingSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.ToggleNightVision
// (Native, Protected, BlueprintCallable)

void AGBCharacter::ToggleNightVision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "ToggleNightVision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.TriggerRagdoll
// (Native, Public, BlueprintCallable)

void AGBCharacter::TriggerRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "TriggerRagdoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.UnarmedLayerSync
// (Final, Native, Public, BlueprintCallable)

void AGBCharacter::UnarmedLayerSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "UnarmedLayerSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.UnProne
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bToCrouch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::UnProne(bool bToCrouch, bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "UnProne");

	Params::GBCharacter_UnProne Parms{};

	Parms.bToCrouch = bToCrouch;
	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.UnsetPlayerInteractions
// (Final, Native, Public, BlueprintCallable)

void AGBCharacter::UnsetPlayerInteractions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "UnsetPlayerInteractions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.UpdateLean
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::UpdateLean(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "UpdateLean");

	Params::GBCharacter_UpdateLean Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.UpdateStamina
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::UpdateStamina(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "UpdateStamina");

	Params::GBCharacter_UpdateStamina Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.UpdateSway
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBCharacter::UpdateSway(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "UpdateSway");

	Params::GBCharacter_UpdateSway Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharacter.GetAimCenterOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBCharacter::GetAimCenterOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetAimCenterOffset");

	Params::GBCharacter_GetAimCenterOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetAnimInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimInstance* AGBCharacter::GetAnimInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetAnimInstance");

	Params::GBCharacter_GetAnimInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetArmStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetArmStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetArmStrength");

	Params::GBCharacter_GetArmStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetBodyCamSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetBodyCamSocket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetBodyCamSocket");

	Params::GBCharacter_GetBodyCamSocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetBreathingSinValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetBreathingSinValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetBreathingSinValue");

	Params::GBCharacter_GetBreathingSinValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetCharVoiceAudioEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* AGBCharacter::GetCharVoiceAudioEvent(const class FName Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetCharVoiceAudioEvent");

	Params::GBCharacter_GetCharVoiceAudioEvent Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetChestSlingPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetChestSlingPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetChestSlingPoint");

	Params::GBCharacter_GetChestSlingPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetCosmeticTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer AGBCharacter::GetCosmeticTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetCosmeticTags");

	Params::GBCharacter_GetCosmeticTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetCrouchAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetCrouchAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetCrouchAlpha");

	Params::GBCharacter_GetCrouchAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetCurrentAnimLayerClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UAnimInstance>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UAnimInstance> AGBCharacter::GetCurrentAnimLayerClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetCurrentAnimLayerClass");

	Params::GBCharacter_GetCurrentAnimLayerClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetCurrentHand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHand AGBCharacter::GetCurrentHand() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetCurrentHand");

	Params::GBCharacter_GetCurrentHand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetDeathState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBDeathState                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBDeathState AGBCharacter::GetDeathState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetDeathState");

	Params::GBCharacter_GetDeathState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetDesiredEngagedAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetDesiredEngagedAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetDesiredEngagedAlpha");

	Params::GBCharacter_GetDesiredEngagedAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetDesiredLeanAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetDesiredLeanAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetDesiredLeanAlpha");

	Params::GBCharacter_GetDesiredLeanAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetDesiredOffTargetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetDesiredOffTargetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetDesiredOffTargetAlpha");

	Params::GBCharacter_GetDesiredOffTargetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetEngagedAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetEngagedAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetEngagedAlpha");

	Params::GBCharacter_GetEngagedAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetEquipped(EHand TargetHand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetEquipped");

	Params::GBCharacter_GetEquipped Parms{};

	Parms.TargetHand = TargetHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetEquippedRotationalInertiaModifier
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetEquippedRotationalInertiaModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetEquippedRotationalInertiaModifier");

	Params::GBCharacter_GetEquippedRotationalInertiaModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetEyesSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetEyesSocket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetEyesSocket");

	Params::GBCharacter_GetEyesSocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetFirstInvItemByClass
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class AGBInvItem>           InvItemClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetFirstInvItemByClass(TSubclassOf<class AGBInvItem> InvItemClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetFirstInvItemByClass");

	Params::GBCharacter_GetFirstInvItemByClass Parms{};

	Parms.InvItemClass = InvItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetFirstInvItemByItemAssetId
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const struct FPrimaryAssetId&           InvItemAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGBInvItem>           CastToInvItemClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetFirstInvItemByItemAssetId(const struct FPrimaryAssetId& InvItemAssetId, TSubclassOf<class AGBInvItem> CastToInvItemClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetFirstInvItemByItemAssetId");

	Params::GBCharacter_GetFirstInvItemByItemAssetId Parms{};

	Parms.InvItemAssetId = std::move(InvItemAssetId);
	Parms.CastToInvItemClass = CastToInvItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetFirstInvItemByTags
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTagContainer&     InvItemTags                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGBInvItem>           CastToInvItemClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetFirstInvItemByTags(const struct FGameplayTagContainer& InvItemTags, bool bExactMatch, TSubclassOf<class AGBInvItem> CastToInvItemClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetFirstInvItemByTags");

	Params::GBCharacter_GetFirstInvItemByTags Parms{};

	Parms.InvItemTags = std::move(InvItemTags);
	Parms.bExactMatch = bExactMatch;
	Parms.CastToInvItemClass = CastToInvItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetFlattenSwayTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetFlattenSwayTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetFlattenSwayTime");

	Params::GBCharacter_GetFlattenSwayTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetFootstepComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkComponent*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkComponent* AGBCharacter::GetFootstepComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetFootstepComp");

	Params::GBCharacter_GetFootstepComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetGBMovementComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBCharacterMovement*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBCharacterMovement* AGBCharacter::GetGBMovementComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetGBMovementComp");

	Params::GBCharacter_GetGBMovementComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetHandEnum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   EquippedType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHand                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHand AGBCharacter::GetHandEnum(EHand EquippedType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetHandEnum");

	Params::GBCharacter_GetHandEnum Parms{};

	Parms.EquippedType = EquippedType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetHandEnumFromSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHand                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHand AGBCharacter::GetHandEnumFromSocket(class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetHandEnumFromSocket");

	Params::GBCharacter_GetHandEnumFromSocket Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetHeadCamSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetHeadCamSocket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetHeadCamSocket");

	Params::GBCharacter_GetHeadCamSocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetInventoryList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBCharacter::GetInventoryList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetInventoryList");

	Params::GBCharacter_GetInventoryList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetInvItemsByClass
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class AGBInvItem>           InvItemClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBCharacter::GetInvItemsByClass(TSubclassOf<class AGBInvItem> InvItemClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetInvItemsByClass");

	Params::GBCharacter_GetInvItemsByClass Parms{};

	Parms.InvItemClass = InvItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetInvItemsByItemAssetId
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const struct FPrimaryAssetId&           InvItemAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBCharacter::GetInvItemsByItemAssetId(const struct FPrimaryAssetId& InvItemAssetId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetInvItemsByItemAssetId");

	Params::GBCharacter_GetInvItemsByItemAssetId Parms{};

	Parms.InvItemAssetId = std::move(InvItemAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetInvItemsByTags
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTagContainer&     InvItemTags                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBInvItem*> AGBCharacter::GetInvItemsByTags(const struct FGameplayTagContainer& InvItemTags, bool bExactMatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetInvItemsByTags");

	Params::GBCharacter_GetInvItemsByTags Parms{};

	Parms.InvItemTags = std::move(InvItemTags);
	Parms.bExactMatch = bExactMatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetItemHandSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetItemHandSocket(EHand TargetHand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetItemHandSocket");

	Params::GBCharacter_GetItemHandSocket Parms{};

	Parms.TargetHand = TargetHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetLastTakeHitTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetLastTakeHitTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetLastTakeHitTime");

	Params::GBCharacter_GetLastTakeHitTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetLeanAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetLeanAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetLeanAlpha");

	Params::GBCharacter_GetLeanAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetLightDetectionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBLXRDetectionComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBLXRDetectionComponent* AGBCharacter::GetLightDetectionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetLightDetectionComponent");

	Params::GBCharacter_GetLightDetectionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetLightLevelScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetLightLevelScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetLightLevelScale");

	Params::GBCharacter_GetLightLevelScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetLocalViewer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerController* AGBCharacter::GetLocalViewer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetLocalViewer");

	Params::GBCharacter_GetLocalViewer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetMaxArmStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetMaxArmStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetMaxArmStrength");

	Params::GBCharacter_GetMaxArmStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetMaxStamina
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetMaxStamina() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetMaxStamina");

	Params::GBCharacter_GetMaxStamina Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetMovementDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetMovementDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetMovementDirection");

	Params::GBCharacter_GetMovementDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetMovementSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetMovementSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetMovementSpeed");

	Params::GBCharacter_GetMovementSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetNetworkedMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* AGBCharacter::GetNetworkedMontage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetNetworkedMontage");

	Params::GBCharacter_GetNetworkedMontage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetNetworkedMontageSection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetNetworkedMontageSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetNetworkedMontageSection");

	Params::GBCharacter_GetNetworkedMontageSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetNetworkedMontageSyncName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetNetworkedMontageSyncName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetNetworkedMontageSyncName");

	Params::GBCharacter_GetNetworkedMontageSyncName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetOffTargetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetOffTargetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetOffTargetAlpha");

	Params::GBCharacter_GetOffTargetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetPelvisBone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetPelvisBone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetPelvisBone");

	Params::GBCharacter_GetPelvisBone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetPrevEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBCharacter::GetPrevEquipped(EHand TargetHand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetPrevEquipped");

	Params::GBCharacter_GetPrevEquipped Parms{};

	Parms.TargetHand = TargetHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetProneYawCenter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetProneYawCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetProneYawCenter");

	Params::GBCharacter_GetProneYawCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetProneYawOffCenterLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetProneYawOffCenterLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetProneYawOffCenterLimit");

	Params::GBCharacter_GetProneYawOffCenterLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetRecoilAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetRecoilAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetRecoilAlpha");

	Params::GBCharacter_GetRecoilAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetRecoilCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBCharacter::GetRecoilCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetRecoilCount");

	Params::GBCharacter_GetRecoilCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetRecoilOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBCharacter::GetRecoilOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetRecoilOffset");

	Params::GBCharacter_GetRecoilOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetRemoteHeadOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBCharacter::GetRemoteHeadOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetRemoteHeadOffset");

	Params::GBCharacter_GetRemoteHeadOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetRemoteViewPitch
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetRemoteViewPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetRemoteViewPitch");

	Params::GBCharacter_GetRemoteViewPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetShoulderSlingPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHand                                   TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBCharacter::GetShoulderSlingPoint(EHand TargetHand) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetShoulderSlingPoint");

	Params::GBCharacter_GetShoulderSlingPoint Parms{};

	Parms.TargetHand = TargetHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetSightLineTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform AGBCharacter::GetSightLineTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetSightLineTransform");

	Params::GBCharacter_GetSightLineTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetSkinnedDecalSampler
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkinnedDecalSampler*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkinnedDecalSampler* AGBCharacter::GetSkinnedDecalSampler() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetSkinnedDecalSampler");

	Params::GBCharacter_GetSkinnedDecalSampler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetStamina
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetStamina() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetStamina");

	Params::GBCharacter_GetStamina Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetSwayOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBCharacter::GetSwayOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetSwayOffset");

	Params::GBCharacter_GetSwayOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetTotalItemWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetTotalItemWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetTotalItemWeight");

	Params::GBCharacter_GetTotalItemWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetTracedCollisionOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetTracedCollisionOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetTracedCollisionOffset");

	Params::GBCharacter_GetTracedCollisionOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetViewPitchMax
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetViewPitchMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetViewPitchMax");

	Params::GBCharacter_GetViewPitchMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetViewPitchMin
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetViewPitchMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetViewPitchMin");

	Params::GBCharacter_GetViewPitchMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetVisibilityModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBCharacter::GetVisibilityModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetVisibilityModifier");

	Params::GBCharacter_GetVisibilityModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetVoiceComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkComponent*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkComponent* AGBCharacter::GetVoiceComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetVoiceComp");

	Params::GBCharacter_GetVoiceComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.GetWantsToControlBreath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::GetWantsToControlBreath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "GetWantsToControlBreath");

	Params::GBCharacter_GetWantsToControlBreath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.Is3DMovementMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::Is3DMovementMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "Is3DMovementMode");

	Params::GBCharacter_Is3DMovementMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsAlive");

	Params::GBCharacter_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsBeingLed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsBeingLed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsBeingLed");

	Params::GBCharacter_IsBeingLed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsCrouched
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsCrouched() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsCrouched");

	Params::GBCharacter_IsCrouched Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsDummyCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsDummyCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsDummyCharacter");

	Params::GBCharacter_IsDummyCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsEngaged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsEngaged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsEngaged");

	Params::GBCharacter_IsEngaged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsInInventory
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGBInvItem*                 InvItem                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsInInventory(const class AGBInvItem* InvItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsInInventory");

	Params::GBCharacter_IsInInventory Parms{};

	Parms.InvItem = InvItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsLeading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsLeading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsLeading");

	Params::GBCharacter_IsLeading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsLocallyViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsLocallyViewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsLocallyViewed");

	Params::GBCharacter_IsLocallyViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsProne
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsProne() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsProne");

	Params::GBCharacter_IsProne Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsRagdoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsRagdoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsRagdoll");

	Params::GBCharacter_IsRagdoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsRunning");

	Params::GBCharacter_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsSprinting");

	Params::GBCharacter_IsSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.IsUICharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::IsUICharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "IsUICharacter");

	Params::GBCharacter_IsUICharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.WantsToLean
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::WantsToLean() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "WantsToLean");

	Params::GBCharacter_WantsToLean Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.WantsToLeanLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::WantsToLeanLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "WantsToLeanLeft");

	Params::GBCharacter_WantsToLeanLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.WantsToLeanRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::WantsToLeanRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "WantsToLeanRight");

	Params::GBCharacter_WantsToLeanRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.WantsToRun
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::WantsToRun() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "WantsToRun");

	Params::GBCharacter_WantsToRun Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacter.WantsToSprint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBCharacter::WantsToSprint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacter", "WantsToSprint");

	Params::GBCharacter_WantsToSprint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBarkManager.Bark
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBKytController*                 AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BarkType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BarkKey                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIBarkManager::Bark(class AGBKytController* AIController, class FName BarkType, class FName BarkKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBarkManager", "Bark");

	Params::GBAIBarkManager_Bark Parms{};

	Parms.AIController = AIController;
	Parms.BarkType = BarkType;
	Parms.BarkKey = BarkKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIBehaviorBase.OnEnterState
// (Event, Public, BlueprintEvent)

void UGBAIBehaviorBase::OnEnterState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "OnEnterState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBAIBehaviorBase.OnExitState
// (Event, Public, BlueprintEvent)

void UGBAIBehaviorBase::OnExitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "OnExitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBAIBehaviorBase.TickState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIBehaviorBase::TickState(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "TickState");

	Params::GBAIBehaviorBase_TickState Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIBehaviorBase.GetCommandBlackboard
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UKytBlackboard*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKytBlackboard* UGBAIBehaviorBase::GetCommandBlackboard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "GetCommandBlackboard");

	Params::GBAIBehaviorBase_GetCommandBlackboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorBase.GetCommonBlackboard
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UKytBlackboard*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKytBlackboard* UGBAIBehaviorBase::GetCommonBlackboard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "GetCommonBlackboard");

	Params::GBAIBehaviorBase_GetCommonBlackboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorBase.GetScore
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBAIBehaviorBase::GetScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "GetScore");

	Params::GBAIBehaviorBase_GetScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorBase.PreCondition
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAIBehaviorBase::PreCondition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "PreCondition");

	Params::GBAIBehaviorBase_PreCondition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorBase.TryGetCurrentObjective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGBAIObjectiveBase>   ObjectiveClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAIObjectiveBase*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAIObjectiveBase* UGBAIBehaviorBase::TryGetCurrentObjective(TSubclassOf<class UGBAIObjectiveBase> ObjectiveClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorBase", "TryGetCurrentObjective");

	Params::GBAIBehaviorBase_TryGetCurrentObjective Parms{};

	Parms.ObjectiveClass = ObjectiveClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.AddBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBAIBehaviorBase*                Behavior                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIBehaviorSelectionComponent::AddBehavior(class UGBAIBehaviorBase* Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "AddBehavior");

	Params::GBAIBehaviorSelectionComponent_AddBehavior Parms{};

	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.AddObjective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBAIObjectiveBase*               Objective                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIBehaviorSelectionComponent::AddObjective(class UGBAIObjectiveBase* Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "AddObjective");

	Params::GBAIBehaviorSelectionComponent_AddObjective Parms{};

	Parms.Objective = Objective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.SetCurrentBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBAIBehaviorBase*                NewBehavior                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIBehaviorSelectionComponent::SetCurrentBehavior(class UGBAIBehaviorBase* NewBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "SetCurrentBehavior");

	Params::GBAIBehaviorSelectionComponent_SetCurrentBehavior Parms{};

	Parms.NewBehavior = NewBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.SetObjectiveGenerator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBAIObjectiveGeneratorBase*      Generator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIBehaviorSelectionComponent::SetObjectiveGenerator(class UGBAIObjectiveGeneratorBase* Generator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "SetObjectiveGenerator");

	Params::GBAIBehaviorSelectionComponent_SetObjectiveGenerator Parms{};

	Parms.Generator = Generator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.GetBehaviors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UGBAIBehaviorBase*>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UGBAIBehaviorBase*> UGBAIBehaviorSelectionComponent::GetBehaviors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "GetBehaviors");

	Params::GBAIBehaviorSelectionComponent_GetBehaviors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.GetCurrentBehavior
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBAIBehaviorBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAIBehaviorBase* UGBAIBehaviorSelectionComponent::GetCurrentBehavior() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "GetCurrentBehavior");

	Params::GBAIBehaviorSelectionComponent_GetCurrentBehavior Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIBehaviorSelectionComponent.TryGetCurrentObjective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGBAIObjectiveBase>   ObjectiveClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAIObjectiveBase*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAIObjectiveBase* UGBAIBehaviorSelectionComponent::TryGetCurrentObjective(TSubclassOf<class UGBAIObjectiveBase> ObjectiveClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIBehaviorSelectionComponent", "TryGetCurrentObjective");

	Params::GBAIBehaviorSelectionComponent_TryGetCurrentObjective Parms{};

	Parms.ObjectiveClass = ObjectiveClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.FallingDamageReduction
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   FallingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::FallingDamageReduction(float FallingDamage, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "FallingDamageReduction");

	Params::GBCharacterMovement_FallingDamageReduction Parms{};

	Parms.FallingDamage = FallingDamage;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetEngagedAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetEngagedAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetEngagedAlpha");

	Params::GBCharacterMovement_GetEngagedAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetFirearmEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCharacterMovement::GetFirearmEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetFirearmEquipped");

	Params::GBCharacterMovement_GetFirearmEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetLadderComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBLadderComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBLadderComponent* UGBCharacterMovement::GetLadderComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetLadderComponent");

	Params::GBCharacterMovement_GetLadderComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetMaxRunningSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetMaxRunningSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetMaxRunningSpeed");

	Params::GBCharacterMovement_GetMaxRunningSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetMaxSprintingSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetMaxSprintingSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetMaxSprintingSpeed");

	Params::GBCharacterMovement_GetMaxSprintingSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetMaxWalkingSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetMaxWalkingSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetMaxWalkingSpeed");

	Params::GBCharacterMovement_GetMaxWalkingSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetMovementDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetMovementDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetMovementDirection");

	Params::GBCharacterMovement_GetMovementDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetOffTargetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetOffTargetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetOffTargetAlpha");

	Params::GBCharacterMovement_GetOffTargetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetWaterDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetWaterDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetWaterDepth");

	Params::GBCharacterMovement_GetWaterDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetWaterDepthJumpScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetWaterDepthJumpScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetWaterDepthJumpScale");

	Params::GBCharacterMovement_GetWaterDepthJumpScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.GetWaterDepthMaxSpeedScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBCharacterMovement::GetWaterDepthMaxSpeedScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "GetWaterDepthMaxSpeedScale");

	Params::GBCharacterMovement_GetWaterDepthMaxSpeedScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.IsProne
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCharacterMovement::IsProne() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "IsProne");

	Params::GBCharacterMovement_IsProne Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.WantsToLean
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCharacterMovement::WantsToLean() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "WantsToLean");

	Params::GBCharacterMovement_WantsToLean Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.WantsToRun
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCharacterMovement::WantsToRun() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "WantsToRun");

	Params::GBCharacterMovement_WantsToRun Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharacterMovement.WantsToSprint
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCharacterMovement::WantsToSprint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharacterMovement", "WantsToSprint");

	Params::GBCharacterMovement_WantsToSprint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.Bark
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadioMessage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::Bark(class FName Key, int32 Priority, float Timeout, bool bIsRadioMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "Bark");

	Params::GBAIController_Bark Parms{};

	Parms.Key = Key;
	Parms.Priority = Priority;
	Parms.Timeout = Timeout;
	Parms.bIsRadioMessage = bIsRadioMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.BulletWarn
// (Final, Native, Public)
// Parameters:
// class AActor*                           Bullet                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSubSonic                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::BulletWarn(class AActor* Bullet, bool bSubSonic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "BulletWarn");

	Params::GBAIController_BulletWarn Parms{};

	Parms.Bullet = Bullet;
	Parms.bSubSonic = bSubSonic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.ClearDesiredAimRotationOverride
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::ClearDesiredAimRotationOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "ClearDesiredAimRotationOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.ClearDesiredViewRotationOffset
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::ClearDesiredViewRotationOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "ClearDesiredViewRotationOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.ClearSquad
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::ClearSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "ClearSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.ClearUsableActor
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::ClearUsableActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "ClearUsableActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.DebugFreeze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldFreeze                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::DebugFreeze(bool bShouldFreeze)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "DebugFreeze");

	Params::GBAIController_DebugFreeze Parms{};

	Parms.bShouldFreeze = bShouldFreeze;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.Freeze
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   FreezeTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::Freeze(float FreezeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "Freeze");

	Params::GBAIController_Freeze Parms{};

	Parms.FreezeTime = FreezeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.FrozenTimeLeft
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::FrozenTimeLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "FrozenTimeLeft");

	Params::GBAIController_FrozenTimeLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetCurrentPathCorridorIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  CorridorIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::GetCurrentPathCorridorIndex(int32* CorridorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetCurrentPathCorridorIndex");

	Params::GBAIController_GetCurrentPathCorridorIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CorridorIndex != nullptr)
		*CorridorIndex = Parms.CorridorIndex;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetGBCharacter
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBAIController::GetGBCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetGBCharacter");

	Params::GBAIController_GetGBCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetNavLinkPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   CorridorIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         LinkStart                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         LinkEnd                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::GetNavLinkPoints(int32 CorridorIndex, struct FVector* LinkStart, struct FVector* LinkEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetNavLinkPoints");

	Params::GBAIController_GetNavLinkPoints Parms{};

	Parms.CorridorIndex = CorridorIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LinkStart != nullptr)
		*LinkStart = std::move(Parms.LinkStart);

	if (LinkEnd != nullptr)
		*LinkEnd = std::move(Parms.LinkEnd);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.IsFrozen
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::IsFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "IsFrozen");

	Params::GBAIController_IsFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.NeedsReload
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::NeedsReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "NeedsReload");

	Params::GBAIController_NeedsReload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.NotifyBump
// (Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBAIController::NotifyBump(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "NotifyBump");

	Params::GBAIController_NotifyBump Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.NotifyTakeHit
// (Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDamageEvent&              DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBAIController::NotifyTakeHit(class AController* InstigatedBy, int32 Damage, const struct FVector& Momentum, const struct FDamageEvent& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "NotifyTakeHit");

	Params::GBAIController_NotifyTakeHit Parms{};

	Parms.InstigatedBy = InstigatedBy;
	Parms.Damage = Damage;
	Parms.Momentum = std::move(Momentum);
	Parms.DamageEvent = std::move(DamageEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.NotifyWalkingOffLedge
// (Native, Public)

void AGBAIController::NotifyWalkingOffLedge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "NotifyWalkingOffLedge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.OnLoadoutApplied
// (Native, Event, Public, BlueprintEvent)

void AGBAIController::OnLoadoutApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "OnLoadoutApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.OnNoLongerSensingEnemyEvent
// (Event, Protected, BlueprintEvent)

void AGBAIController::OnNoLongerSensingEnemyEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "OnNoLongerSensingEnemyEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBAIController.OnSensingEnemyDeathEvent
// (Event, Protected, BlueprintEvent)

void AGBAIController::OnSensingEnemyDeathEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "OnSensingEnemyDeathEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBAIController.OnSensingNewEnemyEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bHasLineOfSight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::OnSensingNewEnemyEvent(bool bHasLineOfSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "OnSensingNewEnemyEvent");

	Params::GBAIController_OnSensingNewEnemyEvent Parms{};

	Parms.bHasLineOfSight = bHasLineOfSight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBAIController.OnTargetPerceptionUpdated
// (Final, Native, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAIStimulus&               Stimulus                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGBAIController::OnTargetPerceptionUpdated(class AActor* Actor, const struct FAIStimulus& Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "OnTargetPerceptionUpdated");

	Params::GBAIController_OnTargetPerceptionUpdated Parms{};

	Parms.Actor = Actor;
	Parms.Stimulus = std::move(Stimulus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.Reload
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "Reload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetAIState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBAIState                              NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetAIState(EGBAIState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetAIState");

	Params::GBAIController_SetAIState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetAlertAffiliationSightThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewAlertAffiliationSightThreshold                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetAlertAffiliationSightThreshold(const float NewAlertAffiliationSightThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetAlertAffiliationSightThreshold");

	Params::GBAIController_SetAlertAffiliationSightThreshold Parms{};

	Parms.NewAlertAffiliationSightThreshold = NewAlertAffiliationSightThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetAlertHearingThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewAlertHearingThreshold                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetAlertHearingThreshold(const float NewAlertHearingThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetAlertHearingThreshold");

	Params::GBAIController_SetAlertHearingThreshold Parms{};

	Parms.NewAlertHearingThreshold = NewAlertHearingThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetAlertSuspicionSightThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewAlertSuspicionSightThreshold                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetAlertSuspicionSightThreshold(const float NewAlertSuspicionSightThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetAlertSuspicionSightThreshold");

	Params::GBAIController_SetAlertSuspicionSightThreshold Parms{};

	Parms.NewAlertSuspicionSightThreshold = NewAlertSuspicionSightThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetDesiredAimRotationOverride
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   NewRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetDesiredAimRotationOverride(const struct FRotator& NewRotation, float NewRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetDesiredAimRotationOverride");

	Params::GBAIController_SetDesiredAimRotationOverride Parms{};

	Parms.NewRotation = std::move(NewRotation);
	Parms.NewRate = NewRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetDesiredViewRotationOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGBAIController::SetDesiredViewRotationOffset(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetDesiredViewRotationOffset");

	Params::GBAIController_SetDesiredViewRotationOffset Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemy
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     NewEnemy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemy(class AGBCharacter* NewEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemy");

	Params::GBAIController_SetEnemy Parms{};

	Parms.NewEnemy = NewEnemy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyDistance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyDistance(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyDistance");

	Params::GBAIController_SetEnemyDistance Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyLastHeard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyLastHeard(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyLastHeard");

	Params::GBAIController_SetEnemyLastHeard Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyLastKnownDirection
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyLastKnownDirection(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyLastKnownDirection");

	Params::GBAIController_SetEnemyLastKnownDirection Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyLastKnownLocation
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyLastKnownLocation(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyLastKnownLocation");

	Params::GBAIController_SetEnemyLastKnownLocation Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyLastSeen
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyLastSeen(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyLastSeen");

	Params::GBAIController_SetEnemyLastSeen Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyLastStimulusTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyLastStimulusTime(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyLastStimulusTime");

	Params::GBAIController_SetEnemyLastStimulusTime Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyLOS
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyLOS(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyLOS");

	Params::GBAIController_SetEnemyLOS Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetEnemyPartSeen
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             NewEnemyPartSeen                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetEnemyPartSeen(class FName NewEnemyPartSeen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetEnemyPartSeen");

	Params::GBAIController_SetEnemyPartSeen Parms{};

	Parms.NewEnemyPartSeen = NewEnemyPartSeen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetIdleAffiliationSightThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewIdleAffiliationSightThreshold                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetIdleAffiliationSightThreshold(const float NewIdleAffiliationSightThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetIdleAffiliationSightThreshold");

	Params::GBAIController_SetIdleAffiliationSightThreshold Parms{};

	Parms.NewIdleAffiliationSightThreshold = NewIdleAffiliationSightThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetIdleHearingThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewIdleHearingThreshold                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetIdleHearingThreshold(const float NewIdleHearingThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetIdleHearingThreshold");

	Params::GBAIController_SetIdleHearingThreshold Parms{};

	Parms.NewIdleHearingThreshold = NewIdleHearingThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetIdleSuspicionSightThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewIdleSuspicionSightThreshold                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetIdleSuspicionSightThreshold(const float NewIdleSuspicionSightThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetIdleSuspicionSightThreshold");

	Params::GBAIController_SetIdleSuspicionSightThreshold Parms{};

	Parms.NewIdleSuspicionSightThreshold = NewIdleSuspicionSightThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetSearchTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetSearchTime(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetSearchTime");

	Params::GBAIController_SetSearchTime Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBAISquad*                       NewSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetSquad(class AGBAISquad* NewSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetSquad");

	Params::GBAIController_SetSquad Parms{};

	Parms.NewSquad = NewSquad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewUsableActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActor(class AActor* NewUsableActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActor");

	Params::GBAIController_SetUsableActor Parms{};

	Parms.NewUsableActor = NewUsableActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorNavDir
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorNavDir(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorNavDir");

	Params::GBAIController_SetUsableActorNavDir Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorNavEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorNavEnd(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorNavEnd");

	Params::GBAIController_SetUsableActorNavEnd Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorNavStart
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorNavStart(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorNavStart");

	Params::GBAIController_SetUsableActorNavStart Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBAIUsableActorState                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorState(EGBAIUsableActorState NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorState");

	Params::GBAIController_SetUsableActorState Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewUsableActorType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorType(class FName NewUsableActorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorType");

	Params::GBAIController_SetUsableActorType Parms{};

	Parms.NewUsableActorType = NewUsableActorType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorUseEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorUseEnd(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorUseEnd");

	Params::GBAIController_SetUsableActorUseEnd Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorUseStart
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorUseStart(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorUseStart");

	Params::GBAIController_SetUsableActorUseStart Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetUsableActorUseWaitLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIController::SetUsableActorUseWaitLocation(const struct FVector& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetUsableActorUseWaitLocation");

	Params::GBAIController_SetUsableActorUseWaitLocation Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.SetViewRotation
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGBAIController::SetViewRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "SetViewRotation");

	Params::GBAIController_SetViewRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.ShowDebugInfoEvent
// (Event, Protected, BlueprintEvent)

void AGBAIController::ShowDebugInfoEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "ShowDebugInfoEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBAIController.StartFiring
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::StartFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "StartFiring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.StopFiring
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::StopFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "StopFiring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.UnFreeze
// (Native, Public, BlueprintCallable)

void AGBAIController::UnFreeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "UnFreeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.UpdateEquippedType
// (Final, Native, Public, BlueprintCallable)

void AGBAIController::UpdateEquippedType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "UpdateEquippedType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIController.GetAIState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBAIState                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBAIState AGBAIController::GetAIState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetAIState");

	Params::GBAIController_GetAIState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetBehaviorComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBehaviorTreeComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBehaviorTreeComponent* AGBAIController::GetBehaviorComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetBehaviorComp");

	Params::GBAIController_GetBehaviorComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetCanSuppressEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::GetCanSuppressEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetCanSuppressEnemy");

	Params::GBAIController_GetCanSuppressEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemy
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBAIController::GetEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemy");

	Params::GBAIController_GetEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyDistance
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetEnemyDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyDistance");

	Params::GBAIController_GetEnemyDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyLastHeard
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetEnemyLastHeard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyLastHeard");

	Params::GBAIController_GetEnemyLastHeard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyLastKnownDirection
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetEnemyLastKnownDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyLastKnownDirection");

	Params::GBAIController_GetEnemyLastKnownDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyLastKnownLocation
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetEnemyLastKnownLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyLastKnownLocation");

	Params::GBAIController_GetEnemyLastKnownLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyLastSeen
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetEnemyLastSeen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyLastSeen");

	Params::GBAIController_GetEnemyLastSeen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyLastStimulusTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetEnemyLastStimulusTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyLastStimulusTime");

	Params::GBAIController_GetEnemyLastStimulusTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyLOS
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::GetEnemyLOS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyLOS");

	Params::GBAIController_GetEnemyLOS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetEnemyPartSeen
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBAIController::GetEnemyPartSeen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetEnemyPartSeen");

	Params::GBAIController_GetEnemyPartSeen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetLastBark
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAIBark                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FAIBark AGBAIController::GetLastBark() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetLastBark");

	Params::GBAIController_GetLastBark Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetMaxDelayBetweenBursts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetMaxDelayBetweenBursts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetMaxDelayBetweenBursts");

	Params::GBAIController_GetMaxDelayBetweenBursts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetMaxFullAutoBurst
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBAIController::GetMaxFullAutoBurst() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetMaxFullAutoBurst");

	Params::GBAIController_GetMaxFullAutoBurst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetMaxSemiAutoBurst
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBAIController::GetMaxSemiAutoBurst() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetMaxSemiAutoBurst");

	Params::GBAIController_GetMaxSemiAutoBurst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetMinDelayBetweenBursts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetMinDelayBetweenBursts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetMinDelayBetweenBursts");

	Params::GBAIController_GetMinDelayBetweenBursts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetMinFullAutoBurst
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBAIController::GetMinFullAutoBurst() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetMinFullAutoBurst");

	Params::GBAIController_GetMinFullAutoBurst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetNextPathCorridorPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetNextPathCorridorPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetNextPathCorridorPoint");

	Params::GBAIController_GetNextPathCorridorPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetNextPathLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetNextPathLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetNextPathLocation");

	Params::GBAIController_GetNextPathLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetOnTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::GetOnTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetOnTarget");

	Params::GBAIController_GetOnTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetPathCorridorPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> AGBAIController::GetPathCorridorPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetPathCorridorPoints");

	Params::GBAIController_GetPathCorridorPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetReactionTimeBase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetReactionTimeBase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetReactionTimeBase");

	Params::GBAIController_GetReactionTimeBase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetReactionTimeRandom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetReactionTimeRandom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetReactionTimeRandom");

	Params::GBAIController_GetReactionTimeRandom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetSearchTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIController::GetSearchTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetSearchTime");

	Params::GBAIController_GetSearchTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBAISquad*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAISquad* AGBAIController::GetSquad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetSquad");

	Params::GBAIController_GetSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGBAIController::GetUsableActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActor");

	Params::GBAIController_GetUsableActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorNavDir
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetUsableActorNavDir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorNavDir");

	Params::GBAIController_GetUsableActorNavDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorNavEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetUsableActorNavEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorNavEnd");

	Params::GBAIController_GetUsableActorNavEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorNavStart
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetUsableActorNavStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorNavStart");

	Params::GBAIController_GetUsableActorNavStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBAIUsableActorState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBAIUsableActorState AGBAIController::GetUsableActorState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorState");

	Params::GBAIController_GetUsableActorState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBAIController::GetUsableActorType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorType");

	Params::GBAIController_GetUsableActorType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorUseEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetUsableActorUseEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorUseEnd");

	Params::GBAIController_GetUsableActorUseEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorUseStart
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetUsableActorUseStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorUseStart");

	Params::GBAIController_GetUsableActorUseStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetUsableActorUseWaitLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAIController::GetUsableActorUseWaitLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetUsableActorUseWaitLocation");

	Params::GBAIController_GetUsableActorUseWaitLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetViewRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBAIController::GetViewRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetViewRotation");

	Params::GBAIController_GetViewRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.GetViewRotationOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBAIController::GetViewRotationOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "GetViewRotationOffset");

	Params::GBAIController_GetViewRotationOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIController.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAIController::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIController", "IsAlive");

	Params::GBAIController_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAICoordinatorSubsystem.AddTargetingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKytController*                 TargetingAI                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAICoordinatorSubsystem::AddTargetingData(class AActor* Target, class AGBKytController* TargetingAI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAICoordinatorSubsystem", "AddTargetingData");

	Params::GBAICoordinatorSubsystem_AddTargetingData Parms{};

	Parms.Target = Target;
	Parms.TargetingAI = TargetingAI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAICoordinatorSubsystem.DisableFleeState
// (Final, Native, Public, BlueprintCallable)

void UGBAICoordinatorSubsystem::DisableFleeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAICoordinatorSubsystem", "DisableFleeState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAICoordinatorSubsystem.GetCountForTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBAICoordinatorSubsystem::GetCountForTarget(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAICoordinatorSubsystem", "GetCountForTarget");

	Params::GBAICoordinatorSubsystem_GetCountForTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAICoordinatorSubsystem.RemoveTargetingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBKytController*                 TargetingAI                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAICoordinatorSubsystem::RemoveTargetingData(class AGBKytController* TargetingAI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAICoordinatorSubsystem", "RemoveTargetingData");

	Params::GBAICoordinatorSubsystem_RemoveTargetingData Parms{};

	Parms.TargetingAI = TargetingAI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAICoordinatorSubsystem.TriggerFleeState
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   FleeFromLoc                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAICoordinatorSubsystem::TriggerFleeState(const struct FVector& FleeFromLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAICoordinatorSubsystem", "TriggerFleeState");

	Params::GBAICoordinatorSubsystem_TriggerFleeState Parms{};

	Parms.FleeFromLoc = std::move(FleeFromLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetDynamicLeftHandIKRoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetDynamicLeftHandIKRoot(class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetDynamicLeftHandIKRoot");

	Params::GBCharAnimInstance_SetDynamicLeftHandIKRoot Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetDynamicLeftHandIKRootLocOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   LocOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetDynamicLeftHandIKRootLocOffset(const struct FVector& LocOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetDynamicLeftHandIKRootLocOffset");

	Params::GBCharAnimInstance_SetDynamicLeftHandIKRootLocOffset Parms{};

	Parms.LocOffset = std::move(LocOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetDynamicLeftHandIKRootRotOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  RotOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetDynamicLeftHandIKRootRotOffset(const struct FRotator& RotOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetDynamicLeftHandIKRootRotOffset");

	Params::GBCharAnimInstance_SetDynamicLeftHandIKRootRotOffset Parms{};

	Parms.RotOffset = std::move(RotOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetDynamicRightHandIKRoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetDynamicRightHandIKRoot(class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetDynamicRightHandIKRoot");

	Params::GBCharAnimInstance_SetDynamicRightHandIKRoot Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetDynamicRightItemRoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetDynamicRightItemRoot(class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetDynamicRightItemRoot");

	Params::GBCharAnimInstance_SetDynamicRightItemRoot Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetRecoilBlendAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRecoilBlendAlpha                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetRecoilBlendAlpha(float NewRecoilBlendAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetRecoilBlendAlpha");

	Params::GBCharAnimInstance_SetRecoilBlendAlpha Parms{};

	Parms.NewRecoilBlendAlpha = NewRecoilBlendAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.SetTurningInPlace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCharAnimInstance::SetTurningInPlace(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "SetTurningInPlace");

	Params::GBCharAnimInstance_SetTurningInPlace Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCharAnimInstance.GetDynamicLeftHandIKRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBCharAnimInstance::GetDynamicLeftHandIKRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "GetDynamicLeftHandIKRoot");

	Params::GBCharAnimInstance_GetDynamicLeftHandIKRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharAnimInstance.GetDynamicRightHandIKRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBCharAnimInstance::GetDynamicRightHandIKRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "GetDynamicRightHandIKRoot");

	Params::GBCharAnimInstance_GetDynamicRightHandIKRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharAnimInstance.GetMontageFromLinkedLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UAnimInstance>        InCurrentAnimLayerClass                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InMontageName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGBCharAnimInstance::GetMontageFromLinkedLayer(TSubclassOf<class UAnimInstance> InCurrentAnimLayerClass, class FName InMontageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "GetMontageFromLinkedLayer");

	Params::GBCharAnimInstance_GetMontageFromLinkedLayer Parms{};

	Parms.InCurrentAnimLayerClass = InCurrentAnimLayerClass;
	Parms.InMontageName = InMontageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharAnimInstance.GetTurningInPlace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBCharAnimInstance::GetTurningInPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstance", "GetTurningInPlace");

	Params::GBCharAnimInstance_GetTurningInPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIExtensionComponent.FindPawnExtensionComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBAIExtensionComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBAIExtensionComponent* UGBAIExtensionComponent::FindPawnExtensionComponent(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAIExtensionComponent", "FindPawnExtensionComponent");

	Params::GBAIExtensionComponent_FindPawnExtensionComponent Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIExtensionComponent.InitAI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       AIControllerTag                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIExtensionComponent::InitAI(const class FName AIControllerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIExtensionComponent", "InitAI");

	Params::GBAIExtensionComponent_InitAI Parms{};

	Parms.AIControllerTag = AIControllerTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIFunctionLibrary.ForgetAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAIPerceptionComponent*           PerceptionComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAIFunctionLibrary::ForgetAll(class UAIPerceptionComponent* PerceptionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAIFunctionLibrary", "ForgetAll");

	Params::GBAIFunctionLibrary_ForgetAll Parms{};

	Parms.PerceptionComponent = PerceptionComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIFunctionLibrary.GetAIControllersOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AAIController>        AIControllerClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AAIController*>*           OutAIControllers                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBAIFunctionLibrary::GetAIControllersOfClass(class UObject* WorldContextObject, TSubclassOf<class AAIController> AIControllerClass, TArray<class AAIController*>* OutAIControllers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAIFunctionLibrary", "GetAIControllersOfClass");

	Params::GBAIFunctionLibrary_GetAIControllersOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AIControllerClass = AIControllerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAIControllers != nullptr)
		*OutAIControllers = std::move(Parms.OutAIControllers);
}


// Function GroundBranch.GBAIFunctionLibrary.GetBlackboardValueAsDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBTNode*                          NodeOwner                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBlackboardKeySelector&    Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAs2d                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGBAIFunctionLibrary::GetBlackboardValueAsDirection(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, bool bAs2d)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAIFunctionLibrary", "GetBlackboardValueAsDirection");

	Params::GBAIFunctionLibrary_GetBlackboardValueAsDirection Parms{};

	Parms.NodeOwner = NodeOwner;
	Parms.Key = std::move(Key);
	Parms.bAs2d = bAs2d;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIFunctionLibrary.GetBlackboardValueAsLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBTNode*                          NodeOwner                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBlackboardKeySelector&    Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGBAIFunctionLibrary::GetBlackboardValueAsLocation(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAIFunctionLibrary", "GetBlackboardValueAsLocation");

	Params::GBAIFunctionLibrary_GetBlackboardValueAsLocation Parms{};

	Parms.NodeOwner = NodeOwner;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIFunctionLibrary.SpawnDefaultKytAI
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  SpawnRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ControllerOverride                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* UGBAIFunctionLibrary::SpawnDefaultKytAI(class UObject* WorldContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class UClass* Class_0, TSoftClassPtr<class UClass> ControllerOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAIFunctionLibrary", "SpawnDefaultKytAI");

	Params::GBAIFunctionLibrary_SpawnDefaultKytAI Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.Class_0 = Class_0;
	Parms.ControllerOverride = ControllerOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.UpdateGuardPointRadiusSphere
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bHideSphere                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIGuardPoint::UpdateGuardPointRadiusSphere(const bool bHideSphere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "UpdateGuardPointRadiusSphere");

	Params::GBAIGuardPoint_UpdateGuardPointRadiusSphere Parms{};

	Parms.bHideSphere = bHideSphere;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIGuardPoint.GetBaseViewRoation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBAIGuardPoint::GetBaseViewRoation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetBaseViewRoation");

	Params::GBAIGuardPoint_GetBaseViewRoation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetDeviation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetDeviation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetDeviation");

	Params::GBAIGuardPoint_GetDeviation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetGroupName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBAIGuardPoint::GetGroupName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetGroupName");

	Params::GBAIGuardPoint_GetGroupName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetGuardPointType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBGuardPointType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBGuardPointType AGBAIGuardPoint::GetGuardPointType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetGuardPointType");

	Params::GBAIGuardPoint_GetGuardPointType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetHoldDeviation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetHoldDeviation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetHoldDeviation");

	Params::GBAIGuardPoint_GetHoldDeviation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetHoldTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetHoldTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetHoldTime");

	Params::GBAIGuardPoint_GetHoldTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetMovementRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetMovementRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetMovementRadius");

	Params::GBAIGuardPoint_GetMovementRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetScanDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetScanDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetScanDuration");

	Params::GBAIGuardPoint_GetScanDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetSweepAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetSweepAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetSweepAngle");

	Params::GBAIGuardPoint_GetSweepAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIGuardPoint.GetTurnRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBAIGuardPoint::GetTurnRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIGuardPoint", "GetTurnRate");

	Params::GBAIGuardPoint_GetTurnRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIHotspot.SetHotspotName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewHotspotName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIHotspot::SetHotspotName(class FName NewHotspotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIHotspot", "SetHotspotName");

	Params::GBAIHotspot_SetHotspotName Parms{};

	Parms.NewHotspotName = NewHotspotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIHotspot.GetHotspotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBAIHotspot::GetHotspotName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIHotspot", "GetHotspotName");

	Params::GBAIHotspot_GetHotspotName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIObjectiveBase.EvaluateObjective
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGBAIObjectiveBase::EvaluateObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIObjectiveBase", "EvaluateObjective");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIObjectiveBase.GetObjectiveDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBAIObjectiveBase::GetObjectiveDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIObjectiveBase", "GetObjectiveDescription");

	Params::GBAIObjectiveBase_GetObjectiveDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIObjectiveGeneratorBase.GenerateObjectives
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UGBAIObjectiveBase*>*      Objectives                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBAIObjectiveGeneratorBase::GenerateObjectives(TArray<class UGBAIObjectiveBase*>* Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIObjectiveGeneratorBase", "GenerateObjectives");

	Params::GBAIObjectiveGeneratorBase_GenerateObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Objectives != nullptr)
		*Objectives = std::move(Parms.Objectives);
}


// Function GroundBranch.GBAIPatrolRoute.AddRecentlyUsedPatrolRoute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBAIPatrolRoute*                 PatrolRoute                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAIPatrolRoute::AddRecentlyUsedPatrolRoute(class AGBAIPatrolRoute* PatrolRoute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIPatrolRoute", "AddRecentlyUsedPatrolRoute");

	Params::GBAIPatrolRoute_AddRecentlyUsedPatrolRoute Parms{};

	Parms.PatrolRoute = PatrolRoute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIPatrolRoute.GenerateLinkedPatrolRoutes
// (Final, Native, Public, BlueprintCallable)

void AGBAIPatrolRoute::GenerateLinkedPatrolRoutes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIPatrolRoute", "GenerateLinkedPatrolRoutes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAIPatrolRoute.GetLinkedPatrolRoutes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AGBAIPatrolRoute*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBAIPatrolRoute*> AGBAIPatrolRoute::GetLinkedPatrolRoutes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIPatrolRoute", "GetLinkedPatrolRoutes");

	Params::GBAIPatrolRoute_GetLinkedPatrolRoutes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIPatrolRoute.GetNumberOfLinkedPatrolRoutes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBAIPatrolRoute::GetNumberOfLinkedPatrolRoutes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIPatrolRoute", "GetNumberOfLinkedPatrolRoutes");

	Params::GBAIPatrolRoute_GetNumberOfLinkedPatrolRoutes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAIPatrolRoute.GetRecentlyUsedPatrolRoutes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AGBAIPatrolRoute*>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AGBAIPatrolRoute*> AGBAIPatrolRoute::GetRecentlyUsedPatrolRoutes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAIPatrolRoute", "GetRecentlyUsedPatrolRoutes");

	Params::GBAIPatrolRoute_GetRecentlyUsedPatrolRoutes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISense_Hearing.RegisterNonAIListener
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           RegisteredActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector& NoiseOrigin, float Loudness)>OnNonAIListenerAlert                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ThresholdSoundIntensity                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RetriggerDelay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAISense_Hearing::RegisterNonAIListener(class AActor* RegisteredActor, TDelegate<void(const struct FVector& NoiseOrigin, float Loudness)> OnNonAIListenerAlert, float ThresholdSoundIntensity, float RetriggerDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISense_Hearing", "RegisterNonAIListener");

	Params::GBAISense_Hearing_RegisterNonAIListener Parms{};

	Parms.RegisteredActor = RegisteredActor;
	Parms.OnNonAIListenerAlert = OnNonAIListenerAlert;
	Parms.ThresholdSoundIntensity = ThresholdSoundIntensity;
	Parms.RetriggerDelay = RetriggerDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISense_Hearing.ReportNoiseEvent
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NoiseLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Loudness                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAISense_Hearing::ReportNoiseEvent(class UObject* WorldContextObject, const struct FVector& NoiseLocation, float Loudness, class AActor* Instigator, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISense_Hearing", "ReportNoiseEvent");

	Params::GBAISense_Hearing_ReportNoiseEvent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.NoiseLocation = std::move(NoiseLocation);
	Parms.Loudness = Loudness;
	Parms.Instigator = Instigator;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISense_Hearing.ReportNoiseEventDistance
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NoiseLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AudioSignalRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAISense_Hearing::ReportNoiseEventDistance(class UObject* WorldContextObject, const struct FVector& NoiseLocation, float AudioSignalRadius, class AActor* Instigator, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISense_Hearing", "ReportNoiseEventDistance");

	Params::GBAISense_Hearing_ReportNoiseEventDistance Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.NoiseLocation = std::move(NoiseLocation);
	Parms.AudioSignalRadius = AudioSignalRadius;
	Parms.Instigator = Instigator;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISense_Hearing.UnregisterNonAIListener
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           RegisteredActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAISense_Hearing::UnregisterNonAIListener(class AActor* RegisteredActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISense_Hearing", "UnregisterNonAIListener");

	Params::GBAISense_Hearing_UnregisterNonAIListener Parms{};

	Parms.RegisteredActor = RegisteredActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISense_Sight.ReportSightEvent
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Observer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SeenActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EventLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAISense_Sight::ReportSightEvent(class AActor* Observer, class AActor* SeenActor, const struct FVector& EventLocation, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISense_Sight", "ReportSightEvent");

	Params::GBAISense_Sight_ReportSightEvent Parms{};

	Parms.Observer = Observer;
	Parms.SeenActor = SeenActor;
	Parms.EventLocation = std::move(EventLocation);
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISettings.FlushConfigAfterSavingAISettings
// (Final, Native, Static, Public, BlueprintCallable)

void UGBAISettings::FlushConfigAfterSavingAISettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISettings", "FlushConfigAfterSavingAISettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISettings.GetAISettingsForSkillLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBAISettingsInfo                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBAISettingsInfo UGBAISettings::GetAISettingsForSkillLevel(int32 SkillLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISettings", "GetAISettingsForSkillLevel");

	Params::GBAISettings_GetAISettingsForSkillLevel Parms{};

	Parms.SkillLevel = SkillLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISettings.SetAISettingsForSkillLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   InSkillLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SettingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InFloat                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    inString                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFlushAfterSaving                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAISettings::SetAISettingsForSkillLevel(int32 InSkillLevel, class FName SettingName, const float InFloat, const class FString& inString, const bool bFlushAfterSaving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAISettings", "SetAISettingsForSkillLevel");

	Params::GBAISettings_SetAISettingsForSkillLevel Parms{};

	Parms.InSkillLevel = InSkillLevel;
	Parms.SettingName = SettingName;
	Parms.InFloat = InFloat;
	Parms.inString = std::move(inString);
	Parms.bFlushAfterSaving = bFlushAfterSaving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnManager.CleanUpAI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             AIControllerTag                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnManager::CleanUpAI(class FName AIControllerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnManager", "CleanUpAI");

	Params::GBAISpawnManager_CleanUpAI Parms{};

	Parms.AIControllerTag = AIControllerTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnManager.CreateAIOverDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AGBAISpawnPoint*>&   OrderedSpawnPoints                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnManager::CreateAIOverDuration(float Duration, int32 Count, const TArray<class AGBAISpawnPoint*>& OrderedSpawnPoints, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnManager", "CreateAIOverDuration");

	Params::GBAISpawnManager_CreateAIOverDuration Parms{};

	Parms.Duration = Duration;
	Parms.Count = Count;
	Parms.OrderedSpawnPoints = std::move(OrderedSpawnPoints);
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnManager.CreateOverDurationTimer
// (Final, Native, Protected)

void AGBAISpawnManager::CreateOverDurationTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnManager", "CreateOverDurationTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnManager.GetAIControllers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBKytController>     ControllerClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBKytController*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBKytController*> AGBAISpawnManager::GetAIControllers(TSubclassOf<class AGBKytController> ControllerClass, class FName Tag, uint8 TeamId, uint8 SquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnManager", "GetAIControllers");

	Params::GBAISpawnManager_GetAIControllers Parms{};

	Parms.ControllerClass = ControllerClass;
	Parms.Tag = Tag;
	Parms.TeamId = TeamId;
	Parms.SquadId = SquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnManager.GetGenericAIControllers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AController>          ControllerClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AController*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AController*> AGBAISpawnManager::GetGenericAIControllers(TSubclassOf<class AController> ControllerClass, class FName Tag, uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnManager", "GetGenericAIControllers");

	Params::GBAISpawnManager_GetGenericAIControllers Parms{};

	Parms.ControllerClass = ControllerClass;
	Parms.Tag = Tag;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnManager.KillAI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBKytController*                 AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnManager::KillAI(class AGBKytController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnManager", "KillAI");

	Params::GBAISpawnManager_KillAI Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.ApplyAITagsToCharacter
// (Final, Native, Protected)
// Parameters:
// class AGBCharacter*                     NewCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::ApplyAITagsToCharacter(class AGBCharacter* NewCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "ApplyAITagsToCharacter");

	Params::GBAISpawnPoint_ApplyAITagsToCharacter Parms{};

	Parms.NewCharacter = NewCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.CreateAI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::CreateAI(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "CreateAI");

	Params::GBAISpawnPoint_CreateAI Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.CreateCharacter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftClassPtr<class UClass>&      DesiredCharacterClass                                  (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBAISpawnPoint::CreateCharacter(const TSoftClassPtr<class UClass>& DesiredCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "CreateCharacter");

	Params::GBAISpawnPoint_CreateCharacter Parms{};

	Parms.DesiredCharacterClass = DesiredCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.EnsureCharacterClassesLoaded
// (Final, Native, Protected)

void AGBAISpawnPoint::EnsureCharacterClassesLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "EnsureCharacterClassesLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.GetLoadoutInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* AGBAISpawnPoint::GetLoadoutInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetLoadoutInfo");

	Params::GBAISpawnPoint_GetLoadoutInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.OnAIInitializedHandler
// (Final, Native, Protected)
// Parameters:
// class AGBKytController*                 NewAIController                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::OnAIInitializedHandler(class AGBKytController* NewAIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "OnAIInitializedHandler");

	Params::GBAISpawnPoint_OnAIInitializedHandler Parms{};

	Parms.NewAIController = NewAIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.OnInitialTimeOfDayChanged
// (Final, Native, Private)
// Parameters:
// class AGBSky*                           SkyActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::OnInitialTimeOfDayChanged(class AGBSky* SkyActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "OnInitialTimeOfDayChanged");

	Params::GBAISpawnPoint_OnInitialTimeOfDayChanged Parms{};

	Parms.SkyActor = SkyActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.SetLoadoutFileName
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewLoadoutFileName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::SetLoadoutFileName(const class FString& NewLoadoutFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "SetLoadoutFileName");

	Params::GBAISpawnPoint_SetLoadoutFileName Parms{};

	Parms.NewLoadoutFileName = std::move(NewLoadoutFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.SetSquadId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSquadId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::SetSquadId(int32 NewSquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "SetSquadId");

	Params::GBAISpawnPoint_SetSquadId Parms{};

	Parms.NewSquadId = NewSquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.SetSquadOrders
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewSquadOrders                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISpawnPoint::SetSquadOrders(class FName NewSquadOrders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "SetSquadOrders");

	Params::GBAISpawnPoint_SetSquadOrders Parms{};

	Parms.NewSquadOrders = NewSquadOrders;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.UpdateShapeColour
// (Final, Native, Public, BlueprintCallable)

void AGBAISpawnPoint::UpdateShapeColour()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "UpdateShapeColour");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISpawnPoint.GetAIControllerClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> AGBAISpawnPoint::GetAIControllerClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetAIControllerClass");

	Params::GBAISpawnPoint_GetAIControllerClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.GetIsActiveAtCurrentTimeOfDay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAISpawnPoint::GetIsActiveAtCurrentTimeOfDay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetIsActiveAtCurrentTimeOfDay");

	Params::GBAISpawnPoint_GetIsActiveAtCurrentTimeOfDay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.GetIsDaySpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAISpawnPoint::GetIsDaySpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetIsDaySpawn");

	Params::GBAISpawnPoint_GetIsDaySpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.GetIsNightSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAISpawnPoint::GetIsNightSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetIsNightSpawn");

	Params::GBAISpawnPoint_GetIsNightSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.GetLoadoutFileName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBAISpawnPoint::GetLoadoutFileName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetLoadoutFileName");

	Params::GBAISpawnPoint_GetLoadoutFileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.GetSquadId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBAISpawnPoint::GetSquadId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetSquadId");

	Params::GBAISpawnPoint_GetSquadId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISpawnPoint.GetSquadOrders
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBAISpawnPoint::GetSquadOrders() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISpawnPoint", "GetSquadOrders");

	Params::GBAISpawnPoint_GetSquadOrders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.AddSearchedLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::AddSearchedLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "AddSearchedLocation");

	Params::GBAISquad_AddSearchedLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.AddSquadMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::AddSquadMember(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "AddSquadMember");

	Params::GBAISquad_AddSquadMember Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.ClearSearchedLocations
// (Final, Native, Public, BlueprintCallable)

void AGBAISquad::ClearSearchedLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "ClearSearchedLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.EmptySquad
// (Final, Native, Public, BlueprintCallable)

void AGBAISquad::EmptySquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "EmptySquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.FindNearestPatrolRoute
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBAIPatrolRoute*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAIPatrolRoute* AGBAISquad::FindNearestPatrolRoute(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "FindNearestPatrolRoute");

	Params::GBAISquad_FindNearestPatrolRoute Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetNextGuardPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBKytController*                 AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBAIGuardPoint*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAIGuardPoint* AGBAISquad::GetNextGuardPoint(class AGBKytController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetNextGuardPoint");

	Params::GBAISquad_GetNextGuardPoint Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetNextPatrolPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBAISquad::GetNextPatrolPosition(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetNextPatrolPosition");

	Params::GBAISquad_GetNextPatrolPosition Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.InternalUpdateSquadSeparationWeights
// (Final, Native, Protected)

void AGBAISquad::InternalUpdateSquadSeparationWeights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "InternalUpdateSquadSeparationWeights");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.RemoveSquadMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::RemoveSquadMember(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "RemoveSquadMember");

	Params::GBAISquad_RemoveSquadMember Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.SetAIStateBySquadOrders
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBKytController*                 AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAISquad::SetAIStateBySquadOrders(class AGBKytController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetAIStateBySquadOrders");

	Params::GBAISquad_SetAIStateBySquadOrders Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.SetGuardPointVisitedBy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBAIGuardPoint*                  GuardPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKytController*                 AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::SetGuardPointVisitedBy(class AGBAIGuardPoint* GuardPoint, class AGBKytController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetGuardPointVisitedBy");

	Params::GBAISquad_SetGuardPointVisitedBy Parms{};

	Parms.GuardPoint = GuardPoint;
	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.SetPatrolRoute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBAIPatrolRoute*                 NewPatrolRoute                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::SetPatrolRoute(class AGBAIPatrolRoute* NewPatrolRoute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetPatrolRoute");

	Params::GBAISquad_SetPatrolRoute Parms{};

	Parms.NewPatrolRoute = NewPatrolRoute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.SetSquadId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewSquadId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::SetSquadId(uint8 NewSquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetSquadId");

	Params::GBAISquad_SetSquadId Parms{};

	Parms.NewSquadId = NewSquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.SetSquadLeader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::SetSquadLeader(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetSquadLeader");

	Params::GBAISquad_SetSquadLeader Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.SetSquadOrders
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewOrders                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::SetSquadOrders(class FName NewOrders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetSquadOrders");

	Params::GBAISquad_SetSquadOrders Parms{};

	Parms.NewOrders = NewOrders;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.SetSquadOrdersTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAISquad::SetSquadOrdersTarget(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "SetSquadOrdersTarget");

	Params::GBAISquad_SetSquadOrdersTarget Parms{};

	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.UpdateSquadObjective
// (Native, Event, Protected, BlueprintEvent)

void AGBAISquad::UpdateSquadObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "UpdateSquadObjective");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAISquad.GetPatrolRoute
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBAIPatrolRoute*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAIPatrolRoute* AGBAISquad::GetPatrolRoute() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetPatrolRoute");

	Params::GBAISquad_GetPatrolRoute Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSearchedLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> AGBAISquad::GetSearchedLocations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSearchedLocations");

	Params::GBAISquad_GetSearchedLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSquadId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBAISquad::GetSquadId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSquadId");

	Params::GBAISquad_GetSquadId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSquadLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* AGBAISquad::GetSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSquadLeader");

	Params::GBAISquad_GetSquadLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSquadMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AController*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AController*> AGBAISquad::GetSquadMembers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSquadMembers");

	Params::GBAISquad_GetSquadMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSquadOrders
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBAISquad::GetSquadOrders() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSquadOrders");

	Params::GBAISquad_GetSquadOrders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSquadOrdersTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGBAISquad::GetSquadOrdersTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSquadOrdersTarget");

	Params::GBAISquad_GetSquadOrdersTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.GetSquadSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBAISquad::GetSquadSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "GetSquadSize");

	Params::GBAISquad_GetSquadSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAISquad.IsSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAISquad::IsSquadMember(class AController* Controller) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAISquad", "IsSquadMember");

	Params::GBAISquad_IsSquadMember Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerLoadingScreenComponent.HideLoadingScreen
// (Final, Native, Public, BlueprintCallable)

void UGBPlayerLoadingScreenComponent::HideLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerLoadingScreenComponent", "HideLoadingScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerLoadingScreenComponent.SetCustomLoadingScreenText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewText                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerLoadingScreenComponent::SetCustomLoadingScreenText(const class FString& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerLoadingScreenComponent", "SetCustomLoadingScreenText");

	Params::GBPlayerLoadingScreenComponent_SetCustomLoadingScreenText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerLoadingScreenComponent.SetLoadingScreenInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ServerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MissionTitle                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MapTitle                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MapAuthor                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MissionAuthor                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GameModeAuthor                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   GameModeModID                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bMapModded                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bMissionModded                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerLoadingScreenComponent::SetLoadingScreenInfo(const class FString& ServerName, const class FString& MissionTitle, const class FString& MapTitle, const class FString& MapAuthor, const class FString& MissionAuthor, const class FString& GameModeAuthor, const struct FUInt64& GameModeModID, const bool bMapModded, const bool bMissionModded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerLoadingScreenComponent", "SetLoadingScreenInfo");

	Params::GBPlayerLoadingScreenComponent_SetLoadingScreenInfo Parms{};

	Parms.ServerName = std::move(ServerName);
	Parms.MissionTitle = std::move(MissionTitle);
	Parms.MapTitle = std::move(MapTitle);
	Parms.MapAuthor = std::move(MapAuthor);
	Parms.MissionAuthor = std::move(MissionAuthor);
	Parms.GameModeAuthor = std::move(GameModeAuthor);
	Parms.GameModeModID = std::move(GameModeModID);
	Parms.bMapModded = bMapModded;
	Parms.bMissionModded = bMissionModded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerLoadingScreenComponent.ShowLoadingScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewLoadingScreenReason                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerLoadingScreenComponent::ShowLoadingScreen(const class FString& NewLoadingScreenReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerLoadingScreenComponent", "ShowLoadingScreen");

	Params::GBPlayerLoadingScreenComponent_ShowLoadingScreen Parms{};

	Parms.NewLoadingScreenReason = std::move(NewLoadingScreenReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPouch.FillWith
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPrimaryAssetId&           InvItemId                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           InvSkinId                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPouch::FillWith(const struct FPrimaryAssetId& InvItemId, const struct FPrimaryAssetId& InvSkinId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPouch", "FillWith");

	Params::GBPouch_FillWith Parms{};

	Parms.InvItemId = std::move(InvItemId);
	Parms.InvSkinId = std::move(InvSkinId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPouch.GetFillCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPouch::GetFillCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPouch", "GetFillCount");

	Params::GBPouch_GetFillCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmoPouch.GetBestMatchingAmmoPouchId
// (Final, Native, Static, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const TArray<struct FPrimaryAssetId>&   PouchItemAssetIds                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EGBAmmoPouchModularity                  DesiredModularity                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           CurrentAmmoPouchId                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId*                 OutAmmoPouchId                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBAmmoPouch::GetBestMatchingAmmoPouchId(const TArray<struct FPrimaryAssetId>& PouchItemAssetIds, EGBAmmoPouchModularity DesiredModularity, const struct FPrimaryAssetId& CurrentAmmoPouchId, struct FPrimaryAssetId* OutAmmoPouchId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAmmoPouch", "GetBestMatchingAmmoPouchId");

	Params::GBAmmoPouch_GetBestMatchingAmmoPouchId Parms{};

	Parms.PouchItemAssetIds = std::move(PouchItemAssetIds);
	Parms.DesiredModularity = DesiredModularity;
	Parms.CurrentAmmoPouchId = std::move(CurrentAmmoPouchId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAmmoPouchId != nullptr)
		*OutAmmoPouchId = std::move(Parms.OutAmmoPouchId);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmoPouch.DelayedInit
// (Final, Native, Protected)

void AGBAmmoPouch::DelayedInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmoPouch", "DelayedInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmoPouch.InitReplacement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBAmmoPouchModularity                  NewModularity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAmmoPouch::InitReplacement(EGBAmmoPouchModularity NewModularity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmoPouch", "InitReplacement");

	Params::GBAmmoPouch_InitReplacement Parms{};

	Parms.NewModularity = NewModularity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmoPouch.InventoryItemAdded
// (Final, Native, Protected)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       InvItem                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAmmoPouch::InventoryItemAdded(class AGBCharacter* Character, class AGBInvItem* InvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmoPouch", "InventoryItemAdded");

	Params::GBAmmoPouch_InventoryItemAdded Parms{};

	Parms.Character = Character;
	Parms.InvItem = InvItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmoPouch.OnLoadReplacementAmmoPouchAssetId
// (Final, Native, Protected)

void AGBAmmoPouch::OnLoadReplacementAmmoPouchAssetId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmoPouch", "OnLoadReplacementAmmoPouchAssetId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmoPouch.SetModularity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBAmmoPouchModularity                  NewModularity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBAmmoPouch::SetModularity(EGBAmmoPouchModularity NewModularity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmoPouch", "SetModularity");

	Params::GBAmmoPouch_SetModularity Parms{};

	Parms.NewModularity = NewModularity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropPayloadBase.GetInvItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBInvItemDragDropPayloadBase::GetInvItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayloadBase", "GetInvItem");

	Params::GBInvItemDragDropPayloadBase_GetInvItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemDragDropPayloadBase.GetRootInvItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBInvItemDragDropPayloadBase::GetRootInvItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayloadBase", "GetRootInvItem");

	Params::GBInvItemDragDropPayloadBase_GetRootInvItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemDragDropPayload.Init
// (Final, Native, Public, BlueprintCallable)

void UGBInvItemDragDropPayload::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayload", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropPayload.InitModInfo
// (Native, Public, BlueprintCallable)

void UGBInvItemDragDropPayload::InitModInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayload", "InitModInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropPayload.LoadingAssetsComplete
// (Final, Native, Protected)

void UGBInvItemDragDropPayload::LoadingAssetsComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayload", "LoadingAssetsComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropPayload.OnInit
// (Native, Event, Public, BlueprintEvent)

void UGBInvItemDragDropPayload::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayload", "OnInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropPayload.OnLoadAssetsComplete
// (Native, Event, Protected, BlueprintEvent)

void UGBInvItemDragDropPayload::OnLoadAssetsComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayload", "OnLoadAssetsComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropPayload.SetInvItemSkinAssetId
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewInvItemSkinAssetId                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemDragDropPayload::SetInvItemSkinAssetId(const struct FPrimaryAssetId& NewInvItemSkinAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropPayload", "SetInvItemSkinAssetId");

	Params::GBInvItemDragDropPayload_SetInvItemSkinAssetId Parms{};

	Parms.NewInvItemSkinAssetId = std::move(NewInvItemSkinAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerStart.IsValidFor
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerStart::IsValidFor(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerStart", "IsValidFor");

	Params::GBPlayerStart_IsValidFor Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerStart.SetGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewGroupName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerStart::SetGroup(class FName NewGroupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerStart", "SetGroup");

	Params::GBPlayerStart_SetGroup Parms{};

	Parms.NewGroupName = NewGroupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerStart.GetGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBPlayerStart::GetGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerStart", "GetGroup");

	Params::GBPlayerStart_GetGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerStart.GetStartingStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBPlayerStance                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBPlayerStance AGBPlayerStart::GetStartingStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerStart", "GetStartingStance");

	Params::GBPlayerStart_GetStartingStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPouchDragDropPayload.GetFillWithClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBInvItem>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBInvItem> UGBPouchDragDropPayload::GetFillWithClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPouchDragDropPayload", "GetFillWithClass");

	Params::GBPouchDragDropPayload_GetFillWithClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmunitionFeedComponent.DecodeKit
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UVaRestJsonObject*                ItemAsJson                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAmmunitionFeedComponent::DecodeKit(class UVaRestJsonObject* ItemAsJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "DecodeKit");

	Params::GBAmmunitionFeedComponent_DecodeKit Parms{};

	Parms.ItemAsJson = ItemAsJson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmunitionFeedComponent.EncodeKit
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UVaRestJsonObject*                ItemAsJson                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAmmunitionFeedComponent::EncodeKit(class UVaRestJsonObject* ItemAsJson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "EncodeKit");

	Params::GBAmmunitionFeedComponent_EncodeKit Parms{};

	Parms.ItemAsJson = ItemAsJson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmunitionFeedComponent.Fill
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGBAmmunitionFeedComponent::Fill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "Fill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmunitionFeedComponent.SetCurrentAmmoId
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewCurrentAmmoId                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBAmmunitionFeedComponent::SetCurrentAmmoId(const struct FPrimaryAssetId& NewCurrentAmmoId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "SetCurrentAmmoId");

	Params::GBAmmunitionFeedComponent_SetCurrentAmmoId Parms{};

	Parms.NewCurrentAmmoId = std::move(NewCurrentAmmoId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmunitionFeedComponent.UseRound
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGBAmmunitionFeedComponent::UseRound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "UseRound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAmmunitionFeedComponent.GetBulletProjectileClass
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletProjectile>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletProjectile> UGBAmmunitionFeedComponent::GetBulletProjectileClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "GetBulletProjectileClass");

	Params::GBAmmunitionFeedComponent_GetBulletProjectileClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmunitionFeedComponent.GetCurrentAmmoId
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId UGBAmmunitionFeedComponent::GetCurrentAmmoId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "GetCurrentAmmoId");

	Params::GBAmmunitionFeedComponent_GetCurrentAmmoId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmunitionFeedComponent.GetTotalAvailableCount
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBAmmunitionFeedComponent::GetTotalAvailableCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "GetTotalAvailableCount");

	Params::GBAmmunitionFeedComponent_GetTotalAvailableCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmunitionFeedComponent.IsEmpty
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAmmunitionFeedComponent::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "IsEmpty");

	Params::GBAmmunitionFeedComponent_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAmmunitionFeedComponent.ShouldMagicallyCreateAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGBCharacter*               Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAmmunitionFeedComponent::ShouldMagicallyCreateAmmo(const class AGBCharacter* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBAmmunitionFeedComponent", "ShouldMagicallyCreateAmmo");

	Params::GBAmmunitionFeedComponent_ShouldMagicallyCreateAmmo Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAnimFunctionLibrary.FindPositionFromDistanceCurve
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const float&                            Distance                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimSequence                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBAnimFunctionLibrary::FindPositionFromDistanceCurve(const float& Distance, class UAnimSequenceBase* InAnimSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAnimFunctionLibrary", "FindPositionFromDistanceCurve");

	Params::GBAnimFunctionLibrary_FindPositionFromDistanceCurve Parms{};

	Parms.Distance = Distance;
	Parms.InAnimSequence = InAnimSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAnimFunctionLibrary.GetBoneTransformAtTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseRawDataOnly                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGBAnimFunctionLibrary::GetBoneTransformAtTime(class UAnimSequence* AnimSequence, float AnimTime, class FName BoneName, bool bUseRawDataOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAnimFunctionLibrary", "GetBoneTransformAtTime");

	Params::GBAnimFunctionLibrary_GetBoneTransformAtTime Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.AnimTime = AnimTime;
	Parms.BoneName = BoneName;
	Parms.bUseRawDataOnly = bUseRawDataOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAnimFunctionLibrary.GetRateForPlayTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                TargetSeq                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBAnimFunctionLibrary::GetRateForPlayTime(class UAnimSequenceBase* TargetSeq, float PlayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAnimFunctionLibrary", "GetRateForPlayTime");

	Params::GBAnimFunctionLibrary_GetRateForPlayTime Parms{};

	Parms.TargetSeq = TargetSeq;
	Parms.PlayTime = PlayTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAnimFunctionLibrary.GetSequenceLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                TargetSeq                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBAnimFunctionLibrary::GetSequenceLength(class UAnimSequenceBase* TargetSeq)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAnimFunctionLibrary", "GetSequenceLength");

	Params::GBAnimFunctionLibrary_GetSequenceLength Parms{};

	Parms.TargetSeq = TargetSeq;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAnimFunctionLibrary.TransformFromBoneSpace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector*                         OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGBAnimFunctionLibrary::TransformFromBoneSpace(class UAnimInstance* Target, class FName BoneName, const struct FVector& position, const struct FRotator& Rotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAnimFunctionLibrary", "TransformFromBoneSpace");

	Params::GBAnimFunctionLibrary_TransformFromBoneSpace Parms{};

	Parms.Target = Target;
	Parms.BoneName = BoneName;
	Parms.position = std::move(position);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function GroundBranch.GBAnimFunctionLibrary.TransformToBoneSpace
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector*                         OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGBAnimFunctionLibrary::TransformToBoneSpace(class UAnimInstance* Target, class FName BoneName, const struct FVector& position, const struct FRotator& Rotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAnimFunctionLibrary", "TransformToBoneSpace");

	Params::GBAnimFunctionLibrary_TransformToBoneSpace Parms{};

	Parms.Target = Target;
	Parms.BoneName = BoneName;
	Parms.position = std::move(position);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyEnum
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   InEnumAsByte                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyEnum(uint8 InEnumAsByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyEnum");

	Params::GBAnimNotifyInterface_NotifyEnum Parms{};

	Parms.InEnumAsByte = InEnumAsByte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyName(class FName InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyName");

	Params::GBAnimNotifyInterface_NotifyName Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyStateBeginEnum
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   InEnumAsByte                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyStateBeginEnum(uint8 InEnumAsByte, float TotalDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyStateBeginEnum");

	Params::GBAnimNotifyInterface_NotifyStateBeginEnum Parms{};

	Parms.InEnumAsByte = InEnumAsByte;
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyStateBeginName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyStateBeginName(class FName InName, float TotalDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyStateBeginName");

	Params::GBAnimNotifyInterface_NotifyStateBeginName Parms{};

	Parms.InName = InName;
	Parms.TotalDuration = TotalDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyStateEndEnum
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   InEnumAsByte                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyStateEndEnum(uint8 InEnumAsByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyStateEndEnum");

	Params::GBAnimNotifyInterface_NotifyStateEndEnum Parms{};

	Parms.InEnumAsByte = InEnumAsByte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyStateEndName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyStateEndName(class FName InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyStateEndName");

	Params::GBAnimNotifyInterface_NotifyStateEndName Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyStateTickEnum
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   InEnumAsByte                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyStateTickEnum(uint8 InEnumAsByte, float FrameDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyStateTickEnum");

	Params::GBAnimNotifyInterface_NotifyStateTickEnum Parms{};

	Parms.InEnumAsByte = InEnumAsByte;
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAnimNotifyInterface.NotifyStateTickName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FrameDeltaTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBAnimNotifyInterface::NotifyStateTickName(class FName InName, float FrameDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBAnimNotifyInterface", "NotifyStateTickName");

	Params::GBAnimNotifyInterface_NotifyStateTickName Parms{};

	Parms.InName = InName;
	Parms.FrameDeltaTime = FrameDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class UObject>&    SoftObjectPtr                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UObject* LoadedAsset)>OnAsyncLoadAssetComplete                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBAssetManager::BlueprintAsyncLoadAsset(const TSoftObjectPtr<class UObject>& SoftObjectPtr, TDelegate<void(class UObject* LoadedAsset)> OnAsyncLoadAssetComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManager", "BlueprintAsyncLoadAsset");

	Params::GBAssetManager_BlueprintAsyncLoadAsset Parms{};

	Parms.SoftObjectPtr = SoftObjectPtr;
	Parms.OnAsyncLoadAssetComplete = OnAsyncLoadAssetComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAssetPath
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSoftObjectPath&           SoftObjectPath                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UObject* LoadedAsset)>OnAsyncLoadAssetComplete                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBAssetManager::BlueprintAsyncLoadAssetPath(const struct FSoftObjectPath& SoftObjectPath, TDelegate<void(class UObject* LoadedAsset)> OnAsyncLoadAssetComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManager", "BlueprintAsyncLoadAssetPath");

	Params::GBAssetManager_BlueprintAsyncLoadAssetPath Parms{};

	Parms.SoftObjectPath = std::move(SoftObjectPath);
	Parms.OnAsyncLoadAssetComplete = OnAsyncLoadAssetComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAssetPaths
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FSoftObjectPath>&   SoftObjectPaths                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class UObject*>& LoadedAssets)>OnAsyncLoadAssetsComplete                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBAssetManager::BlueprintAsyncLoadAssetPaths(const TArray<struct FSoftObjectPath>& SoftObjectPaths, TDelegate<void(const TArray<class UObject*>& LoadedAssets)> OnAsyncLoadAssetsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManager", "BlueprintAsyncLoadAssetPaths");

	Params::GBAssetManager_BlueprintAsyncLoadAssetPaths Parms{};

	Parms.SoftObjectPaths = std::move(SoftObjectPaths);
	Parms.OnAsyncLoadAssetsComplete = OnAsyncLoadAssetsComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<TSoftObjectPtr<class UObject>>&SoftObjectPtrs                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class UObject*>& LoadedAssets)>OnAsyncLoadAssetsComplete                              (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBAssetManager::BlueprintAsyncLoadAssets(const TArray<TSoftObjectPtr<class UObject>>& SoftObjectPtrs, TDelegate<void(const TArray<class UObject*>& LoadedAssets)> OnAsyncLoadAssetsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManager", "BlueprintAsyncLoadAssets");

	Params::GBAssetManager_BlueprintAsyncLoadAssets Parms{};

	Parms.SoftObjectPtrs = std::move(SoftObjectPtrs);
	Parms.OnAsyncLoadAssetsComplete = OnAsyncLoadAssetsComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadClassAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftClassPtr<class UClass>&      SoftClassPtr                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UClass* LoadedClass)>OnAsyncLoadClassAssetComplete                          (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBAssetManager::BlueprintAsyncLoadClassAsset(const TSoftClassPtr<class UClass>& SoftClassPtr, TDelegate<void(class UClass* LoadedClass)> OnAsyncLoadClassAssetComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManager", "BlueprintAsyncLoadClassAsset");

	Params::GBAssetManager_BlueprintAsyncLoadClassAsset Parms{};

	Parms.SoftClassPtr = SoftClassPtr;
	Parms.OnAsyncLoadClassAssetComplete = OnAsyncLoadClassAssetComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManager.BlueprintAsyncLoadClassAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<TSoftClassPtr<class UClass>>&SoftClassPtrs                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class UClass*>& LoadedClasses)>OnAsyncLoadClassAssetsComplete                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBAssetManager::BlueprintAsyncLoadClassAssets(const TArray<TSoftClassPtr<class UClass>>& SoftClassPtrs, TDelegate<void(const TArray<class UClass*>& LoadedClasses)> OnAsyncLoadClassAssetsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManager", "BlueprintAsyncLoadClassAssets");

	Params::GBAssetManager_BlueprintAsyncLoadClassAssets Parms{};

	Parms.SoftClassPtrs = std::move(SoftClassPtrs);
	Parms.OnAsyncLoadClassAssetsComplete = OnAsyncLoadClassAssetsComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.Array_GetARSFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::Array_GetARSFromPrimaryAsset(const TArray<int32>& TargetArray, const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "Array_GetARSFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_Array_GetARSFromPrimaryAsset Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.Conv_PrimaryAssetTypeToName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPrimaryAssetType&         PrimaryAssetType                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBAssetManagerFunctionLibrary::Conv_PrimaryAssetTypeToName(const struct FPrimaryAssetType& PrimaryAssetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "Conv_PrimaryAssetTypeToName");

	Params::GBAssetManagerFunctionLibrary_Conv_PrimaryAssetTypeToName Parms{};

	Parms.PrimaryAssetType = std::move(PrimaryAssetType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSBoolFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutBool                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSBoolFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, bool* bOutBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSBoolFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSBoolFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutBool != nullptr)
		*bOutBool = Parms.bOutBool;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSEnumAsByteFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    EnumName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  OutByte                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSEnumAsByteFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, const class FString& EnumName, class FName TagKey, uint8* OutByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSEnumAsByteFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSEnumAsByteFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.EnumName = std::move(EnumName);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutByte != nullptr)
		*OutByte = Parms.OutByte;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSFloatFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutFloat                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSFloatFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, float* OutFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSFloatFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSFloatFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFloat != nullptr)
		*OutFloat = Parms.OutFloat;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSIntFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutInt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSIntFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, int32* OutInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSIntFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSIntFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt != nullptr)
		*OutInt = Parms.OutInt;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSNameFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSNameFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, class FName* OutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSNameFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSNameFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutName != nullptr)
		*OutName = Parms.OutName;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSSoftObjectPtrFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>*          OutSoftObjectPtr                                       (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSSoftObjectPtrFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, TSoftObjectPtr<class UObject>* OutSoftObjectPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSSoftObjectPtrFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSSoftObjectPtrFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSoftObjectPtr != nullptr)
		*OutSoftObjectPtr = Parms.OutSoftObjectPtr;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSStringFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSStringFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, class FString* OutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSStringFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSStringFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSStructFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGBDummyStruct&            Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSStructFromPrimaryAsset(const struct FGBDummyStruct& Value, const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSStructFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSStructFromPrimaryAsset Parms{};

	Parms.Value = std::move(Value);
	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetARSTextFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            OutText                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetARSTextFromPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetARSTextFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_GetARSTextFromPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetBundlesToLoad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UGBAssetManagerFunctionLibrary::GetBundlesToLoad(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetBundlesToLoad");

	Params::GBAssetManagerFunctionLibrary_GetBundlesToLoad Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetFallbackInvItemAndSkin
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     InvItemTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId*                 OutItemAssetId                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId*                 OutItemSkinId                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetFallbackInvItemAndSkin(const class FName& ProfileName, const struct FGameplayTagContainer& InvItemTags, struct FPrimaryAssetId* OutItemAssetId, struct FPrimaryAssetId* OutItemSkinId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetFallbackInvItemAndSkin");

	Params::GBAssetManagerFunctionLibrary_GetFallbackInvItemAndSkin Parms{};

	Parms.ProfileName = ProfileName;
	Parms.InvItemTags = std::move(InvItemTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItemAssetId != nullptr)
		*OutItemAssetId = std::move(Parms.OutItemAssetId);

	if (OutItemSkinId != nullptr)
		*OutItemSkinId = std::move(Parms.OutItemSkinId);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetFirstValidInvItemSkinId
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId UGBAssetManagerFunctionLibrary::GetFirstValidInvItemSkinId(const class FName& ProfileName, const struct FGameplayTag& InvItemSkinTypeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetFirstValidInvItemSkinId");

	Params::GBAssetManagerFunctionLibrary_GetFirstValidInvItemSkinId Parms{};

	Parms.ProfileName = ProfileName;
	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetGameplayTagContainer
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AssetDataTag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBAssetManagerFunctionLibrary::GetGameplayTagContainer(const struct FPrimaryAssetId& PrimaryAssetId, class FName AssetDataTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetGameplayTagContainer");

	Params::GBAssetManagerFunctionLibrary_GetGameplayTagContainer Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.AssetDataTag = AssetDataTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemAssetIds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     InvItemTags                                            (Parm, NativeAccessSpecifierPublic)
// EGBInvItemTagsCheckType                 InvItemTagsCheckType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     ExcludeInvItemTags                                     (Parm, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId>*         OutItemAssetIds                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBAssetManagerFunctionLibrary::GetInvItemAssetIds(const struct FGameplayTagContainer& InvItemTags, EGBInvItemTagsCheckType InvItemTagsCheckType, const struct FGameplayTagContainer& ExcludeInvItemTags, TArray<struct FPrimaryAssetId>* OutItemAssetIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemAssetIds");

	Params::GBAssetManagerFunctionLibrary_GetInvItemAssetIds Parms{};

	Parms.InvItemTags = std::move(InvItemTags);
	Parms.InvItemTagsCheckType = InvItemTagsCheckType;
	Parms.ExcludeInvItemTags = std::move(ExcludeInvItemTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItemAssetIds != nullptr)
		*OutItemAssetIds = std::move(Parms.OutItemAssetIds);
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinIdByTypeAndName
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinNameTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId UGBAssetManagerFunctionLibrary::GetInvItemSkinIdByTypeAndName(const struct FGameplayTag& InvItemSkinTypeTag, const struct FGameplayTag& InvItemSkinNameTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemSkinIdByTypeAndName");

	Params::GBAssetManagerFunctionLibrary_GetInvItemSkinIdByTypeAndName Parms{};

	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);
	Parms.InvItemSkinNameTag = std::move(InvItemSkinNameTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinInfoByNameTag
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              InvItemSkinNameTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId*                 OutSkinAssetId                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::GetInvItemSkinInfoByNameTag(const struct FGameplayTag& InvItemSkinNameTag, struct FPrimaryAssetId* OutSkinAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemSkinInfoByNameTag");

	Params::GBAssetManagerFunctionLibrary_GetInvItemSkinInfoByNameTag Parms{};

	Parms.InvItemSkinNameTag = std::move(InvItemSkinNameTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSkinAssetId != nullptr)
		*OutSkinAssetId = std::move(Parms.OutSkinAssetId);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinNameTag
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           InvItemSkinAssetId                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBAssetManagerFunctionLibrary::GetInvItemSkinNameTag(const struct FPrimaryAssetId& InvItemSkinAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemSkinNameTag");

	Params::GBAssetManagerFunctionLibrary_GetInvItemSkinNameTag Parms{};

	Parms.InvItemSkinAssetId = std::move(InvItemSkinAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemSkinTypeTag
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           InvItemAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBAssetManagerFunctionLibrary::GetInvItemSkinTypeTag(const struct FPrimaryAssetId& InvItemAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemSkinTypeTag");

	Params::GBAssetManagerFunctionLibrary_GetInvItemSkinTypeTag Parms{};

	Parms.InvItemAssetId = std::move(InvItemAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemTags
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPrimaryAssetId&           ItemAssetId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBAssetManagerFunctionLibrary::GetInvItemTags(const struct FPrimaryAssetId& ItemAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemTags");

	Params::GBAssetManagerFunctionLibrary_GetInvItemTags Parms{};

	Parms.ItemAssetId = std::move(ItemAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetInvItemTypeTag
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPrimaryAssetId&           ItemAssetId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBAssetManagerFunctionLibrary::GetInvItemTypeTag(const struct FPrimaryAssetId& ItemAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetInvItemTypeTag");

	Params::GBAssetManagerFunctionLibrary_GetInvItemTypeTag Parms{};

	Parms.ItemAssetId = std::move(ItemAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetPrimaryAssetIdForPath
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSoftObjectPath&           ObjectPath                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId UGBAssetManagerFunctionLibrary::GetPrimaryAssetIdForPath(const struct FSoftObjectPath& ObjectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetPrimaryAssetIdForPath");

	Params::GBAssetManagerFunctionLibrary_GetPrimaryAssetIdForPath Parms{};

	Parms.ObjectPath = std::move(ObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetSimilarInvItemSkinId
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinNameTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     SubstituteInvItemSkinNameTags                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId UGBAssetManagerFunctionLibrary::GetSimilarInvItemSkinId(const class FName& ProfileName, const struct FGameplayTag& InvItemSkinTypeTag, const struct FGameplayTag& InvItemSkinNameTag, const struct FGameplayTagContainer& SubstituteInvItemSkinNameTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetSimilarInvItemSkinId");

	Params::GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinId Parms{};

	Parms.ProfileName = ProfileName;
	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);
	Parms.InvItemSkinNameTag = std::move(InvItemSkinNameTag);
	Parms.SubstituteInvItemSkinNameTags = std::move(SubstituteInvItemSkinNameTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetSimilarInvItemSkinIdToExisting
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           ExistingInvItemSkinId                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId UGBAssetManagerFunctionLibrary::GetSimilarInvItemSkinIdToExisting(const class FName& ProfileName, const struct FGameplayTag& InvItemSkinTypeTag, const struct FPrimaryAssetId& ExistingInvItemSkinId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetSimilarInvItemSkinIdToExisting");

	Params::GBAssetManagerFunctionLibrary_GetSimilarInvItemSkinIdToExisting Parms{};

	Parms.ProfileName = ProfileName;
	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);
	Parms.ExistingInvItemSkinId = std::move(ExistingInvItemSkinId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetSubstituteInvItemSkinNameTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              InvItemSkinNameTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBAssetManagerFunctionLibrary::GetSubstituteInvItemSkinNameTags(const struct FGameplayTag& InvItemSkinNameTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetSubstituteInvItemSkinNameTags");

	Params::GBAssetManagerFunctionLibrary_GetSubstituteInvItemSkinNameTags Parms{};

	Parms.InvItemSkinNameTag = std::move(InvItemSkinNameTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.GetValidInvItemSkinIds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FPrimaryAssetId> UGBAssetManagerFunctionLibrary::GetValidInvItemSkinIds(const class FName& ProfileName, const struct FGameplayTag& InvItemSkinTypeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "GetValidInvItemSkinIds");

	Params::GBAssetManagerFunctionLibrary_GetValidInvItemSkinIds Parms{};

	Parms.ProfileName = ProfileName;
	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.HasInvItemSkins
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::HasInvItemSkins(const struct FGameplayTag& InvItemSkinTypeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "HasInvItemSkins");

	Params::GBAssetManagerFunctionLibrary_HasInvItemSkins Parms{};

	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.Map_GetARSFromPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const TMap<int32, int32>&               TargetMap                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagKey                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::Map_GetARSFromPrimaryAsset(const TMap<int32, int32>& TargetMap, const struct FPrimaryAssetId& PrimaryAssetId, class FName TagKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "Map_GetARSFromPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_Map_GetARSFromPrimaryAsset Parms{};

	Parms.TargetMap = std::move(TargetMap);
	Parms.PrimaryAssetId = std::move(PrimaryAssetId);
	Parms.TagKey = TagKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.RestrictedPrimaryAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBAssetManagerFunctionLibrary::RestrictedPrimaryAsset(const class FName& ProfileName, const struct FPrimaryAssetId& PrimaryAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "RestrictedPrimaryAsset");

	Params::GBAssetManagerFunctionLibrary_RestrictedPrimaryAsset Parms{};

	Parms.ProfileName = ProfileName;
	Parms.PrimaryAssetId = std::move(PrimaryAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBAssetManagerFunctionLibrary.SortPrimaryAssetIdList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FPrimaryAssetId>&   InPrimaryAssetIdList                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       SortTag                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId>*         OutPrimaryAssetIdList                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBAssetManagerFunctionLibrary::SortPrimaryAssetIdList(const TArray<struct FPrimaryAssetId>& InPrimaryAssetIdList, const class FName SortTag, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBAssetManagerFunctionLibrary", "SortPrimaryAssetIdList");

	Params::GBAssetManagerFunctionLibrary_SortPrimaryAssetIdList Parms{};

	Parms.InPrimaryAssetIdList = std::move(InPrimaryAssetIdList);
	Parms.SortTag = SortTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrimaryAssetIdList != nullptr)
		*OutPrimaryAssetIdList = std::move(Parms.OutPrimaryAssetIdList);
}


// Function GroundBranch.GBBarrelComponent.SetMuzzleDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBMuzzleDevice*                  NewMuzzleDevice                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBBarrelComponent::SetMuzzleDevice(class AGBMuzzleDevice* NewMuzzleDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "SetMuzzleDevice");

	Params::GBBarrelComponent_SetMuzzleDevice Parms{};

	Parms.NewMuzzleDevice = NewMuzzleDevice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBarrelComponent.SetVelocityModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewVelocityModifier                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBBarrelComponent::SetVelocityModifier(float NewVelocityModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "SetVelocityModifier");

	Params::GBBarrelComponent_SetVelocityModifier Parms{};

	Parms.NewVelocityModifier = NewVelocityModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBarrelComponent.SpawnBulletProjectile
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBBulletProjectile>  BulletProjectileClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBBulletProjectile*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBBulletProjectile* UGBBarrelComponent::SpawnBulletProjectile(TSubclassOf<class AGBBulletProjectile> BulletProjectileClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "SpawnBulletProjectile");

	Params::GBBarrelComponent_SpawnBulletProjectile Parms{};

	Parms.BulletProjectileClass = BulletProjectileClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBarrelComponent.GetAudioSignalRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBBarrelComponent::GetAudioSignalRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "GetAudioSignalRadius");

	Params::GBBarrelComponent_GetAudioSignalRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBarrelComponent.GetMuzzleDevice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBMuzzleDevice*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBMuzzleDevice* UGBBarrelComponent::GetMuzzleDevice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "GetMuzzleDevice");

	Params::GBBarrelComponent_GetMuzzleDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBarrelComponent.GetSuppressorSwitchValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBBarrelComponent::GetSuppressorSwitchValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "GetSuppressorSwitchValue");

	Params::GBBarrelComponent_GetSuppressorSwitchValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBarrelComponent.GetVelocityModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBBarrelComponent::GetVelocityModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBarrelComponent", "GetVelocityModifier");

	Params::GBBarrelComponent_GetVelocityModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBenchmarker.CreateBenchmarkReportWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AGBBenchmarker::CreateBenchmarkReportWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "CreateBenchmarkReportWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBBenchmarker.CreateBenchmarkSequenceWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AGBBenchmarker::CreateBenchmarkSequenceWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "CreateBenchmarkSequenceWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBBenchmarker.FadeIn
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBenchmarker::FadeIn(float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "FadeIn");

	Params::GBBenchmarker_FadeIn Parms{};

	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBBenchmarker.FadeInAndOut
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBenchmarker::FadeInAndOut(float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "FadeInAndOut");

	Params::GBBenchmarker_FadeInAndOut Parms{};

	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBBenchmarker.FadeOut
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBBenchmarker::FadeOut(float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "FadeOut");

	Params::GBBenchmarker_FadeOut Parms{};

	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBBenchmarker.FinishBenchmarkSource
// (Final, Native, Public)

void AGBBenchmarker::FinishBenchmarkSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "FinishBenchmarkSource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.GetDirectory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBBenchmarker::GetDirectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "GetDirectory");

	Params::GBBenchmarker_GetDirectory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBenchmarker.GetTemplatesFolder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBBenchmarker::GetTemplatesFolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "GetTemplatesFolder");

	Params::GBBenchmarker_GetTemplatesFolder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBenchmarker.HotspotPostWarmup
// (Final, Native, Public)

void AGBBenchmarker::HotspotPostWarmup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "HotspotPostWarmup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.OpenBenchmarksDirectory
// (Final, Native, Public, BlueprintCallable)

void AGBBenchmarker::OpenBenchmarksDirectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "OpenBenchmarksDirectory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.OpenHTMLFile
// (Final, Native, Public, BlueprintCallable)

void AGBBenchmarker::OpenHTMLFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "OpenHTMLFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.OpenLevelSequence
// (Final, Native, Public, BlueprintCallable)

void AGBBenchmarker::OpenLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "OpenLevelSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.PostFinishBenchmarkSource
// (Final, Native, Public)

void AGBBenchmarker::PostFinishBenchmarkSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "PostFinishBenchmarkSource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.RemoveBenchmarkWidgets
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AGBBenchmarker::RemoveBenchmarkWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "RemoveBenchmarkWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBBenchmarker.ReturnToMenu
// (Final, Native, Public, BlueprintCallable)

void AGBBenchmarker::ReturnToMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "ReturnToMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.StartBenchmarkPostWarmup
// (Final, Native, Public)

void AGBBenchmarker::StartBenchmarkPostWarmup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "StartBenchmarkPostWarmup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBBenchmarker.IsBenchmarking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBBenchmarker::IsBenchmarking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "IsBenchmarking");

	Params::GBBenchmarker_IsBenchmarking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBBenchmarker.IsBenchmarkPreparing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBBenchmarker::IsBenchmarkPreparing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBBenchmarker", "IsBenchmarkPreparing");

	Params::GBBenchmarker_IsBenchmarkPreparing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCharAnimInstanceLayer.OnEquippedItemsUpdatedEvent
// (Event, Public, BlueprintEvent)

void UGBCharAnimInstanceLayer::OnEquippedItemsUpdatedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstanceLayer", "OnEquippedItemsUpdatedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBCharAnimInstanceLayer.GetMontageFromLinkedLayer
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FName                             MontageName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGBCharAnimInstanceLayer::GetMontageFromLinkedLayer(class FName MontageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCharAnimInstanceLayer", "GetMontageFromLinkedLayer");

	Params::GBCharAnimInstanceLayer_GetMontageFromLinkedLayer Parms{};

	Parms.MontageName = MontageName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerControllerBase.AddFullScreenWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      FullScreenWidget                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerControllerBase::AddFullScreenWidget(class UUserWidget* FullScreenWidget, int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerControllerBase", "AddFullScreenWidget");

	Params::GBPlayerControllerBase_AddFullScreenWidget Parms{};

	Parms.FullScreenWidget = FullScreenWidget;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerControllerBase.ApplyPlayerSettings
// (Native, Protected)
// Parameters:
// class UGBPlayerSettings*                PlayerSettings                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerControllerBase::ApplyPlayerSettings(class UGBPlayerSettings* PlayerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerControllerBase", "ApplyPlayerSettings");

	Params::GBPlayerControllerBase_ApplyPlayerSettings Parms{};

	Parms.PlayerSettings = PlayerSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerControllerBase.GBClientSeamlessTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerControllerBase::GBClientSeamlessTravel(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerControllerBase", "GBClientSeamlessTravel");

	Params::GBPlayerControllerBase_GBClientSeamlessTravel Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerControllerBase.ListFullScreenWidgets
// (Final, Exec, Native, Public)

void AGBPlayerControllerBase::ListFullScreenWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerControllerBase", "ListFullScreenWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerControllerBase.RemoveFullScreenWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      FullScreenWidget                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerControllerBase::RemoveFullScreenWidget(class UUserWidget* FullScreenWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerControllerBase", "RemoveFullScreenWidget");

	Params::GBPlayerControllerBase_RemoveFullScreenWidget Parms{};

	Parms.FullScreenWidget = FullScreenWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerControllerBase.GetPlayerSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBPlayerSettings*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBPlayerSettings* AGBPlayerControllerBase::GetPlayerSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerControllerBase", "GetPlayerSettings");

	Params::GBPlayerControllerBase_GetPlayerSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.AddLocalPlayerTag
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             LocalPlayerTag                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::AddLocalPlayerTag(class FName LocalPlayerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "AddLocalPlayerTag");

	Params::GBPlayerController_AddLocalPlayerTag Parms{};

	Parms.LocalPlayerTag = LocalPlayerTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.AddOverrideInputWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::AddOverrideInputWidget(class UUserWidget* UserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "AddOverrideInputWidget");

	Params::GBPlayerController_AddOverrideInputWidget Parms{};

	Parms.UserWidget = UserWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.Admin
// (Exec, Native, Protected, BlueprintCallable)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::Admin(const class FString& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Admin");

	Params::GBPlayerController_Admin Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.AdminRequest
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      RequestType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FZKReplicatedContent& Content)>OnAdminRequestFilled                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void AGBPlayerController::AdminRequest(const class FName& RequestType, TDelegate<void(const struct FZKReplicatedContent& Content)> OnAdminRequestFilled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "AdminRequest");

	Params::GBPlayerController_AdminRequest Parms{};

	Parms.RequestType = RequestType;
	Parms.OnAdminRequestFilled = OnAdminRequestFilled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.AdminSet
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FZKReplicatedContent&      Content                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerController::AdminSet(const struct FZKReplicatedContent& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "AdminSet");

	Params::GBPlayerController_AdminSet Parms{};

	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.BP_IsFrozen
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::BP_IsFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "BP_IsFrozen");

	Params::GBPlayerController_BP_IsFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.BP_ReadyRoom
// (Native, Public, BlueprintCallable)

void AGBPlayerController::BP_ReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "BP_ReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.BP_Spectate
// (Native, Public, BlueprintCallable)

void AGBPlayerController::BP_Spectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "BP_Spectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.BulletWarn
// (Final, Native, Public)
// Parameters:
// class AActor*                           Bullet                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSubSonic                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::BulletWarn(class AActor* Bullet, bool bSubSonic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "BulletWarn");

	Params::GBPlayerController_BulletWarn Parms{};

	Parms.Bullet = Bullet;
	Parms.bSubSonic = bSubSonic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClearCurrentInteractivePrimitive
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::ClearCurrentInteractivePrimitive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClearCurrentInteractivePrimitive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientAdminReply
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// const struct FZKReplicatedContent&      Content                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientAdminReply(const struct FZKReplicatedContent& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientAdminReply");

	Params::GBPlayerController_ClientAdminReply Parms{};

	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientAFKPrompt
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// float                                   ReponseTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientAFKPrompt(float ReponseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientAFKPrompt");

	Params::GBPlayerController_ClientAFKPrompt Parms{};

	Parms.ReponseTime = ReponseTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientBecameSpectator
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// const struct FVector&                   NewSpectatorLocation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  NewSpectatorRotation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientBecameSpectator(const struct FVector& NewSpectatorLocation, const struct FRotator& NewSpectatorRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientBecameSpectator");

	Params::GBPlayerController_ClientBecameSpectator Parms{};

	Parms.NewSpectatorLocation = std::move(NewSpectatorLocation);
	Parms.NewSpectatorRotation = std::move(NewSpectatorRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientEnterPlayArea
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientEnterPlayArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientEnterPlayArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientEnterReadyRoom
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientEnterReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientEnterReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientForceCrouch
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientForceCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientForceCrouch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientForceProne
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientForceProne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientForceProne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientGameMessage
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class FName                             GameMessageId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientGameMessage(class FName GameMessageId, class FName Type, float Duration, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientGameMessage");

	Params::GBPlayerController_ClientGameMessage Parms{};

	Parms.GameMessageId = GameMessageId;
	Parms.Type = Type;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientInitialSync
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientInitialSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientInitialSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientMissionObjectiveStatusUpdate
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// const EGBMissionObjectiveStatusUpdateTypeStatusUpdateType                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatParam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientMissionObjectiveStatusUpdate(const EGBMissionObjectiveStatusUpdateType StatusUpdateType, class AGBMissionObjective* MissionObjective, float FloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientMissionObjectiveStatusUpdate");

	Params::GBPlayerController_ClientMissionObjectiveStatusUpdate Parms{};

	Parms.StatusUpdateType = StatusUpdateType;
	Parms.MissionObjective = MissionObjective;
	Parms.FloatParam = FloatParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientOnLoadoutApplied
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientOnLoadoutApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientOnLoadoutApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientPlaySequence
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const TSoftObjectPtr<class ALevelSequenceActor>&SequenceRef                                            (ConstParm, Parm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             GBSequencePlayFlags                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientPlaySequence(const TSoftObjectPtr<class ALevelSequenceActor>& SequenceRef, const uint8 GBSequencePlayFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientPlaySequence");

	Params::GBPlayerController_ClientPlaySequence Parms{};

	Parms.SequenceRef = SequenceRef;
	Parms.GBSequencePlayFlags = GBSequencePlayFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientSendPlayerCharVoice
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// class AGBPlayerState*                   SenderPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           SenderCharVoiceDataId                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientSendPlayerCharVoice(class AGBPlayerState* SenderPlayerState, const struct FPrimaryAssetId& SenderCharVoiceDataId, const class FName Key, bool bIsRadio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientSendPlayerCharVoice");

	Params::GBPlayerController_ClientSendPlayerCharVoice Parms{};

	Parms.SenderPlayerState = SenderPlayerState;
	Parms.SenderCharVoiceDataId = std::move(SenderCharVoiceDataId);
	Parms.Key = Key;
	Parms.bIsRadio = bIsRadio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientShowAdminMenu
// (Net, NetReliable, Native, Event, Protected, NetClient)

void AGBPlayerController::ClientShowAdminMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientShowAdminMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientShowMenu
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// const struct FSoftClassPath&            MenuClassName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientShowMenu(const struct FSoftClassPath& MenuClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientShowMenu");

	Params::GBPlayerController_ClientShowMenu Parms{};

	Parms.MenuClassName = std::move(MenuClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientShowWorldPrompt
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// const struct FVector&                   PromptLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientShowWorldPrompt(const struct FVector& PromptLocation, class FName Tag, float Duration, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientShowWorldPrompt");

	Params::GBPlayerController_ClientShowWorldPrompt Parms{};

	Parms.PromptLocation = std::move(PromptLocation);
	Parms.Tag = Tag;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientStopSequencePlayback
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const bool                              bSuppressBlackOutAfter                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientStopSequencePlayback(const bool bSuppressBlackOutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientStopSequencePlayback");

	Params::GBPlayerController_ClientStopSequencePlayback Parms{};

	Parms.bSuppressBlackOutAfter = bSuppressBlackOutAfter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientTeamKilledNotify
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// const class FString&                    TeamKillerUniqueId                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamKillerPlayerName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PrevKills                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientTeamKilledNotify(const class FString& TeamKillerUniqueId, const class FString& TeamKillerPlayerName, int32 PrevKills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientTeamKilledNotify");

	Params::GBPlayerController_ClientTeamKilledNotify Parms{};

	Parms.TeamKillerUniqueId = std::move(TeamKillerUniqueId);
	Parms.TeamKillerPlayerName = std::move(TeamKillerPlayerName);
	Parms.PrevKills = PrevKills;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientTeamKillWarn
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// const TArray<class APlayerState*>&      NewTeamKillVictims                                     (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerController::ClientTeamKillWarn(const TArray<class APlayerState*>& NewTeamKillVictims)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientTeamKillWarn");

	Params::GBPlayerController_ClientTeamKillWarn Parms{};

	Parms.NewTeamKillVictims = std::move(NewTeamKillVictims);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ClientTeleport
// (Net, NetReliable, Native, Event, Public, NetClient)

void AGBPlayerController::ClientTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ClientTeleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.CustomiseOperator
// (Final, Exec, Native, Protected)

void AGBPlayerController::CustomiseOperator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "CustomiseOperator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.DumpGameplayAbilityList
// (Final, Exec, Native, Public)

void AGBPlayerController::DumpGameplayAbilityList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "DumpGameplayAbilityList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.EditMission
// (Final, Exec, Native, Protected, BlueprintCallable)

void AGBPlayerController::EditMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "EditMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.FinishCanUseAttempt
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::FinishCanUseAttempt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "FinishCanUseAttempt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.FlushActions
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::FlushActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "FlushActions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ForceHideTransitionScreens
// (Final, Exec, Native, Protected)

void AGBPlayerController::ForceHideTransitionScreens()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ForceHideTransitionScreens");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.Forgive
// (Exec, Native, Protected)

void AGBPlayerController::Forgive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Forgive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.GetFailedKitValidationInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBKitValidationInfo*            OutKitValidationInfo                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::GetFailedKitValidationInfo(const class FName& LoadoutName, struct FGBKitValidationInfo* OutKitValidationInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetFailedKitValidationInfo");

	Params::GBPlayerController_GetFailedKitValidationInfo Parms{};

	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKitValidationInfo != nullptr)
		*OutKitValidationInfo = std::move(Parms.OutKitValidationInfo);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetLastTeamKillerInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          OutLastTeamKillerUniqueId                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutLastTeamKillerPlayerName                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutLastTeamKillerPrevKills                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::GetLastTeamKillerInfo(class FString* OutLastTeamKillerUniqueId, class FString* OutLastTeamKillerPlayerName, int32* OutLastTeamKillerPrevKills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetLastTeamKillerInfo");

	Params::GBPlayerController_GetLastTeamKillerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLastTeamKillerUniqueId != nullptr)
		*OutLastTeamKillerUniqueId = std::move(Parms.OutLastTeamKillerUniqueId);

	if (OutLastTeamKillerPlayerName != nullptr)
		*OutLastTeamKillerPlayerName = std::move(Parms.OutLastTeamKillerPlayerName);

	if (OutLastTeamKillerPrevKills != nullptr)
		*OutLastTeamKillerPrevKills = Parms.OutLastTeamKillerPrevKills;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetOverrideInputWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* AGBPlayerController::GetOverrideInputWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetOverrideInputWidget");

	Params::GBPlayerController_GetOverrideInputWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GlobalChat
// (Final, Exec, Native, Public)

void AGBPlayerController::GlobalChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GlobalChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.HandleCommunicationKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::HandleCommunicationKey(const struct FKey& Key, bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "HandleCommunicationKey");

	Params::GBPlayerController_HandleCommunicationKey Parms{};

	Parms.Key = std::move(Key);
	Parms.bPressed = bPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.HideTransitionScreenEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUserWidget*                      LoadingScreenUserWidget                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::HideTransitionScreenEvent(class UUserWidget* LoadingScreenUserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "HideTransitionScreenEvent");

	Params::GBPlayerController_HideTransitionScreenEvent Parms{};

	Parms.LoadingScreenUserWidget = LoadingScreenUserWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.HideTransitionScreens
// (Final, Native, Protected)

void AGBPlayerController::HideTransitionScreens()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "HideTransitionScreens");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.IsSequencePlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsSequencePlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsSequencePlaying");

	Params::GBPlayerController_IsSequencePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.LocalMissionObjectiveStatusUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EGBMissionObjectiveStatusUpdateTypeStatusUpdateType                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatParam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::LocalMissionObjectiveStatusUpdate(const EGBMissionObjectiveStatusUpdateType StatusUpdateType, class AGBMissionObjective* MissionObjective, float FloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "LocalMissionObjectiveStatusUpdate");

	Params::GBPlayerController_LocalMissionObjectiveStatusUpdate Parms{};

	Parms.StatusUpdateType = StatusUpdateType;
	Parms.MissionObjective = MissionObjective;
	Parms.FloatParam = FloatParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.Mute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     TargetPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::Mute(class APlayerState* TargetPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Mute");

	Params::GBPlayerController_Mute Parms{};

	Parms.TargetPlayerState = TargetPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.MuteAll
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::MuteAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "MuteAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.MuteTalking
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::MuteTalking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "MuteTalking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.NotAFK
// (Final, Exec, Native, Protected)

void AGBPlayerController::NotAFK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "NotAFK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.NotifyMovementImpulse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ImpulseX                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseDecayRate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::NotifyMovementImpulse(float ImpulseX, float ImpulseY, float ImpulseDecayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "NotifyMovementImpulse");

	Params::GBPlayerController_NotifyMovementImpulse Parms{};

	Parms.ImpulseX = ImpulseX;
	Parms.ImpulseY = ImpulseY;
	Parms.ImpulseDecayRate = ImpulseDecayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.OnAFKPromptEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReponseTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::OnAFKPromptEvent(float ReponseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnAFKPromptEvent");

	Params::GBPlayerController_OnAFKPromptEvent Parms{};

	Parms.ReponseTime = ReponseTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.OnClientOnLoadoutAppliedEvent
// (Event, Public, BlueprintEvent)

void AGBPlayerController::OnClientOnLoadoutAppliedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnClientOnLoadoutAppliedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.OnCustomiseOperatorCheatEvent
// (Event, Protected, BlueprintEvent)

void AGBPlayerController::OnCustomiseOperatorCheatEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnCustomiseOperatorCheatEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.OnFailedKitValidationsUpdateEvent
// (Event, Protected, BlueprintEvent)

void AGBPlayerController::OnFailedKitValidationsUpdateEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnFailedKitValidationsUpdateEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.OnHoveredWidgetChanged
// (Final, Native, Protected)
// Parameters:
// class UWidgetComponent*                 WidgetComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetComponent*                 PreviousWidgetComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::OnHoveredWidgetChanged(class UWidgetComponent* WidgetComponent, class UWidgetComponent* PreviousWidgetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnHoveredWidgetChanged");

	Params::GBPlayerController_OnHoveredWidgetChanged Parms{};

	Parms.WidgetComponent = WidgetComponent;
	Parms.PreviousWidgetComponent = PreviousWidgetComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.OnLoadoutApplied
// (Final, Native, Protected)
// Parameters:
// class AGBCharacter*                     InGBCharacter                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::OnLoadoutApplied(class AGBCharacter* InGBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnLoadoutApplied");

	Params::GBPlayerController_OnLoadoutApplied Parms{};

	Parms.InGBCharacter = InGBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.OnMissionObjectiveStatusUpdateEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EGBMissionObjectiveStatusUpdateTypeStatusUpdateType                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatParam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::OnMissionObjectiveStatusUpdateEvent(const EGBMissionObjectiveStatusUpdateType StatusUpdateType, class AGBMissionObjective* MissionObjective, float FloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnMissionObjectiveStatusUpdateEvent");

	Params::GBPlayerController_OnMissionObjectiveStatusUpdateEvent Parms{};

	Parms.StatusUpdateType = StatusUpdateType;
	Parms.MissionObjective = MissionObjective;
	Parms.FloatParam = FloatParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.OnPlayerLoadoutsUpdated
// (Final, Native, Protected)
// Parameters:
// class AGBGameState*                     GBGameState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::OnPlayerLoadoutsUpdated(class AGBGameState* GBGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnPlayerLoadoutsUpdated");

	Params::GBPlayerController_OnPlayerLoadoutsUpdated Parms{};

	Parms.GBGameState = GBGameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.OnPreSeamlessTravelEvent
// (Event, Protected, BlueprintEvent)

void AGBPlayerController::OnPreSeamlessTravelEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnPreSeamlessTravelEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.OnRestartPlayerEvent
// (Event, Protected, BlueprintEvent)

void AGBPlayerController::OnRestartPlayerEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnRestartPlayerEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.OnSequenceStopped
// (Final, Native, Protected)

void AGBPlayerController::OnSequenceStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnSequenceStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.OnShowWorldPromptEvent
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   PromptLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::OnShowWorldPromptEvent(const struct FVector& PromptLocation, class FName Tag, float Duration, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OnShowWorldPromptEvent");

	Params::GBPlayerController_OnShowWorldPromptEvent Parms{};

	Parms.PromptLocation = std::move(PromptLocation);
	Parms.Tag = Tag;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.OpenMissionEditorEvent
// (Event, Protected, BlueprintEvent)

void AGBPlayerController::OpenMissionEditorEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OpenMissionEditorEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.OptOut
// (Exec, Native, Public)

void AGBPlayerController::OptOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "OptOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.PlayEmote
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CharEmoteString                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::PlayEmote(const class FString& CharEmoteString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "PlayEmote");

	Params::GBPlayerController_PlayEmote Parms{};

	Parms.CharEmoteString = std::move(CharEmoteString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.PlayerGameModeRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Request                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::PlayerGameModeRequest(const class FString& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "PlayerGameModeRequest");

	Params::GBPlayerController_PlayerGameModeRequest Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.PlayVoice
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadioMessage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::PlayVoice(const class FName Key, bool bIsRadioMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "PlayVoice");

	Params::GBPlayerController_PlayVoice Parms{};

	Parms.Key = Key;
	Parms.bIsRadioMessage = bIsRadioMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ReadyRoom
// (Exec, Native, Public)

void AGBPlayerController::ReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ReapplyCharLoadout
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::ReapplyCharLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ReapplyCharLoadout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ReInitLoadouts
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::ReInitLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ReInitLoadouts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.RemoveLocalPlayerTag
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             LocalPlayerTag                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::RemoveLocalPlayerTag(class FName LocalPlayerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "RemoveLocalPlayerTag");

	Params::GBPlayerController_RemoveLocalPlayerTag Parms{};

	Parms.LocalPlayerTag = LocalPlayerTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.RemoveOverrideInputWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      UserWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::RemoveOverrideInputWidget(class UUserWidget* UserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "RemoveOverrideInputWidget");

	Params::GBPlayerController_RemoveOverrideInputWidget Parms{};

	Parms.UserWidget = UserWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.Report
// (Exec, Native, Protected)

void AGBPlayerController::Report()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Report");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ResetFOV
// (Final, Native, Public)

void AGBPlayerController::ResetFOV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ResetFOV");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.RestartPlayer
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::RestartPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "RestartPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.Say
// (Exec, Native, Public)
// Parameters:
// const class FString&                    Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::Say(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Say");

	Params::GBPlayerController_Say Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SayTeam
// (Exec, Native, Public)
// Parameters:
// const class FString&                    Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SayTeam(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SayTeam");

	Params::GBPlayerController_SayTeam Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerAdmin
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerAdmin(const class FString& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerAdmin");

	Params::GBPlayerController_ServerAdmin Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerAdminRequest
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FName&                      RequestType                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerAdminRequest(const class FName& RequestType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerAdminRequest");

	Params::GBPlayerController_ServerAdminRequest Parms{};

	Parms.RequestType = RequestType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerAdminSet
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FZKReplicatedContent&      Content                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerAdminSet(const struct FZKReplicatedContent& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerAdminSet");

	Params::GBPlayerController_ServerAdminSet Parms{};

	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerCheat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const class FString&                    Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerCheat(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerCheat");

	Params::GBPlayerController_ServerCheat Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerConfirmBulletCharacterImpact
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class AGBCharacter*                     HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGBOrganDamageEvent&       OrganDamageEvent                                       (ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerConfirmBulletCharacterImpact(class AGBCharacter* HitCharacter, const struct FGBOrganDamageEvent& OrganDamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerConfirmBulletCharacterImpact");

	Params::GBPlayerController_ServerConfirmBulletCharacterImpact Parms{};

	Parms.HitCharacter = HitCharacter;
	Parms.OrganDamageEvent = std::move(OrganDamageEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerCreateLoadoutInfo
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FGBReplicatedString&       ReplicatedLoadout                                      (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerCreateLoadoutInfo(const struct FGBReplicatedString& ReplicatedLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerCreateLoadoutInfo");

	Params::GBPlayerController_ServerCreateLoadoutInfo Parms{};

	Parms.ReplicatedLoadout = std::move(ReplicatedLoadout);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerEnterPlayArea
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerEnterPlayArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerEnterPlayArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerEnterReadyRoom
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerEnterReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerEnterReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerFinishTeleport
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerFinishTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerFinishTeleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerForgive
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerForgive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerForgive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerInitialSync
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerInitialSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerInitialSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerOptOut
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerOptOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerOptOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerPlayEmote
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FPrimaryAssetId&           CharEmoteId                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerPlayEmote(const struct FPrimaryAssetId& CharEmoteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerPlayEmote");

	Params::GBPlayerController_ServerPlayEmote Parms{};

	Parms.CharEmoteId = std::move(CharEmoteId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerPlayerGameModeRequest
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    Request                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerPlayerGameModeRequest(const class FString& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerPlayerGameModeRequest");

	Params::GBPlayerController_ServerPlayerGameModeRequest Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerPlaySequence
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams)
// Parameters:
// const TSoftObjectPtr<class ALevelSequenceActor>&SequenceRef                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsCutscene                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bCanAbort                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bResetActors                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bHidePlayers                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bBlackoutAfter                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerPlaySequence(const TSoftObjectPtr<class ALevelSequenceActor>& SequenceRef, const bool bIsCutscene, const bool bCanAbort, const bool bResetActors, const bool bHidePlayers, const bool bBlackoutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerPlaySequence");

	Params::GBPlayerController_ServerPlaySequence Parms{};

	Parms.SequenceRef = SequenceRef;
	Parms.bIsCutscene = bIsCutscene;
	Parms.bCanAbort = bCanAbort;
	Parms.bResetActors = bResetActors;
	Parms.bHidePlayers = bHidePlayers;
	Parms.bBlackoutAfter = bBlackoutAfter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerPlayVoice
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FName&                      Key                                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadioMessage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerPlayVoice(const class FName& Key, bool bIsRadioMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerPlayVoice");

	Params::GBPlayerController_ServerPlayVoice Parms{};

	Parms.Key = Key;
	Parms.bIsRadioMessage = bIsRadioMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerReapplyCharLoadout
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerReapplyCharLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerReapplyCharLoadout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerReport
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerReport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerReport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSay
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSay(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSay");

	Params::GBPlayerController_ServerSay Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSayTeam
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSayTeam(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSayTeam");

	Params::GBPlayerController_ServerSayTeam Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSendAFKReponse
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerSendAFKReponse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSendAFKReponse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSetCallSign
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const class FString&                    NewCallSign                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewUseElementCallSign                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSetCallSign(const class FString& NewCallSign, bool bNewUseElementCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSetCallSign");

	Params::GBPlayerController_ServerSetCallSign Parms{};

	Parms.NewCallSign = std::move(NewCallSign);
	Parms.bNewUseElementCallSign = bNewUseElementCallSign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSetCharVoiceDataId
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FPrimaryAssetId&           CharVoiceDataId                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSetCharVoiceDataId(const struct FPrimaryAssetId& CharVoiceDataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSetCharVoiceDataId");

	Params::GBPlayerController_ServerSetCharVoiceDataId Parms{};

	Parms.CharVoiceDataId = std::move(CharVoiceDataId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSetCustomiseOperatorCheat
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSetCustomiseOperatorCheat(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSetCustomiseOperatorCheat");

	Params::GBPlayerController_ServerSetCustomiseOperatorCheat Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSetInsertionPoint
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AGBInsertionPoint*                NewInsertionPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSetInsertionPoint(class AGBInsertionPoint* NewInsertionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSetInsertionPoint");

	Params::GBPlayerController_ServerSetInsertionPoint Parms{};

	Parms.NewInsertionPoint = NewInsertionPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSetReadyStatus
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const EReadyStatus&                     NewReadyStatus                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSetReadyStatus(const EReadyStatus& NewReadyStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSetReadyStatus");

	Params::GBPlayerController_ServerSetReadyStatus Parms{};

	Parms.NewReadyStatus = NewReadyStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSetTeamElement
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const ETeamElement&                     NewTeamElement                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerSetTeamElement(const ETeamElement& NewTeamElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSetTeamElement");

	Params::GBPlayerController_ServerSetTeamElement Parms{};

	Parms.NewTeamElement = NewTeamElement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerSpectate
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AGBPlayerController::ServerSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerSpectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerUseActor
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                           UseTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      UseType                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustSucceed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerUseActor(class AActor* UseTarget, const class FName& UseType, bool bMustSucceed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerUseActor");

	Params::GBPlayerController_ServerUseActor Parms{};

	Parms.UseTarget = UseTarget;
	Parms.UseType = UseType;
	Parms.bMustSucceed = bMustSucceed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerUseActorWithParams
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                           UseTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      UseType                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustSucceed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerUseActorWithParams(class AActor* UseTarget, const class FName& UseType, const class FString& Params_0, bool bMustSucceed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerUseActorWithParams");

	Params::GBPlayerController_ServerUseActorWithParams Parms{};

	Parms.UseTarget = UseTarget;
	Parms.UseType = UseType;
	Parms.Params_0 = std::move(Params_0);
	Parms.bMustSucceed = bMustSucceed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ServerVote
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ServerVote(const class FString& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ServerVote");

	Params::GBPlayerController_ServerVote Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetCustomiseOperatorCheat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetCustomiseOperatorCheat(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetCustomiseOperatorCheat");

	Params::GBPlayerController_SetCustomiseOperatorCheat Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetInsertionPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInsertionPoint*                NewInsertionPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetInsertionPoint(class AGBInsertionPoint* NewInsertionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetInsertionPoint");

	Params::GBPlayerController_SetInsertionPoint Parms{};

	Parms.NewInsertionPoint = NewInsertionPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetIsEditingMission
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewIsEditingMission                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetIsEditingMission(bool bNewIsEditingMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetIsEditingMission");

	Params::GBPlayerController_SetIsEditingMission Parms{};

	Parms.bNewIsEditingMission = bNewIsEditingMission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetLastDesiredOffTargetAlphaValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLastDesiredOffTargetAlphaValue                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetLastDesiredOffTargetAlphaValue(float NewLastDesiredOffTargetAlphaValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetLastDesiredOffTargetAlphaValue");

	Params::GBPlayerController_SetLastDesiredOffTargetAlphaValue Parms{};

	Parms.NewLastDesiredOffTargetAlphaValue = NewLastDesiredOffTargetAlphaValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetLoadout
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetLoadout(const class FName& LoadoutName, class UVaRestJsonObject* KitJsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetLoadout");

	Params::GBPlayerController_SetLoadout Parms{};

	Parms.LoadoutName = LoadoutName;
	Parms.KitJsonObj = KitJsonObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetMPCGlobalDecayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GlobalDecayRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetMPCGlobalDecayRate(float GlobalDecayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetMPCGlobalDecayRate");

	Params::GBPlayerController_SetMPCGlobalDecayRate Parms{};

	Parms.GlobalDecayRate = GlobalDecayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetReadyStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EReadyStatus                            NewReadyStatus                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetReadyStatus(EReadyStatus NewReadyStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetReadyStatus");

	Params::GBPlayerController_SetReadyStatus Parms{};

	Parms.NewReadyStatus = NewReadyStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetSpectatorNightVisionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewNightVisionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetSpectatorNightVisionMode(class FName NewNightVisionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetSpectatorNightVisionMode");

	Params::GBPlayerController_SetSpectatorNightVisionMode Parms{};

	Parms.NewNightVisionMode = NewNightVisionMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetTargetInputSensitivityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetTargetInputSensitivityScale(float NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetTargetInputSensitivityScale");

	Params::GBPlayerController_SetTargetInputSensitivityScale Parms{};

	Parms.NewScale = NewScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetTeamElement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETeamElement                            NewTeamElement                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::SetTeamElement(ETeamElement NewTeamElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetTeamElement");

	Params::GBPlayerController_SetTeamElement Parms{};

	Parms.NewTeamElement = NewTeamElement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.SetViewRotation
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGBPlayerController::SetViewRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SetViewRotation");

	Params::GBPlayerController_SetViewRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ShowAdminMenuEvent
// (Event, Protected, BlueprintEvent)

void AGBPlayerController::ShowAdminMenuEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ShowAdminMenuEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBPlayerController.ShowTransitionScreen
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TransitionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ShowTransitionScreen(class FName TransitionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ShowTransitionScreen");

	Params::GBPlayerController_ShowTransitionScreen Parms{};

	Parms.TransitionType = TransitionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ShowTransitionScreenEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             TransitionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::ShowTransitionScreenEvent(class FName TransitionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ShowTransitionScreenEvent");

	Params::GBPlayerController_ShowTransitionScreenEvent Parms{};

	Parms.TransitionType = TransitionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.Spectate
// (Exec, Native, Public)

void AGBPlayerController::Spectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Spectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.TeamChat
// (Final, Exec, Native, Public)

void AGBPlayerController::TeamChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "TeamChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.ToggleInGameMenu
// (Final, Exec, Native, Public, BlueprintCallable)

void AGBPlayerController::ToggleInGameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ToggleInGameMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.TriggerSequencePlayback
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class ALevelSequenceActor>&LevelSequenceActor                                     (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsCutscene                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bCanAbort                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bHidePlayers                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bBlackoutAfter                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::TriggerSequencePlayback(const TSoftObjectPtr<class ALevelSequenceActor>& LevelSequenceActor, const bool bIsCutscene, const bool bCanAbort, const bool bHidePlayers, const bool bBlackoutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "TriggerSequencePlayback");

	Params::GBPlayerController_TriggerSequencePlayback Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;
	Parms.bIsCutscene = bIsCutscene;
	Parms.bCanAbort = bCanAbort;
	Parms.bHidePlayers = bHidePlayers;
	Parms.bBlackoutAfter = bBlackoutAfter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.UnMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     TargetPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::UnMute(class APlayerState* TargetPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "UnMute");

	Params::GBPlayerController_UnMute Parms{};

	Parms.TargetPlayerState = TargetPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.UnMuteAll
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerController::UnMuteAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "UnMuteAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.UpdateMovementMaterialCollection
// (Final, Native, Private, HasDefaults)
// Parameters:
// const struct FRotator&                  DeltaRot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::UpdateMovementMaterialCollection(const struct FRotator& DeltaRot, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "UpdateMovementMaterialCollection");

	Params::GBPlayerController_UpdateMovementMaterialCollection Parms{};

	Parms.DeltaRot = std::move(DeltaRot);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.UseActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           UseTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustSucceed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::UseActor(class AActor* UseTarget, class FName UseType, bool bMustSucceed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "UseActor");

	Params::GBPlayerController_UseActor Parms{};

	Parms.UseTarget = UseTarget;
	Parms.UseType = UseType;
	Parms.bMustSucceed = bMustSucceed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.UseActorWithParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           UseTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustSucceed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::UseActorWithParams(class AActor* UseTarget, class FName UseType, const class FString& Params_0, bool bMustSucceed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "UseActorWithParams");

	Params::GBPlayerController_UseActorWithParams Parms{};

	Parms.UseTarget = UseTarget;
	Parms.UseType = UseType;
	Parms.Params_0 = std::move(Params_0);
	Parms.bMustSucceed = bMustSucceed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.Vote
// (Exec, Native, Protected, BlueprintCallable)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::Vote(const class FString& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "Vote");

	Params::GBPlayerController_Vote Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerController.CanUseActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     UseTarget                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMustSucceed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::CanUseActor(const class AActor* UseTarget, bool bMustSucceed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "CanUseActor");

	Params::GBPlayerController_CanUseActor Parms{};

	Parms.UseTarget = UseTarget;
	Parms.bMustSucceed = bMustSucceed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.CreateBlackOutEvent
// (Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const bool                              bFadeIn                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::CreateBlackOutEvent(const bool bFadeIn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "CreateBlackOutEvent");

	Params::GBPlayerController_CreateBlackOutEvent Parms{};

	Parms.bFadeIn = bFadeIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.FrozenTimeLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::FrozenTimeLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "FrozenTimeLeft");

	Params::GBPlayerController_FrozenTimeLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetCameraStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBPlayerController::GetCameraStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetCameraStyle");

	Params::GBPlayerController_GetCameraStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetEyeBias
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::GetEyeBias() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetEyeBias");

	Params::GBPlayerController_GetEyeBias Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetFailedKitValidations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBKitValidationInfo>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBKitValidationInfo> AGBPlayerController::GetFailedKitValidations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetFailedKitValidations");

	Params::GBPlayerController_GetFailedKitValidations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetFluidStance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::GetFluidStance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetFluidStance");

	Params::GBPlayerController_GetFluidStance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetFPS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerController::GetFPS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetFPS");

	Params::GBPlayerController_GetFPS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetGBCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBPlayerController::GetGBCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetGBCharacter");

	Params::GBPlayerController_GetGBCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetGBHUD
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBHUD*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBHUD* AGBPlayerController::GetGBHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetGBHUD");

	Params::GBPlayerController_GetGBHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetHeadMovementAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::GetHeadMovementAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetHeadMovementAmount");

	Params::GBPlayerController_GetHeadMovementAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetLastDesiredOffTargetAlphaValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::GetLastDesiredOffTargetAlphaValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetLastDesiredOffTargetAlphaValue");

	Params::GBPlayerController_GetLastDesiredOffTargetAlphaValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetLoadoutInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* AGBPlayerController::GetLoadoutInfo(const class FName& LoadoutName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetLoadoutInfo");

	Params::GBPlayerController_GetLoadoutInfo Parms{};

	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetNetInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32*                                  Ping                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  InKiloBytesPerSecond                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  InPacketsPerSecond                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  InLossPercentage                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutKiloBytesPerSecond                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutPacketsPerSecond                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutLossPercentage                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::GetNetInfo(int32* Ping, float* InKiloBytesPerSecond, int32* InPacketsPerSecond, int32* InLossPercentage, float* OutKiloBytesPerSecond, int32* OutPacketsPerSecond, int32* OutLossPercentage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetNetInfo");

	Params::GBPlayerController_GetNetInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ping != nullptr)
		*Ping = Parms.Ping;

	if (InKiloBytesPerSecond != nullptr)
		*InKiloBytesPerSecond = Parms.InKiloBytesPerSecond;

	if (InPacketsPerSecond != nullptr)
		*InPacketsPerSecond = Parms.InPacketsPerSecond;

	if (InLossPercentage != nullptr)
		*InLossPercentage = Parms.InLossPercentage;

	if (OutKiloBytesPerSecond != nullptr)
		*OutKiloBytesPerSecond = Parms.OutKiloBytesPerSecond;

	if (OutPacketsPerSecond != nullptr)
		*OutPacketsPerSecond = Parms.OutPacketsPerSecond;

	if (OutLossPercentage != nullptr)
		*OutLossPercentage = Parms.OutLossPercentage;
}


// Function GroundBranch.GBPlayerController.GetPlayerFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::GetPlayerFOV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetPlayerFOV");

	Params::GBPlayerController_GetPlayerFOV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetPlayingSequenceInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float*                                  OutTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutTimeLeft                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutDuration                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutIsCutscene                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutCanAbort                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ALevelSequenceActor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALevelSequenceActor* AGBPlayerController::GetPlayingSequenceInfo(float* OutTime, float* OutTimeLeft, float* OutDuration, bool* bOutIsCutscene, bool* bOutCanAbort) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetPlayingSequenceInfo");

	Params::GBPlayerController_GetPlayingSequenceInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTime != nullptr)
		*OutTime = Parms.OutTime;

	if (OutTimeLeft != nullptr)
		*OutTimeLeft = Parms.OutTimeLeft;

	if (OutDuration != nullptr)
		*OutDuration = Parms.OutDuration;

	if (bOutIsCutscene != nullptr)
		*bOutIsCutscene = Parms.bOutIsCutscene;

	if (bOutCanAbort != nullptr)
		*bOutCanAbort = Parms.bOutCanAbort;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetPredictionTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::GetPredictionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetPredictionTime");

	Params::GBPlayerController_GetPredictionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetSharedTraceBlockingHit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::GetSharedTraceBlockingHit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetSharedTraceBlockingHit");

	Params::GBPlayerController_GetSharedTraceBlockingHit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetSharedTraceResults
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FHitResult>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FHitResult> AGBPlayerController::GetSharedTraceResults() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetSharedTraceResults");

	Params::GBPlayerController_GetSharedTraceResults Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetSpectatorNightVisionMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBPlayerController::GetSpectatorNightVisionMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetSpectatorNightVisionMode");

	Params::GBPlayerController_GetSpectatorNightVisionMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetTargetInputSensitivityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerController::GetTargetInputSensitivityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetTargetInputSensitivityScale");

	Params::GBPlayerController_GetTargetInputSensitivityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetTeamKillVictims
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AGBPlayerController::GetTeamKillVictims() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetTeamKillVictims");

	Params::GBPlayerController_GetTeamKillVictims Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetViewRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AGBPlayerController::GetViewRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetViewRotation");

	Params::GBPlayerController_GetViewRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.GetWidgetInteractionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidgetInteractionComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetInteractionComponent* AGBPlayerController::GetWidgetInteractionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "GetWidgetInteractionComponent");

	Params::GBPlayerController_GetWidgetInteractionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.HasFailedKitValidations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::HasFailedKitValidations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "HasFailedKitValidations");

	Params::GBPlayerController_HasFailedKitValidations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.HasLocalPlayerTag
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LocalPlayerTag                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::HasLocalPlayerTag(class FName LocalPlayerTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "HasLocalPlayerTag");

	Params::GBPlayerController_HasLocalPlayerTag Parms{};

	Parms.LocalPlayerTag = LocalPlayerTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsAlive");

	Params::GBPlayerController_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsEditingMission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsEditingMission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsEditingMission");

	Params::GBPlayerController_IsEditingMission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsFirstPerson
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsFirstPerson");

	Params::GBPlayerController_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsMuted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               TargetPlayerState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsMuted(const class APlayerState* TargetPlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsMuted");

	Params::GBPlayerController_IsMuted Parms{};

	Parms.TargetPlayerState = TargetPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsTalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsTalking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsTalking");

	Params::GBPlayerController_IsTalking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsUsingGamepad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsUsingGamepad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsUsingGamepad");

	Params::GBPlayerController_IsUsingGamepad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.IsUsingRadio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::IsUsingRadio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "IsUsingRadio");

	Params::GBPlayerController_IsUsingRadio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.RemoveBlackOutEvent
// (Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const bool                              bFadeOut                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerController::RemoveBlackOutEvent(const bool bFadeOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "RemoveBlackOutEvent");

	Params::GBPlayerController_RemoveBlackOutEvent Parms{};

	Parms.bFadeOut = bFadeOut;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerController.ShowUsagePrompts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::ShowUsagePrompts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "ShowUsagePrompts");

	Params::GBPlayerController_ShowUsagePrompts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerController.SpectatorIsFollowing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerController::SpectatorIsFollowing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerController", "SpectatorIsFollowing");

	Params::GBPlayerController_SpectatorIsFollowing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBCheatManager.BugItGoMantis
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    CameraString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::BugItGoMantis(const class FString& CameraString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "BugItGoMantis");

	Params::GBCheatManager_BugItGoMantis Parms{};

	Parms.CameraString = std::move(CameraString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.DebugGameCommand
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::DebugGameCommand(const class FString& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "DebugGameCommand");

	Params::GBCheatManager_DebugGameCommand Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.InfAmmo
// (Final, Exec, Native, Public)

void UGBCheatManager::InfAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "InfAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.KillAll
// (Final, Exec, Native, Public)

void UGBCheatManager::KillAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "KillAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.KillAllEnemies
// (Final, Exec, Native, Public)

void UGBCheatManager::KillAllEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "KillAllEnemies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.KillEveryoneElse
// (Final, Exec, Native, Public)

void UGBCheatManager::KillEveryoneElse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "KillEveryoneElse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.LoadPlayArea
// (Final, Exec, Native, Public)

void UGBCheatManager::LoadPlayArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "LoadPlayArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.LoadReadyRoom
// (Final, Exec, Native, Public)

void UGBCheatManager::LoadReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "LoadReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.NoRecoil
// (Final, Exec, Native, Public)

void UGBCheatManager::NoRecoil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "NoRecoil");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.NoSway
// (Final, Exec, Native, Public)

void UGBCheatManager::NoSway()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "NoSway");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.NoTarget
// (Final, Exec, Native, Public)

void UGBCheatManager::NoTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "NoTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.RunMissionScript
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    ScriptName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::RunMissionScript(const class FString& ScriptName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "RunMissionScript");

	Params::GBCheatManager_RunMissionScript Parms{};

	Parms.ScriptName = std::move(ScriptName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.SaveKitForBot
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    TeamName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BotName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::SaveKitForBot(const class FString& TeamName, const class FString& BotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "SaveKitForBot");

	Params::GBCheatManager_SaveKitForBot Parms{};

	Parms.TeamName = std::move(TeamName);
	Parms.BotName = std::move(BotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.SetCharVoiceId
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    CharVoiceIdAsString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::SetCharVoiceId(const class FString& CharVoiceIdAsString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "SetCharVoiceId");

	Params::GBCheatManager_SetCharVoiceId Parms{};

	Parms.CharVoiceIdAsString = std::move(CharVoiceIdAsString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.SetKit
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    KitName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::SetKit(const class FString& KitName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "SetKit");

	Params::GBCheatManager_SetKit Parms{};

	Parms.KitName = std::move(KitName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.SetTeamElement
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   TeamElement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::SetTeamElement(uint8 TeamElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "SetTeamElement");

	Params::GBCheatManager_SetTeamElement Parms{};

	Parms.TeamElement = TeamElement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.SetTeamId
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::SetTeamId(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "SetTeamId");

	Params::GBCheatManager_SetTeamId Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.SetWaterLevel
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InWaterLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::SetWaterLevel(int32 InWaterLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "SetWaterLevel");

	Params::GBCheatManager_SetWaterLevel Parms{};

	Parms.InWaterLevel = InWaterLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.ZeroSightTo
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   NewZeroDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBCheatManager::ZeroSightTo(int32 NewZeroDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "ZeroSightTo");

	Params::GBCheatManager_ZeroSightTo Parms{};

	Parms.NewZeroDistance = NewZeroDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.TeleportAIToMe
// (Final, Exec, Native, Public, Const)

void UGBCheatManager::TeleportAIToMe() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "TeleportAIToMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBCheatManager.TeleportBotsToMe
// (Final, Exec, Native, Public, Const)

void UGBCheatManager::TeleportBotsToMe() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBCheatManager", "TeleportBotsToMe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBClimatePreset.GetWeatherPresetProperties
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   SelectedWeatherPreset                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherCategory                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            OutWeatherDescription                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void UGBClimatePreset::GetWeatherPresetProperties(const class USkyCreatorWeatherPreset* SelectedWeatherPreset, class FName* OutWeatherCategory, class FName* OutWeatherType, class FText* OutWeatherDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBClimatePreset", "GetWeatherPresetProperties");

	Params::GBClimatePreset_GetWeatherPresetProperties Parms{};

	Parms.SelectedWeatherPreset = SelectedWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeatherCategory != nullptr)
		*OutWeatherCategory = Parms.OutWeatherCategory;

	if (OutWeatherType != nullptr)
		*OutWeatherType = Parms.OutWeatherType;

	if (OutWeatherDescription != nullptr)
		*OutWeatherDescription = std::move(Parms.OutWeatherDescription);
}


// Function GroundBranch.GBClimatePreset.GetAllWeatherPresets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bAllSeasons                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESeason                                 SelectedSeason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USkyCreatorWeatherPreset*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USkyCreatorWeatherPreset*> UGBClimatePreset::GetAllWeatherPresets(bool bAllSeasons, ESeason SelectedSeason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBClimatePreset", "GetAllWeatherPresets");

	Params::GBClimatePreset_GetAllWeatherPresets Parms{};

	Parms.bAllSeasons = bAllSeasons;
	Parms.SelectedSeason = SelectedSeason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBClimatePreset.GetClimateSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBClimateSettings               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBClimateSettings UGBClimatePreset::GetClimateSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBClimatePreset", "GetClimateSettings");

	Params::GBClimatePreset_GetClimateSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBClimatePreset.GetWeatherPresetsForSeason
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESeason                                 SelectedSeason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USkyCreatorWeatherPreset*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USkyCreatorWeatherPreset*> UGBClimatePreset::GetWeatherPresetsForSeason(ESeason SelectedSeason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBClimatePreset", "GetWeatherPresetsForSeason");

	Params::GBClimatePreset_GetWeatherPresetsForSeason Parms{};

	Parms.SelectedSeason = SelectedSeason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBClothing.OnLoadMeshComplete
// (Final, Native, Protected)

void AGBClothing::OnLoadMeshComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBClothing", "OnLoadMeshComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBClothing.OnTakeHit
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      RefBoneName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RefPosPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBClothing::OnTakeHit(const class FName& RefBoneName, const struct FVector& RefPosPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBClothing", "OnTakeHit");

	Params::GBClothing_OnTakeHit Parms{};

	Parms.RefBoneName = RefBoneName;
	Parms.RefPosPosition = std::move(RefPosPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSmartTriggerVolumeBase.LocalPawnEnteredVolume
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            OtherPawn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSmartTriggerVolumeBase::LocalPawnEnteredVolume(class APawn* OtherPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSmartTriggerVolumeBase", "LocalPawnEnteredVolume");

	Params::GBSmartTriggerVolumeBase_LocalPawnEnteredVolume Parms{};

	Parms.OtherPawn = OtherPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSmartTriggerVolumeBase.LocalPawnLeavingVolume
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            OtherPawn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSmartTriggerVolumeBase::LocalPawnLeavingVolume(class APawn* OtherPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSmartTriggerVolumeBase", "LocalPawnLeavingVolume");

	Params::GBSmartTriggerVolumeBase_LocalPawnLeavingVolume Parms{};

	Parms.OtherPawn = OtherPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSmartTriggerVolumeBase.ServerPawnEnteredVolume
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            OtherPawn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSmartTriggerVolumeBase::ServerPawnEnteredVolume(class APawn* OtherPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSmartTriggerVolumeBase", "ServerPawnEnteredVolume");

	Params::GBSmartTriggerVolumeBase_ServerPawnEnteredVolume Parms{};

	Parms.OtherPawn = OtherPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSmartTriggerVolumeBase.ServerPawnLeavingVolume
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            OtherPawn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSmartTriggerVolumeBase::ServerPawnLeavingVolume(class APawn* OtherPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSmartTriggerVolumeBase", "ServerPawnLeavingVolume");

	Params::GBSmartTriggerVolumeBase_ServerPawnLeavingVolume Parms{};

	Parms.OtherPawn = OtherPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBColourBlindnessCameraModifier.ApplyPlayerSettings
// (Final, Native, Protected)
// Parameters:
// class UGBPlayerSettings*                PlayerSettings                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBColourBlindnessCameraModifier::ApplyPlayerSettings(class UGBPlayerSettings* PlayerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBColourBlindnessCameraModifier", "ApplyPlayerSettings");

	Params::GBColourBlindnessCameraModifier_ApplyPlayerSettings Parms{};

	Parms.PlayerSettings = PlayerSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaStaticsLibrary.ActorsToLuaTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULuaState>            LuaStateClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            Actors                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaStaticsLibrary::ActorsToLuaTable(class UObject* WorldContextObject, TSubclassOf<class ULuaState> LuaStateClass, const TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "ActorsToLuaTable");

	Params::GBLuaStaticsLibrary_ActorsToLuaTable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LuaStateClass = LuaStateClass;
	Parms.Actors = std::move(Actors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.BuildRotator
// (Final, Native, Static, Public, HasDefaults)
// Parameters:
// const class ULuaBlueprintPackage*       LuaBlueprintPackage                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaStaticsLibrary::BuildRotator(const class ULuaBlueprintPackage* LuaBlueprintPackage, const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "BuildRotator");

	Params::GBLuaStaticsLibrary_BuildRotator Parms{};

	Parms.LuaBlueprintPackage = LuaBlueprintPackage;
	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.BuildVector
// (Final, Native, Static, Public, HasDefaults)
// Parameters:
// const class ULuaBlueprintPackage*       LuaBlueprintPackage                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Vector                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaStaticsLibrary::BuildVector(const class ULuaBlueprintPackage* LuaBlueprintPackage, const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "BuildVector");

	Params::GBLuaStaticsLibrary_BuildVector Parms{};

	Parms.LuaBlueprintPackage = LuaBlueprintPackage;
	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.GetArgsFromSingle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLuaValue&                 InArg                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FLuaValue>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLuaValue> UGBLuaStaticsLibrary::GetArgsFromSingle(const struct FLuaValue& InArg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "GetArgsFromSingle");

	Params::GBLuaStaticsLibrary_GetArgsFromSingle Parms{};

	Parms.InArg = std::move(InArg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.GetEmptyArgs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FLuaValue>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLuaValue> UGBLuaStaticsLibrary::GetEmptyArgs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "GetEmptyArgs");

	Params::GBLuaStaticsLibrary_GetEmptyArgs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.LuaTableToRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLuaValue&                 InValue                                                (Parm, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGBLuaStaticsLibrary::LuaTableToRotator(const struct FLuaValue& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "LuaTableToRotator");

	Params::GBLuaStaticsLibrary_LuaTableToRotator Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToCharacter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InValue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* UGBLuaStaticsLibrary::LuaValueToCharacter(class UObject* WorldContextObject, const struct FLuaValue& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "LuaValueToCharacter");

	Params::GBLuaStaticsLibrary_LuaValueToCharacter Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToPlayerController
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InValue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGBPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerController* UGBLuaStaticsLibrary::LuaValueToPlayerController(class UObject* WorldContextObject, const struct FLuaValue& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "LuaValueToPlayerController");

	Params::GBLuaStaticsLibrary_LuaValueToPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToPlayerState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InValue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerState* UGBLuaStaticsLibrary::LuaValueToPlayerState(class UObject* WorldContextObject, const struct FLuaValue& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "LuaValueToPlayerState");

	Params::GBLuaStaticsLibrary_LuaValueToPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaStaticsLibrary.LuaValueToScript
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLuaValue&                 InValue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaStaticsLibrary::LuaValueToScript(const struct FLuaValue& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBLuaStaticsLibrary", "LuaValueToScript");

	Params::GBLuaStaticsLibrary_LuaValueToScript Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBObjectiveMarker.ObjectiveUpdated
// (Final, Native, Protected)

void AGBObjectiveMarker::ObjectiveUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "ObjectiveUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBObjectiveMarker.SetObjectiveMarkerSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewObjectiveMarkerSize                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBObjectiveMarker::SetObjectiveMarkerSize(const struct FVector2D& NewObjectiveMarkerSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "SetObjectiveMarkerSize");

	Params::GBObjectiveMarker_SetObjectiveMarkerSize Parms{};

	Parms.NewObjectiveMarkerSize = std::move(NewObjectiveMarkerSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBObjectiveMarker.SetObjectiveMarkerType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       NewObjectiveMarkerType                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBObjectiveMarker::SetObjectiveMarkerType(const class FName NewObjectiveMarkerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "SetObjectiveMarkerType");

	Params::GBObjectiveMarker_SetObjectiveMarkerType Parms{};

	Parms.NewObjectiveMarkerType = NewObjectiveMarkerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBObjectiveMarker.SetObjectiveName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBObjectiveMarker::SetObjectiveName(class FName Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "SetObjectiveName");

	Params::GBObjectiveMarker_SetObjectiveName Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBObjectiveMarker.UpdateObjectiveSprite
// (Final, Native, Protected)

void AGBObjectiveMarker::UpdateObjectiveSprite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "UpdateObjectiveSprite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBObjectiveMarker.GetObjectiveMarkerSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AGBObjectiveMarker::GetObjectiveMarkerSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "GetObjectiveMarkerSize");

	Params::GBObjectiveMarker_GetObjectiveMarkerSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBObjectiveMarker.GetObjectiveMarkerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBObjectiveMarker::GetObjectiveMarkerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "GetObjectiveMarkerType");

	Params::GBObjectiveMarker_GetObjectiveMarkerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBObjectiveMarker.GetObjectiveName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBObjectiveMarker::GetObjectiveName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "GetObjectiveName");

	Params::GBObjectiveMarker_GetObjectiveName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBObjectiveMarker.GetObjectiveSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* AGBObjectiveMarker::GetObjectiveSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBObjectiveMarker", "GetObjectiveSprite");

	Params::GBObjectiveMarker_GetObjectiveSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDialogWidget.NotifyCancelClicked
// (Final, Native, Protected, BlueprintCallable)

void UGBDialogWidget::NotifyCancelClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "NotifyCancelClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.NotifyOkClicked
// (Final, Native, Protected, BlueprintCallable)

void UGBDialogWidget::NotifyOkClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "NotifyOkClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.SetDialogName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      InDialogName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBDialogWidget::SetDialogName(const class FName& InDialogName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "SetDialogName");

	Params::GBDialogWidget_SetDialogName Parms{};

	Parms.InDialogName = InDialogName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.SetMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InMessage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBDialogWidget::SetMessage(const class FText& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "SetMessage");

	Params::GBDialogWidget_SetMessage Parms{};

	Parms.InMessage = std::move(InMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.SetMessageDialogType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EGBMessageDialogType              InMessageDialogType                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBDialogWidget::SetMessageDialogType(const EGBMessageDialogType InMessageDialogType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "SetMessageDialogType");

	Params::GBDialogWidget_SetMessageDialogType Parms{};

	Parms.InMessageDialogType = InMessageDialogType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.SetTerminationTime
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const float                             SecondsBeforeKill                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBDialogWidget::SetTerminationTime(const float SecondsBeforeKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "SetTerminationTime");

	Params::GBDialogWidget_SetTerminationTime Parms{};

	Parms.SecondsBeforeKill = SecondsBeforeKill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.SetTitle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InTitle                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBDialogWidget::SetTitle(const class FText& InTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "SetTitle");

	Params::GBDialogWidget_SetTitle Parms{};

	Parms.InTitle = std::move(InTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDialogWidget.UpdateDisplayFieldsEvent
// (Native, Event, Protected, BlueprintEvent)

void UGBDialogWidget::UpdateDisplayFieldsEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDialogWidget", "UpdateDisplayFieldsEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDirectionalSunlight.SetLightSourceAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSourceAngle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDirectionalSunlight::SetLightSourceAngle(float NewSourceAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDirectionalSunlight", "SetLightSourceAngle");

	Params::GBDirectionalSunlight_SetLightSourceAngle Parms{};

	Parms.NewSourceAngle = NewSourceAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDirectionalSunlight.UpdateCloudScatteredLuminance
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDirectionalSunlight::UpdateCloudScatteredLuminance(const struct FLinearColor& NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDirectionalSunlight", "UpdateCloudScatteredLuminance");

	Params::GBDirectionalSunlight_UpdateCloudScatteredLuminance Parms{};

	Parms.NewScale = std::move(NewScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDirectionalSunlight.GetSavedCloudScatteredLuminance
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor AGBDirectionalSunlight::GetSavedCloudScatteredLuminance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDirectionalSunlight", "GetSavedCloudScatteredLuminance");

	Params::GBDirectionalSunlight_GetSavedCloudScatteredLuminance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMuzzleDevice.GetAudioSignalRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBMuzzleDevice::GetAudioSignalRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMuzzleDevice", "GetAudioSignalRadius");

	Params::GBMuzzleDevice_GetAudioSignalRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMuzzleDevice.GetMuzzleDeviceThread
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBMuzzleDevice::GetMuzzleDeviceThread() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMuzzleDevice", "GetMuzzleDeviceThread");

	Params::GBMuzzleDevice_GetMuzzleDeviceThread Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMuzzleDevice.GetSuppressorSwitchValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBMuzzleDevice::GetSuppressorSwitchValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMuzzleDevice", "GetSuppressorSwitchValue");

	Params::GBMuzzleDevice_GetSuppressorSwitchValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.DisableDoorCompPhysics
// (Final, Native, Protected)

void AGBDoorSwinging::DisableDoorCompPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "DisableDoorCompPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.NetMulticastDestroyDoor
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// const struct FVector_NetQuantize10&     DamageOrigin                                           (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector_NetQuantizeNormal& DamageDir                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::NetMulticastDestroyDoor(const struct FVector_NetQuantize10& DamageOrigin, const struct FVector_NetQuantizeNormal& DamageDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "NetMulticastDestroyDoor");

	Params::GBDoorSwinging_NetMulticastDestroyDoor Parms{};

	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageDir = std::move(DamageDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.NetMulticastUpdateYaw
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// const struct FGBReplicatedSwing&        Swing                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGBDoorSwinging::NetMulticastUpdateYaw(const struct FGBReplicatedSwing& Swing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "NetMulticastUpdateYaw");

	Params::GBDoorSwinging_NetMulticastUpdateYaw Parms{};

	Parms.Swing = std::move(Swing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.OnAdjoiningDoorClosing
// (Final, Native, Protected)
// Parameters:
// class AGBDoorSwinging*                  OtherDoor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::OnAdjoiningDoorClosing(class AGBDoorSwinging* OtherDoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "OnAdjoiningDoorClosing");

	Params::GBDoorSwinging_OnAdjoiningDoorClosing Parms{};

	Parms.OtherDoor = OtherDoor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.OnAdjoiningDoorOpening
// (Final, Native, Protected)
// Parameters:
// class AGBDoorSwinging*                  OtherDoor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::OnAdjoiningDoorOpening(class AGBDoorSwinging* OtherDoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "OnAdjoiningDoorOpening");

	Params::GBDoorSwinging_OnAdjoiningDoorOpening Parms{};

	Parms.OtherDoor = OtherDoor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.OnDoorDestroyedEvent
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   DamageOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DamageDir                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::OnDoorDestroyedEvent(const struct FVector& DamageOrigin, const struct FVector& DamageDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "OnDoorDestroyedEvent");

	Params::GBDoorSwinging_OnDoorDestroyedEvent Parms{};

	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageDir = std::move(DamageDir);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBDoorSwinging.OnPhysicsCollision
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBDoorSwinging::OnPhysicsCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "OnPhysicsCollision");

	Params::GBDoorSwinging_OnPhysicsCollision Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.OnRep_DoorDestroyed
// (Final, Native, Protected)
// Parameters:
// bool                                    bLastDoorDestroyed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::OnRep_DoorDestroyed(bool bLastDoorDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "OnRep_DoorDestroyed");

	Params::GBDoorSwinging_OnRep_DoorDestroyed Parms{};

	Parms.bLastDoorDestroyed = bLastDoorDestroyed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.OnRep_ReplicatedSwing
// (Final, Native, Protected)

void AGBDoorSwinging::OnRep_ReplicatedSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "OnRep_ReplicatedSwing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.ResetAngularDamping
// (Final, Native, Protected)

void AGBDoorSwinging::ResetAngularDamping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "ResetAngularDamping");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.SetAdjoiningDoor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBDoorSwinging*                  NewAdjoiningDoor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::SetAdjoiningDoor(class AGBDoorSwinging* NewAdjoiningDoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "SetAdjoiningDoor");

	Params::GBDoorSwinging_SetAdjoiningDoor Parms{};

	Parms.NewAdjoiningDoor = NewAdjoiningDoor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.SetAdjoiningDoorBehaviour
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBAdjoiningDoorBehaviour               NewAdjoiningDoorBehaviour                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::SetAdjoiningDoorBehaviour(EGBAdjoiningDoorBehaviour NewAdjoiningDoorBehaviour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "SetAdjoiningDoorBehaviour");

	Params::GBDoorSwinging_SetAdjoiningDoorBehaviour Parms{};

	Parms.NewAdjoiningDoorBehaviour = NewAdjoiningDoorBehaviour;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.SetDoorYawAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewYawAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::SetDoorYawAngle(float NewYawAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "SetDoorYawAngle");

	Params::GBDoorSwinging_SetDoorYawAngle Parms{};

	Parms.NewYawAngle = NewYawAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.SetDoorYawSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewYawSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDoorSwinging::SetDoorYawSpeed(float NewYawSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "SetDoorYawSpeed");

	Params::GBDoorSwinging_SetDoorYawSpeed Parms{};

	Parms.NewYawSpeed = NewYawSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.SetupDoor
// (Final, Native, Protected, BlueprintCallable)

void AGBDoorSwinging::SetupDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "SetupDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.UpdateAcousticPortal
// (Final, Native, Protected, BlueprintCallable)

void AGBDoorSwinging::UpdateAcousticPortal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "UpdateAcousticPortal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.UpdateAcousticPortalInternal
// (Final, Native, Protected)

void AGBDoorSwinging::UpdateAcousticPortalInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "UpdateAcousticPortalInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDoorSwinging.GetControllerRelativeSwingDir
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AController*                Controller                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBPlayerRelativeSwingDir               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBPlayerRelativeSwingDir AGBDoorSwinging::GetControllerRelativeSwingDir(const class AController* Controller) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "GetControllerRelativeSwingDir");

	Params::GBDoorSwinging_GetControllerRelativeSwingDir Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.GetDoorScale
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBDoorSwinging::GetDoorScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "GetDoorScale");

	Params::GBDoorSwinging_GetDoorScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.GetDoorYawAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBDoorSwinging::GetDoorYawAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "GetDoorYawAngle");

	Params::GBDoorSwinging_GetDoorYawAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.GetDoorYawSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBDoorSwinging::GetDoorYawSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "GetDoorYawSpeed");

	Params::GBDoorSwinging_GetDoorYawSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.IsClosed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBDoorSwinging::IsClosed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "IsClosed");

	Params::GBDoorSwinging_IsClosed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.IsClosing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBDoorSwinging::IsClosing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "IsClosing");

	Params::GBDoorSwinging_IsClosing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.IsDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBDoorSwinging::IsDestroyed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "IsDestroyed");

	Params::GBDoorSwinging_IsDestroyed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.IsOpenedEnoughForAIToUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBDoorSwinging::IsOpenedEnoughForAIToUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "IsOpenedEnoughForAIToUse");

	Params::GBDoorSwinging_IsOpenedEnoughForAIToUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDoorSwinging.IsOpening
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBDoorSwinging::IsOpening() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDoorSwinging", "IsOpening");

	Params::GBDoorSwinging_IsOpening Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDroppedInvItem.OnAssocatedInvItemSetEvent
// (Event, Protected, BlueprintEvent)

void AGBDroppedInvItem::OnAssocatedInvItemSetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "OnAssocatedInvItemSetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBDroppedInvItem.OnPhysicsCollision
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBDroppedInvItem::OnPhysicsCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "OnPhysicsCollision");

	Params::GBDroppedInvItem_OnPhysicsCollision Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDroppedInvItem.OnRep_AssociatedInvItem
// (Native, Protected)

void AGBDroppedInvItem::OnRep_AssociatedInvItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "OnRep_AssociatedInvItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDroppedInvItem.RescueImportant
// (Final, Native, Protected)

void AGBDroppedInvItem::RescueImportant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "RescueImportant");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDroppedInvItem.SetAssociatedInvItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       NewAssociatedInvItem                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBDroppedInvItem::SetAssociatedInvItem(class AGBInvItem* NewAssociatedInvItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "SetAssociatedInvItem");

	Params::GBDroppedInvItem_SetAssociatedInvItem Parms{};

	Parms.NewAssociatedInvItem = NewAssociatedInvItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBDroppedInvItem.GetAssociatedInvItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBDroppedInvItem::GetAssociatedInvItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "GetAssociatedInvItem");

	Params::GBDroppedInvItem_GetAssociatedInvItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBDroppedInvItem.IsImportant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBDroppedInvItem::IsImportant() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBDroppedInvItem", "IsImportant");

	Params::GBDroppedInvItem_IsImportant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEjectComponent.ActivateShell
// (Final, Native, Public, BlueprintCallable)

void UGBEjectComponent::ActivateShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEjectComponent", "ActivateShell");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBEjectComponent.ActivateSmoke
// (Final, Native, Public, BlueprintCallable)

void UGBEjectComponent::ActivateSmoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEjectComponent", "ActivateSmoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBEjectComponent.DeActivateShell
// (Final, Native, Public, BlueprintCallable)

void UGBEjectComponent::DeActivateShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEjectComponent", "DeActivateShell");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBEjectComponent.DeActivateSmoke
// (Final, Native, Public, BlueprintCallable)

void UGBEjectComponent::DeActivateSmoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEjectComponent", "DeActivateSmoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBEjectComponent.IsManuallyEjected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBEjectComponent::IsManuallyEjected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEjectComponent", "IsManuallyEjected");

	Params::GBEjectComponent_IsManuallyEjected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayAbility.K2_AuthoritativeCancelAbility
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGBGameplayAbility::K2_AuthoritativeCancelAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "K2_AuthoritativeCancelAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayAbility.K2_AuthoritativeEndAbility
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UGBGameplayAbility::K2_AuthoritativeEndAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "K2_AuthoritativeEndAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayAbility.K2_LocalCancelAbility
// (Final, Native, Public, BlueprintCallable)

void UGBGameplayAbility::K2_LocalCancelAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "K2_LocalCancelAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayAbility.K2_LocalEndAbility
// (Final, Native, Public, BlueprintCallable)

void UGBGameplayAbility::K2_LocalEndAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "K2_LocalEndAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayAbility.GetAvatarKytController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBKytController*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKytController* UGBGameplayAbility::GetAvatarKytController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "GetAvatarKytController");

	Params::GBGameplayAbility_GetAvatarKytController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayAbility.GetCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* UGBGameplayAbility::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "GetCharacter");

	Params::GBGameplayAbility_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayAbility.GetOwnerKytController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBKytController*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKytController* UGBGameplayAbility::GetOwnerKytController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "GetOwnerKytController");

	Params::GBGameplayAbility_GetOwnerKytController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayAbility.IsLocallyControlledPlayer
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayAbility::IsLocallyControlledPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameplayAbility", "IsLocallyControlledPlayer");

	Params::GBGameplayAbility_IsLocallyControlledPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEvent.GetEventManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGBEventManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBEventManager* AGBEvent::GetEventManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEvent", "GetEventManager");

	Params::GBEvent_GetEventManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEvent.RemoveFromActiveEvents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBEvent::RemoveFromActiveEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEvent", "RemoveFromActiveEvents");

	Params::GBEvent_RemoveFromActiveEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEventManager.GetActiveEventsByClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBEvent>             Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBEvent*>*                OutEvents                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBEventManager::GetActiveEventsByClass(TSubclassOf<class AGBEvent> Class_0, TArray<class AGBEvent*>* OutEvents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEventManager", "GetActiveEventsByClass");

	Params::GBEventManager_GetActiveEventsByClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEvents != nullptr)
		*OutEvents = std::move(Parms.OutEvents);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEventManager.Update
// (Final, Native, Public, BlueprintCallable)

void AGBEventManager::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEventManager", "Update");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBNavLinkProxy.OnNavigationGenerationFinished
// (Final, Native, Protected)
// Parameters:
// class ANavigationData*                  NavData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBNavLinkProxy::OnNavigationGenerationFinished(class ANavigationData* NavData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBNavLinkProxy", "OnNavigationGenerationFinished");

	Params::GBNavLinkProxy_OnNavigationGenerationFinished Parms{};

	Parms.NavData = NavData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBNavLinkProxy.SmartLinkReached
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           Agent                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Destination                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBNavLinkProxy::SmartLinkReached(class AActor* Agent, const struct FVector& Destination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBNavLinkProxy", "SmartLinkReached");

	Params::GBNavLinkProxy_SmartLinkReached Parms{};

	Parms.Agent = Agent;
	Parms.Destination = std::move(Destination);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBNavLinkProxy_Door.SetDoorRef
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewDoorRef                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBNavLinkProxy_Door::SetDoorRef(class AActor* NewDoorRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBNavLinkProxy_Door", "SetDoorRef");

	Params::GBNavLinkProxy_Door_SetDoorRef Parms{};

	Parms.NewDoorRef = NewDoorRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBNavLinkProxy_Door.GetDoorRef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGBNavLinkProxy_Door::GetDoorRef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBNavLinkProxy_Door", "GetDoorRef");

	Params::GBNavLinkProxy_Door_GetDoorRef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEventSpawnBehavior.SpawnEvent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBEvent*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBEvent* UGBEventSpawnBehavior::SpawnEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEventSpawnBehavior", "SpawnEvent");

	Params::GBEventSpawnBehavior_SpawnEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEventSpawnBehavior.CanSpawn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBEventSpawnBehavior::CanSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEventSpawnBehavior", "CanSpawn");

	Params::GBEventSpawnBehavior_CanSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEventSpawnBehavior.GetEventManager
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBEventManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBEventManager* UGBEventSpawnBehavior::GetEventManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEventSpawnBehavior", "GetEventManager");

	Params::GBEventSpawnBehavior_GetEventManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBEventSpawnBehavior.GetWorld
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UGBEventSpawnBehavior::GetWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBEventSpawnBehavior", "GetWorld");

	Params::GBEventSpawnBehavior_GetWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailComponent.GetOrientationRailTypeTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGBRailComponent::GetOrientationRailTypeTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailComponent", "GetOrientationRailTypeTag");

	Params::GBRailComponent_GetOrientationRailTypeTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailComponent.GetRailComponentTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBRailComponent::GetRailComponentTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailComponent", "GetRailComponentTags");

	Params::GBRailComponent_GetRailComponentTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailComponent.GetRecoilSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBRailComponent::GetRecoilSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailComponent", "GetRecoilSlots");

	Params::GBRailComponent_GetRecoilSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExternalMagazineComponent.FindCompatibleMagazine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBMagazine*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBMagazine* UGBExternalMagazineComponent::FindCompatibleMagazine(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "FindCompatibleMagazine");

	Params::GBExternalMagazineComponent_FindCompatibleMagazine Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExternalMagazineComponent.OnRep_BoltHeldOpen
// (Final, Native, Protected)

void UGBExternalMagazineComponent::OnRep_BoltHeldOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "OnRep_BoltHeldOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExternalMagazineComponent.OnRep_Magazine
// (Final, Native, Protected)

void UGBExternalMagazineComponent::OnRep_Magazine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "OnRep_Magazine");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExternalMagazineComponent.SetBoltHeldOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBoltIsHeldOpen                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBExternalMagazineComponent::SetBoltHeldOpen(bool bNewBoltIsHeldOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "SetBoltHeldOpen");

	Params::GBExternalMagazineComponent_SetBoltHeldOpen Parms{};

	Parms.bNewBoltIsHeldOpen = bNewBoltIsHeldOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExternalMagazineComponent.SetChamberedRound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBBulletProjectile>  NewChamberedRound                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBExternalMagazineComponent::SetChamberedRound(TSubclassOf<class AGBBulletProjectile> NewChamberedRound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "SetChamberedRound");

	Params::GBExternalMagazineComponent_SetChamberedRound Parms{};

	Parms.NewChamberedRound = NewChamberedRound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExternalMagazineComponent.SetIsFiringFromOpenBolt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsFiringFromOpenBolt                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBExternalMagazineComponent::SetIsFiringFromOpenBolt(bool bNewIsFiringFromOpenBolt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "SetIsFiringFromOpenBolt");

	Params::GBExternalMagazineComponent_SetIsFiringFromOpenBolt Parms{};

	Parms.bNewIsFiringFromOpenBolt = bNewIsFiringFromOpenBolt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExternalMagazineComponent.GetBoltHeldOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBExternalMagazineComponent::GetBoltHeldOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "GetBoltHeldOpen");

	Params::GBExternalMagazineComponent_GetBoltHeldOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExternalMagazineComponent.GetChamberedRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletProjectile>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletProjectile> UGBExternalMagazineComponent::GetChamberedRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "GetChamberedRound");

	Params::GBExternalMagazineComponent_GetChamberedRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExternalMagazineComponent.GetIsFiringFromOpenBolt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBExternalMagazineComponent::GetIsFiringFromOpenBolt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "GetIsFiringFromOpenBolt");

	Params::GBExternalMagazineComponent_GetIsFiringFromOpenBolt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExternalMagazineComponent.GetMagazine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBMagazine*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBMagazine* UGBExternalMagazineComponent::GetMagazine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "GetMagazine");

	Params::GBExternalMagazineComponent_GetMagazine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExternalMagazineComponent.GetMagazineClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBMagazine>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBMagazine> UGBExternalMagazineComponent::GetMagazineClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExternalMagazineComponent", "GetMagazineClass");

	Params::GBExternalMagazineComponent_GetMagazineClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerSettings.ApplyNVIDIASettings
// (Final, Native, Public)

void UGBPlayerSettings::ApplyNVIDIASettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "ApplyNVIDIASettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.ApplySettings
// (Final, Native, Public, BlueprintCallable)

void UGBPlayerSettings::ApplySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "ApplySettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.BindSceneViewportResized
// (Final, Native, Protected)

void UGBPlayerSettings::BindSceneViewportResized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "BindSceneViewportResized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.HideDialog
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      DialogName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::HideDialog(const class FName& DialogName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "HideDialog");

	Params::GBPlayerSettings_HideDialog Parms{};

	Parms.DialogName = DialogName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.LoadSettings
// (Final, Native, Public, BlueprintCallable)

void UGBPlayerSettings::LoadSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "LoadSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.ResetHiddenDiaglogs
// (Final, Native, Public, BlueprintCallable)

void UGBPlayerSettings::ResetHiddenDiaglogs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "ResetHiddenDiaglogs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.ResetHints
// (Final, Native, Public, BlueprintCallable)

void UGBPlayerSettings::ResetHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "ResetHints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.SceneViewportResized
// (Final, Native, Protected, HasDefaults)
// Parameters:
// const struct FVector2D&                 ViewportSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::SceneViewportResized(const struct FVector2D& ViewportSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "SceneViewportResized");

	Params::GBPlayerSettings_SceneViewportResized Parms{};

	Parms.ViewportSize = std::move(ViewportSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.SetNVGVerticalScreenExtent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewNVGVerticalScreenExtent                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::SetNVGVerticalScreenExtent(float NewNVGVerticalScreenExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "SetNVGVerticalScreenExtent");

	Params::GBPlayerSettings_SetNVGVerticalScreenExtent Parms{};

	Parms.NewNVGVerticalScreenExtent = NewNVGVerticalScreenExtent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.SetPIPScopeResolutionScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewPIPScopeResolutionScale                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::SetPIPScopeResolutionScale(float NewPIPScopeResolutionScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "SetPIPScopeResolutionScale");

	Params::GBPlayerSettings_SetPIPScopeResolutionScale Parms{};

	Parms.NewPIPScopeResolutionScale = NewPIPScopeResolutionScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.SetPlayerCallSign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewPlayerCallSign                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::SetPlayerCallSign(const class FString& NewPlayerCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "SetPlayerCallSign");

	Params::GBPlayerSettings_SetPlayerCallSign Parms{};

	Parms.NewPlayerCallSign = std::move(NewPlayerCallSign);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.SetPlayerName
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewPlayerName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::SetPlayerName(const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "SetPlayerName");

	Params::GBPlayerSettings_SetPlayerName Parms{};

	Parms.NewPlayerName = std::move(NewPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.SetPlayerUseElementCallSign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewPlayerUseElementCallSign                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerSettings::SetPlayerUseElementCallSign(bool bNewPlayerUseElementCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "SetPlayerUseElementCallSign");

	Params::GBPlayerSettings_SetPlayerUseElementCallSign Parms{};

	Parms.bNewPlayerUseElementCallSign = bNewPlayerUseElementCallSign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.UpdateFOVDefault
// (Final, Native, Public)

void UGBPlayerSettings::UpdateFOVDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "UpdateFOVDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerSettings.CanShowDialog
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      DialogName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBPlayerSettings::CanShowDialog(const class FName& DialogName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "CanShowDialog");

	Params::GBPlayerSettings_CanShowDialog Parms{};

	Parms.DialogName = DialogName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerSettings.GetPIPScopeResolutionScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBPlayerSettings::GetPIPScopeResolutionScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "GetPIPScopeResolutionScale");

	Params::GBPlayerSettings_GetPIPScopeResolutionScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerSettings.GetPlayerCallSign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBPlayerSettings::GetPlayerCallSign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "GetPlayerCallSign");

	Params::GBPlayerSettings_GetPlayerCallSign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerSettings.GetPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBPlayerSettings::GetPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "GetPlayerName");

	Params::GBPlayerSettings_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerSettings.GetPlayerUseElementCallSign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBPlayerSettings::GetPlayerUseElementCallSign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "GetPlayerUseElementCallSign");

	Params::GBPlayerSettings_GetPlayerUseElementCallSign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerSettings.HintValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             HintName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBPlayerSettings::HintValid(class FName HintName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerSettings", "HintValid");

	Params::GBPlayerSettings_HintValid Parms{};

	Parms.HintName = HintName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameTrigger.GetOverlaps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AGBCharacter*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBCharacter*> AGBGameTrigger::GetOverlaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameTrigger", "GetOverlaps");

	Params::GBGameTrigger_GetOverlaps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExtractionPoint.SetSequenceToPlayAfterExfil
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class ALevelSequenceActor>&InLevelSequenceActor                                   (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBExtractionPoint::SetSequenceToPlayAfterExfil(const TSoftObjectPtr<class ALevelSequenceActor>& InLevelSequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExtractionPoint", "SetSequenceToPlayAfterExfil");

	Params::GBExtractionPoint_SetSequenceToPlayAfterExfil Parms{};

	Parms.InLevelSequenceActor = InLevelSequenceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExtractionPoint.SetSequenceToPlayBeforeExfil
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class ALevelSequenceActor>&InLevelSequenceActor                                   (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBExtractionPoint::SetSequenceToPlayBeforeExfil(const TSoftObjectPtr<class ALevelSequenceActor>& InLevelSequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExtractionPoint", "SetSequenceToPlayBeforeExfil");

	Params::GBExtractionPoint_SetSequenceToPlayBeforeExfil Parms{};

	Parms.InLevelSequenceActor = InLevelSequenceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBExtractionPoint.GetSequenceToPlayAfterExfil
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBExtractionPoint::GetSequenceToPlayAfterExfil() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExtractionPoint", "GetSequenceToPlayAfterExfil");

	Params::GBExtractionPoint_GetSequenceToPlayAfterExfil Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBExtractionPoint.GetSequenceToPlayBeforeExfil
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBExtractionPoint::GetSequenceToPlayBeforeExfil() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBExtractionPoint", "GetSequenceToPlayBeforeExfil");

	Params::GBExtractionPoint_GetSequenceToPlayBeforeExfil Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameTriggerBase.OnNonTeamBeginOverlap
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameTriggerBase::OnNonTeamBeginOverlap(class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameTriggerBase", "OnNonTeamBeginOverlap");

	Params::GBGameTriggerBase_OnNonTeamBeginOverlap Parms{};

	Parms.GBCharacter = GBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameTriggerBase.OnNonTeamEndOverlap
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameTriggerBase::OnNonTeamEndOverlap(class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameTriggerBase", "OnNonTeamEndOverlap");

	Params::GBGameTriggerBase_OnNonTeamEndOverlap Parms{};

	Parms.GBCharacter = GBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameTriggerBase.OnTeamBeginOverlap
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameTriggerBase::OnTeamBeginOverlap(class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameTriggerBase", "OnTeamBeginOverlap");

	Params::GBGameTriggerBase_OnTeamBeginOverlap Parms{};

	Parms.GBCharacter = GBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameTriggerBase.OnTeamEndOverlap
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameTriggerBase::OnTeamEndOverlap(class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameTriggerBase", "OnTeamEndOverlap");

	Params::GBGameTriggerBase_OnTeamEndOverlap Parms{};

	Parms.GBCharacter = GBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.AIReload
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ReloadType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::AIReload(class FName ReloadType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "AIReload");

	Params::GBFirearm_AIReload Parms{};

	Parms.ReloadType = ReloadType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.ChangeFiringModeIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   dir                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBFirearm::ChangeFiringModeIndex(int32 dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "ChangeFiringModeIndex");

	Params::GBFirearm_ChangeFiringModeIndex Parms{};

	Parms.dir = dir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.ChangeSightLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   dir                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::ChangeSightLine(int32 dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "ChangeSightLine");

	Params::GBFirearm_ChangeSightLine Parms{};

	Parms.dir = dir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.FireShot
// (Final, Native, Public, BlueprintCallable)

void AGBFirearm::FireShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "FireShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.GetEmptyHolster
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBHolster*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBHolster* AGBFirearm::GetEmptyHolster(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetEmptyHolster");

	Params::GBFirearm_GetEmptyHolster Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetEmptySlingPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBFirearm::GetEmptySlingPoint(class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetEmptySlingPoint");

	Params::GBFirearm_GetEmptySlingPoint Parms{};

	Parms.GBCharacter = GBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFirearmAnimInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBFirearmAnimInstance*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBFirearmAnimInstance* AGBFirearm::GetFirearmAnimInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFirearmAnimInstance");

	Params::GBFirearm_GetFirearmAnimInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFirearmForwardVector
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBFirearm::GetFirearmForwardVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFirearmForwardVector");

	Params::GBFirearm_GetFirearmForwardVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFiringModeByString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FiringModeString                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBFirearm::GetFiringModeByString(const class FString& FiringModeString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFiringModeByString");

	Params::GBFirearm_GetFiringModeByString Parms{};

	Parms.FiringModeString = std::move(FiringModeString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.OnBecomeViewTarget
// (Final, Native, Protected)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::OnBecomeViewTarget(class APlayerController* PlayerController, class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "OnBecomeViewTarget");

	Params::GBFirearm_OnBecomeViewTarget Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.OnEndViewTarget
// (Final, Native, Protected)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::OnEndViewTarget(class APlayerController* PlayerController, class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "OnEndViewTarget");

	Params::GBFirearm_OnEndViewTarget Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.OnRep_CurrentSight
// (Final, Native, Protected)
// Parameters:
// class UGBSightComponent*                LastActiveSightComponent                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::OnRep_CurrentSight(class UGBSightComponent* LastActiveSightComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "OnRep_CurrentSight");

	Params::GBFirearm_OnRep_CurrentSight Parms{};

	Parms.LastActiveSightComponent = LastActiveSightComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.OnRep_FiringModeIndex
// (Final, Native, Public)

void AGBFirearm::OnRep_FiringModeIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "OnRep_FiringModeIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.PlayFiringSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             FirstPersonSoundName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ThirdPersonSoundName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrackPlayingID                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::PlayFiringSound(class FName FirstPersonSoundName, class FName ThirdPersonSoundName, bool bTrackPlayingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "PlayFiringSound");

	Params::GBFirearm_PlayFiringSound Parms{};

	Parms.FirstPersonSoundName = FirstPersonSoundName;
	Parms.ThirdPersonSoundName = ThirdPersonSoundName;
	Parms.bTrackPlayingID = bTrackPlayingID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.PlayNonFiringSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             FirstPersonSoundName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ThirdPersonSoundName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::PlayNonFiringSound(class FName FirstPersonSoundName, class FName ThirdPersonSoundName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "PlayNonFiringSound");

	Params::GBFirearm_PlayNonFiringSound Parms{};

	Parms.FirstPersonSoundName = FirstPersonSoundName;
	Parms.ThirdPersonSoundName = ThirdPersonSoundName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.ServerSetCurrentSight
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UGBSightComponent*                NewSight                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::ServerSetCurrentSight(class UGBSightComponent* NewSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "ServerSetCurrentSight");

	Params::GBFirearm_ServerSetCurrentSight Parms{};

	Parms.NewSight = NewSight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.ServerSetFiringModeIndex
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   NewFiringMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::ServerSetFiringModeIndex(uint8 NewFiringMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "ServerSetFiringModeIndex");

	Params::GBFirearm_ServerSetFiringModeIndex Parms{};

	Parms.NewFiringMode = NewFiringMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.SetCurrentSight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBSightComponent*                NewSight                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::SetCurrentSight(class UGBSightComponent* NewSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "SetCurrentSight");

	Params::GBFirearm_SetCurrentSight Parms{};

	Parms.NewSight = NewSight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.SetFiringModeByString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FiringModeString                                       (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::SetFiringModeByString(const class FString& FiringModeString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "SetFiringModeByString");

	Params::GBFirearm_SetFiringModeByString Parms{};

	Parms.FiringModeString = std::move(FiringModeString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.SetFiringModeIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewFiringModeIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::SetFiringModeIndex(uint8 NewFiringModeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "SetFiringModeIndex");

	Params::GBFirearm_SetFiringModeIndex Parms{};

	Parms.NewFiringModeIndex = NewFiringModeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.SetupCollisionTraceEndOffset
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBFirearm::SetupCollisionTraceEndOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "SetupCollisionTraceEndOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.SpatialSoundSphereBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBFirearm::SpatialSoundSphereBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "SpatialSoundSphereBeginOverlap");

	Params::GBFirearm_SpatialSoundSphereBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.SpatialSoundSphereEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::SpatialSoundSphereEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "SpatialSoundSphereEndOverlap");

	Params::GBFirearm_SpatialSoundSphereEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.StopFiringSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             FirstPersonSoundName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ThirdPersonSoundName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::StopFiringSound(class FName FirstPersonSoundName, class FName ThirdPersonSoundName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "StopFiringSound");

	Params::GBFirearm_StopFiringSound Parms{};

	Parms.FirstPersonSoundName = FirstPersonSoundName;
	Parms.ThirdPersonSoundName = ThirdPersonSoundName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.UseRound
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBFirearm::UseRound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "UseRound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.ZeroCurrentSightComp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGBSightComponent*                SightComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBFirearm::ZeroCurrentSightComp(class UGBSightComponent* SightComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "ZeroCurrentSightComp");

	Params::GBFirearm_ZeroCurrentSightComp Parms{};

	Parms.SightComp = SightComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearm.GetBulletProjectileClass
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UGBBarrelComponent*         Barrel                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AGBBulletProjectile>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletProjectile> AGBFirearm::GetBulletProjectileClass(const class UGBBarrelComponent* Barrel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetBulletProjectileClass");

	Params::GBFirearm_GetBulletProjectileClass Parms{};

	Parms.Barrel = Barrel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetBurstCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBFirearm::GetBurstCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetBurstCount");

	Params::GBFirearm_GetBurstCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetCollisionTraceEndOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBFirearm::GetCollisionTraceEndOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetCollisionTraceEndOffset");

	Params::GBFirearm_GetCollisionTraceEndOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetCurrentSightMagnification
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBFirearm::GetCurrentSightMagnification() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetCurrentSightMagnification");

	Params::GBFirearm_GetCurrentSightMagnification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFirearmSoundType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBFirearm::GetFirearmSoundType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFirearmSoundType");

	Params::GBFirearm_GetFirearmSoundType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFirearmTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform AGBFirearm::GetFirearmTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFirearmTransform");

	Params::GBFirearm_GetFirearmTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFireModeSwitchValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBFirearm::GetFireModeSwitchValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFireModeSwitchValue");

	Params::GBFirearm_GetFireModeSwitchValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFiringModeIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBFirearm::GetFiringModeIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFiringModeIndex");

	Params::GBFirearm_GetFiringModeIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetFiringModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FFiringModeData>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFiringModeData> AGBFirearm::GetFiringModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetFiringModes");

	Params::GBFirearm_GetFiringModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetGunshotComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkComponent*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkComponent* AGBFirearm::GetGunshotComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetGunshotComp");

	Params::GBFirearm_GetGunshotComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetInsigatorIsLocallyViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBFirearm::GetInsigatorIsLocallyViewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetInsigatorIsLocallyViewed");

	Params::GBFirearm_GetInsigatorIsLocallyViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetInteractComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkComponent*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkComponent* AGBFirearm::GetInteractComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetInteractComp");

	Params::GBFirearm_GetInteractComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetLastTriggerPullTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBFirearm::GetLastTriggerPullTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetLastTriggerPullTime");

	Params::GBFirearm_GetLastTriggerPullTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetMaxGripRelativeX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBFirearm::GetMaxGripRelativeX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetMaxGripRelativeX");

	Params::GBFirearm_GetMaxGripRelativeX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetMinSightRelativeX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBFirearm::GetMinSightRelativeX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetMinSightRelativeX");

	Params::GBFirearm_GetMinSightRelativeX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetMuzzleOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBFirearm::GetMuzzleOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetMuzzleOffset");

	Params::GBFirearm_GetMuzzleOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetNumSightLines
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBFirearm::GetNumSightLines() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetNumSightLines");

	Params::GBFirearm_GetNumSightLines Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetRateOfFire
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBFirearm::GetRateOfFire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetRateOfFire");

	Params::GBFirearm_GetRateOfFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetRecoilData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIsEngaged                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBRecoilData                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBRecoilData AGBFirearm::GetRecoilData(bool bIsEngaged) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetRecoilData");

	Params::GBFirearm_GetRecoilData Parms{};

	Parms.bIsEngaged = bIsEngaged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetSuppressorSwitchValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBFirearm::GetSuppressorSwitchValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetSuppressorSwitchValue");

	Params::GBFirearm_GetSuppressorSwitchValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetTotalAvailableCount
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBFirearm::GetTotalAvailableCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetTotalAvailableCount");

	Params::GBFirearm_GetTotalAvailableCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.GetTracerColourIndexForShot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGBBarrelComponent*         Barrel                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBFirearm::GetTracerColourIndexForShot(const class UGBBarrelComponent* Barrel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "GetTracerColourIndexForShot");

	Params::GBFirearm_GetTracerColourIndexForShot Parms{};

	Parms.Barrel = Barrel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.IsEmpty
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBFirearm::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "IsEmpty");

	Params::GBFirearm_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearm.IsFingerOnTrigger
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBFirearm::IsFingerOnTrigger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearm", "IsFingerOnTrigger");

	Params::GBFirearm_IsFingerOnTrigger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFirearmAnimInstance.OnBoltHeldOpenUpdated
// (Final, Native, Protected)
// Parameters:
// const class UGBAmmunitionFeedComponent* AmmunitionFeedComp                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFirearmAnimInstance::OnBoltHeldOpenUpdated(const class UGBAmmunitionFeedComponent* AmmunitionFeedComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearmAnimInstance", "OnBoltHeldOpenUpdated");

	Params::GBFirearmAnimInstance_OnBoltHeldOpenUpdated Parms{};

	Parms.AmmunitionFeedComp = AmmunitionFeedComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFirearmAnimInstance.OnFiringModeIndexChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   FiringModeIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFirearmAnimInstance::OnFiringModeIndexChanged(uint8 FiringModeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearmAnimInstance", "OnFiringModeIndexChanged");

	Params::GBFirearmAnimInstance_OnFiringModeIndexChanged Parms{};

	Parms.FiringModeIndex = FiringModeIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBFirearmAnimInstance.OnIronSightZeroing
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   ZeroRelativeToSight                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SightLocationOffset                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  SightRotationOffset                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGBFirearmAnimInstance::OnIronSightZeroing(const struct FVector& ZeroRelativeToSight, const struct FVector& SightLocationOffset, const struct FRotator& SightRotationOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearmAnimInstance", "OnIronSightZeroing");

	Params::GBFirearmAnimInstance_OnIronSightZeroing Parms{};

	Parms.ZeroRelativeToSight = std::move(ZeroRelativeToSight);
	Parms.SightLocationOffset = std::move(SightLocationOffset);
	Parms.SightRotationOffset = std::move(SightRotationOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBFirearmAnimInstance.OnSetFrontSightPostHeightOffset
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   FrontSightPostHeightOffset                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFirearmAnimInstance::OnSetFrontSightPostHeightOffset(float FrontSightPostHeightOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearmAnimInstance", "OnSetFrontSightPostHeightOffset");

	Params::GBFirearmAnimInstance_OnSetFrontSightPostHeightOffset Parms{};

	Parms.FrontSightPostHeightOffset = FrontSightPostHeightOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBFirearmAnimInstance.IsLocal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFirearmAnimInstance::IsLocal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFirearmAnimInstance", "IsLocal");

	Params::GBFirearmAnimInstance_IsLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBItemCameraModifier.OnAssociatedItemDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBItemCameraModifier::OnAssociatedItemDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemCameraModifier", "OnAssociatedItemDestroyed");

	Params::GBItemCameraModifier_OnAssociatedItemDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemCameraModifier.SetAssociatedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBItemCameraModifier::SetAssociatedItem(class AGBInvItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemCameraModifier", "SetAssociatedItem");

	Params::GBItemCameraModifier_SetAssociatedItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemCameraModifier.GetAssociatedItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBItemCameraModifier::GetAssociatedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemCameraModifier", "GetAssociatedItem");

	Params::GBItemCameraModifier_GetAssociatedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.AdjustReticleBrightnessLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   dir                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::AdjustReticleBrightnessLevel(int32 dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "AdjustReticleBrightnessLevel");

	Params::GBSightComponent_AdjustReticleBrightnessLevel Parms{};

	Parms.dir = dir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.OnEndViewTarget
// (Final, Native, Public)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::OnEndViewTarget(class APlayerController* PlayerController, class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "OnEndViewTarget");

	Params::GBSightComponent_OnEndViewTarget Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.OnRep_MagnificationLevel
// (Final, Native, Protected)

void UGBSightComponent::OnRep_MagnificationLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "OnRep_MagnificationLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.OnRep_ReticleBrightness
// (Final, Native, Protected)

void UGBSightComponent::OnRep_ReticleBrightness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "OnRep_ReticleBrightness");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.OnRep_ReticleColourIndex
// (Final, Native, Protected)

void UGBSightComponent::OnRep_ReticleColourIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "OnRep_ReticleColourIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.OnRep_SightLineInfo
// (Final, Native, Protected)

void UGBSightComponent::OnRep_SightLineInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "OnRep_SightLineInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.ServerSetMagnificationLevel
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// float                                   NewMagnificationLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::ServerSetMagnificationLevel(float NewMagnificationLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "ServerSetMagnificationLevel");

	Params::GBSightComponent_ServerSetMagnificationLevel Parms{};

	Parms.NewMagnificationLevel = NewMagnificationLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.ServerSetReticleBrightnessLevel
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   NewReticleBrightnessLevel                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::ServerSetReticleBrightnessLevel(uint8 NewReticleBrightnessLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "ServerSetReticleBrightnessLevel");

	Params::GBSightComponent_ServerSetReticleBrightnessLevel Parms{};

	Parms.NewReticleBrightnessLevel = NewReticleBrightnessLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.ServerSetReticleColourIndex
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// uint8                                   NewReticleColourIndex                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::ServerSetReticleColourIndex(uint8 NewReticleColourIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "ServerSetReticleColourIndex");

	Params::GBSightComponent_ServerSetReticleColourIndex Parms{};

	Parms.NewReticleColourIndex = NewReticleColourIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.ServerSetZeroDistance
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const uint16                            NewZeroDistance                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::ServerSetZeroDistance(const uint16 NewZeroDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "ServerSetZeroDistance");

	Params::GBSightComponent_ServerSetZeroDistance Parms{};

	Parms.NewZeroDistance = NewZeroDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.ServerSightLineInfoUpdated
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FGBSightLineInfo&          NewSightLineInfo                                       (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGBSightComponent::ServerSightLineInfoUpdated(const struct FGBSightLineInfo& NewSightLineInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "ServerSightLineInfoUpdated");

	Params::GBSightComponent_ServerSightLineInfoUpdated Parms{};

	Parms.NewSightLineInfo = std::move(NewSightLineInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.SetMagnificationLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewMagnificationLevel                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::SetMagnificationLevel(float NewMagnificationLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "SetMagnificationLevel");

	Params::GBSightComponent_SetMagnificationLevel Parms{};

	Parms.NewMagnificationLevel = NewMagnificationLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.SetSceneCaptureComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         NewSceneCaptureComp                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBSightComponent::SetSceneCaptureComponent(class USceneCaptureComponent2D* NewSceneCaptureComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "SetSceneCaptureComponent");

	Params::GBSightComponent_SetSceneCaptureComponent Parms{};

	Parms.NewSceneCaptureComp = NewSceneCaptureComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSightComponent.SetupSight
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGBFirearm*                       RelativeFirearm                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AGBInvItem*>&        OtherAttachments                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString*                          OutErrorMessage                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBSightComponent::SetupSight(class AGBFirearm* RelativeFirearm, const TArray<class AGBInvItem*>& OtherAttachments, class FString* OutErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "SetupSight");

	Params::GBSightComponent_SetupSight Parms{};

	Parms.RelativeFirearm = RelativeFirearm;
	Parms.OtherAttachments = std::move(OtherAttachments);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutErrorMessage != nullptr)
		*OutErrorMessage = std::move(Parms.OutErrorMessage);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetAnimLocOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGBSightComponent::GetAnimLocOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetAnimLocOffset");

	Params::GBSightComponent_GetAnimLocOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetAnimRotOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGBSightComponent::GetAnimRotOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetAnimRotOffset");

	Params::GBSightComponent_GetAnimRotOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetDefaultMagnificationLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetDefaultMagnificationLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetDefaultMagnificationLevel");

	Params::GBSightComponent_GetDefaultMagnificationLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBSightComponent::GetFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetFocus");

	Params::GBSightComponent_GetFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetFOV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetFOV");

	Params::GBSightComponent_GetFOV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetLeafSightAngle
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGBFirearm*                 RelativeFirearm                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldBoneLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeLocationOffset                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetLeafSightAngle(const class AGBFirearm* RelativeFirearm, const struct FVector& WorldBoneLocation, const struct FVector& RelativeLocationOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetLeafSightAngle");

	Params::GBSightComponent_GetLeafSightAngle Parms{};

	Parms.RelativeFirearm = RelativeFirearm;
	Parms.WorldBoneLocation = std::move(WorldBoneLocation);
	Parms.RelativeLocationOffset = std::move(RelativeLocationOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetMagnificationLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetMagnificationLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetMagnificationLevel");

	Params::GBSightComponent_GetMagnificationLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetMaxMagnificationLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetMaxMagnificationLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetMaxMagnificationLevel");

	Params::GBSightComponent_GetMaxMagnificationLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetMinMagnificationLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetMinMagnificationLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetMinMagnificationLevel");

	Params::GBSightComponent_GetMinMagnificationLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetNextSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBSightComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBSightComponent* UGBSightComponent::GetNextSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetNextSight");

	Params::GBSightComponent_GetNextSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetOpticRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBSightComponent::GetOpticRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetOpticRadius");

	Params::GBSightComponent_GetOpticRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetPrevSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBSightComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBSightComponent* UGBSightComponent::GetPrevSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetPrevSight");

	Params::GBSightComponent_GetPrevSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetReticleColourIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBSightComponent::GetReticleColourIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetReticleColourIndex");

	Params::GBSightComponent_GetReticleColourIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetSightLineFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBSightComponent::GetSightLineFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetSightLineFocus");

	Params::GBSightComponent_GetSightLineFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetSightLineInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBSightLineInfo                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBSightLineInfo UGBSightComponent::GetSightLineInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetSightLineInfo");

	Params::GBSightComponent_GetSightLineInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetSightLineRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UGBSightComponent*          ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGBSightComponent* UGBSightComponent::GetSightLineRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetSightLineRoot");

	Params::GBSightComponent_GetSightLineRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSightComponent.GetStatKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBSightComponent::GetStatKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSightComponent", "GetStatKey");

	Params::GBSightComponent_GetStatKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRadialMenuWidget.BPEvent_ClearCurrentSelection
// (Event, Public, BlueprintEvent)

void UGBRadialMenuWidget::BPEvent_ClearCurrentSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "BPEvent_ClearCurrentSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBRadialMenuWidget.BPEvent_NewActiveSelection
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NewIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBRadialMenuWidget::BPEvent_NewActiveSelection(int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "BPEvent_NewActiveSelection");

	Params::GBRadialMenuWidget_BPEvent_NewActiveSelection Parms{};

	Parms.NewIndex = NewIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBRadialMenuWidget.BPEvent_SetDynamicMaterialParams
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NumberOfDivisions                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBRadialMenuWidget::BPEvent_SetDynamicMaterialParams(int32 NumberOfDivisions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "BPEvent_SetDynamicMaterialParams");

	Params::GBRadialMenuWidget_BPEvent_SetDynamicMaterialParams Parms{};

	Parms.NumberOfDivisions = NumberOfDivisions;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBRadialMenuWidget.CloseRadialMenu
// (Final, Native, Public, BlueprintCallable)

void UGBRadialMenuWidget::CloseRadialMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "CloseRadialMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRadialMenuWidget.SetSelectedIndex
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const int32                             NewIdx                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBRadialMenuWidget::SetSelectedIndex(const int32 NewIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "SetSelectedIndex");

	Params::GBRadialMenuWidget_SetSelectedIndex Parms{};

	Parms.NewIdx = NewIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRadialMenuWidget.ShowRadialMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FGBRadialMenuOption>&MenuOptions                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBRadialMenuWidget::ShowRadialMenu(const TArray<struct FGBRadialMenuOption>& MenuOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "ShowRadialMenu");

	Params::GBRadialMenuWidget_ShowRadialMenu Parms{};

	Parms.MenuOptions = std::move(MenuOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRadialMenuWidget.GetSelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBRadialMenuWidget::GetSelectedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRadialMenuWidget", "GetSelectedIndex");

	Params::GBRadialMenuWidget_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFoliageBlastComponent.InitializeBlast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             BlastExtent                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MinFoliageMeshSize                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             BlastStrength                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             OscillationFrequency                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MaxAngularPerturbation                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MinPerturbationDecayTime                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MaxPerturbationDecayTime                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFoliageBlastComponent::InitializeBlast(class UObject* WorldContextObject, const float BlastExtent, const float MinFoliageMeshSize, const float BlastStrength, const float OscillationFrequency, const float MaxAngularPerturbation, const float MinPerturbationDecayTime, const float MaxPerturbationDecayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFoliageBlastComponent", "InitializeBlast");

	Params::GBFoliageBlastComponent_InitializeBlast Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BlastExtent = BlastExtent;
	Parms.MinFoliageMeshSize = MinFoliageMeshSize;
	Parms.BlastStrength = BlastStrength;
	Parms.OscillationFrequency = OscillationFrequency;
	Parms.MaxAngularPerturbation = MaxAngularPerturbation;
	Parms.MinPerturbationDecayTime = MinPerturbationDecayTime;
	Parms.MaxPerturbationDecayTime = MaxPerturbationDecayTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFoliageBlastComponent.ResetFoliage
// (Final, Native, Public, BlueprintCallable)

void UGBFoliageBlastComponent::ResetFoliage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFoliageBlastComponent", "ResetFoliage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFoliageBlastComponent.TriggerBlast
// (Final, Native, Public, BlueprintCallable)

void UGBFoliageBlastComponent::TriggerBlast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFoliageBlastComponent", "TriggerBlast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaMathPackage.GetRandom
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 Max                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaMathPackage::GetRandom(const struct FLuaValue& Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaMathPackage", "GetRandom");

	Params::GBLuaMathPackage_GetRandom Parms{};

	Parms.Max = std::move(Max);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaMathPackage.GetRandomRange
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 Min                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 Max                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaMathPackage::GetRandomRange(const struct FLuaValue& Min, const struct FLuaValue& Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaMathPackage", "GetRandomRange");

	Params::GBLuaMathPackage_GetRandomRange Parms{};

	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSearchableProp.OnRep_bYieldsIntel
// (Final, Native, Private)

void AGBSearchableProp::OnRep_bYieldsIntel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSearchableProp", "OnRep_bYieldsIntel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSearchableProp.OnRep_IsActive
// (Final, Native, Private)

void AGBSearchableProp::OnRep_IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSearchableProp", "OnRep_IsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSearchableProp.SetYieldsIntel
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInYieldsIntel                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSearchableProp::SetYieldsIntel(const bool bInYieldsIntel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSearchableProp", "SetYieldsIntel");

	Params::GBSearchableProp_SetYieldsIntel Parms{};

	Parms.bInYieldsIntel = bInYieldsIntel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSearchableProp.UpdateVisibility
// (Final, Native, Private)

void AGBSearchableProp::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSearchableProp", "UpdateVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSearchableProp.GetSearchablePropType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBIntelSearchType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBIntelSearchType AGBSearchableProp::GetSearchablePropType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSearchableProp", "GetSearchablePropType");

	Params::GBSearchableProp_GetSearchablePropType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSearchableProp.GetYieldsIntel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBSearchableProp::GetYieldsIntel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSearchableProp", "GetYieldsIntel");

	Params::GBSearchableProp_GetYieldsIntel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFoliageVisibilityAssetData.GetVisibilityMesh
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSoftObjectPath                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSoftObjectPath UGBFoliageVisibilityAssetData::GetVisibilityMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFoliageVisibilityAssetData", "GetVisibilityMesh");

	Params::GBFoliageVisibilityAssetData_GetVisibilityMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFrontSightPostComponent.OnRep_FrontSightPostHeightOffset
// (Final, Native, Protected)

void UGBFrontSightPostComponent::OnRep_FrontSightPostHeightOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFrontSightPostComponent", "OnRep_FrontSightPostHeightOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFrontSightPostComponent.ServerFrontSightPostHeightOffset
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const float                             NewFrontSightPostHeightOffset                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFrontSightPostComponent::ServerFrontSightPostHeightOffset(const float NewFrontSightPostHeightOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFrontSightPostComponent", "ServerFrontSightPostHeightOffset");

	Params::GBFrontSightPostComponent_ServerFrontSightPostHeightOffset Parms{};

	Parms.NewFrontSightPostHeightOffset = NewFrontSightPostHeightOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFrontSightPostComponent.GetFrontSightPostHeightOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFrontSightPostComponent::GetFrontSightPostHeightOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBFrontSightPostComponent", "GetFrontSightPostHeightOffset");

	Params::GBFrontSightPostComponent_GetFrontSightPostHeightOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorAdd
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorAdd(const struct FLuaValue& A, const struct FLuaValue& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorAdd");

	Params::GBLuaVectorPackage_VectorAdd Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorDivide
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorDivide(const struct FLuaValue& A, const struct FLuaValue& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorDivide");

	Params::GBLuaVectorPackage_VectorDivide Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorEquals
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorEquals(const struct FLuaValue& A, const struct FLuaValue& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorEquals");

	Params::GBLuaVectorPackage_VectorEquals Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorMultiply
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorMultiply(const struct FLuaValue& A, const struct FLuaValue& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorMultiply");

	Params::GBLuaVectorPackage_VectorMultiply Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorSize
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorSize(const struct FLuaValue& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorSize");

	Params::GBLuaVectorPackage_VectorSize Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorSize2D
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorSize2D(const struct FLuaValue& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorSize2D");

	Params::GBLuaVectorPackage_VectorSize2D Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorSizeSquared
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorSizeSquared(const struct FLuaValue& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorSizeSquared");

	Params::GBLuaVectorPackage_VectorSizeSquared Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorSizeSquared2D
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorSizeSquared2D(const struct FLuaValue& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorSizeSquared2D");

	Params::GBLuaVectorPackage_VectorSizeSquared2D Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorStr
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 LuaVector                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorStr(const struct FLuaValue& LuaVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorStr");

	Params::GBLuaVectorPackage_VectorStr Parms{};

	Parms.LuaVector = std::move(LuaVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorSubtract
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLuaValue&                 A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorSubtract(const struct FLuaValue& A, const struct FLuaValue& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorSubtract");

	Params::GBLuaVectorPackage_VectorSubtract Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.BuildVector
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// const struct FVector&                   Vector                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::BuildVector(const struct FVector& Vector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "BuildVector");

	Params::GBLuaVectorPackage_BuildVector Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaVectorPackage.VectorNew
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 SelfPackage                                            (Parm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 X                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 Y                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 Z                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaVectorPackage::VectorNew(const struct FLuaValue& SelfPackage, const struct FLuaValue& X, const struct FLuaValue& Y, const struct FLuaValue& Z) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaVectorPackage", "VectorNew");

	Params::GBLuaVectorPackage_VectorNew Parms{};

	Parms.SelfPackage = std::move(SelfPackage);
	Parms.X = std::move(X);
	Parms.Y = std::move(Y);
	Parms.Z = std::move(Z);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.AlphaToByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             AlphaValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGBFunctionLibrary::AlphaToByte(const float AlphaValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "AlphaToByte");

	Params::GBFunctionLibrary_AlphaToByte Parms{};

	Parms.AlphaValue = AlphaValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.AngleWithin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   AngleDegrees                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAngleDegrees                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAngleDegrees                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInclusive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::AngleWithin(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees, bool bInclusive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "AngleWithin");

	Params::GBFunctionLibrary_AngleWithin Parms{};

	Parms.AngleDegrees = AngleDegrees;
	Parms.MinAngleDegrees = MinAngleDegrees;
	Parms.MaxAngleDegrees = MaxAngleDegrees;
	Parms.bInclusive = bInclusive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Array_Sort
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAscendingOrder                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             VariableName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Array_Sort(const TArray<int32>& TargetArray, bool bAscendingOrder, class FName VariableName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Array_Sort");

	Params::GBFunctionLibrary_Array_Sort Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.bAscendingOrder = bAscendingOrder;
	Parms.VariableName = VariableName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.BlueprintSyncLoadAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class UObject>&    SoftObjectPtr                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGBFunctionLibrary::BlueprintSyncLoadAsset(const TSoftObjectPtr<class UObject>& SoftObjectPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "BlueprintSyncLoadAsset");

	Params::GBFunctionLibrary_BlueprintSyncLoadAsset Parms{};

	Parms.SoftObjectPtr = SoftObjectPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.BlueprintSyncLoadClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftClassPtr<class UClass>&      SoftClassPtr                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UObject>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UObject> UGBFunctionLibrary::BlueprintSyncLoadClass(const TSoftClassPtr<class UClass>& SoftClassPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "BlueprintSyncLoadClass");

	Params::GBFunctionLibrary_BlueprintSyncLoadClass Parms{};

	Parms.SoftClassPtr = SoftClassPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.BP_GetJsonObjHash
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVaRestJsonObject*                JsonObj                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::BP_GetJsonObjHash(class UVaRestJsonObject* JsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "BP_GetJsonObjHash");

	Params::GBFunctionLibrary_BP_GetJsonObjHash Parms{};

	Parms.JsonObj = JsonObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ByteToAlpha
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const uint8                             ByteValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::ByteToAlpha(const uint8 ByteValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ByteToAlpha");

	Params::GBFunctionLibrary_ByteToAlpha Parms{};

	Parms.ByteValue = ByteValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ByteToSignedAlpha
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const uint8                             ByteValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::ByteToSignedAlpha(const uint8 ByteValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ByteToSignedAlpha");

	Params::GBFunctionLibrary_ByteToSignedAlpha Parms{};

	Parms.ByteValue = ByteValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Capture2D_DeProject
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ASceneCapture2D*            Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldOrigin                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Capture2D_DeProject(const class ASceneCapture2D* Target, const struct FVector2D& ScreenPos, struct FVector* OutWorldOrigin, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Capture2D_DeProject");

	Params::GBFunctionLibrary_Capture2D_DeProject Parms{};

	Parms.Target = Target;
	Parms.ScreenPos = std::move(ScreenPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldOrigin != nullptr)
		*OutWorldOrigin = std::move(Parms.OutWorldOrigin);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);
}


// Function GroundBranch.GBFunctionLibrary.Capture2D_Project
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ASceneCapture2D*            Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutPixelLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Capture2D_Project(const class ASceneCapture2D* Target, const struct FVector& Location, struct FVector2D* OutPixelLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Capture2D_Project");

	Params::GBFunctionLibrary_Capture2D_Project Parms{};

	Parms.Target = Target;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPixelLocation != nullptr)
		*OutPixelLocation = std::move(Parms.OutPixelLocation);
}


// Function GroundBranch.GBFunctionLibrary.Capture2D_SaveImage
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ASceneCapture2D*                  Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ImagePath                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              ClearColour                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::Capture2D_SaveImage(class ASceneCapture2D* Target, const class FString& ImagePath, const struct FLinearColor& ClearColour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Capture2D_SaveImage");

	Params::GBFunctionLibrary_Capture2D_SaveImage Parms{};

	Parms.Target = Target;
	Parms.ImagePath = std::move(ImagePath);
	Parms.ClearColour = std::move(ClearColour);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.CaptureComponent2D_DeProject
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USceneCaptureComponent2D*   Target                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldOrigin                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::CaptureComponent2D_DeProject(const class USceneCaptureComponent2D* Target, const struct FVector2D& ScreenPos, struct FVector* OutWorldOrigin, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CaptureComponent2D_DeProject");

	Params::GBFunctionLibrary_CaptureComponent2D_DeProject Parms{};

	Parms.Target = Target;
	Parms.ScreenPos = std::move(ScreenPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldOrigin != nullptr)
		*OutWorldOrigin = std::move(Parms.OutWorldOrigin);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);
}


// Function GroundBranch.GBFunctionLibrary.CaptureComponent2D_Project
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USceneCaptureComponent2D*   Target                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutPixelLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::CaptureComponent2D_Project(const class USceneCaptureComponent2D* Target, const struct FVector& Location, struct FVector2D* OutPixelLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CaptureComponent2D_Project");

	Params::GBFunctionLibrary_CaptureComponent2D_Project Parms{};

	Parms.Target = Target;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPixelLocation != nullptr)
		*OutPixelLocation = std::move(Parms.OutPixelLocation);
}


// Function GroundBranch.GBFunctionLibrary.CaptureComponent2D_SaveImage
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ImagePath                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              ClearColour                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::CaptureComponent2D_SaveImage(class USceneCaptureComponent2D* Target, const class FString& ImagePath, const struct FLinearColor& ClearColour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CaptureComponent2D_SaveImage");

	Params::GBFunctionLibrary_CaptureComponent2D_SaveImage Parms{};

	Parms.Target = Target;
	Parms.ImagePath = std::move(ImagePath);
	Parms.ClearColour = std::move(ClearColour);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.CleanAuthorName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InAuthorName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReturnUnknownIfUnknown                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::CleanAuthorName(const class FString& InAuthorName, const bool bReturnUnknownIfUnknown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CleanAuthorName");

	Params::GBFunctionLibrary_CleanAuthorName Parms{};

	Parms.InAuthorName = std::move(InAuthorName);
	Parms.bReturnUnknownIfUnknown = bReturnUnknownIfUnknown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ClearDirectoryReadyOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ClearDirectoryReadyOnly(const class FString& Path, bool bRecursive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ClearDirectoryReadyOnly");

	Params::GBFunctionLibrary_ClearDirectoryReadyOnly Parms{};

	Parms.Path = std::move(Path);
	Parms.bRecursive = bRecursive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ClearFileReadyOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ClearFileReadyOnly(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ClearFileReadyOnly");

	Params::GBFunctionLibrary_ClearFileReadyOnly Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Component_SetCastHiddenShadow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewCastHiddenShadow                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Component_SetCastHiddenShadow(class UPrimitiveComponent* PrimitiveComponent, bool bNewCastHiddenShadow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Component_SetCastHiddenShadow");

	Params::GBFunctionLibrary_Component_SetCastHiddenShadow Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.bNewCastHiddenShadow = bNewCastHiddenShadow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.CondenseJsonString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutCondensedString                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::CondenseJsonString(const class FString& JsonString, class FString* OutCondensedString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CondenseJsonString");

	Params::GBFunctionLibrary_CondenseJsonString Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCondensedString != nullptr)
		*OutCondensedString = std::move(Parms.OutCondensedString);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Config_AddToArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_AddToArray(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_AddToArray");

	Params::GBFunctionLibrary_Config_AddToArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_DeleteArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_DeleteArray(const class FString& Filename, const class FString& Section, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_DeleteArray");

	Params::GBFunctionLibrary_Config_DeleteArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_GetArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGBFunctionLibrary::Config_GetArray(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_GetArray");

	Params::GBFunctionLibrary_Config_GetArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Config_GetBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::Config_GetBool(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_GetBool");

	Params::GBFunctionLibrary_Config_GetBool Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Config_GetFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::Config_GetFloat(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_GetFloat");

	Params::GBFunctionLibrary_Config_GetFloat Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Config_GetInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBFunctionLibrary::Config_GetInt(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_GetInt");

	Params::GBFunctionLibrary_Config_GetInt Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Config_GetString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::Config_GetString(const class FString& Filename, const class FString& Section, const class FString& Key, bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_GetString");

	Params::GBFunctionLibrary_Config_GetString Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Config_RemoveFromArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_RemoveFromArray(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_RemoveFromArray");

	Params::GBFunctionLibrary_Config_RemoveFromArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_Save
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_Save(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_Save");

	Params::GBFunctionLibrary_Config_Save Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_SetArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_SetArray(const class FString& Filename, const class FString& Section, const class FString& Key, const TArray<class FString>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_SetArray");

	Params::GBFunctionLibrary_Config_SetArray Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_SetBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool&                             Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_SetBool(const class FString& Filename, const class FString& Section, const class FString& Key, const bool& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_SetBool");

	Params::GBFunctionLibrary_Config_SetBool Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_SetFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_SetFloat(const class FString& Filename, const class FString& Section, const class FString& Key, const float& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_SetFloat");

	Params::GBFunctionLibrary_Config_SetFloat Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_SetInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_SetInt(const class FString& Filename, const class FString& Section, const class FString& Key, const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_SetInt");

	Params::GBFunctionLibrary_Config_SetInt Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Config_SetString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Section                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Config_SetString(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Config_SetString");

	Params::GBFunctionLibrary_Config_SetString Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Section = std::move(Section);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Convert24HoursToMinutes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    TimeString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBFunctionLibrary::Convert24HoursToMinutes(const class FString& TimeString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Convert24HoursToMinutes");

	Params::GBFunctionLibrary_Convert24HoursToMinutes Parms{};

	Parms.TimeString = std::move(TimeString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ConvertMinutesTo24Hours
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32&                            MinutesOfDay                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::ConvertMinutesTo24Hours(const int32& MinutesOfDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ConvertMinutesTo24Hours");

	Params::GBFunctionLibrary_ConvertMinutesTo24Hours Parms{};

	Parms.MinutesOfDay = MinutesOfDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.CopyMeshComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ParentComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* UGBFunctionLibrary::CopyMeshComponents(class AActor* NewOwner, class UMeshComponent* ParentComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CopyMeshComponents");

	Params::GBFunctionLibrary_CopyMeshComponents Parms{};

	Parms.NewOwner = NewOwner;
	Parms.ParentComponent = ParentComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.createDirectory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::createDirectory(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "createDirectory");

	Params::GBFunctionLibrary_createDirectory Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.CreateFoldersForFilename
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::CreateFoldersForFilename(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CreateFoldersForFilename");

	Params::GBFunctionLibrary_CreateFoldersForFilename Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.CreateMeshComponentCopy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   Source                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* UGBFunctionLibrary::CreateMeshComponentCopy(class AActor* NewOwner, class UMeshComponent* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CreateMeshComponentCopy");

	Params::GBFunctionLibrary_CreateMeshComponentCopy Parms{};

	Parms.NewOwner = NewOwner;
	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.CreateVolume
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                SpawnTM                                                (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AVolume>              VolumeClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AVolume*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVolume* UGBFunctionLibrary::CreateVolume(class UObject* WorldContextObject, const struct FTransform& SpawnTM, const struct FVector& Size, TSubclassOf<class AVolume> VolumeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "CreateVolume");

	Params::GBFunctionLibrary_CreateVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnTM = std::move(SpawnTM);
	Parms.Size = std::move(Size);
	Parms.VolumeClass = VolumeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.DecodeServerTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ServerTag                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::DecodeServerTag(const class FString& ServerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecodeServerTag");

	Params::GBFunctionLibrary_DecodeServerTag Parms{};

	Parms.ServerTag = std::move(ServerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.DecodeTimeOfDayDateString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InDateString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutYear                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutMonth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutDay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DecodeTimeOfDayDateString(const class FString& InDateString, int32* OutYear, int32* OutMonth, int32* OutDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecodeTimeOfDayDateString");

	Params::GBFunctionLibrary_DecodeTimeOfDayDateString Parms{};

	Parms.InDateString = std::move(InDateString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutYear != nullptr)
		*OutYear = Parms.OutYear;

	if (OutMonth != nullptr)
		*OutMonth = Parms.OutMonth;

	if (OutDay != nullptr)
		*OutDay = Parms.OutDay;
}


// Function GroundBranch.GBFunctionLibrary.DecodeTimeOfDayString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    inString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionTimeLabel*                      OutMissionTimeLabel                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutTimeInHours                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutYear                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutMonth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutDay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetDefaultDate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DecodeTimeOfDayString(const class FString& inString, EMissionTimeLabel* OutMissionTimeLabel, float* OutTimeInHours, int32* OutYear, int32* OutMonth, int32* OutDay, bool bSetDefaultDate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecodeTimeOfDayString");

	Params::GBFunctionLibrary_DecodeTimeOfDayString Parms{};

	Parms.inString = std::move(inString);
	Parms.bSetDefaultDate = bSetDefaultDate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissionTimeLabel != nullptr)
		*OutMissionTimeLabel = Parms.OutMissionTimeLabel;

	if (OutTimeInHours != nullptr)
		*OutTimeInHours = Parms.OutTimeInHours;

	if (OutYear != nullptr)
		*OutYear = Parms.OutYear;

	if (OutMonth != nullptr)
		*OutMonth = Parms.OutMonth;

	if (OutDay != nullptr)
		*OutDay = Parms.OutDay;
}


// Function GroundBranch.GBFunctionLibrary.DecodeTimeOfDayTimeString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InTimeString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionTimeLabel*                      OutMissionTimeLabel                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutTimeInHours                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DecodeTimeOfDayTimeString(const class FString& InTimeString, EMissionTimeLabel* OutMissionTimeLabel, float* OutTimeInHours)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecodeTimeOfDayTimeString");

	Params::GBFunctionLibrary_DecodeTimeOfDayTimeString Parms{};

	Parms.InTimeString = std::move(InTimeString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissionTimeLabel != nullptr)
		*OutMissionTimeLabel = Parms.OutMissionTimeLabel;

	if (OutTimeInHours != nullptr)
		*OutTimeInHours = Parms.OutTimeInHours;
}


// Function GroundBranch.GBFunctionLibrary.DecodeWeatherPresetFileName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    WeatherFilename                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherCategory                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DecodeWeatherPresetFileName(const class FString& WeatherFilename, class FName* OutWeatherCategory, class FName* OutWeatherType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecodeWeatherPresetFileName");

	Params::GBFunctionLibrary_DecodeWeatherPresetFileName Parms{};

	Parms.WeatherFilename = std::move(WeatherFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeatherCategory != nullptr)
		*OutWeatherCategory = Parms.OutWeatherCategory;

	if (OutWeatherType != nullptr)
		*OutWeatherType = Parms.OutWeatherType;
}


// Function GroundBranch.GBFunctionLibrary.DecodeWeatherString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    inString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherCategory                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DecodeWeatherString(const class FString& inString, class FName* OutWeatherCategory, class FName* OutWeatherType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecodeWeatherString");

	Params::GBFunctionLibrary_DecodeWeatherString Parms{};

	Parms.inString = std::move(inString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeatherCategory != nullptr)
		*OutWeatherCategory = Parms.OutWeatherCategory;

	if (OutWeatherType != nullptr)
		*OutWeatherType = Parms.OutWeatherType;
}


// Function GroundBranch.GBFunctionLibrary.DecompressAxisFromByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   CompressedAngle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::DecompressAxisFromByte(uint8 CompressedAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DecompressAxisFromByte");

	Params::GBFunctionLibrary_DecompressAxisFromByte Parms{};

	Parms.CompressedAngle = CompressedAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.deleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLogWarnings                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::deleteFile(const class FString& Filename, bool bLogWarnings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "deleteFile");

	Params::GBFunctionLibrary_deleteFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bLogWarnings = bLogWarnings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Deproject
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                ViewTM                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const float                             FOV                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenSize                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Deproject(const struct FTransform& ViewTM, const float FOV, const struct FVector2D& ScreenSize, const struct FVector2D& ScreenPosition, struct FVector* OutWorldLocation, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Deproject");

	Params::GBFunctionLibrary_Deproject Parms{};

	Parms.ViewTM = std::move(ViewTM);
	Parms.FOV = FOV;
	Parms.ScreenSize = std::move(ScreenSize);
	Parms.ScreenPosition = std::move(ScreenPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldLocation != nullptr)
		*OutWorldLocation = std::move(Parms.OutWorldLocation);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);
}


// Function GroundBranch.GBFunctionLibrary.DrawDebugWideArrow
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineStart                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineEnd                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              LineColor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DrawDebugWideArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float Width, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DrawDebugWideArrow");

	Params::GBFunctionLibrary_DrawDebugWideArrow Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LineStart = std::move(LineStart);
	Parms.LineEnd = std::move(LineEnd);
	Parms.Width = Width;
	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;
	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.DumpGameInfoToLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DumpContext                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::DumpGameInfoToLog(const class UObject* WorldContextObject, const class FString& DumpContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "DumpGameInfoToLog");

	Params::GBFunctionLibrary_DumpGameInfoToLog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DumpContext = std::move(DumpContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.EncodeServerTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ServerTag                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeServerTag(const class FString& ServerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeServerTag");

	Params::GBFunctionLibrary_EncodeServerTag Parms{};

	Parms.ServerTag = std::move(ServerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayDateString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             Year                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Month                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Day                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeTimeOfDayDateString(const int32 Year, const int32 Month, const int32 Day)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeTimeOfDayDateString");

	Params::GBFunctionLibrary_EncodeTimeOfDayDateString Parms{};

	Parms.Year = Year;
	Parms.Month = Month;
	Parms.Day = Day;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayStringHours
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EMissionTimeLabel                 MissionTimeLabel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             TimeInHours                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Year                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Month                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Day                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeTimeOfDayStringHours(const EMissionTimeLabel MissionTimeLabel, const float TimeInHours, const int32 Year, const int32 Month, const int32 Day)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeTimeOfDayStringHours");

	Params::GBFunctionLibrary_EncodeTimeOfDayStringHours Parms{};

	Parms.MissionTimeLabel = MissionTimeLabel;
	Parms.TimeInHours = TimeInHours;
	Parms.Year = Year;
	Parms.Month = Month;
	Parms.Day = Day;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayStringMins
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EMissionTimeLabel                 MissionTimeLabel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TimeInMins                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Year                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Month                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Day                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeTimeOfDayStringMins(const EMissionTimeLabel MissionTimeLabel, const int32 TimeInMins, const int32 Year, const int32 Month, const int32 Day)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeTimeOfDayStringMins");

	Params::GBFunctionLibrary_EncodeTimeOfDayStringMins Parms{};

	Parms.MissionTimeLabel = MissionTimeLabel;
	Parms.TimeInMins = TimeInMins;
	Parms.Year = Year;
	Parms.Month = Month;
	Parms.Day = Day;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayTimeStringHours
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EMissionTimeLabel                 MissionTimeLabel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             TimeInHours                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeTimeOfDayTimeStringHours(const EMissionTimeLabel MissionTimeLabel, const float TimeInHours)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeTimeOfDayTimeStringHours");

	Params::GBFunctionLibrary_EncodeTimeOfDayTimeStringHours Parms{};

	Parms.MissionTimeLabel = MissionTimeLabel;
	Parms.TimeInHours = TimeInHours;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeTimeOfDayTimeStringMins
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EMissionTimeLabel                 MissionTimeLabel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TimeInMins                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeTimeOfDayTimeStringMins(const EMissionTimeLabel MissionTimeLabel, const int32 TimeInMins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeTimeOfDayTimeStringMins");

	Params::GBFunctionLibrary_EncodeTimeOfDayTimeStringMins Parms{};

	Parms.MissionTimeLabel = MissionTimeLabel;
	Parms.TimeInMins = TimeInMins;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeWeatherPresetFileName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       WeatherCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       WeatherType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddPath                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeWeatherPresetFileName(const class FName WeatherCategory, const class FName WeatherType, bool bAddPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeWeatherPresetFileName");

	Params::GBFunctionLibrary_EncodeWeatherPresetFileName Parms{};

	Parms.WeatherCategory = WeatherCategory;
	Parms.WeatherType = WeatherType;
	Parms.bAddPath = bAddPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeWeatherPresetObjectName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       WeatherCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       WeatherType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddPath                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeWeatherPresetObjectName(const class FName WeatherCategory, const class FName WeatherType, bool bAddPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeWeatherPresetObjectName");

	Params::GBFunctionLibrary_EncodeWeatherPresetObjectName Parms{};

	Parms.WeatherCategory = WeatherCategory;
	Parms.WeatherType = WeatherType;
	Parms.bAddPath = bAddPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EncodeWeatherString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       WeatherCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       WeatherType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::EncodeWeatherString(const class FName WeatherCategory, const class FName WeatherType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EncodeWeatherString");

	Params::GBFunctionLibrary_EncodeWeatherString Parms{};

	Parms.WeatherCategory = WeatherCategory;
	Parms.WeatherType = WeatherType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.EvalBool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Option                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDefaultValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::EvalBool(const class FString& Option, bool bDefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "EvalBool");

	Params::GBFunctionLibrary_EvalBool Parms{};

	Parms.Option = std::move(Option);
	Parms.bDefaultValue = bDefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ExtractAlphanumericText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SourceStr                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowHyphens                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::ExtractAlphanumericText(const class FString& SourceStr, bool bAllowHyphens)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ExtractAlphanumericText");

	Params::GBFunctionLibrary_ExtractAlphanumericText Parms{};

	Parms.SourceStr = std::move(SourceStr);
	Parms.bAllowHyphens = bAllowHyphens;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.fileExists
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::fileExists(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "fileExists");

	Params::GBFunctionLibrary_fileExists Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.FindWeatherPreset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       DecodedWeatherCategory                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       DecodedWeatherType                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyCreatorWeatherPreset*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkyCreatorWeatherPreset* UGBFunctionLibrary::FindWeatherPreset(const class FName DecodedWeatherCategory, const class FName DecodedWeatherType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "FindWeatherPreset");

	Params::GBFunctionLibrary_FindWeatherPreset Parms{};

	Parms.DecodedWeatherCategory = DecodedWeatherCategory;
	Parms.DecodedWeatherType = DecodedWeatherType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.FindWeatherPresetFromWhitelist
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName                       DecodedWeatherCategory                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       DecodedWeatherType                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class USkyCreatorWeatherPreset*>&WeatherPresetWhitelist                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USkyCreatorWeatherPreset*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkyCreatorWeatherPreset* UGBFunctionLibrary::FindWeatherPresetFromWhitelist(const class FName DecodedWeatherCategory, const class FName DecodedWeatherType, const TArray<class USkyCreatorWeatherPreset*>& WeatherPresetWhitelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "FindWeatherPresetFromWhitelist");

	Params::GBFunctionLibrary_FindWeatherPresetFromWhitelist Parms{};

	Parms.DecodedWeatherCategory = DecodedWeatherCategory;
	Parms.DecodedWeatherType = DecodedWeatherType;
	Parms.WeatherPresetWhitelist = std::move(WeatherPresetWhitelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.FlushPressedAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::FlushPressedAction(class APlayerController* PlayerController, class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "FlushPressedAction");

	Params::GBFunctionLibrary_FlushPressedAction Parms{};

	Parms.PlayerController = PlayerController;
	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.FlushPressedActions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ActionNames                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::FlushPressedActions(class APlayerController* PlayerController, const TArray<class FName>& ActionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "FlushPressedActions");

	Params::GBFunctionLibrary_FlushPressedActions Parms{};

	Parms.PlayerController = PlayerController;
	Parms.ActionNames = std::move(ActionNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.FlushPressedKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::FlushPressedKeys(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "FlushPressedKeys");

	Params::GBFunctionLibrary_FlushPressedKeys Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.FolderExists
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::FolderExists(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "FolderExists");

	Params::GBFunctionLibrary_FolderExists Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GenerateMissionDisplayName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InMapName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InVariantName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GenerateMissionDisplayName(const class FString& InMapName, const class FString& InVariantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GenerateMissionDisplayName");

	Params::GBFunctionLibrary_GenerateMissionDisplayName Parms{};

	Parms.InMapName = std::move(InMapName);
	Parms.InVariantName = std::move(InVariantName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Get_PhysicalMaterial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UMaterial*                  Material                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* UGBFunctionLibrary::Get_PhysicalMaterial(const class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Get_PhysicalMaterial");

	Params::GBFunctionLibrary_Get_PhysicalMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActor2DBoundingBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNonColliding                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutMins                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutMaxs                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetActor2DBoundingBox(class AActor* Target, bool bNonColliding, struct FVector2D* OutMins, struct FVector2D* OutMaxs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActor2DBoundingBox");

	Params::GBFunctionLibrary_GetActor2DBoundingBox Parms{};

	Parms.Target = Target;
	Parms.bNonColliding = bNonColliding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMins != nullptr)
		*OutMins = std::move(Parms.OutMins);

	if (OutMaxs != nullptr)
		*OutMaxs = std::move(Parms.OutMaxs);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActorCameraComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* UGBFunctionLibrary::GetActorCameraComponent(const class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActorCameraComponent");

	Params::GBFunctionLibrary_GetActorCameraComponent Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActorMeshBounds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBoxSphereBounds                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBoxSphereBounds UGBFunctionLibrary::GetActorMeshBounds(const class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActorMeshBounds");

	Params::GBFunctionLibrary_GetActorMeshBounds Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActorMeshBoundsWithAttachedActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ExcludeActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBoxSphereBounds                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBoxSphereBounds UGBFunctionLibrary::GetActorMeshBoundsWithAttachedActors(const class AActor* Target, const TArray<class AActor*>& ExcludeActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActorMeshBoundsWithAttachedActors");

	Params::GBFunctionLibrary_GetActorMeshBoundsWithAttachedActors Parms{};

	Parms.Target = Target;
	Parms.ExcludeActors = std::move(ExcludeActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActorMeshLocalBounds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBoxSphereBounds                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBoxSphereBounds UGBFunctionLibrary::GetActorMeshLocalBounds(const class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActorMeshLocalBounds");

	Params::GBFunctionLibrary_GetActorMeshLocalBounds Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActorMeshLocalBoundsWithAttachedActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ExcludeActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBoxSphereBounds                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBoxSphereBounds UGBFunctionLibrary::GetActorMeshLocalBoundsWithAttachedActors(const class AActor* Target, const TArray<class AActor*>& ExcludeActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActorMeshLocalBoundsWithAttachedActors");

	Params::GBFunctionLibrary_GetActorMeshLocalBoundsWithAttachedActors Parms{};

	Parms.Target = Target;
	Parms.ExcludeActors = std::move(ExcludeActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetActorNameWithoutSuffix
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SoftReferenceString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetActorNameWithoutSuffix(const class FString& SoftReferenceString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetActorNameWithoutSuffix");

	Params::GBFunctionLibrary_GetActorNameWithoutSuffix Parms{};

	Parms.SoftReferenceString = std::move(SoftReferenceString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetAllWeatherPresetFileNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bTrimPath                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGBFunctionLibrary::GetAllWeatherPresetFileNames(bool bTrimPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetAllWeatherPresetFileNames");

	Params::GBFunctionLibrary_GetAllWeatherPresetFileNames Parms{};

	Parms.bTrimPath = bTrimPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetAlphaNumeric
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Delimiter                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetAlphaNumeric(const class FString& Source, const class FString& Delimiter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetAlphaNumeric");

	Params::GBFunctionLibrary_GetAlphaNumeric Parms{};

	Parms.Source = std::move(Source);
	Parms.Delimiter = std::move(Delimiter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetAssetSoftObjPtrs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSoftObjectPtr<class UObject>>*  OutAssetSoftObjPtrs                                    (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetAssetSoftObjPtrs(const class FString& Path, TArray<TSoftObjectPtr<class UObject>>* OutAssetSoftObjPtrs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetAssetSoftObjPtrs");

	Params::GBFunctionLibrary_GetAssetSoftObjPtrs Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAssetSoftObjPtrs != nullptr)
		*OutAssetSoftObjPtrs = std::move(Parms.OutAssetSoftObjPtrs);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetAudioSublevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevel*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevel* UGBFunctionLibrary::GetAudioSublevel(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetAudioSublevel");

	Params::GBFunctionLibrary_GetAudioSublevel Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetBaseFilename
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetBaseFilename(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetBaseFilename");

	Params::GBFunctionLibrary_GetBaseFilename Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetBuildNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetBuildNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetBuildNumber");

	Params::GBFunctionLibrary_GetBuildNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetBuildType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bIncludeEditor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetBuildType(bool bIncludeEditor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetBuildType");

	Params::GBFunctionLibrary_GetBuildType Parms{};

	Parms.bIncludeEditor = bIncludeEditor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetClassDefaultObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UClass*                     Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGBFunctionLibrary::GetClassDefaultObject(const class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetClassDefaultObject");

	Params::GBFunctionLibrary_GetClassDefaultObject Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetComponentByName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* UGBFunctionLibrary::GetComponentByName(const class AActor* Target, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetComponentByName");

	Params::GBFunctionLibrary_GetComponentByName Parms{};

	Parms.Target = Target;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetConfigFilename
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConfigFile                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetConfigFilename(const class FString& ConfigFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetConfigFilename");

	Params::GBFunctionLibrary_GetConfigFilename Parms{};

	Parms.ConfigFile = std::move(ConfigFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetConsoleBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutBool                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::GetConsoleBool(const class FString& ConsoleVar, int32* OutBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetConsoleBool");

	Params::GBFunctionLibrary_GetConsoleBool Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBool != nullptr)
		*OutBool = Parms.OutBool;
}


// Function GroundBranch.GBFunctionLibrary.GetConsoleFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutFloat                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::GetConsoleFloat(const class FString& ConsoleVar, float* OutFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetConsoleFloat");

	Params::GBFunctionLibrary_GetConsoleFloat Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFloat != nullptr)
		*OutFloat = Parms.OutFloat;
}


// Function GroundBranch.GBFunctionLibrary.GetConsoleHelp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutHelp                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::GetConsoleHelp(const class FString& ConsoleVar, class FString* OutHelp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetConsoleHelp");

	Params::GBFunctionLibrary_GetConsoleHelp Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHelp != nullptr)
		*OutHelp = std::move(Parms.OutHelp);
}


// Function GroundBranch.GBFunctionLibrary.GetConsoleInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutInt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::GetConsoleInt(const class FString& ConsoleVar, int32* OutInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetConsoleInt");

	Params::GBFunctionLibrary_GetConsoleInt Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt != nullptr)
		*OutInt = Parms.OutInt;
}


// Function GroundBranch.GBFunctionLibrary.GetConsoleString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::GetConsoleString(const class FString& ConsoleVar, class FString* OutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetConsoleString");

	Params::GBFunctionLibrary_GetConsoleString Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);
}


// Function GroundBranch.GBFunctionLibrary.GetCreationTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::GetCreationTime(const class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetCreationTime");

	Params::GBFunctionLibrary_GetCreationTime Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetDelayedSoundPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   ViewerPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ObjectOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ObjectVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            ElapsedTime                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutDelayedPosition                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetDelayedSoundPosition(const struct FVector& ViewerPosition, const struct FVector& ObjectOrigin, const struct FVector& ObjectVelocity, const float& ElapsedTime, struct FVector* OutDelayedPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetDelayedSoundPosition");

	Params::GBFunctionLibrary_GetDelayedSoundPosition Parms{};

	Parms.ViewerPosition = std::move(ViewerPosition);
	Parms.ObjectOrigin = std::move(ObjectOrigin);
	Parms.ObjectVelocity = std::move(ObjectVelocity);
	Parms.ElapsedTime = ElapsedTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDelayedPosition != nullptr)
		*OutDelayedPosition = std::move(Parms.OutDelayedPosition);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetDistanceAlongSplineAtSplineInputKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USplineComponent*                 SplineComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            InKey                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::GetDistanceAlongSplineAtSplineInputKey(class USplineComponent* SplineComp, const float& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetDistanceAlongSplineAtSplineInputKey");

	Params::GBFunctionLibrary_GetDistanceAlongSplineAtSplineInputKey Parms{};

	Parms.SplineComp = SplineComp;
	Parms.InKey = InKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetFileList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Extension                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimPathAndExt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FileList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetFileList(const class FString& FilePath, const class FString& Extension, bool bTrimPathAndExt, TArray<class FString>* FileList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetFileList");

	Params::GBFunctionLibrary_GetFileList Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Extension = std::move(Extension);
	Parms.bTrimPathAndExt = bTrimPathAndExt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileList != nullptr)
		*FileList = std::move(Parms.FileList);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetFolderList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FolderList                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    RecurseIntoFolders                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetFolderList(const class FString& FilePath, TArray<class FString>* FolderList, bool RecurseIntoFolders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetFolderList");

	Params::GBFunctionLibrary_GetFolderList Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.RecurseIntoFolders = RecurseIntoFolders;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FolderList != nullptr)
		*FolderList = std::move(Parms.FolderList);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetFriendlyAICountString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UGBFunctionLibrary::GetFriendlyAICountString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetFriendlyAICountString");

	Params::GBFunctionLibrary_GetFriendlyAICountString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameContentDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetGameContentDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameContentDir");

	Params::GBFunctionLibrary_GetGameContentDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetGameDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameDir");

	Params::GBFunctionLibrary_GetGameDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameLogDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetGameLogDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameLogDir");

	Params::GBFunctionLibrary_GetGameLogDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameModeAuthor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScriptName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetGameModeAuthor(class UObject* WorldContextObject, const class FString& ScriptName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameModeAuthor");

	Params::GBFunctionLibrary_GetGameModeAuthor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ScriptName = std::move(ScriptName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameModeTable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScriptName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBFunctionLibrary::GetGameModeTable(class UObject* WorldContextObject, const class FString& ScriptName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameModeTable");

	Params::GBFunctionLibrary_GetGameModeTable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ScriptName = std::move(ScriptName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameModeTypeFromFile
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScriptFilename                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBGameModeType                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBGameModeType UGBFunctionLibrary::GetGameModeTypeFromFile(class UObject* WorldContextObject, const class FString& ScriptFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameModeTypeFromFile");

	Params::GBFunctionLibrary_GetGameModeTypeFromFile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ScriptFilename = std::move(ScriptFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGameModeTypeFromName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       GameModeTypeName                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBGameModeType                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBGameModeType UGBFunctionLibrary::GetGameModeTypeFromName(const class FName GameModeTypeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGameModeTypeFromName");

	Params::GBFunctionLibrary_GetGameModeTypeFromName Parms{};

	Parms.GameModeTypeName = GameModeTypeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGBLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBLocalPlayer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBLocalPlayer* UGBFunctionLibrary::GetGBLocalPlayer(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGBLocalPlayer");

	Params::GBFunctionLibrary_GetGBLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetGenericTeamId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGBFunctionLibrary::GetGenericTeamId(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetGenericTeamId");

	Params::GBFunctionLibrary_GetGenericTeamId Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetJoinInProgressString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UGBFunctionLibrary::GetJoinInProgressString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetJoinInProgressString");

	Params::GBFunctionLibrary_GetJoinInProgressString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetKeysBoundToAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKey> UGBFunctionLibrary::GetKeysBoundToAction(const class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetKeysBoundToAction");

	Params::GBFunctionLibrary_GetKeysBoundToAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetLastDigitsFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    inString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBFunctionLibrary::GetLastDigitsFromString(const class FString& inString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetLastDigitsFromString");

	Params::GBFunctionLibrary_GetLastDigitsFromString Parms{};

	Parms.inString = std::move(inString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetLevelName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    CurrentObject                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetLevelName(const class UObject* CurrentObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetLevelName");

	Params::GBFunctionLibrary_GetLevelName Parms{};

	Parms.CurrentObject = CurrentObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerController*          PlayerController                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayer*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalPlayer* UGBFunctionLibrary::GetLocalPlayer(const class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetLocalPlayer");

	Params::GBFunctionLibrary_GetLocalPlayer Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMapAssetPackageName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimGame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetMapAssetPackageName(class UObject* WorldContextObject, bool bTrimGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMapAssetPackageName");

	Params::GBFunctionLibrary_GetMapAssetPackageName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bTrimGame = bTrimGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMapFromCommandLine
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    CommandLine                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemovePath                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetMapFromCommandLine(const class FString& CommandLine, bool bRemovePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMapFromCommandLine");

	Params::GBFunctionLibrary_GetMapFromCommandLine Parms{};

	Parms.CommandLine = std::move(CommandLine);
	Parms.bRemovePath = bRemovePath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMapPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrimGame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetMapPath(class UObject* WorldContextObject, bool bTrimGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMapPath");

	Params::GBFunctionLibrary_GetMapPath Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bTrimGame = bTrimGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMatchingNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FName>&              SourceNames                                            (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class FName>&              SearchNames                                            (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FName>*                    OutMatchedNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// ESearchFix                              SearchFix                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetMatchingNames(const TArray<class FName>& SourceNames, const TArray<class FName>& SearchNames, TArray<class FName>* OutMatchedNames, ESearchFix SearchFix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMatchingNames");

	Params::GBFunctionLibrary_GetMatchingNames Parms{};

	Parms.SourceNames = std::move(SourceNames);
	Parms.SearchNames = std::move(SearchNames);
	Parms.SearchFix = SearchFix;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMatchedNames != nullptr)
		*OutMatchedNames = std::move(Parms.OutMatchedNames);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMatchingSocketNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FName>&              SearchNames                                            (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USceneComponent*                  SceneComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>*                    OutSocketNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// ESearchFix                              SearchFix                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetMatchingSocketNames(const TArray<class FName>& SearchNames, class USceneComponent* SceneComp, TArray<class FName>* OutSocketNames, ESearchFix SearchFix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMatchingSocketNames");

	Params::GBFunctionLibrary_GetMatchingSocketNames Parms{};

	Parms.SearchNames = std::move(SearchNames);
	Parms.SceneComp = SceneComp;
	Parms.SearchFix = SearchFix;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSocketNames != nullptr)
		*OutSocketNames = std::move(Parms.OutSocketNames);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMatchTypeFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    MatchTypeString                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBMatchType                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBMatchType UGBFunctionLibrary::GetMatchTypeFromString(const class FString& MatchTypeString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMatchTypeFromString");

	Params::GBFunctionLibrary_GetMatchTypeFromString Parms{};

	Parms.MatchTypeString = std::move(MatchTypeString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMaterialInstanceStaticSwitchParameterValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UMaterialInstance*          Instance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckParent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetMaterialInstanceStaticSwitchParameterValue(const class UMaterialInstance* Instance, class FName ParameterName, bool bCheckParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMaterialInstanceStaticSwitchParameterValue");

	Params::GBFunctionLibrary_GetMaterialInstanceStaticSwitchParameterValue Parms{};

	Parms.Instance = Instance;
	Parms.ParameterName = ParameterName;
	Parms.bCheckParent = bCheckParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMinimapForMissionVariant
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CurrentVariantName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBMinimap*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBMinimap* UGBFunctionLibrary::GetMinimapForMissionVariant(const class UObject* WorldContextObject, const class FName& CurrentVariantName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMinimapForMissionVariant");

	Params::GBFunctionLibrary_GetMinimapForMissionVariant Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CurrentVariantName = CurrentVariantName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMissionLabelFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    TimePart                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMissionTimeLabel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMissionTimeLabel UGBFunctionLibrary::GetMissionLabelFromString(const class FString& TimePart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMissionLabelFromString");

	Params::GBFunctionLibrary_GetMissionLabelFromString Parms{};

	Parms.TimePart = std::move(TimePart);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetMissionTimeStandardHour
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EMissionTimeLabel                 TimeLabel                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::GetMissionTimeStandardHour(const EMissionTimeLabel TimeLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetMissionTimeStandardHour");

	Params::GBFunctionLibrary_GetMissionTimeStandardHour Parms{};

	Parms.TimeLabel = TimeLabel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetNetworkVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBFunctionLibrary::GetNetworkVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetNetworkVersion");

	Params::GBFunctionLibrary_GetNetworkVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetObjectFName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBFunctionLibrary::GetObjectFName(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetObjectFName");

	Params::GBFunctionLibrary_GetObjectFName Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetOpForCountString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UGBFunctionLibrary::GetOpForCountString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetOpForCountString");

	Params::GBFunctionLibrary_GetOpForCountString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetOptionsFromCommandLine
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    CommandLine                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetOptionsFromCommandLine(const class FString& CommandLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetOptionsFromCommandLine");

	Params::GBFunctionLibrary_GetOptionsFromCommandLine Parms{};

	Parms.CommandLine = std::move(CommandLine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetPathLeaf
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetPathLeaf(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetPathLeaf");

	Params::GBFunctionLibrary_GetPathLeaf Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetPlayerNightVisionStatusActor
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerNightVisionStatus*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerNightVisionStatus* UGBFunctionLibrary::GetPlayerNightVisionStatusActor(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetPlayerNightVisionStatusActor");

	Params::GBFunctionLibrary_GetPlayerNightVisionStatusActor Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetProhibitedNameCharacters
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetProhibitedNameCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetProhibitedNameCharacters");

	Params::GBFunctionLibrary_GetProhibitedNameCharacters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetProjectVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetProjectVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetProjectVersion");

	Params::GBFunctionLibrary_GetProjectVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetRadiotelephonySpelling
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetRadiotelephonySpelling(const class FString& Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetRadiotelephonySpelling");

	Params::GBFunctionLibrary_GetRadiotelephonySpelling Parms{};

	Parms.Source = std::move(Source);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetRandomAllowableDay
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32*                                  OutMonth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutDay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AllowedMonths                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::GetRandomAllowableDay(int32* OutMonth, int32* OutDay, const TArray<int32>& AllowedMonths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetRandomAllowableDay");

	Params::GBFunctionLibrary_GetRandomAllowableDay Parms{};

	Parms.AllowedMonths = std::move(AllowedMonths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMonth != nullptr)
		*OutMonth = Parms.OutMonth;

	if (OutDay != nullptr)
		*OutDay = Parms.OutDay;
}


// Function GroundBranch.GBFunctionLibrary.GetRandomWeatherPresetTypeInCategoryLimitByFilename
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       InCategory                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            FilenamesWhitelist                                     (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBFunctionLibrary::GetRandomWeatherPresetTypeInCategoryLimitByFilename(const class FName InCategory, const TArray<class FString>& FilenamesWhitelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetRandomWeatherPresetTypeInCategoryLimitByFilename");

	Params::GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByFilename Parms{};

	Parms.InCategory = InCategory;
	Parms.FilenamesWhitelist = std::move(FilenamesWhitelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetRandomWeatherPresetTypeInCategoryLimitByPreset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       InCategory                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class USkyCreatorWeatherPreset*>&PresetWhitelist                                        (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBFunctionLibrary::GetRandomWeatherPresetTypeInCategoryLimitByPreset(const class FName InCategory, const TArray<class USkyCreatorWeatherPreset*>& PresetWhitelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetRandomWeatherPresetTypeInCategoryLimitByPreset");

	Params::GBFunctionLibrary_GetRandomWeatherPresetTypeInCategoryLimitByPreset Parms{};

	Parms.InCategory = InCategory;
	Parms.PresetWhitelist = std::move(PresetWhitelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetRefPoseBoneTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkelMesh                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UGBFunctionLibrary::GetRefPoseBoneTransform(class USkeletalMeshComponent* SkelMesh, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetRefPoseBoneTransform");

	Params::GBFunctionLibrary_GetRefPoseBoneTransform Parms{};

	Parms.SkelMesh = SkelMesh;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetSavedConfigDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetSavedConfigDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetSavedConfigDir");

	Params::GBFunctionLibrary_GetSavedConfigDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetSavedDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetSavedDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetSavedDir");

	Params::GBFunctionLibrary_GetSavedDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetScreenShotDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetScreenShotDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetScreenShotDir");

	Params::GBFunctionLibrary_GetScreenShotDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetSeasonForDate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             InMonth                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InDay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESeason                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESeason UGBFunctionLibrary::GetSeasonForDate(const int32 InMonth, const int32 InDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetSeasonForDate");

	Params::GBFunctionLibrary_GetSeasonForDate Parms{};

	Parms.InMonth = InMonth;
	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetSkyActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBSky*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBSky* UGBFunctionLibrary::GetSkyActor(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetSkyActor");

	Params::GBFunctionLibrary_GetSkyActor Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetStateName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AController*                Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBFunctionLibrary::GetStateName(const class AController* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetStateName");

	Params::GBFunctionLibrary_GetStateName Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetTimeAlive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::GetTimeAlive(const class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetTimeAlive");

	Params::GBFunctionLibrary_GetTimeAlive Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetTimeLabelText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionTimeLabel                       TimeLabel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGBFunctionLibrary::GetTimeLabelText(EMissionTimeLabel TimeLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetTimeLabelText");

	Params::GBFunctionLibrary_GetTimeLabelText Parms{};

	Parms.TimeLabel = TimeLabel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetTimeOfDayDisplayString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    TimeOfDayString                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFormatAsDisplayString                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetTimeOfDayDisplayString(const class FString& TimeOfDayString, const bool bFormatAsDisplayString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetTimeOfDayDisplayString");

	Params::GBFunctionLibrary_GetTimeOfDayDisplayString Parms{};

	Parms.TimeOfDayString = std::move(TimeOfDayString);
	Parms.bFormatAsDisplayString = bFormatAsDisplayString;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetTimeOfDayDisplayStringAsText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    TimeOfDayString                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGBFunctionLibrary::GetTimeOfDayDisplayStringAsText(const class FString& TimeOfDayString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetTimeOfDayDisplayStringAsText");

	Params::GBFunctionLibrary_GetTimeOfDayDisplayStringAsText Parms{};

	Parms.TimeOfDayString = std::move(TimeOfDayString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetUnixTimestamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBFunctionLibrary::GetUnixTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetUnixTimestamp");

	Params::GBFunctionLibrary_GetUnixTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetUObjectStatsString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetUObjectStatsString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetUObjectStatsString");

	Params::GBFunctionLibrary_GetUObjectStatsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetUserDir
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::GetUserDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetUserDir");

	Params::GBFunctionLibrary_GetUserDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetViewportPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutViewportPosition                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetViewportPosition(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, struct FVector2D* OutViewportPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetViewportPosition");

	Params::GBFunctionLibrary_GetViewportPosition Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ScreenPosition = std::move(ScreenPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewportPosition != nullptr)
		*OutViewportPosition = std::move(Parms.OutViewportPosition);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.GetViewportPositionHitResultByChannel
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ViewportPosition                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHitResult                                           (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::GetViewportPositionHitResultByChannel(class UObject* WorldContextObject, const struct FVector2D& ViewportPosition, ECollisionChannel TraceChannel, bool bTraceComplex, const TArray<class AActor*>& IgnoreActors, struct FHitResult* OutHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "GetViewportPositionHitResultByChannel");

	Params::GBFunctionLibrary_GetViewportPositionHitResultByChannel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ViewportPosition = std::move(ViewportPosition);
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.IgnoreActors = std::move(IgnoreActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitResult != nullptr)
		*OutHitResult = std::move(Parms.OutHitResult);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.HorizontalFOV
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   VerticalFOV_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::HorizontalFOV(float VerticalFOV_0, float AspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "HorizontalFOV");

	Params::GBFunctionLibrary_HorizontalFOV Parms{};

	Parms.VerticalFOV_0 = VerticalFOV_0;
	Parms.AspectRatio = AspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsAuthorProprietary
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InAuthorName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsAuthorProprietary(const class FString& InAuthorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsAuthorProprietary");

	Params::GBFunctionLibrary_IsAuthorProprietary Parms{};

	Parms.InAuthorName = std::move(InAuthorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsCommunityTestBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsCommunityTestBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsCommunityTestBuild");

	Params::GBFunctionLibrary_IsCommunityTestBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsDebugDisplayOn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DebugType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsDebugDisplayOn(const class UObject* WorldContextObject, class FName DebugType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsDebugDisplayOn");

	Params::GBFunctionLibrary_IsDebugDisplayOn Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DebugType = DebugType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsDedicatedServerSession
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsDedicatedServerSession(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsDedicatedServerSession");

	Params::GBFunctionLibrary_IsDedicatedServerSession Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsEditor");

	Params::GBFunctionLibrary_IsEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsEditorWorld
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsEditorWorld(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsEditorWorld");

	Params::GBFunctionLibrary_IsEditorWorld Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsFacing
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinForwardDot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreVerticalFacing                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsFacing(class AActor* Target, const struct FVector& Location, float MinForwardDot, bool bIgnoreVerticalFacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsFacing");

	Params::GBFunctionLibrary_IsFacing Parms{};

	Parms.Target = Target;
	Parms.Location = std::move(Location);
	Parms.MinForwardDot = MinForwardDot;
	Parms.bIgnoreVerticalFacing = bIgnoreVerticalFacing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsFriendly
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     ActorA                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     ActorB                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsFriendly(const class AActor* ActorA, const class AActor* ActorB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsFriendly");

	Params::GBFunctionLibrary_IsFriendly Parms{};

	Parms.ActorA = ActorA;
	Parms.ActorB = ActorB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsGameWorld
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsGameWorld(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsGameWorld");

	Params::GBFunctionLibrary_IsGameWorld Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsInState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AController*                Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InStateName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsInState(const class AController* Target, class FName InStateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsInState");

	Params::GBFunctionLibrary_IsInState Parms{};

	Parms.Target = Target;
	Parms.InStateName = InStateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsKeyBoundToActionDown
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsKeyBoundToActionDown(class APlayerController* PlayerController, const class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsKeyBoundToActionDown");

	Params::GBFunctionLibrary_IsKeyBoundToActionDown Parms{};

	Parms.PlayerController = PlayerController;
	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsListenServerSession
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsListenServerSession(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsListenServerSession");

	Params::GBFunctionLibrary_IsListenServerSession Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsProbablyAYearOrYearRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SuspectedYearString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsProbablyAYearOrYearRange(const class FString& SuspectedYearString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsProbablyAYearOrYearRange");

	Params::GBFunctionLibrary_IsProbablyAYearOrYearRange Parms{};

	Parms.SuspectedYearString = std::move(SuspectedYearString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.isReadOnly
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    PathOrFilename                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::isReadOnly(const class FString& PathOrFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "isReadOnly");

	Params::GBFunctionLibrary_isReadOnly Parms{};

	Parms.PathOrFilename = std::move(PathOrFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsSimulatingInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsSimulatingInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsSimulatingInEditor");

	Params::GBFunctionLibrary_IsSimulatingInEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.IsValidSoftObjectPath
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSoftObjectPath&           SoftObjectPath                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::IsValidSoftObjectPath(const struct FSoftObjectPath& SoftObjectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "IsValidSoftObjectPath");

	Params::GBFunctionLibrary_IsValidSoftObjectPath Parms{};

	Parms.SoftObjectPath = std::move(SoftObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Key_GetName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey&                      Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBFunctionLibrary::Key_GetName(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Key_GetName");

	Params::GBFunctionLibrary_Key_GetName Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Key_GetString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey&                      Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::Key_GetString(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Key_GetString");

	Params::GBFunctionLibrary_Key_GetString Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.LoadExternalImage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ImagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D**                      OutImage                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutWidth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutHeight                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::LoadExternalImage(const class FString& ImagePath, class UTexture2D** OutImage, int32* OutWidth, int32* OutHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "LoadExternalImage");

	Params::GBFunctionLibrary_LoadExternalImage Parms{};

	Parms.ImagePath = std::move(ImagePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutImage != nullptr)
		*OutImage = Parms.OutImage;

	if (OutWidth != nullptr)
		*OutWidth = Parms.OutWidth;

	if (OutHeight != nullptr)
		*OutHeight = Parms.OutHeight;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.LoadKillhouseVariant
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    KillhouseLayoutClassName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::LoadKillhouseVariant(const class UObject* WorldContextObject, const class FString& KillhouseLayoutClassName, const struct FVector& SpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "LoadKillhouseVariant");

	Params::GBFunctionLibrary_LoadKillhouseVariant Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.KillhouseLayoutClassName = std::move(KillhouseLayoutClassName);
	Parms.SpawnLocation = std::move(SpawnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.LoadStringArrayFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutStringArray                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bLogWarnings                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::LoadStringArrayFromFile(const class FString& Filename, TArray<class FString>* OutStringArray, bool bLogWarnings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "LoadStringArrayFromFile");

	Params::GBFunctionLibrary_LoadStringArrayFromFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bLogWarnings = bLogWarnings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStringArray != nullptr)
		*OutStringArray = std::move(Parms.OutStringArray);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.LoadStringFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLogWarnings                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::LoadStringFromFile(const class FString& Filename, class FString* OutString, bool bLogWarnings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "LoadStringFromFile");

	Params::GBFunctionLibrary_LoadStringFromFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.bLogWarnings = bLogWarnings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.LogUObjectStats
// (Final, Native, Static, Public, BlueprintCallable)

void UGBFunctionLibrary::LogUObjectStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "LogUObjectStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.MakeRedToGreenColorFromScalar
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Scalar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UGBFunctionLibrary::MakeRedToGreenColorFromScalar(float Scalar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "MakeRedToGreenColorFromScalar");

	Params::GBFunctionLibrary_MakeRedToGreenColorFromScalar Parms{};

	Parms.Scalar = Scalar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.MakeValidCallSign
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::MakeValidCallSign(const class FString& Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "MakeValidCallSign");

	Params::GBFunctionLibrary_MakeValidCallSign Parms{};

	Parms.Source = std::move(Source);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.MakeValidString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InvalidChars                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::MakeValidString(const class FString& Source, const class FString& InvalidChars)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "MakeValidString");

	Params::GBFunctionLibrary_MakeValidString Parms{};

	Parms.Source = std::move(Source);
	Parms.InvalidChars = std::move(InvalidChars);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.NameArraysMatch
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class FName>&              SourceNames                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class FName>&              TargetNames                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::NameArraysMatch(const TArray<class FName>& SourceNames, const TArray<class FName>& TargetNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "NameArraysMatch");

	Params::GBFunctionLibrary_NameArraysMatch Parms{};

	Parms.SourceNames = std::move(SourceNames);
	Parms.TargetNames = std::move(TargetNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.NamesMatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       SourceName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       SearchName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESearchFix                              SearchFix                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::NamesMatch(const class FName SourceName, const class FName SearchName, ESearchFix SearchFix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "NamesMatch");

	Params::GBFunctionLibrary_NamesMatch Parms{};

	Parms.SourceName = SourceName;
	Parms.SearchName = SearchName;
	Parms.SearchFix = SearchFix;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.OnSameTeam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     ActorA                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     ActorB                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::OnSameTeam(const class AActor* ActorA, const class AActor* ActorB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "OnSameTeam");

	Params::GBFunctionLibrary_OnSameTeam Parms{};

	Parms.ActorA = ActorA;
	Parms.ActorB = ActorB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ParseValue_Bool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Match                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ParseValue_Bool(const class FString& Options, const class FString& Match, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ParseValue_Bool");

	Params::GBFunctionLibrary_ParseValue_Bool Parms{};

	Parms.Options = std::move(Options);
	Parms.Match = std::move(Match);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ParseValue_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Match                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ParseValue_Float(const class FString& Options, const class FString& Match, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ParseValue_Float");

	Params::GBFunctionLibrary_ParseValue_Float Parms{};

	Parms.Options = std::move(Options);
	Parms.Match = std::move(Match);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ParseValue_Integer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Match                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ParseValue_Integer(const class FString& Options, const class FString& Match, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ParseValue_Integer");

	Params::GBFunctionLibrary_ParseValue_Integer Parms{};

	Parms.Options = std::move(Options);
	Parms.Match = std::move(Match);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ParseValue_Name
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Match                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ParseValue_Name(const class FString& Options, const class FString& Match, class FName* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ParseValue_Name");

	Params::GBFunctionLibrary_ParseValue_Name Parms{};

	Parms.Options = std::move(Options);
	Parms.Match = std::move(Match);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ParseValue_String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Match                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ParseValue_String(const class FString& Options, const class FString& Match, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ParseValue_String");

	Params::GBFunctionLibrary_ParseValue_String Parms{};

	Parms.Options = std::move(Options);
	Parms.Match = std::move(Match);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.PrettifyJsonString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutPrettyKitString                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::PrettifyJsonString(const class FString& JsonString, class FString* OutPrettyKitString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "PrettifyJsonString");

	Params::GBFunctionLibrary_PrettifyJsonString Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrettyKitString != nullptr)
		*OutPrettyKitString = std::move(Parms.OutPrettyKitString);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.PrintStringToLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StringToPrint                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bLogVerbose                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeNetworkRoleInLog                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeNameInLog                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ThisRef                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::PrintStringToLog(const class FString& StringToPrint, const bool bLogVerbose, const bool bIncludeNetworkRoleInLog, const bool bIncludeNameInLog, const class UObject* ThisRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "PrintStringToLog");

	Params::GBFunctionLibrary_PrintStringToLog Parms{};

	Parms.StringToPrint = std::move(StringToPrint);
	Parms.bLogVerbose = bLogVerbose;
	Parms.bIncludeNetworkRoleInLog = bIncludeNetworkRoleInLog;
	Parms.bIncludeNameInLog = bIncludeNameInLog;
	Parms.ThisRef = ThisRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.Project
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                ViewTM                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const float                             FOV                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenSize                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutScreenPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::Project(const struct FTransform& ViewTM, const float FOV, const struct FVector2D& ScreenSize, const struct FVector& WorldLocation, struct FVector2D* OutScreenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Project");

	Params::GBFunctionLibrary_Project Parms{};

	Parms.ViewTM = std::move(ViewTM);
	Parms.FOV = FOV;
	Parms.ScreenSize = std::move(ScreenSize);
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenPosition != nullptr)
		*OutScreenPosition = std::move(Parms.OutScreenPosition);
}


// Function GroundBranch.GBFunctionLibrary.RemoveSpaces
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SourceString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::RemoveSpaces(const class FString& SourceString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "RemoveSpaces");

	Params::GBFunctionLibrary_RemoveSpaces Parms{};

	Parms.SourceString = std::move(SourceString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.RemoveSpacesInline
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString*                          SourceString                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::RemoveSpacesInline(class FString* SourceString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "RemoveSpacesInline");

	Params::GBFunctionLibrary_RemoveSpacesInline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SourceString != nullptr)
		*SourceString = std::move(Parms.SourceString);
}


// Function GroundBranch.GBFunctionLibrary.RenameActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewActorName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::RenameActor(class AActor* TargetActor, const class FString& NewActorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "RenameActor");

	Params::GBFunctionLibrary_RenameActor Parms{};

	Parms.TargetActor = TargetActor;
	Parms.NewActorName = std::move(NewActorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.ResetGlobalGravity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::ResetGlobalGravity(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ResetGlobalGravity");

	Params::GBFunctionLibrary_ResetGlobalGravity Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SaveStringToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverWrite                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::SaveStringToFile(const class FString& Filename, const class FString& String, bool bOverWrite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SaveStringToFile");

	Params::GBFunctionLibrary_SaveStringToFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.String = std::move(String);
	Parms.bOverWrite = bOverWrite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.SetConsoleBool
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BoolValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetConsoleBool(const class FString& ConsoleVar, bool BoolValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetConsoleBool");

	Params::GBFunctionLibrary_SetConsoleBool Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);
	Parms.BoolValue = BoolValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SetConsoleFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetConsoleFloat(const class FString& ConsoleVar, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetConsoleFloat");

	Params::GBFunctionLibrary_SetConsoleFloat Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);
	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SetConsoleInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetConsoleInt(const class FString& ConsoleVar, int32 IntValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetConsoleInt");

	Params::GBFunctionLibrary_SetConsoleInt Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);
	Parms.IntValue = IntValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SetConsoleString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConsoleVar                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StringValue                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetConsoleString(const class FString& ConsoleVar, const class FString& StringValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetConsoleString");

	Params::GBFunctionLibrary_SetConsoleString Parms{};

	Parms.ConsoleVar = std::move(ConsoleVar);
	Parms.StringValue = std::move(StringValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SetDrownEffectIntensity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPostProcessComponent*            PostProcessSettings                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             EffectAmount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetDrownEffectIntensity(class UPostProcessComponent* PostProcessSettings, const float EffectAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetDrownEffectIntensity");

	Params::GBFunctionLibrary_SetDrownEffectIntensity Parms{};

	Parms.PostProcessSettings = PostProcessSettings;
	Parms.EffectAmount = EffectAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SetGenericTeamId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewTeamId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::SetGenericTeamId(class AActor* Target, uint8 NewTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetGenericTeamId");

	Params::GBFunctionLibrary_SetGenericTeamId Parms{};

	Parms.Target = Target;
	Parms.NewTeamId = NewTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.SetGlobalGravity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GlobalGravity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetGlobalGravity(const class UObject* WorldContextObject, float GlobalGravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetGlobalGravity");

	Params::GBFunctionLibrary_SetGlobalGravity Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GlobalGravity = GlobalGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SetRenderInDepthPass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComp                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SetRenderInDepthPass(class UPrimitiveComponent* PrimitiveComp, bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SetRenderInDepthPass");

	Params::GBFunctionLibrary_SetRenderInDepthPass Parms{};

	Parms.PrimitiveComp = PrimitiveComp;
	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBFunctionLibrary.SignedAlphaToByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             AlphaValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UGBFunctionLibrary::SignedAlphaToByte(const float AlphaValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SignedAlphaToByte");

	Params::GBFunctionLibrary_SignedAlphaToByte Parms{};

	Parms.AlphaValue = AlphaValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.SortActorArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AActor*>&                  ActorArray                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>*                  ActorArrayRef                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SortActorArray(TArray<class AActor*>& ActorArray, TArray<class AActor*>* ActorArrayRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SortActorArray");

	Params::GBFunctionLibrary_SortActorArray Parms{};

	Parms.ActorArray = std::move(ActorArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ActorArray = std::move(Parms.ActorArray);

	if (ActorArrayRef != nullptr)
		*ActorArrayRef = std::move(Parms.ActorArrayRef);
}


// Function GroundBranch.GBFunctionLibrary.SortFloatArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>&                          FloatArray                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<float>*                          FloatArrayRef                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SortFloatArray(TArray<float>& FloatArray, TArray<float>* FloatArrayRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SortFloatArray");

	Params::GBFunctionLibrary_SortFloatArray Parms{};

	Parms.FloatArray = std::move(FloatArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatArray = std::move(Parms.FloatArray);

	if (FloatArrayRef != nullptr)
		*FloatArrayRef = std::move(Parms.FloatArrayRef);
}


// Function GroundBranch.GBFunctionLibrary.SortIntArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>&                          IntArray                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>*                          IntArrayRef                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SortIntArray(TArray<int32>& IntArray, TArray<int32>* IntArrayRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SortIntArray");

	Params::GBFunctionLibrary_SortIntArray Parms{};

	Parms.IntArray = std::move(IntArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntArray = std::move(Parms.IntArray);

	if (IntArrayRef != nullptr)
		*IntArrayRef = std::move(Parms.IntArrayRef);
}


// Function GroundBranch.GBFunctionLibrary.SortStringArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>&                  StringArray                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  StringArrayRef                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const bool                              bSortByLeafName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SortStringArray(TArray<class FString>& StringArray, TArray<class FString>* StringArrayRef, const bool bSortByLeafName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SortStringArray");

	Params::GBFunctionLibrary_SortStringArray Parms{};

	Parms.StringArray = std::move(StringArray);
	Parms.bSortByLeafName = bSortByLeafName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StringArray = std::move(Parms.StringArray);

	if (StringArrayRef != nullptr)
		*StringArrayRef = std::move(Parms.StringArrayRef);
}


// Function GroundBranch.GBFunctionLibrary.SortStringArrayWithPriorityCharacter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>&                  StringArray                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  StringArrayRef                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    PriorityCharacter                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBFunctionLibrary::SortStringArrayWithPriorityCharacter(TArray<class FString>& StringArray, TArray<class FString>* StringArrayRef, const class FString& PriorityCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "SortStringArrayWithPriorityCharacter");

	Params::GBFunctionLibrary_SortStringArrayWithPriorityCharacter Parms{};

	Parms.StringArray = std::move(StringArray);
	Parms.PriorityCharacter = std::move(PriorityCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StringArray = std::move(Parms.StringArray);

	if (StringArrayRef != nullptr)
		*StringArrayRef = std::move(Parms.StringArrayRef);
}


// Function GroundBranch.GBFunctionLibrary.StringHash
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    StringToHash                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::StringHash(const class FString& StringToHash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "StringHash");

	Params::GBFunctionLibrary_StringHash Parms{};

	Parms.StringToHash = std::move(StringToHash);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.StringToDisplayString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    inString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::StringToDisplayString(const class FString& inString, bool bIsBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "StringToDisplayString");

	Params::GBFunctionLibrary_StringToDisplayString Parms{};

	Parms.inString = std::move(inString);
	Parms.bIsBool = bIsBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.StripBBCode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SourceString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::StripBBCode(const class FString& SourceString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "StripBBCode");

	Params::GBFunctionLibrary_StripBBCode Parms{};

	Parms.SourceString = std::move(SourceString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.Time_GetOSTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32*                                  MilliSeconds                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Seconds                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Minutes                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Hours12                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Hours24                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Day                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Month                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Year                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::Time_GetOSTime(int32* MilliSeconds, int32* Seconds, int32* Minutes, int32* Hours12, int32* Hours24, int32* Day, int32* Month, int32* Year)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "Time_GetOSTime");

	Params::GBFunctionLibrary_Time_GetOSTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MilliSeconds != nullptr)
		*MilliSeconds = Parms.MilliSeconds;

	if (Seconds != nullptr)
		*Seconds = Parms.Seconds;

	if (Minutes != nullptr)
		*Minutes = Parms.Minutes;

	if (Hours12 != nullptr)
		*Hours12 = Parms.Hours12;

	if (Hours24 != nullptr)
		*Hours24 = Parms.Hours24;

	if (Day != nullptr)
		*Day = Parms.Day;

	if (Month != nullptr)
		*Month = Parms.Month;

	if (Year != nullptr)
		*Year = Parms.Year;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.TrimDigitsFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    inString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::TrimDigitsFromString(const class FString& inString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "TrimDigitsFromString");

	Params::GBFunctionLibrary_TrimDigitsFromString Parms{};

	Parms.inString = std::move(inString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.TrimExtension
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SourceStr                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::TrimExtension(const class FString& SourceStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "TrimExtension");

	Params::GBFunctionLibrary_TrimExtension Parms{};

	Parms.SourceStr = std::move(SourceStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.UpdateMissionModBase
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   NewModID                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            MatchingGameModes                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bOnlyStagedMod                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::UpdateMissionModBase(class UObject* WorldContextObject, const class FString& Filename, const struct FUInt64& NewModID, const TArray<class FString>& MatchingGameModes, const bool bOnlyStagedMod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "UpdateMissionModBase");

	Params::GBFunctionLibrary_UpdateMissionModBase Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Filename = std::move(Filename);
	Parms.NewModID = std::move(NewModID);
	Parms.MatchingGameModes = std::move(MatchingGameModes);
	Parms.bOnlyStagedMod = bOnlyStagedMod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.UpdateMissionParametersFromMaplist
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            PermittedMissions                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBFunctionLibrary::UpdateMissionParametersFromMaplist(const class FString& Parameters, const TArray<class FString>& PermittedMissions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "UpdateMissionParametersFromMaplist");

	Params::GBFunctionLibrary_UpdateMissionParametersFromMaplist Parms{};

	Parms.Parameters = std::move(Parameters);
	Parms.PermittedMissions = std::move(PermittedMissions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.VerticalFOV
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   HorizontalFOV                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBFunctionLibrary::VerticalFOV(float HorizontalFOV, float AspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "VerticalFOV");

	Params::GBFunctionLibrary_VerticalFOV Parms{};

	Parms.HorizontalFOV = HorizontalFOV;
	Parms.AspectRatio = AspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBFunctionLibrary.ViewportPositionDeproject
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ViewportPosition                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldOrigin                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBFunctionLibrary::ViewportPositionDeproject(class UObject* WorldContextObject, const struct FVector2D& ViewportPosition, struct FVector* OutWorldOrigin, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBFunctionLibrary", "ViewportPositionDeproject");

	Params::GBFunctionLibrary_ViewportPositionDeproject Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ViewportPosition = std::move(ViewportPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldOrigin != nullptr)
		*OutWorldOrigin = std::move(Parms.OutWorldOrigin);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.AddReplicatedPlayerStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::AddReplicatedPlayerStat(const class FString& StatString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "AddReplicatedPlayerStat");

	Params::GBPlayerState_AddReplicatedPlayerStat Parms{};

	Parms.StatString = std::move(StatString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ApplyPlayerScoreTemplateFromGameState
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerState::ApplyPlayerScoreTemplateFromGameState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ApplyPlayerScoreTemplateFromGameState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.AwardPlayerScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ScoreName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreMultiple                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::AwardPlayerScore(class FName ScoreName, int32 ScoreMultiple)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "AwardPlayerScore");

	Params::GBPlayerState_AwardPlayerScore Parms{};

	Parms.ScoreName = ScoreName;
	Parms.ScoreMultiple = ScoreMultiple;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ClearPlayerScores
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerState::ClearPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ClearPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ClearReplicatedPlayerStats
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerState::ClearReplicatedPlayerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ClearReplicatedPlayerStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ClearStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StatKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::ClearStat(class FName StatName, const class FString& StatKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ClearStat");

	Params::GBPlayerState_ClearStat Parms{};

	Parms.StatName = StatName;
	Parms.StatKey = std::move(StatKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.GetReplicatedPlayerStats
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBPlayerState::GetReplicatedPlayerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetReplicatedPlayerStats");

	Params::GBPlayerState_GetReplicatedPlayerStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetStatKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBPlayerState::GetStatKeys(class FName StatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetStatKeys");

	Params::GBPlayerState_GetStatKeys Parms{};

	Parms.StatName = StatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StatKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetStatValue(class FName StatName, const class FString& StatKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetStatValue");

	Params::GBPlayerState_GetStatValue Parms{};

	Parms.StatName = StatName;
	Parms.StatKey = std::move(StatKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetTimeSinceLastBadWord
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetTimeSinceLastBadWord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetTimeSinceLastBadWord");

	Params::GBPlayerState_GetTimeSinceLastBadWord Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetTotalStatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetTotalStatValue(class FName StatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetTotalStatValue");

	Params::GBPlayerState_GetTotalStatValue Parms{};

	Parms.StatName = StatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IncrementBadWordCount
// (Final, Native, Public)

void AGBPlayerState::IncrementBadWordCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IncrementBadWordCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.IncrementStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StatKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::IncrementStat(class FName StatName, const class FString& StatKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IncrementStat");

	Params::GBPlayerState_IncrementStat Parms{};

	Parms.StatName = StatName;
	Parms.StatKey = std::move(StatKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_AlertLevel
// (Final, Native, Public)

void AGBPlayerState::OnRep_AlertLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_AlertLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_ClientAssetIsMissing
// (Final, Native, Protected)

void AGBPlayerState::OnRep_ClientAssetIsMissing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_ClientAssetIsMissing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_PlayerCallSign
// (Final, Native, Protected)

void AGBPlayerState::OnRep_PlayerCallSign()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_PlayerCallSign");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_PlayerInteraction
// (Final, Native, Protected)

void AGBPlayerState::OnRep_PlayerInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_PlayerInteraction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_PlayerScores
// (Final, Native, Protected)

void AGBPlayerState::OnRep_PlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_PlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_PlayerVolunteered
// (Final, Native, Protected)

void AGBPlayerState::OnRep_PlayerVolunteered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_PlayerVolunteered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_ReadyRoomStatus
// (Final, Native, Protected)

void AGBPlayerState::OnRep_ReadyRoomStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_ReadyRoomStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_ReadyStatus
// (Final, Native, Protected)

void AGBPlayerState::OnRep_ReadyStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_ReadyStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_ReplicatedPlayerStats
// (Final, Native, Protected)

void AGBPlayerState::OnRep_ReplicatedPlayerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_ReplicatedPlayerStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_TeamElement
// (Final, Native, Protected)

void AGBPlayerState::OnRep_TeamElement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_TeamElement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_TeamElementNumber
// (Final, Native, Protected)

void AGBPlayerState::OnRep_TeamElementNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_TeamElementNumber");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRep_TeamId
// (Final, Native, Protected)

void AGBPlayerState::OnRep_TeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRep_TeamId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.OnRepPlayerNameEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bBeenWelcomed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::OnRepPlayerNameEvent(bool bBeenWelcomed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "OnRepPlayerNameEvent");

	Params::GBPlayerState_OnRepPlayerNameEvent Parms{};

	Parms.bBeenWelcomed = bBeenWelcomed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerState.PlayerInteractionChangedEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGBPlayerInteraction&      NewPlayerInteraction                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGBPlayerState::PlayerInteractionChangedEvent(const struct FGBPlayerInteraction& NewPlayerInteraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "PlayerInteractionChangedEvent");

	Params::GBPlayerState_PlayerInteractionChangedEvent Parms{};

	Parms.NewPlayerInteraction = std::move(NewPlayerInteraction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlayerState.ReportClientMissingAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::ReportClientMissingAsset(const class FString& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ReportClientMissingAsset");

	Params::GBPlayerState_ReportClientMissingAsset Parms{};

	Parms.AssetName = std::move(AssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ResetBadWordCount
// (Final, Native, Public)

void AGBPlayerState::ResetBadWordCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ResetBadWordCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ResetPlayerScores
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerState::ResetPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ResetPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ResetStats
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerState::ResetStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ResetStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ServerApplyPlayerSettingsGameplayTags
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FGameplayTagContainer&     PlayerSettingTags                                      (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerState::ServerApplyPlayerSettingsGameplayTags(const struct FGameplayTagContainer& PlayerSettingTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ServerApplyPlayerSettingsGameplayTags");

	Params::GBPlayerState_ServerApplyPlayerSettingsGameplayTags Parms{};

	Parms.PlayerSettingTags = std::move(PlayerSettingTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ServerRegisterPlayerWithSession
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const TArray<uint8>&                    AuthSessionTicket                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBPlayerState::ServerRegisterPlayerWithSession(const TArray<uint8>& AuthSessionTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ServerRegisterPlayerWithSession");

	Params::GBPlayerState_ServerRegisterPlayerWithSession Parms{};

	Parms.AuthSessionTicket = std::move(AuthSessionTicket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ServerReportClientMissingAsset
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::ServerReportClientMissingAsset(const class FString& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ServerReportClientMissingAsset");

	Params::GBPlayerState_ServerReportClientMissingAsset Parms{};

	Parms.AssetName = std::move(AssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ServerSetPlayerVolunteered
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const bool                              bNewPlayerVolunteered                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::ServerSetPlayerVolunteered(const bool bNewPlayerVolunteered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ServerSetPlayerVolunteered");

	Params::GBPlayerState_ServerSetPlayerVolunteered Parms{};

	Parms.bNewPlayerVolunteered = bNewPlayerVolunteered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.ServerSyncPlayerScores
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AGBPlayerState::ServerSyncPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ServerSyncPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetAlertLevel
// (Final, Native, Public)
// Parameters:
// EAlertLevel                             NewAlertLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetAlertLevel(EAlertLevel NewAlertLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetAlertLevel");

	Params::GBPlayerState_SetAlertLevel Parms{};

	Parms.NewAlertLevel = NewAlertLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetAllowedToRestart
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAllowedToRestart                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetAllowedToRestart(bool bNewAllowedToRestart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetAllowedToRestart");

	Params::GBPlayerState_SetAllowedToRestart Parms{};

	Parms.bNewAllowedToRestart = bNewAllowedToRestart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetCallSign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewCallSign                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetCallSign(const class FString& NewCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetCallSign");

	Params::GBPlayerState_SetCallSign Parms{};

	Parms.NewCallSign = std::move(NewCallSign);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetInsertionPoint
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInsertionPoint*                NewInsertionPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetInsertionPoint(class AGBInsertionPoint* NewInsertionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetInsertionPoint");

	Params::GBPlayerState_SetInsertionPoint Parms{};

	Parms.NewInsertionPoint = NewInsertionPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetLives
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewLives                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetLives(uint8 NewLives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetLives");

	Params::GBPlayerState_SetLives Parms{};

	Parms.NewLives = NewLives;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetOnDuty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewOnDuty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetOnDuty(bool bNewOnDuty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetOnDuty");

	Params::GBPlayerState_SetOnDuty Parms{};

	Parms.bNewOnDuty = bNewOnDuty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetPlayerInteraction
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const EGBPlayerInteractionStatus        NewPlayerInteractionStatus                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   OtherPlayerState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetPlayerInteraction(const EGBPlayerInteractionStatus NewPlayerInteractionStatus, class AGBPlayerState* OtherPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetPlayerInteraction");

	Params::GBPlayerState_SetPlayerInteraction Parms{};

	Parms.NewPlayerInteractionStatus = NewPlayerInteractionStatus;
	Parms.OtherPlayerState = OtherPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetPlayerVolunteered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewPlayerVolunteered                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetPlayerVolunteered(const bool bNewPlayerVolunteered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetPlayerVolunteered");

	Params::GBPlayerState_SetPlayerVolunteered Parms{};

	Parms.bNewPlayerVolunteered = bNewPlayerVolunteered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetReadyRoomStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EReadyRoomStatus                        NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetReadyRoomStatus(EReadyRoomStatus NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetReadyRoomStatus");

	Params::GBPlayerState_SetReadyRoomStatus Parms{};

	Parms.NewStatus = NewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetReadyStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EReadyStatus                            NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetReadyStatus(EReadyStatus NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetReadyStatus");

	Params::GBPlayerState_SetReadyStatus Parms{};

	Parms.NewStatus = NewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetServerConnectString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewServerConnectString                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetServerConnectString(const class FString& NewServerConnectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetServerConnectString");

	Params::GBPlayerState_SetServerConnectString Parms{};

	Parms.NewServerConnectString = std::move(NewServerConnectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetTeamElement
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ETeamElement&                     NewTeamElement                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetTeamElement(const ETeamElement& NewTeamElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetTeamElement");

	Params::GBPlayerState_SetTeamElement Parms{};

	Parms.NewTeamElement = NewTeamElement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetTeamElementNumber
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            NewTeamElementNumber                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetTeamElementNumber(const int32& NewTeamElementNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetTeamElementNumber");

	Params::GBPlayerState_SetTeamElementNumber Parms{};

	Parms.NewTeamElementNumber = NewTeamElementNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetUseElementCallSign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewUseElementCallSign                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetUseElementCallSign(const bool bNewUseElementCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetUseElementCallSign");

	Params::GBPlayerState_SetUseElementCallSign Parms{};

	Parms.bNewUseElementCallSign = bNewUseElementCallSign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SetWasInPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewWasInPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerState::SetWasInPlay(bool bNewWasInPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SetWasInPlay");

	Params::GBPlayerState_SetWasInPlay Parms{};

	Parms.bNewWasInPlay = bNewWasInPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.SyncPlayerScores
// (Final, Native, Public, BlueprintCallable)

void AGBPlayerState::SyncPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "SyncPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.UpdateTeamElementNumber
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBPlayerState::UpdateTeamElementNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "UpdateTeamElementNumber");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.AllowedToChangeKit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::AllowedToChangeKit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "AllowedToChangeKit");

	Params::GBPlayerState_AllowedToChangeKit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.AllowedToRestart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::AllowedToRestart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "AllowedToRestart");

	Params::GBPlayerState_AllowedToRestart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.ArePlayerScoresInitialised
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::ArePlayerScoresInitialised() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "ArePlayerScoresInitialised");

	Params::GBPlayerState_ArePlayerScoresInitialised Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetAlertLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAlertLevel                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAlertLevel AGBPlayerState::GetAlertLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetAlertLevel");

	Params::GBPlayerState_GetAlertLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetBadWordCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetBadWordCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetBadWordCount");

	Params::GBPlayerState_GetBadWordCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetCallSign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBPlayerState::GetCallSign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetCallSign");

	Params::GBPlayerState_GetCallSign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBPlayerState::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetCharacter");

	Params::GBPlayerState_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetInsertionPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInsertionPoint*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInsertionPoint* AGBPlayerState::GetInsertionPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetInsertionPoint");

	Params::GBPlayerState_GetInsertionPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetInteractingPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerState* AGBPlayerState::GetInteractingPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetInteractingPlayer");

	Params::GBPlayerState_GetInteractingPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetLastBadWordSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetLastBadWordSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetLastBadWordSeconds");

	Params::GBPlayerState_GetLastBadWordSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetLives
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBPlayerState::GetLives() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetLives");

	Params::GBPlayerState_GetLives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetNextMapVoteIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetNextMapVoteIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetNextMapVoteIndex");

	Params::GBPlayerState_GetNextMapVoteIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetNoReceiveTeamVOIP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::GetNoReceiveTeamVOIP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetNoReceiveTeamVOIP");

	Params::GBPlayerState_GetNoReceiveTeamVOIP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetOldName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBPlayerState::GetOldName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetOldName");

	Params::GBPlayerState_GetOldName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetOnDuty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::GetOnDuty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetOnDuty");

	Params::GBPlayerState_GetOnDuty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetPingInMillisecondsGetPing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerState::GetPingInMillisecondsGetPing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetPingInMillisecondsGetPing");

	Params::GBPlayerState_GetPingInMillisecondsGetPing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetPlayerInteraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBPlayerInteraction             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBPlayerInteraction AGBPlayerState::GetPlayerInteraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetPlayerInteraction");

	Params::GBPlayerState_GetPlayerInteraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetPlayerLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBPlayerState::GetPlayerLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetPlayerLocation");

	Params::GBPlayerState_GetPlayerLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetPlayerRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerState::GetPlayerRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetPlayerRotation");

	Params::GBPlayerState_GetPlayerRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetPlayerScores
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBScoreLine>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBScoreLine> AGBPlayerState::GetPlayerScores() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetPlayerScores");

	Params::GBPlayerState_GetPlayerScores Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetPlayerVolunteered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::GetPlayerVolunteered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetPlayerVolunteered");

	Params::GBPlayerState_GetPlayerVolunteered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetQuickAdminCommands
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBPlayerState::GetQuickAdminCommands() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetQuickAdminCommands");

	Params::GBPlayerState_GetQuickAdminCommands Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetReadyRoomStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EReadyRoomStatus                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EReadyRoomStatus AGBPlayerState::GetReadyRoomStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetReadyRoomStatus");

	Params::GBPlayerState_GetReadyRoomStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetReadyStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EReadyStatus                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EReadyStatus AGBPlayerState::GetReadyStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetReadyStatus");

	Params::GBPlayerState_GetReadyStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetServerConnectString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBPlayerState::GetServerConnectString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetServerConnectString");

	Params::GBPlayerState_GetServerConnectString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetTeamElement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETeamElement                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamElement AGBPlayerState::GetTeamElement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetTeamElement");

	Params::GBPlayerState_GetTeamElement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetTeamElementLetter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBPlayerState::GetTeamElementLetter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetTeamElementLetter");

	Params::GBPlayerState_GetTeamElementLetter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetTeamElementNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBPlayerState::GetTeamElementNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetTeamElementNumber");

	Params::GBPlayerState_GetTeamElementNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.GetUseElementCallSign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::GetUseElementCallSign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "GetUseElementCallSign");

	Params::GBPlayerState_GetUseElementCallSign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IsBenchmarking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::IsBenchmarking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IsBenchmarking");

	Params::GBPlayerState_IsBenchmarking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IsLocal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::IsLocal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IsLocal");

	Params::GBPlayerState_IsLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IsOnlyASpectatorBP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::IsOnlyASpectatorBP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IsOnlyASpectatorBP");

	Params::GBPlayerState_IsOnlyASpectatorBP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IsPlayerControlledByOther
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::IsPlayerControlledByOther() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IsPlayerControlledByOther");

	Params::GBPlayerState_IsPlayerControlledByOther Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IsPlayerControllingOther
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::IsPlayerControllingOther() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IsPlayerControllingOther");

	Params::GBPlayerState_IsPlayerControllingOther Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.IsPlayerRestrained
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::IsPlayerRestrained() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "IsPlayerRestrained");

	Params::GBPlayerState_IsPlayerRestrained Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerState.UpdateRichPresence
// (Final, Native, Protected, Const)

void AGBPlayerState::UpdateRichPresence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "UpdateRichPresence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerState.WasInPlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerState::WasInPlay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerState", "WasInPlay");

	Params::GBPlayerState_WasInPlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameInstance.GetOptionValuesForMutator
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaScriptInfo&                  ScriptInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FLuaScriptOption>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLuaScriptOption> UGBGameInstance::GetOptionValuesForMutator(struct FLuaScriptInfo& ScriptInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "GetOptionValuesForMutator");

	Params::GBGameInstance_GetOptionValuesForMutator Parms{};

	Parms.ScriptInfo = std::move(ScriptInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ScriptInfo = std::move(Parms.ScriptInfo);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameInstance.LoadAllMutators
// (Final, Native, Public, BlueprintCallable)

void UGBGameInstance::LoadAllMutators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "LoadAllMutators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.LoadMutatorsForMod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameInstance::LoadMutatorsForMod(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "LoadMutatorsForMod");

	Params::GBGameInstance_LoadMutatorsForMod Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.OnModSyncComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameInstance::OnModSyncComplete(bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "OnModSyncComplete");

	Params::GBGameInstance_OnModSyncComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.PostInviteAccepted
// (Final, Native, Public, BlueprintCallable)

void UGBGameInstance::PostInviteAccepted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "PostInviteAccepted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.SetNewMasterServerModList
// (Final, BlueprintAuthorityOnly, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBModBasicInfo>&   NewMasterServerModList                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGBGameInstance::SetNewMasterServerModList(const TArray<struct FGBModBasicInfo>& NewMasterServerModList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "SetNewMasterServerModList");

	Params::GBGameInstance_SetNewMasterServerModList Parms{};

	Parms.NewMasterServerModList = std::move(NewMasterServerModList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.UnloadAllMutators
// (Final, Native, Public, BlueprintCallable)

void UGBGameInstance::UnloadAllMutators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "UnloadAllMutators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.UnloadMutatorsForMod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameInstance::UnloadMutatorsForMod(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "UnloadMutatorsForMod");

	Params::GBGameInstance_UnloadMutatorsForMod Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameInstance.GetLastMapLoadTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBGameInstance::GetLastMapLoadTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "GetLastMapLoadTime");

	Params::GBGameInstance_GetLastMapLoadTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameInstance.GetMasterServerModList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBModBasicInfo>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBModBasicInfo> UGBGameInstance::GetMasterServerModList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "GetMasterServerModList");

	Params::GBGameInstance_GetMasterServerModList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameInstance.GetServerDownloadModsComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameInstance::GetServerDownloadModsComplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "GetServerDownloadModsComplete");

	Params::GBGameInstance_GetServerDownloadModsComplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameInstance.GetStillDownloadingModsForListenServerClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameInstance::GetStillDownloadingModsForListenServerClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameInstance", "GetStillDownloadingModsForListenServerClient");

	Params::GBGameInstance_GetStillDownloadingModsForListenServerClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.AbortRoundStage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::AbortRoundStage(class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "AbortRoundStage");

	Params::GBGameMode_AbortRoundStage Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.AddBots
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::AddBots(uint8 Count, uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "AddBots");

	Params::GBGameMode_AddBots Parms{};

	Parms.Count = Count;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.AddDefaultLoadout
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::AddDefaultLoadout(const class FName& LoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "AddDefaultLoadout");

	Params::GBGameMode_AddDefaultLoadout Parms{};

	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.AdjudicateWhetherMatchFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::AdjudicateWhetherMatchFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "AdjudicateWhetherMatchFinished");

	Params::GBGameMode_AdjudicateWhetherMatchFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.AdvanceToNextMap
// (Final, Native, Protected, BlueprintCallable)

void AGBGameMode::AdvanceToNextMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "AdvanceToNextMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.AFKDetected
// (Final, Native, Protected)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::AFKDetected(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "AFKDetected");

	Params::GBGameMode_AFKDetected Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.ApplyPlayerLoadout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::ApplyPlayerLoadout(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "ApplyPlayerLoadout");

	Params::GBGameMode_ApplyPlayerLoadout Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.BecomeSpectator
// (Native, Public, BlueprintCallable)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::BecomeSpectator(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "BecomeSpectator");

	Params::GBGameMode_BecomeSpectator Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.BeginServerShutdown
// (Final, Native, Protected)

void AGBGameMode::BeginServerShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "BeginServerShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.Broadcast
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGBPlayerState*                   SenderPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MessageType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::Broadcast(class AGBPlayerState* SenderPlayerState, const class FString& Message, class FName MessageType, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "Broadcast");

	Params::GBGameMode_Broadcast Parms{};

	Parms.SenderPlayerState = SenderPlayerState;
	Parms.Message = std::move(Message);
	Parms.MessageType = MessageType;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.BroadcastGameMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             GameMessageId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::BroadcastGameMessage(class FName GameMessageId, class FName Type, float Duration, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "BroadcastGameMessage");

	Params::GBGameMode_BroadcastGameMessage Parms{};

	Parms.GameMessageId = GameMessageId;
	Parms.Type = Type;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.BroadcastLocalized
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Sender                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULocalMessage>        Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SWITCH                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::BroadcastLocalized(class AActor* Sender, TSubclassOf<class ULocalMessage> Message, int32 SWITCH, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "BroadcastLocalized");

	Params::GBGameMode_BroadcastLocalized Parms{};

	Parms.Sender = Sender;
	Parms.Message = Message;
	Parms.SWITCH = SWITCH;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.ChangeCallSign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewCallSign                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::ChangeCallSign(class AController* Controller, const class FString& NewCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "ChangeCallSign");

	Params::GBGameMode_ChangeCallSign Parms{};

	Parms.Controller = Controller;
	Parms.NewCallSign = std::move(NewCallSign);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.CharacterDied
// (Native, Public)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      CharacterController                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KillerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::CharacterDied(class ACharacter* Character, class AController* CharacterController, class AController* KillerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "CharacterDied");

	Params::GBGameMode_CharacterDied Parms{};

	Parms.Character = Character;
	Parms.CharacterController = CharacterController;
	Parms.KillerController = KillerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.CheckChatForBadWords
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString*                          ChatText                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::CheckChatForBadWords(class FString* ChatText, class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "CheckChatForBadWords");

	Params::GBGameMode_CheckChatForBadWords Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChatText != nullptr)
		*ChatText = std::move(Parms.ChatText);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.CheckServerShutdown
// (Final, Native, Protected)

void AGBGameMode::CheckServerShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "CheckServerShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.ClearRoundStageTime
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::ClearRoundStageTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "ClearRoundStageTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.CompleteAllObjectives
// (Final, Exec, Native, Public)

void AGBGameMode::CompleteAllObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "CompleteAllObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.EnterPlayArea
// (Native, Public, BlueprintCallable)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::EnterPlayArea(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "EnterPlayArea");

	Params::GBGameMode_EnterPlayArea Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.EnterReadyRoom
// (Native, Public, BlueprintCallable)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::EnterReadyRoom(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "EnterReadyRoom");

	Params::GBGameMode_EnterReadyRoom Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.FinishServerShutdown
// (Final, Native, Protected)

void AGBGameMode::FinishServerShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "FinishServerShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.FreezeBots
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::FreezeBots(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "FreezeBots");

	Params::GBGameMode_FreezeBots Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.GetBestLateComerInsertionPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInsertionPoint*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInsertionPoint* AGBGameMode::GetBestLateComerInsertionPoint(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetBestLateComerInsertionPoint");

	Params::GBGameMode_GetBestLateComerInsertionPoint Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetBotControllers
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBKytController*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBKytController*> AGBGameMode::GetBotControllers(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetBotControllers");

	Params::GBGameMode_GetBotControllers Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetGameModeTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue AGBGameMode::GetGameModeTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetGameModeTable");

	Params::GBGameMode_GetGameModeTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetGameModeTableInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaScriptInfo                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaScriptInfo AGBGameMode::GetGameModeTableInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetGameModeTableInfo");

	Params::GBGameMode_GetGameModeTableInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetMissionFileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBGameMode::GetMissionFileName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetMissionFileName");

	Params::GBGameMode_GetMissionFileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetPlayerLoadoutInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* AGBGameMode::GetPlayerLoadoutInfo(class AController* Controller, const class FName& LoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetPlayerLoadoutInfo");

	Params::GBGameMode_GetPlayerLoadoutInfo Parms{};

	Parms.Controller = Controller;
	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetRandomInsertionPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInsertionPoint*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInsertionPoint* AGBGameMode::GetRandomInsertionPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetRandomInsertionPoint");

	Params::GBGameMode_GetRandomInsertionPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetReadyPlayerTeamCounts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bExcludeBots                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> AGBGameMode::GetReadyPlayerTeamCounts(bool bExcludeBots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetReadyPlayerTeamCounts");

	Params::GBGameMode_GetReadyPlayerTeamCounts Parms{};

	Parms.bExcludeBots = bExcludeBots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.HandleEndRoundCommand
// (Native, Event, Protected, BlueprintEvent)

void AGBGameMode::HandleEndRoundCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "HandleEndRoundCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.HandleRestartRoundCommand
// (Native, Event, Protected, BlueprintEvent)

void AGBGameMode::HandleRestartRoundCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "HandleRestartRoundCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.HandleStartRoundCommand
// (Native, Event, Protected, BlueprintEvent)

void AGBGameMode::HandleStartRoundCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "HandleStartRoundCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.IsSequencePlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::IsSequencePlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "IsSequencePlaying");

	Params::GBGameMode_IsSequencePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.KillBots
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::KillBots(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "KillBots");

	Params::GBGameMode_KillBots Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.LoadLuaScript
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaScriptInfo*                  OutLuaScriptInfo                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::LoadLuaScript(const class FString& Filename, struct FLuaScriptInfo* OutLuaScriptInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "LoadLuaScript");

	Params::GBGameMode_LoadLuaScript Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLuaScriptInfo != nullptr)
		*OutLuaScriptInfo = std::move(Parms.OutLuaScriptInfo);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.MakeEveryoneSpectate
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::MakeEveryoneSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "MakeEveryoneSpectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.NotifyMissionObjectiveStatusChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EGBMissionObjectiveStatus         NewMissionObjectiveStatus                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::NotifyMissionObjectiveStatusChanged(class AGBMissionObjective* MissionObjective, const EGBMissionObjectiveStatus NewMissionObjectiveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "NotifyMissionObjectiveStatusChanged");

	Params::GBGameMode_NotifyMissionObjectiveStatusChanged Parms{};

	Parms.MissionObjective = MissionObjective;
	Parms.NewMissionObjectiveStatus = NewMissionObjectiveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.NotifySequenceHasStopped
// (Final, Native, Protected, BlueprintCallable)

void AGBGameMode::NotifySequenceHasStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "NotifySequenceHasStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnAIInitializedHandler
// (Final, Native, Protected)
// Parameters:
// class AGBKytController*                 NewAIController                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnAIInitializedHandler(class AGBKytController* NewAIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnAIInitializedHandler");

	Params::GBGameMode_OnAIInitializedHandler Parms{};

	Parms.NewAIController = NewAIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnCharacterDiedEvent
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      CharacterController                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KillerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnCharacterDiedEvent(class ACharacter* Character, class AController* CharacterController, class AController* KillerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnCharacterDiedEvent");

	Params::GBGameMode_OnCharacterDiedEvent Parms{};

	Parms.Character = Character;
	Parms.CharacterController = CharacterController;
	Parms.KillerController = KillerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnDroppedInvItemDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnDroppedInvItemDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnDroppedInvItemDestroyed");

	Params::GBGameMode_OnDroppedInvItemDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnLuaError
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnLuaError(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnLuaError");

	Params::GBGameMode_OnLuaError Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnPlayerCastNextMapVote
// (Final, Native, Public, HasOutParams)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            MapListIndex                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnPlayerCastNextMapVote(class APlayerState* PlayerState, const int32& MapListIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnPlayerCastNextMapVote");

	Params::GBGameMode_OnPlayerCastNextMapVote Parms{};

	Parms.PlayerState = PlayerState;
	Parms.MapListIndex = MapListIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnProcessCommand
// (Final, Native, Public)
// Parameters:
// class APlayerController*                InvokerPlayerController                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnProcessCommand(class APlayerController* InvokerPlayerController, const class FString& Command, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnProcessCommand");

	Params::GBGameMode_OnProcessCommand Parms{};

	Parms.InvokerPlayerController = InvokerPlayerController;
	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnProcessCommandEvent
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnProcessCommandEvent(const class FString& Command, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnProcessCommandEvent");

	Params::GBGameMode_OnProcessCommandEvent Parms{};

	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnRetryStandalone
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AGBPlayerController*              PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnRetryStandalone(class AGBPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnRetryStandalone");

	Params::GBGameMode_OnRetryStandalone Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnRoundStageAborted
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnRoundStageAborted(class FName Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnRoundStageAborted");

	Params::GBGameMode_OnRoundStageAborted Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnRoundStageSet
// (Native, Event, Protected, BlueprintEvent)

void AGBGameMode::OnRoundStageSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnRoundStageSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnRoundStageTimeElapsed
// (Native, Event, Protected, BlueprintEvent)

void AGBGameMode::OnRoundStageTimeElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnRoundStageTimeElapsed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnVoteCommand
// (Final, Native, Protected)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnVoteCommand(class APlayerController* PlayerController, const class FString& Command, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnVoteCommand");

	Params::GBGameMode_OnVoteCommand Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.OnVoteCommandEvent
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::OnVoteCommandEvent(class APlayerController* PlayerController, const class FString& Command, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "OnVoteCommandEvent");

	Params::GBGameMode_OnVoteCommandEvent Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.PlayerCanEnterPlayArea
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::PlayerCanEnterPlayArea(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PlayerCanEnterPlayArea");

	Params::GBGameMode_PlayerCanEnterPlayArea Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.PlayerEnteredPlayArea
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::PlayerEnteredPlayArea(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PlayerEnteredPlayArea");

	Params::GBGameMode_PlayerEnteredPlayArea Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.PlayerEnteredReadyRoom
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::PlayerEnteredReadyRoom(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PlayerEnteredReadyRoom");

	Params::GBGameMode_PlayerEnteredReadyRoom Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.PlayerGameModeRequest
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Request                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::PlayerGameModeRequest(class AGBPlayerState* GBPlayerState, const class FString& Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PlayerGameModeRequest");

	Params::GBGameMode_PlayerGameModeRequest Parms{};

	Parms.GBPlayerState = GBPlayerState;
	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.PlayerInsertionPointChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInsertionPoint*                InsertionPoint                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::PlayerInsertionPointChanged(class AGBPlayerState* GBPlayerState, class AGBInsertionPoint* InsertionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PlayerInsertionPointChanged");

	Params::GBGameMode_PlayerInsertionPointChanged Parms{};

	Parms.GBPlayerState = GBPlayerState;
	Parms.InsertionPoint = InsertionPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.PlayerReadyStatusChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EReadyStatus                            ReadyStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::PlayerReadyStatusChanged(class AGBPlayerState* GBPlayerState, EReadyStatus ReadyStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PlayerReadyStatusChanged");

	Params::GBGameMode_PlayerReadyStatusChanged Parms{};

	Parms.GBPlayerState = GBPlayerState;
	Parms.ReadyStatus = ReadyStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.PrepLatecomer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::PrepLatecomer(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "PrepLatecomer");

	Params::GBGameMode_PrepLatecomer Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.RefreshDeadBodyList
// (Final, Native, Protected)

void AGBGameMode::RefreshDeadBodyList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "RefreshDeadBodyList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.RefreshDroppedInvItemsTimer
// (Final, Native, Protected)

void AGBGameMode::RefreshDroppedInvItemsTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "RefreshDroppedInvItemsTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.RemoveBots
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::RemoveBots(uint8 Count, uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "RemoveBots");

	Params::GBGameMode_RemoveBots Parms{};

	Parms.Count = Count;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.ReportAICreatedInPlayArea
// (Final, Native, Public)
// Parameters:
// class AGBCharacter*                     GBCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::ReportAICreatedInPlayArea(class AGBCharacter* GBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "ReportAICreatedInPlayArea");

	Params::GBGameMode_ReportAICreatedInPlayArea Parms{};

	Parms.GBCharacter = GBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.ResetMissionObjectives
// (Final, Native, Protected)

void AGBGameMode::ResetMissionObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "ResetMissionObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.RetryStandalone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBPlayerController*              PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::RetryStandalone(class AGBPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "RetryStandalone");

	Params::GBGameMode_RetryStandalone Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.RunMissionScript
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ScriptName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::RunMissionScript(const class FString& ScriptName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "RunMissionScript");

	Params::GBGameMode_RunMissionScript Parms{};

	Parms.ScriptName = std::move(ScriptName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SendEveryoneToPlayArea
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::SendEveryoneToPlayArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SendEveryoneToPlayArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SendEveryoneToReadyRoom
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::SendEveryoneToReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SendEveryoneToReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetCampaignMissionHasGoneCoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInCampaignMissionHasGoneCoop                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetCampaignMissionHasGoneCoop(const bool bInCampaignMissionHasGoneCoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetCampaignMissionHasGoneCoop");

	Params::GBGameMode_SetCampaignMissionHasGoneCoop Parms{};

	Parms.bInCampaignMissionHasGoneCoop = bInCampaignMissionHasGoneCoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetDefaultRoundStageTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             RoundStageName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewTimeLimit                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetDefaultRoundStageTime(class FName RoundStageName, int32 NewTimeLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetDefaultRoundStageTime");

	Params::GBGameMode_SetDefaultRoundStageTime Parms{};

	Parms.RoundStageName = RoundStageName;
	Parms.NewTimeLimit = NewTimeLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetDifficulty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewDifficulty                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetDifficulty(int32 NewDifficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetDifficulty");

	Params::GBGameMode_SetDifficulty Parms{};

	Parms.NewDifficulty = NewDifficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetGameModeModID
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FUInt64&                   InGameModeModID                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetGameModeModID(const struct FUInt64& InGameModeModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetGameModeModID");

	Params::GBGameMode_SetGameModeModID Parms{};

	Parms.InGameModeModID = std::move(InGameModeModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetMatchInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGBMatchInfo&              NewMatchInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGBGameMode::SetMatchInfo(const struct FGBMatchInfo& NewMatchInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetMatchInfo");

	Params::GBGameMode_SetMatchInfo Parms{};

	Parms.NewMatchInfo = std::move(NewMatchInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetMatchStartTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewMatchStartTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetMatchStartTime(const float NewMatchStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetMatchStartTime");

	Params::GBGameMode_SetMatchStartTime Parms{};

	Parms.NewMatchStartTime = NewMatchStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetMatchType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EGBMatchType                      NewMatchType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bResetRoundScores                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetMatchType(const EGBMatchType NewMatchType, const bool bResetRoundScores)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetMatchType");

	Params::GBGameMode_SetMatchType Parms{};

	Parms.NewMatchType = NewMatchType;
	Parms.bResetRoundScores = bResetRoundScores;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetMissionData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGBMissionData*                   NewMissionData                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSpawnActors                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRunScript                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetMissionData(class UGBMissionData* NewMissionData, bool bSpawnActors, bool bRunScript, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetMissionData");

	Params::GBGameMode_SetMissionData Parms{};

	Parms.NewMissionData = NewMissionData;
	Parms.bSpawnActors = bSpawnActors;
	Parms.bRunScript = bRunScript;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetMissionFileName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewMissionFileName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetMissionFileName(const class FString& NewMissionFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetMissionFileName");

	Params::GBGameMode_SetMissionFileName Parms{};

	Parms.NewMissionFileName = std::move(NewMissionFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetRecordStats
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewRecordStats                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetRecordStats(const bool bNewRecordStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetRecordStats");

	Params::GBGameMode_SetRecordStats Parms{};

	Parms.bNewRecordStats = bNewRecordStats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetRoundStage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewRoundStage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetRoundStage(class FName NewRoundStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetRoundStage");

	Params::GBGameMode_SetRoundStage Parms{};

	Parms.NewRoundStage = NewRoundStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetRoundStageTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetRoundStageTime(int32 NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetRoundStageTime");

	Params::GBGameMode_SetRoundStageTime Parms{};

	Parms.NewTime = NewTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.SetRoundTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   NewRoundTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::SetRoundTime(int32 NewRoundTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "SetRoundTime");

	Params::GBGameMode_SetRoundTime Parms{};

	Parms.NewRoundTime = NewRoundTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.ShouldCheckForTeamKills
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::ShouldCheckForTeamKills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "ShouldCheckForTeamKills");

	Params::GBGameMode_ShouldCheckForTeamKills Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.StandAloneCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::StandAloneCommand(const class FString& Command, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "StandAloneCommand");

	Params::GBGameMode_StandAloneCommand Parms{};

	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.StopCurrentSequencePlayback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bSuppressBlackOutAfter                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::StopCurrentSequencePlayback(const bool bSuppressBlackOutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "StopCurrentSequencePlayback");

	Params::GBGameMode_StopCurrentSequencePlayback Parms{};

	Parms.bSuppressBlackOutAfter = bSuppressBlackOutAfter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.TeleportPlayer
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  SpawnRotation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AGBGameMode::TeleportPlayer(class AGBPlayerState* GBPlayerState, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "TeleportPlayer");

	Params::GBGameMode_TeleportPlayer Parms{};

	Parms.GBPlayerState = GBPlayerState;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.SpawnRotation = std::move(SpawnRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.TimeLimitReached
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::TimeLimitReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "TimeLimitReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.TimeLimitTimer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBGameMode::TimeLimitTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "TimeLimitTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.TriggerSequencePlayback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>LevelSequenceActor                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsCutscene                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bCanAbort                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bResetActors                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bHidePlayers                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bBlackoutAfter                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameMode::TriggerSequencePlayback(TSoftObjectPtr<class ALevelSequenceActor> LevelSequenceActor, const bool bIsCutscene, const bool bCanAbort, const bool bResetActors, const bool bHidePlayers, const bool bBlackoutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "TriggerSequencePlayback");

	Params::GBGameMode_TriggerSequencePlayback Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;
	Parms.bIsCutscene = bIsCutscene;
	Parms.bCanAbort = bCanAbort;
	Parms.bResetActors = bResetActors;
	Parms.bHidePlayers = bHidePlayers;
	Parms.bBlackoutAfter = bBlackoutAfter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.UnFreezeBots
// (Final, Exec, Native, Public)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameMode::UnFreezeBots(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "UnFreezeBots");

	Params::GBGameMode_UnFreezeBots Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.UpdateCanRandomiseObjectives
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::UpdateCanRandomiseObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "UpdateCanRandomiseObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.UpdateGameRules
// (Final, Native, Public)

void AGBGameMode::UpdateGameRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "UpdateGameRules");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.UpdateMissionCompletionStats
// (Final, Native, Public, BlueprintCallable)

void AGBGameMode::UpdateMissionCompletionStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "UpdateMissionCompletionStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameMode.GameModeIsLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::GameModeIsLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GameModeIsLoaded");

	Params::GBGameMode_GameModeIsLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetAIBarkManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBAIBarkManager*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAIBarkManager* AGBGameMode::GetAIBarkManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetAIBarkManager");

	Params::GBGameMode_GetAIBarkManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetAISpawnManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBAISpawnManager*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAISpawnManager* AGBGameMode::GetAISpawnManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetAISpawnManager");

	Params::GBGameMode_GetAISpawnManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetAISpawnManagerClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBAISpawnManager>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBAISpawnManager> AGBGameMode::GetAISpawnManagerClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetAISpawnManagerClass");

	Params::GBGameMode_GetAISpawnManagerClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetBriefingRoomWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> AGBGameMode::GetBriefingRoomWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetBriefingRoomWidget");

	Params::GBGameMode_GetBriefingRoomWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetCampaignMissionHasGoneCoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::GetCampaignMissionHasGoneCoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetCampaignMissionHasGoneCoop");

	Params::GBGameMode_GetCampaignMissionHasGoneCoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetDefaultRoundStageTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             RoundStageName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameMode::GetDefaultRoundStageTime(class FName RoundStageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetDefaultRoundStageTime");

	Params::GBGameMode_GetDefaultRoundStageTime Parms{};

	Parms.RoundStageName = RoundStageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGBGameMode::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetDisplayName");

	Params::GBGameMode_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetFinalMissionCompletionFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameMode::GetFinalMissionCompletionFraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetFinalMissionCompletionFraction");

	Params::GBGameMode_GetFinalMissionCompletionFraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetGameModeModID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 AGBGameMode::GetGameModeModID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetGameModeModID");

	Params::GBGameMode_GetGameModeModID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetGBWorldSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBWorldSettings*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBWorldSettings* AGBGameMode::GetGBWorldSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetGBWorldSettings");

	Params::GBGameMode_GetGBWorldSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetMatchInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBMatchInfo                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBMatchInfo AGBGameMode::GetMatchInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetMatchInfo");

	Params::GBGameMode_GetMatchInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetMatchStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameMode::GetMatchStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetMatchStartTime");

	Params::GBGameMode_GetMatchStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetMissionCompletionFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameMode::GetMissionCompletionFraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetMissionCompletionFraction");

	Params::GBGameMode_GetMissionCompletionFraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetMissionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBMissionData*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBMissionData* AGBGameMode::GetMissionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetMissionData");

	Params::GBGameMode_GetMissionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetPermittedWeatherPresets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USkyCreatorWeatherPreset*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USkyCreatorWeatherPreset*> AGBGameMode::GetPermittedWeatherPresets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetPermittedWeatherPresets");

	Params::GBGameMode_GetPermittedWeatherPresets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetPlayingSequenceInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float*                                  OutTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutTimeLeft                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutDuration                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutIsCutscene                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutCanAbort                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutBlackoutAfter                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ALevelSequenceActor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALevelSequenceActor* AGBGameMode::GetPlayingSequenceInfo(float* OutTime, float* OutTimeLeft, float* OutDuration, bool* bOutIsCutscene, bool* bOutCanAbort, bool* bOutBlackoutAfter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetPlayingSequenceInfo");

	Params::GBGameMode_GetPlayingSequenceInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTime != nullptr)
		*OutTime = Parms.OutTime;

	if (OutTimeLeft != nullptr)
		*OutTimeLeft = Parms.OutTimeLeft;

	if (OutDuration != nullptr)
		*OutDuration = Parms.OutDuration;

	if (bOutIsCutscene != nullptr)
		*bOutIsCutscene = Parms.bOutIsCutscene;

	if (bOutCanAbort != nullptr)
		*bOutCanAbort = Parms.bOutCanAbort;

	if (bOutBlackoutAfter != nullptr)
		*bOutBlackoutAfter = Parms.bOutBlackoutAfter;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetRecordStats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::GetRecordStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetRecordStats");

	Params::GBGameMode_GetRecordStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetRoundStage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBGameMode::GetRoundStage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetRoundStage");

	Params::GBGameMode_GetRoundStage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetRoundStageIsCutScene
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::GetRoundStageIsCutScene() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetRoundStageIsCutScene");

	Params::GBGameMode_GetRoundStageIsCutScene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.GetRoundStageTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameMode::GetRoundStageTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "GetRoundStageTimeRemaining");

	Params::GBGameMode_GetRoundStageTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.HasBots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::HasBots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "HasBots");

	Params::GBGameMode_HasBots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.HasReachedTimeLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::HasReachedTimeLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "HasReachedTimeLimit");

	Params::GBGameMode_HasReachedTimeLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameMode.IsEditingMission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameMode::IsEditingMission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameMode", "IsEditingMission");

	Params::GBGameMode_IsEditingMission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeActorInterface.IsActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGBGameModeActorInterface::IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBGameModeActorInterface", "IsActive");

	Params::GBGameModeActorInterface_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeActorInterface.SetActive
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBGameModeActorInterface::SetActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBGameModeActorInterface", "SetActive");

	Params::GBGameModeActorInterface_SetActive Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameModeFunctionLibrary.GetGameModeOptions
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBGameModeFunctionLibrary::GetGameModeOptions(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameModeFunctionLibrary", "GetGameModeOptions");

	Params::GBGameModeFunctionLibrary_GetGameModeOptions Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionExtension
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBGameModeFunctionLibrary::GetMissionExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameModeFunctionLibrary", "GetMissionExtension");

	Params::GBGameModeFunctionLibrary_GetMissionExtension Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionFileName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MissionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBGameModeFunctionLibrary::GetMissionFileName(class UObject* WorldContextObject, const class FString& MissionName, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameModeFunctionLibrary", "GetMissionFileName");

	Params::GBGameModeFunctionLibrary_GetMissionFileName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionName = std::move(MissionName);
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionScriptFileName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ScriptName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBGameModeFunctionLibrary::GetMissionScriptFileName(const class FString& ScriptName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameModeFunctionLibrary", "GetMissionScriptFileName");

	Params::GBGameModeFunctionLibrary_GetMissionScriptFileName Parms{};

	Parms.ScriptName = std::move(ScriptName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeFunctionLibrary.GetMissionVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UGBGameModeFunctionLibrary::GetMissionVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameModeFunctionLibrary", "GetMissionVersion");

	Params::GBGameModeFunctionLibrary_GetMissionVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeLuaState.DebugPrint
// (Final, Native, Protected)
// Parameters:
// const struct FLuaValue&                 Message                                                (Parm, NativeAccessSpecifierPublic)

void UGBGameModeLuaState::DebugPrint(const struct FLuaValue& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameModeLuaState", "DebugPrint");

	Params::GBGameModeLuaState_DebugPrint Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameModeLuaState.GetComp
// (Final, Native, Protected)
// Parameters:
// const struct FLuaValue&                 Self                                                   (Parm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBGameModeLuaState::GetComp(const struct FLuaValue& Self)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameModeLuaState", "GetComp");

	Params::GBGameModeLuaState_GetComp Parms{};

	Parms.Self = std::move(Self);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeLuaState.GetScript
// (Final, Native, Protected)
// Parameters:
// const struct FLuaValue&                 Self                                                   (Parm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBGameModeLuaState::GetScript(const struct FLuaValue& Self)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameModeLuaState", "GetScript");

	Params::GBGameModeLuaState_GetScript Parms{};

	Parms.Self = std::move(Self);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameModeLuaState.GetTimeSeconds
// (Final, Native, Protected)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBGameModeLuaState::GetTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameModeLuaState", "GetTimeSeconds");

	Params::GBGameModeLuaState_GetTimeSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.YourGameGauntletController.StartTesting
// (Final, Native, Private)

void UYourGameGauntletController::StartTesting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YourGameGauntletController", "StartTesting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.YourGameGauntletController.StopProfiling
// (Final, Native, Private)

void UYourGameGauntletController::StopProfiling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YourGameGauntletController", "StopProfiling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.BindActionToKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName                       ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputBoundKey&            TargetKey                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::BindActionToKey(const class FName ActionName, const struct FInputBoundKey& TargetKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "BindActionToKey");

	Params::GBUIFunctionLibrary_BindActionToKey Parms{};

	Parms.ActionName = ActionName;
	Parms.TargetKey = std::move(TargetKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.BindAxisToKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName                       AxisName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputBoundKey&            TargetKey                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::BindAxisToKey(const class FName AxisName, const struct FInputBoundKey& TargetKey, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "BindAxisToKey");

	Params::GBUIFunctionLibrary_BindAxisToKey Parms{};

	Parms.AxisName = AxisName;
	Parms.TargetKey = std::move(TargetKey);
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.BindExecToKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    ExecCommand                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputBoundKey&            TargetKey                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::BindExecToKey(const class FString& ExecCommand, const struct FInputBoundKey& TargetKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "BindExecToKey");

	Params::GBUIFunctionLibrary_BindExecToKey Parms{};

	Parms.ExecCommand = std::move(ExecCommand);
	Parms.TargetKey = std::move(TargetKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.BreakGeometry
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGeometry&                 Geometry                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutAbsolutePosition                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::BreakGeometry(const struct FGeometry& Geometry, struct FVector2D* OutPosition, struct FVector2D* OutAbsolutePosition, struct FVector2D* OutSize, float* OutScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "BreakGeometry");

	Params::GBUIFunctionLibrary_BreakGeometry Parms{};

	Parms.Geometry = std::move(Geometry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutAbsolutePosition != nullptr)
		*OutAbsolutePosition = std::move(Parms.OutAbsolutePosition);

	if (OutSize != nullptr)
		*OutSize = std::move(Parms.OutSize);

	if (OutScale != nullptr)
		*OutScale = Parms.OutScale;
}


// Function GroundBranch.GBUIFunctionLibrary.CheckForThreeLetterProfanity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ThreeLetterCode                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::CheckForThreeLetterProfanity(const class FString& ThreeLetterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "CheckForThreeLetterProfanity");

	Params::GBUIFunctionLibrary_CheckForThreeLetterProfanity Parms{};

	Parms.ThreeLetterCode = std::move(ThreeLetterCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.DisplayDialogWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      DialogName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGBDialogWidget>      DialogWidgetClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const EGBMessageDialogType              DialogType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SelfDestructTime                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBDialogWidget*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBDialogWidget* UGBUIFunctionLibrary::DisplayDialogWidget(class UObject* WorldContextObject, const class FName& DialogName, TSubclassOf<class UGBDialogWidget> DialogWidgetClass, const class FText& Title, const class FText& Message, const EGBMessageDialogType DialogType, const float SelfDestructTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "DisplayDialogWidget");

	Params::GBUIFunctionLibrary_DisplayDialogWidget Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DialogName = DialogName;
	Parms.DialogWidgetClass = DialogWidgetClass;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.DialogType = DialogType;
	Parms.SelfDestructTime = SelfDestructTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.DoesStringTableEntryExist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       StringTableId                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InKey                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    KeyPrefix                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::DoesStringTableEntryExist(const class FName StringTableId, const class FString& InKey, const class FString& KeyPrefix, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "DoesStringTableEntryExist");

	Params::GBUIFunctionLibrary_DoesStringTableEntryExist Parms{};

	Parms.StringTableId = StringTableId;
	Parms.InKey = std::move(InKey);
	Parms.KeyPrefix = std::move(KeyPrefix);
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.FindScreenEdgeLocationForWorldLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             EdgePercent                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutScreenPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutRotationAngleDegrees                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsOnScreen                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::FindScreenEdgeLocationForWorldLocation(const class UObject* WorldContextObject, const struct FVector& InLocation, const float EdgePercent, struct FVector2D* OutScreenPosition, float* OutRotationAngleDegrees, bool* bIsOnScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "FindScreenEdgeLocationForWorldLocation");

	Params::GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InLocation = std::move(InLocation);
	Parms.EdgePercent = EdgePercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenPosition != nullptr)
		*OutScreenPosition = std::move(Parms.OutScreenPosition);

	if (OutRotationAngleDegrees != nullptr)
		*OutRotationAngleDegrees = Parms.OutRotationAngleDegrees;

	if (bIsOnScreen != nullptr)
		*bIsOnScreen = Parms.bIsOnScreen;
}


// Function GroundBranch.GBUIFunctionLibrary.FindScreenEdgeLocationForWorldLocationAlt
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                ViewTM                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const float                             FOV                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenSize                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             EdgePercent                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutScreenPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutRotationAngleDegrees                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsOnScreen                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::FindScreenEdgeLocationForWorldLocationAlt(const struct FTransform& ViewTM, const float FOV, const struct FVector2D& ScreenSize, const struct FVector& WorldLocation, const float EdgePercent, struct FVector2D* OutScreenPosition, float* OutRotationAngleDegrees, bool* bIsOnScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "FindScreenEdgeLocationForWorldLocationAlt");

	Params::GBUIFunctionLibrary_FindScreenEdgeLocationForWorldLocationAlt Parms{};

	Parms.ViewTM = std::move(ViewTM);
	Parms.FOV = FOV;
	Parms.ScreenSize = std::move(ScreenSize);
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.EdgePercent = EdgePercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenPosition != nullptr)
		*OutScreenPosition = std::move(Parms.OutScreenPosition);

	if (OutRotationAngleDegrees != nullptr)
		*OutRotationAngleDegrees = Parms.OutRotationAngleDegrees;

	if (bIsOnScreen != nullptr)
		*bIsOnScreen = Parms.bIsOnScreen;
}


// Function GroundBranch.GBUIFunctionLibrary.ForcePlayerInputUpdate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::ForcePlayerInputUpdate(class APlayerController* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "ForcePlayerInputUpdate");

	Params::GBUIFunctionLibrary_ForcePlayerInputUpdate Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.GetBoundKeyFromKeyEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKeyEvent&                 KeyEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInputBoundKey                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInputBoundKey UGBUIFunctionLibrary::GetBoundKeyFromKeyEvent(const struct FKeyEvent& KeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetBoundKeyFromKeyEvent");

	Params::GBUIFunctionLibrary_GetBoundKeyFromKeyEvent Parms{};

	Parms.KeyEvent = std::move(KeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetChildrenOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidget*                          ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUserWidget*>*             ChildWidgets                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediateOnly                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::GetChildrenOfClass(class UWidget* ParentWidget, TArray<class UUserWidget*>* ChildWidgets, TSubclassOf<class UUserWidget> WidgetClass, bool bImmediateOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetChildrenOfClass");

	Params::GBUIFunctionLibrary_GetChildrenOfClass Parms{};

	Parms.ParentWidget = ParentWidget;
	Parms.WidgetClass = WidgetClass;
	Parms.bImmediateOnly = bImmediateOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChildWidgets != nullptr)
		*ChildWidgets = std::move(Parms.ChildWidgets);
}


// Function GroundBranch.GBUIFunctionLibrary.GetChildWidgetsOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWidget*                          ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UWidget*>*                 ChildWidgets                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UWidget>              WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediateOnly                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::GetChildWidgetsOfClass(class UWidget* ParentWidget, TArray<class UWidget*>* ChildWidgets, TSubclassOf<class UWidget> WidgetClass, bool bImmediateOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetChildWidgetsOfClass");

	Params::GBUIFunctionLibrary_GetChildWidgetsOfClass Parms{};

	Parms.ParentWidget = ParentWidget;
	Parms.WidgetClass = WidgetClass;
	Parms.bImmediateOnly = bImmediateOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChildWidgets != nullptr)
		*ChildWidgets = std::move(Parms.ChildWidgets);
}


// Function GroundBranch.GBUIFunctionLibrary.GetCommandBoundKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       Command                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputBoundKey                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInputBoundKey UGBUIFunctionLibrary::GetCommandBoundKey(const class FName Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetCommandBoundKey");

	Params::GBUIFunctionLibrary_GetCommandBoundKey Parms{};

	Parms.Command = Command;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetCommandBoundKeys
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       Command                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputBoundKey>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FInputBoundKey> UGBUIFunctionLibrary::GetCommandBoundKeys(const class FName Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetCommandBoundKeys");

	Params::GBUIFunctionLibrary_GetCommandBoundKeys Parms{};

	Parms.Command = Command;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetConsoleKeys
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FKey>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKey> UGBUIFunctionLibrary::GetConsoleKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetConsoleKeys");

	Params::GBUIFunctionLibrary_GetConsoleKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetDoubleClickTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBUIFunctionLibrary::GetDoubleClickTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetDoubleClickTime");

	Params::GBUIFunctionLibrary_GetDoubleClickTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetFirstChildOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediateOnly                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGBUIFunctionLibrary::GetFirstChildOfClass(class UWidget* ParentWidget, TSubclassOf<class UUserWidget> WidgetClass, bool bImmediateOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetFirstChildOfClass");

	Params::GBUIFunctionLibrary_GetFirstChildOfClass Parms{};

	Parms.ParentWidget = ParentWidget;
	Parms.WidgetClass = WidgetClass;
	Parms.bImmediateOnly = bImmediateOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetFirstChildWidgetOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ParentWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UWidget>              WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediateOnly                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGBUIFunctionLibrary::GetFirstChildWidgetOfClass(class UWidget* ParentWidget, TSubclassOf<class UWidget> WidgetClass, bool bImmediateOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetFirstChildWidgetOfClass");

	Params::GBUIFunctionLibrary_GetFirstChildWidgetOfClass Parms{};

	Parms.ParentWidget = ParentWidget;
	Parms.WidgetClass = WidgetClass;
	Parms.bImmediateOnly = bImmediateOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetFirstWidgetOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TopLevelOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGBUIFunctionLibrary::GetFirstWidgetOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass, bool TopLevelOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetFirstWidgetOfClass");

	Params::GBUIFunctionLibrary_GetFirstWidgetOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;
	Parms.TopLevelOnly = TopLevelOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetLayoutVariantBlueprints
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SearchPathName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSoftObjectPtr<class AActor>>*   OutActorPtrs                                           (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::GetLayoutVariantBlueprints(const class FString& SearchPathName, TArray<TSoftObjectPtr<class AActor>>* OutActorPtrs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetLayoutVariantBlueprints");

	Params::GBUIFunctionLibrary_GetLayoutVariantBlueprints Parms{};

	Parms.SearchPathName = std::move(SearchPathName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActorPtrs != nullptr)
		*OutActorPtrs = std::move(Parms.OutActorPtrs);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetLocalisedGameplayTagText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EGBLocalisedGameplayTagFormat     GameplayTagFormat                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bStripSpaces                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGBUIFunctionLibrary::GetLocalisedGameplayTagText(const struct FGameplayTag& GameplayTag, const EGBLocalisedGameplayTagFormat GameplayTagFormat, const bool bStripSpaces)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetLocalisedGameplayTagText");

	Params::GBUIFunctionLibrary_GetLocalisedGameplayTagText Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameplayTagFormat = GameplayTagFormat;
	Parms.bStripSpaces = bStripSpaces;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetMapInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutTitle                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutAuthor                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            OutDescription                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::GetMapInfo(const class FString& MapName, class FString* OutTitle, class FString* OutAuthor, class FText* OutDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetMapInfo");

	Params::GBUIFunctionLibrary_GetMapInfo Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTitle != nullptr)
		*OutTitle = std::move(Parms.OutTitle);

	if (OutAuthor != nullptr)
		*OutAuthor = std::move(Parms.OutAuthor);

	if (OutDescription != nullptr)
		*OutDescription = std::move(Parms.OutDescription);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetMapList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    GameModePrefix                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMapListItem>*            OutMapList                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::GetMapList(const class FString& GameModePrefix, TArray<struct FMapListItem>* OutMapList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetMapList");

	Params::GBUIFunctionLibrary_GetMapList Parms{};

	Parms.GameModePrefix = std::move(GameModePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapList != nullptr)
		*OutMapList = std::move(Parms.OutMapList);
}


// Function GroundBranch.GBUIFunctionLibrary.GetMapScreenshots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Prefix                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSoftObjectPtr<class UTexture2D>>*OutScreenShotPtrs                                      (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::GetMapScreenshots(const class FString& Prefix, const class FString& MapName, TArray<TSoftObjectPtr<class UTexture2D>>* OutScreenShotPtrs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetMapScreenshots");

	Params::GBUIFunctionLibrary_GetMapScreenshots Parms{};

	Parms.Prefix = std::move(Prefix);
	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenShotPtrs != nullptr)
		*OutScreenShotPtrs = std::move(Parms.OutScreenShotPtrs);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetMonitorNativeResolutions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector2D>*               OutMonitorResolutions                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::GetMonitorNativeResolutions(TArray<struct FVector2D>* OutMonitorResolutions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetMonitorNativeResolutions");

	Params::GBUIFunctionLibrary_GetMonitorNativeResolutions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMonitorResolutions != nullptr)
		*OutMonitorResolutions = std::move(Parms.OutMonitorResolutions);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetParentOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ChildWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGBUIFunctionLibrary::GetParentOfClass(class UWidget* ChildWidget, TSubclassOf<class UUserWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetParentOfClass");

	Params::GBUIFunctionLibrary_GetParentOfClass Parms{};

	Parms.ChildWidget = ChildWidget;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetParentWidgetOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ChildWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UWidget>              WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGBUIFunctionLibrary::GetParentWidgetOfClass(class UWidget* ChildWidget, TSubclassOf<class UWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetParentWidgetOfClass");

	Params::GBUIFunctionLibrary_GetParentWidgetOfClass Parms{};

	Parms.ChildWidget = ChildWidget;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetStringTableEntryOrDisplayString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       StringTableId                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InKey                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    KeyPrefix                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGBUIFunctionLibrary::GetStringTableEntryOrDisplayString(const class FName StringTableId, const class FString& InKey, const class FString& KeyPrefix, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetStringTableEntryOrDisplayString");

	Params::GBUIFunctionLibrary_GetStringTableEntryOrDisplayString Parms{};

	Parms.StringTableId = StringTableId;
	Parms.InKey = std::move(InKey);
	Parms.KeyPrefix = std::move(KeyPrefix);
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.GetWidgetFromName
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUserWidget*                      ParentUserWidget                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UGBUIFunctionLibrary::GetWidgetFromName(class UUserWidget* ParentUserWidget, const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "GetWidgetFromName");

	Params::GBUIFunctionLibrary_GetWidgetFromName Parms{};

	Parms.ParentUserWidget = ParentUserWidget;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.InitStringTable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      StringTableId                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StringNameSpace                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::InitStringTable(const class FName& StringTableId, const class FString& StringNameSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "InitStringTable");

	Params::GBUIFunctionLibrary_InitStringTable Parms{};

	Parms.StringTableId = StringTableId;
	Parms.StringNameSpace = std::move(StringNameSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.InitStringTableForModID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       StringTableId                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StringNameSpace                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::InitStringTableForModID(const class FName StringTableId, const class FString& StringNameSpace, const struct FUInt64& ModID, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "InitStringTableForModID");

	Params::GBUIFunctionLibrary_InitStringTableForModID Parms{};

	Parms.StringTableId = StringTableId;
	Parms.StringNameSpace = std::move(StringNameSpace);
	Parms.ModID = std::move(ModID);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.InsertChildAt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelSlot*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPanelSlot* UGBUIFunctionLibrary::InsertChildAt(class UWidget* Parent, int32 Index_0, class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "InsertChildAt");

	Params::GBUIFunctionLibrary_InsertChildAt Parms{};

	Parms.Parent = Parent;
	Parms.Index_0 = Index_0;
	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.IsChildOf
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ChildWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          PossibleParent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBUIFunctionLibrary::IsChildOf(class UWidget* ChildWidget, class UWidget* PossibleParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "IsChildOf");

	Params::GBUIFunctionLibrary_IsChildOf Parms{};

	Parms.ChildWidget = ChildWidget;
	Parms.PossibleParent = PossibleParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUIFunctionLibrary.RemoveAllWidgetsOfClass
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TopLevelOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::RemoveAllWidgetsOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass, bool TopLevelOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "RemoveAllWidgetsOfClass");

	Params::GBUIFunctionLibrary_RemoveAllWidgetsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;
	Parms.TopLevelOnly = TopLevelOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.SaveBinds
// (Final, Native, Static, Public, BlueprintCallable)

void UGBUIFunctionLibrary::SaveBinds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "SaveBinds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.SetConsoleKeys
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FKey>&              NewConsoleKeys                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::SetConsoleKeys(const TArray<struct FKey>& NewConsoleKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "SetConsoleKeys");

	Params::GBUIFunctionLibrary_SetConsoleKeys Parms{};

	Parms.NewConsoleKeys = std::move(NewConsoleKeys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.SetMousePosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 MousePosition                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::SetMousePosition(const struct FVector2D& MousePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "SetMousePosition");

	Params::GBUIFunctionLibrary_SetMousePosition Parms{};

	Parms.MousePosition = std::move(MousePosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.UnBindCommand
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       CommandName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::UnBindCommand(const class FName CommandName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "UnBindCommand");

	Params::GBUIFunctionLibrary_UnBindCommand Parms{};

	Parms.CommandName = CommandName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.UnbindKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInputBoundKey&            TargetKey                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::UnbindKey(const struct FInputBoundKey& TargetKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "UnbindKey");

	Params::GBUIFunctionLibrary_UnbindKey Parms{};

	Parms.TargetKey = std::move(TargetKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.UnbindKeybindCommand
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       CommandName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      Key                                                    (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBUIFunctionLibrary::UnbindKeybindCommand(const class FName CommandName, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "UnbindKeybindCommand");

	Params::GBUIFunctionLibrary_UnbindKeybindCommand Parms{};

	Parms.CommandName = CommandName;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUIFunctionLibrary.WriteWidgetToTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      WidgetToWrite                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SizeX                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SizeY                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UGBUIFunctionLibrary::WriteWidgetToTexture(class UUserWidget* WidgetToWrite, const int32 SizeX, const int32 SizeY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBUIFunctionLibrary", "WriteWidgetToTexture");

	Params::GBUIFunctionLibrary_WriteWidgetToTexture Parms{};

	Parms.WidgetToWrite = WidgetToWrite;
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.ApplyRadialDamageDirect
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDamage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDamage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDamageRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDamageRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageFalloff                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FHitResult>&        HitResults                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBGameplayStatics::ApplyRadialDamageDirect(class AActor* DamagedActor, float MaxDamage, float MinDamage, float MinDamageRadius, float MaxDamageRadius, float DamageFalloff, const struct FVector& Origin, const TArray<struct FHitResult>& HitResults, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ApplyRadialDamageDirect");

	Params::GBGameplayStatics_ApplyRadialDamageDirect Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.MaxDamage = MaxDamage;
	Parms.MinDamage = MinDamage;
	Parms.MinDamageRadius = MinDamageRadius;
	Parms.MaxDamageRadius = MaxDamageRadius;
	Parms.DamageFalloff = DamageFalloff;
	Parms.Origin = std::move(Origin);
	Parms.HitResults = std::move(HitResults);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.CanDamageSkeletalMesh
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalComp                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DamageOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              Bones                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EPhysicalSurface>&         SurfaceTypesToIgnore                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::CanDamageSkeletalMesh(class USkeletalMeshComponent* SkeletalComp, const struct FVector& DamageOrigin, const TArray<class FName>& Bones, const TArray<class AActor*>& IgnoreActors, ECollisionChannel TraceChannel, const TArray<EPhysicalSurface>& SurfaceTypesToIgnore, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "CanDamageSkeletalMesh");

	Params::GBGameplayStatics_CanDamageSkeletalMesh Parms{};

	Parms.SkeletalComp = SkeletalComp;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.Bones = std::move(Bones);
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.TraceChannel = TraceChannel;
	Parms.SurfaceTypesToIgnore = std::move(SurfaceTypesToIgnore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.CanDamageStaticMesh
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             StaticComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DamageOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxTraceChecks                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EPhysicalSurface>&         SurfaceTypesToIgnore                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::CanDamageStaticMesh(class UStaticMeshComponent* StaticComp, const struct FVector& DamageOrigin, int32 MaxTraceChecks, const TArray<class AActor*>& IgnoreActors, ECollisionChannel TraceChannel, const TArray<EPhysicalSurface>& SurfaceTypesToIgnore, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "CanDamageStaticMesh");

	Params::GBGameplayStatics_CanDamageStaticMesh Parms{};

	Parms.StaticComp = StaticComp;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.MaxTraceChecks = MaxTraceChecks;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.TraceChannel = TraceChannel;
	Parms.SurfaceTypesToIgnore = std::move(SurfaceTypesToIgnore);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.ConeOverlapActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   dir                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ConeHalfAngle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClipDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<EObjectTypeQuery>&         ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>*                  OutActors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::ConeOverlapActors(const class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& dir, float ConeHalfAngle, float Radius, float ClipDistance, const TArray<class AActor*>& IgnoreActors, const TArray<EObjectTypeQuery>& ObjectTypes, TArray<class AActor*>* OutActors, EDrawDebugTrace DrawDebugType, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ConeOverlapActors");

	Params::GBGameplayStatics_ConeOverlapActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Origin = std::move(Origin);
	Parms.dir = std::move(dir);
	Parms.ConeHalfAngle = ConeHalfAngle;
	Parms.Radius = Radius;
	Parms.ClipDistance = ClipDistance;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.DrawDebugType = DrawDebugType;
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActors != nullptr)
		*OutActors = std::move(Parms.OutActors);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.ConeOverlapDamageableComponentsSorted
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   dir                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ConeHalfAngle                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClipDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<EObjectTypeQuery>&         ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>*     OutComponents                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::ConeOverlapDamageableComponentsSorted(const class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& dir, float ConeHalfAngle, float Radius, float ClipDistance, const TArray<class AActor*>& IgnoreActors, const TArray<EObjectTypeQuery>& ObjectTypes, TArray<class UPrimitiveComponent*>* OutComponents, EDrawDebugTrace DrawDebugType, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ConeOverlapDamageableComponentsSorted");

	Params::GBGameplayStatics_ConeOverlapDamageableComponentsSorted Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Origin = std::move(Origin);
	Parms.dir = std::move(dir);
	Parms.ConeHalfAngle = ConeHalfAngle;
	Parms.Radius = Radius;
	Parms.ClipDistance = ClipDistance;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.DrawDebugType = DrawDebugType;
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutComponents != nullptr)
		*OutComponents = std::move(Parms.OutComponents);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.EncompassesPoint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AVolume*                          Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutDistanceToPoint                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::EncompassesPoint(class AVolume* Volume, const struct FVector& Point, float SphereRadius, float* OutDistanceToPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "EncompassesPoint");

	Params::GBGameplayStatics_EncompassesPoint Parms{};

	Parms.Volume = Volume;
	Parms.Point = std::move(Point);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDistanceToPoint != nullptr)
		*OutDistanceToPoint = Parms.OutDistanceToPoint;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.FindPlayerControllerByPlayerNameOrUniqueId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerNameOrUniqueId                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerController* UGBGameplayStatics::FindPlayerControllerByPlayerNameOrUniqueId(const class UObject* WorldContextObject, const class FString& PlayerNameOrUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "FindPlayerControllerByPlayerNameOrUniqueId");

	Params::GBGameplayStatics_FindPlayerControllerByPlayerNameOrUniqueId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerNameOrUniqueId = std::move(PlayerNameOrUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.FindPlayerStateByPlayerNameOrUniqueId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerNameOrUniqueId                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerState* UGBGameplayStatics::FindPlayerStateByPlayerNameOrUniqueId(const class UObject* WorldContextObject, const class FString& PlayerNameOrUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "FindPlayerStateByPlayerNameOrUniqueId");

	Params::GBGameplayStatics_FindPlayerStateByPlayerNameOrUniqueId Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerNameOrUniqueId = std::move(PlayerNameOrUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetLocallyViewingPlayerController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Viewed                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerController* UGBGameplayStatics::GetLocallyViewingPlayerController(const class AActor* Viewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetLocallyViewingPlayerController");

	Params::GBGameplayStatics_GetLocallyViewingPlayerController Parms{};

	Parms.Viewed = Viewed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetPlayerStateFromPlayerID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerState* UGBGameplayStatics::GetPlayerStateFromPlayerID(const class UObject* WorldContextObject, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetPlayerStateFromPlayerID");

	Params::GBGameplayStatics_GetPlayerStateFromPlayerID Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetPredictionTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBGameplayStatics::GetPredictionTime(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetPredictionTime");

	Params::GBGameplayStatics_GetPredictionTime Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetReplicatedAlphaValues
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FReplicatedAlpha&          ReplicatedAlpha                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float*                                  CurrentAlpha                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  TargetAlpha                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Timestamp                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameplayStatics::GetReplicatedAlphaValues(const struct FReplicatedAlpha& ReplicatedAlpha, float* CurrentAlpha, float* TargetAlpha, float* Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetReplicatedAlphaValues");

	Params::GBGameplayStatics_GetReplicatedAlphaValues Parms{};

	Parms.ReplicatedAlpha = std::move(ReplicatedAlpha);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentAlpha != nullptr)
		*CurrentAlpha = Parms.CurrentAlpha;

	if (TargetAlpha != nullptr)
		*TargetAlpha = Parms.TargetAlpha;

	if (Timestamp != nullptr)
		*Timestamp = Parms.Timestamp;
}


// Function GroundBranch.GBGameplayStatics.GetSpatialAudioVolumeTag
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBGameplayStatics::GetSpatialAudioVolumeTag(const class UObject* WorldContextObject, const struct FVector& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetSpatialAudioVolumeTag");

	Params::GBGameplayStatics_GetSpatialAudioVolumeTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetUniqueIdAsString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBGameplayStatics::GetUniqueIdAsString(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetUniqueIdAsString");

	Params::GBGameplayStatics_GetUniqueIdAsString Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetValidatedSpawnLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            CapsuleHalfHeight                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            CapsuleRadius                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutValidatedSpawnLocation                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::GetValidatedSpawnLocation(const class UObject* WorldContextObject, const struct FVector& SpawnLocation, const float& CapsuleHalfHeight, const float& CapsuleRadius, bool bShowDebug, struct FVector* OutValidatedSpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetValidatedSpawnLocation");

	Params::GBGameplayStatics_GetValidatedSpawnLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.CapsuleHalfHeight = CapsuleHalfHeight;
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.bShowDebug = bShowDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValidatedSpawnLocation != nullptr)
		*OutValidatedSpawnLocation = std::move(Parms.OutValidatedSpawnLocation);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GetWaterLevelAtPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ECollisionChannel                 CollisionChannel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBGameplayStatics::GetWaterLevelAtPosition(const class UObject* WorldContextObject, const struct FVector& position, const ECollisionChannel CollisionChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GetWaterLevelAtPosition");

	Params::GBGameplayStatics_GetWaterLevelAtPosition Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.position = std::move(position);
	Parms.CollisionChannel = CollisionChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.GrabAllOptions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutKeys                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::GrabAllOptions(const class FString& Options, TArray<class FString>* OutKeys, TArray<class FString>* OutValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "GrabAllOptions");

	Params::GBGameplayStatics_GrabAllOptions Parms{};

	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKeys != nullptr)
		*OutKeys = std::move(Parms.OutKeys);

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.IsDevBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::IsDevBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "IsDevBuild");

	Params::GBGameplayStatics_IsDevBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.IsLocallyViewed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Viewed                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::IsLocallyViewed(const class AActor* Viewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "IsLocallyViewed");

	Params::GBGameplayStatics_IsLocallyViewed Parms{};

	Parms.Viewed = Viewed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.IsNetReady
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerController*          PlayerController                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::IsNetReady(const class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "IsNetReady");

	Params::GBGameplayStatics_IsNetReady Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.IsSpawnLocationValid
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            CapsuleHalfHeight                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            CapsuleRadius                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::IsSpawnLocationValid(const class UObject* WorldContextObject, const struct FVector& SpawnLocation, const float& CapsuleHalfHeight, const float& CapsuleRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "IsSpawnLocationValid");

	Params::GBGameplayStatics_IsSpawnLocationValid Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.CapsuleHalfHeight = CapsuleHalfHeight;
	Parms.CapsuleRadius = CapsuleRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.LineTraceRecursiveForObjects
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   TraceStart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   TraceEnd                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<EObjectTypeQuery>&         ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<ECollisionChannel>&        BlockedCollisionChannels                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bDebug                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DebugDrawTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::LineTraceRecursiveForObjects(const class UObject* WorldContextObject, const struct FVector& TraceStart, const struct FVector& TraceEnd, const TArray<EObjectTypeQuery>& ObjectTypes, const TArray<ECollisionChannel>& BlockedCollisionChannels, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, struct FHitResult* OutHit, bool bDebug, float DebugDrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "LineTraceRecursiveForObjects");

	Params::GBGameplayStatics_LineTraceRecursiveForObjects Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.BlockedCollisionChannels = std::move(BlockedCollisionChannels);
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.bDebug = bDebug;
	Parms.DebugDrawTime = DebugDrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.NukeActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameplayStatics::NukeActor(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "NukeActor");

	Params::GBGameplayStatics_NukeActor Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.ResetActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameplayStatics::ResetActor(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ResetActor");

	Params::GBGameplayStatics_ResetActor Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.ResetActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameplayStatics::ResetActors(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ResetActors");

	Params::GBGameplayStatics_ResetActors Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.ResetActorsExceptSpecifiedClasses
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<TSoftClassPtr<class UClass>>&ClassesToExclude                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UGBGameplayStatics::ResetActorsExceptSpecifiedClasses(const class UObject* WorldContextObject, const TArray<TSoftClassPtr<class UClass>>& ClassesToExclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ResetActorsExceptSpecifiedClasses");

	Params::GBGameplayStatics_ResetActorsExceptSpecifiedClasses Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ClassesToExclude = std::move(ClassesToExclude);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.ResetEncompassedActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AVolume*                          Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameplayStatics::ResetEncompassedActors(class AVolume* Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "ResetEncompassedActors");

	Params::GBGameplayStatics_ResetEncompassedActors Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.SetReplicatedAlphaValues
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FReplicatedAlpha&                ReplicatedAlpha                                        (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CurrentAlpha                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameplayStatics::SetReplicatedAlphaValues(const class UObject* WorldContextObject, struct FReplicatedAlpha& ReplicatedAlpha, float CurrentAlpha, float TargetAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "SetReplicatedAlphaValues");

	Params::GBGameplayStatics_SetReplicatedAlphaValues Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ReplicatedAlpha = std::move(ReplicatedAlpha);
	Parms.CurrentAlpha = CurrentAlpha;
	Parms.TargetAlpha = TargetAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ReplicatedAlpha = std::move(Parms.ReplicatedAlpha);
}


// Function GroundBranch.GBGameplayStatics.SphereOverlapDamageableComponentsSorted
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<EObjectTypeQuery>&         ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UPrimitiveComponent*>*     OutComponents                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::SphereOverlapDamageableComponentsSorted(const class UObject* WorldContextObject, const struct FVector& Origin, float Radius, const TArray<class AActor*>& IgnoreActors, const TArray<EObjectTypeQuery>& ObjectTypes, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "SphereOverlapDamageableComponentsSorted");

	Params::GBGameplayStatics_SphereOverlapDamageableComponentsSorted Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Origin = std::move(Origin);
	Parms.Radius = Radius;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.ObjectTypes = std::move(ObjectTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutComponents != nullptr)
		*OutComponents = std::move(Parms.OutComponents);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameplayStatics.TeleportControlledPawn
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class APawn*                            TargetPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  TargetRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGBGameplayStatics::TeleportControlledPawn(class APawn* TargetPawn, const struct FVector& TargetLocation, const struct FRotator& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "TeleportControlledPawn");

	Params::GBGameplayStatics_TeleportControlledPawn Parms{};

	Parms.TargetPawn = TargetPawn;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetRotation = std::move(TargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.WaitForWorldToBeReadyForLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGBGameplayStatics::WaitForWorldToBeReadyForLocalPlayer(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "WaitForWorldToBeReadyForLocalPlayer");

	Params::GBGameplayStatics_WaitForWorldToBeReadyForLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameplayStatics.WorldIsReadyForLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameplayStatics::WorldIsReadyForLocalPlayer(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameplayStatics", "WorldIsReadyForLocalPlayer");

	Params::GBGameplayStatics_WorldIsReadyForLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameSession.MutePlayer
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameSession::MutePlayer(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameSession", "MutePlayer");

	Params::GBGameSession_MutePlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameSession.UpdatePlayerAndModList
// (Final, Native, Public, BlueprintCallable)

void AGBGameSession::UpdatePlayerAndModList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameSession", "UpdatePlayerAndModList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameSession.UpdateServerDetails
// (Final, Native, Protected)

void AGBGameSession::UpdateServerDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameSession", "UpdateServerDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameSession.UpdateServerDetailsTimer
// (Native, Protected)

void AGBGameSession::UpdateServerDetailsTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameSession", "UpdateServerDetailsTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.GetMissionSettingConfigSectionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InGameModeName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBGameState::GetMissionSettingConfigSectionName(const class FString& InGameModeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameState", "GetMissionSettingConfigSectionName");

	Params::GBGameState_GetMissionSettingConfigSectionName Parms{};

	Parms.InGameModeName = std::move(InGameModeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.AddGameObjective
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBGameObjectiveType                    ObjectiveType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddGameObjective(uint8 TeamId, class FName Name_0, EGBGameObjectiveType ObjectiveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddGameObjective");

	Params::GBGameState_AddGameObjective Parms{};

	Parms.TeamId = TeamId;
	Parms.Name_0 = Name_0;
	Parms.ObjectiveType = ObjectiveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddGameStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddGameStat(const class FString& StatString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddGameStat");

	Params::GBGameState_AddGameStat Parms{};

	Parms.StatString = std::move(StatString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddMissionSetting
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddMissionSetting(class FString* Name_0, int32 MinValue, int32 MaxValue, int32 CurrentValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddMissionSetting");

	Params::GBGameState_AddMissionSetting Parms{};

	Parms.MinValue = MinValue;
	Parms.MaxValue = MaxValue;
	Parms.CurrentValue = CurrentValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function GroundBranch.GBGameState.AddPlayerScoreType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ScoreName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScoreDescription                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OneOff                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddPlayerScoreType(class FName ScoreName, const class FString& ScoreDescription, int32 ScoreToAdd, bool OneOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddPlayerScoreType");

	Params::GBGameState_AddPlayerScoreType Parms{};

	Parms.ScoreName = ScoreName;
	Parms.ScoreDescription = std::move(ScoreDescription);
	Parms.ScoreToAdd = ScoreToAdd;
	Parms.OneOff = OneOff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddPlayerTeamInfo
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGBTeamInfo&               NewPlayerTeam                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGBGameState::AddPlayerTeamInfo(uint8 TeamId, const struct FGBTeamInfo& NewPlayerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddPlayerTeamInfo");

	Params::GBGameState_AddPlayerTeamInfo Parms{};

	Parms.TeamId = TeamId;
	Parms.NewPlayerTeam = std::move(NewPlayerTeam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddScoreToCumulativeRoundsWon
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddScoreToCumulativeRoundsWon(uint8 TeamId, int32 ScoreToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddScoreToCumulativeRoundsWon");

	Params::GBGameState_AddScoreToCumulativeRoundsWon Parms{};

	Parms.TeamId = TeamId;
	Parms.ScoreToAdd = ScoreToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddScoreToCumulativeScore
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddScoreToCumulativeScore(uint8 TeamId, int32 ScoreToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddScoreToCumulativeScore");

	Params::GBGameState_AddScoreToCumulativeScore Parms{};

	Parms.TeamId = TeamId;
	Parms.ScoreToAdd = ScoreToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddSearchLocation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGBGameObjectiveType                    ObjectiveType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddSearchLocation(uint8 TeamId, class FName Name_0, EGBGameObjectiveType ObjectiveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddSearchLocation");

	Params::GBGameState_AddSearchLocation Parms{};

	Parms.TeamId = TeamId;
	Parms.Name_0 = Name_0;
	Parms.ObjectiveType = ObjectiveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AddTeamScoreType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ScoreName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ScoreDescription                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OneOff                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AddTeamScoreType(class FName ScoreName, const class FString& ScoreDescription, int32 ScoreToAdd, bool OneOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AddTeamScoreType");

	Params::GBGameState_AddTeamScoreType Parms{};

	Parms.ScoreName = ScoreName;
	Parms.ScoreDescription = std::move(ScoreDescription);
	Parms.ScoreToAdd = ScoreToAdd;
	Parms.OneOff = OneOff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.AwardTeamScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreMultiple                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::AwardTeamScore(uint8 TeamId, class FName ScoreName, int32 ScoreMultiple)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AwardTeamScore");

	Params::GBGameState_AwardTeamScore Parms{};

	Parms.TeamId = TeamId;
	Parms.ScoreName = ScoreName;
	Parms.ScoreMultiple = ScoreMultiple;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ClearGameObjectives
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::ClearGameObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ClearGameObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ClearGameStats
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::ClearGameStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ClearGameStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ClearPlayerScores
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::ClearPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ClearPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ClearPlayerScoresTemplate
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::ClearPlayerScoresTemplate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ClearPlayerScoresTemplate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ClearSearchLocations
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::ClearSearchLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ClearSearchLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ClearTeamScores
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::ClearTeamScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ClearTeamScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.CreateTeamScores
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::CreateTeamScores(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "CreateTeamScores");

	Params::GBGameState_CreateTeamScores Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.DecrementRoundNumber
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::DecrementRoundNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "DecrementRoundNumber");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ForceResetActors
// (Net, Native, Event, NetMulticast, Public)

void AGBGameState::ForceResetActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ForceResetActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.GetGameRules
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TMap<class FName, bool>                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, bool> AGBGameState::GetGameRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameRules");

	Params::GBGameState_GetGameRules Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetGameStats
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBGameState::GetGameStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameStats");

	Params::GBGameState_GetGameStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetLocalisedGameText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DefaultValue                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bPrettifyDefault                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGBGameState::GetLocalisedGameText(const class FString& Key, const class FString& DefaultValue, const struct FUInt64& ModID, const bool bPrettifyDefault)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetLocalisedGameText");

	Params::GBGameState_GetLocalisedGameText Parms{};

	Parms.Key = std::move(Key);
	Parms.DefaultValue = std::move(DefaultValue);
	Parms.ModID = std::move(ModID);
	Parms.bPrettifyDefault = bPrettifyDefault;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMissionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGBGameState::GetMissionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMissionName");

	Params::GBGameState_GetMissionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerRichPresenceStatus
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBGameState::GetPlayerRichPresenceStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerRichPresenceStatus");

	Params::GBGameState_GetPlayerRichPresenceStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetScoreListForTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGBScoreLine>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBScoreLine> AGBGameState::GetScoreListForTeam(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetScoreListForTeam");

	Params::GBGameState_GetScoreListForTeam Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetTeamAttitude
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGenericTeamId&            B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETeamAttitude AGBGameState::GetTeamAttitude(const struct FGenericTeamId& A, const struct FGenericTeamId& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetTeamAttitude");

	Params::GBGameState_GetTeamAttitude Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.IncrementRoundNumber
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::IncrementRoundNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "IncrementRoundNumber");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.MulticastTimeRemainingAlertToWatches
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGBGameState::MulticastTimeRemainingAlertToWatches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "MulticastTimeRemainingAlertToWatches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.NotifyMissionObjectiveStatusChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EGBMissionObjectiveStatus         NewMissionObjectiveStatus                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::NotifyMissionObjectiveStatusChanged(class AGBMissionObjective* MissionObjective, const EGBMissionObjectiveStatus NewMissionObjectiveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "NotifyMissionObjectiveStatusChanged");

	Params::GBGameState_NotifyMissionObjectiveStatusChanged Parms{};

	Parms.MissionObjective = MissionObjective;
	Parms.NewMissionObjectiveStatus = NewMissionObjectiveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnGameMessageEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             GameMessageId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnGameMessageEvent(class FName GameMessageId, class FName Type, float Duration, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnGameMessageEvent");

	Params::GBGameState_OnGameMessageEvent Parms{};

	Parms.GameMessageId = GameMessageId;
	Parms.Type = Type;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBGameState.OnRep_CaptureState
// (Final, Native, Public)

void AGBGameState::OnRep_CaptureState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_CaptureState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_CaptureZone
// (Final, Native, Public)

void AGBGameState::OnRep_CaptureZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_CaptureZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_Difficulty
// (Native, Protected)

void AGBGameState::OnRep_Difficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_Difficulty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_GameModeName
// (Final, Native, Protected)

void AGBGameState::OnRep_GameModeName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_GameModeName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_GameObjectives
// (Final, Native, Protected)

void AGBGameState::OnRep_GameObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_GameObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_GameRules
// (Final, Native, Protected)

void AGBGameState::OnRep_GameRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_GameRules");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_GameStats
// (Final, Native, Protected)

void AGBGameState::OnRep_GameStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_GameStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_GameStringTables
// (Final, Native, Protected)

void AGBGameState::OnRep_GameStringTables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_GameStringTables");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_IsRoundBased
// (Final, Native, Protected)

void AGBGameState::OnRep_IsRoundBased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_IsRoundBased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_MatchStats
// (Final, Native, Protected)

void AGBGameState::OnRep_MatchStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_MatchStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_MinPlayers
// (Native, Protected)

void AGBGameState::OnRep_MinPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_MinPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_MissionName
// (Final, Native, Protected)

void AGBGameState::OnRep_MissionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_MissionName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_MissionSettings
// (Final, Native, Protected)

void AGBGameState::OnRep_MissionSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_MissionSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_NextMapVoteChoices
// (Final, Native, Protected)

void AGBGameState::OnRep_NextMapVoteChoices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_NextMapVoteChoices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_ObjectiveLocation
// (Final, Native, Public)

void AGBGameState::OnRep_ObjectiveLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_ObjectiveLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_PlayerLoadouts
// (Native, Protected)

void AGBGameState::OnRep_PlayerLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_PlayerLoadouts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_RoundStage
// (Final, Native, Protected)

void AGBGameState::OnRep_RoundStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_RoundStage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_RoundTime
// (Final, Native, Protected)

void AGBGameState::OnRep_RoundTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_RoundTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_SearchLocations
// (Final, Native, Protected)

void AGBGameState::OnRep_SearchLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_SearchLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_ServerBasicInfo
// (Native, Protected)

void AGBGameState::OnRep_ServerBasicInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_ServerBasicInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_ServerModList
// (Final, Native, Protected)

void AGBGameState::OnRep_ServerModList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_ServerModList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_TeamAttitudes
// (Final, Native, Protected)

void AGBGameState::OnRep_TeamAttitudes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_TeamAttitudes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_TeamScoreLists
// (Final, Native, Protected)

void AGBGameState::OnRep_TeamScoreLists()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_TeamScoreLists");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_UsesReadyRoom
// (Final, Native, Protected)

void AGBGameState::OnRep_UsesReadyRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_UsesReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_WatchConfig
// (Final, Native, Public)

void AGBGameState::OnRep_WatchConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_WatchConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnRep_WatchMode
// (Final, Native, Public)

void AGBGameState::OnRep_WatchMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnRep_WatchMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnServerSettingsUpdated
// (Final, Native, Public)

void AGBGameState::OnServerSettingsUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnServerSettingsUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnVoteCountUpdated
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   YesVotes                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NoVotes                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnVoteCountUpdated(int32 YesVotes, int32 NoVotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnVoteCountUpdated");

	Params::GBGameState_OnVoteCountUpdated Parms{};

	Parms.YesVotes = YesVotes;
	Parms.NoVotes = NoVotes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnVoteCountUpdatedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   YesVotes                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NoVotes                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnVoteCountUpdatedEvent(int32 YesVotes, int32 NoVotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnVoteCountUpdatedEvent");

	Params::GBGameState_OnVoteCountUpdatedEvent Parms{};

	Parms.YesVotes = YesVotes;
	Parms.NoVotes = NoVotes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBGameState.OnVoteEnded
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bPassed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NextVoteDelay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnVoteEnded(bool bPassed, int32 NextVoteDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnVoteEnded");

	Params::GBGameState_OnVoteEnded Parms{};

	Parms.bPassed = bPassed;
	Parms.NextVoteDelay = NextVoteDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnVoteEndedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bPassed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NextVoteDelay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnVoteEndedEvent(bool bPassed, int32 NextVoteDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnVoteEndedEvent");

	Params::GBGameState_OnVoteEndedEvent Parms{};

	Parms.bPassed = bPassed;
	Parms.NextVoteDelay = NextVoteDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBGameState.OnVoteStarted
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class APlayerState*                     VoteStarter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VoteTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnVoteStarted(class APlayerState* VoteStarter, const class FString& Command, const class FString& Params_0, int32 VoteTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnVoteStarted");

	Params::GBGameState_OnVoteStarted Parms{};

	Parms.VoteStarter = VoteStarter;
	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);
	Parms.VoteTime = VoteTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.OnVoteStartedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     VoteStarter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VoteTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::OnVoteStartedEvent(class APlayerState* VoteStarter, const class FString& Command, const class FString& Params_0, int32 VoteTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "OnVoteStartedEvent");

	Params::GBGameState_OnVoteStartedEvent Parms{};

	Parms.VoteStarter = VoteStarter;
	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);
	Parms.VoteTime = VoteTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBGameState.RegisterMissionObjective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::RegisterMissionObjective(class AGBMissionObjective* MissionObjective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "RegisterMissionObjective");

	Params::GBGameState_RegisterMissionObjective Parms{};

	Parms.MissionObjective = MissionObjective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ReportClientMissingAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::ReportClientMissingAsset(const class FString& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ReportClientMissingAsset");

	Params::GBGameState_ReportClientMissingAsset Parms{};

	Parms.AssetName = std::move(AssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ResetMatchStats
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::ResetMatchStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ResetMatchStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ResetPlayerScores
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::ResetPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ResetPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ResetTeamScores
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::ResetTeamScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ResetTeamScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.RoundStageSet
// (Native, Event, Protected, BlueprintEvent)

void AGBGameState::RoundStageSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "RoundStageSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SendTimeRemainingAlertToWatches
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::SendTimeRemainingAlertToWatches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SendTimeRemainingAlertToWatches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ServerPrepMissionSummaryEvent
// (BlueprintAuthorityOnly, Event, Public, BlueprintCallable, BlueprintEvent)

void AGBGameState::ServerPrepMissionSummaryEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ServerPrepMissionSummaryEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBGameState.SetAARWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      NewAARWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetAARWidget(class UUserWidget* NewAARWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetAARWidget");

	Params::GBGameState_SetAARWidget Parms{};

	Parms.NewAARWidget = NewAARWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetBedtimeHours
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             InBedtimeStartHour                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InBedtimeEndHour                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bInUseStandardHourForBedtimes                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetBedtimeHours(const float InBedtimeStartHour, const float InBedtimeEndHour, const bool bInUseStandardHourForBedtimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetBedtimeHours");

	Params::GBGameState_SetBedtimeHours Parms{};

	Parms.InBedtimeStartHour = InBedtimeStartHour;
	Parms.InBedtimeEndHour = InBedtimeEndHour;
	Parms.bInUseStandardHourForBedtimes = bInUseStandardHourForBedtimes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetCanRandomiseObjectives
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInCanRandomiseObjectives                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetCanRandomiseObjectives(const bool bInCanRandomiseObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetCanRandomiseObjectives");

	Params::GBGameState_SetCanRandomiseObjectives Parms{};

	Parms.bInCanRandomiseObjectives = bInCanRandomiseObjectives;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetCaptureZone
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InCaptureRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InCaptureHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   DefenderTeamId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InZoneIsSpherical                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetCaptureZone(float InCaptureRadius, float InCaptureHeight, uint8 DefenderTeamId, bool InZoneIsSpherical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetCaptureZone");

	Params::GBGameState_SetCaptureZone Parms{};

	Parms.InCaptureRadius = InCaptureRadius;
	Parms.InCaptureHeight = InCaptureHeight;
	Parms.DefenderTeamId = DefenderTeamId;
	Parms.InZoneIsSpherical = InZoneIsSpherical;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetGameModeModID
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   NewGameModeModID                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetGameModeModID(const struct FUInt64& NewGameModeModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetGameModeModID");

	Params::GBGameState_SetGameModeModID Parms{};

	Parms.NewGameModeModID = std::move(NewGameModeModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetGameModeName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InGameModeName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetGameModeName(class FName InGameModeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetGameModeName");

	Params::GBGameState_SetGameModeName Parms{};

	Parms.InGameModeName = InGameModeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetGameModeType
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const EGBGameModeType                   InGameModeType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetGameModeType(const EGBGameModeType InGameModeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetGameModeType");

	Params::GBGameState_SetGameModeType Parms{};

	Parms.InGameModeType = InGameModeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetHotspotName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       InHotspotName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetHotspotName(const class FName InHotspotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetHotspotName");

	Params::GBGameState_SetHotspotName Parms{};

	Parms.InHotspotName = InHotspotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetIsCapturing
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsCapturing                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetIsCapturing(bool bNewIsCapturing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetIsCapturing");

	Params::GBGameState_SetIsCapturing Parms{};

	Parms.bNewIsCapturing = bNewIsCapturing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetLastMissionFileName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLastMissionFileName                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetLastMissionFileName(const class FString& InLastMissionFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetLastMissionFileName");

	Params::GBGameState_SetLastMissionFileName Parms{};

	Parms.InLastMissionFileName = std::move(InLastMissionFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetMapMarkerList
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FGBMapMarker>&      InMapMarkerList                                        (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGBGameState::SetMapMarkerList(const TArray<struct FGBMapMarker>& InMapMarkerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetMapMarkerList");

	Params::GBGameState_SetMapMarkerList Parms{};

	Parms.InMapMarkerList = std::move(InMapMarkerList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetMatchInfo
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGBMatchInfo&              NewMatchInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGBGameState::SetMatchInfo(const struct FGBMatchInfo& NewMatchInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetMatchInfo");

	Params::GBGameState_SetMatchInfo Parms{};

	Parms.NewMatchInfo = std::move(NewMatchInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetMatchStartTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewMatchStartTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetMatchStartTime(const float NewMatchStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetMatchStartTime");

	Params::GBGameState_SetMatchStartTime Parms{};

	Parms.NewMatchStartTime = NewMatchStartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetMatchWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      NewMatchWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetMatchWidget(class UUserWidget* NewMatchWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetMatchWidget");

	Params::GBGameState_SetMatchWidget Parms{};

	Parms.NewMatchWidget = NewMatchWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetMissionSequenceNumber
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetMissionSequenceNumber(const int32 InMissionSequenceNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetMissionSequenceNumber");

	Params::GBGameState_SetMissionSequenceNumber Parms{};

	Parms.InMissionSequenceNumber = InMissionSequenceNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetMissionSettingValue
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            NewValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetMissionSettingValue(const class FString& Name_0, const int32& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetMissionSettingValue");

	Params::GBGameState_SetMissionSettingValue Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetObjectiveLocation
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InObjectiveLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetObjectiveLocation(const struct FVector& InObjectiveLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetObjectiveLocation");

	Params::GBGameState_SetObjectiveLocation Parms{};

	Parms.InObjectiveLocation = std::move(InObjectiveLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetPlayAreaOpen
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsOpen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetPlayAreaOpen(bool bIsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetPlayAreaOpen");

	Params::GBGameState_SetPlayAreaOpen Parms{};

	Parms.bIsOpen = bIsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetPlayerTeamRole
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InRole                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetPlayerTeamRole(uint8 TeamId, class FName InRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetPlayerTeamRole");

	Params::GBGameState_SetPlayerTeamRole Parms{};

	Parms.TeamId = TeamId;
	Parms.InRole = InRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetRoundIsTemporaryGameMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRoundIsTemporaryGameMode_0                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetRoundIsTemporaryGameMode(bool bRoundIsTemporaryGameMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetRoundIsTemporaryGameMode");

	Params::GBGameState_SetRoundIsTemporaryGameMode Parms{};

	Parms.bRoundIsTemporaryGameMode_0 = bRoundIsTemporaryGameMode_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetServerBasicInfo
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FGBServerBasicInfo&        NewServerBasicInfo                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AGBGameState::SetServerBasicInfo(const struct FGBServerBasicInfo& NewServerBasicInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetServerBasicInfo");

	Params::GBGameState_SetServerBasicInfo Parms{};

	Parms.NewServerBasicInfo = std::move(NewServerBasicInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetServerModList
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBModBasicInfo>&   InServerModList                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBGameState::SetServerModList(const TArray<struct FGBModBasicInfo>& InServerModList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetServerModList");

	Params::GBGameState_SetServerModList Parms{};

	Parms.InServerModList = std::move(InServerModList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetTeamAttitude
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGenericTeamId&            Team                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGenericTeamId&            OtherTeam                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETeamAttitude                           Attitude                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetTeamAttitude(const struct FGenericTeamId& Team, const struct FGenericTeamId& OtherTeam, ETeamAttitude Attitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetTeamAttitude");

	Params::GBGameState_SetTeamAttitude Parms{};

	Parms.Team = std::move(Team);
	Parms.OtherTeam = std::move(OtherTeam);
	Parms.Attitude = Attitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetVolunteersAllowed
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVolunteersAllowed                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetVolunteersAllowed(bool bNewVolunteersAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetVolunteersAllowed");

	Params::GBGameState_SetVolunteersAllowed Parms{};

	Parms.bNewVolunteersAllowed = bNewVolunteersAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetWatchConfig
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   InWatchConfig                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetWatchConfig(uint8 InWatchConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetWatchConfig");

	Params::GBGameState_SetWatchConfig Parms{};

	Parms.InWatchConfig = InWatchConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SetWatchMode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EWatchMode                              InWatchMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::SetWatchMode(EWatchMode InWatchMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SetWatchMode");

	Params::GBGameState_SetWatchMode Parms{};

	Parms.InWatchMode = InWatchMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.SyncTeamScoreLists
// (Final, Native, Public, BlueprintCallable)

void AGBGameState::SyncTeamScoreLists()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "SyncTeamScoreLists");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.UpdatedGameRules
// (Final, Native, Protected)

void AGBGameState::UpdatedGameRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "UpdatedGameRules");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.UpdatedGameStats
// (Final, Native, Protected)

void AGBGameState::UpdatedGameStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "UpdatedGameStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.UpdatedTeamAttitudes
// (Final, Native, Protected)

void AGBGameState::UpdatedTeamAttitudes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "UpdatedTeamAttitudes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.UpdateMatchStatsAfterRoundEnd
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBGameState::UpdateMatchStatsAfterRoundEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "UpdateMatchStatsAfterRoundEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.ArePlayerScoresInitialised
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::ArePlayerScoresInitialised() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "ArePlayerScoresInitialised");

	Params::GBGameState_ArePlayerScoresInitialised Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.AreTeamScoresInitialised
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::AreTeamScoresInitialised() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "AreTeamScoresInitialised");

	Params::GBGameState_AreTeamScoresInitialised Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.BroadcastGameMessage
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             GameMessageId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::BroadcastGameMessage(class FName GameMessageId, class FName Type, float Duration, const struct FUInt64& ModID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "BroadcastGameMessage");

	Params::GBGameState_BroadcastGameMessage Parms{};

	Parms.GameMessageId = GameMessageId;
	Parms.Type = Type;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.DoesClientHostMod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModIDToCheck                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::DoesClientHostMod(const struct FUInt64& ModIDToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "DoesClientHostMod");

	Params::GBGameState_DoesClientHostMod Parms{};

	Parms.ModIDToCheck = std::move(ModIDToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.DoesHostAllowPrimaryAsset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::DoesHostAllowPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "DoesHostAllowPrimaryAsset");

	Params::GBGameState_DoesHostAllowPrimaryAsset Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.DoesServerHostMod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModIDToCheck                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::DoesServerHostMod(const struct FUInt64& ModIDToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "DoesServerHostMod");

	Params::GBGameState_DoesServerHostMod Parms{};

	Parms.ModIDToCheck = std::move(ModIDToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetAARWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* AGBGameState::GetAARWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetAARWidget");

	Params::GBGameState_GetAARWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetAdjustedPlayerTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBGameState::GetAdjustedPlayerTeamId(uint8 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetAdjustedPlayerTeamId");

	Params::GBGameState_GetAdjustedPlayerTeamId Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetBedtimeHours
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float*                                  OutBedtimeStartHour                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutBedtimeEndHour                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutUseStandardHourForBedtimes                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::GetBedtimeHours(float* OutBedtimeStartHour, float* OutBedtimeEndHour, bool* bOutUseStandardHourForBedtimes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetBedtimeHours");

	Params::GBGameState_GetBedtimeHours Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBedtimeStartHour != nullptr)
		*OutBedtimeStartHour = Parms.OutBedtimeStartHour;

	if (OutBedtimeEndHour != nullptr)
		*OutBedtimeEndHour = Parms.OutBedtimeEndHour;

	if (bOutUseStandardHourForBedtimes != nullptr)
		*bOutUseStandardHourForBedtimes = Parms.bOutUseStandardHourForBedtimes;
}


// Function GroundBranch.GBGameState.GetBriefingRoomWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> AGBGameState::GetBriefingRoomWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetBriefingRoomWidget");

	Params::GBGameState_GetBriefingRoomWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCampaignMissionObjectiveInfoByRef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class AGBMissionObjective>MissionObjectiveRef                                    (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBCampaignMissionObjectiveInfo  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBCampaignMissionObjectiveInfo AGBGameState::GetCampaignMissionObjectiveInfoByRef(const TSoftObjectPtr<class AGBMissionObjective> MissionObjectiveRef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCampaignMissionObjectiveInfoByRef");

	Params::GBGameState_GetCampaignMissionObjectiveInfoByRef Parms{};

	Parms.MissionObjectiveRef = MissionObjectiveRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCampaignMissionObjectiveInfoByTitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    ObjectiveTitle                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBCampaignMissionObjectiveInfo  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBCampaignMissionObjectiveInfo AGBGameState::GetCampaignMissionObjectiveInfoByTitle(const class FString& ObjectiveTitle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCampaignMissionObjectiveInfoByTitle");

	Params::GBGameState_GetCampaignMissionObjectiveInfoByTitle Parms{};

	Parms.ObjectiveTitle = std::move(ObjectiveTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCampaignMissionObjectiveInfoList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBCampaignMissionObjectiveInfo>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBCampaignMissionObjectiveInfo> AGBGameState::GetCampaignMissionObjectiveInfoList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCampaignMissionObjectiveInfoList");

	Params::GBGameState_GetCampaignMissionObjectiveInfoList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCanRandomiseObjectives
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::GetCanRandomiseObjectives() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCanRandomiseObjectives");

	Params::GBGameState_GetCanRandomiseObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCaptureZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBCaptureZone                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBCaptureZone AGBGameState::GetCaptureZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCaptureZone");

	Params::GBGameState_GetCaptureZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCumulativeRoundsWonForTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetCumulativeRoundsWonForTeam(uint8 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCumulativeRoundsWonForTeam");

	Params::GBGameState_GetCumulativeRoundsWonForTeam Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCumulativeScoreForTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetCumulativeScoreForTeam(uint8 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCumulativeScoreForTeam");

	Params::GBGameState_GetCumulativeScoreForTeam Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetCurrentVariantName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBGameState::GetCurrentVariantName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetCurrentVariantName");

	Params::GBGameState_GetCurrentVariantName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetDifficulty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetDifficulty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetDifficulty");

	Params::GBGameState_GetDifficulty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetEnemyPlayerList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeBots                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBPlayerState*> AGBGameState::GetEnemyPlayerList(uint8 TeamId, bool bExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetEnemyPlayerList");

	Params::GBGameState_GetEnemyPlayerList Parms{};

	Parms.TeamId = TeamId;
	Parms.bExcludeBots = bExcludeBots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetGameModeModID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 AGBGameState::GetGameModeModID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameModeModID");

	Params::GBGameState_GetGameModeModID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetGameModeName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBGameState::GetGameModeName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameModeName");

	Params::GBGameState_GetGameModeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetGameModeType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBGameModeType                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBGameModeType AGBGameState::GetGameModeType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameModeType");

	Params::GBGameState_GetGameModeType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetGameObjectives
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBGameObjective>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBGameObjective> AGBGameState::GetGameObjectives() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameObjectives");

	Params::GBGameState_GetGameObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetGameStatValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBGameState::GetGameStatValue(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetGameStatValue");

	Params::GBGameState_GetGameStatValue Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetHotspotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBGameState::GetHotspotName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetHotspotName");

	Params::GBGameState_GetHotspotName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetIsCapturing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::GetIsCapturing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetIsCapturing");

	Params::GBGameState_GetIsCapturing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetLastMissionFileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBGameState::GetLastMissionFileName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetLastMissionFileName");

	Params::GBGameState_GetLastMissionFileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMapMarkerList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBMapMarker>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBMapMarker> AGBGameState::GetMapMarkerList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMapMarkerList");

	Params::GBGameState_GetMapMarkerList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMatchInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBMatchInfo                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBMatchInfo AGBGameState::GetMatchInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMatchInfo");

	Params::GBGameState_GetMatchInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMatchStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameState::GetMatchStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMatchStartTime");

	Params::GBGameState_GetMatchStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMatchStats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBMatchStats                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBMatchStats AGBGameState::GetMatchStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMatchStats");

	Params::GBGameState_GetMatchStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMatchTypeString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBGameState::GetMatchTypeString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMatchTypeString");

	Params::GBGameState_GetMatchTypeString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMatchWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* AGBGameState::GetMatchWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMatchWidget");

	Params::GBGameState_GetMatchWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMinPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetMinPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMinPlayers");

	Params::GBGameState_GetMinPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMissionSequenceNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetMissionSequenceNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMissionSequenceNumber");

	Params::GBGameState_GetMissionSequenceNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMissionSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBMissionSetting                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBMissionSetting AGBGameState::GetMissionSetting(const class FString& Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMissionSetting");

	Params::GBGameState_GetMissionSetting Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetMissionSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBMissionSetting>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBMissionSetting> AGBGameState::GetMissionSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetMissionSettings");

	Params::GBGameState_GetMissionSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetNextMapVoteChoices
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBGameState::GetNextMapVoteChoices() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetNextMapVoteChoices");

	Params::GBGameState_GetNextMapVoteChoices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetNumPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeBots                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetNumPlayers(uint8 TeamId, bool bExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetNumPlayers");

	Params::GBGameState_GetNumPlayers Parms{};

	Parms.TeamId = TeamId;
	Parms.bExcludeBots = bExcludeBots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetObjectiveLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBGameState::GetObjectiveLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetObjectiveLocation");

	Params::GBGameState_GetObjectiveLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPermittedGameModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBGameState::GetPermittedGameModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPermittedGameModes");

	Params::GBGameState_GetPermittedGameModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPermittedMissionList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBGameState::GetPermittedMissionList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPermittedMissionList");

	Params::GBGameState_GetPermittedMissionList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeBots                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBPlayerState*> AGBGameState::GetPlayerList(uint8 TeamId, bool bExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerList");

	Params::GBGameState_GetPlayerList Parms{};

	Parms.TeamId = TeamId;
	Parms.bExcludeBots = bExcludeBots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerScoreTemplate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBScoreCollection               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBScoreCollection AGBGameState::GetPlayerScoreTemplate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerScoreTemplate");

	Params::GBGameState_GetPlayerScoreTemplate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerTeamCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetPlayerTeamCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerTeamCount");

	Params::GBGameState_GetPlayerTeamCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerTeamIdSafe
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBGameState::GetPlayerTeamIdSafe(uint8 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerTeamIdSafe");

	Params::GBGameState_GetPlayerTeamIdSafe Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerTeamInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBTeamInfo                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBTeamInfo AGBGameState::GetPlayerTeamInfo(uint8 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerTeamInfo");

	Params::GBGameState_GetPlayerTeamInfo Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetPlayerTeamInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBTeamInfo>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBTeamInfo> AGBGameState::GetPlayerTeamInfos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetPlayerTeamInfos");

	Params::GBGameState_GetPlayerTeamInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetRoundIsTemporaryGameMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::GetRoundIsTemporaryGameMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetRoundIsTemporaryGameMode");

	Params::GBGameState_GetRoundIsTemporaryGameMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetRoundNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetRoundNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetRoundNumber");

	Params::GBGameState_GetRoundNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetRoundStage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBGameState::GetRoundStage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetRoundStage");

	Params::GBGameState_GetRoundStage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetRoundStageTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBGameState::GetRoundStageTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetRoundStageTime");

	Params::GBGameState_GetRoundStageTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetRoundTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetRoundTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetRoundTime");

	Params::GBGameState_GetRoundTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetSearchLocations
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBGameObjective>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBGameObjective> AGBGameState::GetSearchLocations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetSearchLocations");

	Params::GBGameState_GetSearchLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetServerBasicInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBServerBasicInfo               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBServerBasicInfo AGBGameState::GetServerBasicInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetServerBasicInfo");

	Params::GBGameState_GetServerBasicInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetServerModList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGBModBasicInfo>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGBModBasicInfo> AGBGameState::GetServerModList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetServerModList");

	Params::GBGameState_GetServerModList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetServerUsesMods
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::GetServerUsesMods() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetServerUsesMods");

	Params::GBGameState_GetServerUsesMods Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetTeamElementCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             TeamId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPlayOnly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetTeamElementCount(const uint8 TeamId, bool bInPlayOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetTeamElementCount");

	Params::GBGameState_GetTeamElementCount Parms{};

	Parms.TeamId = TeamId;
	Parms.bInPlayOnly = bInPlayOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetTimeLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetTimeLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetTimeLimit");

	Params::GBGameState_GetTimeLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetVolunteersAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::GetVolunteersAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetVolunteersAllowed");

	Params::GBGameState_GetVolunteersAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetVotingCommands
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGBGameState::GetVotingCommands() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetVotingCommands");

	Params::GBGameState_GetVotingCommands Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetWatchConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBGameState::GetWatchConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetWatchConfig");

	Params::GBGameState_GetWatchConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetWatchMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EWatchMode                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWatchMode AGBGameState::GetWatchMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetWatchMode");

	Params::GBGameState_GetWatchMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetWinningTeamForMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetWinningTeamForMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetWinningTeamForMatch");

	Params::GBGameState_GetWinningTeamForMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.GetWinningTeamForRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGameState::GetWinningTeamForRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "GetWinningTeamForRound");

	Params::GBGameState_GetWinningTeamForRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.HasMissionSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::HasMissionSetting(const class FString& Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "HasMissionSetting");

	Params::GBGameState_HasMissionSetting Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.IsGameRuleEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             RuleName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::IsGameRuleEnabled(class FName RuleName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "IsGameRuleEnabled");

	Params::GBGameState_IsGameRuleEnabled Parms{};

	Parms.RuleName = RuleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.IsRoundBased
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::IsRoundBased() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "IsRoundBased");

	Params::GBGameState_IsRoundBased Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.NotifyIntelSearchCompleted
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AGBGameTrigger*                   GameTrigger                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBSearchableProp*                SearchablePropActor                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGameState::NotifyIntelSearchCompleted(class AGBGameTrigger* GameTrigger, class AGBSearchableProp* SearchablePropActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "NotifyIntelSearchCompleted");

	Params::GBGameState_NotifyIntelSearchCompleted Parms{};

	Parms.GameTrigger = GameTrigger;
	Parms.SearchablePropActor = SearchablePropActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameState.PlayAreaOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::PlayAreaOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "PlayAreaOpen");

	Params::GBGameState_PlayAreaOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameState.UsesReadyRoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBGameState::UsesReadyRoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameState", "UsesReadyRoom");

	Params::GBGameState_UsesReadyRoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTaggedMontages.GetBestMatchingMontage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InRandAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGBTaggedMontages::GetBestMatchingMontage(const struct FGameplayTagContainer& InTags, float InRandAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTaggedMontages", "GetBestMatchingMontage");

	Params::GBTaggedMontages_GetBestMatchingMontage Parms{};

	Parms.InTags = std::move(InTags);
	Parms.InRandAlpha = InRandAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTaggedMontages.GetMatchingMontage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     InTags                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InRandAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGBTaggedMontages::GetMatchingMontage(const struct FGameplayTagContainer& InTags, float InRandAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTaggedMontages", "GetMatchingMontage");

	Params::GBTaggedMontages_GetMatchingMontage Parms{};

	Parms.InTags = std::move(InTags);
	Parms.InRandAlpha = InRandAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameUserSettings.GetGBGameUserSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGBGameUserSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBGameUserSettings* UGBGameUserSettings::GetGBGameUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameUserSettings", "GetGBGameUserSettings");

	Params::GBGameUserSettings_GetGBGameUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameUserSettings.GetQualityLevelCVarSettingsFromIni
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    QualitySection                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QualityLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutCVarKeys                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutCVarValues                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBGameUserSettings::GetQualityLevelCVarSettingsFromIni(const class FString& QualitySection, int32 QualityLevel, TArray<class FString>* OutCVarKeys, TArray<class FString>* OutCVarValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameUserSettings", "GetQualityLevelCVarSettingsFromIni");

	Params::GBGameUserSettings_GetQualityLevelCVarSettingsFromIni Parms{};

	Parms.QualitySection = std::move(QualitySection);
	Parms.QualityLevel = QualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCVarKeys != nullptr)
		*OutCVarKeys = std::move(Parms.OutCVarKeys);

	if (OutCVarValues != nullptr)
		*OutCVarValues = std::move(Parms.OutCVarValues);
}


// Function GroundBranch.GBGameUserSettings.GetAudioVolume
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBGameUserSettings::GetAudioVolume(const class FName InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "GetAudioVolume");

	Params::GBGameUserSettings_GetAudioVolume Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameUserSettings.GetUnfocusedVolumeMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBGameUserSettings::GetUnfocusedVolumeMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "GetUnfocusedVolumeMultiplier");

	Params::GBGameUserSettings_GetUnfocusedVolumeMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameUserSettings.MuteAudio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class FName>&              ExcludedAudioVolumeNames                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBGameUserSettings::MuteAudio(const TArray<class FName>& ExcludedAudioVolumeNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "MuteAudio");

	Params::GBGameUserSettings_MuteAudio Parms{};

	Parms.ExcludedAudioVolumeNames = std::move(ExcludedAudioVolumeNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameUserSettings.SetAudioVolume
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameUserSettings::SetAudioVolume(const class FName InName, float InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "SetAudioVolume");

	Params::GBGameUserSettings_SetAudioVolume Parms{};

	Parms.InName = InName;
	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameUserSettings.SetUnfocusedVolumeMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InVolumeMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGameUserSettings::SetUnfocusedVolumeMultiplier(float InVolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "SetUnfocusedVolumeMultiplier");

	Params::GBGameUserSettings_SetUnfocusedVolumeMultiplier Parms{};

	Parms.InVolumeMultiplier = InVolumeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameUserSettings.UnmuteAudio
// (Final, Native, Public, BlueprintCallable)

void UGBGameUserSettings::UnmuteAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "UnmuteAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameUserSettings.AreQualityLevelsDirty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameUserSettings::AreQualityLevelsDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "AreQualityLevelsDirty");

	Params::GBGameUserSettings_AreQualityLevelsDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameUserSettings.IsMuted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             AudioVolumeName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameUserSettings::IsMuted(class FName AudioVolumeName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameUserSettings", "IsMuted");

	Params::GBGameUserSettings_IsMuted Parms{};

	Parms.AudioVolumeName = AudioVolumeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameViewportClient.GetGameViewportClient
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGBGameViewportClient*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBGameViewportClient* UGBGameViewportClient::GetGameViewportClient(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBGameViewportClient", "GetGameViewportClient");

	Params::GBGameViewportClient_GetGameViewportClient Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameViewportClient.ClearDisconnectReason
// (Final, Native, Public, BlueprintCallable)

void UGBGameViewportClient::ClearDisconnectReason()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "ClearDisconnectReason");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameViewportClient.ClearNetworkFailure
// (Final, Native, Public, BlueprintCallable)

void UGBGameViewportClient::ClearNetworkFailure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "ClearNetworkFailure");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameViewportClient.ClearTravelFailureInfo
// (Final, Native, Public, BlueprintCallable)

void UGBGameViewportClient::ClearTravelFailureInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "ClearTravelFailureInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameViewportClient.GetNetworkFailureInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          OutLastAttemptedURL                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENetworkFailure*                        OutLastNetworkFailureType                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutLastNetworkErrorString                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameViewportClient::GetNetworkFailureInfo(class FString* OutLastAttemptedURL, ENetworkFailure* OutLastNetworkFailureType, class FString* OutLastNetworkErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "GetNetworkFailureInfo");

	Params::GBGameViewportClient_GetNetworkFailureInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLastAttemptedURL != nullptr)
		*OutLastAttemptedURL = std::move(Parms.OutLastAttemptedURL);

	if (OutLastNetworkFailureType != nullptr)
		*OutLastNetworkFailureType = Parms.OutLastNetworkFailureType;

	if (OutLastNetworkErrorString != nullptr)
		*OutLastNetworkErrorString = std::move(Parms.OutLastNetworkErrorString);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameViewportClient.GetTravelFailureInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          OutLastAttemptedURL                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETravelFailure*                         OutLastTravelFailureType                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutLastTravelErrorString                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBGameViewportClient::GetTravelFailureInfo(class FString* OutLastAttemptedURL, ETravelFailure* OutLastTravelFailureType, class FString* OutLastTravelErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "GetTravelFailureInfo");

	Params::GBGameViewportClient_GetTravelFailureInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLastAttemptedURL != nullptr)
		*OutLastAttemptedURL = std::move(Parms.OutLastAttemptedURL);

	if (OutLastTravelFailureType != nullptr)
		*OutLastTravelFailureType = Parms.OutLastTravelFailureType;

	if (OutLastTravelErrorString != nullptr)
		*OutLastTravelErrorString = std::move(Parms.OutLastTravelErrorString);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGameViewportClient.ScreenshotRequested
// (Final, Native, Protected)

void UGBGameViewportClient::ScreenshotRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "ScreenshotRequested");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGameViewportClient.GetDisconnectReason
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGBGameViewportClient::GetDisconnectReason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGameViewportClient", "GetDisconnectReason");

	Params::GBGameViewportClient_GetDisconnectReason Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBGlobalAbilitySystem.AddAbilitySystemComp
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UGBAbilitySystemComponent*        AbilitySystemComp                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGlobalAbilitySystem::AddAbilitySystemComp(class UGBAbilitySystemComponent* AbilitySystemComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGlobalAbilitySystem", "AddAbilitySystemComp");

	Params::GBGlobalAbilitySystem_AddAbilitySystemComp Parms{};

	Parms.AbilitySystemComp = AbilitySystemComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGlobalAbilitySystem.AddGlobalGameplayAbility
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGBGameplayAbility>   GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGlobalAbilitySystem::AddGlobalGameplayAbility(TSubclassOf<class UGBGameplayAbility> GameplayAbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGlobalAbilitySystem", "AddGlobalGameplayAbility");

	Params::GBGlobalAbilitySystem_AddGlobalGameplayAbility Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGlobalAbilitySystem.ApplyGlobalGameplayEffect
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGlobalAbilitySystem::ApplyGlobalGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGlobalAbilitySystem", "ApplyGlobalGameplayEffect");

	Params::GBGlobalAbilitySystem_ApplyGlobalGameplayEffect Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGlobalAbilitySystem.RemoveAbilitySystemComp
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UGBAbilitySystemComponent*        AbilitySystemComp                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGlobalAbilitySystem::RemoveAbilitySystemComp(class UGBAbilitySystemComponent* AbilitySystemComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGlobalAbilitySystem", "RemoveAbilitySystemComp");

	Params::GBGlobalAbilitySystem_RemoveAbilitySystemComp Parms{};

	Parms.AbilitySystemComp = AbilitySystemComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGlobalAbilitySystem.RemoveGlobalGameplayAbility
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGBGameplayAbility>   GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGlobalAbilitySystem::RemoveGlobalGameplayAbility(TSubclassOf<class UGBGameplayAbility> GameplayAbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGlobalAbilitySystem", "RemoveGlobalGameplayAbility");

	Params::GBGlobalAbilitySystem_RemoveGlobalGameplayAbility Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGlobalAbilitySystem.RemoveGlobalGameplayEffect
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBGlobalAbilitySystem::RemoveGlobalGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGlobalAbilitySystem", "RemoveGlobalGameplayEffect");

	Params::GBGlobalAbilitySystem_RemoveGlobalGameplayEffect Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGrenade.ChangeThrowSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGrenade::ChangeThrowSpeed(int32 Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGrenade", "ChangeThrowSpeed");

	Params::GBGrenade_ChangeThrowSpeed Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGrenade.ServerSetCurrentSpeed
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const int32                             NewCurrentSpeed                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBGrenade::ServerSetCurrentSpeed(const int32 NewCurrentSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGrenade", "ServerSetCurrentSpeed");

	Params::GBGrenade_ServerSetCurrentSpeed Parms{};

	Parms.NewCurrentSpeed = NewCurrentSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGrenade.SyncCurrentSpeed
// (Final, Native, Protected)

void AGBGrenade::SyncCurrentSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGrenade", "SyncCurrentSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBGrenade.GetCurrentSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBGrenade::GetCurrentSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBGrenade", "GetCurrentSpeed");

	Params::GBGrenade_GetCurrentSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBHair.AddAdditionalMeshes
// (Native, Event, Protected, BlueprintEvent)

void AGBHair::AddAdditionalMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHair", "AddAdditionalMeshes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHead.OnLoadMeshComplete
// (Final, Native, Public)

void AGBHead::OnLoadMeshComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHead", "OnLoadMeshComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHead.OnPostLoadMeshComplete
// (Event, Public, BlueprintEvent)

void AGBHead::OnPostLoadMeshComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHead", "OnPostLoadMeshComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBHead.OnTakeHit
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      RefBoneName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RefPosPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHead::OnTakeHit(const class FName& RefBoneName, const struct FVector& RefPosPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHead", "OnTakeHit");

	Params::GBHead_OnTakeHit Parms{};

	Parms.RefBoneName = RefBoneName;
	Parms.RefPosPosition = std::move(RefPosPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHolster.HolsterItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBHolster::HolsterItem(class AGBInvItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHolster", "HolsterItem");

	Params::GBHolster_HolsterItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBHolster.GetHolsteredItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* AGBHolster::GetHolsteredItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHolster", "GetHolsteredItem");

	Params::GBHolster_GetHolsteredItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBHUD.ApplyPlayerSettings
// (Native, Protected)
// Parameters:
// class UGBPlayerSettings*                PlayerSettings                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ApplyPlayerSettings(class UGBPlayerSettings* PlayerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ApplyPlayerSettings");

	Params::GBHUD_ApplyPlayerSettings Parms{};

	Parms.PlayerSettings = PlayerSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHUD.ApplyPlayerSettingsEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UGBPlayerSettings*                GBPlayerSettings                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ApplyPlayerSettingsEvent(class UGBPlayerSettings* GBPlayerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ApplyPlayerSettingsEvent");

	Params::GBHUD_ApplyPlayerSettingsEvent Parms{};

	Parms.GBPlayerSettings = GBPlayerSettings;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.GetUserMenu
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    MenuName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutMenuContent                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBHUD::GetUserMenu(const class FString& MenuName, TArray<class FString>* OutMenuContent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "GetUserMenu");

	Params::GBHUD_GetUserMenu Parms{};

	Parms.MenuName = std::move(MenuName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMenuContent != nullptr)
		*OutMenuContent = std::move(Parms.OutMenuContent);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBHUD.HideFriendlyPlayerNameEvent
// (Event, Protected, BlueprintEvent)

void AGBHUD::HideFriendlyPlayerNameEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "HideFriendlyPlayerNameEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBHUD.HideMenuEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MenuType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::HideMenuEvent(class FName MenuType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "HideMenuEvent");

	Params::GBHUD_HideMenuEvent Parms{};

	Parms.MenuType = MenuType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.HideRadialItemsMenuEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AGBHUD::HideRadialItemsMenuEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "HideRadialItemsMenuEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBHUD.HideReadyRoomPlayerNameEvent
// (Event, Protected, BlueprintEvent)

void AGBHUD::HideReadyRoomPlayerNameEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "HideReadyRoomPlayerNameEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBHUD.InventorySlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::InventorySlot(int32 Index_0, bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "InventorySlot");

	Params::GBHUD_InventorySlot Parms{};

	Parms.Index_0 = Index_0;
	Parms.bImmediate = bImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHUD.OnChatLineAddedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGBPlayerState*                   SenderGBPlayerState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DisplayTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OnChatLineAddedEvent(class AGBPlayerState* SenderGBPlayerState, class FName Type, float DisplayTime, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OnChatLineAddedEvent");

	Params::GBHUD_OnChatLineAddedEvent Parms{};

	Parms.SenderGBPlayerState = SenderGBPlayerState;
	Parms.Type = Type;
	Parms.DisplayTime = DisplayTime;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.OnColourBlindnessFilterUpdateEvent
// (Event, Protected, BlueprintEvent)

void AGBHUD::OnColourBlindnessFilterUpdateEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OnColourBlindnessFilterUpdateEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBHUD.OnInventorySlotEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OnInventorySlotEvent(int32 Index_0, bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OnInventorySlotEvent");

	Params::GBHUD_OnInventorySlotEvent Parms{};

	Parms.Index_0 = Index_0;
	Parms.bImmediate = bImmediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.OnShowHintEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TSoftClassPtr<class UClass>&      HintWidgetClass                                        (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OnShowHintEvent(const TSoftClassPtr<class UClass>& HintWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OnShowHintEvent");

	Params::GBHUD_OnShowHintEvent Parms{};

	Parms.HintWidgetClass = HintWidgetClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.OnShowHUDEvent
// (Event, Protected, BlueprintEvent)

void AGBHUD::OnShowHUDEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OnShowHUDEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBHUD.OnSuggestHintEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             HintName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OnSuggestHintEvent(class FName HintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OnSuggestHintEvent");

	Params::GBHUD_OnSuggestHintEvent Parms{};

	Parms.HintName = HintName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.OpenLinearUserMenu
// (Exec, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MenuName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OpenLinearUserMenu(const class FString& MenuName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OpenLinearUserMenu");

	Params::GBHUD_OpenLinearUserMenu Parms{};

	Parms.MenuName = std::move(MenuName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.OpenRadialUserMenu
// (Exec, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MenuName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OpenRadialUserMenu(const class FString& MenuName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OpenRadialUserMenu");

	Params::GBHUD_OpenRadialUserMenu Parms{};

	Parms.MenuName = std::move(MenuName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.OpenUserMenu
// (Exec, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MenuName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::OpenUserMenu(const class FString& MenuName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "OpenUserMenu");

	Params::GBHUD_OpenUserMenu Parms{};

	Parms.MenuName = std::move(MenuName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.ShowFriendlyPlayerNameEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FString&                    PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETeamElement&                     PlayerTeamElement                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ShowFriendlyPlayerNameEvent(const class FString& PlayerName, const ETeamElement& PlayerTeamElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowFriendlyPlayerNameEvent");

	Params::GBHUD_ShowFriendlyPlayerNameEvent Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.PlayerTeamElement = PlayerTeamElement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.ShowHint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             HintName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             HintWidgetClass                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ShowHint(class FName HintName, TSoftClassPtr<class UClass> HintWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowHint");

	Params::GBHUD_ShowHint Parms{};

	Parms.HintName = HintName;
	Parms.HintWidgetClass = HintWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHUD.ShowMenuEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MenuType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ShowMenuEvent(class FName MenuType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowMenuEvent");

	Params::GBHUD_ShowMenuEvent Parms{};

	Parms.MenuType = MenuType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.ShowRadialItemsMenuEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class AGBInvItem*>&        Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBHUD::ShowRadialItemsMenuEvent(const TArray<class AGBInvItem*>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowRadialItemsMenuEvent");

	Params::GBHUD_ShowRadialItemsMenuEvent Parms{};

	Parms.Items = std::move(Items);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.ShowRadialMenuEvent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class UUserWidget*>&       RadialMenuEntries                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBHUD::ShowRadialMenuEvent(const TArray<class UUserWidget*>& RadialMenuEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowRadialMenuEvent");

	Params::GBHUD_ShowRadialMenuEvent Parms{};

	Parms.RadialMenuEntries = std::move(RadialMenuEntries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.ShowReadyRoomPlayerNameEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FString&                    PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETeamElement&                     PlayerTeamElement                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ShowReadyRoomPlayerNameEvent(const class FString& PlayerName, const ETeamElement& PlayerTeamElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowReadyRoomPlayerNameEvent");

	Params::GBHUD_ShowReadyRoomPlayerNameEvent Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.PlayerTeamElement = PlayerTeamElement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.ShowWarningEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WarningName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::ShowWarningEvent(class FName WarningName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "ShowWarningEvent");

	Params::GBHUD_ShowWarningEvent Parms{};

	Parms.WarningName = WarningName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBHUD.SuggestHint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             HintName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBHUD::SuggestHint(class FName HintName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "SuggestHint");

	Params::GBHUD_SuggestHint Parms{};

	Parms.HintName = HintName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBHUD.GetViewTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGBHUD::GetViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "GetViewTarget");

	Params::GBHUD_GetViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBHUD.HintValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             HintName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBHUD::HintValid(class FName HintName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "HintValid");

	Params::GBHUD_HintValid Parms{};

	Parms.HintName = HintName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBHUD.IsMenuVisibleEvent
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             MenuType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBHUD::IsMenuVisibleEvent(class FName MenuType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBHUD", "IsMenuVisibleEvent");

	Params::GBHUD_IsMenuVisibleEvent Parms{};

	Parms.MenuType = MenuType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBIngameMapWidget.GetCommandComp
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBPlayerCommandComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBPlayerCommandComponent* UGBIngameMapWidget::GetCommandComp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBIngameMapWidget", "GetCommandComp");

	Params::GBIngameMapWidget_GetCommandComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInputOverrideInterface.OverrideInputAxis
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSamples                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGamepad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGBInputOverrideInterface::OverrideInputAxis(const struct FKey& Key, float Delta, float DeltaTime, int32 NumSamples, bool bGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBInputOverrideInterface", "OverrideInputAxis");

	Params::GBInputOverrideInterface_OverrideInputAxis Parms{};

	Parms.Key = std::move(Key);
	Parms.Delta = Delta;
	Parms.DeltaTime = DeltaTime;
	Parms.NumSamples = NumSamples;
	Parms.bGamepad = bGamepad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInputOverrideInterface.OverrideInputKey
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBPInputEvent                           EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AmountDepressed                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGamepad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGBInputOverrideInterface::OverrideInputKey(const struct FKey& Key, EBPInputEvent EventType, float AmountDepressed, bool bGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBInputOverrideInterface", "OverrideInputKey");

	Params::GBInputOverrideInterface_OverrideInputKey Parms{};

	Parms.Key = std::move(Key);
	Parms.EventType = EventType;
	Parms.AmountDepressed = AmountDepressed;
	Parms.bGamepad = bGamepad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.CreateAssociatedPlayerStarts
// (Final, Native, Public, BlueprintCallable)

void AGBInsertionPoint::CreateAssociatedPlayerStarts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "CreateAssociatedPlayerStarts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInsertionPoint.GetPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AGBPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBPlayerState*> AGBInsertionPoint::GetPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetPlayers");

	Params::GBInsertionPoint_GetPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.InsertionPointUpdated
// (Final, Native, Protected)

void AGBInsertionPoint::InsertionPointUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "InsertionPointUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInsertionPoint.SetInsertionPointName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewInsertionPointName                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBInsertionPoint::SetInsertionPointName(class FName NewInsertionPointName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "SetInsertionPointName");

	Params::GBInsertionPoint_SetInsertionPointName Parms{};

	Parms.NewInsertionPointName = NewInsertionPointName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInsertionPoint.GetMaxSupportedPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBInsertionPoint::GetMaxSupportedPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetMaxSupportedPlayers");

	Params::GBInsertionPoint_GetMaxSupportedPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.GetNumberOfActivePlayerStarts
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBInsertionPoint::GetNumberOfActivePlayerStarts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetNumberOfActivePlayerStarts");

	Params::GBInsertionPoint_GetNumberOfActivePlayerStarts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.GetSequenceToPlayAfterInfil
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBInsertionPoint::GetSequenceToPlayAfterInfil() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetSequenceToPlayAfterInfil");

	Params::GBInsertionPoint_GetSequenceToPlayAfterInfil Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.GetSequenceToPlayBeforeInfil
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBInsertionPoint::GetSequenceToPlayBeforeInfil() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetSequenceToPlayBeforeInfil");

	Params::GBInsertionPoint_GetSequenceToPlayBeforeInfil Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.GetSideView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInsertionPoint::GetSideView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetSideView");

	Params::GBInsertionPoint_GetSideView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInsertionPoint.GetTopDownView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBInsertionPoint::GetTopDownView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInsertionPoint", "GetTopDownView");

	Params::GBInsertionPoint_GetTopDownView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.AddRoundToMagazine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBInternalMagazineComponent::AddRoundToMagazine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "AddRoundToMagazine");

	Params::GBInternalMagazineComponent_AddRoundToMagazine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.FindCompatibleRound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBBulletItem*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBBulletItem* UGBInternalMagazineComponent::FindCompatibleRound(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "FindCompatibleRound");

	Params::GBInternalMagazineComponent_FindCompatibleRound Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.OnBulletIdUpdated
// (Final, Native, Protected)

void UGBInternalMagazineComponent::OnBulletIdUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "OnBulletIdUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.OnRep_BoltHeldOpen
// (Final, Native, Protected)

void UGBInternalMagazineComponent::OnRep_BoltHeldOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "OnRep_BoltHeldOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.OnRep_Count
// (Native, Protected)

void UGBInternalMagazineComponent::OnRep_Count()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "OnRep_Count");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.SetBoltHeldOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBoltIsHeldOpen                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInternalMagazineComponent::SetBoltHeldOpen(bool bNewBoltIsHeldOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "SetBoltHeldOpen");

	Params::GBInternalMagazineComponent_SetBoltHeldOpen Parms{};

	Parms.bNewBoltIsHeldOpen = bNewBoltIsHeldOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.SetBulletId
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewBulletId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInternalMagazineComponent::SetBulletId(const struct FPrimaryAssetId& NewBulletId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "SetBulletId");

	Params::GBInternalMagazineComponent_SetBulletId Parms{};

	Parms.NewBulletId = std::move(NewBulletId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.SetChamberedRound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBBulletItem>        NewChamberedRound                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInternalMagazineComponent::SetChamberedRound(TSubclassOf<class AGBBulletItem> NewChamberedRound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "SetChamberedRound");

	Params::GBInternalMagazineComponent_SetChamberedRound Parms{};

	Parms.NewChamberedRound = NewChamberedRound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.SetCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInternalMagazineComponent::SetCount(int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "SetCount");

	Params::GBInternalMagazineComponent_SetCount Parms{};

	Parms.NewCount = NewCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.SetIsFiringFromOpenBolt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsFiringFromOpenBolt                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInternalMagazineComponent::SetIsFiringFromOpenBolt(bool bNewIsFiringFromOpenBolt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "SetIsFiringFromOpenBolt");

	Params::GBInternalMagazineComponent_SetIsFiringFromOpenBolt Parms{};

	Parms.bNewIsFiringFromOpenBolt = bNewIsFiringFromOpenBolt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.SyncCount
// (Final, Native, Protected)

void UGBInternalMagazineComponent::SyncCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "SyncCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInternalMagazineComponent.GetBoltHeldOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBInternalMagazineComponent::GetBoltHeldOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "GetBoltHeldOpen");

	Params::GBInternalMagazineComponent_GetBoltHeldOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.GetBulletItemClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletItem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletItem> UGBInternalMagazineComponent::GetBulletItemClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "GetBulletItemClass");

	Params::GBInternalMagazineComponent_GetBulletItemClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.GetCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBInternalMagazineComponent::GetCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "GetCapacity");

	Params::GBInternalMagazineComponent_GetCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.GetChamberedRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletItem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletItem> UGBInternalMagazineComponent::GetChamberedRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "GetChamberedRound");

	Params::GBInternalMagazineComponent_GetChamberedRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.GetCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBInternalMagazineComponent::GetCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "GetCount");

	Params::GBInternalMagazineComponent_GetCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.GetIsFiringFromOpenBolt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBInternalMagazineComponent::GetIsFiringFromOpenBolt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "GetIsFiringFromOpenBolt");

	Params::GBInternalMagazineComponent_GetIsFiringFromOpenBolt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.IsLiveRoundChambered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBInternalMagazineComponent::IsLiveRoundChambered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "IsLiveRoundChambered");

	Params::GBInternalMagazineComponent_IsLiveRoundChambered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInternalMagazineComponent.StartPlusOne
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBInternalMagazineComponent::StartPlusOne() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInternalMagazineComponent", "StartPlusOne");

	Params::GBInternalMagazineComponent_StartPlusOne Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemAudioEventSet.GetAudioEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MontageName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UGBInvItemAudioEventSet::GetAudioEvent(class FName MontageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemAudioEventSet", "GetAudioEvent");

	Params::GBInvItemAudioEventSet_GetAudioEvent Parms{};

	Parms.MontageName = MontageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemDragDropOperation.CreateFloatingWidget
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UGBInvItemDragDropOperation::CreateFloatingWidget(TSubclassOf<class UUserWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropOperation", "CreateFloatingWidget");

	Params::GBInvItemDragDropOperation_CreateFloatingWidget Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemDragDropOperation.EndDragCleanup
// (Final, Native, Protected, BlueprintCallable)

void UGBInvItemDragDropOperation::EndDragCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropOperation", "EndDragCleanup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropOperation.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UGBInvItemDragDropOperation::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropOperation", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropOperation.MakeInvItemInteractive
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       InvItemn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemDragDropOperation::MakeInvItemInteractive(class AGBInvItem* InvItemn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropOperation", "MakeInvItemInteractive");

	Params::GBInvItemDragDropOperation_MakeInvItemInteractive Parms{};

	Parms.InvItemn = InvItemn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemDragDropOperation.GetInvItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBInvItemDragDropOperation::GetInvItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropOperation", "GetInvItem");

	Params::GBInvItemDragDropOperation_GetInvItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemDragDropOperation.GetRootInvItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBInvItemDragDropOperation::GetRootInvItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemDragDropOperation", "GetRootInvItem");

	Params::GBInvItemDragDropOperation_GetRootInvItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemEffectSet.GetEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             EffectName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraSystem* UGBInvItemEffectSet::GetEffect(class FName EffectName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemEffectSet", "GetEffect");

	Params::GBInvItemEffectSet_GetEffect Parms{};

	Parms.EffectName = EffectName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemMontageSet.GetMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MontageName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UGBInvItemMontageSet::GetMontage(class FName MontageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemMontageSet", "GetMontage");

	Params::GBInvItemMontageSet_GetMontage Parms{};

	Parms.MontageName = MontageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemPickupComponent.Init
// (Final, Native, Public, BlueprintCallable)

void UGBInvItemPickupComponent::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemPickupComponent.OnBeginCursorOver
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemPickupComponent::OnBeginCursorOver(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "OnBeginCursorOver");

	Params::GBInvItemPickupComponent_OnBeginCursorOver Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemPickupComponent.OnEndCursorOver
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemPickupComponent::OnEndCursorOver(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "OnEndCursorOver");

	Params::GBInvItemPickupComponent_OnEndCursorOver Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemPickupComponent.SetAltPickupTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       NewAltPickupTarget                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemPickupComponent::SetAltPickupTarget(class AGBInvItem* NewAltPickupTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "SetAltPickupTarget");

	Params::GBInvItemPickupComponent_SetAltPickupTarget Parms{};

	Parms.NewAltPickupTarget = NewAltPickupTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemPickupComponent.SetPickupShapeScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewPickupShapeScale                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemPickupComponent::SetPickupShapeScale(const struct FVector& NewPickupShapeScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "SetPickupShapeScale");

	Params::GBInvItemPickupComponent_SetPickupShapeScale Parms{};

	Parms.NewPickupShapeScale = std::move(NewPickupShapeScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemPickupComponent.SetPickupTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       NewPickupTarget                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBInvItemPickupComponent::SetPickupTarget(class AGBInvItem* NewPickupTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "SetPickupTarget");

	Params::GBInvItemPickupComponent_SetPickupTarget Parms{};

	Parms.NewPickupTarget = NewPickupTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBInvItemPickupComponent.GetAltPickupTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBInvItemPickupComponent::GetAltPickupTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "GetAltPickupTarget");

	Params::GBInvItemPickupComponent_GetAltPickupTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemPickupComponent.GetPickupTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBInvItemPickupComponent::GetPickupTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupComponent", "GetPickupTarget");

	Params::GBInvItemPickupComponent_GetPickupTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemPickupWidget.IsValidPickupTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AGBInvItem*                 PickupTarget                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBInvItemPickupWidget::IsValidPickupTarget(const class AGBInvItem* PickupTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemPickupWidget", "IsValidPickupTarget");

	Params::GBInvItemPickupWidget_IsValidPickupTarget Parms{};

	Parms.PickupTarget = PickupTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemSkin.GetInvItemSkinMaterials
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGBInvItemSkinMaterialInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGBInvItemSkinMaterialInfo> UGBInvItemSkin::GetInvItemSkinMaterials() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemSkin", "GetInvItemSkinMaterials");

	Params::GBInvItemSkin_GetInvItemSkinMaterials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBInvItemSkin.GetTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBInvItemSkin::GetTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBInvItemSkin", "GetTags");

	Params::GBInvItemSkin_GetTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBItemBeamComponent.OnColourBlindnessFilterUpdateEvent
// (Event, Protected, BlueprintEvent)

void UGBItemBeamComponent::OnColourBlindnessFilterUpdateEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemBeamComponent", "OnColourBlindnessFilterUpdateEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBItemMeshByTagsUserData.OnCosmeticTagsUpdated
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FGameplayTagContainer&     InCosmeticTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBItemMeshByTagsUserData::OnCosmeticTagsUpdated(const struct FGameplayTagContainer& InCosmeticTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemMeshByTagsUserData", "OnCosmeticTagsUpdated");

	Params::GBItemMeshByTagsUserData_OnCosmeticTagsUpdated Parms{};

	Parms.InCosmeticTags = std::move(InCosmeticTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemMeshByTagsUserData.OnLoadMeshComplete
// (Native, Protected)

void UGBItemMeshByTagsUserData::OnLoadMeshComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemMeshByTagsUserData", "OnLoadMeshComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemMorphByTagsUserData.OnCosmeticTagsUpdated
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FGameplayTagContainer&     InCosmeticTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBItemMorphByTagsUserData::OnCosmeticTagsUpdated(const struct FGameplayTagContainer& InCosmeticTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemMorphByTagsUserData", "OnCosmeticTagsUpdated");

	Params::GBItemMorphByTagsUserData_OnCosmeticTagsUpdated Parms{};

	Parms.InCosmeticTags = std::move(InCosmeticTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemProjectile.OnBounce
// (Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBItemProjectile::OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemProjectile", "OnBounce");

	Params::GBItemProjectile_OnBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemProjectile.OnProxyAssociatedItemParentDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBItemProjectile::OnProxyAssociatedItemParentDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemProjectile", "OnProxyAssociatedItemParentDestroyed");

	Params::GBItemProjectile_OnProxyAssociatedItemParentDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemProjectile.OnReplaceClientsideProxyEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGBInvItem*                       ClientsideProxyAssociatedItem                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSyncedLocations                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBItemProjectile::OnReplaceClientsideProxyEvent(class AGBInvItem* ClientsideProxyAssociatedItem, bool bSyncedLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemProjectile", "OnReplaceClientsideProxyEvent");

	Params::GBItemProjectile_OnReplaceClientsideProxyEvent Parms{};

	Parms.ClientsideProxyAssociatedItem = ClientsideProxyAssociatedItem;
	Parms.bSyncedLocations = bSyncedLocations;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBItemProjectile.OnStop
// (Native, Public, HasOutParams)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBItemProjectile::OnStop(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemProjectile", "OnStop");

	Params::GBItemProjectile_OnStop Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemProjectile.UpdateAssociatedItem
// (Native, Protected)

void AGBItemProjectile::UpdateAssociatedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemProjectile", "UpdateAssociatedItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemProjectile.IsClientsideProxy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBItemProjectile::IsClientsideProxy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemProjectile", "IsClientsideProxy");

	Params::GBItemProjectile_IsClientsideProxy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBItemViewOverlayWidget.OnAssociatedItemDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBItemViewOverlayWidget::OnAssociatedItemDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemViewOverlayWidget", "OnAssociatedItemDestroyed");

	Params::GBItemViewOverlayWidget_OnAssociatedItemDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemViewOverlayWidget.SetAssociatedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBItemViewOverlayWidget::SetAssociatedItem(class AGBInvItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemViewOverlayWidget", "SetAssociatedItem");

	Params::GBItemViewOverlayWidget_SetAssociatedItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBItemViewOverlayWidget.GetAssociatedItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBInvItem*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBInvItem* UGBItemViewOverlayWidget::GetAssociatedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemViewOverlayWidget", "GetAssociatedItem");

	Params::GBItemViewOverlayWidget_GetAssociatedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBItemViewOverlayWidget.GetGBCharacterViewTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* UGBItemViewOverlayWidget::GetGBCharacterViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemViewOverlayWidget", "GetGBCharacterViewTarget");

	Params::GBItemViewOverlayWidget_GetGBCharacterViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBItemViewOverlayWidget.GetOwningGBPlayerController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerController* UGBItemViewOverlayWidget::GetOwningGBPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBItemViewOverlayWidget", "GetOwningGBPlayerController");

	Params::GBItemViewOverlayWidget_GetOwningGBPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.AILoadoutToFullLoadoutFileName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LoadoutFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::AILoadoutToFullLoadoutFileName(const class UObject* WorldContextObject, const class FString& LoadoutFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "AILoadoutToFullLoadoutFileName");

	Params::GBKitFunctionLibrary_AILoadoutToFullLoadoutFileName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadoutFileName = std::move(LoadoutFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.ConvertItemBuildToLuaTable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                ItemBuildJson                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSplitItemField                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBKitFunctionLibrary::ConvertItemBuildToLuaTable(const class UObject* WorldContextObject, class UVaRestJsonObject* ItemBuildJson, bool bSplitItemField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "ConvertItemBuildToLuaTable");

	Params::GBKitFunctionLibrary_ConvertItemBuildToLuaTable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ItemBuildJson = ItemBuildJson;
	Parms.bSplitItemField = bSplitItemField;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.ConvertKitFileNameToLoadoutName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LoadoutFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBKitFunctionLibrary::ConvertKitFileNameToLoadoutName(const class UObject* WorldContextObject, const class FString& LoadoutFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "ConvertKitFileNameToLoadoutName");

	Params::GBKitFunctionLibrary_ConvertKitFileNameToLoadoutName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadoutFileName = std::move(LoadoutFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.ConvertOldKitsInPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Extension                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBKitFunctionLibrary::ConvertOldKitsInPath(const class UObject* WorldContextObject, const class FString& Path, const class FString& Extension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "ConvertOldKitsInPath");

	Params::GBKitFunctionLibrary_ConvertOldKitsInPath Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Path = std::move(Path);
	Parms.Extension = std::move(Extension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitFunctionLibrary.CreateDummyKitInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* UGBKitFunctionLibrary::CreateDummyKitInfo(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "CreateDummyKitInfo");

	Params::GBKitFunctionLibrary_CreateDummyKitInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.CreateJsonTypeString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     InvItemTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::CreateJsonTypeString(const struct FGameplayTagContainer& InvItemTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "CreateJsonTypeString");

	Params::GBKitFunctionLibrary_CreateJsonTypeString Parms{};

	Parms.InvItemTags = std::move(InvItemTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.CreateKitFromItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    BuildName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBInvItem*                       Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnversioned                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject**               OutKitJsonObj                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::CreateKitFromItem(const class FString& BuildName, class AGBInvItem* Item, bool bUnversioned, class UVaRestJsonObject** OutKitJsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "CreateKitFromItem");

	Params::GBKitFunctionLibrary_CreateKitFromItem Parms{};

	Parms.BuildName = std::move(BuildName);
	Parms.Item = Item;
	Parms.bUnversioned = bUnversioned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKitJsonObj != nullptr)
		*OutKitJsonObj = Parms.OutKitJsonObj;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.CreateKitFromItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class AGBInvItem*>&        Items                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UVaRestJsonObject**               OutKitJsonObj                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::CreateKitFromItems(const TArray<class AGBInvItem*>& Items, class UVaRestJsonObject** OutKitJsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "CreateKitFromItems");

	Params::GBKitFunctionLibrary_CreateKitFromItems Parms{};

	Parms.Items = std::move(Items);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKitJsonObj != nullptr)
		*OutKitJsonObj = Parms.OutKitJsonObj;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.CreateKitInfo
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      KitName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* UGBKitFunctionLibrary::CreateKitInfo(class UObject* WorldContextObject, const class FName& KitName, class UVaRestJsonObject* KitJsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "CreateKitInfo");

	Params::GBKitFunctionLibrary_CreateKitInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.KitName = KitName;
	Parms.KitJsonObj = KitJsonObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetBuildNameField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetBuildNameField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetBuildNameField");

	Params::GBKitFunctionLibrary_GetBuildNameField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetChildrenField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetChildrenField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetChildrenField");

	Params::GBKitFunctionLibrary_GetChildrenField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetDefaultBotLoadoutsPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      TeamName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetDefaultBotLoadoutsPath(const class FName& TeamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetDefaultBotLoadoutsPath");

	Params::GBKitFunctionLibrary_GetDefaultBotLoadoutsPath Parms{};

	Parms.TeamName = TeamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetDefaultItemBuildTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UGBKitFunctionLibrary::GetDefaultItemBuildTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetDefaultItemBuildTag");

	Params::GBKitFunctionLibrary_GetDefaultItemBuildTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetDefaultKitInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* UGBKitFunctionLibrary::GetDefaultKitInfo(const class UObject* WorldContextObject, const class FName& LoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetDefaultKitInfo");

	Params::GBKitFunctionLibrary_GetDefaultKitInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetDefaultLoadoutFilename
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetDefaultLoadoutFilename(const class FName& LoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetDefaultLoadoutFilename");

	Params::GBKitFunctionLibrary_GetDefaultLoadoutFilename Parms{};

	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetDefaultPatchesPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetDefaultPatchesPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetDefaultPatchesPath");

	Params::GBKitFunctionLibrary_GetDefaultPatchesPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetFallbackPatchPathField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetFallbackPatchPathField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetFallbackPatchPathField");

	Params::GBKitFunctionLibrary_GetFallbackPatchPathField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetFallbackPatchTintField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetFallbackPatchTintField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetFallbackPatchTintField");

	Params::GBKitFunctionLibrary_GetFallbackPatchTintField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetFullPatchPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    PatchName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetFullPatchPath(const class FString& PatchName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetFullPatchPath");

	Params::GBKitFunctionLibrary_GetFullPatchPath Parms{};

	Parms.PatchName = std::move(PatchName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetHashField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetHashField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetHashField");

	Params::GBKitFunctionLibrary_GetHashField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetItemBuildField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetItemBuildField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetItemBuildField");

	Params::GBKitFunctionLibrary_GetItemBuildField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetItemDataField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetItemDataField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetItemDataField");

	Params::GBKitFunctionLibrary_GetItemDataField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetItemField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetItemField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetItemField");

	Params::GBKitFunctionLibrary_GetItemField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetKitExtension
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetKitExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetKitExtension");

	Params::GBKitFunctionLibrary_GetKitExtension Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetKitItemList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProfileName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipAuth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBInvItem*>*              OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::GetKitItemList(class AActor* Owner, class UVaRestJsonObject* KitJsonObj, class FName ProfileName, bool bSkipAuth, TArray<class AGBInvItem*>* OutItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetKitItemList");

	Params::GBKitFunctionLibrary_GetKitItemList Parms{};

	Parms.Owner = Owner;
	Parms.KitJsonObj = KitJsonObj;
	Parms.ProfileName = ProfileName;
	Parms.bSkipAuth = bSkipAuth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetKitPrimaryAssetIds
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPrimaryAssetId>*         OutPrimaryAssetIds                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::GetKitPrimaryAssetIds(class UVaRestJsonObject* KitJsonObj, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetKitPrimaryAssetIds");

	Params::GBKitFunctionLibrary_GetKitPrimaryAssetIds Parms{};

	Parms.KitJsonObj = KitJsonObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrimaryAssetIds != nullptr)
		*OutPrimaryAssetIds = std::move(Parms.OutPrimaryAssetIds);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetKitValidationInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LoadoutName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     RequiredInvItemTypeTags                                (Parm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     ExcludeInvItemTags                                     (Parm, NativeAccessSpecifierPublic)
// struct FGBKitValidationInfo             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBKitValidationInfo UGBKitFunctionLibrary::GetKitValidationInfo(const class UObject* WorldContextObject, class FName LoadoutName, class UVaRestJsonObject* KitJsonObj, const struct FGameplayTagContainer& RequiredInvItemTypeTags, const struct FGameplayTagContainer& ExcludeInvItemTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetKitValidationInfo");

	Params::GBKitFunctionLibrary_GetKitValidationInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadoutName = LoadoutName;
	Parms.KitJsonObj = KitJsonObj;
	Parms.RequiredInvItemTypeTags = std::move(RequiredInvItemTypeTags);
	Parms.ExcludeInvItemTags = std::move(ExcludeInvItemTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetKitVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBKitFunctionLibrary::GetKitVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetKitVersion");

	Params::GBKitFunctionLibrary_GetKitVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetModifiedField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetModifiedField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetModifiedField");

	Params::GBKitFunctionLibrary_GetModifiedField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetPatchAuthorAndName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    PatchFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutAuthor                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutPatchName                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBKitFunctionLibrary::GetPatchAuthorAndName(const class FString& PatchFilename, class FString* OutAuthor, class FString* OutPatchName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetPatchAuthorAndName");

	Params::GBKitFunctionLibrary_GetPatchAuthorAndName Parms{};

	Parms.PatchFilename = std::move(PatchFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthor != nullptr)
		*OutAuthor = std::move(Parms.OutAuthor);

	if (OutPatchName != nullptr)
		*OutPatchName = std::move(Parms.OutPatchName);
}


// Function GroundBranch.GBKitFunctionLibrary.GetPatchPathField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetPatchPathField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetPatchPathField");

	Params::GBKitFunctionLibrary_GetPatchPathField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetPatchTintField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetPatchTintField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetPatchTintField");

	Params::GBKitFunctionLibrary_GetPatchTintField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetPresetNameField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetPresetNameField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetPresetNameField");

	Params::GBKitFunctionLibrary_GetPresetNameField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetPresetsField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetPresetsField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetPresetsField");

	Params::GBKitFunctionLibrary_GetPresetsField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetRequiredInvItemTypeTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UGBKitFunctionLibrary::GetRequiredInvItemTypeTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetRequiredInvItemTypeTags");

	Params::GBKitFunctionLibrary_GetRequiredInvItemTypeTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetSkinField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetSkinField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetSkinField");

	Params::GBKitFunctionLibrary_GetSkinField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetTypeField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetTypeField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetTypeField");

	Params::GBKitFunctionLibrary_GetTypeField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserBotLoadoutsPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      TeamName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserBotLoadoutsPath(const class FName& TeamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserBotLoadoutsPath");

	Params::GBKitFunctionLibrary_GetUserBotLoadoutsPath Parms{};

	Parms.TeamName = TeamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserItemBuildFilename
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemBuild                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserItemBuildFilename(const class FString& Type, const class FString& ItemBuild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserItemBuildFilename");

	Params::GBKitFunctionLibrary_GetUserItemBuildFilename Parms{};

	Parms.Type = std::move(Type);
	Parms.ItemBuild = std::move(ItemBuild);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserItemBuildPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserItemBuildPath(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserItemBuildPath");

	Params::GBKitFunctionLibrary_GetUserItemBuildPath Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserLoadoutFilename
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      LoadoutName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserLoadoutFilename(const class FName& LoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserLoadoutFilename");

	Params::GBKitFunctionLibrary_GetUserLoadoutFilename Parms{};

	Parms.LoadoutName = LoadoutName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserPatchesPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserPatchesPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserPatchesPath");

	Params::GBKitFunctionLibrary_GetUserPatchesPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserPresetFilename
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Preset                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserPresetFilename(const class FString& Type, const class FString& Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserPresetFilename");

	Params::GBKitFunctionLibrary_GetUserPresetFilename Parms{};

	Parms.Type = std::move(Type);
	Parms.Preset = std::move(Preset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetUserPresetsPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetUserPresetsPath(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetUserPresetsPath");

	Params::GBKitFunctionLibrary_GetUserPresetsPath Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.GetVersionField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::GetVersionField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "GetVersionField");

	Params::GBKitFunctionLibrary_GetVersionField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.HasKitsToConvert
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::HasKitsToConvert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "HasKitsToConvert");

	Params::GBKitFunctionLibrary_HasKitsToConvert Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.HasRequiredInvItemTypeTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FPrimaryAssetId>&   PrimaryAssetIds                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     RequiredInvItemTypeTags                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::HasRequiredInvItemTypeTags(const TArray<struct FPrimaryAssetId>& PrimaryAssetIds, const struct FGameplayTagContainer& RequiredInvItemTypeTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "HasRequiredInvItemTypeTags");

	Params::GBKitFunctionLibrary_HasRequiredInvItemTypeTags Parms{};

	Parms.PrimaryAssetIds = std::move(PrimaryAssetIds);
	Parms.RequiredInvItemTypeTags = std::move(RequiredInvItemTypeTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.KitDump
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBKitFunctionLibrary::KitDump(const class FString& Message, class UVaRestJsonObject* KitJsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "KitDump");

	Params::GBKitFunctionLibrary_KitDump Parms{};

	Parms.Message = std::move(Message);
	Parms.KitJsonObj = KitJsonObj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitFunctionLibrary.KitValidation_Failed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGBKitValidationInfo&      KitValidationInfo                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::KitValidation_Failed(const struct FGBKitValidationInfo& KitValidationInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "KitValidation_Failed");

	Params::GBKitFunctionLibrary_KitValidation_Failed Parms{};

	Parms.KitValidationInfo = std::move(KitValidationInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.KitValidation_ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGBKitValidationInfo&      KitValidationInfo                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::KitValidation_ToString(const struct FGBKitValidationInfo& KitValidationInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "KitValidation_ToString");

	Params::GBKitFunctionLibrary_KitValidation_ToString Parms{};

	Parms.KitValidationInfo = std::move(KitValidationInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.LoadKitFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject**               OutKitJsonObj                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::LoadKitFile(const class FString& Filename, class UVaRestJsonObject** OutKitJsonObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "LoadKitFile");

	Params::GBKitFunctionLibrary_LoadKitFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKitJsonObj != nullptr)
		*OutKitJsonObj = Parms.OutKitJsonObj;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.LoadPatch
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PatchFilename                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D**                      OutPatchImage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D**                      OutPatchNormal                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutImageWidth                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutImageHeight                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::LoadPatch(const class FString& PatchFilename, class UTexture2D** OutPatchImage, class UTexture2D** OutPatchNormal, int32* OutImageWidth, int32* OutImageHeight, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "LoadPatch");

	Params::GBKitFunctionLibrary_LoadPatch Parms{};

	Parms.PatchFilename = std::move(PatchFilename);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPatchImage != nullptr)
		*OutPatchImage = Parms.OutPatchImage;

	if (OutPatchNormal != nullptr)
		*OutPatchNormal = Parms.OutPatchNormal;

	if (OutImageWidth != nullptr)
		*OutImageWidth = Parms.OutImageWidth;

	if (OutImageHeight != nullptr)
		*OutImageHeight = Parms.OutImageHeight;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.MakeValidLoadoutFilename
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::MakeValidLoadoutFilename(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "MakeValidLoadoutFilename");

	Params::GBKitFunctionLibrary_MakeValidLoadoutFilename Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.ProcessFailedKit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVaRestJsonObject*                KitJsonObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGBKitValidationInfo&      KitValidationInfo                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRemove                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKitFunctionLibrary::ProcessFailedKit(const class UObject* WorldContextObject, class UVaRestJsonObject* KitJsonObj, const struct FGBKitValidationInfo& KitValidationInfo, bool bRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "ProcessFailedKit");

	Params::GBKitFunctionLibrary_ProcessFailedKit Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.KitJsonObj = KitJsonObj;
	Parms.KitValidationInfo = std::move(KitValidationInfo);
	Parms.bRemove = bRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.StripItemTypePrefix
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InvItemTypeAsString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBKitFunctionLibrary::StripItemTypePrefix(const class FString& InvItemTypeAsString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "StripItemTypePrefix");

	Params::GBKitFunctionLibrary_StripItemTypePrefix Parms{};

	Parms.InvItemTypeAsString = std::move(InvItemTypeAsString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitFunctionLibrary.ValidateOrReplaceInvItemSkin
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ProfileName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InvItemSkinTypeTag                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPrimaryAssetId&           DesiredInvItemSkinId                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AGBCharacter*               Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId*                 OutValidInvItemSkinId                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBKitFunctionLibrary::ValidateOrReplaceInvItemSkin(const class FName& ProfileName, const struct FGameplayTag& InvItemSkinTypeTag, const struct FPrimaryAssetId& DesiredInvItemSkinId, const class AGBCharacter* Character, struct FPrimaryAssetId* OutValidInvItemSkinId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKitFunctionLibrary", "ValidateOrReplaceInvItemSkin");

	Params::GBKitFunctionLibrary_ValidateOrReplaceInvItemSkin Parms{};

	Parms.ProfileName = ProfileName;
	Parms.InvItemSkinTypeTag = std::move(InvItemSkinTypeTag);
	Parms.DesiredInvItemSkinId = std::move(DesiredInvItemSkinId);
	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValidInvItemSkinId != nullptr)
		*OutValidInvItemSkinId = std::move(Parms.OutValidInvItemSkinId);
}


// Function GroundBranch.GBKitInfo.AddPatch
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FGameplayTag&              PatchNameTag                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PatchPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           TintMaterial                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FallbackPatchPath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath&           FallbackTintMaterial                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKitInfo::AddPatch(const struct FGameplayTag& PatchNameTag, const class FString& PatchPath, const struct FSoftObjectPath& TintMaterial, const class FString& FallbackPatchPath, const struct FSoftObjectPath& FallbackTintMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "AddPatch");

	Params::GBKitInfo_AddPatch Parms{};

	Parms.PatchNameTag = std::move(PatchNameTag);
	Parms.PatchPath = std::move(PatchPath);
	Parms.TintMaterial = std::move(TintMaterial);
	Parms.FallbackPatchPath = std::move(FallbackPatchPath);
	Parms.FallbackTintMaterial = std::move(FallbackTintMaterial);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.ApplyToCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKitInfo::ApplyToCharacter(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "ApplyToCharacter");

	Params::GBKitInfo_ApplyToCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.ClearPatchAtlas
// (Final, Native, Public, BlueprintCallable)

void AGBKitInfo::ClearPatchAtlas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "ClearPatchAtlas");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.OnLoadPrimaryAssetsComplete
// (Final, Native, Public)

void AGBKitInfo::OnLoadPrimaryAssetsComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "OnLoadPrimaryAssetsComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.OnRep_ReplicatedLoadout
// (Final, Native, Protected)

void AGBKitInfo::OnRep_ReplicatedLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "OnRep_ReplicatedLoadout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.SetCallSign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewCallSign                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKitInfo::SetCallSign(const class FString& NewCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "SetCallSign");

	Params::GBKitInfo_SetCallSign Parms{};

	Parms.NewCallSign = std::move(NewCallSign);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.UpdateAssociatedCharacterPatches
// (Final, Native, Public, BlueprintCallable)

void AGBKitInfo::UpdateAssociatedCharacterPatches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "UpdateAssociatedCharacterPatches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.UpdatePatchTextureAtlas
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void AGBKitInfo::UpdatePatchTextureAtlas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "UpdatePatchTextureAtlas");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKitInfo.BP_GetKitJsonObj
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVaRestJsonObject*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVaRestJsonObject* AGBKitInfo::BP_GetKitJsonObj() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "BP_GetKitJsonObj");

	Params::GBKitInfo_BP_GetKitJsonObj Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitInfo.GetCallSign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBKitInfo::GetCallSign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "GetCallSign");

	Params::GBKitInfo_GetCallSign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitInfo.GetKitName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBKitInfo::GetKitName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "GetKitName");

	Params::GBKitInfo_GetKitName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitInfo.GetPatchColourTextureAtlas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* AGBKitInfo::GetPatchColourTextureAtlas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "GetPatchColourTextureAtlas");

	Params::GBKitInfo_GetPatchColourTextureAtlas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKitInfo.GetPatchNormalTextureAtlas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* AGBKitInfo::GetPatchNormalTextureAtlas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKitInfo", "GetPatchNormalTextureAtlas");

	Params::GBKitInfo_GetPatchNormalTextureAtlas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.AICharacterDied
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   DeathLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::AICharacterDied(const struct FVector& DeathLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "AICharacterDied");

	Params::GBKytController_AICharacterDied Parms{};

	Parms.DeathLocation = std::move(DeathLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.ClearSquad
// (Final, Native, Public, BlueprintCallable)

void AGBKytController::ClearSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "ClearSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.CommandIssued
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// int32                                   CommandIdx                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Commander                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   OptLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OptTargetActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::CommandIssued(int32 CommandIdx, class AActor* Commander, const struct FVector& OptLocation, class AActor* OptTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "CommandIssued");

	Params::GBKytController_CommandIssued Parms{};

	Parms.CommandIdx = CommandIdx;
	Parms.Commander = Commander;
	Parms.OptLocation = std::move(OptLocation);
	Parms.OptTargetActor = OptTargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBKytController.ComputeAndSetNextGuardPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::ComputeAndSetNextGuardPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "ComputeAndSetNextGuardPoint");

	Params::GBKytController_ComputeAndSetNextGuardPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.DebugFreeze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldFreeze                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::DebugFreeze(bool bShouldFreeze)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "DebugFreeze");

	Params::GBKytController_DebugFreeze Parms{};

	Parms.bShouldFreeze = bShouldFreeze;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.FindHidingSpot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           HideFrom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClassFilter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>*                  OutHidingSpots                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGBKytController::FindHidingSpot(class AActor* HideFrom, TSubclassOf<class AActor> ActorClassFilter, TArray<class AActor*>* OutHidingSpots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "FindHidingSpot");

	Params::GBKytController_FindHidingSpot Parms{};

	Parms.HideFrom = HideFrom;
	Parms.ActorClassFilter = ActorClassFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHidingSpots != nullptr)
		*OutHidingSpots = std::move(Parms.OutHidingSpots);
}


// Function GroundBranch.GBKytController.FlashlightWarn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     InstigatorChar                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::FlashlightWarn(class AGBCharacter* InstigatorChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "FlashlightWarn");

	Params::GBKytController_FlashlightWarn Parms{};

	Parms.InstigatorChar = InstigatorChar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.Freeze
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   FreezeTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::Freeze(float FreezeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "Freeze");

	Params::GBKytController_Freeze Parms{};

	Parms.FreezeTime = FreezeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.GetAIState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBKytController::GetAIState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetAIState");

	Params::GBKytController_GetAIState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetAlertness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBKytController::GetAlertness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetAlertness");

	Params::GBKytController_GetAlertness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetCommonBlackboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKytBlackboard*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKytBlackboard* AGBKytController::GetCommonBlackboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetCommonBlackboard");

	Params::GBKytController_GetCommonBlackboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetPerceptionCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBKytController::GetPerceptionCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetPerceptionCount");

	Params::GBKytController_GetPerceptionCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetVisibilityModifier
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGBCharacter*                     Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBKytController::GetVisibilityModifier(class AGBCharacter* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetVisibilityModifier");

	Params::GBKytController_GetVisibilityModifier Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GrenadeWarn
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::GrenadeWarn(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GrenadeWarn");

	Params::GBKytController_GrenadeWarn Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.HasTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::HasTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "HasTarget");

	Params::GBKytController_HasTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.IsFrozen
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::IsFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "IsFrozen");

	Params::GBKytController_IsFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.MoveCommandUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FAIMoveCommand&            NextMoveCommand                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGBKytController::MoveCommandUpdated(const struct FAIMoveCommand& NextMoveCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "MoveCommandUpdated");

	Params::GBKytController_MoveCommandUpdated Parms{};

	Parms.NextMoveCommand = std::move(NextMoveCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBKytController.NeedsReload
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::NeedsReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "NeedsReload");

	Params::GBKytController_NeedsReload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.OnLoadoutApplied
// (Final, Native, Protected)
// Parameters:
// class AGBCharacter*                     InGBCharacter                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::OnLoadoutApplied(class AGBCharacter* InGBCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "OnLoadoutApplied");

	Params::GBKytController_OnLoadoutApplied Parms{};

	Parms.InGBCharacter = InGBCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.ReceiveGoCodeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EAIGoCodes                              NewGoCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::ReceiveGoCodeChanged(EAIGoCodes NewGoCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "ReceiveGoCodeChanged");

	Params::GBKytController_ReceiveGoCodeChanged Parms{};

	Parms.NewGoCode = NewGoCode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBKytController.ReceiveMoveCommand
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FAIMoveCommand&            MoveCommand                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGBKytController::ReceiveMoveCommand(const struct FAIMoveCommand& MoveCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "ReceiveMoveCommand");

	Params::GBKytController_ReceiveMoveCommand Parms{};

	Parms.MoveCommand = std::move(MoveCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBKytController.ReceiveROEChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EAIRulesEngage                          NewROE                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::ReceiveROEChanged(EAIRulesEngage NewROE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "ReceiveROEChanged");

	Params::GBKytController_ReceiveROEChanged Parms{};

	Parms.NewROE = NewROE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBKytController.Reload
// (Final, Native, Protected, BlueprintCallable)

void AGBKytController::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "Reload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.SetAIFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           FocusTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::SetAIFocus(class AActor* FocusTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "SetAIFocus");

	Params::GBKytController_SetAIFocus Parms{};

	Parms.FocusTarget = FocusTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.SetAIState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGBAIState                              NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::SetAIState(EGBAIState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "SetAIState");

	Params::GBKytController_SetAIState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.SetSearchTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::SetSearchTime(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "SetSearchTime");

	Params::GBKytController_SetSearchTime Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.SetSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBAISquad*                       NewSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::SetSquad(class AGBAISquad* NewSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "SetSquad");

	Params::GBKytController_SetSquad Parms{};

	Parms.NewSquad = NewSquad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.SetWantsPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::SetWantsPlayerState(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "SetWantsPlayerState");

	Params::GBKytController_SetWantsPlayerState Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.UdpateAimTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewAimTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytController::UdpateAimTarget(class AActor* NewAimTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "UdpateAimTarget");

	Params::GBKytController_UdpateAimTarget Parms{};

	Parms.NewAimTarget = NewAimTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.UnFreeze
// (Native, Public, BlueprintCallable)

void AGBKytController::UnFreeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "UnFreeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.UpdateBlackboardSearchParams
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SearchDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SearchTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::UpdateBlackboardSearchParams(const struct FVector& TargetLocation, const struct FVector& SearchDirection, float SearchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "UpdateBlackboardSearchParams");

	Params::GBKytController_UpdateBlackboardSearchParams Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.SearchDirection = std::move(SearchDirection);
	Parms.SearchTime = SearchTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.UpdateCurrentShooterBB
// (Final, Native, Public, BlueprintCallable)

void AGBKytController::UpdateCurrentShooterBB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "UpdateCurrentShooterBB");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytController.GetGBChar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBCharacter* AGBKytController::GetGBChar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetGBChar");

	Params::GBKytController_GetGBChar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetGrenadeLaunchVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AGBKytController::GetGrenadeLaunchVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetGrenadeLaunchVelocity");

	Params::GBKytController_GetGrenadeLaunchVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetSearchTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBKytController::GetSearchTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetSearchTime");

	Params::GBKytController_GetSearchTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBAISquad*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBAISquad* AGBKytController::GetSquad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetSquad");

	Params::GBKytController_GetSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetSquadSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBKytController::GetSquadSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetSquadSize");

	Params::GBKytController_GetSquadSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetSuppressionValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBKytController::GetSuppressionValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetSuppressionValue");

	Params::GBKytController_GetSuppressionValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.GetTimeOnCurrentTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBKytController::GetTimeOnCurrentTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "GetTimeOnCurrentTarget");

	Params::GBKytController_GetTimeOnCurrentTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "IsAlive");

	Params::GBKytController_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytController.IsDebugFrozen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytController::IsDebugFrozen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytController", "IsDebugFrozen");

	Params::GBKytController_IsDebugFrozen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytDetectableActor.Detected
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           DetectedBy                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytDetectableActor::Detected(class AActor* DetectedBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytDetectableActor", "Detected");

	Params::GBKytDetectableActor_Detected Parms{};

	Parms.DetectedBy = DetectedBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytDetectableActor.ShouldBeUsedAsTarget
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBKytDetectableActor::ShouldBeUsedAsTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytDetectableActor", "ShouldBeUsedAsTarget");

	Params::GBKytDetectableActor_ShouldBeUsedAsTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytFriendlyController.ApplyPushForce
// (Final, Native, Protected)

void AGBKytFriendlyController::ApplyPushForce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytFriendlyController", "ApplyPushForce");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytFriendlyController.CommandReceived
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// EGBAICommands                           Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBKytFriendlyController::CommandReceived(EGBAICommands Command, const struct FVector& Location, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytFriendlyController", "CommandReceived");

	Params::GBKytFriendlyController_CommandReceived Parms{};

	Parms.Command = Command;
	Parms.Location = std::move(Location);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBKytFriendlyController.GetCommandBlackboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKytBlackboard*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKytBlackboard* AGBKytFriendlyController::GetCommandBlackboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytFriendlyController", "GetCommandBlackboard");

	Params::GBKytFriendlyController_GetCommandBlackboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytFriendlyController.OnControlledCharacterHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBKytFriendlyController::OnControlledCharacterHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytFriendlyController", "OnControlledCharacterHit");

	Params::GBKytFriendlyController_OnControlledCharacterHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBKytFriendlyController.ResetPushState
// (Final, Native, Protected)

void AGBKytFriendlyController::ResetPushState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBKytFriendlyController", "ResetPushState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.AddRoundToTube
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBBulletItem>        NewRound                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBTubeMagComponent::AddRoundToTube(TSubclassOf<class AGBBulletItem> NewRound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "AddRoundToTube");

	Params::GBTubeMagComponent_AddRoundToTube Parms{};

	Parms.NewRound = NewRound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.AddToTube
// (Final, Native, Protected)
// Parameters:
// TSubclassOf<class AGBBulletItem>        NewBulletItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBTubeMagComponent::AddToTube(TSubclassOf<class AGBBulletItem> NewBulletItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "AddToTube");

	Params::GBTubeMagComponent_AddToTube Parms{};

	Parms.NewBulletItem = NewBulletItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.FindCompatibleRound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBCharacter*                     Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBBulletItem*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBBulletItem* UGBTubeMagComponent::FindCompatibleRound(class AGBCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "FindCompatibleRound");

	Params::GBTubeMagComponent_FindCompatibleRound Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.GetTubeContents
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<TSubclassOf<class AGBBulletItem>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class AGBBulletItem>> UGBTubeMagComponent::GetTubeContents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetTubeContents");

	Params::GBTubeMagComponent_GetTubeContents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.OnBulletIdUpdated
// (Final, Native, Protected)

void UGBTubeMagComponent::OnBulletIdUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "OnBulletIdUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.OnRep_BoltHeldOpen
// (Final, Native, Protected)

void UGBTubeMagComponent::OnRep_BoltHeldOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "OnRep_BoltHeldOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.OnRep_TubeContents
// (Native, Protected)

void UGBTubeMagComponent::OnRep_TubeContents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "OnRep_TubeContents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.RemoveFromTube
// (Final, Native, Protected)
// Parameters:
// TSubclassOf<class AGBBulletItem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletItem> UGBTubeMagComponent::RemoveFromTube()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "RemoveFromTube");

	Params::GBTubeMagComponent_RemoveFromTube Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.SetBoltHeldOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBoltIsHeldOpen                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBTubeMagComponent::SetBoltHeldOpen(bool bNewBoltIsHeldOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "SetBoltHeldOpen");

	Params::GBTubeMagComponent_SetBoltHeldOpen Parms{};

	Parms.bNewBoltIsHeldOpen = bNewBoltIsHeldOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.SetBulletId
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewBulletId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBTubeMagComponent::SetBulletId(const struct FPrimaryAssetId& NewBulletId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "SetBulletId");

	Params::GBTubeMagComponent_SetBulletId Parms{};

	Parms.NewBulletId = std::move(NewBulletId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.SetChamberedRound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AGBBulletItem>        NewChamberedRound                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBTubeMagComponent::SetChamberedRound(TSubclassOf<class AGBBulletItem> NewChamberedRound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "SetChamberedRound");

	Params::GBTubeMagComponent_SetChamberedRound Parms{};

	Parms.NewChamberedRound = NewChamberedRound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.SetIsFiringFromOpenBolt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsFiringFromOpenBolt                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBTubeMagComponent::SetIsFiringFromOpenBolt(bool bNewIsFiringFromOpenBolt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "SetIsFiringFromOpenBolt");

	Params::GBTubeMagComponent_SetIsFiringFromOpenBolt Parms{};

	Parms.bNewIsFiringFromOpenBolt = bNewIsFiringFromOpenBolt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.SyncTubeContents
// (Final, Native, Protected)

void UGBTubeMagComponent::SyncTubeContents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "SyncTubeContents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTubeMagComponent.GetBoltHeldOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBTubeMagComponent::GetBoltHeldOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetBoltHeldOpen");

	Params::GBTubeMagComponent_GetBoltHeldOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.GetBulletItemClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletItem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletItem> UGBTubeMagComponent::GetBulletItemClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetBulletItemClass");

	Params::GBTubeMagComponent_GetBulletItemClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.GetCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBTubeMagComponent::GetCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetCapacity");

	Params::GBTubeMagComponent_GetCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.GetChamberedRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletItem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletItem> UGBTubeMagComponent::GetChamberedRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetChamberedRound");

	Params::GBTubeMagComponent_GetChamberedRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.GetCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGBTubeMagComponent::GetCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetCount");

	Params::GBTubeMagComponent_GetCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.GetIsFiringFromOpenBolt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBTubeMagComponent::GetIsFiringFromOpenBolt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "GetIsFiringFromOpenBolt");

	Params::GBTubeMagComponent_GetIsFiringFromOpenBolt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.IsLiveRoundChambered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBTubeMagComponent::IsLiveRoundChambered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "IsLiveRoundChambered");

	Params::GBTubeMagComponent_IsLiveRoundChambered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTubeMagComponent.StartPlusOne
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBTubeMagComponent::StartPlusOne() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTubeMagComponent", "StartPlusOne");

	Params::GBTubeMagComponent_StartPlusOne Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytStatics.DoesPathExist
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InStart                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InEnd                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKytStatics::DoesPathExist(const class UObject* WorldContextObject, const struct FVector& InStart, const struct FVector& InEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKytStatics", "DoesPathExist");

	Params::GBKytStatics_DoesPathExist Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InStart = std::move(InStart);
	Parms.InEnd = std::move(InEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytStatics.GetRandomReachablePointInRadius
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InOrigin                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutRandomPoint                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKytStatics::GetRandomReachablePointInRadius(const class UObject* WorldContextObject, const struct FVector& InOrigin, float Radius, struct FVector* OutRandomPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKytStatics", "GetRandomReachablePointInRadius");

	Params::GBKytStatics_GetRandomReachablePointInRadius Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InOrigin = std::move(InOrigin);
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRandomPoint != nullptr)
		*OutRandomPoint = std::move(Parms.OutRandomPoint);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBKytStatics.IsOnNavMesh
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PointToCheck                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ErrorTolerance                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutResolvedLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBKytStatics::IsOnNavMesh(const class UObject* WorldContextObject, const struct FVector& PointToCheck, const struct FVector& ErrorTolerance, struct FVector* OutResolvedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBKytStatics", "IsOnNavMesh");

	Params::GBKytStatics_IsOnNavMesh Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PointToCheck = std::move(PointToCheck);
	Parms.ErrorTolerance = std::move(ErrorTolerance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResolvedLocation != nullptr)
		*OutResolvedLocation = std::move(Parms.OutResolvedLocation);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLadder.OnBeginCursorOver
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBLadder::OnBeginCursorOver(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLadder", "OnBeginCursorOver");

	Params::GBLadder_OnBeginCursorOver Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLadder.OnEndCursorOver
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBLadder::OnEndCursorOver(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLadder", "OnEndCursorOver");

	Params::GBLadder_OnEndCursorOver Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLadder.SetupLadder
// (Final, Native, Protected, BlueprintCallable)

void AGBLadder::SetupLadder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLadder", "SetupLadder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLadderComponent.GetLadderBottom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBLadderComponent::GetLadderBottom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLadderComponent", "GetLadderBottom");

	Params::GBLadderComponent_GetLadderBottom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLadderComponent.GetLadderTop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGBLadderComponent::GetLadderTop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLadderComponent", "GetLadderTop");

	Params::GBLadderComponent_GetLadderTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLocalPlayer.Benchmark
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Parameters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBLocalPlayer::Benchmark(const class FString& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLocalPlayer", "Benchmark");

	Params::GBLocalPlayer_Benchmark Parms{};

	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLocalPlayer.GetPlayerSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBPlayerSettings*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBPlayerSettings* UGBLocalPlayer::GetPlayerSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLocalPlayer", "GetPlayerSettings");

	Params::GBLocalPlayer_GetPlayerSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.AddTag
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaActorPackage::AddTag(const struct FLuaValue& InActor, const struct FLuaValue& InTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "AddTag");

	Params::GBLuaActorPackage_AddTag Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaActorPackage.GetActorRefInternal
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLuaValue&                 PossibleActor                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGBLuaActorPackage::GetActorRefInternal(const struct FLuaValue& PossibleActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetActorRefInternal");

	Params::GBLuaActorPackage_GetActorRefInternal Parms{};

	Parms.PossibleActor = std::move(PossibleActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetLocation
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetLocation(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetLocation");

	Params::GBLuaActorPackage_GetLocation Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetName
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetName(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetName");

	Params::GBLuaActorPackage_GetName Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetOverlappingPlayers
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetOverlappingPlayers(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetOverlappingPlayers");

	Params::GBLuaActorPackage_GetOverlappingPlayers Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetOverlaps
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InActorClass                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetOverlaps(const struct FLuaValue& InActor, const struct FLuaValue& InActorClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetOverlaps");

	Params::GBLuaActorPackage_GetOverlaps Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InActorClass = std::move(InActorClass);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetRotation
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetRotation(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetRotation");

	Params::GBLuaActorPackage_GetRotation Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetTag
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 Index_0                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetTag(const struct FLuaValue& InActor, const struct FLuaValue& Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetTag");

	Params::GBLuaActorPackage_GetTag Parms{};

	Parms.InActor = std::move(InActor);
	Parms.Index_0 = std::move(Index_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetTags
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetTags(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetTags");

	Params::GBLuaActorPackage_GetTags Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.GetTeamId
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::GetTeamId(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "GetTeamId");

	Params::GBLuaActorPackage_GetTeamId Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.HasTag
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::HasTag(const struct FLuaValue& InActor, const struct FLuaValue& InTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "HasTag");

	Params::GBLuaActorPackage_HasTag Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.IsActive
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::IsActive(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "IsActive");

	Params::GBLuaActorPackage_IsActive Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.IsColliding
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::IsColliding(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "IsColliding");

	Params::GBLuaActorPackage_IsColliding Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.IsOverlapping
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 OtherActor                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::IsOverlapping(const struct FLuaValue& InActor, const struct FLuaValue& OtherActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "IsOverlapping");

	Params::GBLuaActorPackage_IsOverlapping Parms{};

	Parms.InActor = std::move(InActor);
	Parms.OtherActor = std::move(OtherActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.IsWithinTriggerVolume
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InGameTrigger                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::IsWithinTriggerVolume(const struct FLuaValue& InActor, const struct FLuaValue& InGameTrigger) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "IsWithinTriggerVolume");

	Params::GBLuaActorPackage_IsWithinTriggerVolume Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InGameTrigger = std::move(InGameTrigger);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.RemoveTag
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaActorPackage::RemoveTag(const struct FLuaValue& InActor, const struct FLuaValue& InTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "RemoveTag");

	Params::GBLuaActorPackage_RemoveTag Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaActorPackage.SetActive
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewActive                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaActorPackage::SetActive(const struct FLuaValue& InActor, const struct FLuaValue& InNewActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "SetActive");

	Params::GBLuaActorPackage_SetActive Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InNewActive = std::move(InNewActive);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaActorPackage.SetEnableCollision
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 Enabled                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaActorPackage::SetEnableCollision(const struct FLuaValue& InActor, const struct FLuaValue& Enabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "SetEnableCollision");

	Params::GBLuaActorPackage_SetEnableCollision Parms{};

	Parms.InActor = std::move(InActor);
	Parms.Enabled = std::move(Enabled);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaActorPackage.SetHidden
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 inHidden                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaActorPackage::SetHidden(const struct FLuaValue& InActor, const struct FLuaValue& inHidden) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "SetHidden");

	Params::GBLuaActorPackage_SetHidden Parms{};

	Parms.InActor = std::move(InActor);
	Parms.inHidden = std::move(inHidden);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaActorPackage.SetTeamId
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::SetTeamId(const struct FLuaValue& InActor, const struct FLuaValue& InTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "SetTeamId");

	Params::GBLuaActorPackage_SetTeamId Parms{};

	Parms.InActor = std::move(InActor);
	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaActorPackage.ToString
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActor                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaActorPackage::ToString(const struct FLuaValue& InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaActorPackage", "ToString");

	Params::GBLuaActorPackage_ToString Parms{};

	Parms.InActor = std::move(InActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.DisableFleeState
// (Final, Native, Protected)

void UGBLuaAIPackage::DisableFleeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "DisableFleeState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.GetSpawnIsActiveAtCurrentTimeOfDay
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InSpawnPoint                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetSpawnIsActiveAtCurrentTimeOfDay(const struct FLuaValue& InSpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetSpawnIsActiveAtCurrentTimeOfDay");

	Params::GBLuaAIPackage_GetSpawnIsActiveAtCurrentTimeOfDay Parms{};

	Parms.InSpawnPoint = std::move(InSpawnPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.TriggerFleeState
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 FleeFromLocation                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::TriggerFleeState(const struct FLuaValue& FleeFromLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "TriggerFleeState");

	Params::GBLuaAIPackage_TriggerFleeState Parms{};

	Parms.FleeFromLocation = std::move(FleeFromLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.VerifyAILoadoutExists
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InLoadoutFilename                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::VerifyAILoadoutExists(const struct FLuaValue& InLoadoutFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "VerifyAILoadoutExists");

	Params::GBLuaAIPackage_VerifyAILoadoutExists Parms{};

	Parms.InLoadoutFilename = std::move(InLoadoutFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.CheckLocationReachable
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InStartLoc                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InEndLoc                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::CheckLocationReachable(const struct FLuaValue& InStartLoc, const struct FLuaValue& InEndLoc) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "CheckLocationReachable");

	Params::GBLuaAIPackage_CheckLocationReachable Parms{};

	Parms.InStartLoc = std::move(InStartLoc);
	Parms.InEndLoc = std::move(InEndLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.CleanUp
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIControllerTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::CleanUp(const struct FLuaValue& InAIControllerTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "CleanUp");

	Params::GBLuaAIPackage_CleanUp Parms{};

	Parms.InAIControllerTag = std::move(InAIControllerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.Create
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InSpawnPoint                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAIControllerTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFreezeTime                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::Create(const struct FLuaValue& InSpawnPoint, const struct FLuaValue& InAIControllerTag, const struct FLuaValue& InFreezeTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "Create");

	Params::GBLuaAIPackage_Create Parms{};

	Parms.InSpawnPoint = std::move(InSpawnPoint);
	Parms.InAIControllerTag = std::move(InAIControllerTag);
	Parms.InFreezeTime = std::move(InFreezeTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.CreateOverDuration
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InCount                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InOrderedSpawnPoints                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAIControllerTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::CreateOverDuration(const struct FLuaValue& InDuration, const struct FLuaValue& InCount, const struct FLuaValue& InOrderedSpawnPoints, const struct FLuaValue& InAIControllerTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "CreateOverDuration");

	Params::GBLuaAIPackage_CreateOverDuration Parms{};

	Parms.InDuration = std::move(InDuration);
	Parms.InCount = std::move(InCount);
	Parms.InOrderedSpawnPoints = std::move(InOrderedSpawnPoints);
	Parms.InAIControllerTag = std::move(InAIControllerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.CreateWithTransform
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InVirtualSpawnPoint                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSpawnTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAIControllerTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFreezeTime                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::CreateWithTransform(const struct FLuaValue& InVirtualSpawnPoint, const struct FLuaValue& InSpawnTransform, const struct FLuaValue& InAIControllerTag, const struct FLuaValue& InFreezeTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "CreateWithTransform");

	Params::GBLuaAIPackage_CreateWithTransform Parms{};

	Parms.InVirtualSpawnPoint = std::move(InVirtualSpawnPoint);
	Parms.InSpawnTransform = std::move(InSpawnTransform);
	Parms.InAIControllerTag = std::move(InAIControllerTag);
	Parms.InFreezeTime = std::move(InFreezeTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.GetAIHotspotName
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIHotspot                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetAIHotspotName(const struct FLuaValue& InAIHotspot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetAIHotspotName");

	Params::GBLuaAIPackage_GetAIHotspotName Parms{};

	Parms.InAIHotspot = std::move(InAIHotspot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetControllers
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InControllerClass                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSquadId                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetControllers(const struct FLuaValue& InControllerClass, const struct FLuaValue& InTag, const struct FLuaValue& InTeamId, const struct FLuaValue& InSquadId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetControllers");

	Params::GBLuaAIPackage_GetControllers Parms{};

	Parms.InControllerClass = std::move(InControllerClass);
	Parms.InTag = std::move(InTag);
	Parms.InTeamId = std::move(InTeamId);
	Parms.InSquadId = std::move(InSquadId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetGuardPointName
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InGuardPoint                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetGuardPointName(const struct FLuaValue& InGuardPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetGuardPointName");

	Params::GBLuaAIPackage_GetGuardPointName Parms{};

	Parms.InGuardPoint = std::move(InGuardPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetMaxCount
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetMaxCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetMaxCount");

	Params::GBLuaAIPackage_GetMaxCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetRandomReachablePointInRadius
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InOrigin                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InRadius                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetRandomReachablePointInRadius(const struct FLuaValue& InOrigin, const struct FLuaValue& InRadius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetRandomReachablePointInRadius");

	Params::GBLuaAIPackage_GetRandomReachablePointInRadius Parms{};

	Parms.InOrigin = std::move(InOrigin);
	Parms.InRadius = std::move(InRadius);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetSpawnPointInfo
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InSpawnPoint                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetSpawnPointInfo(const struct FLuaValue& InSpawnPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetSpawnPointInfo");

	Params::GBLuaAIPackage_GetSpawnPointInfo Parms{};

	Parms.InSpawnPoint = std::move(InSpawnPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetSquadId
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIController                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetSquadId(const struct FLuaValue& InAIController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetSquadId");

	Params::GBLuaAIPackage_GetSquadId Parms{};

	Parms.InAIController = std::move(InAIController);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.GetSquadOrders
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIController                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::GetSquadOrders(const struct FLuaValue& InAIController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "GetSquadOrders");

	Params::GBLuaAIPackage_GetSquadOrders Parms{};

	Parms.InAIController = std::move(InAIController);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.IsAI
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIController                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAIControllerTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::IsAI(const struct FLuaValue& InAIController, const struct FLuaValue& InAIControllerTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "IsAI");

	Params::GBLuaAIPackage_IsAI Parms{};

	Parms.InAIController = std::move(InAIController);
	Parms.InAIControllerTag = std::move(InAIControllerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.IsOnNavMesh
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InLocationOrActor                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::IsOnNavMesh(const struct FLuaValue& InLocationOrActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "IsOnNavMesh");

	Params::GBLuaAIPackage_IsOnNavMesh Parms{};

	Parms.InLocationOrActor = std::move(InLocationOrActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.IsSpawnPointInHotspot
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAISpawnPoint                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAIHotspot                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::IsSpawnPointInHotspot(const struct FLuaValue& InAISpawnPoint, const struct FLuaValue& InAIHotspot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "IsSpawnPointInHotspot");

	Params::GBLuaAIPackage_IsSpawnPointInHotspot Parms{};

	Parms.InAISpawnPoint = std::move(InAISpawnPoint);
	Parms.InAIHotspot = std::move(InAIHotspot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.KillAI
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 AIController                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::KillAI(const struct FLuaValue& AIController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "KillAI");

	Params::GBLuaAIPackage_KillAI Parms{};

	Parms.AIController = std::move(AIController);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.ProjectPointToNavigation
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InPoint                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InQueryExtent                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaAIPackage::ProjectPointToNavigation(const struct FLuaValue& InPoint, const struct FLuaValue& InQueryExtent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "ProjectPointToNavigation");

	Params::GBLuaAIPackage_ProjectPointToNavigation Parms{};

	Parms.InPoint = std::move(InPoint);
	Parms.InQueryExtent = std::move(InQueryExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaAIPackage.SetSearchTarget
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIController                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTargetLocation                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSearchTime                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::SetSearchTarget(const struct FLuaValue& InAIController, const struct FLuaValue& InTargetLocation, const struct FLuaValue& InSearchTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "SetSearchTarget");

	Params::GBLuaAIPackage_SetSearchTarget Parms{};

	Parms.InAIController = std::move(InAIController);
	Parms.InTargetLocation = std::move(InTargetLocation);
	Parms.InSearchTime = std::move(InSearchTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.SetSquadOrders
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InControllerClass                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSquadId                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSquadOrders                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::SetSquadOrders(const struct FLuaValue& InControllerClass, const struct FLuaValue& InTag, const struct FLuaValue& InTeamId, const struct FLuaValue& InSquadId, const struct FLuaValue& InSquadOrders) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "SetSquadOrders");

	Params::GBLuaAIPackage_SetSquadOrders Parms{};

	Parms.InControllerClass = std::move(InControllerClass);
	Parms.InTag = std::move(InTag);
	Parms.InTeamId = std::move(InTeamId);
	Parms.InSquadId = std::move(InSquadId);
	Parms.InSquadOrders = std::move(InSquadOrders);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.SetSquadOrdersForAIController
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InAIController                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSquadOrders                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::SetSquadOrdersForAIController(const struct FLuaValue& InAIController, const struct FLuaValue& InSquadOrders) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "SetSquadOrdersForAIController");

	Params::GBLuaAIPackage_SetSquadOrdersForAIController Parms{};

	Parms.InAIController = std::move(InAIController);
	Parms.InSquadOrders = std::move(InSquadOrders);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaAIPackage.SetSquadSearchTarget
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InControllerClass                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSquadId                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTargetLocation                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSearchTime                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaAIPackage::SetSquadSearchTarget(const struct FLuaValue& InControllerClass, const struct FLuaValue& InTag, const struct FLuaValue& InTeamId, const struct FLuaValue& InSquadId, const struct FLuaValue& InTargetLocation, const struct FLuaValue& InSearchTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaAIPackage", "SetSquadSearchTarget");

	Params::GBLuaAIPackage_SetSquadSearchTarget Parms{};

	Parms.InControllerClass = std::move(InControllerClass);
	Parms.InTag = std::move(InTag);
	Parms.InTeamId = std::move(InTeamId);
	Parms.InSquadId = std::move(InSquadId);
	Parms.InTargetLocation = std::move(InTargetLocation);
	Parms.InSearchTime = std::move(InSearchTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.BalanceTeams
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InAttackingTeamId                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDefendingTeamId                                      (Parm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InIdealTeamSizeDifference                              (Parm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAutoBalanceType                                      (Parm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::BalanceTeams(const struct FLuaValue& InAttackingTeamId, const struct FLuaValue& InDefendingTeamId, const struct FLuaValue& InIdealTeamSizeDifference, const struct FLuaValue& InAutoBalanceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "BalanceTeams");

	Params::GBLuaGameModePackage_BalanceTeams Parms{};

	Parms.InAttackingTeamId = std::move(InAttackingTeamId);
	Parms.InDefendingTeamId = std::move(InDefendingTeamId);
	Parms.InIdealTeamSizeDifference = std::move(InIdealTeamSizeDifference);
	Parms.InAutoBalanceType = std::move(InAutoBalanceType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.CreateBlackOut
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 FadeIn                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::CreateBlackOut(const struct FLuaValue& InTeamId, const struct FLuaValue& FadeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "CreateBlackOut");

	Params::GBLuaGameModePackage_CreateBlackOut Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.FadeIn = std::move(FadeIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.EnterPlayArea
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::EnterPlayArea(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "EnterPlayArea");

	Params::GBLuaGameModePackage_EnterPlayArea Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.EnterReadyRoom
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::EnterReadyRoom(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "EnterReadyRoom");

	Params::GBLuaGameModePackage_EnterReadyRoom Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.GetBestLateComerInsertionPoint
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetBestLateComerInsertionPoint(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetBestLateComerInsertionPoint");

	Params::GBLuaGameModePackage_GetBestLateComerInsertionPoint Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetCurrentPlayingSequenceInfo
// (Final, Native, Protected)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetCurrentPlayingSequenceInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetCurrentPlayingSequenceInfo");

	Params::GBLuaGameModePackage_GetCurrentPlayingSequenceInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetExfilSequenceActors
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InExtractionPoint                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetExfilSequenceActors(const struct FLuaValue& InExtractionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetExfilSequenceActors");

	Params::GBLuaGameModePackage_GetExfilSequenceActors Parms{};

	Parms.InExtractionPoint = std::move(InExtractionPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetGameStatValue
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InGameStatKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetGameStatValue(const struct FLuaValue& InGameStatKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetGameStatValue");

	Params::GBLuaGameModePackage_GetGameStatValue Parms{};

	Parms.InGameStatKey = std::move(InGameStatKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetInfilSequenceActors
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InInsertionPoint                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetInfilSequenceActors(const struct FLuaValue& InInsertionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetInfilSequenceActors");

	Params::GBLuaGameModePackage_GetInfilSequenceActors Parms{};

	Parms.InInsertionPoint = std::move(InInsertionPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetMainSequenceActors
// (Final, Native, Protected)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetMainSequenceActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetMainSequenceActors");

	Params::GBLuaGameModePackage_GetMainSequenceActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetMissionCompletionFraction
// (Final, Native, Protected)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetMissionCompletionFraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetMissionCompletionFraction");

	Params::GBLuaGameModePackage_GetMissionCompletionFraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetSearchablePropType
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InSearchableProp                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetSearchablePropType(const struct FLuaValue& InSearchableProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetSearchablePropType");

	Params::GBLuaGameModePackage_GetSearchablePropType Parms{};

	Parms.InSearchableProp = std::move(InSearchableProp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetSearchablePropYieldsIntel
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InSearchableProp                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetSearchablePropYieldsIntel(const struct FLuaValue& InSearchableProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetSearchablePropYieldsIntel");

	Params::GBLuaGameModePackage_GetSearchablePropYieldsIntel Parms{};

	Parms.InSearchableProp = std::move(InSearchableProp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.IsSequencePlaying
// (Final, Native, Protected)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::IsSequencePlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "IsSequencePlaying");

	Params::GBLuaGameModePackage_IsSequencePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.NotifyMissionSettingValueChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InSettingName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::NotifyMissionSettingValueChanged(const struct FLuaValue& InSettingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "NotifyMissionSettingValueChanged");

	Params::GBLuaGameModePackage_NotifyMissionSettingValueChanged Parms{};

	Parms.InSettingName = std::move(InSettingName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.NotifyObjectiveStatusUpdate
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMissionObjectiveActor                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InStatusUpdateType                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFloatParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::NotifyObjectiveStatusUpdate(const struct FLuaValue& InTeamId, const struct FLuaValue& InMissionObjectiveActor, const struct FLuaValue& InStatusUpdateType, const struct FLuaValue& InFloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "NotifyObjectiveStatusUpdate");

	Params::GBLuaGameModePackage_NotifyObjectiveStatusUpdate Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InMissionObjectiveActor = std::move(InMissionObjectiveActor);
	Parms.InStatusUpdateType = std::move(InStatusUpdateType);
	Parms.InFloatParam = std::move(InFloatParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.PrepLatecomer
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::PrepLatecomer(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "PrepLatecomer");

	Params::GBLuaGameModePackage_PrepLatecomer Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.RemoveBlackOut
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 FadeOut                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::RemoveBlackOut(const struct FLuaValue& InTeamId, const struct FLuaValue& FadeOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "RemoveBlackOut");

	Params::GBLuaGameModePackage_RemoveBlackOut Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.FadeOut = std::move(FadeOut);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ResetBalanceTeams
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 NewNumberOfMovementsToTrack                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 NewAutoBalanceLightTouchSetting                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::ResetBalanceTeams(const struct FLuaValue& NewNumberOfMovementsToTrack, const struct FLuaValue& NewAutoBalanceLightTouchSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ResetBalanceTeams");

	Params::GBLuaGameModePackage_ResetBalanceTeams Parms{};

	Parms.NewNumberOfMovementsToTrack = std::move(NewNumberOfMovementsToTrack);
	Parms.NewAutoBalanceLightTouchSetting = std::move(NewAutoBalanceLightTouchSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetMissionSettingValue
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 SettingName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 SettingValue                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetMissionSettingValue(const struct FLuaValue& SettingName, const struct FLuaValue& SettingValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetMissionSettingValue");

	Params::GBLuaGameModePackage_SetMissionSettingValue Parms{};

	Parms.SettingName = std::move(SettingName);
	Parms.SettingValue = std::move(SettingValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetObjectiveStatus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InMissionObjectiveActor                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewObjectiveStatus                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetObjectiveStatus(const struct FLuaValue& InMissionObjectiveActor, const struct FLuaValue& InNewObjectiveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetObjectiveStatus");

	Params::GBLuaGameModePackage_SetObjectiveStatus Parms{};

	Parms.InMissionObjectiveActor = std::move(InMissionObjectiveActor);
	Parms.InNewObjectiveStatus = std::move(InNewObjectiveStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetSearchablePropYieldsIntel
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InSearchableProp                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 NewYieldsIntel                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetSearchablePropYieldsIntel(const struct FLuaValue& InSearchableProp, const struct FLuaValue& NewYieldsIntel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetSearchablePropYieldsIntel");

	Params::GBLuaGameModePackage_SetSearchablePropYieldsIntel Parms{};

	Parms.InSearchableProp = std::move(InSearchableProp);
	Parms.NewYieldsIntel = std::move(NewYieldsIntel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.StopCurrentSequencePlayback
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 SuppressBlackOutAfter                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::StopCurrentSequencePlayback(const struct FLuaValue& SuppressBlackOutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "StopCurrentSequencePlayback");

	Params::GBLuaGameModePackage_StopCurrentSequencePlayback Parms{};

	Parms.SuppressBlackOutAfter = std::move(SuppressBlackOutAfter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.TriggerLevelSequenceActor
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InLevelSequenceActor                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 IsCutscene                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 CanAbort                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 ResetActors                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 HidePlayers                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 BlackOutAfter                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::TriggerLevelSequenceActor(const struct FLuaValue& InLevelSequenceActor, const struct FLuaValue& IsCutscene, const struct FLuaValue& CanAbort, const struct FLuaValue& ResetActors, const struct FLuaValue& HidePlayers, const struct FLuaValue& BlackOutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "TriggerLevelSequenceActor");

	Params::GBLuaGameModePackage_TriggerLevelSequenceActor Parms{};

	Parms.InLevelSequenceActor = std::move(InLevelSequenceActor);
	Parms.IsCutscene = std::move(IsCutscene);
	Parms.CanAbort = std::move(CanAbort);
	Parms.ResetActors = std::move(ResetActors);
	Parms.HidePlayers = std::move(HidePlayers);
	Parms.BlackOutAfter = std::move(BlackOutAfter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.AddBots
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InCount                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::AddBots(const struct FLuaValue& InCount, const struct FLuaValue& InTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AddBots");

	Params::GBLuaGameModePackage_AddBots Parms{};

	Parms.InCount = std::move(InCount);
	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.AddGameObjective
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InName                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InObjectiveType                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::AddGameObjective(const struct FLuaValue& InTeamId, const struct FLuaValue& InName, const struct FLuaValue& InObjectiveType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AddGameObjective");

	Params::GBLuaGameModePackage_AddGameObjective Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InName = std::move(InName);
	Parms.InObjectiveType = std::move(InObjectiveType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.AddGameStat
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InGameStat                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::AddGameStat(const struct FLuaValue& InGameStat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AddGameStat");

	Params::GBLuaGameModePackage_AddGameStat Parms{};

	Parms.InGameStat = std::move(InGameStat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.AddObjectiveMarker
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMarkerName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMarkerType                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 Inactive                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::AddObjectiveMarker(const struct FLuaValue& InLocation, const struct FLuaValue& InTeamId, const struct FLuaValue& InMarkerName, const struct FLuaValue& InMarkerType, const struct FLuaValue& Inactive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AddObjectiveMarker");

	Params::GBLuaGameModePackage_AddObjectiveMarker Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InTeamId = std::move(InTeamId);
	Parms.InMarkerName = std::move(InMarkerName);
	Parms.InMarkerType = std::move(InMarkerType);
	Parms.Inactive = std::move(Inactive);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.AddPlayerTeam
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InPlayerLoadoutName                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::AddPlayerTeam(const struct FLuaValue& InTeamId, const struct FLuaValue& InTeamName, const struct FLuaValue& InPlayerLoadoutName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AddPlayerTeam");

	Params::GBLuaGameModePackage_AddPlayerTeam Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InTeamName = std::move(InTeamName);
	Parms.InPlayerLoadoutName = std::move(InPlayerLoadoutName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.AddSearchLocation
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InName                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InObjectiveType                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::AddSearchLocation(const struct FLuaValue& InTeamId, const struct FLuaValue& InName, const struct FLuaValue& InObjectiveType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AddSearchLocation");

	Params::GBLuaGameModePackage_AddSearchLocation Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InName = std::move(InName);
	Parms.InObjectiveType = std::move(InObjectiveType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.AwardTeamScore
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InScoreName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InScoreMultiple                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::AwardTeamScore(const struct FLuaValue& InTeamId, const struct FLuaValue& InScoreName, const struct FLuaValue& InScoreMultiple) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "AwardTeamScore");

	Params::GBLuaGameModePackage_AwardTeamScore Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InScoreName = std::move(InScoreName);
	Parms.InScoreMultiple = std::move(InScoreMultiple);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.BroadcastGameMessage
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InGameMessageId                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InType                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::BroadcastGameMessage(const struct FLuaValue& InGameMessageId, const struct FLuaValue& InType, const struct FLuaValue& InDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "BroadcastGameMessage");

	Params::GBLuaGameModePackage_BroadcastGameMessage Parms{};

	Parms.InGameMessageId = std::move(InGameMessageId);
	Parms.InType = std::move(InType);
	Parms.InDuration = std::move(InDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.CancelBenchmark
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::CancelBenchmark() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "CancelBenchmark");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ClearGameObjectives
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ClearGameObjectives() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ClearGameObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ClearGameStats
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ClearGameStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ClearGameStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ClearRoundStageTime
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ClearRoundStageTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ClearRoundStageTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ClearSearchLocations
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ClearSearchLocations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ClearSearchLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ClearVolunteerStatuses
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ClearVolunteerStatuses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ClearVolunteerStatuses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.EnableExtraLogging
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::EnableExtraLogging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "EnableExtraLogging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.FormatString
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InFormatTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::FormatString(const struct FLuaValue& InFormatTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "FormatString");

	Params::GBLuaGameModePackage_FormatString Parms{};

	Parms.InFormatTable = std::move(InFormatTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.FreezeBots
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::FreezeBots(const struct FLuaValue& InTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "FreezeBots");

	Params::GBLuaGameModePackage_FreezeBots Parms{};

	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.GetCurrentMissionTags
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetCurrentMissionTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetCurrentMissionTags");

	Params::GBLuaGameModePackage_GetCurrentMissionTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetInsertionPointName
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InInsertionPoint                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetInsertionPointName(const struct FLuaValue& InInsertionPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetInsertionPointName");

	Params::GBLuaGameModePackage_GetInsertionPointName Parms{};

	Parms.InInsertionPoint = std::move(InInsertionPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetObjectiveInfo
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InMissionObjectiveActor                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetObjectiveInfo(const struct FLuaValue& InMissionObjectiveActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetObjectiveInfo");

	Params::GBLuaGameModePackage_GetObjectiveInfo Parms{};

	Parms.InMissionObjectiveActor = std::move(InMissionObjectiveActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetObjectiveScript
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InMissionObjectiveActor                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetObjectiveScript(const struct FLuaValue& InMissionObjectiveActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetObjectiveScript");

	Params::GBLuaGameModePackage_GetObjectiveScript Parms{};

	Parms.InMissionObjectiveActor = std::move(InMissionObjectiveActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetObjectiveStatus
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InMissionObjectiveActor                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetObjectiveStatus(const struct FLuaValue& InMissionObjectiveActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetObjectiveStatus");

	Params::GBLuaGameModePackage_GetObjectiveStatus Parms{};

	Parms.InMissionObjectiveActor = std::move(InMissionObjectiveActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetObjectiveStatusAsName
// (Final, Native, Private, Const)
// Parameters:
// EGBMissionObjectiveStatus               ObjectiveStatus                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBLuaGameModePackage::GetObjectiveStatusAsName(EGBMissionObjectiveStatus ObjectiveStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetObjectiveStatusAsName");

	Params::GBLuaGameModePackage_GetObjectiveStatusAsName Parms{};

	Parms.ObjectiveStatus = ObjectiveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetPlayerCount
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetPlayerCount(const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetPlayerCount");

	Params::GBLuaGameModePackage_GetPlayerCount Parms{};

	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetPlayerList
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetPlayerList(const struct FLuaValue& InTeamId, const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetPlayerList");

	Params::GBLuaGameModePackage_GetPlayerList Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetPlayerListByLives
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMinLives                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetPlayerListByLives(const struct FLuaValue& InTeamId, const struct FLuaValue& InMinLives, const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetPlayerListByLives");

	Params::GBLuaGameModePackage_GetPlayerListByLives Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InMinLives = std::move(InMinLives);
	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetPlayerListByStatus
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InReadyStatus                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetPlayerListByStatus(const struct FLuaValue& InTeamId, const struct FLuaValue& InReadyStatus, const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetPlayerListByStatus");

	Params::GBLuaGameModePackage_GetPlayerListByStatus Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InReadyStatus = std::move(InReadyStatus);
	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetReadyPlayerTeamCounts
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetReadyPlayerTeamCounts(const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetReadyPlayerTeamCounts");

	Params::GBLuaGameModePackage_GetReadyPlayerTeamCounts Parms{};

	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetRoundStage
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetRoundStage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetRoundStage");

	Params::GBLuaGameModePackage_GetRoundStage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetRoundStageTime
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetRoundStageTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetRoundStageTime");

	Params::GBLuaGameModePackage_GetRoundStageTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetScript
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetScript() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetScript");

	Params::GBLuaGameModePackage_GetScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetSpawnProtectionVolumeHasNoImmunity
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InSpawnProtectionVolume                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetSpawnProtectionVolumeHasNoImmunity(const struct FLuaValue& InSpawnProtectionVolume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetSpawnProtectionVolumeHasNoImmunity");

	Params::GBLuaGameModePackage_GetSpawnProtectionVolumeHasNoImmunity Parms{};

	Parms.InSpawnProtectionVolume = std::move(InSpawnProtectionVolume);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetTimeOfDay
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetTimeOfDay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetTimeOfDay");

	Params::GBLuaGameModePackage_GetTimeOfDay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetVolunteerList
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetVolunteerList(const struct FLuaValue& InTeamId, const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetVolunteerList");

	Params::GBLuaGameModePackage_GetVolunteerList Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetVolunteerListByLives
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMinLives                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetVolunteerListByLives(const struct FLuaValue& InTeamId, const struct FLuaValue& InMinLives, const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetVolunteerListByLives");

	Params::GBLuaGameModePackage_GetVolunteerListByLives Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InMinLives = std::move(InMinLives);
	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.GetVolunteerListByStatus
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InReadyStatus                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InExcludeBots                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::GetVolunteerListByStatus(const struct FLuaValue& InTeamId, const struct FLuaValue& InReadyStatus, const struct FLuaValue& InExcludeBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "GetVolunteerListByStatus");

	Params::GBLuaGameModePackage_GetVolunteerListByStatus Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InReadyStatus = std::move(InReadyStatus);
	Parms.InExcludeBots = std::move(InExcludeBots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.IsEditingMission
// (Final, Native, Protected, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameModePackage::IsEditingMission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "IsEditingMission");

	Params::GBLuaGameModePackage_IsEditingMission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameModePackage.MakeEveryoneSpectate
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::MakeEveryoneSpectate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "MakeEveryoneSpectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.RemoveBots
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InCount                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::RemoveBots(const struct FLuaValue& InCount, const struct FLuaValue& InTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "RemoveBots");

	Params::GBLuaGameModePackage_RemoveBots Parms{};

	Parms.InCount = std::move(InCount);
	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ResetMatchStats
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ResetMatchStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ResetMatchStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ResetPlayerScores
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ResetPlayerScores() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ResetPlayerScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ResetTeamScores
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ResetTeamScores() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ResetTeamScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ResetWatch
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ResetWatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ResetWatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.ReturnToMenu
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::ReturnToMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "ReturnToMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SendEveryoneToPlayArea
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::SendEveryoneToPlayArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SendEveryoneToPlayArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SendEveryoneToReadyRoom
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::SendEveryoneToReadyRoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SendEveryoneToReadyRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SendMessageToPlayerById
// (Final, Native, Public, Const)
// Parameters:
// const int32                             InPlayerId                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       InMessage                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       InMessageType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InMessageDuration                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SendMessageToPlayerById(const int32 InPlayerId, const class FName InMessage, const class FName InMessageType, const float InMessageDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SendMessageToPlayerById");

	Params::GBLuaGameModePackage_SendMessageToPlayerById Parms{};

	Parms.InPlayerId = InPlayerId;
	Parms.InMessage = InMessage;
	Parms.InMessageType = InMessageType;
	Parms.InMessageDuration = InMessageDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetCaptureState
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 IsCapturing                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetCaptureState(const struct FLuaValue& IsCapturing) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetCaptureState");

	Params::GBLuaGameModePackage_SetCaptureState Parms{};

	Parms.IsCapturing = std::move(IsCapturing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetCaptureZone
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InCaptureRadius                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InCaptureHeight                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDefenderTeamId                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InZoneIsSpherical                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetCaptureZone(const struct FLuaValue& InCaptureRadius, const struct FLuaValue& InCaptureHeight, const struct FLuaValue& InDefenderTeamId, const struct FLuaValue& InZoneIsSpherical) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetCaptureZone");

	Params::GBLuaGameModePackage_SetCaptureZone Parms{};

	Parms.InCaptureRadius = std::move(InCaptureRadius);
	Parms.InCaptureHeight = std::move(InCaptureHeight);
	Parms.InDefenderTeamId = std::move(InDefenderTeamId);
	Parms.InZoneIsSpherical = std::move(InZoneIsSpherical);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetDefaultRoundStageTime
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InRoundStageName                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewTimeLimit                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetDefaultRoundStageTime(const struct FLuaValue& InRoundStageName, const struct FLuaValue& InNewTimeLimit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetDefaultRoundStageTime");

	Params::GBLuaGameModePackage_SetDefaultRoundStageTime Parms{};

	Parms.InRoundStageName = std::move(InRoundStageName);
	Parms.InNewTimeLimit = std::move(InNewTimeLimit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetGameModeName
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InGameModeName                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetGameModeName(const struct FLuaValue& InGameModeName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetGameModeName");

	Params::GBLuaGameModePackage_SetGameModeName Parms{};

	Parms.InGameModeName = std::move(InGameModeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetObjectiveLocation
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InObjectiveLocation                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetObjectiveLocation(const struct FLuaValue& InObjectiveLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetObjectiveLocation");

	Params::GBLuaGameModePackage_SetObjectiveLocation Parms{};

	Parms.InObjectiveLocation = std::move(InObjectiveLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetPlayerScoreTypes
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InScoreTypeTable                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetPlayerScoreTypes(const struct FLuaValue& InScoreTypeTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetPlayerScoreTypes");

	Params::GBLuaGameModePackage_SetPlayerScoreTypes Parms{};

	Parms.InScoreTypeTable = std::move(InScoreTypeTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetPlayerTeamRole
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewRole                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetPlayerTeamRole(const struct FLuaValue& InTeamId, const struct FLuaValue& InNewRole) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetPlayerTeamRole");

	Params::GBLuaGameModePackage_SetPlayerTeamRole Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InNewRole = std::move(InNewRole);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetRoundIsTemporaryGameMode
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 IsTemporary                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetRoundIsTemporaryGameMode(const struct FLuaValue& IsTemporary) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetRoundIsTemporaryGameMode");

	Params::GBLuaGameModePackage_SetRoundIsTemporaryGameMode Parms{};

	Parms.IsTemporary = std::move(IsTemporary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetRoundStage
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InRoundStageName                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetRoundStage(const struct FLuaValue& InRoundStageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetRoundStage");

	Params::GBLuaGameModePackage_SetRoundStage Parms{};

	Parms.InRoundStageName = std::move(InRoundStageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetRoundStageTime
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InRoundStageTime                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetRoundStageTime(const struct FLuaValue& InRoundStageTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetRoundStageTime");

	Params::GBLuaGameModePackage_SetRoundStageTime Parms{};

	Parms.InRoundStageTime = std::move(InRoundStageTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetTeamAttitude
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InOtherTeamId                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAttitude                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetTeamAttitude(const struct FLuaValue& InTeamId, const struct FLuaValue& InOtherTeamId, const struct FLuaValue& InAttitude) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetTeamAttitude");

	Params::GBLuaGameModePackage_SetTeamAttitude Parms{};

	Parms.InTeamId = std::move(InTeamId);
	Parms.InOtherTeamId = std::move(InOtherTeamId);
	Parms.InAttitude = std::move(InAttitude);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetTeamScoreTypes
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InScoreTypeTable                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetTeamScoreTypes(const struct FLuaValue& InScoreTypeTable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetTeamScoreTypes");

	Params::GBLuaGameModePackage_SetTeamScoreTypes Parms{};

	Parms.InScoreTypeTable = std::move(InScoreTypeTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SetWatchMode
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InWatchMode                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDisplayBearing                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDisplayDistance                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDisplayUpDown                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMeasure2D                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SetWatchMode(const struct FLuaValue& InWatchMode, const struct FLuaValue& InDisplayBearing, const struct FLuaValue& InDisplayDistance, const struct FLuaValue& InDisplayUpDown, const struct FLuaValue& InMeasure2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SetWatchMode");

	Params::GBLuaGameModePackage_SetWatchMode Parms{};

	Parms.InWatchMode = std::move(InWatchMode);
	Parms.InDisplayBearing = std::move(InDisplayBearing);
	Parms.InDisplayDistance = std::move(InDisplayDistance);
	Parms.InDisplayUpDown = std::move(InDisplayUpDown);
	Parms.InMeasure2D = std::move(InMeasure2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.SpawnEffectAtLocation
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InEffectClass                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::SpawnEffectAtLocation(const struct FLuaValue& InEffectClass, const struct FLuaValue& InLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "SpawnEffectAtLocation");

	Params::GBLuaGameModePackage_SpawnEffectAtLocation Parms{};

	Parms.InEffectClass = std::move(InEffectClass);
	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.StartBenchmark
// (Final, Native, Protected, Const)

void UGBLuaGameModePackage::StartBenchmark() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "StartBenchmark");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameModePackage.UnFreezeBots
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTeamId                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameModePackage::UnFreezeBots(const struct FLuaValue& InTeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameModePackage", "UnFreezeBots");

	Params::GBLuaGameModePackage_UnFreezeBots Parms{};

	Parms.InTeamId = std::move(InTeamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.DisplayDebugLine
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InStartLocation                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InEndLocation                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameplayStaticsPackage::DisplayDebugLine(const struct FLuaValue& InStartLocation, const struct FLuaValue& InEndLocation, const struct FLuaValue& InDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "DisplayDebugLine");

	Params::GBLuaGameplayStaticsPackage_DisplayDebugLine Parms{};

	Parms.InStartLocation = std::move(InStartLocation);
	Parms.InEndLocation = std::move(InEndLocation);
	Parms.InDuration = std::move(InDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.DisplayDebugSphere
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InRadius                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaGameplayStaticsPackage::DisplayDebugSphere(const struct FLuaValue& InLocation, const struct FLuaValue& InRadius, const struct FLuaValue& InDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "DisplayDebugSphere");

	Params::GBLuaGameplayStaticsPackage_DisplayDebugSphere Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRadius = std::move(InRadius);
	Parms.InDuration = std::move(InDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.GetAllActorsOfClass
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActorClass                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::GetAllActorsOfClass(const struct FLuaValue& InActorClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "GetAllActorsOfClass");

	Params::GBLuaGameplayStaticsPackage_GetAllActorsOfClass Parms{};

	Parms.InActorClass = std::move(InActorClass);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.GetAllActorsOfClassWithTag
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InActorClass                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::GetAllActorsOfClassWithTag(const struct FLuaValue& InActorClass, const struct FLuaValue& InTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "GetAllActorsOfClassWithTag");

	Params::GBLuaGameplayStaticsPackage_GetAllActorsOfClassWithTag Parms{};

	Parms.InActorClass = std::move(InActorClass);
	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.GetAllActorsWithTag
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::GetAllActorsWithTag(const struct FLuaValue& InTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "GetAllActorsWithTag");

	Params::GBLuaGameplayStaticsPackage_GetAllActorsWithTag Parms{};

	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.GetNetMode
// (Final, Native, Public, Const)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::GetNetMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "GetNetMode");

	Params::GBLuaGameplayStaticsPackage_GetNetMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.GetPatrolRouteLinkedActors
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InPatrolRouteActor                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::GetPatrolRouteLinkedActors(const struct FLuaValue& InPatrolRouteActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "GetPatrolRouteLinkedActors");

	Params::GBLuaGameplayStaticsPackage_GetPatrolRouteLinkedActors Parms{};

	Parms.InPatrolRouteActor = std::move(InPatrolRouteActor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.GetValidatedSpawnLocation
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InSpawnLocation                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InCapsuleHalfHeight                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InCapsuleRadius                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::GetValidatedSpawnLocation(const struct FLuaValue& InSpawnLocation, const struct FLuaValue& InCapsuleHalfHeight, const struct FLuaValue& InCapsuleRadius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "GetValidatedSpawnLocation");

	Params::GBLuaGameplayStaticsPackage_GetValidatedSpawnLocation Parms{};

	Parms.InSpawnLocation = std::move(InSpawnLocation);
	Parms.InCapsuleHalfHeight = std::move(InCapsuleHalfHeight);
	Parms.InCapsuleRadius = std::move(InCapsuleRadius);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.PlaceItemAt
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InItemClass                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InRotation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::PlaceItemAt(const struct FLuaValue& InItemClass, const struct FLuaValue& InLocation, const struct FLuaValue& InRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "PlaceItemAt");

	Params::GBLuaGameplayStaticsPackage_PlaceItemAt Parms{};

	Parms.InItemClass = std::move(InItemClass);
	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaGameplayStaticsPackage.TraceVisible
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InStartLocation                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InEndLocation                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InIgnoreActors                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDebug                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaGameplayStaticsPackage::TraceVisible(const struct FLuaValue& InStartLocation, const struct FLuaValue& InEndLocation, const struct FLuaValue& InIgnoreActors, const struct FLuaValue& InDebug) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaGameplayStaticsPackage", "TraceVisible");

	Params::GBLuaGameplayStaticsPackage_TraceVisible Parms{};

	Parms.InStartLocation = std::move(InStartLocation);
	Parms.InEndLocation = std::move(InEndLocation);
	Parms.InIgnoreActors = std::move(InIgnoreActors);
	Parms.InDebug = std::move(InDebug);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaInterface.GetLuaTable
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue IGBLuaInterface::GetLuaTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBLuaInterface", "GetLuaTable");

	Params::GBLuaInterface_GetLuaTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaInventoryPackage.AddCustomKitTableToLoadoutTable
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FLuaValue*                       InCustomKitTable                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FLuaValue*                       InLoadoutTable                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void UGBLuaInventoryPackage::AddCustomKitTableToLoadoutTable(struct FLuaValue* InCustomKitTable, struct FLuaValue* InLoadoutTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "AddCustomKitTableToLoadoutTable");

	Params::GBLuaInventoryPackage_AddCustomKitTableToLoadoutTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InCustomKitTable != nullptr)
		*InCustomKitTable = std::move(Parms.InCustomKitTable);

	if (InLoadoutTable != nullptr)
		*InLoadoutTable = std::move(Parms.InLoadoutTable);
}


// Function GroundBranch.GBLuaInventoryPackage.CreateLoadoutFromTable
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLoadoutName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLoadoutTable                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSplitItemField                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaInventoryPackage::CreateLoadoutFromTable(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InLoadoutName, const struct FLuaValue& InLoadoutTable, const struct FLuaValue& InSplitItemField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "CreateLoadoutFromTable");

	Params::GBLuaInventoryPackage_CreateLoadoutFromTable Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InLoadoutName = std::move(InLoadoutName);
	Parms.InLoadoutTable = std::move(InLoadoutTable);
	Parms.InSplitItemField = std::move(InSplitItemField);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaInventoryPackage.GetPlayerLoadoutAsTable
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 LoadoutName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSplitItemField                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaInventoryPackage::GetPlayerLoadoutAsTable(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& LoadoutName, const struct FLuaValue& InSplitItemField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "GetPlayerLoadoutAsTable");

	Params::GBLuaInventoryPackage_GetPlayerLoadoutAsTable Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.LoadoutName = std::move(LoadoutName);
	Parms.InSplitItemField = std::move(InSplitItemField);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaInventoryPackage.RemoveItemTypesFromLoadoutTable
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InItemTypesToRemove                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue*                       InLoadoutTable                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FLuaValue*                       InSplitItemField                                       (Parm, OutParm, NativeAccessSpecifierPublic)

void UGBLuaInventoryPackage::RemoveItemTypesFromLoadoutTable(const struct FLuaValue& InItemTypesToRemove, struct FLuaValue* InLoadoutTable, struct FLuaValue* InSplitItemField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "RemoveItemTypesFromLoadoutTable");

	Params::GBLuaInventoryPackage_RemoveItemTypesFromLoadoutTable Parms{};

	Parms.InItemTypesToRemove = std::move(InItemTypesToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InLoadoutTable != nullptr)
		*InLoadoutTable = std::move(Parms.InLoadoutTable);

	if (InSplitItemField != nullptr)
		*InSplitItemField = std::move(Parms.InSplitItemField);
}


// Function GroundBranch.GBLuaInventoryPackage.SetItemFieldFromTable
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 LoadoutReferenceObject                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 ItemType                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 NewItemData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaInventoryPackage::SetItemFieldFromTable(const struct FLuaValue& LoadoutReferenceObject, const struct FLuaValue& ItemType, const struct FLuaValue& NewItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "SetItemFieldFromTable");

	Params::GBLuaInventoryPackage_SetItemFieldFromTable Parms{};

	Parms.LoadoutReferenceObject = std::move(LoadoutReferenceObject);
	Parms.ItemType = std::move(ItemType);
	Parms.NewItemData = std::move(NewItemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaInventoryPackage.VerifyLoadoutExists
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLoadoutName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaInventoryPackage::VerifyLoadoutExists(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InLoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "VerifyLoadoutExists");

	Params::GBLuaInventoryPackage_VerifyLoadoutExists Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InLoadoutName = std::move(InLoadoutName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaInventoryPackage.ClearItemField
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InKitJsonObj                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InItemType                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaInventoryPackage::ClearItemField(const struct FLuaValue& InKitJsonObj, const struct FLuaValue& InItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "ClearItemField");

	Params::GBLuaInventoryPackage_ClearItemField Parms{};

	Parms.InKitJsonObj = std::move(InKitJsonObj);
	Parms.InItemType = std::move(InItemType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaInventoryPackage.GetCustomKitAsTable
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InKitFileName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSplitItemField                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaInventoryPackage::GetCustomKitAsTable(const struct FLuaValue& InKitFileName, const struct FLuaValue& InSplitItemField) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "GetCustomKitAsTable");

	Params::GBLuaInventoryPackage_GetCustomKitAsTable Parms{};

	Parms.InKitFileName = std::move(InKitFileName);
	Parms.InSplitItemField = std::move(InSplitItemField);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaInventoryPackage.GetItemDisplayName
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InItemType                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InItemAssetPath                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaInventoryPackage::GetItemDisplayName(const struct FLuaValue& InItemType, const struct FLuaValue& InItemAssetPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "GetItemDisplayName");

	Params::GBLuaInventoryPackage_GetItemDisplayName Parms{};

	Parms.InItemType = std::move(InItemType);
	Parms.InItemAssetPath = std::move(InItemAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaInventoryPackage.LimitSupplies
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InKitJsonObj                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFragsLimit                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InSmokesLimit                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFlashbangsLimit                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InBreachChargeLimit                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaInventoryPackage::LimitSupplies(const struct FLuaValue& InKitJsonObj, const struct FLuaValue& InFragsLimit, const struct FLuaValue& InSmokesLimit, const struct FLuaValue& InFlashbangsLimit, const struct FLuaValue& InBreachChargeLimit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaInventoryPackage", "LimitSupplies");

	Params::GBLuaInventoryPackage_LimitSupplies Parms{};

	Parms.InKitJsonObj = std::move(InKitJsonObj);
	Parms.InFragsLimit = std::move(InFragsLimit);
	Parms.InSmokesLimit = std::move(InSmokesLimit);
	Parms.InFlashbangsLimit = std::move(InFlashbangsLimit);
	Parms.InBreachChargeLimit = std::move(InBreachChargeLimit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.AddIgnoreUseInputReason
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::AddIgnoreUseInputReason(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "AddIgnoreUseInputReason");

	Params::GBLuaPlayerPackage_AddIgnoreUseInputReason Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.AwardPlayerScore
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObjectState                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InScoreName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InScoreMultiple                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::AwardPlayerScore(const struct FLuaValue& InPlayerIdOrObjectState, const struct FLuaValue& InScoreName, const struct FLuaValue& InScoreMultiple)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "AwardPlayerScore");

	Params::GBLuaPlayerPackage_AwardPlayerScore Parms{};

	Parms.InPlayerIdOrObjectState = std::move(InPlayerIdOrObjectState);
	Parms.InScoreName = std::move(InScoreName);
	Parms.InScoreMultiple = std::move(InScoreMultiple);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.Damage
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDamageAmount                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDamageType                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::Damage(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InDamageAmount, const struct FLuaValue& InDamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "Damage");

	Params::GBLuaPlayerPackage_Damage Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InDamageAmount = std::move(InDamageAmount);
	Parms.InDamageType = std::move(InDamageType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.FreezePlayer
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::FreezePlayer(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "FreezePlayer");

	Params::GBLuaPlayerPackage_FreezePlayer Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InDuration = std::move(InDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.GetCallSign
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetCallSign(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetCallSign");

	Params::GBLuaPlayerPackage_GetCallSign Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetCharacter
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetCharacter(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetCharacter");

	Params::GBLuaPlayerPackage_GetCharacter Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetInsertionPoint
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetInsertionPoint(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetInsertionPoint");

	Params::GBLuaPlayerPackage_GetInsertionPoint Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetInventory
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetInventory(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetInventory");

	Params::GBLuaPlayerPackage_GetInventory Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetLives
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetLives(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetLives");

	Params::GBLuaPlayerPackage_GetLives Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetName
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetName(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetName");

	Params::GBLuaPlayerPackage_GetName Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetPlayerStat
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetPlayerStat(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetPlayerStat");

	Params::GBLuaPlayerPackage_GetPlayerStat Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetReadyStatus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetReadyStatus(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetReadyStatus");

	Params::GBLuaPlayerPackage_GetReadyStatus Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetVolunteerStatus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetVolunteerStatus(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetVolunteerStatus");

	Params::GBLuaPlayerPackage_GetVolunteerStatus Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GiveItem
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InItemClass                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InEquip                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GiveItem(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InItemClass, const struct FLuaValue& InEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GiveItem");

	Params::GBLuaPlayerPackage_GiveItem Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InItemClass = std::move(InItemClass);
	Parms.InEquip = std::move(InEquip);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.HasGameplayTag
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTagName                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::HasGameplayTag(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "HasGameplayTag");

	Params::GBLuaPlayerPackage_HasGameplayTag Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InTagName = std::move(InTagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.HasItemWithTag
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::HasItemWithTag(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "HasItemWithTag");

	Params::GBLuaPlayerPackage_HasItemWithTag Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.IsABot
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::IsABot(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "IsABot");

	Params::GBLuaPlayerPackage_IsABot Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.IsAlive
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::IsAlive(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "IsAlive");

	Params::GBLuaPlayerPackage_IsAlive Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.Kill
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::Kill(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "Kill");

	Params::GBLuaPlayerPackage_Kill Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.NotifyObjectiveStatusUpdate
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMissionObjectiveActor                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InStatusUpdateType                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFloatParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::NotifyObjectiveStatusUpdate(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InMissionObjectiveActor, const struct FLuaValue& InStatusUpdateType, const struct FLuaValue& InFloatParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "NotifyObjectiveStatusUpdate");

	Params::GBLuaPlayerPackage_NotifyObjectiveStatusUpdate Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InMissionObjectiveActor = std::move(InMissionObjectiveActor);
	Parms.InStatusUpdateType = std::move(InStatusUpdateType);
	Parms.InFloatParam = std::move(InFloatParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.RemoveIgnoreUseInputReason
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::RemoveIgnoreUseInputReason(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "RemoveIgnoreUseInputReason");

	Params::GBLuaPlayerPackage_RemoveIgnoreUseInputReason Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.ResetPlayerScores
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::ResetPlayerScores(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "ResetPlayerScores");

	Params::GBLuaPlayerPackage_ResetPlayerScores Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.SetAllowedToRestart
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InAllowed                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::SetAllowedToRestart(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "SetAllowedToRestart");

	Params::GBLuaPlayerPackage_SetAllowedToRestart Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InAllowed = std::move(InAllowed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.SetInsertionPoint
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewInsertionPoint                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::SetInsertionPoint(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InNewInsertionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "SetInsertionPoint");

	Params::GBLuaPlayerPackage_SetInsertionPoint Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InNewInsertionPoint = std::move(InNewInsertionPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.SetLives
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewLives                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::SetLives(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InNewLives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "SetLives");

	Params::GBLuaPlayerPackage_SetLives Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InNewLives = std::move(InNewLives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.SetReadyStatus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InNewStatus                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::SetReadyStatus(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InNewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "SetReadyStatus");

	Params::GBLuaPlayerPackage_SetReadyStatus Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InNewStatus = std::move(InNewStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.SetVolunteerStatus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InVolunteered                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::SetVolunteerStatus(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InVolunteered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "SetVolunteerStatus");

	Params::GBLuaPlayerPackage_SetVolunteerStatus Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InVolunteered = std::move(InVolunteered);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.ShowGameMessage
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InMessage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InType                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::ShowGameMessage(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InMessage, const struct FLuaValue& InType, const struct FLuaValue& InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "ShowGameMessage");

	Params::GBLuaPlayerPackage_ShowGameMessage Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InMessage = std::move(InMessage);
	Parms.InType = std::move(InType);
	Parms.InDuration = std::move(InDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.ShowHint
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InHintName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InWidgetName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::ShowHint(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InHintName, const struct FLuaValue& InWidgetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "ShowHint");

	Params::GBLuaPlayerPackage_ShowHint Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InHintName = std::move(InHintName);
	Parms.InWidgetName = std::move(InWidgetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.ShowWorldPrompt
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InDuration                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::ShowWorldPrompt(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InLocation, const struct FLuaValue& InTag, const struct FLuaValue& InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "ShowWorldPrompt");

	Params::GBLuaPlayerPackage_ShowWorldPrompt Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InLocation = std::move(InLocation);
	Parms.InTag = std::move(InTag);
	Parms.InDuration = std::move(InDuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.SpawnEffectAtPlayer
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InEffectClass                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::SpawnEffectAtPlayer(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InEffectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "SpawnEffectAtPlayer");

	Params::GBLuaPlayerPackage_SpawnEffectAtPlayer Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InEffectClass = std::move(InEffectClass);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.Teleport
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLocation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InRotation                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaPlayerPackage::Teleport(const struct FLuaValue& InPlayerIdOrObject, const struct FLuaValue& InLocation, const struct FLuaValue& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "Teleport");

	Params::GBLuaPlayerPackage_Teleport Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);
	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaPlayerPackage.ValidatePlayer
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::ValidatePlayer(const struct FLuaValue& InPlayerIdOrObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "ValidatePlayer");

	Params::GBLuaPlayerPackage_ValidatePlayer Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.CheckCallSignProfanity
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InCallSign                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::CheckCallSignProfanity(const struct FLuaValue& InCallSign) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "CheckCallSignProfanity");

	Params::GBLuaPlayerPackage_CheckCallSignProfanity Parms{};

	Parms.InCallSign = std::move(InCallSign);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaPlayerPackage.GetPlayerState
// (Final, Native, Protected, HasOutParams, Const)
// Parameters:
// const struct FLuaValue&                 InPlayerIdOrObject                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue UGBLuaPlayerPackage::GetPlayerState(const struct FLuaValue& InPlayerIdOrObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaPlayerPackage", "GetPlayerState");

	Params::GBLuaPlayerPackage_GetPlayerState Parms{};

	Parms.InPlayerIdOrObject = std::move(InPlayerIdOrObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBLuaTimerPackage.ClearAll
// (Final, Native, Public)

void UGBLuaTimerPackage::ClearAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaTimerPackage", "ClearAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaTimerPackage.ClearTimer
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InTimerHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaTimerPackage::ClearTimer(const struct FLuaValue& InTimerHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaTimerPackage", "ClearTimer");

	Params::GBLuaTimerPackage_ClearTimer Parms{};

	Parms.InTimerHandle = std::move(InTimerHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBLuaTimerPackage.SetTimer
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FLuaValue&                 InTimerHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InTable                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InFunction                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InRate                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLuaValue&                 InLoop                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGBLuaTimerPackage::SetTimer(const struct FLuaValue& InTimerHandle, const struct FLuaValue& InTable, const struct FLuaValue& InFunction, const struct FLuaValue& InRate, const struct FLuaValue& InLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBLuaTimerPackage", "SetTimer");

	Params::GBLuaTimerPackage_SetTimer Parms{};

	Parms.InTimerHandle = std::move(InTimerHandle);
	Parms.InTable = std::move(InTable);
	Parms.InFunction = std::move(InFunction);
	Parms.InRate = std::move(InRate);
	Parms.InLoop = std::move(InLoop);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMagazine.AdjustCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMagazine::AdjustCount(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "AdjustCount");

	Params::GBMagazine_AdjustCount Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMagazine.OnBulletIdUpdated
// (Final, Native, Protected)

void AGBMagazine::OnBulletIdUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "OnBulletIdUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMagazine.OnRep_Count
// (Final, Native, Protected)

void AGBMagazine::OnRep_Count()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "OnRep_Count");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMagazine.SetBulletId
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetId&           NewBulletId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMagazine::SetBulletId(const struct FPrimaryAssetId& NewBulletId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "SetBulletId");

	Params::GBMagazine_SetBulletId Parms{};

	Parms.NewBulletId = std::move(NewBulletId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMagazine.SetCount
// (Final, Native, Public)
// Parameters:
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMagazine::SetCount(int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "SetCount");

	Params::GBMagazine_SetCount Parms{};

	Parms.NewCount = NewCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMagazine.GetBulletProjectileClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AGBBulletProjectile>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AGBBulletProjectile> AGBMagazine::GetBulletProjectileClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "GetBulletProjectileClass");

	Params::GBMagazine_GetBulletProjectileClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMagazine.GetCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBMagazine::GetCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "GetCapacity");

	Params::GBMagazine_GetCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMagazine.GetCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBMagazine::GetCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "GetCount");

	Params::GBMagazine_GetCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMagazine.GetTraceColourIndexForRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AGBMagazine::GetTraceColourIndexForRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMagazine", "GetTraceColourIndexForRound");

	Params::GBMagazine_GetTraceColourIndexForRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMinimap.GetApplicableMissionVariantNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> AGBMinimap::GetApplicableMissionVariantNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMinimap", "GetApplicableMissionVariantNames");

	Params::GBMinimap_GetApplicableMissionVariantNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetCampaignHotspotBriefingToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBMissionData::GetCampaignHotspotBriefingToken(const class FName InHotspotCodename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetCampaignHotspotBriefingToken");

	Params::GBMissionData_GetCampaignHotspotBriefingToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetCampaignMissionBriefingToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BriefingField                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBMissionData::GetCampaignMissionBriefingToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& BriefingField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetCampaignMissionBriefingToken");

	Params::GBMissionData_GetCampaignMissionBriefingToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.BriefingField = std::move(BriefingField);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetCampaignMissionNameToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBMissionData::GetCampaignMissionNameToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetCampaignMissionNameToken");

	Params::GBMissionData_GetCampaignMissionNameToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetCampaignMissionTypeToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBMissionData::GetCampaignMissionTypeToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetCampaignMissionTypeToken");

	Params::GBMissionData_GetCampaignMissionTypeToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetCampaignObjectiveNameToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InMissionTitle                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBMissionData::GetCampaignObjectiveNameToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& InMissionTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetCampaignObjectiveNameToken");

	Params::GBMissionData_GetCampaignObjectiveNameToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.InMissionTitle = std::move(InMissionTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetMissionSaveAsFilename
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InVariantName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InScriptName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBMissionData::GetMissionSaveAsFilename(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& InVariantName, const class FString& InScriptName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetMissionSaveAsFilename");

	Params::GBMissionData_GetMissionSaveAsFilename Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.InVariantName = std::move(InVariantName);
	Parms.InScriptName = std::move(InScriptName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetObjectiveDataFromMissionFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MissionFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIncludeHiddenObjectives                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBObjectiveData                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBObjectiveData UGBMissionData::GetObjectiveDataFromMissionFile(class UObject* WorldContextObject, const class FString& MissionFileName, const bool bIncludeHiddenObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionData", "GetObjectiveDataFromMissionFile");

	Params::GBMissionData_GetObjectiveDataFromMissionFile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MissionFileName = std::move(MissionFileName);
	Parms.bIncludeHiddenObjectives = bIncludeHiddenObjectives;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.AddAILoadout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LoadoutFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGBMissionData::AddAILoadout(const class UObject* WorldContextObject, const class FString& LoadoutFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionData", "AddAILoadout");

	Params::GBMissionData_AddAILoadout Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadoutFileName = std::move(LoadoutFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.ClearAILoadouts
// (Final, Native, Public, BlueprintCallable)

void UGBMissionData::ClearAILoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionData", "ClearAILoadouts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionData.ClearBotRoster
// (Final, Native, Public, BlueprintCallable)

void UGBMissionData::ClearBotRoster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionData", "ClearBotRoster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionData.CreateLoadoutInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsEditing                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LoadoutFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBKitInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBKitInfo* UGBMissionData::CreateLoadoutInfo(const class UObject* WorldContextObject, const bool bIsEditing, const class FString& LoadoutFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionData", "CreateLoadoutInfo");

	Params::GBMissionData_CreateLoadoutInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bIsEditing = bIsEditing;
	Parms.LoadoutFileName = std::move(LoadoutFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.GetBotDefs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGBMissionData::GetBotDefs(uint8 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionData", "GetBotDefs");

	Params::GBMissionData_GetBotDefs Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionData.SetBotDefs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            NewDefs                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGBMissionData::SetBotDefs(uint8 TeamId, const TArray<class FString>& NewDefs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionData", "SetBotDefs");

	Params::GBMissionData_SetBotDefs Parms{};

	Parms.TeamId = TeamId;
	Parms.NewDefs = std::move(NewDefs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveCompleteGenericToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       ObjectiveType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveCompleteGenericToken(const class FName ObjectiveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveCompleteGenericToken");

	Params::GBMissionObjective_GetObjectiveCompleteGenericToken Parms{};

	Parms.ObjectiveType = ObjectiveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveCompleteSpecificToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InMissionTitle                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveCompleteSpecificToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& InMissionTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveCompleteSpecificToken");

	Params::GBMissionObjective_GetObjectiveCompleteSpecificToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.InMissionTitle = std::move(InMissionTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveFailedGenericToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       ObjectiveType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveFailedGenericToken(const class FName ObjectiveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveFailedGenericToken");

	Params::GBMissionObjective_GetObjectiveFailedGenericToken Parms{};

	Parms.ObjectiveType = ObjectiveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveFailedSpecificToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InMissionTitle                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveFailedSpecificToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& InMissionTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveFailedSpecificToken");

	Params::GBMissionObjective_GetObjectiveFailedSpecificToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.InMissionTitle = std::move(InMissionTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveSubObjectiveCompleteGenericToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       ObjectiveType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveSubObjectiveCompleteGenericToken(const class FName ObjectiveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveSubObjectiveCompleteGenericToken");

	Params::GBMissionObjective_GetObjectiveSubObjectiveCompleteGenericToken Parms{};

	Parms.ObjectiveType = ObjectiveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveSubObjectiveCompleteSpecificToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InMissionTitle                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveSubObjectiveCompleteSpecificToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& InMissionTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveSubObjectiveCompleteSpecificToken");

	Params::GBMissionObjective_GetObjectiveSubObjectiveCompleteSpecificToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.InMissionTitle = std::move(InMissionTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveTimedActionGenericToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       ObjectiveType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveTimedActionGenericToken(const class FName ObjectiveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveTimedActionGenericToken");

	Params::GBMissionObjective_GetObjectiveTimedActionGenericToken Parms{};

	Parms.ObjectiveType = ObjectiveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveTimedActionSpecificToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InHotspotCodename                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InMissionSequenceNumber                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InMissionTitle                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveTimedActionSpecificToken(const class FName InHotspotCodename, const int32 InMissionSequenceNumber, const class FString& InMissionTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetObjectiveTimedActionSpecificToken");

	Params::GBMissionObjective_GetObjectiveTimedActionSpecificToken Parms{};

	Parms.InHotspotCodename = InHotspotCodename;
	Parms.InMissionSequenceNumber = InMissionSequenceNumber;
	Parms.InMissionTitle = std::move(InMissionTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetSortedMissionObjectiveInfoSimple
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBCampaignMissionObjectiveInfo>&InAllObjectiveInfoList                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const uint8                             TeamId_0                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGBCampaignMissionObjectiveInfo>*OutPrimaryList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FGBCampaignMissionObjectiveInfo>*OutSecondaryList                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGBMissionObjective::GetSortedMissionObjectiveInfoSimple(const TArray<struct FGBCampaignMissionObjectiveInfo>& InAllObjectiveInfoList, const uint8 TeamId_0, TArray<struct FGBCampaignMissionObjectiveInfo>* OutPrimaryList, TArray<struct FGBCampaignMissionObjectiveInfo>* OutSecondaryList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetSortedMissionObjectiveInfoSimple");

	Params::GBMissionObjective_GetSortedMissionObjectiveInfoSimple Parms{};

	Parms.InAllObjectiveInfoList = std::move(InAllObjectiveInfoList);
	Parms.TeamId_0 = TeamId_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrimaryList != nullptr)
		*OutPrimaryList = std::move(Parms.OutPrimaryList);

	if (OutSecondaryList != nullptr)
		*OutSecondaryList = std::move(Parms.OutSecondaryList);
}


// Function GroundBranch.GBMissionObjective.GetSortedMissionObjectives
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class AGBMissionObjective*>&InAllObjectivesList                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const uint8                             TeamId_0                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutInactiveList                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutActiveList                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutPartiallyCompleteList                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutFailedList                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutCompletedList                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGBMissionObjective::GetSortedMissionObjectives(const TArray<class AGBMissionObjective*>& InAllObjectivesList, const uint8 TeamId_0, TArray<class AGBMissionObjective*>* OutInactiveList, TArray<class AGBMissionObjective*>* OutActiveList, TArray<class AGBMissionObjective*>* OutPartiallyCompleteList, TArray<class AGBMissionObjective*>* OutFailedList, TArray<class AGBMissionObjective*>* OutCompletedList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetSortedMissionObjectives");

	Params::GBMissionObjective_GetSortedMissionObjectives Parms{};

	Parms.InAllObjectivesList = std::move(InAllObjectivesList);
	Parms.TeamId_0 = TeamId_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInactiveList != nullptr)
		*OutInactiveList = std::move(Parms.OutInactiveList);

	if (OutActiveList != nullptr)
		*OutActiveList = std::move(Parms.OutActiveList);

	if (OutPartiallyCompleteList != nullptr)
		*OutPartiallyCompleteList = std::move(Parms.OutPartiallyCompleteList);

	if (OutFailedList != nullptr)
		*OutFailedList = std::move(Parms.OutFailedList);

	if (OutCompletedList != nullptr)
		*OutCompletedList = std::move(Parms.OutCompletedList);
}


// Function GroundBranch.GBMissionObjective.GetSortedMissionObjectivesSimple
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class AGBMissionObjective*>&InAllObjectivesList                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const uint8                             TeamId_0                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutPrimaryList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AGBMissionObjective*>*     OutSecondaryList                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AGBMissionObjective::GetSortedMissionObjectivesSimple(const TArray<class AGBMissionObjective*>& InAllObjectivesList, const uint8 TeamId_0, TArray<class AGBMissionObjective*>* OutPrimaryList, TArray<class AGBMissionObjective*>* OutSecondaryList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBMissionObjective", "GetSortedMissionObjectivesSimple");

	Params::GBMissionObjective_GetSortedMissionObjectivesSimple Parms{};

	Parms.InAllObjectivesList = std::move(InAllObjectivesList);
	Parms.TeamId_0 = TeamId_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrimaryList != nullptr)
		*OutPrimaryList = std::move(Parms.OutPrimaryList);

	if (OutSecondaryList != nullptr)
		*OutSecondaryList = std::move(Parms.OutSecondaryList);
}


// Function GroundBranch.GBMissionObjective.GetObjectiveScriptTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLuaValue                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLuaValue AGBMissionObjective::GetObjectiveScriptTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetObjectiveScriptTable");

	Params::GBMissionObjective_GetObjectiveScriptTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.OnObjectiveStatusChanged
// (Final, Native, Protected)
// Parameters:
// class AGBMissionObjective*              MissionObjective                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMissionObjective::OnObjectiveStatusChanged(class AGBMissionObjective* MissionObjective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "OnObjectiveStatusChanged");

	Params::GBMissionObjective_OnObjectiveStatusChanged Parms{};

	Parms.MissionObjective = MissionObjective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.OnRep_MissionObjectiveStatus
// (Final, Native, Private)

void AGBMissionObjective::OnRep_MissionObjectiveStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "OnRep_MissionObjectiveStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.OnSearchReportedInVolume
// (Final, Native, Protected)
// Parameters:
// class AGBGameTrigger*                   GameTrigger                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBSearchableProp*                SearchedActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMissionObjective::OnSearchReportedInVolume(class AGBGameTrigger* GameTrigger, class AGBSearchableProp* SearchedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "OnSearchReportedInVolume");

	Params::GBMissionObjective_OnSearchReportedInVolume Parms{};

	Parms.GameTrigger = GameTrigger;
	Parms.SearchedActor = SearchedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.ReloadObjectiveScriptData
// (Final, Native, Protected, BlueprintCallable)

void AGBMissionObjective::ReloadObjectiveScriptData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "ReloadObjectiveScriptData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.ResetObjectiveStatus
// (Final, Native, Protected, BlueprintCallable)

void AGBMissionObjective::ResetObjectiveStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "ResetObjectiveStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.SetGenericBool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewGenericBool                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMissionObjective::SetGenericBool(const bool bNewGenericBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "SetGenericBool");

	Params::GBMissionObjective_SetGenericBool Parms{};

	Parms.bNewGenericBool = bNewGenericBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.SetGenericBool2
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewGenericBool2                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMissionObjective::SetGenericBool2(const bool bNewGenericBool2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "SetGenericBool2");

	Params::GBMissionObjective_SetGenericBool2 Parms{};

	Parms.bNewGenericBool2 = bNewGenericBool2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.SetLinkedActorList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<TSoftObjectPtr<class AActor>>&NewLinkedActorList                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void AGBMissionObjective::SetLinkedActorList(const TArray<TSoftObjectPtr<class AActor>>& NewLinkedActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "SetLinkedActorList");

	Params::GBMissionObjective_SetLinkedActorList Parms{};

	Parms.NewLinkedActorList = std::move(NewLinkedActorList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.SetMissionObjectiveStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EGBMissionObjectiveStatus         NewMissionObjectiveStatus                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMissionObjective::SetMissionObjectiveStatus(const EGBMissionObjectiveStatus NewMissionObjectiveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "SetMissionObjectiveStatus");

	Params::GBMissionObjective_SetMissionObjectiveStatus Parms{};

	Parms.NewMissionObjectiveStatus = NewMissionObjectiveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.SetObjectiveType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    NewObjectiveScriptFilename                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBMissionObjective::SetObjectiveType(const class FString& NewObjectiveScriptFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "SetObjectiveType");

	Params::GBMissionObjective_SetObjectiveType Parms{};

	Parms.NewObjectiveScriptFilename = std::move(NewObjectiveScriptFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.SetPrerequisiteObjectives
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<TSoftObjectPtr<class AActor>>&NewPrerequisiteObjectives                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void AGBMissionObjective::SetPrerequisiteObjectives(const TArray<TSoftObjectPtr<class AActor>>& NewPrerequisiteObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "SetPrerequisiteObjectives");

	Params::GBMissionObjective_SetPrerequisiteObjectives Parms{};

	Parms.NewPrerequisiteObjectives = std::move(NewPrerequisiteObjectives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBMissionObjective.WaitingOnPrerequisiteObjectives
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::WaitingOnPrerequisiteObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "WaitingOnPrerequisiteObjectives");

	Params::GBMissionObjective_WaitingOnPrerequisiteObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetBestMissionStatusUpdateToken
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBMissionObjective::GetBestMissionStatusUpdateToken() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetBestMissionStatusUpdateToken");

	Params::GBMissionObjective_GetBestMissionStatusUpdateToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetBoolDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetBoolDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetBoolDescription");

	Params::GBMissionObjective_GetBoolDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetBoolDescription2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetBoolDescription2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetBoolDescription2");

	Params::GBMissionObjective_GetBoolDescription2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetDontLinkToSelf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetDontLinkToSelf() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetDontLinkToSelf");

	Params::GBMissionObjective_GetDontLinkToSelf Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetGenericBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetGenericBool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetGenericBool");

	Params::GBMissionObjective_GetGenericBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetGenericBool2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetGenericBool2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetGenericBool2");

	Params::GBMissionObjective_GetGenericBool2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetIsHiddenObjective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetIsHiddenObjective() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetIsHiddenObjective");

	Params::GBMissionObjective_GetIsHiddenObjective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetIsPrimaryObjective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetIsPrimaryObjective() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetIsPrimaryObjective");

	Params::GBMissionObjective_GetIsPrimaryObjective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetLinkedActorClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AActor>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AActor> AGBMissionObjective::GetLinkedActorClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetLinkedActorClass");

	Params::GBMissionObjective_GetLinkedActorClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetLinkedActorDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetLinkedActorDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetLinkedActorDescription");

	Params::GBMissionObjective_GetLinkedActorDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetLinkedActorList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<TSoftObjectPtr<class AActor>>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSoftObjectPtr<class AActor>> AGBMissionObjective::GetLinkedActorList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetLinkedActorList");

	Params::GBMissionObjective_GetLinkedActorList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetListDisplayPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBMissionObjective::GetListDisplayPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetListDisplayPriority");

	Params::GBMissionObjective_GetListDisplayPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetMissionObjectiveStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGBMissionObjectiveStatus               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGBMissionObjectiveStatus AGBMissionObjective::GetMissionObjectiveStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetMissionObjectiveStatus");

	Params::GBMissionObjective_GetMissionObjectiveStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveScriptFilename
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveScriptFilename() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetObjectiveScriptFilename");

	Params::GBMissionObjective_GetObjectiveScriptFilename Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveTitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBMissionObjective::GetObjectiveTitle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetObjectiveTitle");

	Params::GBMissionObjective_GetObjectiveTitle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetObjectiveType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBMissionObjective::GetObjectiveType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetObjectiveType");

	Params::GBMissionObjective_GetObjectiveType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetPrerequisiteObjectives
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<TSoftObjectPtr<class AActor>>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSoftObjectPtr<class AActor>> AGBMissionObjective::GetPrerequisiteObjectives() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetPrerequisiteObjectives");

	Params::GBMissionObjective_GetPrerequisiteObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetUseBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetUseBool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetUseBool");

	Params::GBMissionObjective_GetUseBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetUseBool2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetUseBool2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetUseBool2");

	Params::GBMissionObjective_GetUseBool2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetUseLinkedActorList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetUseLinkedActorList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetUseLinkedActorList");

	Params::GBMissionObjective_GetUseLinkedActorList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetUseOnlyMissionActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetUseOnlyMissionActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetUseOnlyMissionActors");

	Params::GBMissionObjective_GetUseOnlyMissionActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBMissionObjective.GetUseSingleLinkedActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBMissionObjective::GetUseSingleLinkedActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBMissionObjective", "GetUseSingleLinkedActor");

	Params::GBMissionObjective_GetUseSingleLinkedActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBNavBlocker.OnActiveStateChangedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bNewActive                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBNavBlocker::OnActiveStateChangedEvent(const bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBNavBlocker", "OnActiveStateChangedEvent");

	Params::GBNavBlocker_OnActiveStateChangedEvent Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBNavLinkProxy_Ladder.GetLadderRef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AGBNavLinkProxy_Ladder::GetLadderRef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBNavLinkProxy_Ladder", "GetLadderRef");

	Params::GBNavLinkProxy_Ladder_GetLadderRef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBOperatorDataAsset.MakeUniqueId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FirstName_0                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Surname_0                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGBOperatorDataAsset::MakeUniqueId(const class FString& FirstName_0, const class FString& Surname_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBOperatorDataAsset", "MakeUniqueId");

	Params::GBOperatorDataAsset_MakeUniqueId Parms{};

	Parms.FirstName_0 = std::move(FirstName_0);
	Parms.Surname_0 = std::move(Surname_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBOperatorDataAsset.GetOperatorDetails
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGBOperatorDetails               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBOperatorDetails UGBOperatorDataAsset::GetOperatorDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBOperatorDataAsset", "GetOperatorDetails");

	Params::GBOperatorDataAsset_GetOperatorDetails Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBOperatorDataAsset.GetUniqueCodename
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBOperatorDataAsset::GetUniqueCodename() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBOperatorDataAsset", "GetUniqueCodename");

	Params::GBOperatorDataAsset_GetUniqueCodename Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPatch.ApplyPatch
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void AGBPatch::ApplyPatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPatch", "ApplyPatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPatch.OnLoadPatchTintsComplete
// (Final, Native, Protected)

void AGBPatch::OnLoadPatchTintsComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPatch", "OnLoadPatchTintsComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPatch.OnPlayerStateDelegate
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPatch::OnPlayerStateDelegate(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPatch", "OnPlayerStateDelegate");

	Params::GBPatch_OnPlayerStateDelegate Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPatch.OnRep_PatchInfo
// (Final, Native, Protected)

void AGBPatch::OnRep_PatchInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPatch", "OnRep_PatchInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPatchGeneratorWidget.SetCallSignEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    NewCallSign                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPatchGeneratorWidget::SetCallSignEvent(const class FString& NewCallSign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPatchGeneratorWidget", "SetCallSignEvent");

	Params::GBPatchGeneratorWidget_SetCallSignEvent Parms{};

	Parms.NewCallSign = std::move(NewCallSign);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBPlatform.OnTakeHit
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      RefBoneName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RefPosPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlatform::OnTakeHit(const class FName& RefBoneName, const struct FVector& RefPosPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlatform", "OnTakeHit");

	Params::GBPlatform_OnTakeHit Parms{};

	Parms.RefBoneName = RefBoneName;
	Parms.RefPosPosition = std::move(RefPosPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerCameraManager.GetCameraStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBPlayerCameraManager::GetCameraStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCameraManager", "GetCameraStyle");

	Params::GBPlayerCameraManager_GetCameraStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerCameraManager.GetViewPitchMax
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerCameraManager::GetViewPitchMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCameraManager", "GetViewPitchMax");

	Params::GBPlayerCameraManager_GetViewPitchMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerCameraManager.GetViewPitchMin
// (Final, Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBPlayerCameraManager::GetViewPitchMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCameraManager", "GetViewPitchMin");

	Params::GBPlayerCameraManager_GetViewPitchMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerCommandComponent.AddWaypoint
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAIGoCodes                              GoCode                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAIMoveCommand                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FAIMoveCommand UGBPlayerCommandComponent::AddWaypoint(const struct FVector& Location, EAIGoCodes GoCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCommandComponent", "AddWaypoint");

	Params::GBPlayerCommandComponent_AddWaypoint Parms{};

	Parms.Location = std::move(Location);
	Parms.GoCode = GoCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPlayerCommandComponent.ChangeROE
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EAIRulesEngage                          NewROE                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerCommandComponent::ChangeROE(EAIRulesEngage NewROE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCommandComponent", "ChangeROE");

	Params::GBPlayerCommandComponent_ChangeROE Parms{};

	Parms.NewROE = NewROE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerCommandComponent.DistributeCommand
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EGBAICommands                           Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   OptLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OptActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerCommandComponent::DistributeCommand(EGBAICommands Command, const struct FVector& OptLocation, class AActor* OptActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCommandComponent", "DistributeCommand");

	Params::GBPlayerCommandComponent_DistributeCommand Parms{};

	Parms.Command = Command;
	Parms.OptLocation = std::move(OptLocation);
	Parms.OptActor = OptActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerCommandComponent.IssueGoCommand
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EAIGoCodes                              NewGoCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerCommandComponent::IssueGoCommand(EAIGoCodes NewGoCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCommandComponent", "IssueGoCommand");

	Params::GBPlayerCommandComponent_IssueGoCommand Parms{};

	Parms.NewGoCode = NewGoCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerCommandComponent.SetWaypoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FAIMoveCommand&            MoveCommand                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGBPlayerCommandComponent::SetWaypoint(const struct FAIMoveCommand& MoveCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerCommandComponent", "SetWaypoint");

	Params::GBPlayerCommandComponent_SetWaypoint Parms{};

	Parms.MoveCommand = std::move(MoveCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerInput.ApplyPlayerSettings
// (Native, Protected)
// Parameters:
// class UGBPlayerSettings*                PlayerSettings                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBPlayerInput::ApplyPlayerSettings(class UGBPlayerSettings* PlayerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerInput", "ApplyPlayerSettings");

	Params::GBPlayerInput_ApplyPlayerSettings Parms{};

	Parms.PlayerSettings = PlayerSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerInput.ValidateInputSettings
// (Native, Public, BlueprintCallable)

void UGBPlayerInput::ValidateInputSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerInput", "ValidateInputSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerNightVisionStatus.Init
// (Final, Native, Protected)

void AGBPlayerNightVisionStatus::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerNightVisionStatus", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerNightVisionStatus.OnCameraStyleChanged
// (Native, Protected)
// Parameters:
// class FName                             OldCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerNightVisionStatus::OnCameraStyleChanged(class FName OldCameraStyle, class FName NewCameraStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerNightVisionStatus", "OnCameraStyleChanged");

	Params::GBPlayerNightVisionStatus_OnCameraStyleChanged Parms{};

	Parms.OldCameraStyle = OldCameraStyle;
	Parms.NewCameraStyle = NewCameraStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerNightVisionStatus.OnSpectatorNightVisionModeChanged
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerController*              PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerNightVisionStatus::OnSpectatorNightVisionModeChanged(class AGBPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerNightVisionStatus", "OnSpectatorNightVisionModeChanged");

	Params::GBPlayerNightVisionStatus_OnSpectatorNightVisionModeChanged Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerNightVisionStatus.OnViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerController*              PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPlayerNightVisionStatus::OnViewTargetChanged(class AGBPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerNightVisionStatus", "OnViewTargetChanged");

	Params::GBPlayerNightVisionStatus_OnViewTargetChanged Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBPlayerNightVisionStatus.GetPlayerNightVisionStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBPlayerNightVisionStatus::GetPlayerNightVisionStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPlayerNightVisionStatus", "GetPlayerNightVisionStatus");

	Params::GBPlayerNightVisionStatus_GetPlayerNightVisionStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBPortalSystemManager.RemoveLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULightComponent*                  LightComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBPortalSystemManager::RemoveLight(class ULightComponent* LightComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBPortalSystemManager", "RemoveLight");

	Params::GBPortalSystemManager_RemoveLight Parms{};

	Parms.LightComponent = LightComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRailAttachment.GetAttachmentOverlaps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceCollision                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AGBRailAttachment*>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AGBRailAttachment*> AGBRailAttachment::GetAttachmentOverlaps(bool bForceCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetAttachmentOverlaps");

	Params::GBRailAttachment_GetAttachmentOverlaps Parms{};

	Parms.bForceCollision = bForceCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.GetBackOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutBackOffset                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBRailAttachment::GetBackOffset(struct FVector* OutBackOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetBackOffset");

	Params::GBRailAttachment_GetBackOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBackOffset != nullptr)
		*OutBackOffset = std::move(Parms.OutBackOffset);

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.GetRailMountValidation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERailMountValidation                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERailMountValidation AGBRailAttachment::GetRailMountValidation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetRailMountValidation");

	Params::GBRailAttachment_GetRailMountValidation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.GetValidMountPointOffsets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGBInvItem*                       BaseItem                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> AGBRailAttachment::GetValidMountPointOffsets(class AGBInvItem* BaseItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetValidMountPointOffsets");

	Params::GBRailAttachment_GetValidMountPointOffsets Parms{};

	Parms.BaseItem = BaseItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.GetValidRailOffsetsFor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AGBFirearm*                       ParentFirearm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FValidatedRecoilSlots>*   OutValidatedRecoilSlots                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGBRailAttachment::GetValidRailOffsetsFor(class AGBFirearm* ParentFirearm, TArray<struct FValidatedRecoilSlots>* OutValidatedRecoilSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetValidRailOffsetsFor");

	Params::GBRailAttachment_GetValidRailOffsetsFor Parms{};

	Parms.ParentFirearm = ParentFirearm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValidatedRecoilSlots != nullptr)
		*OutValidatedRecoilSlots = std::move(Parms.OutValidatedRecoilSlots);
}


// Function GroundBranch.GBRailAttachment.IsCompatibleWithRail
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGBRailComponent*                 RailComp                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBRailAttachment::IsCompatibleWithRail(class UGBRailComponent* RailComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "IsCompatibleWithRail");

	Params::GBRailAttachment_IsCompatibleWithRail Parms{};

	Parms.RailComp = RailComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.IsNotTooFarBack
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AGBFirearm*                       ParentFirearm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBRailAttachment::IsNotTooFarBack(class AGBFirearm* ParentFirearm, const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "IsNotTooFarBack");

	Params::GBRailAttachment_IsNotTooFarBack Parms{};

	Parms.ParentFirearm = ParentFirearm;
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.IsNotTooFarForward
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AGBFirearm*                       ParentFirearm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBRailAttachment::IsNotTooFarForward(class AGBFirearm* ParentFirearm, const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "IsNotTooFarForward");

	Params::GBRailAttachment_IsNotTooFarForward Parms{};

	Parms.ParentFirearm = ParentFirearm;
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.OnRep_RailAttachmentReplication
// (Final, Native, Protected)

void AGBRailAttachment::OnRep_RailAttachmentReplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "OnRep_RailAttachmentReplication");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRailAttachment.SetRecoilSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewRecoilSlot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRailAttachment::SetRecoilSlot(int32 NewRecoilSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "SetRecoilSlot");

	Params::GBRailAttachment_SetRecoilSlot Parms{};

	Parms.NewRecoilSlot = NewRecoilSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRailAttachment.StackCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UGBRailComponent*           RailComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBRailAttachment::StackCheck(const class UGBRailComponent* RailComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "StackCheck");

	Params::GBRailAttachment_StackCheck Parms{};

	Parms.RailComp = RailComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.GetMountPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UGBRailMountComponent*>    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UGBRailMountComponent*> AGBRailAttachment::GetMountPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetMountPoints");

	Params::GBRailAttachment_GetMountPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRailAttachment.GetRecoilSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBRailAttachment::GetRecoilSlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRailAttachment", "GetRecoilSlot");

	Params::GBRailAttachment_GetRecoilSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRestraint.BreakOffLeadingHostage
// (Final, Native, Public, BlueprintCallable)

void AGBRestraint::BreakOffLeadingHostage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "BreakOffLeadingHostage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.ClearLeadHostageInteractionWidget
// (Final, Native, Protected)

void AGBRestraint::ClearLeadHostageInteractionWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "ClearLeadHostageInteractionWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.HasLineOfSightToHostage
// (Final, Native, Protected, HasDefaults)
// Parameters:
// const struct FVector&                   TraceFrom                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     IgnoreActor                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBRestraint::HasLineOfSightToHostage(const struct FVector& TraceFrom, const class AActor* IgnoreActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "HasLineOfSightToHostage");

	Params::GBRestraint_HasLineOfSightToHostage Parms{};

	Parms.TraceFrom = std::move(TraceFrom);
	Parms.IgnoreActor = IgnoreActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBRestraint.OnBeginCursorOver
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::OnBeginCursorOver(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "OnBeginCursorOver");

	Params::GBRestraint_OnBeginCursorOver Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.OnEndCursorOver
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              TouchedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::OnEndCursorOver(class UPrimitiveComponent* TouchedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "OnEndCursorOver");

	Params::GBRestraint_OnEndCursorOver Parms{};

	Parms.TouchedComponent = TouchedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.OnPlayerInteractionChanged
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::OnPlayerInteractionChanged(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "OnPlayerInteractionChanged");

	Params::GBRestraint_OnPlayerInteractionChanged Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.OnRep_HasIntimidators
// (Final, Native, Protected)
// Parameters:
// bool                                    PreviousValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::OnRep_HasIntimidators(bool PreviousValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "OnRep_HasIntimidators");

	Params::GBRestraint_OnRep_HasIntimidators Parms{};

	Parms.PreviousValue = PreviousValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.OnStatusUpdated
// (Final, Native, Public)

void AGBRestraint::OnStatusUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "OnStatusUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.RemoveAllHostageEquipment
// (Final, Native, Protected)

void AGBRestraint::RemoveAllHostageEquipment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "RemoveAllHostageEquipment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.SetLeadingRelationship
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerState*                   LeadingPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   LedPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::SetLeadingRelationship(class AGBPlayerState* LeadingPlayerState, class AGBPlayerState* LedPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "SetLeadingRelationship");

	Params::GBRestraint_SetLeadingRelationship Parms{};

	Parms.LeadingPlayerState = LeadingPlayerState;
	Parms.LedPlayerState = LedPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.UnsetLeadingRelationship
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerState*                   LeadingPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBPlayerState*                   LedPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::UnsetLeadingRelationship(class AGBPlayerState* LeadingPlayerState, class AGBPlayerState* LedPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "UnsetLeadingRelationship");

	Params::GBRestraint_UnsetLeadingRelationship Parms{};

	Parms.LeadingPlayerState = LeadingPlayerState;
	Parms.LedPlayerState = LedPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.UpdatePlayerInteractionStatus
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerState*                   PreviousValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBRestraint::UpdatePlayerInteractionStatus(class AGBPlayerState* PreviousValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "UpdatePlayerInteractionStatus");

	Params::GBRestraint_UpdatePlayerInteractionStatus Parms{};

	Parms.PreviousValue = PreviousValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBRestraint.GetUsingGBPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGBPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBPlayerState* AGBRestraint::GetUsingGBPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBRestraint", "GetUsingGBPlayerState");

	Params::GBRestraint_GetUsingGBPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSequencerEvent.PlayNextSequence
// (Final, Native, Private)

void AGBSequencerEvent::PlayNextSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSequencerEvent", "PlayNextSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.GetAmbientNightIllumination
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             InMoonElevation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InLunarPhase                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyCreatorWeatherPreset*         InWeatherPreset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetAmbientNightIllumination(const float InMoonElevation, const float InLunarPhase, class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetAmbientNightIllumination");

	Params::GBSky_GetAmbientNightIllumination Parms{};

	Parms.InMoonElevation = InMoonElevation;
	Parms.InLunarPhase = InLunarPhase;
	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetCloudCover
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetCloudCover(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetCloudCover");

	Params::GBSky_GetCloudCover Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetFogAmount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetFogAmount(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetFogAmount");

	Params::GBSky_GetFogAmount Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetGroundCover
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGroundCoverType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGroundCoverType AGBSky::GetGroundCover(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetGroundCover");

	Params::GBSky_GetGroundCover Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetLunarPhase
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetLunarPhase(int32 InYear, int32 InMonth, int32 InDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetLunarPhase");

	Params::GBSky_GetLunarPhase Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetLunarPhaseArea
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetLunarPhaseArea(int32 InYear, int32 InMonth, int32 InDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetLunarPhaseArea");

	Params::GBSky_GetLunarPhaseArea Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetLunarPhaseAreaForPhase
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InPhase                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetLunarPhaseAreaForPhase(float InPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetLunarPhaseAreaForPhase");

	Params::GBSky_GetLunarPhaseAreaForPhase Parms{};

	Parms.InPhase = InPhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetLunarPhaseName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             InPhase                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBSky::GetLunarPhaseName(const float InPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetLunarPhaseName");

	Params::GBSky_GetLunarPhaseName Parms{};

	Parms.InPhase = InPhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetMoonIllumination
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             InMoonElevation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InLunarPhase                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyCreatorWeatherPreset*         InWeatherPreset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetMoonIllumination(const float InMoonElevation, const float InLunarPhase, class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetMoonIllumination");

	Params::GBSky_GetMoonIllumination Parms{};

	Parms.InMoonElevation = InMoonElevation;
	Parms.InLunarPhase = InLunarPhase;
	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetNightAidedVisibility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             InMoonIllumination                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InAmbientIllumination                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetNightAidedVisibility(const float InMoonIllumination, const float InAmbientIllumination, const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetNightAidedVisibility");

	Params::GBSky_GetNightAidedVisibility Parms{};

	Parms.InMoonIllumination = InMoonIllumination;
	Parms.InAmbientIllumination = InAmbientIllumination;
	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetNightUnaidedVisibility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             InMoonIllumination                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InAmbientIllumination                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetNightUnaidedVisibility(const float InMoonIllumination, const float InAmbientIllumination, const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetNightUnaidedVisibility");

	Params::GBSky_GetNightUnaidedVisibility Parms{};

	Parms.InMoonIllumination = InMoonIllumination;
	Parms.InAmbientIllumination = InAmbientIllumination;
	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetRainAmount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetRainAmount(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetRainAmount");

	Params::GBSky_GetRainAmount Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSnowAmount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetSnowAmount(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetSnowAmount");

	Params::GBSky_GetSnowAmount Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetVisibilityName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             InVisibility                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBSky::GetVisibilityName(const float InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetVisibilityName");

	Params::GBSky_GetVisibilityName Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetWeatherVisibility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetWeatherVisibility(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetWeatherVisibility");

	Params::GBSky_GetWeatherVisibility Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetWindAmount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USkyCreatorWeatherPreset*   InWeatherPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetWindAmount(const class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBSky", "GetWindAmount");

	Params::GBSky_GetWindAmount Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IBlendableInterface>InBlendableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                                   InWeight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "AddOrUpdateBlendable");

	Params::GBSky_AddOrUpdateBlendable Parms{};

	Parms.InBlendableObject = InBlendableObject;
	Parms.InWeight = InWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.DebugPrintAlarmTimes
// (Final, Native, Public, BlueprintCallable)

void AGBSky::DebugPrintAlarmTimes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "DebugPrintAlarmTimes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.EndCycle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBSky::EndCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "EndCycle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.EnsureInit
// (Final, Native, Public, BlueprintCallable)

void AGBSky::EnsureInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "EnsureInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.GetCurrentNVGMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetCurrentNVGMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetCurrentNVGMultiplier");

	Params::GBSky_GetCurrentNVGMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetMoonlightScalingFactors
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetMoonlightScalingFactors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetMoonlightScalingFactors");

	Params::GBSky_GetMoonlightScalingFactors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetRandomWeatherPresetCategoryAndType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName*                            OutCategory                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::GetRandomWeatherPresetCategoryAndType(class FName* OutCategory, class FName* OutType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetRandomWeatherPresetCategoryAndType");

	Params::GBSky_GetRandomWeatherPresetCategoryAndType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCategory != nullptr)
		*OutCategory = Parms.OutCategory;

	if (OutType != nullptr)
		*OutType = Parms.OutType;
}


// Function GroundBranch.GBSky.GetRandomWeatherPresetTypeInCategory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName                       InCategory                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBSky::GetRandomWeatherPresetTypeInCategory(const class FName InCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetRandomWeatherPresetTypeInCategory");

	Params::GBSky_GetRandomWeatherPresetTypeInCategory Parms{};

	Parms.InCategory = InCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSkylightScalingFactors
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetSkylightScalingFactors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSkylightScalingFactors");

	Params::GBSky_GetSkylightScalingFactors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSunAndMoonSequence
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfSteps                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          OutTimes                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          OutSunSequence                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          OutMoonSequence                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// float*                                  OutSunriseTime                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutSunsetTime                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::GetSunAndMoonSequence(int32 InYear, int32 InMonth, int32 InDay, int32 NumberOfSteps, TArray<float>* OutTimes, TArray<float>* OutSunSequence, TArray<float>* OutMoonSequence, float* OutSunriseTime, float* OutSunsetTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSunAndMoonSequence");

	Params::GBSky_GetSunAndMoonSequence Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;
	Parms.NumberOfSteps = NumberOfSteps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTimes != nullptr)
		*OutTimes = std::move(Parms.OutTimes);

	if (OutSunSequence != nullptr)
		*OutSunSequence = std::move(Parms.OutSunSequence);

	if (OutMoonSequence != nullptr)
		*OutMoonSequence = std::move(Parms.OutMoonSequence);

	if (OutSunriseTime != nullptr)
		*OutSunriseTime = Parms.OutSunriseTime;

	if (OutSunsetTime != nullptr)
		*OutSunsetTime = Parms.OutSunsetTime;
}


// Function GroundBranch.GBSky.GetTimeSpanTagBlended
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EGBTimeSpanBlendType              BlendType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGBBlendedTimeSpan               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGBBlendedTimeSpan AGBSky::GetTimeSpanTagBlended(const EGBTimeSpanBlendType BlendType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetTimeSpanTagBlended");

	Params::GBSky_GetTimeSpanTagBlended Parms{};

	Parms.BlendType = BlendType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.IsTimeSpanNearlyEqual
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGBBlendedTimeSpan&        Timespan                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       DesiredTimeSpan                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AmountNeeded                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBSky::IsTimeSpanNearlyEqual(const struct FGBBlendedTimeSpan& Timespan, const class FName DesiredTimeSpan, const float AmountNeeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "IsTimeSpanNearlyEqual");

	Params::GBSky_IsTimeSpanNearlyEqual Parms{};

	Parms.Timespan = std::move(Timespan);
	Parms.DesiredTimeSpan = DesiredTimeSpan;
	Parms.AmountNeeded = AmountNeeded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.MapStandardHourToActualHour
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   StandardHour                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSunriseTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSunsetTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::MapStandardHourToActualHour(float StandardHour, float InSunriseTime, float InSunsetTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "MapStandardHourToActualHour");

	Params::GBSky_MapStandardHourToActualHour Parms{};

	Parms.StandardHour = StandardHour;
	Parms.InSunriseTime = InSunriseTime;
	Parms.InSunsetTime = InSunsetTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.OnChangedInitialTimeOfDay
// (Final, Native, Protected)
// Parameters:
// const bool                              bIsTransitionalTime                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::OnChangedInitialTimeOfDay(const bool bIsTransitionalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "OnChangedInitialTimeOfDay");

	Params::GBSky_OnChangedInitialTimeOfDay Parms{};

	Parms.bIsTransitionalTime = bIsTransitionalTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.OnRep_CycleStartTime
// (Final, Native, Protected)

void AGBSky::OnRep_CycleStartTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "OnRep_CycleStartTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.OnRep_ReplicatedDateTime
// (Final, Native, Protected)

void AGBSky::OnRep_ReplicatedDateTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "OnRep_ReplicatedDateTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.OnTimeChangeEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bIsTransitionalTime                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::OnTimeChangeEvent(const bool bIsTransitionalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "OnTimeChangeEvent");

	Params::GBSky_OnTimeChangeEvent Parms{};

	Parms.bIsTransitionalTime = bIsTransitionalTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBSky.OnTimeSpanChangeEvent
// (Event, Protected, BlueprintEvent)

void AGBSky::OnTimeSpanChangeEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "OnTimeSpanChangeEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBSky.ResetTimeOfDayAlarms
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBTimeOfDayAlarm>& TimeOfDayAlarmInfo                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBSky::ResetTimeOfDayAlarms(const TArray<struct FGBTimeOfDayAlarm>& TimeOfDayAlarmInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "ResetTimeOfDayAlarms");

	Params::GBSky_ResetTimeOfDayAlarms Parms{};

	Parms.TimeOfDayAlarmInfo = std::move(TimeOfDayAlarmInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetCurrentWeatherPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkyCreatorWeatherPreset*         InWeatherPreset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetCurrentWeatherPreset(class USkyCreatorWeatherPreset* InWeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetCurrentWeatherPreset");

	Params::GBSky_SetCurrentWeatherPreset Parms{};

	Parms.InWeatherPreset = InWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetInitialTimeOfDay
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewInitialTimeOfDay                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetInitialTimeOfDay(int32 NewInitialTimeOfDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetInitialTimeOfDay");

	Params::GBSky_SetInitialTimeOfDay Parms{};

	Parms.NewInitialTimeOfDay = NewInitialTimeOfDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetLowerHemisphereDesaturateAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             InDesaturateAmount                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetLowerHemisphereDesaturateAmount(const float InDesaturateAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetLowerHemisphereDesaturateAmount");

	Params::GBSky_SetLowerHemisphereDesaturateAmount Parms{};

	Parms.InDesaturateAmount = InDesaturateAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetMissionTimePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EMissionTimeLabel                 InMissionTimePreset                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetMissionTimePreset(const EMissionTimeLabel InMissionTimePreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetMissionTimePreset");

	Params::GBSky_SetMissionTimePreset Parms{};

	Parms.InMissionTimePreset = InMissionTimePreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetMoonlightScaling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMoonlightScaling                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetMoonlightScaling(float NewMoonlightScaling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetMoonlightScaling");

	Params::GBSky_SetMoonlightScaling Parms{};

	Parms.NewMoonlightScaling = NewMoonlightScaling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetSkylightScaling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSkylightScaling                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetSkylightScaling(float NewSkylightScaling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetSkylightScaling");

	Params::GBSky_SetSkylightScaling Parms{};

	Parms.NewSkylightScaling = NewSkylightScaling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetSkylightScalingOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetSkylightScalingOverride(const class FName& Type, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetSkylightScalingOverride");

	Params::GBSky_SetSkylightScalingOverride Parms{};

	Parms.Type = Type;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetSunlightScaling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSunlightScaling                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetSunlightScaling(float NewSunlightScaling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetSunlightScaling");

	Params::GBSky_SetSunlightScaling Parms{};

	Parms.NewSunlightScaling = NewSunlightScaling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetTimeOfDayAlarms
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBTimeOfDayAlarm>& TimeOfDayAlarmInfo                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBSky::SetTimeOfDayAlarms(const TArray<struct FGBTimeOfDayAlarm>& TimeOfDayAlarmInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetTimeOfDayAlarms");

	Params::GBSky_SetTimeOfDayAlarms Parms{};

	Parms.TimeOfDayAlarmInfo = std::move(TimeOfDayAlarmInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetTimeOfDayFromString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TimeOfDayString                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetTimeOfDayFromString(const class FString& TimeOfDayString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetTimeOfDayFromString");

	Params::GBSky_SetTimeOfDayFromString Parms{};

	Parms.TimeOfDayString = std::move(TimeOfDayString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetWeatherSystemIsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bIsEnabled                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetWeatherSystemIsEnabled(const bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetWeatherSystemIsEnabled");

	Params::GBSky_SetWeatherSystemIsEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.SetYearMonthDay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::SetYearMonthDay(int32 InYear, int32 InMonth, int32 InDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "SetYearMonthDay");

	Params::GBSky_SetYearMonthDay Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.StartCycle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AGBSky::StartCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "StartCycle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.UnsetTimeOfDayAlarms
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBTimeOfDayAlarm>& TimeOfDayAlarmInfo                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGBSky::UnsetTimeOfDayAlarms(const TArray<struct FGBTimeOfDayAlarm>& TimeOfDayAlarmInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "UnsetTimeOfDayAlarms");

	Params::GBSky_UnsetTimeOfDayAlarms Parms{};

	Parms.TimeOfDayAlarmInfo = std::move(TimeOfDayAlarmInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.UpdateLatLongAndTimeZone
// (Final, Native, Public, BlueprintCallable)

void AGBSky::UpdateLatLongAndTimeZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "UpdateLatLongAndTimeZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSky.GetAllWeatherPresets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bAllSeasons                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESeason                                 SelectedSeason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USkyCreatorWeatherPreset*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USkyCreatorWeatherPreset*> AGBSky::GetAllWeatherPresets(bool bAllSeasons, ESeason SelectedSeason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetAllWeatherPresets");

	Params::GBSky_GetAllWeatherPresets Parms{};

	Parms.bAllSeasons = bAllSeasons;
	Parms.SelectedSeason = SelectedSeason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetCurrentMoonlightStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetCurrentMoonlightStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetCurrentMoonlightStrength");

	Params::GBSky_GetCurrentMoonlightStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetCurrentSeason
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESeason                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESeason AGBSky::GetCurrentSeason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetCurrentSeason");

	Params::GBSky_GetCurrentSeason Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetCurrentSunlightStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetCurrentSunlightStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetCurrentSunlightStrength");

	Params::GBSky_GetCurrentSunlightStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetCurrentWeatherPreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkyCreatorWeatherPreset*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkyCreatorWeatherPreset* AGBSky::GetCurrentWeatherPreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetCurrentWeatherPreset");

	Params::GBSky_GetCurrentWeatherPreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetDSTOnDate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBSky::GetDSTOnDate(int32 InYear, int32 InMonth, int32 InDay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetDSTOnDate");

	Params::GBSky_GetDSTOnDate Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetHour
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              bGetTargetTime                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetHour(const bool bGetTargetTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetHour");

	Params::GBSky_GetHour Parms{};

	Parms.bGetTargetTime = bGetTargetTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetHoursMinutesSeconds
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32*                                  OutHours                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutMinutes                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutSeconds                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::GetHoursMinutesSeconds(int32* OutHours, int32* OutMinutes, int32* OutSeconds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetHoursMinutesSeconds");

	Params::GBSky_GetHoursMinutesSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHours != nullptr)
		*OutHours = Parms.OutHours;

	if (OutMinutes != nullptr)
		*OutMinutes = Parms.OutMinutes;

	if (OutSeconds != nullptr)
		*OutSeconds = Parms.OutSeconds;
}


// Function GroundBranch.GBSky.GetInitialTimeOfDay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBSky::GetInitialTimeOfDay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetInitialTimeOfDay");

	Params::GBSky_GetInitialTimeOfDay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetMinLightLevelScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetMinLightLevelScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetMinLightLevelScale");

	Params::GBSky_GetMinLightLevelScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetMissionTimePreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMissionTimeLabel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMissionTimeLabel AGBSky::GetMissionTimePreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetMissionTimePreset");

	Params::GBSky_GetMissionTimePreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetMoonElevation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InHours                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMinutes                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeconds                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetMoonElevation(int32 InYear, int32 InMonth, int32 InDay, int32 InHours, int32 InMinutes, int32 InSeconds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetMoonElevation");

	Params::GBSky_GetMoonElevation Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;
	Parms.InHours = InHours;
	Parms.InMinutes = InMinutes;
	Parms.InSeconds = InSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetMoonlightScaling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetMoonlightScaling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetMoonlightScaling");

	Params::GBSky_GetMoonlightScaling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetNorthOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetNorthOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetNorthOffset");

	Params::GBSky_GetNorthOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSkylightScaling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetSkylightScaling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSkylightScaling");

	Params::GBSky_GetSkylightScaling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetStandardHour
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              bGetTargetTime                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetStandardHour(const bool bGetTargetTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetStandardHour");

	Params::GBSky_GetStandardHour Parms{};

	Parms.bGetTargetTime = bGetTargetTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSunElevation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InHours                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMinutes                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeconds                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetSunElevation(int32 InYear, int32 InMonth, int32 InDay, int32 InHours, int32 InMinutes, int32 InSeconds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSunElevation");

	Params::GBSky_GetSunElevation Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;
	Parms.InHours = InHours;
	Parms.InMinutes = InMinutes;
	Parms.InSeconds = InSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSunlightScaling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetSunlightScaling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSunlightScaling");

	Params::GBSky_GetSunlightScaling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSunlightScalingFactors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::GetSunlightScalingFactors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSunlightScalingFactors");

	Params::GBSky_GetSunlightScalingFactors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetSunriseAndSunsetTime
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InYear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutSunriseTime                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutSunsetTime                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfEvaluationSteps                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::GetSunriseAndSunsetTime(int32 InYear, int32 InMonth, int32 InDay, float* OutSunriseTime, float* OutSunsetTime, int32 NumberOfEvaluationSteps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetSunriseAndSunsetTime");

	Params::GBSky_GetSunriseAndSunsetTime Parms{};

	Parms.InYear = InYear;
	Parms.InMonth = InMonth;
	Parms.InDay = InDay;
	Parms.NumberOfEvaluationSteps = NumberOfEvaluationSteps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSunriseTime != nullptr)
		*OutSunriseTime = Parms.OutSunriseTime;

	if (OutSunsetTime != nullptr)
		*OutSunsetTime = Parms.OutSunsetTime;
}


// Function GroundBranch.GBSky.GetTimeOfDayString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBSky::GetTimeOfDayString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetTimeOfDayString");

	Params::GBSky_GetTimeOfDayString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetTimeSpanTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBSky::GetTimeSpanTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetTimeSpanTag");

	Params::GBSky_GetTimeSpanTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetWeatherPresetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class USkyCreatorWeatherPreset*   SelectedWeatherPreset                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherCategory                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            OutWeatherType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText*                            OutWeatherDescription                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void AGBSky::GetWeatherPresetProperties(const class USkyCreatorWeatherPreset* SelectedWeatherPreset, class FName* OutWeatherCategory, class FName* OutWeatherType, class FText* OutWeatherDescription) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetWeatherPresetProperties");

	Params::GBSky_GetWeatherPresetProperties Parms{};

	Parms.SelectedWeatherPreset = SelectedWeatherPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWeatherCategory != nullptr)
		*OutWeatherCategory = Parms.OutWeatherCategory;

	if (OutWeatherType != nullptr)
		*OutWeatherType = Parms.OutWeatherType;

	if (OutWeatherDescription != nullptr)
		*OutWeatherDescription = std::move(Parms.OutWeatherDescription);
}


// Function GroundBranch.GBSky.GetWeatherPresetsForSeason
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESeason                                 SelectedSeason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USkyCreatorWeatherPreset*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USkyCreatorWeatherPreset*> AGBSky::GetWeatherPresetsForSeason(ESeason SelectedSeason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetWeatherPresetsForSeason");

	Params::GBSky_GetWeatherPresetsForSeason Parms{};

	Parms.SelectedSeason = SelectedSeason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetWeatherString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGBSky::GetWeatherString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetWeatherString");

	Params::GBSky_GetWeatherString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetWeatherSystemIsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBSky::GetWeatherSystemIsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetWeatherSystemIsEnabled");

	Params::GBSky_GetWeatherSystemIsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSky.GetYearMonthDay
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32*                                  OutYear                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutMonth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutDay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSky::GetYearMonthDay(int32* OutYear, int32* OutMonth, int32* OutDay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "GetYearMonthDay");

	Params::GBSky_GetYearMonthDay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutYear != nullptr)
		*OutYear = Parms.OutYear;

	if (OutMonth != nullptr)
		*OutMonth = Parms.OutMonth;

	if (OutDay != nullptr)
		*OutDay = Parms.OutDay;
}


// Function GroundBranch.GBSky.MapActualHourToStandardHour
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ActualHour                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSunriseTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSunsetTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBSky::MapActualHourToStandardHour(float ActualHour, float InSunriseTime, float InSunsetTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSky", "MapActualHourToStandardHour");

	Params::GBSky_MapActualHourToStandardHour Parms{};

	Parms.ActualHour = ActualHour;
	Parms.InSunriseTime = InSunriseTime;
	Parms.InSunsetTime = InSunsetTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSpatialAudioVolume.OnPlayerReadyRoomStatusChanged
// (Final, Native, Private)
// Parameters:
// class AGBPlayerState*                   GBPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSpatialAudioVolume::OnPlayerReadyRoomStatusChanged(class AGBPlayerState* GBPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpatialAudioVolume", "OnPlayerReadyRoomStatusChanged");

	Params::GBSpatialAudioVolume_OnPlayerReadyRoomStatusChanged Parms{};

	Parms.GBPlayerState = GBPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.OnViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AGBPlayerController*              PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSpectatorPawn::OnViewTargetChanged(class AGBPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "OnViewTargetChanged");

	Params::GBSpectatorPawn_OnViewTargetChanged Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.ServerSpectatorViewActor
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class AActor*                           ActorTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSpectatorPawn::ServerSpectatorViewActor(class AActor* ActorTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "ServerSpectatorViewActor");

	Params::GBSpectatorPawn_ServerSpectatorViewActor Parms{};

	Parms.ActorTarget = ActorTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.SpectatorSetCamera
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewCameraStyle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSpectatorPawn::SpectatorSetCamera(class FName NewCameraStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "SpectatorSetCamera");

	Params::GBSpectatorPawn_SpectatorSetCamera Parms{};

	Parms.NewCameraStyle = NewCameraStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.SpectatorStopFollowing
// (Final, Native, Public, BlueprintCallable)

void AGBSpectatorPawn::SpectatorStopFollowing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "SpectatorStopFollowing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.SpectatorViewActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGBSpectatorPawn::SpectatorViewActor(class AActor* ActorTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "SpectatorViewActor");

	Params::GBSpectatorPawn_SpectatorViewActor Parms{};

	Parms.ActorTarget = ActorTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.SpectatorViewNextPlayer
// (Final, Native, Public, BlueprintCallable)

void AGBSpectatorPawn::SpectatorViewNextPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "SpectatorViewNextPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSpectatorPawn.SpectatorViewPrevPlayer
// (Final, Native, Public, BlueprintCallable)

void AGBSpectatorPawn::SpectatorViewPrevPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSpectatorPawn", "SpectatorViewPrevPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBSquadState.GetSquadAliveCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBSquadState::GetSquadAliveCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSquadState", "GetSquadAliveCount");

	Params::GBSquadState_GetSquadAliveCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBSquadState.IsSquadAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBSquadState::IsSquadAlive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBSquadState", "IsSquadAlive");

	Params::GBSquadState_IsSquadAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBTimeOfDayAlarmComponent.ResetTimeOfDayAlarms
// (Final, Native, Public, BlueprintCallable)

void UGBTimeOfDayAlarmComponent::ResetTimeOfDayAlarms()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTimeOfDayAlarmComponent", "ResetTimeOfDayAlarms");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTimeOfDayAlarmComponent.SetTimeOfDayAlarms
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FGBTimeOfDayAlarm>& InTimeOfDayAlarmInfo                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FName AlarmName)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UGBTimeOfDayAlarmComponent::SetTimeOfDayAlarms(const TArray<struct FGBTimeOfDayAlarm>& InTimeOfDayAlarmInfo, TDelegate<void(const class FName AlarmName)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTimeOfDayAlarmComponent", "SetTimeOfDayAlarms");

	Params::GBTimeOfDayAlarmComponent_SetTimeOfDayAlarms Parms{};

	Parms.InTimeOfDayAlarmInfo = std::move(InTimeOfDayAlarmInfo);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTimeOfDayAlarmComponent.TimeOfDayAlarmsDelegate
// (Final, Native, Protected)
// Parameters:
// const class FName                       AlarmName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBTimeOfDayAlarmComponent::TimeOfDayAlarmsDelegate(const class FName AlarmName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTimeOfDayAlarmComponent", "TimeOfDayAlarmsDelegate");

	Params::GBTimeOfDayAlarmComponent_TimeOfDayAlarmsDelegate Parms{};

	Parms.AlarmName = AlarmName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBTimeOfDayAlarmComponent.UnsetTimeOfDayAlarms
// (Final, Native, Public, BlueprintCallable)

void UGBTimeOfDayAlarmComponent::UnsetTimeOfDayAlarms()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBTimeOfDayAlarmComponent", "UnsetTimeOfDayAlarms");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.AddUser
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::AddUser(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "AddUser");

	Params::GBUseInterface_AddUser Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.AIQuestion
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IGBUseInterface::AIQuestion(class AController* Controller, class FName UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "AIQuestion");

	Params::GBUseInterface_AIQuestion Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUseInterface.AIQuestionWithParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IGBUseInterface::AIQuestionWithParams(class AController* Controller, class FName UseType, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "AIQuestionWithParams");

	Params::GBUseInterface_AIQuestionWithParams Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUseInterface.AIUse
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::AIUse(class AController* Controller, class FName UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "AIUse");

	Params::GBUseInterface_AIUse Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.AIUseWithParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::AIUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "AIUseWithParams");

	Params::GBUseInterface_AIUseWithParams Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.ClientUse
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::ClientUse(class AController* Controller, class FName UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "ClientUse");

	Params::GBUseInterface_ClientUse Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.ClientUseWithParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::ClientUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "ClientUseWithParams");

	Params::GBUseInterface_ClientUseWithParams Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.RemoveUser
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::RemoveUser(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "RemoveUser");

	Params::GBUseInterface_RemoveUser Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.ServerUse
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::ServerUse(class AController* Controller, class FName UseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "ServerUse");

	Params::GBUseInterface_ServerUse Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.ServerUseWithParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UseType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGBUseInterface::ServerUseWithParams(class AController* Controller, class FName UseType, const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "ServerUseWithParams");

	Params::GBUseInterface_ServerUseWithParams Parms{};

	Parms.Controller = Controller;
	Parms.UseType = UseType;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBUseInterface.GetNumUsers
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IGBUseInterface::GetNumUsers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "GetNumUsers");

	Params::GBUseInterface_GetNumUsers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBUseInterface.IsTeamSpecific
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGBUseInterface::IsTeamSpecific() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GBUseInterface", "IsTeamSpecific");

	Params::GBUseInterface_IsTeamSpecific Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBVOIPManager.GetDeviceNames
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UGBVOIPManager::GetDeviceNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBVOIPManager", "GetDeviceNames");

	Params::GBVOIPManager_GetDeviceNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBVOIPManager.OnPlayerCharVoicePostEventCallback
// (Final, Native, Protected)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBVOIPManager::OnPlayerCharVoicePostEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBVOIPManager", "OnPlayerCharVoicePostEventCallback");

	Params::GBVOIPManager_OnPlayerCharVoicePostEventCallback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBVOIPManager.SetCharVoiceSwitchEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkComponent*                     AkComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRadio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLocal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBVOIPManager::SetCharVoiceSwitchEvent(class UAkComponent* AkComponent, bool bIsRadio, bool bIsLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBVOIPManager", "SetCharVoiceSwitchEvent");

	Params::GBVOIPManager_SetCharVoiceSwitchEvent Parms{};

	Parms.AkComponent = AkComponent;
	Parms.bIsRadio = bIsRadio;
	Parms.bIsLocal = bIsLocal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBVOIPManager.SetDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DeviceName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBVOIPManager::SetDevice(const class FString& DeviceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBVOIPManager", "SetDevice");

	Params::GBVOIPManager_SetDevice Parms{};

	Parms.DeviceName = std::move(DeviceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.GBVOIPManager.SetVOIPSwitchEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkComponent*                     AkComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVOIPType                               VOIPType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGBVOIPManager::SetVOIPSwitchEvent(class UAkComponent* AkComponent, EVOIPType VOIPType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBVOIPManager", "SetVOIPSwitchEvent");

	Params::GBVOIPManager_SetVOIPSwitchEvent Parms{};

	Parms.AkComponent = AkComponent;
	Parms.VOIPType = VOIPType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GroundBranch.GBVOIPManager.GetCurrentDeviceName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGBVOIPManager::GetCurrentDeviceName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBVOIPManager", "GetCurrentDeviceName");

	Params::GBVOIPManager_GetCurrentDeviceName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWeatherInfo.OnUpdateTransformEvent
// (Event, Public, BlueprintEvent)

void AGBWeatherInfo::OnUpdateTransformEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWeatherInfo", "OnUpdateTransformEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GroundBranch.GBWorldSettings.GetWorldSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGBWorldSettings*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGBWorldSettings* AGBWorldSettings::GetWorldSettings(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GBWorldSettings", "GetWorldSettings");

	Params::GBWorldSettings_GetWorldSettings Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetAIHearingMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBWorldSettings::GetAIHearingMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetAIHearingMultiplier");

	Params::GBWorldSettings_GetAIHearingMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetAIVisibilityMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBWorldSettings::GetAIVisibilityMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetAIVisibilityMultiplier");

	Params::GBWorldSettings_GetAIVisibilityMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetAllowedSeasons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<ESeason>                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<ESeason> AGBWorldSettings::GetAllowedSeasons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetAllowedSeasons");

	Params::GBWorldSettings_GetAllowedSeasons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetDefaultSpatialSoundTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBWorldSettings::GetDefaultSpatialSoundTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetDefaultSpatialSoundTag");

	Params::GBWorldSettings_GetDefaultSpatialSoundTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetFirstAllowableMonth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   StartMonth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBWorldSettings::GetFirstAllowableMonth(int32 StartMonth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetFirstAllowableMonth");

	Params::GBWorldSettings_GetFirstAllowableMonth Parms{};

	Parms.StartMonth = StartMonth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetIsMonthAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBWorldSettings::GetIsMonthAllowed(int32 InMonth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetIsMonthAllowed");

	Params::GBWorldSettings_GetIsMonthAllowed Parms{};

	Parms.InMonth = InMonth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetLatitude
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBWorldSettings::GetLatitude() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetLatitude");

	Params::GBWorldSettings_GetLatitude Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetLevelSummary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBLevelSummary*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBLevelSummary* AGBWorldSettings::GetLevelSummary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetLevelSummary");

	Params::GBWorldSettings_GetLevelSummary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetListOfAllowableMonthNumbers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> AGBWorldSettings::GetListOfAllowableMonthNumbers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetListOfAllowableMonthNumbers");

	Params::GBWorldSettings_GetListOfAllowableMonthNumbers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetLocalClimatePreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGBClimatePreset*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGBClimatePreset* AGBWorldSettings::GetLocalClimatePreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetLocalClimatePreset");

	Params::GBWorldSettings_GetLocalClimatePreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetLocalClimateSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGBClimateSettings               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGBClimateSettings AGBWorldSettings::GetLocalClimateSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetLocalClimateSettings");

	Params::GBWorldSettings_GetLocalClimateSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetLocationIsClassified
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBWorldSettings::GetLocationIsClassified() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetLocationIsClassified");

	Params::GBWorldSettings_GetLocationIsClassified Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetLongitude
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBWorldSettings::GetLongitude() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetLongitude");

	Params::GBWorldSettings_GetLongitude Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetNumberFriendlyAI
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGBWorldSettings::GetNumberFriendlyAI() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetNumberFriendlyAI");

	Params::GBWorldSettings_GetNumberFriendlyAI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetObservesDST
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBWorldSettings::GetObservesDST() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetObservesDST");

	Params::GBWorldSettings_GetObservesDST Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetPreferredMissionTimes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<EMissionTimeLabel>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EMissionTimeLabel> AGBWorldSettings::GetPreferredMissionTimes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetPreferredMissionTimes");

	Params::GBWorldSettings_GetPreferredMissionTimes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetSequenceToPlayAfterMissionFail
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBWorldSettings::GetSequenceToPlayAfterMissionFail() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetSequenceToPlayAfterMissionFail");

	Params::GBWorldSettings_GetSequenceToPlayAfterMissionFail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetSequenceToPlayAfterMissionSuccess
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBWorldSettings::GetSequenceToPlayAfterMissionSuccess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetSequenceToPlayAfterMissionSuccess");

	Params::GBWorldSettings_GetSequenceToPlayAfterMissionSuccess Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetSequenceToPlayBeforeMissionStarts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class ALevelSequenceActor>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class ALevelSequenceActor> AGBWorldSettings::GetSequenceToPlayBeforeMissionStarts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetSequenceToPlayBeforeMissionStarts");

	Params::GBWorldSettings_GetSequenceToPlayBeforeMissionStarts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetShouldCreateDebugSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBWorldSettings::GetShouldCreateDebugSquad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetShouldCreateDebugSquad");

	Params::GBWorldSettings_GetShouldCreateDebugSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetSpawnFriendlyAI
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGBWorldSettings::GetSpawnFriendlyAI() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetSpawnFriendlyAI");

	Params::GBWorldSettings_GetSpawnFriendlyAI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetTerritoryName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AGBWorldSettings::GetTerritoryName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetTerritoryName");

	Params::GBWorldSettings_GetTerritoryName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.GBWorldSettings.GetTimeZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AGBWorldSettings::GetTimeZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GBWorldSettings", "GetTimeZone");

	Params::GBWorldSettings_GetTimeZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.JoyColorWheel.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UJoyColorWheel::GetColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoyColorWheel", "GetColor");

	Params::JoyColorWheel_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.JoyColorWheel.SetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SkipAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJoyColorWheel::SetColor(const struct FLinearColor& NewColor, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoyColorWheel", "SetColor");

	Params::JoyColorWheel_SetColor Parms{};

	Parms.NewColor = std::move(NewColor);
	Parms.SkipAnimation = SkipAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.TKMathFunctionLibrary.AreLineSegmentsCrossing
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   pointA1                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   pointA2                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   pointB1                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   pointB2                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::AreLineSegmentsCrossing(const struct FVector& pointA1, const struct FVector& pointA2, const struct FVector& pointB1, const struct FVector& pointB2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "AreLineSegmentsCrossing");

	Params::TKMathFunctionLibrary_AreLineSegmentsCrossing Parms{};

	Parms.pointA1 = std::move(pointA1);
	Parms.pointA2 = std::move(pointA2);
	Parms.pointB1 = std::move(pointB1);
	Parms.pointB2 = std::move(pointB2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.ClosestPointOnLineSegment
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineStart                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineEnd                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::ClosestPointOnLineSegment(const struct FVector& Point, const struct FVector& LineStart, const struct FVector& LineEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ClosestPointOnLineSegment");

	Params::TKMathFunctionLibrary_ClosestPointOnLineSegment Parms{};

	Parms.Point = std::move(Point);
	Parms.LineStart = std::move(LineStart);
	Parms.LineEnd = std::move(LineEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.ClosestPointOnSphereToLine
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   SphereOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::ClosestPointOnSphereToLine(const struct FVector& SphereOrigin, float SphereRadius, const struct FVector& LineOrigin, const struct FVector& LineDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ClosestPointOnSphereToLine");

	Params::TKMathFunctionLibrary_ClosestPointOnSphereToLine Parms{};

	Parms.SphereOrigin = std::move(SphereOrigin);
	Parms.SphereRadius = SphereRadius;
	Parms.LineOrigin = std::move(LineOrigin);
	Parms.LineDir = std::move(LineDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.ClosestPointsOfLineSegments
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Line1Start                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Line1End                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Line2Start                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Line2End                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         LinePoint1                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         LinePoint2                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTKMathFunctionLibrary::ClosestPointsOfLineSegments(const struct FVector& Line1Start, const struct FVector& Line1End, const struct FVector& Line2Start, const struct FVector& Line2End, struct FVector* LinePoint1, struct FVector* LinePoint2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ClosestPointsOfLineSegments");

	Params::TKMathFunctionLibrary_ClosestPointsOfLineSegments Parms{};

	Parms.Line1Start = std::move(Line1Start);
	Parms.Line1End = std::move(Line1End);
	Parms.Line2Start = std::move(Line2Start);
	Parms.Line2End = std::move(Line2End);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LinePoint1 != nullptr)
		*LinePoint1 = std::move(Parms.LinePoint1);

	if (LinePoint2 != nullptr)
		*LinePoint2 = std::move(Parms.LinePoint2);
}


// Function GroundBranch.TKMathFunctionLibrary.ClosestPointsOnTwoLines
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector*                         closestPointLine1                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         closestPointLine2                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LinePoint1                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   lineVec1                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LinePoint2                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   lineVec2                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::ClosestPointsOnTwoLines(struct FVector* closestPointLine1, struct FVector* closestPointLine2, const struct FVector& LinePoint1, const struct FVector& lineVec1, const struct FVector& LinePoint2, const struct FVector& lineVec2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ClosestPointsOnTwoLines");

	Params::TKMathFunctionLibrary_ClosestPointsOnTwoLines Parms{};

	Parms.LinePoint1 = std::move(LinePoint1);
	Parms.lineVec1 = std::move(lineVec1);
	Parms.LinePoint2 = std::move(LinePoint2);
	Parms.lineVec2 = std::move(lineVec2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (closestPointLine1 != nullptr)
		*closestPointLine1 = std::move(Parms.closestPointLine1);

	if (closestPointLine2 != nullptr)
		*closestPointLine2 = std::move(Parms.closestPointLine2);

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.ConvertAnchorToAnchor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnchors&                  CurrentAnchor                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FMargin&                   Offsets                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FAnchors&                  TargetAnchor                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMargin*                         ConvertedOffsets                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UTKMathFunctionLibrary::ConvertAnchorToAnchor(const class UObject* WorldContextObject, const struct FAnchors& CurrentAnchor, const struct FMargin& Offsets, const struct FAnchors& TargetAnchor, struct FMargin* ConvertedOffsets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ConvertAnchorToAnchor");

	Params::TKMathFunctionLibrary_ConvertAnchorToAnchor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CurrentAnchor = std::move(CurrentAnchor);
	Parms.Offsets = std::move(Offsets);
	Parms.TargetAnchor = std::move(TargetAnchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ConvertedOffsets != nullptr)
		*ConvertedOffsets = std::move(Parms.ConvertedOffsets);
}


// Function GroundBranch.TKMathFunctionLibrary.ConvertPhysicsLinearVelocity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpeedUnit                              SpeedUnit                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTKMathFunctionLibrary::ConvertPhysicsLinearVelocity(const struct FVector& Velocity, ESpeedUnit SpeedUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ConvertPhysicsLinearVelocity");

	Params::TKMathFunctionLibrary_ConvertPhysicsLinearVelocity Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.SpeedUnit = SpeedUnit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.GetVelocityAtPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DrawDebugInfo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::GetVelocityAtPoint(class UPrimitiveComponent* Target, const struct FVector& Point, class FName BoneName, bool DrawDebugInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "GetVelocityAtPoint");

	Params::TKMathFunctionLibrary_GetVelocityAtPoint Parms{};

	Parms.Target = Target;
	Parms.Point = std::move(Point);
	Parms.BoneName = BoneName;
	Parms.DrawDebugInfo = DrawDebugInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.GridSnap
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Grid                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::GridSnap(const struct FVector& A, float Grid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "GridSnap");

	Params::TKMathFunctionLibrary_GridSnap Parms{};

	Parms.A = std::move(A);
	Parms.Grid = Grid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.IsEvenNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::IsEvenNumber(float A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "IsEvenNumber");

	Params::TKMathFunctionLibrary_IsEvenNumber Parms{};

	Parms.A = A;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.IsLineInsideSphere
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LineStart                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LineLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SphereOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::IsLineInsideSphere(const struct FVector& LineStart, const struct FVector& LineDir, float LineLength, const struct FVector& SphereOrigin, float SphereRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "IsLineInsideSphere");

	Params::TKMathFunctionLibrary_IsLineInsideSphere Parms{};

	Parms.LineStart = std::move(LineStart);
	Parms.LineDir = std::move(LineDir);
	Parms.LineLength = LineLength;
	Parms.SphereOrigin = std::move(SphereOrigin);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.IsMultipleOf
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Multiple                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::IsMultipleOf(int32 A, int32 Multiple)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "IsMultipleOf");

	Params::TKMathFunctionLibrary_IsMultipleOf Parms{};

	Parms.A = A;
	Parms.Multiple = Multiple;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.IsPointInsideBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoxOrigin                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoxExtent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::IsPointInsideBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "IsPointInsideBox");

	Params::TKMathFunctionLibrary_IsPointInsideBox Parms{};

	Parms.Point = std::move(Point);
	Parms.BoxOrigin = std::move(BoxOrigin);
	Parms.BoxExtent = std::move(BoxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.IsPowerOfTwo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::IsPowerOfTwo(int32 X)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "IsPowerOfTwo");

	Params::TKMathFunctionLibrary_IsPowerOfTwo Parms{};

	Parms.X = X;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.LineExtentBoxIntersection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBox&                      InBox                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Extent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         HitLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         HitNormal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  HitTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::LineExtentBoxIntersection(const struct FBox& InBox, const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, float* HitTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "LineExtentBoxIntersection");

	Params::TKMathFunctionLibrary_LineExtentBoxIntersection Parms{};

	Parms.InBox = std::move(InBox);
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Extent = std::move(Extent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitLocation != nullptr)
		*HitLocation = std::move(Parms.HitLocation);

	if (HitNormal != nullptr)
		*HitNormal = std::move(Parms.HitNormal);

	if (HitTime != nullptr)
		*HitTime = Parms.HitTime;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.LineToLineIntersection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector*                         IntersectionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LinePoint1                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineDir1                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LinePoint2                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineDir2                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::LineToLineIntersection(struct FVector* IntersectionPoint, const struct FVector& LinePoint1, const struct FVector& LineDir1, const struct FVector& LinePoint2, const struct FVector& LineDir2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "LineToLineIntersection");

	Params::TKMathFunctionLibrary_LineToLineIntersection Parms{};

	Parms.LinePoint1 = std::move(LinePoint1);
	Parms.LineDir1 = std::move(LineDir1);
	Parms.LinePoint2 = std::move(LinePoint2);
	Parms.LineDir2 = std::move(LineDir2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IntersectionPoint != nullptr)
		*IntersectionPoint = std::move(Parms.IntersectionPoint);

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.NegateFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTKMathFunctionLibrary::NegateFloat(float A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "NegateFloat");

	Params::TKMathFunctionLibrary_NegateFloat Parms{};

	Parms.A = A;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.NegateInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTKMathFunctionLibrary::NegateInt(int32 A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "NegateInt");

	Params::TKMathFunctionLibrary_NegateInt Parms{};

	Parms.A = A;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.NegateVector2D
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UTKMathFunctionLibrary::NegateVector2D(const struct FVector2D& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "NegateVector2D");

	Params::TKMathFunctionLibrary_NegateVector2D Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.PointOnWhichSideOfLineSegment
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LinePoint1                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LinePoint2                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTKMathFunctionLibrary::PointOnWhichSideOfLineSegment(const struct FVector& LinePoint1, const struct FVector& LinePoint2, const struct FVector& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "PointOnWhichSideOfLineSegment");

	Params::TKMathFunctionLibrary_PointOnWhichSideOfLineSegment Parms{};

	Parms.LinePoint1 = std::move(LinePoint1);
	Parms.LinePoint2 = std::move(LinePoint2);
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.ProjectPointOnLine
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LineOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LineDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::ProjectPointOnLine(const struct FVector& LineOrigin, const struct FVector& LineDirection, const struct FVector& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "ProjectPointOnLine");

	Params::TKMathFunctionLibrary_ProjectPointOnLine Parms{};

	Parms.LineOrigin = std::move(LineOrigin);
	Parms.LineDirection = std::move(LineDirection);
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.RoundToLowerMultiple
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Multiple                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    skipSelf                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTKMathFunctionLibrary::RoundToLowerMultiple(int32 A, int32 Multiple, bool skipSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "RoundToLowerMultiple");

	Params::TKMathFunctionLibrary_RoundToLowerMultiple Parms{};

	Parms.A = A;
	Parms.Multiple = Multiple;
	Parms.skipSelf = skipSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.RoundToNearestMultiple
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Multiple                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTKMathFunctionLibrary::RoundToNearestMultiple(int32 A, int32 Multiple)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "RoundToNearestMultiple");

	Params::TKMathFunctionLibrary_RoundToNearestMultiple Parms{};

	Parms.A = A;
	Parms.Multiple = Multiple;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.RoundToUpperMultiple
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Multiple                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    skipSelf                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTKMathFunctionLibrary::RoundToUpperMultiple(int32 A, int32 Multiple, bool skipSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "RoundToUpperMultiple");

	Params::TKMathFunctionLibrary_RoundToUpperMultiple Parms{};

	Parms.A = A;
	Parms.Multiple = Multiple;
	Parms.skipSelf = skipSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.SetCenterOfMassOffset
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTKMathFunctionLibrary::SetCenterOfMassOffset(class UPrimitiveComponent* Target, const struct FVector& Offset, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "SetCenterOfMassOffset");

	Params::TKMathFunctionLibrary_SetCenterOfMassOffset Parms{};

	Parms.Target = Target;
	Parms.Offset = std::move(Offset);
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GroundBranch.TKMathFunctionLibrary.SetVectorLength
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::SetVectorLength(const struct FVector& A, float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "SetVectorLength");

	Params::TKMathFunctionLibrary_SetVectorLength Parms{};

	Parms.A = std::move(A);
	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.SignedDistancePlanePoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   PlaneNormal                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PlanePoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTKMathFunctionLibrary::SignedDistancePlanePoint(const struct FVector& PlaneNormal, const struct FVector& PlanePoint, const struct FVector& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "SignedDistancePlanePoint");

	Params::TKMathFunctionLibrary_SignedDistancePlanePoint Parms{};

	Parms.PlaneNormal = std::move(PlaneNormal);
	Parms.PlanePoint = std::move(PlanePoint);
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.SphereBoxIntersection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   SphereOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoxOrigin                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoxExtent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTKMathFunctionLibrary::SphereBoxIntersection(const struct FVector& SphereOrigin, float SphereRadius, const struct FVector& BoxOrigin, const struct FVector& BoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "SphereBoxIntersection");

	Params::TKMathFunctionLibrary_SphereBoxIntersection Parms{};

	Parms.SphereOrigin = std::move(SphereOrigin);
	Parms.SphereRadius = SphereRadius;
	Parms.BoxOrigin = std::move(BoxOrigin);
	Parms.BoxExtent = std::move(BoxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.VectorDegreesToRadians
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   DegVector                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::VectorDegreesToRadians(const struct FVector& DegVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "VectorDegreesToRadians");

	Params::TKMathFunctionLibrary_VectorDegreesToRadians Parms{};

	Parms.DegVector = std::move(DegVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GroundBranch.TKMathFunctionLibrary.VectorRadiansToDegrees
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   RadVector                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTKMathFunctionLibrary::VectorRadiansToDegrees(const struct FVector& RadVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TKMathFunctionLibrary", "VectorRadiansToDegrees");

	Params::TKMathFunctionLibrary_VectorRadiansToDegrees Parms{};

	Parms.RadVector = std::move(RadVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

