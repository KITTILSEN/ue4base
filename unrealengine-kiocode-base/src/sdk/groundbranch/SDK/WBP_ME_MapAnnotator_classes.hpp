#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ME_MapAnnotator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ME_MapAnnotator.WBP_ME_MapAnnotator_C
// 0x02D8 (0x0538 - 0x0260)
class UWBP_ME_MapAnnotator_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                Button_Apply;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_Cancel;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_DeleteMarker;                               // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CheckBox_CreateNewMarker;                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CheckBox_EditExistingMarker;                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableText*                          EditableText_MarkerNumber;                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableText*                          EditableText_MarkerRotation;                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableText*                          EditableText_MarkerScale;                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableText*                          EditableText_MarkerText;                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_MarkerNumber;                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_MarkerText;                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Rotation;                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Scale;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Map;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_WarnMap;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_WarnTeamId;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_MapWidgets;                                // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_WholeActiveArea;                           // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_DragDropWidgets;                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_MarkersPlaced_AllMaps;                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_MarkersPlaced_ThisMap;                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_MarkersPlaced_ThisMapAllTeams;           // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_MarkersPlaced_ThisMapThisTeam;           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_DragWidgets;                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_EditProperties;                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ComboBox_C*                        WBP_ComboBox_LinkedObjective;                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ComboBox_C*                        WBP_ComboBox_MapList;                              // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ComboBox_C*                        WBP_ComboBox_Team;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	uint8                                         CurrentTeamId;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UTexture2D*>                AllMinimapTextures;                                // 0x0350(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AllMinimapTextureObjectPaths;                      // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FGBMapMarker>                   CurrentMapMarkers;                                 // 0x03B0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class FText>                           MapComboBoxEntries;                                // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(TArray<struct FGBMapMarker>& NewMapMarkers)> OnSetNewMapMarkers;   // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MapMarkerCount_ThisMapThisTeam;                    // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapMarkerCount_ThisMap;                            // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSelectedMapImage;                           // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapIndexForWorld;                                  // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CurrentDisplayedMinimapTexture;                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             CurrentMinimapTextureForWorld;                     // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FGBMissionImage>                CurrentMissionImageList;                           // 0x0400(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FName                                   MissionActorTag;                                   // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGBMissionObjective*>            MissionObjectiveList;                              // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class FText>                           MissionObjectiveComboBoxEntries;                   // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   CurrentTextTokenForNewWidget;                      // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AGBMissionObjective>     CurrentLinkedObjective;                            // 0x0440(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 UserInputText;                                     // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   TitleGetUserInputText;                             // 0x0478(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         UserInputFloat;                                    // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEditMode;                                         // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSelectedMapSymbolIndex;                     // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SymbolToDelete;                                    // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentFileIndex;                                  // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ImageFileNumbers;                                  // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_ME_MapSymbol_C*                    CurrentSelectedMapSymbol;                          // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   ToolTipSelectAWidgetToActivate;                    // 0x04C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Title_GetUserInputFloat;                           // 0x04D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 UserInputFilename;                                 // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   CantDoThatInPIE_Title;                             // 0x0500(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   CantDoThatInPIE_Message;                           // 0x0518(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_ME_MapSymbol_C*                    LastMapSymbolSpawned;                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool Get_WBP_ComboBox_LinkedObjective_bIsEnabled_0();
	void GetObjectiveInfoFromObjectiveSoftRef(TSoftObjectPtr<class AGBMissionObjective> MissionObjectiveSoftRef, bool* bIsPrimary, class FString* ObjectiveTitle);
	void GetFilenameForImageNumber(int32 ImageNumber, class FString* Filename);
	void GetImageListIndexForPhotoNumber(int32 PhotoNumber, int32* ImageListIndex);
	void IsMapImage(const struct FGBMissionImage& InMissionImage, bool* bIsMapImage);
	void GetLinkedObjectiveFromComboBox(TSoftObjectPtr<class AGBMissionObjective>* LinkedObjectiveRef);
	class UWidget* Get_CheckBox_EditExistingMarker_ToolTipWidget_0();
	void GetMapMarkerRenderTranslationFromScreenPosition(const struct FVector2D& ScreenPosition, struct FVector2D* RenderTranslation, bool* bWasOutOfRange);
	class UWidget* Get_Image_WarnMap_ToolTipWidget_0();
	ESlateVisibility Get_Image_WarnMap_Visibility_0();
	void GetComboBoxIndexForLinkedObjectiveRef(TSoftObjectPtr<class AGBMissionObjective> LinkedObjectiveRef, int32* ComboBoxIndex, TSoftObjectPtr<class AGBMissionObjective>* UpdatedRef);
	class UWidget* GetToolTipWidget_0();
	ESlateVisibility GetVisibility_0();
	void OnLoaded_46AAD6A842FE33F224B5EBAB9042543C(class UObject* Loaded);
	void Construct();
	void DisplayImage(int32 ImageIndex);
	void BuildMapList();
	void BndEvt__WBP_ME_MapAnnotator_WBP_ComboBox_MapList_K2Node_ComponentBoundEvent_0_OnIndexChanged__DelegateSignature(int32 Index_0);
	void RedisplayMapMarkers();
	void CloseDialog();
	void BndEvt__WBP_ME_MapAnnotator_Button_Apply_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__WBP_ME_MapAnnotator_Button_Cancel_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__WBP_ME_MapAnnotator_WBP_ComboBox_Team_K2Node_ComponentBoundEvent_3_OnIndexChanged__DelegateSignature(int32 Index_0);
	void BuildMapMarkerList();
	void UpdateStats();
	void DragEventFinished(TSoftClassPtr<class UClass> WidgetClassRef, const struct FVector2D& ViewportCoordinates);
	void BndEvt__WBP_ME_MapAnnotator_WBP_ComboBox_LinkedObjective_K2Node_ComponentBoundEvent_4_OnIndexChanged__DelegateSignature(int32 Index_0);
	void SpawnMapWidget(const struct FGBMapMarker& MapMarkerInfo, int32 MapWidgetIndex);
	void OnDraggingExistingMapWidget(class UWBP_ME_MapSymbol_C* MapWidget, const struct FVector2D& ViewportCoordinates, int32 MapWidgetIndex);
	void NewMapImageIsLoaded();
	void MapSymbolClicked(class UWBP_ME_MapSymbol_C* MapWidget);
	void BuildObjectiveList();
	void OnClickedOkUserTextInput(const class FString& Filename);
	void FinishSpawningMapWidget();
	void MapMarkerPropertiesUpdated(int32 MapMarkerIndex, const struct FGBMapMarker& NewMapMarkerInfo);
	void GetUserTextInput(const class FString& InitialText);
	void UpdateEditModeStuff();
	void BndEvt__WBP_ME_MapAnnotator_CheckBox_CreateNewMarker_K2Node_ComponentBoundEvent_5_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__WBP_ME_MapAnnotator_CheckBox_EditExistingMarker_K2Node_ComponentBoundEvent_6_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void SetSelectedMapSymbol(class UWBP_ME_MapSymbol_C* SelectedMapSymbol);
	void ClearSelectedMapSymbol();
	void BndEvt__WBP_ME_MapAnnotator_EditableText_MarkerText_K2Node_ComponentBoundEvent_7_OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void ReadPropertiesFromWidget(int32 WidgetIndex);
	void BndEvt__WBP_ME_MapAnnotator_EditableText_MarkerScale_K2Node_ComponentBoundEvent_8_OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void BndEvt__WBP_ME_MapAnnotator_EditableText_MarkerRotation_K2Node_ComponentBoundEvent_9_OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void BndEvt__WBP_ME_MapAnnotator_Button_DeleteMarker_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
	void StorePhotoFilename(int32 PhotoNumber, int32 MapMarkerIndex);
	void ResetMarkerDIsplayProperties();
	void SetupImageIndices();
	void ResetMissionImageMarkers();
	void ContinueSpawningMapWidget();
	void BndEvt__WBP_ME_MapAnnotator_EditableText_MarkerNumber_K2Node_ComponentBoundEvent_11_OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void GetUserFloatInput();
	void OnClickedOkUserFloatInput(const class FString& Filename);
	void CantDoThatInPIE();
	void ValidateMapMarkerData();
	void ExecuteUbergraph_WBP_ME_MapAnnotator(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ME_MapAnnotator_C">();
	}
	static class UWBP_ME_MapAnnotator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ME_MapAnnotator_C>();
	}
};
static_assert(alignof(UWBP_ME_MapAnnotator_C) == 0x000008, "Wrong alignment on UWBP_ME_MapAnnotator_C");
static_assert(sizeof(UWBP_ME_MapAnnotator_C) == 0x000538, "Wrong size on UWBP_ME_MapAnnotator_C");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, UberGraphFrame) == 0x000260, "Member 'UWBP_ME_MapAnnotator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Button_Apply) == 0x000268, "Member 'UWBP_ME_MapAnnotator_C::Button_Apply' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Button_Cancel) == 0x000270, "Member 'UWBP_ME_MapAnnotator_C::Button_Cancel' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Button_DeleteMarker) == 0x000278, "Member 'UWBP_ME_MapAnnotator_C::Button_DeleteMarker' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CheckBox_CreateNewMarker) == 0x000280, "Member 'UWBP_ME_MapAnnotator_C::CheckBox_CreateNewMarker' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CheckBox_EditExistingMarker) == 0x000288, "Member 'UWBP_ME_MapAnnotator_C::CheckBox_EditExistingMarker' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, EditableText_MarkerNumber) == 0x000290, "Member 'UWBP_ME_MapAnnotator_C::EditableText_MarkerNumber' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, EditableText_MarkerRotation) == 0x000298, "Member 'UWBP_ME_MapAnnotator_C::EditableText_MarkerRotation' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, EditableText_MarkerScale) == 0x0002A0, "Member 'UWBP_ME_MapAnnotator_C::EditableText_MarkerScale' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, EditableText_MarkerText) == 0x0002A8, "Member 'UWBP_ME_MapAnnotator_C::EditableText_MarkerText' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, HorizontalBox_MarkerNumber) == 0x0002B0, "Member 'UWBP_ME_MapAnnotator_C::HorizontalBox_MarkerNumber' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, HorizontalBox_MarkerText) == 0x0002B8, "Member 'UWBP_ME_MapAnnotator_C::HorizontalBox_MarkerText' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, HorizontalBox_Rotation) == 0x0002C0, "Member 'UWBP_ME_MapAnnotator_C::HorizontalBox_Rotation' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, HorizontalBox_Scale) == 0x0002C8, "Member 'UWBP_ME_MapAnnotator_C::HorizontalBox_Scale' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Image_Map) == 0x0002D0, "Member 'UWBP_ME_MapAnnotator_C::Image_Map' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Image_WarnMap) == 0x0002D8, "Member 'UWBP_ME_MapAnnotator_C::Image_WarnMap' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Image_WarnTeamId) == 0x0002E0, "Member 'UWBP_ME_MapAnnotator_C::Image_WarnTeamId' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Overlay_MapWidgets) == 0x0002E8, "Member 'UWBP_ME_MapAnnotator_C::Overlay_MapWidgets' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Overlay_WholeActiveArea) == 0x0002F0, "Member 'UWBP_ME_MapAnnotator_C::Overlay_WholeActiveArea' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, ScrollBox_DragDropWidgets) == 0x0002F8, "Member 'UWBP_ME_MapAnnotator_C::ScrollBox_DragDropWidgets' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, TextBlock_MarkersPlaced_AllMaps) == 0x000300, "Member 'UWBP_ME_MapAnnotator_C::TextBlock_MarkersPlaced_AllMaps' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, TextBlock_MarkersPlaced_ThisMap) == 0x000308, "Member 'UWBP_ME_MapAnnotator_C::TextBlock_MarkersPlaced_ThisMap' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, TextBlock_MarkersPlaced_ThisMapAllTeams) == 0x000310, "Member 'UWBP_ME_MapAnnotator_C::TextBlock_MarkersPlaced_ThisMapAllTeams' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, TextBlock_MarkersPlaced_ThisMapThisTeam) == 0x000318, "Member 'UWBP_ME_MapAnnotator_C::TextBlock_MarkersPlaced_ThisMapThisTeam' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, VerticalBox_DragWidgets) == 0x000320, "Member 'UWBP_ME_MapAnnotator_C::VerticalBox_DragWidgets' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, VerticalBox_EditProperties) == 0x000328, "Member 'UWBP_ME_MapAnnotator_C::VerticalBox_EditProperties' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, WBP_ComboBox_LinkedObjective) == 0x000330, "Member 'UWBP_ME_MapAnnotator_C::WBP_ComboBox_LinkedObjective' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, WBP_ComboBox_MapList) == 0x000338, "Member 'UWBP_ME_MapAnnotator_C::WBP_ComboBox_MapList' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, WBP_ComboBox_Team) == 0x000340, "Member 'UWBP_ME_MapAnnotator_C::WBP_ComboBox_Team' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentTeamId) == 0x000348, "Member 'UWBP_ME_MapAnnotator_C::CurrentTeamId' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, AllMinimapTextures) == 0x000350, "Member 'UWBP_ME_MapAnnotator_C::AllMinimapTextures' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, AllMinimapTextureObjectPaths) == 0x0003A0, "Member 'UWBP_ME_MapAnnotator_C::AllMinimapTextureObjectPaths' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentMapMarkers) == 0x0003B0, "Member 'UWBP_ME_MapAnnotator_C::CurrentMapMarkers' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MapComboBoxEntries) == 0x0003C0, "Member 'UWBP_ME_MapAnnotator_C::MapComboBoxEntries' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, OnSetNewMapMarkers) == 0x0003D0, "Member 'UWBP_ME_MapAnnotator_C::OnSetNewMapMarkers' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MapMarkerCount_ThisMapThisTeam) == 0x0003E0, "Member 'UWBP_ME_MapAnnotator_C::MapMarkerCount_ThisMapThisTeam' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MapMarkerCount_ThisMap) == 0x0003E4, "Member 'UWBP_ME_MapAnnotator_C::MapMarkerCount_ThisMap' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentSelectedMapImage) == 0x0003E8, "Member 'UWBP_ME_MapAnnotator_C::CurrentSelectedMapImage' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MapIndexForWorld) == 0x0003EC, "Member 'UWBP_ME_MapAnnotator_C::MapIndexForWorld' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentDisplayedMinimapTexture) == 0x0003F0, "Member 'UWBP_ME_MapAnnotator_C::CurrentDisplayedMinimapTexture' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentMinimapTextureForWorld) == 0x0003F8, "Member 'UWBP_ME_MapAnnotator_C::CurrentMinimapTextureForWorld' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentMissionImageList) == 0x000400, "Member 'UWBP_ME_MapAnnotator_C::CurrentMissionImageList' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MissionActorTag) == 0x000410, "Member 'UWBP_ME_MapAnnotator_C::MissionActorTag' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MissionObjectiveList) == 0x000418, "Member 'UWBP_ME_MapAnnotator_C::MissionObjectiveList' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, MissionObjectiveComboBoxEntries) == 0x000428, "Member 'UWBP_ME_MapAnnotator_C::MissionObjectiveComboBoxEntries' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentTextTokenForNewWidget) == 0x000438, "Member 'UWBP_ME_MapAnnotator_C::CurrentTextTokenForNewWidget' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentLinkedObjective) == 0x000440, "Member 'UWBP_ME_MapAnnotator_C::CurrentLinkedObjective' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, UserInputText) == 0x000468, "Member 'UWBP_ME_MapAnnotator_C::UserInputText' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, TitleGetUserInputText) == 0x000478, "Member 'UWBP_ME_MapAnnotator_C::TitleGetUserInputText' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, UserInputFloat) == 0x000490, "Member 'UWBP_ME_MapAnnotator_C::UserInputFloat' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, bEditMode) == 0x000494, "Member 'UWBP_ME_MapAnnotator_C::bEditMode' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentSelectedMapSymbolIndex) == 0x000498, "Member 'UWBP_ME_MapAnnotator_C::CurrentSelectedMapSymbolIndex' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, SymbolToDelete) == 0x00049C, "Member 'UWBP_ME_MapAnnotator_C::SymbolToDelete' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentFileIndex) == 0x0004A0, "Member 'UWBP_ME_MapAnnotator_C::CurrentFileIndex' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, ImageFileNumbers) == 0x0004A8, "Member 'UWBP_ME_MapAnnotator_C::ImageFileNumbers' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CurrentSelectedMapSymbol) == 0x0004B8, "Member 'UWBP_ME_MapAnnotator_C::CurrentSelectedMapSymbol' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, ToolTipSelectAWidgetToActivate) == 0x0004C0, "Member 'UWBP_ME_MapAnnotator_C::ToolTipSelectAWidgetToActivate' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, Title_GetUserInputFloat) == 0x0004D8, "Member 'UWBP_ME_MapAnnotator_C::Title_GetUserInputFloat' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, UserInputFilename) == 0x0004F0, "Member 'UWBP_ME_MapAnnotator_C::UserInputFilename' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CantDoThatInPIE_Title) == 0x000500, "Member 'UWBP_ME_MapAnnotator_C::CantDoThatInPIE_Title' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, CantDoThatInPIE_Message) == 0x000518, "Member 'UWBP_ME_MapAnnotator_C::CantDoThatInPIE_Message' has a wrong offset!");
static_assert(offsetof(UWBP_ME_MapAnnotator_C, LastMapSymbolSpawned) == 0x000530, "Member 'UWBP_ME_MapAnnotator_C::LastMapSymbolSpawned' has a wrong offset!");

}

