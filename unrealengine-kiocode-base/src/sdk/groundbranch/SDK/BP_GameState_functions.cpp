#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState

#include "Basic.hpp"

#include "BP_GameState_classes.hpp"
#include "BP_GameState_parameters.hpp"


namespace SDK
{

// Function BP_GameState.BP_GameState_C.ExecuteUbergraph_BP_GameState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::ExecuteUbergraph_BP_GameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "ExecuteUbergraph_BP_GameState");

	Params::BP_GameState_C_ExecuteUbergraph_BP_GameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.OnClose_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::OnClose_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "OnClose_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.LocalOnRoundStageSet
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::LocalOnRoundStageSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "LocalOnRoundStageSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.ServerOnRoundStageSet
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::ServerOnRoundStageSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "ServerOnRoundStageSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.OnGameMessageEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             GameMessageId                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FUInt64&                   ModID                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::OnGameMessageEvent(class FName GameMessageId, class FName Type, float Duration, const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "OnGameMessageEvent");

	Params::BP_GameState_C_OnGameMessageEvent Parms{};

	Parms.GameMessageId = GameMessageId;
	Parms.Type = Type;
	Parms.Duration = Duration;
	Parms.ModID = std::move(ModID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.StopInactiveCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::StopInactiveCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "StopInactiveCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.StartInactiveCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::StartInactiveCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "StartInactiveCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.InactiveCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::InactiveCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "InactiveCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.OnPlayerControllerStateChanged_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::OnPlayerControllerStateChanged_Event_0(class FName OldState, class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "OnPlayerControllerStateChanged_Event_0");

	Params::BP_GameState_C_OnPlayerControllerStateChanged_Event_0 Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.BindToPlayerControllerState
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::BindToPlayerControllerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "BindToPlayerControllerState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.MaybeShowMissionSummary
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::MaybeShowMissionSummary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "MaybeShowMissionSummary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.AddDeathOverlay
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::AddDeathOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "AddDeathOverlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.RoundStageSet
// (Event, Protected, BlueprintEvent)

void ABP_GameState_C::RoundStageSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "RoundStageSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.AllowVotingAgain
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::AllowVotingAgain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "AllowVotingAgain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.OnVoteEndedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bPassed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   NextVoteDelay                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::OnVoteEndedEvent(bool bPassed, int32 NextVoteDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "OnVoteEndedEvent");

	Params::BP_GameState_C_OnVoteEndedEvent Parms{};

	Parms.bPassed = bPassed;
	Parms.NextVoteDelay = NextVoteDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.OnVoteCountUpdatedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   YesVotes                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NoVotes                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::OnVoteCountUpdatedEvent(int32 YesVotes, int32 NoVotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "OnVoteCountUpdatedEvent");

	Params::BP_GameState_C_OnVoteCountUpdatedEvent Parms{};

	Parms.YesVotes = YesVotes;
	Parms.NoVotes = NoVotes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.OnVoteStartedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     VoteStarter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   VoteTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::OnVoteStartedEvent(class APlayerState* VoteStarter, const class FString& Command, const class FString& Params_0, int32 VoteTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "OnVoteStartedEvent");

	Params::BP_GameState_C_OnVoteStartedEvent Parms{};

	Parms.VoteStarter = VoteStarter;
	Parms.Command = std::move(Command);
	Parms.Params_0 = std::move(Params_0);
	Parms.VoteTime = VoteTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.GetSpectatorOptions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftClassPtr<class UClass>>*    OutOptionClasses                                       (Parm, OutParm)

void ABP_GameState_C::GetSpectatorOptions(TArray<TSoftClassPtr<class UClass>>* OutOptionClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetSpectatorOptions");

	Params::BP_GameState_C_GetSpectatorOptions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutOptionClasses != nullptr)
		*OutOptionClasses = std::move(Parms.OutOptionClasses);
}


// Function BP_GameState.BP_GameState_C.GetRoundStageText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText*                            OutText                                                (Parm, OutParm)

void ABP_GameState_C::GetRoundStageText(class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetRoundStageText");

	Params::BP_GameState_C_GetRoundStageText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function BP_GameState.BP_GameState_C.GetTimeToNextTimeReminder
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   CurrentRoundTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  TimeToNextTimeReminder                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::GetTimeToNextTimeReminder(float CurrentRoundTime, float* TimeToNextTimeReminder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetTimeToNextTimeReminder");

	Params::BP_GameState_C_GetTimeToNextTimeReminder Parms{};

	Parms.CurrentRoundTime = CurrentRoundTime;

	UObject::ProcessEvent(Func, &Parms);

	if (TimeToNextTimeReminder != nullptr)
		*TimeToNextTimeReminder = Parms.TimeToNextTimeReminder;
}


// Function BP_GameState.BP_GameState_C.ShowMOTD
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::ShowMOTD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "ShowMOTD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.RefreshPlayerStats
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameState_C::RefreshPlayerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "RefreshPlayerStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState.BP_GameState_C.InternalOnGameMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InGameMessageId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FUInt64&                   InModId                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::InternalOnGameMessage(class FName InGameMessageId, class FName InType, float InDuration, const struct FUInt64& InModId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "InternalOnGameMessage");

	Params::BP_GameState_C_InternalOnGameMessage Parms{};

	Parms.InGameMessageId = InGameMessageId;
	Parms.InType = InType;
	Parms.InDuration = InDuration;
	Parms.InModId = std::move(InModId);

	UObject::ProcessEvent(Func, &Parms);
}

}

