#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBZooKeeper

#include "Basic.hpp"

#include "RBZooKeeper_structs.hpp"


namespace SDK::Params
{

// Function RBZooKeeper.ZKAdmin.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKAdmin_Get final
{
public:
	class UZKAdmin*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKAdmin_Get) == 0x000008, "Wrong alignment on ZKAdmin_Get");
static_assert(sizeof(ZKAdmin_Get) == 0x000008, "Wrong size on ZKAdmin_Get");
static_assert(offsetof(ZKAdmin_Get, ReturnValue) == 0x000000, "Member 'ZKAdmin_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKAdmin.AdminCommand
// 0x0028 (0x0028 - 0x0000)
struct ZKAdmin_AdminCommand final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameters;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZKAdminCommandResult                         ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZKAdmin_AdminCommand) == 0x000008, "Wrong alignment on ZKAdmin_AdminCommand");
static_assert(sizeof(ZKAdmin_AdminCommand) == 0x000028, "Wrong size on ZKAdmin_AdminCommand");
static_assert(offsetof(ZKAdmin_AdminCommand, UniqueId) == 0x000000, "Member 'ZKAdmin_AdminCommand::UniqueId' has a wrong offset!");
static_assert(offsetof(ZKAdmin_AdminCommand, Parameters) == 0x000010, "Member 'ZKAdmin_AdminCommand::Parameters' has a wrong offset!");
static_assert(offsetof(ZKAdmin_AdminCommand, ReturnValue) == 0x000020, "Member 'ZKAdmin_AdminCommand::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKAdmin.AllowPlayerName
// 0x0028 (0x0028 - 0x0000)
struct ZKAdmin_AllowPlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZKAdmin_AllowPlayerName) == 0x000008, "Wrong alignment on ZKAdmin_AllowPlayerName");
static_assert(sizeof(ZKAdmin_AllowPlayerName) == 0x000028, "Wrong size on ZKAdmin_AllowPlayerName");
static_assert(offsetof(ZKAdmin_AllowPlayerName, PlayerName) == 0x000000, "Member 'ZKAdmin_AllowPlayerName::PlayerName' has a wrong offset!");
static_assert(offsetof(ZKAdmin_AllowPlayerName, UniqueId) == 0x000010, "Member 'ZKAdmin_AllowPlayerName::UniqueId' has a wrong offset!");
static_assert(offsetof(ZKAdmin_AllowPlayerName, ReturnValue) == 0x000020, "Member 'ZKAdmin_AllowPlayerName::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKAdmin.GetAdminCommands
// 0x0020 (0x0020 - 0x0000)
struct ZKAdmin_GetAdminCommands final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKAdmin_GetAdminCommands) == 0x000008, "Wrong alignment on ZKAdmin_GetAdminCommands");
static_assert(sizeof(ZKAdmin_GetAdminCommands) == 0x000020, "Wrong size on ZKAdmin_GetAdminCommands");
static_assert(offsetof(ZKAdmin_GetAdminCommands, UniqueId) == 0x000000, "Member 'ZKAdmin_GetAdminCommands::UniqueId' has a wrong offset!");
static_assert(offsetof(ZKAdmin_GetAdminCommands, ReturnValue) == 0x000010, "Member 'ZKAdmin_GetAdminCommands::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKAdmin.GetAdminGroupCommands
// 0x0020 (0x0020 - 0x0000)
struct ZKAdmin_GetAdminGroupCommands final
{
public:
	class FString                                 AdminGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKAdmin_GetAdminGroupCommands) == 0x000008, "Wrong alignment on ZKAdmin_GetAdminGroupCommands");
static_assert(sizeof(ZKAdmin_GetAdminGroupCommands) == 0x000020, "Wrong size on ZKAdmin_GetAdminGroupCommands");
static_assert(offsetof(ZKAdmin_GetAdminGroupCommands, AdminGroupName) == 0x000000, "Member 'ZKAdmin_GetAdminGroupCommands::AdminGroupName' has a wrong offset!");
static_assert(offsetof(ZKAdmin_GetAdminGroupCommands, ReturnValue) == 0x000010, "Member 'ZKAdmin_GetAdminGroupCommands::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKAdmin.GetAdminInfo
// 0x0058 (0x0058 - 0x0000)
struct ZKAdmin_GetAdminInfo final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZKAdminInfo                           OutAdminInfo;                                      // 0x0010(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZKAdmin_GetAdminInfo) == 0x000008, "Wrong alignment on ZKAdmin_GetAdminInfo");
static_assert(sizeof(ZKAdmin_GetAdminInfo) == 0x000058, "Wrong size on ZKAdmin_GetAdminInfo");
static_assert(offsetof(ZKAdmin_GetAdminInfo, UniqueId) == 0x000000, "Member 'ZKAdmin_GetAdminInfo::UniqueId' has a wrong offset!");
static_assert(offsetof(ZKAdmin_GetAdminInfo, OutAdminInfo) == 0x000010, "Member 'ZKAdmin_GetAdminInfo::OutAdminInfo' has a wrong offset!");
static_assert(offsetof(ZKAdmin_GetAdminInfo, ReturnValue) == 0x000050, "Member 'ZKAdmin_GetAdminInfo::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKAdmin.IsAnyAdminOnline
// 0x0001 (0x0001 - 0x0000)
struct ZKAdmin_IsAnyAdminOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKAdmin_IsAnyAdminOnline) == 0x000001, "Wrong alignment on ZKAdmin_IsAnyAdminOnline");
static_assert(sizeof(ZKAdmin_IsAnyAdminOnline) == 0x000001, "Wrong size on ZKAdmin_IsAnyAdminOnline");
static_assert(offsetof(ZKAdmin_IsAnyAdminOnline, ReturnValue) == 0x000000, "Member 'ZKAdmin_IsAnyAdminOnline::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKBan.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKBan_Get final
{
public:
	class UZKBan*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKBan_Get) == 0x000008, "Wrong alignment on ZKBan_Get");
static_assert(sizeof(ZKBan_Get) == 0x000008, "Wrong size on ZKBan_Get");
static_assert(offsetof(ZKBan_Get, ReturnValue) == 0x000000, "Member 'ZKBan_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKBan.IsBanned
// 0x0028 (0x0028 - 0x0000)
struct ZKBan_IsBanned final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutBanReason;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZKBan_IsBanned) == 0x000008, "Wrong alignment on ZKBan_IsBanned");
static_assert(sizeof(ZKBan_IsBanned) == 0x000028, "Wrong size on ZKBan_IsBanned");
static_assert(offsetof(ZKBan_IsBanned, UniqueId) == 0x000000, "Member 'ZKBan_IsBanned::UniqueId' has a wrong offset!");
static_assert(offsetof(ZKBan_IsBanned, OutBanReason) == 0x000010, "Member 'ZKBan_IsBanned::OutBanReason' has a wrong offset!");
static_assert(offsetof(ZKBan_IsBanned, ReturnValue) == 0x000020, "Member 'ZKBan_IsBanned::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKCommands.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKCommands_Get final
{
public:
	class UZKCommands*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKCommands_Get) == 0x000008, "Wrong alignment on ZKCommands_Get");
static_assert(sizeof(ZKCommands_Get) == 0x000008, "Wrong size on ZKCommands_Get");
static_assert(offsetof(ZKCommands_Get, ReturnValue) == 0x000000, "Member 'ZKCommands_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKMapList.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKMapList_Get final
{
public:
	class UZKMapList*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKMapList_Get) == 0x000008, "Wrong alignment on ZKMapList_Get");
static_assert(sizeof(ZKMapList_Get) == 0x000008, "Wrong size on ZKMapList_Get");
static_assert(offsetof(ZKMapList_Get, ReturnValue) == 0x000000, "Member 'ZKMapList_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKServer_Get final
{
public:
	class UZKServer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_Get) == 0x000008, "Wrong alignment on ZKServer_Get");
static_assert(sizeof(ZKServer_Get) == 0x000008, "Wrong size on ZKServer_Get");
static_assert(offsetof(ZKServer_Get, ReturnValue) == 0x000000, "Member 'ZKServer_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetMatchInfoSettingsAsLines
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetMatchInfoSettingsAsLines final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetMatchInfoSettingsAsLines) == 0x000008, "Wrong alignment on ZKServer_GetMatchInfoSettingsAsLines");
static_assert(sizeof(ZKServer_GetMatchInfoSettingsAsLines) == 0x000010, "Wrong size on ZKServer_GetMatchInfoSettingsAsLines");
static_assert(offsetof(ZKServer_GetMatchInfoSettingsAsLines, ReturnValue) == 0x000000, "Member 'ZKServer_GetMatchInfoSettingsAsLines::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.HasWhiteList
// 0x0001 (0x0001 - 0x0000)
struct ZKServer_HasWhiteList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_HasWhiteList) == 0x000001, "Wrong alignment on ZKServer_HasWhiteList");
static_assert(sizeof(ZKServer_HasWhiteList) == 0x000001, "Wrong size on ZKServer_HasWhiteList");
static_assert(offsetof(ZKServer_HasWhiteList, ReturnValue) == 0x000000, "Member 'ZKServer_HasWhiteList::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.SetMatchInfoSettingsAsLines
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_SetMatchInfoSettingsAsLines final
{
public:
	TArray<class FString>                         Lines;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_SetMatchInfoSettingsAsLines) == 0x000008, "Wrong alignment on ZKServer_SetMatchInfoSettingsAsLines");
static_assert(sizeof(ZKServer_SetMatchInfoSettingsAsLines) == 0x000010, "Wrong size on ZKServer_SetMatchInfoSettingsAsLines");
static_assert(offsetof(ZKServer_SetMatchInfoSettingsAsLines, Lines) == 0x000000, "Member 'ZKServer_SetMatchInfoSettingsAsLines::Lines' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetMaxPlayers
// 0x0004 (0x0004 - 0x0000)
struct ZKServer_GetMaxPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetMaxPlayers) == 0x000004, "Wrong alignment on ZKServer_GetMaxPlayers");
static_assert(sizeof(ZKServer_GetMaxPlayers) == 0x000004, "Wrong size on ZKServer_GetMaxPlayers");
static_assert(offsetof(ZKServer_GetMaxPlayers, ReturnValue) == 0x000000, "Member 'ZKServer_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetMaxSpectators
// 0x0004 (0x0004 - 0x0000)
struct ZKServer_GetMaxSpectators final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetMaxSpectators) == 0x000004, "Wrong alignment on ZKServer_GetMaxSpectators");
static_assert(sizeof(ZKServer_GetMaxSpectators) == 0x000004, "Wrong size on ZKServer_GetMaxSpectators");
static_assert(offsetof(ZKServer_GetMaxSpectators, ReturnValue) == 0x000000, "Member 'ZKServer_GetMaxSpectators::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetReadyCountdownTime
// 0x0004 (0x0004 - 0x0000)
struct ZKServer_GetReadyCountdownTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetReadyCountdownTime) == 0x000004, "Wrong alignment on ZKServer_GetReadyCountdownTime");
static_assert(sizeof(ZKServer_GetReadyCountdownTime) == 0x000004, "Wrong size on ZKServer_GetReadyCountdownTime");
static_assert(offsetof(ZKServer_GetReadyCountdownTime, ReturnValue) == 0x000000, "Member 'ZKServer_GetReadyCountdownTime::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetServerMOTD
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetServerMOTD final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetServerMOTD) == 0x000008, "Wrong alignment on ZKServer_GetServerMOTD");
static_assert(sizeof(ZKServer_GetServerMOTD) == 0x000010, "Wrong size on ZKServer_GetServerMOTD");
static_assert(offsetof(ZKServer_GetServerMOTD, ReturnValue) == 0x000000, "Member 'ZKServer_GetServerMOTD::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetServerName
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetServerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetServerName) == 0x000008, "Wrong alignment on ZKServer_GetServerName");
static_assert(sizeof(ZKServer_GetServerName) == 0x000010, "Wrong size on ZKServer_GetServerName");
static_assert(offsetof(ZKServer_GetServerName, ReturnValue) == 0x000000, "Member 'ZKServer_GetServerName::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetServerPassword
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetServerPassword final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetServerPassword) == 0x000008, "Wrong alignment on ZKServer_GetServerPassword");
static_assert(sizeof(ZKServer_GetServerPassword) == 0x000010, "Wrong size on ZKServer_GetServerPassword");
static_assert(offsetof(ZKServer_GetServerPassword, ReturnValue) == 0x000000, "Member 'ZKServer_GetServerPassword::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetServerShutdownSchedule
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetServerShutdownSchedule final
{
public:
	struct FGBServerShutdownSchedule              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetServerShutdownSchedule) == 0x000004, "Wrong alignment on ZKServer_GetServerShutdownSchedule");
static_assert(sizeof(ZKServer_GetServerShutdownSchedule) == 0x000010, "Wrong size on ZKServer_GetServerShutdownSchedule");
static_assert(offsetof(ZKServer_GetServerShutdownSchedule, ReturnValue) == 0x000000, "Member 'ZKServer_GetServerShutdownSchedule::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetServerWebBanner
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetServerWebBanner final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetServerWebBanner) == 0x000008, "Wrong alignment on ZKServer_GetServerWebBanner");
static_assert(sizeof(ZKServer_GetServerWebBanner) == 0x000010, "Wrong size on ZKServer_GetServerWebBanner");
static_assert(offsetof(ZKServer_GetServerWebBanner, ReturnValue) == 0x000000, "Member 'ZKServer_GetServerWebBanner::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKServer.GetSpectatorOnlyPassword
// 0x0010 (0x0010 - 0x0000)
struct ZKServer_GetSpectatorOnlyPassword final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKServer_GetSpectatorOnlyPassword) == 0x000008, "Wrong alignment on ZKServer_GetSpectatorOnlyPassword");
static_assert(sizeof(ZKServer_GetSpectatorOnlyPassword) == 0x000010, "Wrong size on ZKServer_GetSpectatorOnlyPassword");
static_assert(offsetof(ZKServer_GetSpectatorOnlyPassword, ReturnValue) == 0x000000, "Member 'ZKServer_GetSpectatorOnlyPassword::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKTeamKill.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKTeamKill_Get final
{
public:
	class UZKTeamKill*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKTeamKill_Get) == 0x000008, "Wrong alignment on ZKTeamKill_Get");
static_assert(sizeof(ZKTeamKill_Get) == 0x000008, "Wrong size on ZKTeamKill_Get");
static_assert(offsetof(ZKTeamKill_Get, ReturnValue) == 0x000000, "Member 'ZKTeamKill_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKTeamKill.AddTeamKill
// 0x0040 (0x0040 - 0x0000)
struct ZKTeamKill_AddTeamKill final
{
public:
	class FString                                 TeamKillerUniqueId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamKillerName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VictimUniqueId;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VictimName;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKTeamKill_AddTeamKill) == 0x000008, "Wrong alignment on ZKTeamKill_AddTeamKill");
static_assert(sizeof(ZKTeamKill_AddTeamKill) == 0x000040, "Wrong size on ZKTeamKill_AddTeamKill");
static_assert(offsetof(ZKTeamKill_AddTeamKill, TeamKillerUniqueId) == 0x000000, "Member 'ZKTeamKill_AddTeamKill::TeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_AddTeamKill, TeamKillerName) == 0x000010, "Member 'ZKTeamKill_AddTeamKill::TeamKillerName' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_AddTeamKill, VictimUniqueId) == 0x000020, "Member 'ZKTeamKill_AddTeamKill::VictimUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_AddTeamKill, VictimName) == 0x000030, "Member 'ZKTeamKill_AddTeamKill::VictimName' has a wrong offset!");

// Function RBZooKeeper.ZKTeamKill.ForgiveTeamKill
// 0x0020 (0x0020 - 0x0000)
struct ZKTeamKill_ForgiveTeamKill final
{
public:
	class FString                                 TeamKillerUniqueId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VictimUniqueId;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKTeamKill_ForgiveTeamKill) == 0x000008, "Wrong alignment on ZKTeamKill_ForgiveTeamKill");
static_assert(sizeof(ZKTeamKill_ForgiveTeamKill) == 0x000020, "Wrong size on ZKTeamKill_ForgiveTeamKill");
static_assert(offsetof(ZKTeamKill_ForgiveTeamKill, TeamKillerUniqueId) == 0x000000, "Member 'ZKTeamKill_ForgiveTeamKill::TeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_ForgiveTeamKill, VictimUniqueId) == 0x000010, "Member 'ZKTeamKill_ForgiveTeamKill::VictimUniqueId' has a wrong offset!");

// Function RBZooKeeper.ZKTeamKill.ReportTeamKill
// 0x0020 (0x0020 - 0x0000)
struct ZKTeamKill_ReportTeamKill final
{
public:
	class FString                                 TeamKillerUniqueId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VictimUniqueId;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKTeamKill_ReportTeamKill) == 0x000008, "Wrong alignment on ZKTeamKill_ReportTeamKill");
static_assert(sizeof(ZKTeamKill_ReportTeamKill) == 0x000020, "Wrong size on ZKTeamKill_ReportTeamKill");
static_assert(offsetof(ZKTeamKill_ReportTeamKill, TeamKillerUniqueId) == 0x000000, "Member 'ZKTeamKill_ReportTeamKill::TeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_ReportTeamKill, VictimUniqueId) == 0x000010, "Member 'ZKTeamKill_ReportTeamKill::VictimUniqueId' has a wrong offset!");

// Function RBZooKeeper.ZKTeamKill.GetTeamKills
// 0x0028 (0x0028 - 0x0000)
struct ZKTeamKill_GetTeamKills final
{
public:
	class FString                                 TeamKillerUniqueId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VictimUniqueId;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinusForgives;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKTeamKill_GetTeamKills) == 0x000008, "Wrong alignment on ZKTeamKill_GetTeamKills");
static_assert(sizeof(ZKTeamKill_GetTeamKills) == 0x000028, "Wrong size on ZKTeamKill_GetTeamKills");
static_assert(offsetof(ZKTeamKill_GetTeamKills, TeamKillerUniqueId) == 0x000000, "Member 'ZKTeamKill_GetTeamKills::TeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_GetTeamKills, VictimUniqueId) == 0x000010, "Member 'ZKTeamKill_GetTeamKills::VictimUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_GetTeamKills, bMinusForgives) == 0x000020, "Member 'ZKTeamKill_GetTeamKills::bMinusForgives' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_GetTeamKills, ReturnValue) == 0x000024, "Member 'ZKTeamKill_GetTeamKills::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKTeamKill.GetTotalTeamKills
// 0x0018 (0x0018 - 0x0000)
struct ZKTeamKill_GetTotalTeamKills final
{
public:
	class FString                                 TeamKillerUniqueId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinusForgives;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKTeamKill_GetTotalTeamKills) == 0x000008, "Wrong alignment on ZKTeamKill_GetTotalTeamKills");
static_assert(sizeof(ZKTeamKill_GetTotalTeamKills) == 0x000018, "Wrong size on ZKTeamKill_GetTotalTeamKills");
static_assert(offsetof(ZKTeamKill_GetTotalTeamKills, TeamKillerUniqueId) == 0x000000, "Member 'ZKTeamKill_GetTotalTeamKills::TeamKillerUniqueId' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_GetTotalTeamKills, bMinusForgives) == 0x000010, "Member 'ZKTeamKill_GetTotalTeamKills::bMinusForgives' has a wrong offset!");
static_assert(offsetof(ZKTeamKill_GetTotalTeamKills, ReturnValue) == 0x000014, "Member 'ZKTeamKill_GetTotalTeamKills::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKVote.Get
// 0x0008 (0x0008 - 0x0000)
struct ZKVote_Get final
{
public:
	class UZKVote*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKVote_Get) == 0x000008, "Wrong alignment on ZKVote_Get");
static_assert(sizeof(ZKVote_Get) == 0x000008, "Wrong size on ZKVote_Get");
static_assert(offsetof(ZKVote_Get, ReturnValue) == 0x000000, "Member 'ZKVote_Get::ReturnValue' has a wrong offset!");

// Function RBZooKeeper.ZKVote.EndVote
// 0x0001 (0x0001 - 0x0000)
struct ZKVote_EndVote final
{
public:
	bool                                          bPassed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKVote_EndVote) == 0x000001, "Wrong alignment on ZKVote_EndVote");
static_assert(sizeof(ZKVote_EndVote) == 0x000001, "Wrong size on ZKVote_EndVote");
static_assert(offsetof(ZKVote_EndVote, bPassed) == 0x000000, "Member 'ZKVote_EndVote::bPassed' has a wrong offset!");

// Function RBZooKeeper.ZKVote.ReportPlayStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ZKVote_ReportPlayStateChanged final
{
public:
	bool                                          bPlaying;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKVote_ReportPlayStateChanged) == 0x000001, "Wrong alignment on ZKVote_ReportPlayStateChanged");
static_assert(sizeof(ZKVote_ReportPlayStateChanged) == 0x000001, "Wrong size on ZKVote_ReportPlayStateChanged");
static_assert(offsetof(ZKVote_ReportPlayStateChanged, bPlaying) == 0x000000, "Member 'ZKVote_ReportPlayStateChanged::bPlaying' has a wrong offset!");

// Function RBZooKeeper.ZKVote.StartVote
// 0x0028 (0x0028 - 0x0000)
struct ZKVote_StartVote final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameters;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKVote_StartVote) == 0x000008, "Wrong alignment on ZKVote_StartVote");
static_assert(sizeof(ZKVote_StartVote) == 0x000028, "Wrong size on ZKVote_StartVote");
static_assert(offsetof(ZKVote_StartVote, PlayerController) == 0x000000, "Member 'ZKVote_StartVote::PlayerController' has a wrong offset!");
static_assert(offsetof(ZKVote_StartVote, Command) == 0x000008, "Member 'ZKVote_StartVote::Command' has a wrong offset!");
static_assert(offsetof(ZKVote_StartVote, Parameters) == 0x000018, "Member 'ZKVote_StartVote::Parameters' has a wrong offset!");

// Function RBZooKeeper.ZKVote.VoteCommand
// 0x0018 (0x0018 - 0x0000)
struct ZKVote_VoteCommand final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameters;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKVote_VoteCommand) == 0x000008, "Wrong alignment on ZKVote_VoteCommand");
static_assert(sizeof(ZKVote_VoteCommand) == 0x000018, "Wrong size on ZKVote_VoteCommand");
static_assert(offsetof(ZKVote_VoteCommand, PlayerController) == 0x000000, "Member 'ZKVote_VoteCommand::PlayerController' has a wrong offset!");
static_assert(offsetof(ZKVote_VoteCommand, Parameters) == 0x000008, "Member 'ZKVote_VoteCommand::Parameters' has a wrong offset!");

// Function RBZooKeeper.ZKVote.GetAllowVotesWhenAdminPresent
// 0x0001 (0x0001 - 0x0000)
struct ZKVote_GetAllowVotesWhenAdminPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZKVote_GetAllowVotesWhenAdminPresent) == 0x000001, "Wrong alignment on ZKVote_GetAllowVotesWhenAdminPresent");
static_assert(sizeof(ZKVote_GetAllowVotesWhenAdminPresent) == 0x000001, "Wrong size on ZKVote_GetAllowVotesWhenAdminPresent");
static_assert(offsetof(ZKVote_GetAllowVotesWhenAdminPresent, ReturnValue) == 0x000000, "Member 'ZKVote_GetAllowVotesWhenAdminPresent::ReturnValue' has a wrong offset!");

}

