#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HardwareMonAndCompare

#include "Basic.hpp"


namespace SDK
{

// Enum HardwareMonAndCompare.EHardwareInfo
// NumValues: 0x0018
enum class EHardwareInfo : uint8
{
	E_CPUName                                = 0,
	E_CPUChipset                             = 1,
	E_CPUInfo                                = 2,
	E_CPUVendor                              = 3,
	E_CPUCores                               = 4,
	E_CPUThreads                             = 5,
	E_GPUName                                = 6,
	E_GPUDescription                         = 7,
	E_GPUProvider                            = 8,
	E_GPUDriverI                             = 9,
	E_GPUDriverU                             = 10,
	E_GPUDriverDate                          = 11,
	E_GPURHIName                             = 12,
	E_OS                                     = 13,
	E_ComputerName                           = 14,
	E_UserName                               = 15,
	E_DeviceID                               = 16,
	E_DeviceModel                            = 17,
	E_DeviceOrientation                      = 18,
	E_DeviceTemperature                      = 19,
	E_DeviceVolume                           = 20,
	E_Brightness                             = 21,
	E_BatteryLevel                           = 22,
	E_MAX                                    = 23,
};

// Enum HardwareMonAndCompare.EHardwareMonAndCompareProcessDirectoryType
// NumValues: 0x0004
enum class EHardwareMonAndCompareProcessDirectoryType : uint8
{
	E_asitis                                 = 0,
	E_gd                                     = 1,
	E_ad                                     = 2,
	E_MAX                                    = 3,
};

// Enum HardwareMonAndCompare.EHardwareMonAndCompareFilaDialogInitDirType
// NumValues: 0x0003
enum class EHardwareMonAndCompareFilaDialogInitDirType : uint8
{
	E_drive_letter                           = 0,
	E_folder_name                            = 1,
	E_MAX                                    = 2,
};

// Enum HardwareMonAndCompare.EHardwareMonAndCompareFilaDialogType
// NumValues: 0x0003
enum class EHardwareMonAndCompareFilaDialogType : uint8
{
	E_file                                   = 0,
	E_folder                                 = 1,
	E_MAX                                    = 2,
};

// Enum HardwareMonAndCompare.EFileFunctionsHardwareMonAndCompareEncodingOptions
// NumValues: 0x0006
enum class EFileFunctionsHardwareMonAndCompareEncodingOptions : uint8
{
	E_AutoDetect                             = 0,
	E_ForceAnsi                              = 1,
	E_ForceUnicode                           = 2,
	E_ForceUTF8                              = 3,
	E_ForceUTF8WithoutBOM                    = 4,
	E_MAX                                    = 5,
};

// Enum HardwareMonAndCompare.EFileFunctionsHardwareMonAndCompareDirectoryType
// NumValues: 0x0003
enum class EFileFunctionsHardwareMonAndCompareDirectoryType : uint8
{
	E_gd                                     = 0,
	E_ad                                     = 1,
	E_MAX                                    = 2,
};

// Enum HardwareMonAndCompare.EHardwareInfoByTime
// NumValues: 0x0006
enum class EHardwareInfoByTime : uint8
{
	E_FPSFrameTime                           = 0,
	E_FPS                                    = 1,
	E_Frametime                              = 2,
	E_CPUUsage                               = 3,
	E_GPUUsage                               = 4,
	E_MAX                                    = 5,
};

// Enum HardwareMonAndCompare.EHardwareInfoSort
// NumValues: 0x0003
enum class EHardwareInfoSort : uint8
{
	E_AS                                     = 0,
	E_DS                                     = 1,
	E_MAX                                    = 2,
};

// ScriptStruct HardwareMonAndCompare.SSystemUsage
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FSSystemUsage final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSystemUsage) == 0x000008, "Wrong alignment on FSSystemUsage");
static_assert(sizeof(FSSystemUsage) == 0x0000B8, "Wrong size on FSSystemUsage");

// ScriptStruct HardwareMonAndCompare.CPUListStruct
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FCPUListStruct final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCPUListStruct) == 0x000008, "Wrong alignment on FCPUListStruct");
static_assert(sizeof(FCPUListStruct) == 0x000040, "Wrong size on FCPUListStruct");

// ScriptStruct HardwareMonAndCompare.SDriveInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSDriveInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSDriveInfo) == 0x000008, "Wrong alignment on FSDriveInfo");
static_assert(sizeof(FSDriveInfo) == 0x000030, "Wrong size on FSDriveInfo");

// ScriptStruct HardwareMonAndCompare.GPUListStruct
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGPUListStruct final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGPUListStruct) == 0x000008, "Wrong alignment on FGPUListStruct");
static_assert(sizeof(FGPUListStruct) == 0x000020, "Wrong size on FGPUListStruct");

}

