#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadCursor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass GamepadCursor.GamepadCursor_C
// 0x0030 (0x0290 - 0x0260)
class UGamepadCursor_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FadeRing;                                          // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rotate;                                            // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_74;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ring;                                              // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Spinning;                                          // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpinningAnimationTime;                             // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GamepadCursor(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GamepadCursor_C">();
	}
	static class UGamepadCursor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGamepadCursor_C>();
	}
};
static_assert(alignof(UGamepadCursor_C) == 0x000008, "Wrong alignment on UGamepadCursor_C");
static_assert(sizeof(UGamepadCursor_C) == 0x000290, "Wrong size on UGamepadCursor_C");
static_assert(offsetof(UGamepadCursor_C, UberGraphFrame) == 0x000260, "Member 'UGamepadCursor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGamepadCursor_C, FadeRing) == 0x000268, "Member 'UGamepadCursor_C::FadeRing' has a wrong offset!");
static_assert(offsetof(UGamepadCursor_C, Rotate) == 0x000270, "Member 'UGamepadCursor_C::Rotate' has a wrong offset!");
static_assert(offsetof(UGamepadCursor_C, Image_74) == 0x000278, "Member 'UGamepadCursor_C::Image_74' has a wrong offset!");
static_assert(offsetof(UGamepadCursor_C, Ring) == 0x000280, "Member 'UGamepadCursor_C::Ring' has a wrong offset!");
static_assert(offsetof(UGamepadCursor_C, Spinning) == 0x000288, "Member 'UGamepadCursor_C::Spinning' has a wrong offset!");
static_assert(offsetof(UGamepadCursor_C, SpinningAnimationTime) == 0x00028C, "Member 'UGamepadCursor_C::SpinningAnimationTime' has a wrong offset!");

}

