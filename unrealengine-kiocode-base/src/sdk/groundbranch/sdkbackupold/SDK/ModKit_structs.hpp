#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModKit

#include "Basic.hpp"


namespace SDK
{

// Enum ModKit.EModPathBranchPaths
// NumValues: 0x0003
enum class EModPathBranchPaths : uint8
{
	Mod                                      = 0,
	Game                                     = 1,
	EModPathBranchPaths_MAX                  = 2,
};

// Enum ModKit.EModIDBranchPaths
// NumValues: 0x0004
enum class EModIDBranchPaths : uint8
{
	Mod                                      = 0,
	Stage                                    = 1,
	Game                                     = 2,
	EModIDBranchPaths_MAX                    = 3,
};

// Enum ModKit.EModType
// NumValues: 0x0004
enum class EModType : uint8
{
	Content                                  = 0,
	Map                                      = 1,
	NonAsset                                 = 2,
	EModType_MAX                             = 3,
};

// ScriptStruct ModKit.ModMetadata
// 0x0060 (0x0060 - 0x0000)
struct FModMetadata final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PluginName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        RawWorkshopID;                                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModType                                      ModType;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        SizeInBytes;                                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildNumber;                                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModMetadata) == 0x000008, "Wrong alignment on FModMetadata");
static_assert(sizeof(FModMetadata) == 0x000060, "Wrong size on FModMetadata");
static_assert(offsetof(FModMetadata, Title) == 0x000000, "Member 'FModMetadata::Title' has a wrong offset!");
static_assert(offsetof(FModMetadata, Description) == 0x000010, "Member 'FModMetadata::Description' has a wrong offset!");
static_assert(offsetof(FModMetadata, CreatedBy) == 0x000020, "Member 'FModMetadata::CreatedBy' has a wrong offset!");
static_assert(offsetof(FModMetadata, PluginName) == 0x000030, "Member 'FModMetadata::PluginName' has a wrong offset!");
static_assert(offsetof(FModMetadata, RawWorkshopID) == 0x000040, "Member 'FModMetadata::RawWorkshopID' has a wrong offset!");
static_assert(offsetof(FModMetadata, ModType) == 0x000048, "Member 'FModMetadata::ModType' has a wrong offset!");
static_assert(offsetof(FModMetadata, SizeInBytes) == 0x000050, "Member 'FModMetadata::SizeInBytes' has a wrong offset!");
static_assert(offsetof(FModMetadata, BuildNumber) == 0x000058, "Member 'FModMetadata::BuildNumber' has a wrong offset!");

// ScriptStruct ModKit.RuntimeModWorkshopInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FRuntimeModWorkshopInfo final
{
public:
	struct FModMetadata                           MetaData;                                          // 0x0000(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailPath;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentPath;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChangeNotes;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TagList;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeModWorkshopInfo) == 0x000008, "Wrong alignment on FRuntimeModWorkshopInfo");
static_assert(sizeof(FRuntimeModWorkshopInfo) == 0x0000A0, "Wrong size on FRuntimeModWorkshopInfo");
static_assert(offsetof(FRuntimeModWorkshopInfo, MetaData) == 0x000000, "Member 'FRuntimeModWorkshopInfo::MetaData' has a wrong offset!");
static_assert(offsetof(FRuntimeModWorkshopInfo, ThumbnailPath) == 0x000060, "Member 'FRuntimeModWorkshopInfo::ThumbnailPath' has a wrong offset!");
static_assert(offsetof(FRuntimeModWorkshopInfo, ContentPath) == 0x000070, "Member 'FRuntimeModWorkshopInfo::ContentPath' has a wrong offset!");
static_assert(offsetof(FRuntimeModWorkshopInfo, ChangeNotes) == 0x000080, "Member 'FRuntimeModWorkshopInfo::ChangeNotes' has a wrong offset!");
static_assert(offsetof(FRuntimeModWorkshopInfo, TagList) == 0x000090, "Member 'FRuntimeModWorkshopInfo::TagList' has a wrong offset!");

// ScriptStruct ModKit.UInt64
// 0x0008 (0x0008 - 0x0000)
struct FUInt64 final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUInt64) == 0x000008, "Wrong alignment on FUInt64");
static_assert(sizeof(FUInt64) == 0x000008, "Wrong size on FUInt64");
static_assert(offsetof(FUInt64, Value) == 0x000000, "Member 'FUInt64::Value' has a wrong offset!");

}

