#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Handgun_AnimLayerBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK::Params
{

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.ExecuteUbergraph_ABP_Handgun_AnimLayerBase
// 0x00E0 (0x00E0 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Base_C*                            K2Node_DynamicCast_AsABP_Base;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase) == 0x000010, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase) == 0x0000E0, "Wrong size on ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, EntryPoint) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_GetOwningComponent_ReturnValue) == 0x000008, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, K2Node_DynamicCast_AsABP_Base) == 0x000018, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::K2Node_DynamicCast_AsABP_Base' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_GetOwningComponent_ReturnValue_1) == 0x000028, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_GetOwningComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000060, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_BreakTransform_Location) == 0x000090, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_BreakTransform_Location_1) == 0x0000B4, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_BreakTransform_Rotation_1) == 0x0000C0, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase, CallFunc_BreakTransform_Scale_1) == 0x0000CC, "Member 'ABP_Handgun_AnimLayerBase_C_ExecuteUbergraph_ABP_Handgun_AnimLayerBase::CallFunc_BreakTransform_Scale_1' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.UpdateCycleAnim
// 0x000C (0x000C - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim) == 0x000004, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim) == 0x00000C, "Wrong size on ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim, DeltaTime) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateCycleAnim::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.UpdateOrientationWarping
// 0x0008 (0x0008 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedLocalVelocityDirectionAngle;                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping) == 0x000004, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping) == 0x000008, "Wrong size on ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping, DeltaTime) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping, CachedLocalVelocityDirectionAngle) == 0x000004, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateOrientationWarping::CachedLocalVelocityDirectionAngle' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.UpdateFirearmData
// 0x0108 (0x0108 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_UpdateFirearmData final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalScaledOffTargetAlpha;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalPitchThreshold;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             CallFunc_GetEquipped_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBFirearm*                             K2Node_DynamicCast_AsGBFirearm;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCollisionTraceEndOffset_ReturnValue;   // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBSightComponent*                      CallFunc_GetCurrentSight_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGBSightLineInfo                       CallFunc_GetSightLineInfo_ReturnValue;             // 0x0098(0x0054)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_UpdateFirearmData");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData) == 0x000108, "Wrong size on ABP_Handgun_AnimLayerBase_C_UpdateFirearmData");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, DeltaTime) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, LocalScaledOffTargetAlpha) == 0x000004, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::LocalScaledOffTargetAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, LocalPitchThreshold) == 0x000008, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::LocalPitchThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_BreakRotator_Roll) == 0x00000C, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_BreakRotator_Pitch) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_BreakRotator_Yaw) == 0x000014, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Abs_ReturnValue) == 0x000020, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_BreakRotator_Roll_1) == 0x000030, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_BreakRotator_Pitch_1) == 0x000034, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_BreakRotator_Yaw_1) == 0x000038, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_FMin_ReturnValue) == 0x00003C, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000040, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000044, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_MakeRotator_ReturnValue) == 0x000048, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000058, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, K2Node_DynamicCast_AsGBCharacter) == 0x000060, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_GetEquipped_ReturnValue) == 0x000070, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_GetEquipped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, K2Node_DynamicCast_AsGBFirearm) == 0x000078, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::K2Node_DynamicCast_AsGBFirearm' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_GetCollisionTraceEndOffset_ReturnValue) == 0x000084, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_GetCollisionTraceEndOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_GetCurrentSight_ReturnValue) == 0x000090, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_GetCurrentSight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_GetSightLineInfo_ReturnValue) == 0x000098, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_GetSightLineInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_IsValid_ReturnValue_1) == 0x0000EC, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_RInterpTo_ReturnValue) == 0x0000F0, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_UpdateFirearmData, CallFunc_VInterpTo_ReturnValue) == 0x0000FC, "Member 'ABP_Handgun_AnimLayerBase_C_UpdateFirearmData::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_AnimGraph");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_AnimGraph) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_AnimGraph");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_CycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_CycleState final
{
public:
	struct FPoseLink                              FullBody_CycleState_0;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_CycleState) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_CycleState");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_CycleState) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_CycleState");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_CycleState, FullBody_CycleState_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_CycleState::FullBody_CycleState_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_IdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_IdleState final
{
public:
	struct FPoseLink                              FullBody_IdleState_0;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_IdleState) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_IdleState");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_IdleState) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_IdleState");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_IdleState, FullBody_IdleState_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_IdleState::FullBody_IdleState_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.HandPose_OverrideState
// 0x0020 (0x0020 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState final
{
public:
	struct FPoseLink                              InLocomotion;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandPose_OverrideState_0;                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState) == 0x000020, "Wrong size on ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState, InLocomotion) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState::InLocomotion' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState, HandPose_OverrideState_0) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_HandPose_OverrideState::HandPose_OverrideState_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_Aiming
// 0x0020 (0x0020 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_Aiming final
{
public:
	struct FPoseLink                              InUpperbodyLowerbodySplit;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_Aiming_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_Aiming) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_Aiming");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_Aiming) == 0x000020, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_Aiming");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_Aiming, InUpperbodyLowerbodySplit) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_Aiming::InUpperbodyLowerbodySplit' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_Aiming, FullBody_Aiming_0) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_Aiming::FullBody_Aiming_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_Additives
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_Additives final
{
public:
	struct FPoseLink                              FullBody_Additives_0;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_Additives) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_Additives");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_Additives) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_Additives");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_Additives, FullBody_Additives_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_Additives::FullBody_Additives_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_SkeletalControls
// 0x0020 (0x0020 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls final
{
public:
	struct FPoseLink                              InNearFinal;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_SkeletalControls_0;                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls) == 0x000020, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls, InNearFinal) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls::InNearFinal' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls, FullBody_SkeletalControls_0) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_SkeletalControls::FullBody_SkeletalControls_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_PreAim
// 0x0020 (0x0020 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_PreAim final
{
public:
	struct FPoseLink                              InPreAim;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_PreAim_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_PreAim) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_PreAim");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_PreAim) == 0x000020, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_PreAim");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_PreAim, InPreAim) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_PreAim::InPreAim' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_PreAim, FullBody_PreAim_0) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_PreAim::FullBody_PreAim_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_ProneIdleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState final
{
public:
	struct FPoseLink                              FullBody_ProneIdleState_0;                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState, FullBody_ProneIdleState_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_ProneIdleState::FullBody_ProneIdleState_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_ProneCycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState final
{
public:
	struct FPoseLink                              FullBody_ProneCycleState_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState, FullBody_ProneCycleState_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_ProneCycleState::FullBody_ProneCycleState_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.FullBody_SprintCycleState
// 0x0010 (0x0010 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState final
{
public:
	struct FPoseLink                              FullBody_SprintCycleState_0;                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState) == 0x000010, "Wrong size on ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState, FullBody_SprintCycleState_0) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_FullBody_SprintCycleState::FullBody_SprintCycleState_0' has a wrong offset!");

// Function ABP_Handgun_AnimLayerBase.ABP_Handgun_AnimLayerBase_C.GetMontageFromLinkedLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer final
{
public:
	class FName                                   MontageName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer) == 0x000008, "Wrong alignment on ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer");
static_assert(sizeof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer) == 0x000020, "Wrong size on ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, MontageName) == 0x000000, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::MontageName' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, ReturnValue) == 0x000008, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, Temp_bool_Variable) == 0x000010, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, K2Node_SwitchName_CmpSuccess) == 0x000011, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000013, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer, K2Node_Select_Default) == 0x000018, "Member 'ABP_Handgun_AnimLayerBase_C_GetMontageFromLinkedLayer::K2Node_Select_Default' has a wrong offset!");

}

