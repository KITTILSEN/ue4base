#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DoorSwinging_Generic

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DoorSwinging_Generic.BP_DoorSwinging_Generic_C
// 0x0160 (0x04E8 - 0x0388)
class ABP_DoorSwinging_Generic_C final : public AGBDoorSwinging
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UKytNavObjectComponent*                 KytNavObject;                                      // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftHandleComp;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightHandleComp;                                   // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Pitch_865F14C04CDA438197343273680DE0FC; // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_865F14C04CDA438197343273680DE0FC; // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Pitch_FBAFD3F138D749BC8BFAEA6A32551916; // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_FBAFD3F138D749BC8BFAEA6A32551916; // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AkSwitchInfo;                                      // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_PlayDoorSoundLeft;                     // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComponentLeft;                                   // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UAkAudioEvent*>             LeftPlayingIDToEventMap;                           // 0x03E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandle_PlayDoorSoundRight;                    // 0x0438(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkComponentRight;                                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UAkAudioEvent*>             RightPlayingIDToEventMap;                          // 0x0448(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SqueakYawSpeedThreshold;                           // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckForSqueak;                                   // 0x049C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayingSqueak;                                    // 0x049D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49E[0x2];                                      // 0x049E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        DestroyedDoorFX;                                   // 0x04A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         DestroyedDoorFXRef;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SwingingDoorSoundType;                             // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            LeftHandleMesh;                                    // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            RightHandleMesh;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Handle_Cull_Distance;                              // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldNavMeshRegen;                               // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSeparationOfAcousticPortalAndDoorCentres_Match; // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSeparationOfAcousticPortalAndDoorCentres_Verify; // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DoorSwinging_Generic(int32 EntryPoint);
	void BindServerAndLocalDelegates();
	void BindLocalOnlyDelegates();
	void AutodetectNearishAcousticPortal();
	void AutodetectAcousticPortal();
	void LoadDestructionFX();
	void OnDestroyDoorFXLoaded(class UObject* LoadedAsset);
	void OnDoorDestroyedEvent(const struct FVector& DamageOrigin, const struct FVector& DamageDir);
	void ReceiveTick(float DeltaSeconds);
	void AnimateHandleUse_Locked();
	void AnimateHandleUse_Normal();
	void PlayDoorSoundRightTimer_Event();
	void PlayDoorSoundLeftTimer_Event();
	void PlayDoorSoundRight(class UAkAudioEvent* AkEvent);
	void PlayDoorSoundLeft(class UAkAudioEvent* AkEvent);
	void OnStoppedMoving_Event_0(class AGBDoorSwinging* SwingingDoor);
	void OnStartedMoving_Event_0(class AGBDoorSwinging* SwingingDoor);
	void OnOpening_Event_0(class AGBDoorSwinging* SwingingDoor);
	void OnClosing_Event_0(class AGBDoorSwinging* SwingingDoor);
	void ReceiveBeginPlay();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void DetermineAkSwitchInfo(class UAkAudioBank** Bank, class FString* Switch_State_Name);
	void SetupMeshComp(class UStaticMeshComponent* StaticMeshComp, class UStaticMesh* StaticMesh, const struct FVector& RelativeLocation);
	void SetPlaceholderMeshes();
	void Reg_Kyt_Nav_Mesh();
	void Reset_Kyt_Nav_Link_Locations();
	void Reset_Nav_Regen();
	void ShowAllUnattachedAcousticPortals();
	void AutodetectBestMatchWithinDistance(float MaxDistanceToCheck);

	void GetCenterLocation(struct FVector* Center) const;
	void GetOutLocation(const struct FVector& UseLocation, class AActor* UseActor, struct FVector* Center) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DoorSwinging_Generic_C">();
	}
	static class ABP_DoorSwinging_Generic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DoorSwinging_Generic_C>();
	}
};
static_assert(alignof(ABP_DoorSwinging_Generic_C) == 0x000008, "Wrong alignment on ABP_DoorSwinging_Generic_C");
static_assert(sizeof(ABP_DoorSwinging_Generic_C) == 0x0004E8, "Wrong size on ABP_DoorSwinging_Generic_C");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, UberGraphFrame) == 0x000388, "Member 'ABP_DoorSwinging_Generic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, KytNavObject) == 0x000390, "Member 'ABP_DoorSwinging_Generic_C::KytNavObject' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, LeftHandleComp) == 0x000398, "Member 'ABP_DoorSwinging_Generic_C::LeftHandleComp' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, RightHandleComp) == 0x0003A0, "Member 'ABP_DoorSwinging_Generic_C::RightHandleComp' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Timeline_1_Pitch_865F14C04CDA438197343273680DE0FC) == 0x0003A8, "Member 'ABP_DoorSwinging_Generic_C::Timeline_1_Pitch_865F14C04CDA438197343273680DE0FC' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Timeline_1__Direction_865F14C04CDA438197343273680DE0FC) == 0x0003AC, "Member 'ABP_DoorSwinging_Generic_C::Timeline_1__Direction_865F14C04CDA438197343273680DE0FC' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Timeline_1) == 0x0003B0, "Member 'ABP_DoorSwinging_Generic_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Timeline_0_Pitch_FBAFD3F138D749BC8BFAEA6A32551916) == 0x0003B8, "Member 'ABP_DoorSwinging_Generic_C::Timeline_0_Pitch_FBAFD3F138D749BC8BFAEA6A32551916' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Timeline_0__Direction_FBAFD3F138D749BC8BFAEA6A32551916) == 0x0003BC, "Member 'ABP_DoorSwinging_Generic_C::Timeline_0__Direction_FBAFD3F138D749BC8BFAEA6A32551916' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Timeline_0) == 0x0003C0, "Member 'ABP_DoorSwinging_Generic_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, AkSwitchInfo) == 0x0003C8, "Member 'ABP_DoorSwinging_Generic_C::AkSwitchInfo' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, TimerHandle_PlayDoorSoundLeft) == 0x0003D8, "Member 'ABP_DoorSwinging_Generic_C::TimerHandle_PlayDoorSoundLeft' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, AkComponentLeft) == 0x0003E0, "Member 'ABP_DoorSwinging_Generic_C::AkComponentLeft' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, LeftPlayingIDToEventMap) == 0x0003E8, "Member 'ABP_DoorSwinging_Generic_C::LeftPlayingIDToEventMap' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, TimerHandle_PlayDoorSoundRight) == 0x000438, "Member 'ABP_DoorSwinging_Generic_C::TimerHandle_PlayDoorSoundRight' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, AkComponentRight) == 0x000440, "Member 'ABP_DoorSwinging_Generic_C::AkComponentRight' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, RightPlayingIDToEventMap) == 0x000448, "Member 'ABP_DoorSwinging_Generic_C::RightPlayingIDToEventMap' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, SqueakYawSpeedThreshold) == 0x000498, "Member 'ABP_DoorSwinging_Generic_C::SqueakYawSpeedThreshold' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, bCheckForSqueak) == 0x00049C, "Member 'ABP_DoorSwinging_Generic_C::bCheckForSqueak' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, bPlayingSqueak) == 0x00049D, "Member 'ABP_DoorSwinging_Generic_C::bPlayingSqueak' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, DestroyedDoorFX) == 0x0004A0, "Member 'ABP_DoorSwinging_Generic_C::DestroyedDoorFX' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, DestroyedDoorFXRef) == 0x0004B8, "Member 'ABP_DoorSwinging_Generic_C::DestroyedDoorFXRef' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, SwingingDoorSoundType) == 0x0004C0, "Member 'ABP_DoorSwinging_Generic_C::SwingingDoorSoundType' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, LeftHandleMesh) == 0x0004C8, "Member 'ABP_DoorSwinging_Generic_C::LeftHandleMesh' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, RightHandleMesh) == 0x0004D0, "Member 'ABP_DoorSwinging_Generic_C::RightHandleMesh' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, Handle_Cull_Distance) == 0x0004D8, "Member 'ABP_DoorSwinging_Generic_C::Handle_Cull_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, bShouldNavMeshRegen) == 0x0004DC, "Member 'ABP_DoorSwinging_Generic_C::bShouldNavMeshRegen' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, MaxSeparationOfAcousticPortalAndDoorCentres_Match) == 0x0004E0, "Member 'ABP_DoorSwinging_Generic_C::MaxSeparationOfAcousticPortalAndDoorCentres_Match' has a wrong offset!");
static_assert(offsetof(ABP_DoorSwinging_Generic_C, MaxSeparationOfAcousticPortalAndDoorCentres_Verify) == 0x0004E4, "Member 'ABP_DoorSwinging_Generic_C::MaxSeparationOfAcousticPortalAndDoorCentres_Verify' has a wrong offset!");

}

