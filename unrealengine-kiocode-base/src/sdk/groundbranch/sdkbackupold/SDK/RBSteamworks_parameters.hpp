#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBSteamworks

#include "Basic.hpp"

#include "RBSteamworks_structs.hpp"


namespace SDK::Params
{

// Function RBSteamworks.RBQueryServer.RequestServerDetails
// 0x0008 (0x0008 - 0x0000)
struct RBQueryServer_RequestServerDetails final
{
public:
	struct FServerNetAddress                      ServerNetAddress;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQueryServer_RequestServerDetails) == 0x000004, "Wrong alignment on RBQueryServer_RequestServerDetails");
static_assert(sizeof(RBQueryServer_RequestServerDetails) == 0x000008, "Wrong size on RBQueryServer_RequestServerDetails");
static_assert(offsetof(RBQueryServer_RequestServerDetails, ServerNetAddress) == 0x000000, "Member 'RBQueryServer_RequestServerDetails::ServerNetAddress' has a wrong offset!");

// Function RBSteamworks.RBQueryServer.RequestServerDetailsFromConnectionString
// 0x0010 (0x0010 - 0x0000)
struct RBQueryServer_RequestServerDetailsFromConnectionString final
{
public:
	class FString                                 IPConnectionString;                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQueryServer_RequestServerDetailsFromConnectionString) == 0x000008, "Wrong alignment on RBQueryServer_RequestServerDetailsFromConnectionString");
static_assert(sizeof(RBQueryServer_RequestServerDetailsFromConnectionString) == 0x000010, "Wrong size on RBQueryServer_RequestServerDetailsFromConnectionString");
static_assert(offsetof(RBQueryServer_RequestServerDetailsFromConnectionString, IPConnectionString) == 0x000000, "Member 'RBQueryServer_RequestServerDetailsFromConnectionString::IPConnectionString' has a wrong offset!");

// Function RBSteamworks.RBQueryServer.IsAwaitingQueryResponse
// 0x0001 (0x0001 - 0x0000)
struct RBQueryServer_IsAwaitingQueryResponse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQueryServer_IsAwaitingQueryResponse) == 0x000001, "Wrong alignment on RBQueryServer_IsAwaitingQueryResponse");
static_assert(sizeof(RBQueryServer_IsAwaitingQueryResponse) == 0x000001, "Wrong size on RBQueryServer_IsAwaitingQueryResponse");
static_assert(offsetof(RBQueryServer_IsAwaitingQueryResponse, ReturnValue) == 0x000000, "Member 'RBQueryServer_IsAwaitingQueryResponse::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBServerList.AddServerToFavourites
// 0x0068 (0x0068 - 0x0000)
struct RBServerList_AddServerToFavourites final
{
public:
	struct FSteamServerDetails                    ServerDetails;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBServerList_AddServerToFavourites) == 0x000008, "Wrong alignment on RBServerList_AddServerToFavourites");
static_assert(sizeof(RBServerList_AddServerToFavourites) == 0x000068, "Wrong size on RBServerList_AddServerToFavourites");
static_assert(offsetof(RBServerList_AddServerToFavourites, ServerDetails) == 0x000000, "Member 'RBServerList_AddServerToFavourites::ServerDetails' has a wrong offset!");

// Function RBSteamworks.RBServerList.CancelRequestDetailedServerInfo
// 0x0068 (0x0068 - 0x0000)
struct RBServerList_CancelRequestDetailedServerInfo final
{
public:
	struct FSteamServerDetails                    ServerDetails;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBServerList_CancelRequestDetailedServerInfo) == 0x000008, "Wrong alignment on RBServerList_CancelRequestDetailedServerInfo");
static_assert(sizeof(RBServerList_CancelRequestDetailedServerInfo) == 0x000068, "Wrong size on RBServerList_CancelRequestDetailedServerInfo");
static_assert(offsetof(RBServerList_CancelRequestDetailedServerInfo, ServerDetails) == 0x000000, "Member 'RBServerList_CancelRequestDetailedServerInfo::ServerDetails' has a wrong offset!");

// Function RBSteamworks.RBServerList.IsServerFavourited
// 0x0070 (0x0070 - 0x0000)
struct RBServerList_IsServerFavourited final
{
public:
	struct FSteamServerDetails                    ServerDetails;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBServerList_IsServerFavourited) == 0x000008, "Wrong alignment on RBServerList_IsServerFavourited");
static_assert(sizeof(RBServerList_IsServerFavourited) == 0x000070, "Wrong size on RBServerList_IsServerFavourited");
static_assert(offsetof(RBServerList_IsServerFavourited, ServerDetails) == 0x000000, "Member 'RBServerList_IsServerFavourited::ServerDetails' has a wrong offset!");
static_assert(offsetof(RBServerList_IsServerFavourited, ReturnValue) == 0x000068, "Member 'RBServerList_IsServerFavourited::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBServerList.RemoveServerFromFavourites
// 0x0068 (0x0068 - 0x0000)
struct RBServerList_RemoveServerFromFavourites final
{
public:
	struct FSteamServerDetails                    ServerDetails;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBServerList_RemoveServerFromFavourites) == 0x000008, "Wrong alignment on RBServerList_RemoveServerFromFavourites");
static_assert(sizeof(RBServerList_RemoveServerFromFavourites) == 0x000068, "Wrong size on RBServerList_RemoveServerFromFavourites");
static_assert(offsetof(RBServerList_RemoveServerFromFavourites, ServerDetails) == 0x000000, "Member 'RBServerList_RemoveServerFromFavourites::ServerDetails' has a wrong offset!");

// Function RBSteamworks.RBServerList.RequestDetailedServerInfo
// 0x0068 (0x0068 - 0x0000)
struct RBServerList_RequestDetailedServerInfo final
{
public:
	struct FSteamServerDetails                    ServerDetails;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBServerList_RequestDetailedServerInfo) == 0x000008, "Wrong alignment on RBServerList_RequestDetailedServerInfo");
static_assert(sizeof(RBServerList_RequestDetailedServerInfo) == 0x000068, "Wrong size on RBServerList_RequestDetailedServerInfo");
static_assert(offsetof(RBServerList_RequestDetailedServerInfo, ServerDetails) == 0x000000, "Member 'RBServerList_RequestDetailedServerInfo::ServerDetails' has a wrong offset!");

// Function RBSteamworks.RBServerList.RequestServerList
// 0x0001 (0x0001 - 0x0000)
struct RBServerList_RequestServerList final
{
public:
	ESteamServerType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBServerList_RequestServerList) == 0x000001, "Wrong alignment on RBServerList_RequestServerList");
static_assert(sizeof(RBServerList_RequestServerList) == 0x000001, "Wrong size on RBServerList_RequestServerList");
static_assert(offsetof(RBServerList_RequestServerList, Type) == 0x000000, "Member 'RBServerList_RequestServerList::Type' has a wrong offset!");

// Function RBSteamworks.RBServerList.IsRefreshing
// 0x0001 (0x0001 - 0x0000)
struct RBServerList_IsRefreshing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBServerList_IsRefreshing) == 0x000001, "Wrong alignment on RBServerList_IsRefreshing");
static_assert(sizeof(RBServerList_IsRefreshing) == 0x000001, "Wrong size on RBServerList_IsRefreshing");
static_assert(offsetof(RBServerList_IsRefreshing, ReturnValue) == 0x000000, "Member 'RBServerList_IsRefreshing::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.CreateRBServerListRef
// 0x0010 (0x0010 - 0x0000)
struct RBSteamworksFunctionLibrary_CreateRBServerListRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBServerList*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_CreateRBServerListRef) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_CreateRBServerListRef");
static_assert(sizeof(RBSteamworksFunctionLibrary_CreateRBServerListRef) == 0x000010, "Wrong size on RBSteamworksFunctionLibrary_CreateRBServerListRef");
static_assert(offsetof(RBSteamworksFunctionLibrary_CreateRBServerListRef, WorldContextObject) == 0x000000, "Member 'RBSteamworksFunctionLibrary_CreateRBServerListRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_CreateRBServerListRef, ReturnValue) == 0x000008, "Member 'RBSteamworksFunctionLibrary_CreateRBServerListRef::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.CreateRBWebAPIQueryRef
// 0x0010 (0x0010 - 0x0000)
struct RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBWebAPIQuery*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef");
static_assert(sizeof(RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef) == 0x000010, "Wrong size on RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef");
static_assert(offsetof(RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef, WorldContextObject) == 0x000000, "Member 'RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef, ReturnValue) == 0x000008, "Member 'RBSteamworksFunctionLibrary_CreateRBWebAPIQueryRef::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.GetAppID
// 0x0004 (0x0004 - 0x0000)
struct RBSteamworksFunctionLibrary_GetAppID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_GetAppID) == 0x000004, "Wrong alignment on RBSteamworksFunctionLibrary_GetAppID");
static_assert(sizeof(RBSteamworksFunctionLibrary_GetAppID) == 0x000004, "Wrong size on RBSteamworksFunctionLibrary_GetAppID");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetAppID, ReturnValue) == 0x000000, "Member 'RBSteamworksFunctionLibrary_GetAppID::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.GetFileSizeFloat
// 0x0048 (0x0048 - 0x0000)
struct RBSteamworksFunctionLibrary_GetFileSizeFloat final
{
public:
	struct FSteamWebAPIResponse_ModInfo           ModInfo;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSteamworksFunctionLibrary_GetFileSizeFloat) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_GetFileSizeFloat");
static_assert(sizeof(RBSteamworksFunctionLibrary_GetFileSizeFloat) == 0x000048, "Wrong size on RBSteamworksFunctionLibrary_GetFileSizeFloat");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetFileSizeFloat, ModInfo) == 0x000000, "Member 'RBSteamworksFunctionLibrary_GetFileSizeFloat::ModInfo' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetFileSizeFloat, ReturnValue) == 0x000040, "Member 'RBSteamworksFunctionLibrary_GetFileSizeFloat::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.GetFileSizeString
// 0x0050 (0x0050 - 0x0000)
struct RBSteamworksFunctionLibrary_GetFileSizeString final
{
public:
	struct FSteamWebAPIResponse_ModInfo           ModInfo;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_GetFileSizeString) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_GetFileSizeString");
static_assert(sizeof(RBSteamworksFunctionLibrary_GetFileSizeString) == 0x000050, "Wrong size on RBSteamworksFunctionLibrary_GetFileSizeString");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetFileSizeString, ModInfo) == 0x000000, "Member 'RBSteamworksFunctionLibrary_GetFileSizeString::ModInfo' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetFileSizeString, ReturnValue) == 0x000040, "Member 'RBSteamworksFunctionLibrary_GetFileSizeString::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.GetFileSizeStringFromFloat
// 0x0018 (0x0018 - 0x0000)
struct RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat final
{
public:
	float                                         fileSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat");
static_assert(sizeof(RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat) == 0x000018, "Wrong size on RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat, fileSize) == 0x000000, "Member 'RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat::fileSize' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat, ReturnValue) == 0x000008, "Member 'RBSteamworksFunctionLibrary_GetFileSizeStringFromFloat::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.GetSteamFriendsList
// 0x0010 (0x0010 - 0x0000)
struct RBSteamworksFunctionLibrary_GetSteamFriendsList final
{
public:
	TArray<struct FRBSteamFriendDetails>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_GetSteamFriendsList) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_GetSteamFriendsList");
static_assert(sizeof(RBSteamworksFunctionLibrary_GetSteamFriendsList) == 0x000010, "Wrong size on RBSteamworksFunctionLibrary_GetSteamFriendsList");
static_assert(offsetof(RBSteamworksFunctionLibrary_GetSteamFriendsList, ReturnValue) == 0x000000, "Member 'RBSteamworksFunctionLibrary_GetSteamFriendsList::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.InviteUserToGame
// 0x0020 (0x0020 - 0x0000)
struct RBSteamworksFunctionLibrary_InviteUserToGame final
{
public:
	struct FRBSteamID                             SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSteamworksFunctionLibrary_InviteUserToGame) == 0x000008, "Wrong alignment on RBSteamworksFunctionLibrary_InviteUserToGame");
static_assert(sizeof(RBSteamworksFunctionLibrary_InviteUserToGame) == 0x000020, "Wrong size on RBSteamworksFunctionLibrary_InviteUserToGame");
static_assert(offsetof(RBSteamworksFunctionLibrary_InviteUserToGame, SteamID) == 0x000000, "Member 'RBSteamworksFunctionLibrary_InviteUserToGame::SteamID' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_InviteUserToGame, ConnectString) == 0x000008, "Member 'RBSteamworksFunctionLibrary_InviteUserToGame::ConnectString' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_InviteUserToGame, ReturnValue) == 0x000018, "Member 'RBSteamworksFunctionLibrary_InviteUserToGame::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBSteamworksFunctionLibrary.MatchingSteamID
// 0x0011 (0x0011 - 0x0000)
struct RBSteamworksFunctionLibrary_MatchingSteamID final
{
public:
	struct FRBSteamID                             A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRBSteamID                             B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSteamworksFunctionLibrary_MatchingSteamID) == 0x000001, "Wrong alignment on RBSteamworksFunctionLibrary_MatchingSteamID");
static_assert(sizeof(RBSteamworksFunctionLibrary_MatchingSteamID) == 0x000011, "Wrong size on RBSteamworksFunctionLibrary_MatchingSteamID");
static_assert(offsetof(RBSteamworksFunctionLibrary_MatchingSteamID, A) == 0x000000, "Member 'RBSteamworksFunctionLibrary_MatchingSteamID::A' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_MatchingSteamID, B) == 0x000008, "Member 'RBSteamworksFunctionLibrary_MatchingSteamID::B' has a wrong offset!");
static_assert(offsetof(RBSteamworksFunctionLibrary_MatchingSteamID, ReturnValue) == 0x000010, "Member 'RBSteamworksFunctionLibrary_MatchingSteamID::ReturnValue' has a wrong offset!");

// Function RBSteamworks.RBWebAPIQuery.GetModInfo
// 0x0010 (0x0010 - 0x0000)
struct RBWebAPIQuery_GetModInfo final
{
public:
	TArray<class FString>                         ModIDStrings;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWebAPIQuery_GetModInfo) == 0x000008, "Wrong alignment on RBWebAPIQuery_GetModInfo");
static_assert(sizeof(RBWebAPIQuery_GetModInfo) == 0x000010, "Wrong size on RBWebAPIQuery_GetModInfo");
static_assert(offsetof(RBWebAPIQuery_GetModInfo, ModIDStrings) == 0x000000, "Member 'RBWebAPIQuery_GetModInfo::ModIDStrings' has a wrong offset!");

// Function RBSteamworks.RBWebAPIQuery.GetUGCFileDetails
// 0x0038 (0x0038 - 0x0000)
struct RBWebAPIQuery_GetUGCFileDetails final
{
public:
	class FString                                 ModIDString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebAPIKey;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWebAPIQuery_GetUGCFileDetails) == 0x000008, "Wrong alignment on RBWebAPIQuery_GetUGCFileDetails");
static_assert(sizeof(RBWebAPIQuery_GetUGCFileDetails) == 0x000038, "Wrong size on RBWebAPIQuery_GetUGCFileDetails");
static_assert(offsetof(RBWebAPIQuery_GetUGCFileDetails, ModIDString) == 0x000000, "Member 'RBWebAPIQuery_GetUGCFileDetails::ModIDString' has a wrong offset!");
static_assert(offsetof(RBWebAPIQuery_GetUGCFileDetails, WebAPIKey) == 0x000010, "Member 'RBWebAPIQuery_GetUGCFileDetails::WebAPIKey' has a wrong offset!");
static_assert(offsetof(RBWebAPIQuery_GetUGCFileDetails, AppID) == 0x000020, "Member 'RBWebAPIQuery_GetUGCFileDetails::AppID' has a wrong offset!");
static_assert(offsetof(RBWebAPIQuery_GetUGCFileDetails, SteamID) == 0x000028, "Member 'RBWebAPIQuery_GetUGCFileDetails::SteamID' has a wrong offset!");

// Function RBSteamworks.RBWebAPIQuery.ServerIPLookup
// 0x0008 (0x0008 - 0x0000)
struct RBWebAPIQuery_ServerIPLookup final
{
public:
	struct FServerNetAddress                      IPAddress;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWebAPIQuery_ServerIPLookup) == 0x000004, "Wrong alignment on RBWebAPIQuery_ServerIPLookup");
static_assert(sizeof(RBWebAPIQuery_ServerIPLookup) == 0x000008, "Wrong size on RBWebAPIQuery_ServerIPLookup");
static_assert(offsetof(RBWebAPIQuery_ServerIPLookup, IPAddress) == 0x000000, "Member 'RBWebAPIQuery_ServerIPLookup::IPAddress' has a wrong offset!");

// Function RBSteamworks.RBWebAPIQuery.ServerIPLookupFromConnectionString
// 0x0010 (0x0010 - 0x0000)
struct RBWebAPIQuery_ServerIPLookupFromConnectionString final
{
public:
	class FString                                 IPConnectionString;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWebAPIQuery_ServerIPLookupFromConnectionString) == 0x000008, "Wrong alignment on RBWebAPIQuery_ServerIPLookupFromConnectionString");
static_assert(sizeof(RBWebAPIQuery_ServerIPLookupFromConnectionString) == 0x000010, "Wrong size on RBWebAPIQuery_ServerIPLookupFromConnectionString");
static_assert(offsetof(RBWebAPIQuery_ServerIPLookupFromConnectionString, IPConnectionString) == 0x000000, "Member 'RBWebAPIQuery_ServerIPLookupFromConnectionString::IPConnectionString' has a wrong offset!");

}

