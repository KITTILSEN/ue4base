#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LXR

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "LXR_structs.hpp"


namespace SDK::Params
{

// Function LXR.LXRSense.GetLightSenseTraceLocationAndDirection
// 0x0018 (0x0018 - 0x0000)
struct LXRSense_GetLightSenseTraceLocationAndDirection final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSense_GetLightSenseTraceLocationAndDirection) == 0x000004, "Wrong alignment on LXRSense_GetLightSenseTraceLocationAndDirection");
static_assert(sizeof(LXRSense_GetLightSenseTraceLocationAndDirection) == 0x000018, "Wrong size on LXRSense_GetLightSenseTraceLocationAndDirection");
static_assert(offsetof(LXRSense_GetLightSenseTraceLocationAndDirection, Location) == 0x000000, "Member 'LXRSense_GetLightSenseTraceLocationAndDirection::Location' has a wrong offset!");
static_assert(offsetof(LXRSense_GetLightSenseTraceLocationAndDirection, Rotator) == 0x00000C, "Member 'LXRSense_GetLightSenseTraceLocationAndDirection::Rotator' has a wrong offset!");

// Function LXR.LXRSource.GetLightActorState
// 0x0001 (0x0001 - 0x0000)
struct LXRSource_GetLightActorState final
{
public:
	ELightState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSource_GetLightActorState) == 0x000001, "Wrong alignment on LXRSource_GetLightActorState");
static_assert(sizeof(LXRSource_GetLightActorState) == 0x000001, "Wrong size on LXRSource_GetLightActorState");
static_assert(offsetof(LXRSource_GetLightActorState, ReturnValue) == 0x000000, "Member 'LXRSource_GetLightActorState::ReturnValue' has a wrong offset!");

// Function LXR.LXRSource.GetLightComponentState
// 0x0010 (0x0010 - 0x0000)
struct LXRSource_GetLightComponentState final
{
public:
	const class ULightComponent*                  LightComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightState                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRSource_GetLightComponentState) == 0x000008, "Wrong alignment on LXRSource_GetLightComponentState");
static_assert(sizeof(LXRSource_GetLightComponentState) == 0x000010, "Wrong size on LXRSource_GetLightComponentState");
static_assert(offsetof(LXRSource_GetLightComponentState, LightComponent) == 0x000000, "Member 'LXRSource_GetLightComponentState::LightComponent' has a wrong offset!");
static_assert(offsetof(LXRSource_GetLightComponentState, ReturnValue) == 0x000008, "Member 'LXRSource_GetLightComponentState::ReturnValue' has a wrong offset!");

// Function LXR.LXRSource.GetMyLightComponents
// 0x0010 (0x0010 - 0x0000)
struct LXRSource_GetMyLightComponents final
{
public:
	TArray<class ULightComponent*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSource_GetMyLightComponents) == 0x000008, "Wrong alignment on LXRSource_GetMyLightComponents");
static_assert(sizeof(LXRSource_GetMyLightComponents) == 0x000010, "Wrong size on LXRSource_GetMyLightComponents");
static_assert(offsetof(LXRSource_GetMyLightComponents, ReturnValue) == 0x000000, "Member 'LXRSource_GetMyLightComponents::ReturnValue' has a wrong offset!");

// Function LXR.LXRSource.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LXRSource_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSource_IsEnabled) == 0x000001, "Wrong alignment on LXRSource_IsEnabled");
static_assert(sizeof(LXRSource_IsEnabled) == 0x000001, "Wrong size on LXRSource_IsEnabled");
static_assert(offsetof(LXRSource_IsEnabled, ReturnValue) == 0x000000, "Member 'LXRSource_IsEnabled::ReturnValue' has a wrong offset!");

// Function LXR.LXRSource.IsLightComponentEnabled
// 0x0010 (0x0010 - 0x0000)
struct LXRSource_IsLightComponentEnabled final
{
public:
	const class ULightComponent*                  LightComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRSource_IsLightComponentEnabled) == 0x000008, "Wrong alignment on LXRSource_IsLightComponentEnabled");
static_assert(sizeof(LXRSource_IsLightComponentEnabled) == 0x000010, "Wrong size on LXRSource_IsLightComponentEnabled");
static_assert(offsetof(LXRSource_IsLightComponentEnabled, LightComponent) == 0x000000, "Member 'LXRSource_IsLightComponentEnabled::LightComponent' has a wrong offset!");
static_assert(offsetof(LXRSource_IsLightComponentEnabled, ReturnValue) == 0x000008, "Member 'LXRSource_IsLightComponentEnabled::ReturnValue' has a wrong offset!");

// Function LXR.LXRDetectionComponent.GetRelevantTraceTypeTargets
// 0x0010 (0x0010 - 0x0000)
struct LXRDetectionComponent_GetRelevantTraceTypeTargets final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRDetectionComponent_GetRelevantTraceTypeTargets) == 0x000008, "Wrong alignment on LXRDetectionComponent_GetRelevantTraceTypeTargets");
static_assert(sizeof(LXRDetectionComponent_GetRelevantTraceTypeTargets) == 0x000010, "Wrong size on LXRDetectionComponent_GetRelevantTraceTypeTargets");
static_assert(offsetof(LXRDetectionComponent_GetRelevantTraceTypeTargets, ReturnValue) == 0x000000, "Member 'LXRDetectionComponent_GetRelevantTraceTypeTargets::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.ClampTo01Range
// 0x0020 (0x0020 - 0x0000)
struct LXRFunctionLibrary_ClampTo01Range final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_ClampTo01Range) == 0x000004, "Wrong alignment on LXRFunctionLibrary_ClampTo01Range");
static_assert(sizeof(LXRFunctionLibrary_ClampTo01Range) == 0x000020, "Wrong size on LXRFunctionLibrary_ClampTo01Range");
static_assert(offsetof(LXRFunctionLibrary_ClampTo01Range, InColor) == 0x000000, "Member 'LXRFunctionLibrary_ClampTo01Range::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ClampTo01Range, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_ClampTo01Range::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.ColorApproximatelyEqualColor
// 0x0024 (0x0024 - 0x0000)
struct LXRFunctionLibrary_ColorApproximatelyEqualColor final
{
public:
	struct FLinearColor                           InColorOne;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColorTwo;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRFunctionLibrary_ColorApproximatelyEqualColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_ColorApproximatelyEqualColor");
static_assert(sizeof(LXRFunctionLibrary_ColorApproximatelyEqualColor) == 0x000024, "Wrong size on LXRFunctionLibrary_ColorApproximatelyEqualColor");
static_assert(offsetof(LXRFunctionLibrary_ColorApproximatelyEqualColor, InColorOne) == 0x000000, "Member 'LXRFunctionLibrary_ColorApproximatelyEqualColor::InColorOne' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ColorApproximatelyEqualColor, InColorTwo) == 0x000010, "Member 'LXRFunctionLibrary_ColorApproximatelyEqualColor::InColorTwo' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ColorApproximatelyEqualColor, ReturnValue) == 0x000020, "Member 'LXRFunctionLibrary_ColorApproximatelyEqualColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.ColorEqual_DominantColor
// 0x001C (0x001C - 0x0000)
struct LXRFunctionLibrary_ColorEqual_DominantColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDominantColor                         DominantColor;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRFunctionLibrary_ColorEqual_DominantColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_ColorEqual_DominantColor");
static_assert(sizeof(LXRFunctionLibrary_ColorEqual_DominantColor) == 0x00001C, "Wrong size on LXRFunctionLibrary_ColorEqual_DominantColor");
static_assert(offsetof(LXRFunctionLibrary_ColorEqual_DominantColor, Color) == 0x000000, "Member 'LXRFunctionLibrary_ColorEqual_DominantColor::Color' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ColorEqual_DominantColor, DominantColor) == 0x000010, "Member 'LXRFunctionLibrary_ColorEqual_DominantColor::DominantColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ColorEqual_DominantColor, ReturnValue) == 0x000018, "Member 'LXRFunctionLibrary_ColorEqual_DominantColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.ColorRemappedRoundedHalfEqualColor
// 0x0024 (0x0024 - 0x0000)
struct LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor final
{
public:
	struct FLinearColor                           InColorOne;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColorTwo;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor");
static_assert(sizeof(LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor) == 0x000024, "Wrong size on LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor");
static_assert(offsetof(LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor, InColorOne) == 0x000000, "Member 'LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor::InColorOne' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor, InColorTwo) == 0x000010, "Member 'LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor::InColorTwo' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor, ReturnValue) == 0x000020, "Member 'LXRFunctionLibrary_ColorRemappedRoundedHalfEqualColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.DominantToLinearColor
// 0x0018 (0x0018 - 0x0000)
struct LXRFunctionLibrary_DominantToLinearColor final
{
public:
	struct FDominantColor                         InDominantColor;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_DominantToLinearColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_DominantToLinearColor");
static_assert(sizeof(LXRFunctionLibrary_DominantToLinearColor) == 0x000018, "Wrong size on LXRFunctionLibrary_DominantToLinearColor");
static_assert(offsetof(LXRFunctionLibrary_DominantToLinearColor, InDominantColor) == 0x000000, "Member 'LXRFunctionLibrary_DominantToLinearColor::InDominantColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_DominantToLinearColor, ReturnValue) == 0x000008, "Member 'LXRFunctionLibrary_DominantToLinearColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.Equal_FDominantColor
// 0x0014 (0x0014 - 0x0000)
struct LXRFunctionLibrary_Equal_FDominantColor final
{
public:
	struct FDominantColor                         FirstColor;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDominantColor                         SecondColor;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRFunctionLibrary_Equal_FDominantColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_Equal_FDominantColor");
static_assert(sizeof(LXRFunctionLibrary_Equal_FDominantColor) == 0x000014, "Wrong size on LXRFunctionLibrary_Equal_FDominantColor");
static_assert(offsetof(LXRFunctionLibrary_Equal_FDominantColor, FirstColor) == 0x000000, "Member 'LXRFunctionLibrary_Equal_FDominantColor::FirstColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_Equal_FDominantColor, SecondColor) == 0x000008, "Member 'LXRFunctionLibrary_Equal_FDominantColor::SecondColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_Equal_FDominantColor, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_Equal_FDominantColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.GetDominantColor
// 0x0018 (0x0018 - 0x0000)
struct LXRFunctionLibrary_GetDominantColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDominantColor                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_GetDominantColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_GetDominantColor");
static_assert(sizeof(LXRFunctionLibrary_GetDominantColor) == 0x000018, "Wrong size on LXRFunctionLibrary_GetDominantColor");
static_assert(offsetof(LXRFunctionLibrary_GetDominantColor, InColor) == 0x000000, "Member 'LXRFunctionLibrary_GetDominantColor::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_GetDominantColor, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_GetDominantColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.GetInverseChannels
// 0x0020 (0x0020 - 0x0000)
struct LXRFunctionLibrary_GetInverseChannels final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_GetInverseChannels) == 0x000004, "Wrong alignment on LXRFunctionLibrary_GetInverseChannels");
static_assert(sizeof(LXRFunctionLibrary_GetInverseChannels) == 0x000020, "Wrong size on LXRFunctionLibrary_GetInverseChannels");
static_assert(offsetof(LXRFunctionLibrary_GetInverseChannels, InColor) == 0x000000, "Member 'LXRFunctionLibrary_GetInverseChannels::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_GetInverseChannels, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_GetInverseChannels::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.GetLinearColorArrayAverage
// 0x0020 (0x0020 - 0x0000)
struct LXRFunctionLibrary_GetLinearColorArrayAverage final
{
public:
	TArray<struct FLinearColor>                   InColors;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_GetLinearColorArrayAverage) == 0x000008, "Wrong alignment on LXRFunctionLibrary_GetLinearColorArrayAverage");
static_assert(sizeof(LXRFunctionLibrary_GetLinearColorArrayAverage) == 0x000020, "Wrong size on LXRFunctionLibrary_GetLinearColorArrayAverage");
static_assert(offsetof(LXRFunctionLibrary_GetLinearColorArrayAverage, InColors) == 0x000000, "Member 'LXRFunctionLibrary_GetLinearColorArrayAverage::InColors' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_GetLinearColorArrayAverage, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_GetLinearColorArrayAverage::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.GetMaxOfColorChannels
// 0x0014 (0x0014 - 0x0000)
struct LXRFunctionLibrary_GetMaxOfColorChannels final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_GetMaxOfColorChannels) == 0x000004, "Wrong alignment on LXRFunctionLibrary_GetMaxOfColorChannels");
static_assert(sizeof(LXRFunctionLibrary_GetMaxOfColorChannels) == 0x000014, "Wrong size on LXRFunctionLibrary_GetMaxOfColorChannels");
static_assert(offsetof(LXRFunctionLibrary_GetMaxOfColorChannels, InColor) == 0x000000, "Member 'LXRFunctionLibrary_GetMaxOfColorChannels::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_GetMaxOfColorChannels, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_GetMaxOfColorChannels::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.GetMinOfColorChannels
// 0x0014 (0x0014 - 0x0000)
struct LXRFunctionLibrary_GetMinOfColorChannels final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_GetMinOfColorChannels) == 0x000004, "Wrong alignment on LXRFunctionLibrary_GetMinOfColorChannels");
static_assert(sizeof(LXRFunctionLibrary_GetMinOfColorChannels) == 0x000014, "Wrong size on LXRFunctionLibrary_GetMinOfColorChannels");
static_assert(offsetof(LXRFunctionLibrary_GetMinOfColorChannels, InColor) == 0x000000, "Member 'LXRFunctionLibrary_GetMinOfColorChannels::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_GetMinOfColorChannels, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_GetMinOfColorChannels::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.GetSecondDominantColor
// 0x0018 (0x0018 - 0x0000)
struct LXRFunctionLibrary_GetSecondDominantColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDominantColor                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_GetSecondDominantColor) == 0x000004, "Wrong alignment on LXRFunctionLibrary_GetSecondDominantColor");
static_assert(sizeof(LXRFunctionLibrary_GetSecondDominantColor) == 0x000018, "Wrong size on LXRFunctionLibrary_GetSecondDominantColor");
static_assert(offsetof(LXRFunctionLibrary_GetSecondDominantColor, InColor) == 0x000000, "Member 'LXRFunctionLibrary_GetSecondDominantColor::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_GetSecondDominantColor, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_GetSecondDominantColor::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.RemapColorRangeTo01
// 0x0020 (0x0020 - 0x0000)
struct LXRFunctionLibrary_RemapColorRangeTo01 final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_RemapColorRangeTo01) == 0x000004, "Wrong alignment on LXRFunctionLibrary_RemapColorRangeTo01");
static_assert(sizeof(LXRFunctionLibrary_RemapColorRangeTo01) == 0x000020, "Wrong size on LXRFunctionLibrary_RemapColorRangeTo01");
static_assert(offsetof(LXRFunctionLibrary_RemapColorRangeTo01, InColor) == 0x000000, "Member 'LXRFunctionLibrary_RemapColorRangeTo01::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_RemapColorRangeTo01, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_RemapColorRangeTo01::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.RoundToNearestHalf
// 0x0020 (0x0020 - 0x0000)
struct LXRFunctionLibrary_RoundToNearestHalf final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_RoundToNearestHalf) == 0x000004, "Wrong alignment on LXRFunctionLibrary_RoundToNearestHalf");
static_assert(sizeof(LXRFunctionLibrary_RoundToNearestHalf) == 0x000020, "Wrong size on LXRFunctionLibrary_RoundToNearestHalf");
static_assert(offsetof(LXRFunctionLibrary_RoundToNearestHalf, InColor) == 0x000000, "Member 'LXRFunctionLibrary_RoundToNearestHalf::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_RoundToNearestHalf, ReturnValue) == 0x000010, "Member 'LXRFunctionLibrary_RoundToNearestHalf::ReturnValue' has a wrong offset!");

// Function LXR.LXRFunctionLibrary.ToggleColorChannels
// 0x0030 (0x0030 - 0x0000)
struct LXRFunctionLibrary_ToggleColorChannels final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ToggleChannels;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRFunctionLibrary_ToggleColorChannels) == 0x000004, "Wrong alignment on LXRFunctionLibrary_ToggleColorChannels");
static_assert(sizeof(LXRFunctionLibrary_ToggleColorChannels) == 0x000030, "Wrong size on LXRFunctionLibrary_ToggleColorChannels");
static_assert(offsetof(LXRFunctionLibrary_ToggleColorChannels, InColor) == 0x000000, "Member 'LXRFunctionLibrary_ToggleColorChannels::InColor' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ToggleColorChannels, ToggleChannels) == 0x000010, "Member 'LXRFunctionLibrary_ToggleColorChannels::ToggleChannels' has a wrong offset!");
static_assert(offsetof(LXRFunctionLibrary_ToggleColorChannels, ReturnValue) == 0x000020, "Member 'LXRFunctionLibrary_ToggleColorChannels::ReturnValue' has a wrong offset!");

// Function LXR.LXRLightSenseComponent.GetSensedActors
// 0x0010 (0x0010 - 0x0000)
struct LXRLightSenseComponent_GetSensedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRLightSenseComponent_GetSensedActors) == 0x000008, "Wrong alignment on LXRLightSenseComponent_GetSensedActors");
static_assert(sizeof(LXRLightSenseComponent_GetSensedActors) == 0x000010, "Wrong size on LXRLightSenseComponent_GetSensedActors");
static_assert(offsetof(LXRLightSenseComponent_GetSensedActors, ReturnValue) == 0x000000, "Member 'LXRLightSenseComponent_GetSensedActors::ReturnValue' has a wrong offset!");

// Function LXR.LXRMethodObject.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct LXRMethodObject_GetOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRMethodObject_GetOwner) == 0x000008, "Wrong alignment on LXRMethodObject_GetOwner");
static_assert(sizeof(LXRMethodObject_GetOwner) == 0x000008, "Wrong size on LXRMethodObject_GetOwner");
static_assert(offsetof(LXRMethodObject_GetOwner, ReturnValue) == 0x000000, "Member 'LXRMethodObject_GetOwner::ReturnValue' has a wrong offset!");

// Function LXR.LXRMethodObject.GetSourceComponent
// 0x0008 (0x0008 - 0x0000)
struct LXRMethodObject_GetSourceComponent final
{
public:
	class ULXRSourceComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRMethodObject_GetSourceComponent) == 0x000008, "Wrong alignment on LXRMethodObject_GetSourceComponent");
static_assert(sizeof(LXRMethodObject_GetSourceComponent) == 0x000008, "Wrong size on LXRMethodObject_GetSourceComponent");
static_assert(offsetof(LXRMethodObject_GetSourceComponent, ReturnValue) == 0x000000, "Member 'LXRMethodObject_GetSourceComponent::ReturnValue' has a wrong offset!");

// Function LXR.LXRSourceComponent.GetLightComponentState
// 0x0010 (0x0010 - 0x0000)
struct LXRSourceComponent_GetLightComponentState final
{
public:
	const class ULightComponent*                  InComponent;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightState                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRSourceComponent_GetLightComponentState) == 0x000008, "Wrong alignment on LXRSourceComponent_GetLightComponentState");
static_assert(sizeof(LXRSourceComponent_GetLightComponentState) == 0x000010, "Wrong size on LXRSourceComponent_GetLightComponentState");
static_assert(offsetof(LXRSourceComponent_GetLightComponentState, InComponent) == 0x000000, "Member 'LXRSourceComponent_GetLightComponentState::InComponent' has a wrong offset!");
static_assert(offsetof(LXRSourceComponent_GetLightComponentState, ReturnValue) == 0x000008, "Member 'LXRSourceComponent_GetLightComponentState::ReturnValue' has a wrong offset!");

// Function LXR.LXRSourceComponent.GetLightState
// 0x0001 (0x0001 - 0x0000)
struct LXRSourceComponent_GetLightState final
{
public:
	ELightState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSourceComponent_GetLightState) == 0x000001, "Wrong alignment on LXRSourceComponent_GetLightState");
static_assert(sizeof(LXRSourceComponent_GetLightState) == 0x000001, "Wrong size on LXRSourceComponent_GetLightState");
static_assert(offsetof(LXRSourceComponent_GetLightState, ReturnValue) == 0x000000, "Member 'LXRSourceComponent_GetLightState::ReturnValue' has a wrong offset!");

// Function LXR.LXRSourceComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LXRSourceComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSourceComponent_IsEnabled) == 0x000001, "Wrong alignment on LXRSourceComponent_IsEnabled");
static_assert(sizeof(LXRSourceComponent_IsEnabled) == 0x000001, "Wrong size on LXRSourceComponent_IsEnabled");
static_assert(offsetof(LXRSourceComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'LXRSourceComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function LXR.LXRSourceComponent.IsLightComponentEnabled
// 0x0010 (0x0010 - 0x0000)
struct LXRSourceComponent_IsLightComponentEnabled final
{
public:
	const class ULightComponent*                  LightComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LXRSourceComponent_IsLightComponentEnabled) == 0x000008, "Wrong alignment on LXRSourceComponent_IsLightComponentEnabled");
static_assert(sizeof(LXRSourceComponent_IsLightComponentEnabled) == 0x000010, "Wrong size on LXRSourceComponent_IsLightComponentEnabled");
static_assert(offsetof(LXRSourceComponent_IsLightComponentEnabled, LightComponent) == 0x000000, "Member 'LXRSourceComponent_IsLightComponentEnabled::LightComponent' has a wrong offset!");
static_assert(offsetof(LXRSourceComponent_IsLightComponentEnabled, ReturnValue) == 0x000008, "Member 'LXRSourceComponent_IsLightComponentEnabled::ReturnValue' has a wrong offset!");

// Function LXR.LXRSubsystem.RegisterLight
// 0x0008 (0x0008 - 0x0000)
struct LXRSubsystem_RegisterLight final
{
public:
	class AActor*                                 LightSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSubsystem_RegisterLight) == 0x000008, "Wrong alignment on LXRSubsystem_RegisterLight");
static_assert(sizeof(LXRSubsystem_RegisterLight) == 0x000008, "Wrong size on LXRSubsystem_RegisterLight");
static_assert(offsetof(LXRSubsystem_RegisterLight, LightSource) == 0x000000, "Member 'LXRSubsystem_RegisterLight::LightSource' has a wrong offset!");

// Function LXR.LXRSubsystem.UnregisterLight
// 0x0008 (0x0008 - 0x0000)
struct LXRSubsystem_UnregisterLight final
{
public:
	class AActor*                                 LightSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LXRSubsystem_UnregisterLight) == 0x000008, "Wrong alignment on LXRSubsystem_UnregisterLight");
static_assert(sizeof(LXRSubsystem_UnregisterLight) == 0x000008, "Wrong size on LXRSubsystem_UnregisterLight");
static_assert(offsetof(LXRSubsystem_UnregisterLight, LightSource) == 0x000000, "Member 'LXRSubsystem_UnregisterLight::LightSource' has a wrong offset!");

}

