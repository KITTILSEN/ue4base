#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMModdingPlugin

#include "Basic.hpp"

#include "ModKit_structs.hpp"
#include "LuaMachine_structs.hpp"


namespace SDK
{

// Enum FMModdingPlugin.EGBWorkshopModVisibility
// NumValues: 0x0005
enum class EGBWorkshopModVisibility : uint8
{
	Public                                   = 0,
	FriendsOnly                              = 1,
	Unlisted                                 = 2,
	Private                                  = 3,
	EGBWorkshopModVisibility_MAX             = 4,
};

// Enum FMModdingPlugin.EGBSteamBufferType
// NumValues: 0x0003
enum class EGBSteamBufferType : uint8
{
	ServerRule                               = 0,
	LobbyData                                = 1,
	EGBSteamBufferType_MAX                   = 2,
};

// Enum FMModdingPlugin.EFMSyncStatus
// NumValues: 0x0007
enum class EFMSyncStatus : uint8
{
	Inactive                                 = 0,
	Unmounting                               = 1,
	Mounting                                 = 2,
	Downloading                              = 3,
	Finished                                 = 4,
	Failed                                   = 5,
	EFMSyncStatus_MAX                        = 6,
};

// Enum FMModdingPlugin.EFMModStatus
// NumValues: 0x0007
enum class EFMModStatus : uint8
{
	None                                     = 0,
	Checking                                 = 1,
	Downloading                              = 2,
	Mounting                                 = 3,
	Failed                                   = 4,
	Done                                     = 5,
	EFMModStatus_MAX                         = 6,
};

// Enum FMModdingPlugin.EGBPatchVisibility
// NumValues: 0x0004
enum class EGBPatchVisibility : uint8
{
	NoModdedPatches                          = 0,
	OnlySubscribed                           = 1,
	AllPatches                               = 2,
	EGBPatchVisibility_MAX                   = 3,
};

// Enum FMModdingPlugin.EGBResourceType
// NumValues: 0x0012
enum class EGBResourceType : uint8
{
	Map                                      = 0,
	Mission                                  = 1,
	GameMode                                 = 2,
	LuaScript                                = 3,
	Mutator                                  = 4,
	Inventory                                = 5,
	WeatherPreset                            = 6,
	KillhouseVariant                         = 7,
	Localization                             = 8,
	Patch                                    = 9,
	CustomKit                                = 10,
	AILoadout                                = 11,
	DefaultItemBuild                         = 12,
	ObjectiveScript                          = 13,
	MissionImage                             = 14,
	Unknown                                  = 15,
	LastResourceType                         = 16,
	EGBResourceType_MAX                      = 17,
};

// ScriptStruct FMModdingPlugin.LuaScriptInfo
// 0x0080 (0x0080 - 0x0000)
struct FLuaScriptInfo final
{
public:
	struct FLuaValue                              ScriptTable;                                       // 0x0000(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModPriority;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackagePaths;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerAuthoritative;                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuaScriptInfo) == 0x000008, "Wrong alignment on FLuaScriptInfo");
static_assert(sizeof(FLuaScriptInfo) == 0x000080, "Wrong size on FLuaScriptInfo");
static_assert(offsetof(FLuaScriptInfo, ScriptTable) == 0x000000, "Member 'FLuaScriptInfo::ScriptTable' has a wrong offset!");
static_assert(offsetof(FLuaScriptInfo, Filename) == 0x000048, "Member 'FLuaScriptInfo::Filename' has a wrong offset!");
static_assert(offsetof(FLuaScriptInfo, ModID) == 0x000058, "Member 'FLuaScriptInfo::ModID' has a wrong offset!");
static_assert(offsetof(FLuaScriptInfo, ModPriority) == 0x000060, "Member 'FLuaScriptInfo::ModPriority' has a wrong offset!");
static_assert(offsetof(FLuaScriptInfo, PackagePaths) == 0x000068, "Member 'FLuaScriptInfo::PackagePaths' has a wrong offset!");
static_assert(offsetof(FLuaScriptInfo, bServerAuthoritative) == 0x000078, "Member 'FLuaScriptInfo::bServerAuthoritative' has a wrong offset!");

// ScriptStruct FMModdingPlugin.UGCFileInfo
// 0x0058 (0x0058 - 0x0000)
struct FUGCFileInfo final
{
public:
	struct FUInt64                                FileID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                OwnerSteamID;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBanned;                                           // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUInt64                                fileSize;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ApprovalScore;                                     // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGBWorkshopModVisibility                      WorkshopModVisibility;                             // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUGCFileInfo) == 0x000008, "Wrong alignment on FUGCFileInfo");
static_assert(sizeof(FUGCFileInfo) == 0x000058, "Wrong size on FUGCFileInfo");
static_assert(offsetof(FUGCFileInfo, FileID) == 0x000000, "Member 'FUGCFileInfo::FileID' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, Title) == 0x000008, "Member 'FUGCFileInfo::Title' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, Description) == 0x000018, "Member 'FUGCFileInfo::Description' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, OwnerSteamID) == 0x000028, "Member 'FUGCFileInfo::OwnerSteamID' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, bBanned) == 0x000030, "Member 'FUGCFileInfo::bBanned' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, fileSize) == 0x000038, "Member 'FUGCFileInfo::fileSize' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, Tags) == 0x000040, "Member 'FUGCFileInfo::Tags' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, ApprovalScore) == 0x000050, "Member 'FUGCFileInfo::ApprovalScore' has a wrong offset!");
static_assert(offsetof(FUGCFileInfo, WorkshopModVisibility) == 0x000054, "Member 'FUGCFileInfo::WorkshopModVisibility' has a wrong offset!");

// ScriptStruct FMModdingPlugin.GBModdingResourceCacheInfo
// 0x0018 (0x0018 - 0x0000)
struct FGBModdingResourceCacheInfo final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt64                                ModID;                                             // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGBModdingResourceCacheInfo) == 0x000008, "Wrong alignment on FGBModdingResourceCacheInfo");
static_assert(sizeof(FGBModdingResourceCacheInfo) == 0x000018, "Wrong size on FGBModdingResourceCacheInfo");
static_assert(offsetof(FGBModdingResourceCacheInfo, Filename) == 0x000000, "Member 'FGBModdingResourceCacheInfo::Filename' has a wrong offset!");
static_assert(offsetof(FGBModdingResourceCacheInfo, ModID) == 0x000010, "Member 'FGBModdingResourceCacheInfo::ModID' has a wrong offset!");

// ScriptStruct FMModdingPlugin.FMModInfo
// 0x0028 (0x0028 - 0x0000)
struct FFMModInfo final
{
public:
	struct FUInt64                                ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMModStatus                                  Status;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pct;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDownload;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDownload;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMModInfo) == 0x000008, "Wrong alignment on FFMModInfo");
static_assert(sizeof(FFMModInfo) == 0x000028, "Wrong size on FFMModInfo");
static_assert(offsetof(FFMModInfo, ID) == 0x000000, "Member 'FFMModInfo::ID' has a wrong offset!");
static_assert(offsetof(FFMModInfo, Name) == 0x000008, "Member 'FFMModInfo::Name' has a wrong offset!");
static_assert(offsetof(FFMModInfo, Status) == 0x000018, "Member 'FFMModInfo::Status' has a wrong offset!");
static_assert(offsetof(FFMModInfo, Pct) == 0x00001C, "Member 'FFMModInfo::Pct' has a wrong offset!");
static_assert(offsetof(FFMModInfo, CurrentDownload) == 0x000020, "Member 'FFMModInfo::CurrentDownload' has a wrong offset!");
static_assert(offsetof(FFMModInfo, TotalDownload) == 0x000024, "Member 'FFMModInfo::TotalDownload' has a wrong offset!");

// ScriptStruct FMModdingPlugin.LuaScriptOption
// 0x001C (0x001C - 0x0000)
struct FLuaScriptOption final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdvancedSetting;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortOrder;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuaScriptOption) == 0x000004, "Wrong alignment on FLuaScriptOption");
static_assert(sizeof(FLuaScriptOption) == 0x00001C, "Wrong size on FLuaScriptOption");
static_assert(offsetof(FLuaScriptOption, Name) == 0x000000, "Member 'FLuaScriptOption::Name' has a wrong offset!");
static_assert(offsetof(FLuaScriptOption, Min) == 0x000008, "Member 'FLuaScriptOption::Min' has a wrong offset!");
static_assert(offsetof(FLuaScriptOption, Max) == 0x00000C, "Member 'FLuaScriptOption::Max' has a wrong offset!");
static_assert(offsetof(FLuaScriptOption, Value) == 0x000010, "Member 'FLuaScriptOption::Value' has a wrong offset!");
static_assert(offsetof(FLuaScriptOption, bAdvancedSetting) == 0x000014, "Member 'FLuaScriptOption::bAdvancedSetting' has a wrong offset!");
static_assert(offsetof(FLuaScriptOption, SortOrder) == 0x000018, "Member 'FLuaScriptOption::SortOrder' has a wrong offset!");

// ScriptStruct FMModdingPlugin.GBResourceList
// 0x0018 (0x0018 - 0x0000)
struct FGBResourceList final
{
public:
	EGBResourceType                               ResourceType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ResourceFilePaths;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGBResourceList) == 0x000008, "Wrong alignment on FGBResourceList");
static_assert(sizeof(FGBResourceList) == 0x000018, "Wrong size on FGBResourceList");
static_assert(offsetof(FGBResourceList, ResourceType) == 0x000000, "Member 'FGBResourceList::ResourceType' has a wrong offset!");
static_assert(offsetof(FGBResourceList, ResourceFilePaths) == 0x000008, "Member 'FGBResourceList::ResourceFilePaths' has a wrong offset!");

// ScriptStruct FMModdingPlugin.GBModBasicInfo
// 0x0010 (0x0010 - 0x0000)
struct FGBModBasicInfo final
{
public:
	struct FUInt64                                ModID;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGBModBasicInfo) == 0x000008, "Wrong alignment on FGBModBasicInfo");
static_assert(sizeof(FGBModBasicInfo) == 0x000010, "Wrong size on FGBModBasicInfo");
static_assert(offsetof(FGBModBasicInfo, ModID) == 0x000000, "Member 'FGBModBasicInfo::ModID' has a wrong offset!");
static_assert(offsetof(FGBModBasicInfo, bIsActive) == 0x000008, "Member 'FGBModBasicInfo::bIsActive' has a wrong offset!");

}

