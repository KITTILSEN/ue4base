#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LadyBugTrackerRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LadyBugTrackerRuntime_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LadyBugTrackerRuntime.BugTrackerSettings
// 0x01F8 (0x0220 - 0x0028)
class UBugTrackerSettings final : public UObject
{
public:
	class FString                                 Provider;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Host;                                              // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjectName;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ConstructorClass;                                  // 0x0058(0x0018)(Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBugTrackerProfileSettings             DefaultProfile;                                    // 0x0070(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBugTrackerProfileSettings             EditorProfile;                                     // 0x00B0(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBugTrackerProfileSettings             GameProfile;                                       // 0x00F0(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBugTrackerProfileSettings             CrashProfile;                                      // 0x0130(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBugTrackerProfileSettings             FeedbackProfile;                                   // 0x0170(0x0040)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            MapRenameOldToNew;                                 // 0x01B0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<struct FBugTrackerSettingsCustomField> CustomFields;                                      // 0x0200(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FString                                 AndroidStorage;                                    // 0x0210(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BugTrackerSettings">();
	}
	static class UBugTrackerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBugTrackerSettings>();
	}
};
static_assert(alignof(UBugTrackerSettings) == 0x000008, "Wrong alignment on UBugTrackerSettings");
static_assert(sizeof(UBugTrackerSettings) == 0x000220, "Wrong size on UBugTrackerSettings");
static_assert(offsetof(UBugTrackerSettings, Provider) == 0x000028, "Member 'UBugTrackerSettings::Provider' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, Host) == 0x000038, "Member 'UBugTrackerSettings::Host' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, ProjectName) == 0x000048, "Member 'UBugTrackerSettings::ProjectName' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, ConstructorClass) == 0x000058, "Member 'UBugTrackerSettings::ConstructorClass' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, DefaultProfile) == 0x000070, "Member 'UBugTrackerSettings::DefaultProfile' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, EditorProfile) == 0x0000B0, "Member 'UBugTrackerSettings::EditorProfile' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, GameProfile) == 0x0000F0, "Member 'UBugTrackerSettings::GameProfile' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, CrashProfile) == 0x000130, "Member 'UBugTrackerSettings::CrashProfile' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, FeedbackProfile) == 0x000170, "Member 'UBugTrackerSettings::FeedbackProfile' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, MapRenameOldToNew) == 0x0001B0, "Member 'UBugTrackerSettings::MapRenameOldToNew' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, CustomFields) == 0x000200, "Member 'UBugTrackerSettings::CustomFields' has a wrong offset!");
static_assert(offsetof(UBugTrackerSettings, AndroidStorage) == 0x000210, "Member 'UBugTrackerSettings::AndroidStorage' has a wrong offset!");

// Class LadyBugTrackerRuntime.BugTrackerUserSettings
// 0x0038 (0x0060 - 0x0028)
class UBugTrackerUserSettings final : public UObject
{
public:
	class FString                                 Username;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRememberMe;                                       // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EditImageTool;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BugTrackerUserSettings">();
	}
	static class UBugTrackerUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBugTrackerUserSettings>();
	}
};
static_assert(alignof(UBugTrackerUserSettings) == 0x000008, "Wrong alignment on UBugTrackerUserSettings");
static_assert(sizeof(UBugTrackerUserSettings) == 0x000060, "Wrong size on UBugTrackerUserSettings");
static_assert(offsetof(UBugTrackerUserSettings, Username) == 0x000028, "Member 'UBugTrackerUserSettings::Username' has a wrong offset!");
static_assert(offsetof(UBugTrackerUserSettings, Password) == 0x000038, "Member 'UBugTrackerUserSettings::Password' has a wrong offset!");
static_assert(offsetof(UBugTrackerUserSettings, bRememberMe) == 0x000048, "Member 'UBugTrackerUserSettings::bRememberMe' has a wrong offset!");
static_assert(offsetof(UBugTrackerUserSettings, EditImageTool) == 0x000050, "Member 'UBugTrackerUserSettings::EditImageTool' has a wrong offset!");

// Class LadyBugTrackerRuntime.IssueCollection
// 0x0010 (0x0038 - 0x0028)
class UIssueCollection final : public UObject
{
public:
	TArray<class UIssueData*>                     Issues;                                            // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IssueCollection">();
	}
	static class UIssueCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIssueCollection>();
	}
};
static_assert(alignof(UIssueCollection) == 0x000008, "Wrong alignment on UIssueCollection");
static_assert(sizeof(UIssueCollection) == 0x000038, "Wrong size on UIssueCollection");
static_assert(offsetof(UIssueCollection, Issues) == 0x000028, "Member 'UIssueCollection::Issues' has a wrong offset!");

// Class LadyBugTrackerRuntime.IssueConstructor
// 0x0000 (0x0028 - 0x0028)
class UIssueConstructor final : public UObject
{
public:
	void ConstructIssue(class UIssueData* Issue, EIssueProfile Profile);
	bool GetCamera(struct FVector* Location, struct FRotator* Rotation);

	class FString GetLevelName() const;
	class FString GetLevelNameFromSreamingLevel(class ULevelStreaming* LevelStreaming) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IssueConstructor">();
	}
	static class UIssueConstructor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIssueConstructor>();
	}
};
static_assert(alignof(UIssueConstructor) == 0x000008, "Wrong alignment on UIssueConstructor");
static_assert(sizeof(UIssueConstructor) == 0x000028, "Wrong size on UIssueConstructor");

// Class LadyBugTrackerRuntime.IssueData
// 0x01C8 (0x01F0 - 0x0028)
class UIssueData : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Project;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reporter;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnumString                            Handler;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StepsToReproduce;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalInformation;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnumString                            Category;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            Severity;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            Status;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            Priority;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              DateSubmitted;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdated;                                       // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnumString                            Resolution;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            TargetVersion;                                     // 0x0118(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            ProductVersion;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            FixedInVersion;                                    // 0x0138(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnumString                            Reproducibility;                                   // 0x0148(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Os;                                                // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OsBuild;                                           // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIssueCustomField>              CustomFields;                                      // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIssueAttachment>               Attachments;                                       // 0x01A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIssueNote>                     Notes;                                             // 0x01B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIssueHistory>                  History;                                           // 0x01C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bGoto;                                             // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x17];                                     // 0x01D9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCameraTransform(const struct FVector& Location, const struct FRotator& Rotation);
	bool SetCustomFieldValue(const class FString& FieldName, const class FString& Value);

	struct FTransform GetCameraTransform() const;
	class FString GetCustomFieldValue(const class FString& FieldName) const;
	class FString GetLevelName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IssueData">();
	}
	static class UIssueData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIssueData>();
	}
};
static_assert(alignof(UIssueData) == 0x000008, "Wrong alignment on UIssueData");
static_assert(sizeof(UIssueData) == 0x0001F0, "Wrong size on UIssueData");
static_assert(offsetof(UIssueData, URL) == 0x000030, "Member 'UIssueData::URL' has a wrong offset!");
static_assert(offsetof(UIssueData, ID) == 0x000040, "Member 'UIssueData::ID' has a wrong offset!");
static_assert(offsetof(UIssueData, Project) == 0x000048, "Member 'UIssueData::Project' has a wrong offset!");
static_assert(offsetof(UIssueData, Reporter) == 0x000058, "Member 'UIssueData::Reporter' has a wrong offset!");
static_assert(offsetof(UIssueData, Handler) == 0x000068, "Member 'UIssueData::Handler' has a wrong offset!");
static_assert(offsetof(UIssueData, Summary) == 0x000078, "Member 'UIssueData::Summary' has a wrong offset!");
static_assert(offsetof(UIssueData, Description) == 0x000088, "Member 'UIssueData::Description' has a wrong offset!");
static_assert(offsetof(UIssueData, StepsToReproduce) == 0x000098, "Member 'UIssueData::StepsToReproduce' has a wrong offset!");
static_assert(offsetof(UIssueData, AdditionalInformation) == 0x0000A8, "Member 'UIssueData::AdditionalInformation' has a wrong offset!");
static_assert(offsetof(UIssueData, Category) == 0x0000B8, "Member 'UIssueData::Category' has a wrong offset!");
static_assert(offsetof(UIssueData, Severity) == 0x0000C8, "Member 'UIssueData::Severity' has a wrong offset!");
static_assert(offsetof(UIssueData, Status) == 0x0000D8, "Member 'UIssueData::Status' has a wrong offset!");
static_assert(offsetof(UIssueData, Priority) == 0x0000E8, "Member 'UIssueData::Priority' has a wrong offset!");
static_assert(offsetof(UIssueData, DateSubmitted) == 0x0000F8, "Member 'UIssueData::DateSubmitted' has a wrong offset!");
static_assert(offsetof(UIssueData, LastUpdated) == 0x000100, "Member 'UIssueData::LastUpdated' has a wrong offset!");
static_assert(offsetof(UIssueData, Resolution) == 0x000108, "Member 'UIssueData::Resolution' has a wrong offset!");
static_assert(offsetof(UIssueData, TargetVersion) == 0x000118, "Member 'UIssueData::TargetVersion' has a wrong offset!");
static_assert(offsetof(UIssueData, ProductVersion) == 0x000128, "Member 'UIssueData::ProductVersion' has a wrong offset!");
static_assert(offsetof(UIssueData, FixedInVersion) == 0x000138, "Member 'UIssueData::FixedInVersion' has a wrong offset!");
static_assert(offsetof(UIssueData, Reproducibility) == 0x000148, "Member 'UIssueData::Reproducibility' has a wrong offset!");
static_assert(offsetof(UIssueData, Platform) == 0x000158, "Member 'UIssueData::Platform' has a wrong offset!");
static_assert(offsetof(UIssueData, Os) == 0x000168, "Member 'UIssueData::Os' has a wrong offset!");
static_assert(offsetof(UIssueData, OsBuild) == 0x000178, "Member 'UIssueData::OsBuild' has a wrong offset!");
static_assert(offsetof(UIssueData, Tags) == 0x000188, "Member 'UIssueData::Tags' has a wrong offset!");
static_assert(offsetof(UIssueData, CustomFields) == 0x000198, "Member 'UIssueData::CustomFields' has a wrong offset!");
static_assert(offsetof(UIssueData, Attachments) == 0x0001A8, "Member 'UIssueData::Attachments' has a wrong offset!");
static_assert(offsetof(UIssueData, Notes) == 0x0001B8, "Member 'UIssueData::Notes' has a wrong offset!");
static_assert(offsetof(UIssueData, History) == 0x0001C8, "Member 'UIssueData::History' has a wrong offset!");
static_assert(offsetof(UIssueData, bGoto) == 0x0001D8, "Member 'UIssueData::bGoto' has a wrong offset!");

// Class LadyBugTrackerRuntime.FeedbackData
// 0x0000 (0x01F0 - 0x01F0)
class UFeedbackData final : public UIssueData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FeedbackData">();
	}
	static class UFeedbackData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFeedbackData>();
	}
};
static_assert(alignof(UFeedbackData) == 0x000008, "Wrong alignment on UFeedbackData");
static_assert(sizeof(UFeedbackData) == 0x0001F0, "Wrong size on UFeedbackData");

// Class LadyBugTrackerRuntime.RuntimeUtilities
// 0x0000 (0x0028 - 0x0028)
class URuntimeUtilities final : public UBlueprintFunctionLibrary
{
public:
	static void AddCustomField(class UFeedbackData* Feedback, const class FString& Field, const class FString& Value);
	static bool AddLog(class UFeedbackData* Feedback);
	static void AddScreenshot(class UFeedbackData* Feedback, const struct FLatentActionInfo& LatentInfo, bool* bSuccess, bool bInShowUI, int32 DesiredWidth, int32 DesiredHeight);
	static class UFeedbackData* CreateFeedback();
	static class UIssueData* CreateIssue();
	static void GetCategories(const TDelegate<void(const struct FCategoriesHelper& Categories)>& OnSuccess, const TDelegate<void(const class FString& Response)>& OnFail);
	static bool ReportIssue(const class FString& Summary, const TArray<class FString>& Attachments, bool bTakeScreenshots, bool bAttachLogs);
	static bool ReportIssueData(class UIssueData* Issue, const TArray<class FString>& Attachments, bool bTakeScreenshots, bool bAttachLogs);
	static void SendAttachment(int32 IssueId, const class FString& FullPath, const class FString& Filename, const class FString& ContentMimeType, const class FString& Username, const class FString& PasswordOrToken, const TDelegate<void()>& OnSuccess, const TDelegate<void(const class FString& Response)>& OnFail);
	static void SendFeedback(class UFeedbackData* Feedback, const class FString& Username, const class FString& PasswordOrToken, const TDelegate<void(int32 IssueId)>& OnSuccess, const TDelegate<void(const class FString& Response)>& OnFail);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeUtilities">();
	}
	static class URuntimeUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeUtilities>();
	}
};
static_assert(alignof(URuntimeUtilities) == 0x000008, "Wrong alignment on URuntimeUtilities");
static_assert(sizeof(URuntimeUtilities) == 0x000028, "Wrong size on URuntimeUtilities");

}

