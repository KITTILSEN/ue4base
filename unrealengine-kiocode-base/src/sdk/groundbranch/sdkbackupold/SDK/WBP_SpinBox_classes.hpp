#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SpinBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SpinBox.WBP_SpinBox_C
// 0x00B0 (0x0310 - 0x0260)
class UWBP_SpinBox_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                Button_Decrease;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_Increase;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       EditableTextBox_Number;                            // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Increase;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Left;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Slide;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bSlide;                                            // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Value;                                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ERoundingMode                                 RoundingMethod;                                    // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinIntegralDigits;                                 // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MinFractionalDigits;                               // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MaxFractionalDigits;                               // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bCanEditText;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TabSize;                                           // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldValue;                                          // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bButtonPressed;                                    // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstPressWorldSeconds;                            // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonPressRepeatTime;                             // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonPressInitialDelay;                           // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenSpeedIncreases;                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIncreaseButtonPressed;                            // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonUpdateSpeedIndex;                            // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SpeedMultipliers;                                  // 0x02F8(0x0010)(Edit, BlueprintVisible)
	float                                         NotADragCursorDeltaSq;                             // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CumulativeDragDistance;                            // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_SpinBox(int32 EntryPoint);
	void BndEvt__WBP_SpinBox_Button_Decrease_K2Node_ComponentBoundEvent_6_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__WBP_SpinBox_Button_Increase_K2Node_ComponentBoundEvent_5_OnButtonReleasedEvent__DelegateSignature();
	void StopButtonPressTimer();
	void ButtonPressTimer();
	void StartButtonPressTimer();
	void BndEvt__WBP_SpinBox_Button_Increase_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();
	void IncreaseNumber();
	void DecreaseNumber();
	void BndEvt__WBP_SpinBox_Button_Decrease_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__EditableTextBox_2_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text);
	void BndEvt__EditableTextBox_2_K2Node_ComponentBoundEvent_65_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	class FText GetText();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void SetValue(float Value_0);
	void GetValue(float* NewParam);
	void CheckForValueChange();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_SpinBox_C">();
	}
	static class UWBP_SpinBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_SpinBox_C>();
	}
};
static_assert(alignof(UWBP_SpinBox_C) == 0x000008, "Wrong alignment on UWBP_SpinBox_C");
static_assert(sizeof(UWBP_SpinBox_C) == 0x000310, "Wrong size on UWBP_SpinBox_C");
static_assert(offsetof(UWBP_SpinBox_C, UberGraphFrame) == 0x000260, "Member 'UWBP_SpinBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, Button_Decrease) == 0x000268, "Member 'UWBP_SpinBox_C::Button_Decrease' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, Button_Increase) == 0x000270, "Member 'UWBP_SpinBox_C::Button_Increase' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, EditableTextBox_Number) == 0x000278, "Member 'UWBP_SpinBox_C::EditableTextBox_Number' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, Image_Increase) == 0x000280, "Member 'UWBP_SpinBox_C::Image_Increase' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, Image_Left) == 0x000288, "Member 'UWBP_SpinBox_C::Image_Left' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, Image_Slide) == 0x000290, "Member 'UWBP_SpinBox_C::Image_Slide' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, bSlide) == 0x000298, "Member 'UWBP_SpinBox_C::bSlide' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, MinValue) == 0x00029C, "Member 'UWBP_SpinBox_C::MinValue' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, MaxValue) == 0x0002A0, "Member 'UWBP_SpinBox_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, Value) == 0x0002A4, "Member 'UWBP_SpinBox_C::Value' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, RoundingMethod) == 0x0002A8, "Member 'UWBP_SpinBox_C::RoundingMethod' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, MinIntegralDigits) == 0x0002AC, "Member 'UWBP_SpinBox_C::MinIntegralDigits' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, MinFractionalDigits) == 0x0002B0, "Member 'UWBP_SpinBox_C::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, MaxFractionalDigits) == 0x0002B4, "Member 'UWBP_SpinBox_C::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, bCanEditText) == 0x0002B8, "Member 'UWBP_SpinBox_C::bCanEditText' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, TabSize) == 0x0002BC, "Member 'UWBP_SpinBox_C::TabSize' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, OldValue) == 0x0002C0, "Member 'UWBP_SpinBox_C::OldValue' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, OnValueChanged) == 0x0002C8, "Member 'UWBP_SpinBox_C::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, bButtonPressed) == 0x0002D8, "Member 'UWBP_SpinBox_C::bButtonPressed' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, FirstPressWorldSeconds) == 0x0002DC, "Member 'UWBP_SpinBox_C::FirstPressWorldSeconds' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, ButtonPressRepeatTime) == 0x0002E0, "Member 'UWBP_SpinBox_C::ButtonPressRepeatTime' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, ButtonPressInitialDelay) == 0x0002E4, "Member 'UWBP_SpinBox_C::ButtonPressInitialDelay' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, DelayBetweenSpeedIncreases) == 0x0002E8, "Member 'UWBP_SpinBox_C::DelayBetweenSpeedIncreases' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, bIncreaseButtonPressed) == 0x0002EC, "Member 'UWBP_SpinBox_C::bIncreaseButtonPressed' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, ButtonUpdateSpeedIndex) == 0x0002F0, "Member 'UWBP_SpinBox_C::ButtonUpdateSpeedIndex' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, SpeedMultipliers) == 0x0002F8, "Member 'UWBP_SpinBox_C::SpeedMultipliers' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, NotADragCursorDeltaSq) == 0x000308, "Member 'UWBP_SpinBox_C::NotADragCursorDeltaSq' has a wrong offset!");
static_assert(offsetof(UWBP_SpinBox_C, CumulativeDragDistance) == 0x00030C, "Member 'UWBP_SpinBox_C::CumulativeDragDistance' has a wrong offset!");

}

