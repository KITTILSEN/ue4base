#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GBItemFlashLightComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GroundBranch_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GBItemFlashLightComponent.BP_GBItemFlashLightComponent_C
// 0x0070 (0x03D0 - 0x0360)
class UBP_GBItemFlashLightComponent_C final : public USpotLightComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialInstanceDynamic*               LightMID;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightActive;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      FlareFX;                                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Detectable_Flashlight_C*            DetectableFlashlight;                              // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AutoTurnOff;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightVisibility;                                  // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBGameplayTagEventHandle              NVGEnabledTagHandle;                               // 0x0398(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bPlayerCanSeeIR;                                   // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsIRLight;                                        // 0x03B1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bLightActive, bool bLightVisibility)> OnLightUpdate;          // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_GBItemFlashLightComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnAddedToInventory(class AGBCharacter* Character);
	void OnPlayerNightVisionStatusChanged_Event_0(bool bEnabled);
	void UnbindPlayerNightVisionStatusMaybe();
	void BindPlayerNightVisionStatusMaybe();
	void OnBeingEquipped();
	void OnBeingUnequipped();
	void EnableAutoTurnOffMaybe();
	void AutoTurnOffTimer();
	void ReceiveBeginPlay();
	void MulticastSetLightActive(bool bLightActive_0);
	void OnRemovedFromInventory(class AGBCharacter* Character);
	void DisableLight();
	void InternalUpdateLight();
	void EnableLight();
	void OnRep_bLightActive();
	void AIFlashStunnedCheck();
	void UpdateCharacterLightLevel(class AGBCharacter* InCharacter);
	void ClearCharacterLightLevel(class AGBCharacter* InCharacter);

	void GetActorsToIgnore(TArray<class AActor*>* OutIgnore) const;
	void GetLightActive(bool* OutActive) const;
	void GetOwningItem(class AGBInvItem** AsGBItem) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GBItemFlashLightComponent_C">();
	}
	static class UBP_GBItemFlashLightComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GBItemFlashLightComponent_C>();
	}
};
static_assert(alignof(UBP_GBItemFlashLightComponent_C) == 0x000010, "Wrong alignment on UBP_GBItemFlashLightComponent_C");
static_assert(sizeof(UBP_GBItemFlashLightComponent_C) == 0x0003D0, "Wrong size on UBP_GBItemFlashLightComponent_C");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, UberGraphFrame) == 0x000360, "Member 'UBP_GBItemFlashLightComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, LightMID) == 0x000368, "Member 'UBP_GBItemFlashLightComponent_C::LightMID' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, bLightActive) == 0x000370, "Member 'UBP_GBItemFlashLightComponent_C::bLightActive' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, FlareFX) == 0x000378, "Member 'UBP_GBItemFlashLightComponent_C::FlareFX' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, DetectableFlashlight) == 0x000380, "Member 'UBP_GBItemFlashLightComponent_C::DetectableFlashlight' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, AutoTurnOff) == 0x000388, "Member 'UBP_GBItemFlashLightComponent_C::AutoTurnOff' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, bLightVisibility) == 0x000390, "Member 'UBP_GBItemFlashLightComponent_C::bLightVisibility' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, NVGEnabledTagHandle) == 0x000398, "Member 'UBP_GBItemFlashLightComponent_C::NVGEnabledTagHandle' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, bPlayerCanSeeIR) == 0x0003B0, "Member 'UBP_GBItemFlashLightComponent_C::bPlayerCanSeeIR' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, bIsIRLight) == 0x0003B1, "Member 'UBP_GBItemFlashLightComponent_C::bIsIRLight' has a wrong offset!");
static_assert(offsetof(UBP_GBItemFlashLightComponent_C, OnLightUpdate) == 0x0003B8, "Member 'UBP_GBItemFlashLightComponent_C::OnLightUpdate' has a wrong offset!");

}

