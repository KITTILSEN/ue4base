#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Chemlight

#include "Basic.hpp"

#include "GroundBranch_structs.hpp"
#include "FGBChemlightColour_structs.hpp"


namespace SDK::Params
{

// Function BP_Chemlight.BP_Chemlight_C.ExecuteUbergraph_BP_Chemlight
// 0x00D0 (0x00D0 - 0x0000)
struct BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerState*                         K2Node_CustomEvent_PlayerState;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBCharacter*                           K2Node_Event_Character_1;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBPlayerState*                         K2Node_DynamicCast_AsGBPlayer_State;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           K2Node_Event_Character;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerState*                         K2Node_DynamicCast_AsGBPlayer_State_1;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBPlayerController*                    K2Node_DynamicCast_AsGBPlayer_Controller;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBHUD*                                 CallFunc_GetGBHUD_ReturnValue;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AGBPlayerState* PlayerState)> K2Node_CreateDelegate_OutputDelegate;         // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           CallFunc_GetGBInstigator_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           CallFunc_GetGBInstigator_ReturnValue_1;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsClientsideProxy_ReturnValue;            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_AttachItemTo_ReturnValue;              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             K2Node_Event_Proxy;                                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Chemlight_C*                        K2Node_DynamicCast_AsBP_Chemlight;                 // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight) == 0x000008, "Wrong alignment on BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight");
static_assert(sizeof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight) == 0x0000D0, "Wrong size on BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, EntryPoint) == 0x000000, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_CustomEvent_PlayerState) == 0x000010, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_Event_Character_1) == 0x000018, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_Event_Character_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_AsGBPlayer_State) == 0x000020, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_AsGBPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_Event_Character) == 0x000030, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_AsGBPlayer_State_1) == 0x000040, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_AsGBPlayer_State_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_GetPlayerController_ReturnValue) == 0x000050, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_AsGBPlayer_Controller) == 0x000058, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_AsGBPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_GetGBHUD_ReturnValue) == 0x000068, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_GetGBHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_HasAuthority_ReturnValue) == 0x000070, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_CreateDelegate_OutputDelegate) == 0x000074, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_HasAuthority_ReturnValue_1) == 0x000084, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsValid_ReturnValue) == 0x000085, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_GetGBInstigator_ReturnValue) == 0x000088, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_GetGBInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsPlayerControlled_ReturnValue) == 0x000090, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsLocallyControlled_ReturnValue) == 0x000091, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_BooleanAND_ReturnValue) == 0x000092, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000098, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A1, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_GetGBInstigator_ReturnValue_1) == 0x0000A8, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_GetGBInstigator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsClientsideProxy_ReturnValue) == 0x0000B0, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsClientsideProxy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000B1, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_BP_AttachItemTo_ReturnValue) == 0x0000B2, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_BP_AttachItemTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_Event_Proxy) == 0x0000B8, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_Event_Proxy' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_AsBP_Chemlight) == 0x0000C0, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_AsBP_Chemlight' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0000C9, "Member 'BP_Chemlight_C_ExecuteUbergraph_BP_Chemlight::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.OnClientsideProxyCreatedEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_Chemlight_C_OnClientsideProxyCreatedEvent final
{
public:
	class AGBInvItem*                             Proxy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Chemlight_C_OnClientsideProxyCreatedEvent) == 0x000008, "Wrong alignment on BP_Chemlight_C_OnClientsideProxyCreatedEvent");
static_assert(sizeof(BP_Chemlight_C_OnClientsideProxyCreatedEvent) == 0x000008, "Wrong size on BP_Chemlight_C_OnClientsideProxyCreatedEvent");
static_assert(offsetof(BP_Chemlight_C_OnClientsideProxyCreatedEvent, Proxy) == 0x000000, "Member 'BP_Chemlight_C_OnClientsideProxyCreatedEvent::Proxy' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.OnRemovedFromInventoryEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_Chemlight_C_OnRemovedFromInventoryEvent final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Chemlight_C_OnRemovedFromInventoryEvent) == 0x000008, "Wrong alignment on BP_Chemlight_C_OnRemovedFromInventoryEvent");
static_assert(sizeof(BP_Chemlight_C_OnRemovedFromInventoryEvent) == 0x000008, "Wrong size on BP_Chemlight_C_OnRemovedFromInventoryEvent");
static_assert(offsetof(BP_Chemlight_C_OnRemovedFromInventoryEvent, Character) == 0x000000, "Member 'BP_Chemlight_C_OnRemovedFromInventoryEvent::Character' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.OnAddedToInventoryEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_Chemlight_C_OnAddedToInventoryEvent final
{
public:
	class AGBCharacter*                           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Chemlight_C_OnAddedToInventoryEvent) == 0x000008, "Wrong alignment on BP_Chemlight_C_OnAddedToInventoryEvent");
static_assert(sizeof(BP_Chemlight_C_OnAddedToInventoryEvent) == 0x000008, "Wrong size on BP_Chemlight_C_OnAddedToInventoryEvent");
static_assert(offsetof(BP_Chemlight_C_OnAddedToInventoryEvent, Character) == 0x000000, "Member 'BP_Chemlight_C_OnAddedToInventoryEvent::Character' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.OnPlayerTeamChanged_Event_0
// 0x0008 (0x0008 - 0x0000)
struct BP_Chemlight_C_OnPlayerTeamChanged_Event_0 final
{
public:
	class AGBPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Chemlight_C_OnPlayerTeamChanged_Event_0) == 0x000008, "Wrong alignment on BP_Chemlight_C_OnPlayerTeamChanged_Event_0");
static_assert(sizeof(BP_Chemlight_C_OnPlayerTeamChanged_Event_0) == 0x000008, "Wrong size on BP_Chemlight_C_OnPlayerTeamChanged_Event_0");
static_assert(offsetof(BP_Chemlight_C_OnPlayerTeamChanged_Event_0, PlayerState) == 0x000000, "Member 'BP_Chemlight_C_OnPlayerTeamChanged_Event_0::PlayerState' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.UpdateTeamChemlightColourRow
// 0x0070 (0x0070 - 0x0000)
struct BP_Chemlight_C_UpdateTeamChemlightColourRow final
{
public:
	class AGBPlayerState*                         InGBPlayerState;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPvP;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ETeamElement                                  TeamElement;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamElement                                  CallFunc_GetTeamElement_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamId_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBGameState*                           K2Node_DynamicCast_AsGBGame_State;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGBGameModeType                               CallFunc_GetGameModeType_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0038(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFGBChemlightColour                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0054(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Chemlight_C_UpdateTeamChemlightColourRow) == 0x000008, "Wrong alignment on BP_Chemlight_C_UpdateTeamChemlightColourRow");
static_assert(sizeof(BP_Chemlight_C_UpdateTeamChemlightColourRow) == 0x000070, "Wrong size on BP_Chemlight_C_UpdateTeamChemlightColourRow");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, InGBPlayerState) == 0x000000, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::InGBPlayerState' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, bPvP) == 0x000008, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::bPvP' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, TeamElement) == 0x000009, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::TeamElement' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, TeamId) == 0x00000A, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::TeamId' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetTeamElement_ReturnValue) == 0x00000B, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetTeamElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetTeamId_ReturnValue) == 0x00000C, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, Temp_bool_True_if_break_was_hit_Variable) == 0x00000D, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetGameState_ReturnValue) == 0x000020, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, K2Node_DynamicCast_AsGBGame_State) == 0x000028, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::K2Node_DynamicCast_AsGBGame_State' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetGameModeType_ReturnValue) == 0x000031, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetGameModeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000038, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetDataTableRowFromName_OutRow) == 0x000054, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000068, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_Less_IntInt_ReturnValue) == 0x000069, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_BooleanAND_ReturnValue) == 0x00006A, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x00006B, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00006C, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00006D, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_BooleanAND_ReturnValue_1) == 0x00006E, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_UpdateTeamChemlightColourRow, CallFunc_BooleanAND_ReturnValue_2) == 0x00006F, "Member 'BP_Chemlight_C_UpdateTeamChemlightColourRow::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.OnRep_bIgnited
// 0x0001 (0x0001 - 0x0000)
struct BP_Chemlight_C_OnRep_bIgnited final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Chemlight_C_OnRep_bIgnited) == 0x000001, "Wrong alignment on BP_Chemlight_C_OnRep_bIgnited");
static_assert(sizeof(BP_Chemlight_C_OnRep_bIgnited) == 0x000001, "Wrong size on BP_Chemlight_C_OnRep_bIgnited");
static_assert(offsetof(BP_Chemlight_C_OnRep_bIgnited, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_Chemlight_C_OnRep_bIgnited::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.OnRep_ChemLightColourRow
// 0x001C (0x001C - 0x0000)
struct BP_Chemlight_C_OnRep_ChemLightColourRow final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFGBChemlightColour                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0004(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Chemlight_C_OnRep_ChemLightColourRow) == 0x000004, "Wrong alignment on BP_Chemlight_C_OnRep_ChemLightColourRow");
static_assert(sizeof(BP_Chemlight_C_OnRep_ChemLightColourRow) == 0x00001C, "Wrong size on BP_Chemlight_C_OnRep_ChemLightColourRow");
static_assert(offsetof(BP_Chemlight_C_OnRep_ChemLightColourRow, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_Chemlight_C_OnRep_ChemLightColourRow::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_OnRep_ChemLightColourRow, CallFunc_GetDataTableRowFromName_OutRow) == 0x000004, "Member 'BP_Chemlight_C_OnRep_ChemLightColourRow::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_OnRep_ChemLightColourRow, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000018, "Member 'BP_Chemlight_C_OnRep_ChemLightColourRow::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_Chemlight.BP_Chemlight_C.GetUnequipInfo
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Chemlight_C_GetUnequipInfo final
{
public:
	EHand                                         TargetHand;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBUnequipInfo                         ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference)
	class AGBCharacter*                           CallFunc_GetGBInstigator_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGBUnequipInfo                         K2Node_MakeStruct_GBUnequipInfo;                   // 0x0060(0x0040)(NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Chemlight_C_GetUnequipInfo) == 0x000010, "Wrong alignment on BP_Chemlight_C_GetUnequipInfo");
static_assert(sizeof(BP_Chemlight_C_GetUnequipInfo) == 0x0000A0, "Wrong size on BP_Chemlight_C_GetUnequipInfo");
static_assert(offsetof(BP_Chemlight_C_GetUnequipInfo, TargetHand) == 0x000000, "Member 'BP_Chemlight_C_GetUnequipInfo::TargetHand' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_GetUnequipInfo, ReturnValue) == 0x000010, "Member 'BP_Chemlight_C_GetUnequipInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_GetUnequipInfo, CallFunc_GetGBInstigator_ReturnValue) == 0x000050, "Member 'BP_Chemlight_C_GetUnequipInfo::CallFunc_GetGBInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_GetUnequipInfo, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_Chemlight_C_GetUnequipInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Chemlight_C_GetUnequipInfo, K2Node_MakeStruct_GBUnequipInfo) == 0x000060, "Member 'BP_Chemlight_C_GetUnequipInfo::K2Node_MakeStruct_GBUnequipInfo' has a wrong offset!");

}

