#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RIG_AimAndCollision

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass RIG_AimAndCollision.RIG_AimAndCollision_C
// 0x00F0 (0x0740 - 0x0650)
class URIG_AimAndCollision_C final : public UControlRig
{
public:
	struct FVector                                SightLineRelativeLocation;                         // 0x0650(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ValidSightLineModifier;                            // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SightLineRelativeRotation;                         // 0x0660(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               AnimRotOffset;                                     // 0x066C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CollisionTraceEndOffset;                           // 0x0678(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceStart;                                        // 0x0684(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceEnd;                                          // 0x0690(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             IKHandTM;                                          // 0x06A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         CollisionDistance;                                 // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastCollisionDistance;                             // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngagedAlpha;                                      // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionNormalDotUp;                              // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bApplyMovementSway;                                // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E1[0x3];                                      // 0x06E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ApplyMovementSwayAsAlpha;                          // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRunning;                                          // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E9[0x3];                                      // 0x06E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CombinedRecoilSwayOffset;                          // 0x06EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RotationalInertiaOffset;                           // 0x06F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         MovementSwayWalkPitch;                             // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSwayWalkYaw;                               // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSwayRunPitch;                              // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSwayRunYaw;                                // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentMovementSwayPitch;                          // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentMovementSwayYaw;                            // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetMovementSwayPitch;                           // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetMovementSwayYaw;                             // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinStep;                                           // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStep;                                           // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSwayCurveValue;                            // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MovementSwayOffset;                                // 0x0730(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RIG_AimAndCollision_C">();
	}
	static class URIG_AimAndCollision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URIG_AimAndCollision_C>();
	}
};
static_assert(alignof(URIG_AimAndCollision_C) == 0x000010, "Wrong alignment on URIG_AimAndCollision_C");
static_assert(sizeof(URIG_AimAndCollision_C) == 0x000740, "Wrong size on URIG_AimAndCollision_C");
static_assert(offsetof(URIG_AimAndCollision_C, SightLineRelativeLocation) == 0x000650, "Member 'URIG_AimAndCollision_C::SightLineRelativeLocation' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, ValidSightLineModifier) == 0x00065C, "Member 'URIG_AimAndCollision_C::ValidSightLineModifier' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, SightLineRelativeRotation) == 0x000660, "Member 'URIG_AimAndCollision_C::SightLineRelativeRotation' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, AnimRotOffset) == 0x00066C, "Member 'URIG_AimAndCollision_C::AnimRotOffset' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, CollisionTraceEndOffset) == 0x000678, "Member 'URIG_AimAndCollision_C::CollisionTraceEndOffset' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, TraceStart) == 0x000684, "Member 'URIG_AimAndCollision_C::TraceStart' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, TraceEnd) == 0x000690, "Member 'URIG_AimAndCollision_C::TraceEnd' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, IKHandTM) == 0x0006A0, "Member 'URIG_AimAndCollision_C::IKHandTM' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, CollisionDistance) == 0x0006D0, "Member 'URIG_AimAndCollision_C::CollisionDistance' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, LastCollisionDistance) == 0x0006D4, "Member 'URIG_AimAndCollision_C::LastCollisionDistance' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, EngagedAlpha) == 0x0006D8, "Member 'URIG_AimAndCollision_C::EngagedAlpha' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, CollisionNormalDotUp) == 0x0006DC, "Member 'URIG_AimAndCollision_C::CollisionNormalDotUp' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, bApplyMovementSway) == 0x0006E0, "Member 'URIG_AimAndCollision_C::bApplyMovementSway' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, ApplyMovementSwayAsAlpha) == 0x0006E4, "Member 'URIG_AimAndCollision_C::ApplyMovementSwayAsAlpha' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, bRunning) == 0x0006E8, "Member 'URIG_AimAndCollision_C::bRunning' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, CombinedRecoilSwayOffset) == 0x0006EC, "Member 'URIG_AimAndCollision_C::CombinedRecoilSwayOffset' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, RotationalInertiaOffset) == 0x0006F8, "Member 'URIG_AimAndCollision_C::RotationalInertiaOffset' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MovementSwayWalkPitch) == 0x000704, "Member 'URIG_AimAndCollision_C::MovementSwayWalkPitch' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MovementSwayWalkYaw) == 0x000708, "Member 'URIG_AimAndCollision_C::MovementSwayWalkYaw' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MovementSwayRunPitch) == 0x00070C, "Member 'URIG_AimAndCollision_C::MovementSwayRunPitch' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MovementSwayRunYaw) == 0x000710, "Member 'URIG_AimAndCollision_C::MovementSwayRunYaw' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, CurrentMovementSwayPitch) == 0x000714, "Member 'URIG_AimAndCollision_C::CurrentMovementSwayPitch' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, CurrentMovementSwayYaw) == 0x000718, "Member 'URIG_AimAndCollision_C::CurrentMovementSwayYaw' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, TargetMovementSwayPitch) == 0x00071C, "Member 'URIG_AimAndCollision_C::TargetMovementSwayPitch' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, TargetMovementSwayYaw) == 0x000720, "Member 'URIG_AimAndCollision_C::TargetMovementSwayYaw' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MinStep) == 0x000724, "Member 'URIG_AimAndCollision_C::MinStep' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MaxStep) == 0x000728, "Member 'URIG_AimAndCollision_C::MaxStep' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MovementSwayCurveValue) == 0x00072C, "Member 'URIG_AimAndCollision_C::MovementSwayCurveValue' has a wrong offset!");
static_assert(offsetof(URIG_AimAndCollision_C, MovementSwayOffset) == 0x000730, "Member 'URIG_AimAndCollision_C::MovementSwayOffset' has a wrong offset!");

}

