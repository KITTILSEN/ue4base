#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WatchApp

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_WatchApp.WBP_WatchApp_C
// 0x01E8 (0x0448 - 0x0260)
class UWBP_WatchApp_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Blink;                                             // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pulse;                                             // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 AlertPulse_Image;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CompassRing_Image;                                 // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DistanceReading_Text;                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HourGlass_Image;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Minutes_Text;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ObjectiveMarker_Image;                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Pulse_Text_1;                                      // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Range_Text;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Time_Text;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TimeRemaining_Text;                                // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TimeRemaining_Text_1;                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpDownArrow_Image;                                 // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WatchAlert_Switcher;                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WatchMode_Switcher;                                // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 TimeReadout;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AGBSky*                                 SkyActor;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    MeshCompRef;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AGBCharacter*                           GBCharacterRef;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         UpdateTime;                                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BearingDegrees;                                    // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentDistanceMeters;                             // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWatchMode                                    WatchMode;                                         // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplayBearing;                                   // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisplayDistance;                                  // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31F[0x1];                                      // 0x031F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumericAlertLevel;                                 // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DistanceText;                                      // 0x0328(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AlertText;                                         // 0x0340(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AlertCircleAlpha;                                  // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePlaybackSpeed;                                 // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObjectiveInfoPollingPeriod;                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpDownState;                                       // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ObjectiveLocation;                                 // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMeasure2D;                                        // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowUpDown;                                       // 0x0375(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsCapturing;                                      // 0x0376(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAlertLevel                                   AlertLevel;                                        // 0x0377(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   OldAlertLevel;                                     // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ObjectiveDirection;                                // 0x037C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCompassBearing;                             // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceQuantum;                                   // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UpDownArrowHeightThreshold;                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NoDistanceText;                                    // 0x0398(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   DefenderInRangeText;                               // 0x03B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AttackerInRangeText;                               // 0x03C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AttackerCapturingText;                             // 0x03E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGBCaptureZone                         CaptureZone;                                       // 0x03F8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         BearingAndObjectiveUpdateDelay;                    // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         WatchAlertDuration;                                // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 TimeReminders;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandle_UpdateBearingAndDistance;              // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_RoundTimeAlert;                        // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AlertLingerTime;                                   // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTurnOffAlertAfterLinger;                          // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaledCaptureZoneRadius;                           // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleCaptureZoneHeight;                            // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BearingOffset;                                     // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_WatchApp(int32 EntryPoint);
	void UnbindDelegates();
	void OnInitialTimeOfDayChanged(class AGBSky* SkyActor_0);
	void UpdateObjectiveFinder();
	void InitBearingAndObjectiveUpdate();
	void OnProximityAlert();
	void OnRoundStageSet(class AGBGameState* GameState);
	void SendRoundTimeAlert();
	void ScheduleNextRoundTimeAlert();
	void UpdateDistanceText();
	void PlayRoundTimeRemainingAlertSound();
	void PlayCapturingAlertSound();
	void PlayInRangeAlertSound();
	void RestoreWatchModeAfterAlert();
	void OnRoundTimeAlert(class AGBGameState* GameState);
	void Destruct();
	void UpdateTimeText();
	void Timer_UpdateBearingAndDistance();
	void OnCaptureZoneChanged(class AGBGameState* GameState);
	void OnCaptureStateChanged(class AGBGameState* GameState);
	void BindDelegates();
	void OnWatchModeChanged(class AGBGameState* GameState);
	void OnWatchConfigChanged(class AGBGameState* GameState);
	void OnAlertLevelChanged(EAlertLevel NewAlertLevel);
	void UpdateBearingAndDistance();
	void OnObjectiveLocationChanged(class AGBGameState* GameState);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	ESlateVisibility GetObjectiveMarkerVis();
	class FText GetDistanceReadingText();
	ESlateVisibility GetAlertPulseVis();
	void SetAlertTextAndStartPulse(const class FText& AlertText_0, const struct FLinearColor& InColorAndOpacity, float PlaybackSpeed);
	void ClearAlertAndStopPulse();
	void GetTimeToNextRoundTimeAlert(float CurrentRoundTime, float* TimeToNextTimeReminder);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_WatchApp_C">();
	}
	static class UWBP_WatchApp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_WatchApp_C>();
	}
};
static_assert(alignof(UWBP_WatchApp_C) == 0x000008, "Wrong alignment on UWBP_WatchApp_C");
static_assert(sizeof(UWBP_WatchApp_C) == 0x000448, "Wrong size on UWBP_WatchApp_C");
static_assert(offsetof(UWBP_WatchApp_C, UberGraphFrame) == 0x000260, "Member 'UWBP_WatchApp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, Blink) == 0x000268, "Member 'UWBP_WatchApp_C::Blink' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, Pulse) == 0x000270, "Member 'UWBP_WatchApp_C::Pulse' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AlertPulse_Image) == 0x000278, "Member 'UWBP_WatchApp_C::AlertPulse_Image' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, CompassRing_Image) == 0x000280, "Member 'UWBP_WatchApp_C::CompassRing_Image' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, DistanceReading_Text) == 0x000288, "Member 'UWBP_WatchApp_C::DistanceReading_Text' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, HourGlass_Image) == 0x000290, "Member 'UWBP_WatchApp_C::HourGlass_Image' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, Minutes_Text) == 0x000298, "Member 'UWBP_WatchApp_C::Minutes_Text' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, ObjectiveMarker_Image) == 0x0002A0, "Member 'UWBP_WatchApp_C::ObjectiveMarker_Image' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, Pulse_Text_1) == 0x0002A8, "Member 'UWBP_WatchApp_C::Pulse_Text_1' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, Range_Text) == 0x0002B0, "Member 'UWBP_WatchApp_C::Range_Text' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, Time_Text) == 0x0002B8, "Member 'UWBP_WatchApp_C::Time_Text' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, TimeRemaining_Text) == 0x0002C0, "Member 'UWBP_WatchApp_C::TimeRemaining_Text' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, TimeRemaining_Text_1) == 0x0002C8, "Member 'UWBP_WatchApp_C::TimeRemaining_Text_1' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, UpDownArrow_Image) == 0x0002D0, "Member 'UWBP_WatchApp_C::UpDownArrow_Image' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, WatchAlert_Switcher) == 0x0002D8, "Member 'UWBP_WatchApp_C::WatchAlert_Switcher' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, WatchMode_Switcher) == 0x0002E0, "Member 'UWBP_WatchApp_C::WatchMode_Switcher' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, TimeReadout) == 0x0002E8, "Member 'UWBP_WatchApp_C::TimeReadout' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, SkyActor) == 0x0002F8, "Member 'UWBP_WatchApp_C::SkyActor' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, MeshCompRef) == 0x000300, "Member 'UWBP_WatchApp_C::MeshCompRef' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, GBCharacterRef) == 0x000308, "Member 'UWBP_WatchApp_C::GBCharacterRef' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, UpdateTime) == 0x000310, "Member 'UWBP_WatchApp_C::UpdateTime' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, BearingDegrees) == 0x000314, "Member 'UWBP_WatchApp_C::BearingDegrees' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, CurrentDistanceMeters) == 0x000318, "Member 'UWBP_WatchApp_C::CurrentDistanceMeters' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, WatchMode) == 0x00031C, "Member 'UWBP_WatchApp_C::WatchMode' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, bDisplayBearing) == 0x00031D, "Member 'UWBP_WatchApp_C::bDisplayBearing' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, bDisplayDistance) == 0x00031E, "Member 'UWBP_WatchApp_C::bDisplayDistance' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, NumericAlertLevel) == 0x000320, "Member 'UWBP_WatchApp_C::NumericAlertLevel' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, DistanceText) == 0x000328, "Member 'UWBP_WatchApp_C::DistanceText' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AlertText) == 0x000340, "Member 'UWBP_WatchApp_C::AlertText' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AlertCircleAlpha) == 0x000358, "Member 'UWBP_WatchApp_C::AlertCircleAlpha' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, BasePlaybackSpeed) == 0x00035C, "Member 'UWBP_WatchApp_C::BasePlaybackSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, ObjectiveInfoPollingPeriod) == 0x000360, "Member 'UWBP_WatchApp_C::ObjectiveInfoPollingPeriod' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, UpDownState) == 0x000364, "Member 'UWBP_WatchApp_C::UpDownState' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, ObjectiveLocation) == 0x000368, "Member 'UWBP_WatchApp_C::ObjectiveLocation' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, bMeasure2D) == 0x000374, "Member 'UWBP_WatchApp_C::bMeasure2D' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, bShowUpDown) == 0x000375, "Member 'UWBP_WatchApp_C::bShowUpDown' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, bIsCapturing) == 0x000376, "Member 'UWBP_WatchApp_C::bIsCapturing' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AlertLevel) == 0x000377, "Member 'UWBP_WatchApp_C::AlertLevel' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, OldAlertLevel) == 0x000378, "Member 'UWBP_WatchApp_C::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, ObjectiveDirection) == 0x00037C, "Member 'UWBP_WatchApp_C::ObjectiveDirection' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, CurrentCompassBearing) == 0x000388, "Member 'UWBP_WatchApp_C::CurrentCompassBearing' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, DistanceQuantum) == 0x00038C, "Member 'UWBP_WatchApp_C::DistanceQuantum' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, UpDownArrowHeightThreshold) == 0x000390, "Member 'UWBP_WatchApp_C::UpDownArrowHeightThreshold' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, NoDistanceText) == 0x000398, "Member 'UWBP_WatchApp_C::NoDistanceText' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, DefenderInRangeText) == 0x0003B0, "Member 'UWBP_WatchApp_C::DefenderInRangeText' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AttackerInRangeText) == 0x0003C8, "Member 'UWBP_WatchApp_C::AttackerInRangeText' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AttackerCapturingText) == 0x0003E0, "Member 'UWBP_WatchApp_C::AttackerCapturingText' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, CaptureZone) == 0x0003F8, "Member 'UWBP_WatchApp_C::CaptureZone' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, BearingAndObjectiveUpdateDelay) == 0x000404, "Member 'UWBP_WatchApp_C::BearingAndObjectiveUpdateDelay' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, WatchAlertDuration) == 0x000408, "Member 'UWBP_WatchApp_C::WatchAlertDuration' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, TimeReminders) == 0x000410, "Member 'UWBP_WatchApp_C::TimeReminders' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, TimerHandle_UpdateBearingAndDistance) == 0x000420, "Member 'UWBP_WatchApp_C::TimerHandle_UpdateBearingAndDistance' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, TimerHandle_RoundTimeAlert) == 0x000428, "Member 'UWBP_WatchApp_C::TimerHandle_RoundTimeAlert' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, AlertLingerTime) == 0x000430, "Member 'UWBP_WatchApp_C::AlertLingerTime' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, bTurnOffAlertAfterLinger) == 0x000434, "Member 'UWBP_WatchApp_C::bTurnOffAlertAfterLinger' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, ScaledCaptureZoneRadius) == 0x000438, "Member 'UWBP_WatchApp_C::ScaledCaptureZoneRadius' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, ScaleCaptureZoneHeight) == 0x00043C, "Member 'UWBP_WatchApp_C::ScaleCaptureZoneHeight' has a wrong offset!");
static_assert(offsetof(UWBP_WatchApp_C, BearingOffset) == 0x000440, "Member 'UWBP_WatchApp_C::BearingOffset' has a wrong offset!");

}

