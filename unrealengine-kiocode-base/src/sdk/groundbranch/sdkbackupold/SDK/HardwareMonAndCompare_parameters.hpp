#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HardwareMonAndCompare

#include "Basic.hpp"

#include "HardwareMonAndCompare_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.addBytesToFileAndCloseIt
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Bytes;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt, Bytes) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt::Bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt, success) == 0x000028, "Member 'FileFunctionsHardwareMonAndCompare_addBytesToFileAndCloseIt::success' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.base64StringToBytes
// 0x0028 (0x0028 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_base64StringToBytes final
{
public:
	class FString                                 base64String;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_base64StringToBytes) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_base64StringToBytes");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_base64StringToBytes) == 0x000028, "Wrong size on FileFunctionsHardwareMonAndCompare_base64StringToBytes");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_base64StringToBytes, base64String) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_base64StringToBytes::base64String' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_base64StringToBytes, success) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_base64StringToBytes::success' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_base64StringToBytes, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_base64StringToBytes::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.base64StringToString
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_base64StringToString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 base64String;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_base64StringToString) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_base64StringToString");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_base64StringToString) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_base64StringToString");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_base64StringToString, String) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_base64StringToString::String' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_base64StringToString, base64String) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_base64StringToString::base64String' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.bytesToBase64String
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_bytesToBase64String final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 base64String;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_bytesToBase64String) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_bytesToBase64String");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_bytesToBase64String) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_bytesToBase64String");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_bytesToBase64String, Bytes) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_bytesToBase64String::Bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_bytesToBase64String, base64String) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_bytesToBase64String::base64String' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.createDirectory
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_createDirectory final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_createDirectory) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_createDirectory");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_createDirectory) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_createDirectory");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_createDirectory, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_createDirectory::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_createDirectory, Path) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_createDirectory::Path' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_createDirectory, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_createDirectory::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.decryptMessageWithAES
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_decryptMessageWithAES final
{
public:
	class FString                                 encryptedBase64Message;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 keyIn256Bit;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_decryptMessageWithAES) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_decryptMessageWithAES");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_decryptMessageWithAES) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_decryptMessageWithAES");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_decryptMessageWithAES, encryptedBase64Message) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_decryptMessageWithAES::encryptedBase64Message' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_decryptMessageWithAES, keyIn256Bit) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_decryptMessageWithAES::keyIn256Bit' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_decryptMessageWithAES, ReturnValue) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_decryptMessageWithAES::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.deleteDirectory
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_deleteDirectory final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_deleteDirectory) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_deleteDirectory");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_deleteDirectory) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_deleteDirectory");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteDirectory, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_deleteDirectory::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteDirectory, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_deleteDirectory::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteDirectory, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_deleteDirectory::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.deleteFile
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_deleteFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_deleteFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_deleteFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_deleteFile) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_deleteFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteFile, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_deleteFile::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteFile, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_deleteFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteFile, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_deleteFile::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.deleteFileAbsolutePath
// 0x0018 (0x0018 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath) == 0x000018, "Wrong size on FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath, FilePath) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath, ReturnValue) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_deleteFileAbsolutePath::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.directoryExists
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_directoryExists final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_directoryExists) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_directoryExists");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_directoryExists) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_directoryExists");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_directoryExists, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_directoryExists::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_directoryExists, Path) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_directoryExists::Path' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_directoryExists, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_directoryExists::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.encryptMessageWithAES
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_encryptMessageWithAES final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 keyIn256Bit;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_encryptMessageWithAES) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_encryptMessageWithAES");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_encryptMessageWithAES) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_encryptMessageWithAES");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_encryptMessageWithAES, Message) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_encryptMessageWithAES::Message' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_encryptMessageWithAES, keyIn256Bit) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_encryptMessageWithAES::keyIn256Bit' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_encryptMessageWithAES, ReturnValue) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_encryptMessageWithAES::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.fileExists
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_fileExists final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_fileExists) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_fileExists");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_fileExists) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_fileExists");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileExists, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_fileExists::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileExists, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_fileExists::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileExists, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_fileExists::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.fileExistsAbsolutePath
// 0x0018 (0x0018 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath) == 0x000018, "Wrong size on FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath, FilePath) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath, ReturnValue) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_fileExistsAbsolutePath::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.fileSize
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_fileSize final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_fileSize) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_fileSize");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_fileSize) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_fileSize");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileSize, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_fileSize::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileSize, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_fileSize::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileSize, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_fileSize::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.fileSizeAbsolutePath
// 0x0018 (0x0018 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath) == 0x000018, "Wrong size on FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath, FilePath) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath, ReturnValue) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_fileSizeAbsolutePath::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.fileToBase64String
// 0x0040 (0x0040 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_fileToBase64String final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 base64String;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_fileToBase64String) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_fileToBase64String");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_fileToBase64String) == 0x000040, "Wrong size on FileFunctionsHardwareMonAndCompare_fileToBase64String");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileToBase64String, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_fileToBase64String::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileToBase64String, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_fileToBase64String::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileToBase64String, success) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_fileToBase64String::success' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileToBase64String, base64String) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_fileToBase64String::base64String' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_fileToBase64String, Filename) == 0x000030, "Member 'FileFunctionsHardwareMonAndCompare_fileToBase64String::Filename' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getAccessTimeStamp
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getAccessTimeStamp final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getAccessTimeStamp) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getAccessTimeStamp");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getAccessTimeStamp) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_getAccessTimeStamp");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAccessTimeStamp, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getAccessTimeStamp::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAccessTimeStamp, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_getAccessTimeStamp::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAccessTimeStamp, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_getAccessTimeStamp::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getAllFilesFromDirectory
// 0x0050 (0x0050 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         files;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         filePaths;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileType;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory) == 0x000050, "Wrong size on FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory, Count) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory::Count' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory, files) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory::files' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory, filePaths) == 0x000030, "Member 'FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory::filePaths' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory, FileType) == 0x000040, "Member 'FileFunctionsHardwareMonAndCompare_getAllFilesFromDirectory::FileType' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getFileFunctionsHardwareMonAndCompareTarget
// 0x0008 (0x0008 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget final
{
public:
	class UFileFunctionsHardwareMonAndCompare*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget) == 0x000008, "Wrong size on FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget, ReturnValue) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getFileFunctionsHardwareMonAndCompareTarget::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getFilenameOnDisk
// 0x0028 (0x0028 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getFilenameOnDisk final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getFilenameOnDisk) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getFilenameOnDisk");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getFilenameOnDisk) == 0x000028, "Wrong size on FileFunctionsHardwareMonAndCompare_getFilenameOnDisk");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getFilenameOnDisk, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getFilenameOnDisk::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getFilenameOnDisk, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_getFilenameOnDisk::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getFilenameOnDisk, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_getFilenameOnDisk::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getMD5FromFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getMD5FromFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MD5;                                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getMD5FromFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getMD5FromFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getMD5FromFile) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_getMD5FromFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFile, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFile::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFile, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFile, success) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFile::success' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFile, MD5) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFile::MD5' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getMD5FromFileAbsolutePath
// 0x0028 (0x0028 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MD5;                                               // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath) == 0x000028, "Wrong size on FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath, FilePath) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath, success) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath::success' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath, MD5) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_getMD5FromFileAbsolutePath::MD5' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.getTimeStamp
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_getTimeStamp final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_getTimeStamp) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_getTimeStamp");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_getTimeStamp) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_getTimeStamp");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getTimeStamp, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_getTimeStamp::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getTimeStamp, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_getTimeStamp::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_getTimeStamp, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_getTimeStamp::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.int64ToString
// 0x0018 (0x0018 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_int64ToString final
{
public:
	int64                                         Num;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_int64ToString) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_int64ToString");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_int64ToString) == 0x000018, "Wrong size on FileFunctionsHardwareMonAndCompare_int64ToString");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_int64ToString, Num) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_int64ToString::Num' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_int64ToString, ReturnValue) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_int64ToString::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.isReadOnly
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_isReadOnly final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_isReadOnly) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_isReadOnly");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_isReadOnly) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_isReadOnly");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_isReadOnly, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_isReadOnly::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_isReadOnly, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_isReadOnly::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_isReadOnly, ReturnValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_isReadOnly::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.moveFile
// 0x0038 (0x0038 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_moveFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryTypeTo;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 filePathTo;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryTypeFrom;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 filePathFrom;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_moveFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_moveFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_moveFile) == 0x000038, "Wrong size on FileFunctionsHardwareMonAndCompare_moveFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_moveFile, directoryTypeTo) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_moveFile::directoryTypeTo' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_moveFile, filePathTo) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_moveFile::filePathTo' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_moveFile, directoryTypeFrom) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_moveFile::directoryTypeFrom' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_moveFile, filePathFrom) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_moveFile::filePathFrom' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_moveFile, ReturnValue) == 0x000030, "Member 'FileFunctionsHardwareMonAndCompare_moveFile::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.readBytesFromFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_readBytesFromFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_readBytesFromFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_readBytesFromFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_readBytesFromFile) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_readBytesFromFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readBytesFromFile, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_readBytesFromFile::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readBytesFromFile, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_readBytesFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readBytesFromFile, success) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_readBytesFromFile::success' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readBytesFromFile, ReturnValue) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_readBytesFromFile::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.readStringFromFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_readStringFromFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_readStringFromFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_readStringFromFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_readStringFromFile) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_readStringFromFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readStringFromFile, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_readStringFromFile::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readStringFromFile, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_readStringFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readStringFromFile, success) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_readStringFromFile::success' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_readStringFromFile, Data) == 0x000020, "Member 'FileFunctionsHardwareMonAndCompare_readStringFromFile::Data' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.setReadOnly
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_setReadOnly final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewReadOnlyValue;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_setReadOnly) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_setReadOnly");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_setReadOnly) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_setReadOnly");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setReadOnly, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_setReadOnly::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setReadOnly, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_setReadOnly::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setReadOnly, bNewReadOnlyValue) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_setReadOnly::bNewReadOnlyValue' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setReadOnly, ReturnValue) == 0x000019, "Member 'FileFunctionsHardwareMonAndCompare_setReadOnly::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.setTimeStamp
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_setTimeStamp final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_setTimeStamp) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_setTimeStamp");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_setTimeStamp) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_setTimeStamp");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setTimeStamp, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_setTimeStamp::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setTimeStamp, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_setTimeStamp::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_setTimeStamp, DateTime) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_setTimeStamp::DateTime' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.stringToBase64String
// 0x0020 (0x0020 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_stringToBase64String final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 base64String;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_stringToBase64String) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_stringToBase64String");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_stringToBase64String) == 0x000020, "Wrong size on FileFunctionsHardwareMonAndCompare_stringToBase64String");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_stringToBase64String, String) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_stringToBase64String::String' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_stringToBase64String, base64String) == 0x000010, "Member 'FileFunctionsHardwareMonAndCompare_stringToBase64String::base64String' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.writeBytesToFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_writeBytesToFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Bytes;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_writeBytesToFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_writeBytesToFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_writeBytesToFile) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_writeBytesToFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeBytesToFile, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_writeBytesToFile::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeBytesToFile, FilePath) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_writeBytesToFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeBytesToFile, Bytes) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_writeBytesToFile::Bytes' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeBytesToFile, success) == 0x000028, "Member 'FileFunctionsHardwareMonAndCompare_writeBytesToFile::success' has a wrong offset!");

// Function HardwareMonAndCompare.FileFunctionsHardwareMonAndCompare.writeStringToFile
// 0x0030 (0x0030 - 0x0000)
struct FileFunctionsHardwareMonAndCompare_writeStringToFile final
{
public:
	EFileFunctionsHardwareMonAndCompareDirectoryType directoryType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFileFunctionsHardwareMonAndCompareEncodingOptions fileEncoding;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileFunctionsHardwareMonAndCompare_writeStringToFile) == 0x000008, "Wrong alignment on FileFunctionsHardwareMonAndCompare_writeStringToFile");
static_assert(sizeof(FileFunctionsHardwareMonAndCompare_writeStringToFile) == 0x000030, "Wrong size on FileFunctionsHardwareMonAndCompare_writeStringToFile");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeStringToFile, directoryType) == 0x000000, "Member 'FileFunctionsHardwareMonAndCompare_writeStringToFile::directoryType' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeStringToFile, Data) == 0x000008, "Member 'FileFunctionsHardwareMonAndCompare_writeStringToFile::Data' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeStringToFile, FilePath) == 0x000018, "Member 'FileFunctionsHardwareMonAndCompare_writeStringToFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeStringToFile, fileEncoding) == 0x000028, "Member 'FileFunctionsHardwareMonAndCompare_writeStringToFile::fileEncoding' has a wrong offset!");
static_assert(offsetof(FileFunctionsHardwareMonAndCompare_writeStringToFile, success) == 0x000029, "Member 'FileFunctionsHardwareMonAndCompare_writeStringToFile::success' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.breakCPUStruct
// 0x0080 (0x0080 - 0x0000)
struct HardwareMonAndCompareBPLibrary_breakCPUStruct final
{
public:
	struct FCPUListStruct                         cpuStruct;                                         // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 clock;                                             // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 cores;                                             // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_breakCPUStruct) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_breakCPUStruct");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_breakCPUStruct) == 0x000080, "Wrong size on HardwareMonAndCompareBPLibrary_breakCPUStruct");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakCPUStruct, cpuStruct) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_breakCPUStruct::cpuStruct' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakCPUStruct, Name_0) == 0x000040, "Member 'HardwareMonAndCompareBPLibrary_breakCPUStruct::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakCPUStruct, score) == 0x000050, "Member 'HardwareMonAndCompareBPLibrary_breakCPUStruct::score' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakCPUStruct, clock) == 0x000060, "Member 'HardwareMonAndCompareBPLibrary_breakCPUStruct::clock' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakCPUStruct, cores) == 0x000070, "Member 'HardwareMonAndCompareBPLibrary_breakCPUStruct::cores' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.breakDriveInfo
// 0x0060 (0x0060 - 0x0000)
struct HardwareMonAndCompareBPLibrary_breakDriveInfo final
{
public:
	struct FSDriveInfo                            driveInfo;                                         // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         totalBytes;                                        // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         freeBytes;                                         // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalMegabyte;                                     // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         freeMegabyte;                                      // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalGigabyte;                                     // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         freeGigabyte;                                      // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_breakDriveInfo) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_breakDriveInfo");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_breakDriveInfo) == 0x000060, "Wrong size on HardwareMonAndCompareBPLibrary_breakDriveInfo");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, driveInfo) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::driveInfo' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, Name_0) == 0x000030, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, totalBytes) == 0x000040, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::totalBytes' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, freeBytes) == 0x000048, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::freeBytes' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, totalMegabyte) == 0x000050, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::totalMegabyte' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, freeMegabyte) == 0x000054, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::freeMegabyte' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, totalGigabyte) == 0x000058, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::totalGigabyte' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakDriveInfo, freeGigabyte) == 0x00005C, "Member 'HardwareMonAndCompareBPLibrary_breakDriveInfo::freeGigabyte' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.breakGPUStruct
// 0x0040 (0x0040 - 0x0000)
struct HardwareMonAndCompareBPLibrary_breakGPUStruct final
{
public:
	struct FGPUListStruct                         gpuStruct;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_breakGPUStruct) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_breakGPUStruct");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_breakGPUStruct) == 0x000040, "Wrong size on HardwareMonAndCompareBPLibrary_breakGPUStruct");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakGPUStruct, gpuStruct) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_breakGPUStruct::gpuStruct' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakGPUStruct, Name_0) == 0x000020, "Member 'HardwareMonAndCompareBPLibrary_breakGPUStruct::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_breakGPUStruct, score) == 0x000030, "Member 'HardwareMonAndCompareBPLibrary_breakGPUStruct::score' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getCPUInfoFromList
// 0x0048 (0x0048 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getCPUInfoFromList final
{
public:
	class FString                                 cpuName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         score;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 defaultClock;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         cores;                                             // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getCPUInfoFromList");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList) == 0x000048, "Wrong size on HardwareMonAndCompareBPLibrary_getCPUInfoFromList");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList, cpuName) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromList::cpuName' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList, found) == 0x000010, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromList::found' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList, Name_0) == 0x000018, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromList::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList, score) == 0x000028, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromList::score' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList, defaultClock) == 0x000030, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromList::defaultClock' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromList, cores) == 0x000040, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromList::cores' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getCPUInfoFromListPure
// 0x0048 (0x0048 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure final
{
public:
	class FString                                 cpuName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         score;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 defaultClock;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         cores;                                             // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure) == 0x000048, "Wrong size on HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure, cpuName) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure::cpuName' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure, found) == 0x000010, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure::found' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure, Name_0) == 0x000018, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure, score) == 0x000028, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure::score' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure, defaultClock) == 0x000030, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure::defaultClock' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure, cores) == 0x000040, "Member 'HardwareMonAndCompareBPLibrary_getCPUInfoFromListPure::cores' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getCPUList
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getCPUList final
{
public:
	TArray<struct FCPUListStruct>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getCPUList) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getCPUList");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getCPUList) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_getCPUList");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUList, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getCPUList::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getCPUListPure
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getCPUListPure final
{
public:
	TArray<struct FCPUListStruct>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getCPUListPure) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getCPUListPure");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getCPUListPure) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_getCPUListPure");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUListPure, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getCPUListPure::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getCPUUsage
// 0x0050 (0x0050 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getCPUUsage final
{
public:
	TMap<int32, int32>                            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getCPUUsage) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getCPUUsage");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getCPUUsage) == 0x000050, "Wrong size on HardwareMonAndCompareBPLibrary_getCPUUsage");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getCPUUsage, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getCPUUsage::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getDriveInfo
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getDriveInfo final
{
public:
	TArray<struct FSDriveInfo>                    driveInfo;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getDriveInfo) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getDriveInfo");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getDriveInfo) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_getDriveInfo");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getDriveInfo, driveInfo) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getDriveInfo::driveInfo' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getDriveInfoPure
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getDriveInfoPure final
{
public:
	TArray<struct FSDriveInfo>                    driveInfo;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getDriveInfoPure) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getDriveInfoPure");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getDriveInfoPure) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_getDriveInfoPure");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getDriveInfoPure, driveInfo) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getDriveInfoPure::driveInfo' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getFullHardwareInfo
// 0x0050 (0x0050 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getFullHardwareInfo final
{
public:
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getFullHardwareInfo) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getFullHardwareInfo");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getFullHardwareInfo) == 0x000050, "Wrong size on HardwareMonAndCompareBPLibrary_getFullHardwareInfo");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getFullHardwareInfo, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getFullHardwareInfo::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getGPUInfoFromList
// 0x0030 (0x0030 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getGPUInfoFromList final
{
public:
	class FString                                 gpuName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         score;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getGPUInfoFromList) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getGPUInfoFromList");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getGPUInfoFromList) == 0x000030, "Wrong size on HardwareMonAndCompareBPLibrary_getGPUInfoFromList");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromList, gpuName) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromList::gpuName' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromList, found) == 0x000010, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromList::found' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromList, Name_0) == 0x000018, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromList::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromList, score) == 0x000028, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromList::score' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getGPUInfoFromListPure
// 0x0030 (0x0030 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure final
{
public:
	class FString                                 gpuName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         score;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure) == 0x000030, "Wrong size on HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure, gpuName) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure::gpuName' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure, found) == 0x000010, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure::found' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure, Name_0) == 0x000018, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure::Name_0' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure, score) == 0x000028, "Member 'HardwareMonAndCompareBPLibrary_getGPUInfoFromListPure::score' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getGPUList
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getGPUList final
{
public:
	TArray<struct FGPUListStruct>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getGPUList) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getGPUList");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getGPUList) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_getGPUList");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUList, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getGPUList::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getGPUListPure
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getGPUListPure final
{
public:
	TArray<struct FGPUListStruct>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getGPUListPure) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getGPUListPure");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getGPUListPure) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_getGPUListPure");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUListPure, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getGPUListPure::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getGPUUsage
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getGPUUsage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getGPUUsage) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getGPUUsage");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getGPUUsage) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getGPUUsage");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getGPUUsage, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getGPUUsage::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getHardwareInfo
// 0x0018 (0x0018 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getHardwareInfo final
{
public:
	EHardwareInfo                                 part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getHardwareInfo) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getHardwareInfo");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getHardwareInfo) == 0x000018, "Wrong size on HardwareMonAndCompareBPLibrary_getHardwareInfo");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getHardwareInfo, part) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getHardwareInfo::part' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getHardwareInfo, ReturnValue) == 0x000008, "Member 'HardwareMonAndCompareBPLibrary_getHardwareInfo::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getHardwareInfoPure
// 0x0018 (0x0018 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getHardwareInfoPure final
{
public:
	EHardwareInfo                                 part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getHardwareInfoPure) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getHardwareInfoPure");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getHardwareInfoPure) == 0x000018, "Wrong size on HardwareMonAndCompareBPLibrary_getHardwareInfoPure");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getHardwareInfoPure, part) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getHardwareInfoPure::part' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getHardwareInfoPure, ReturnValue) == 0x000008, "Member 'HardwareMonAndCompareBPLibrary_getHardwareInfoPure::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getHardwareMonAndCompareLib
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib final
{
public:
	class UHardwareMonAndCompareBPLibrary*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getHardwareMonAndCompareLib::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamFreeByte
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamFreeByte final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamFreeByte) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamFreeByte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamFreeByte) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getRamFreeByte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamFreeByte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamFreeByte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamFreeGigabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamFreeGigabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamFreeGigabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamFreeGigabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamFreeGigabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getRamFreeGigabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamFreeGigabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamFreeGigabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamFreeMegabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamFreeMegabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamFreeMegabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamFreeMegabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamFreeMegabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getRamFreeMegabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamFreeMegabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamFreeMegabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamTotalByte
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamTotalByte final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamTotalByte) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamTotalByte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamTotalByte) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getRamTotalByte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamTotalByte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamTotalByte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamTotalGigabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamTotalGigabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamTotalGigabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamTotalGigabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamTotalGigabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getRamTotalGigabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamTotalGigabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamTotalGigabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamTotalMegabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamTotalMegabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamTotalMegabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamTotalMegabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamTotalMegabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getRamTotalMegabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamTotalMegabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamTotalMegabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamUsedByte
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamUsedByte final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamUsedByte) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamUsedByte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamUsedByte) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getRamUsedByte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamUsedByte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamUsedByte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamUsedGigabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamUsedGigabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamUsedGigabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamUsedGigabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamUsedGigabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getRamUsedGigabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamUsedGigabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamUsedGigabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getRamUsedMegabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getRamUsedMegabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getRamUsedMegabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getRamUsedMegabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getRamUsedMegabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getRamUsedMegabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getRamUsedMegabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getRamUsedMegabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramFreeByte
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramFreeByte final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramFreeByte) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramFreeByte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramFreeByte) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getVramFreeByte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramFreeByte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramFreeByte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramFreeGigabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramFreeGigabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramFreeGigabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramFreeGigabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramFreeGigabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getVramFreeGigabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramFreeGigabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramFreeGigabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramFreeMegabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramFreeMegabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramFreeMegabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramFreeMegabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramFreeMegabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getVramFreeMegabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramFreeMegabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramFreeMegabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramTotalByte
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramTotalByte final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramTotalByte) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramTotalByte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramTotalByte) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getVramTotalByte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramTotalByte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramTotalByte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramTotalGigabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramTotalGigabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramTotalGigabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramTotalGigabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramTotalGigabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getVramTotalGigabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramTotalGigabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramTotalGigabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramTotalMegabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramTotalMegabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramTotalMegabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramTotalMegabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramTotalMegabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getVramTotalMegabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramTotalMegabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramTotalMegabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramUsedByte
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramUsedByte final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramUsedByte) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramUsedByte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramUsedByte) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_getVramUsedByte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramUsedByte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramUsedByte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramUsedGigabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramUsedGigabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramUsedGigabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramUsedGigabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramUsedGigabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getVramUsedGigabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramUsedGigabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramUsedGigabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.getVramUsedMegabyte
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_getVramUsedMegabyte final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_getVramUsedMegabyte) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_getVramUsedMegabyte");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_getVramUsedMegabyte) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_getVramUsedMegabyte");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_getVramUsedMegabyte, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_getVramUsedMegabyte::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.launchProcess
// 0x0050 (0x0050 - 0x0000)
struct HardwareMonAndCompareBPLibrary_launchProcess final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 internalProcessID;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 executableFile;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHardwareMonAndCompareProcessDirectoryType    directoryType;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Parameters;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          inHidden;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHardwareMonAndCompareProcessObject*    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_launchProcess) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_launchProcess");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_launchProcess) == 0x000050, "Wrong size on HardwareMonAndCompareBPLibrary_launchProcess");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, success) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::success' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, internalProcessID) == 0x000008, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::internalProcessID' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, executableFile) == 0x000018, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::executableFile' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, directoryType) == 0x000028, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::directoryType' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, Parameters) == 0x000030, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::Parameters' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, inHidden) == 0x000040, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::inHidden' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_launchProcess, ReturnValue) == 0x000048, "Member 'HardwareMonAndCompareBPLibrary_launchProcess::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.openFileDialog
// 0x0030 (0x0030 - 0x0000)
struct HardwareMonAndCompareBPLibrary_openFileDialog final
{
public:
	EHardwareMonAndCompareFilaDialogType          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHardwareMonAndCompareFilaDialogInitDirType   initialDirectoryType;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 initialDirectory;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHardwareMonAndCompareBPLibrary*        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_openFileDialog) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_openFileDialog");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_openFileDialog) == 0x000030, "Wrong size on HardwareMonAndCompareBPLibrary_openFileDialog");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_openFileDialog, Type) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_openFileDialog::Type' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_openFileDialog, initialDirectoryType) == 0x000001, "Member 'HardwareMonAndCompareBPLibrary_openFileDialog::initialDirectoryType' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_openFileDialog, initialDirectory) == 0x000008, "Member 'HardwareMonAndCompareBPLibrary_openFileDialog::initialDirectory' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_openFileDialog, Filter) == 0x000018, "Member 'HardwareMonAndCompareBPLibrary_openFileDialog::Filter' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_openFileDialog, ReturnValue) == 0x000028, "Member 'HardwareMonAndCompareBPLibrary_openFileDialog::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.startCPU_GPUUsageReader
// 0x0008 (0x0008 - 0x0000)
struct HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader final
{
public:
	class UHardwareMonAndCompareBPLibrary*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader) == 0x000008, "Wrong size on HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader, ReturnValue) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_startCPU_GPUUsageReader::ReturnValue' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.stopProcess
// 0x0018 (0x0018 - 0x0000)
struct HardwareMonAndCompareBPLibrary_stopProcess final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 internalProcessID;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_stopProcess) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_stopProcess");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_stopProcess) == 0x000018, "Wrong size on HardwareMonAndCompareBPLibrary_stopProcess");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_stopProcess, success) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_stopProcess::success' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_stopProcess, internalProcessID) == 0x000008, "Member 'HardwareMonAndCompareBPLibrary_stopProcess::internalProcessID' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.fileDialogEventDelegate
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_fileDialogEventDelegate final
{
public:
	class FString                                 absoluteDir;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_fileDialogEventDelegate) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_fileDialogEventDelegate");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_fileDialogEventDelegate) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_fileDialogEventDelegate");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_fileDialogEventDelegate, absoluteDir) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_fileDialogEventDelegate::absoluteDir' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.powershellProcessEventCPUThread
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread, Data) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_powershellProcessEventCPUThread::Data' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.powershellProcessEventFileDialogThread
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread, Data) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_powershellProcessEventFileDialogThread::Data' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.powershellProcessEventGPUThread
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread) == 0x000008, "Wrong alignment on HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread) == 0x000010, "Wrong size on HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread, Data) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_powershellProcessEventGPUThread::Data' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareBPLibrary.tickEventDelegate
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareBPLibrary_tickEventDelegate final
{
public:
	float                                         FrameTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareBPLibrary_tickEventDelegate) == 0x000004, "Wrong alignment on HardwareMonAndCompareBPLibrary_tickEventDelegate");
static_assert(sizeof(HardwareMonAndCompareBPLibrary_tickEventDelegate) == 0x000004, "Wrong size on HardwareMonAndCompareBPLibrary_tickEventDelegate");
static_assert(offsetof(HardwareMonAndCompareBPLibrary_tickEventDelegate, FrameTime) == 0x000000, "Member 'HardwareMonAndCompareBPLibrary_tickEventDelegate::FrameTime' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareGraphWidget.tickEventDelegate
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareGraphWidget_tickEventDelegate final
{
public:
	float                                         FrameTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareGraphWidget_tickEventDelegate) == 0x000004, "Wrong alignment on HardwareMonAndCompareGraphWidget_tickEventDelegate");
static_assert(sizeof(HardwareMonAndCompareGraphWidget_tickEventDelegate) == 0x000004, "Wrong size on HardwareMonAndCompareGraphWidget_tickEventDelegate");
static_assert(offsetof(HardwareMonAndCompareGraphWidget_tickEventDelegate, FrameTime) == 0x000000, "Member 'HardwareMonAndCompareGraphWidget_tickEventDelegate::FrameTime' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareProcessObject.HardwareMonitorProcessEvent
// 0x0020 (0x0020 - 0x0000)
struct HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent final
{
public:
	class FString                                 internalProcessID;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Output;                                            // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent) == 0x000008, "Wrong alignment on HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent");
static_assert(sizeof(HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent) == 0x000020, "Wrong size on HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent");
static_assert(offsetof(HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent, internalProcessID) == 0x000000, "Member 'HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent::internalProcessID' has a wrong offset!");
static_assert(offsetof(HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent, Output) == 0x000010, "Member 'HardwareMonAndCompareProcessObject_HardwareMonitorProcessEvent::Output' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareProcessObject.processOutput
// 0x0010 (0x0010 - 0x0000)
struct HardwareMonAndCompareProcessObject_processOutput final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareProcessObject_processOutput) == 0x000008, "Wrong alignment on HardwareMonAndCompareProcessObject_processOutput");
static_assert(sizeof(HardwareMonAndCompareProcessObject_processOutput) == 0x000010, "Wrong size on HardwareMonAndCompareProcessObject_processOutput");
static_assert(offsetof(HardwareMonAndCompareProcessObject_processOutput, Data) == 0x000000, "Member 'HardwareMonAndCompareProcessObject_processOutput::Data' has a wrong offset!");

// Function HardwareMonAndCompare.HardwareMonAndCompareWidget.tickEventDelegate
// 0x0004 (0x0004 - 0x0000)
struct HardwareMonAndCompareWidget_tickEventDelegate final
{
public:
	float                                         FrameTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HardwareMonAndCompareWidget_tickEventDelegate) == 0x000004, "Wrong alignment on HardwareMonAndCompareWidget_tickEventDelegate");
static_assert(sizeof(HardwareMonAndCompareWidget_tickEventDelegate) == 0x000004, "Wrong size on HardwareMonAndCompareWidget_tickEventDelegate");
static_assert(offsetof(HardwareMonAndCompareWidget_tickEventDelegate, FrameTime) == 0x000000, "Member 'HardwareMonAndCompareWidget_tickEventDelegate::FrameTime' has a wrong offset!");

}

