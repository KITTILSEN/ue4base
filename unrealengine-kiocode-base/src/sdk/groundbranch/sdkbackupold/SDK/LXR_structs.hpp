#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LXR

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum LXR.ELightState
// NumValues: 0x0005
enum class ELightState : uint8
{
	None                                     = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	Custom                                   = 3,
	ELightState_MAX                          = 4,
};

// Enum LXR.ERelevantTraceType
// NumValues: 0x0003
enum class ERelevantTraceType : uint8
{
	Sync                                     = 0,
	Multithread                              = 1,
	ERelevantTraceType_MAX                   = 2,
};

// Enum LXR.ERelevancyCheckType
// NumValues: 0x0004
enum class ERelevancyCheckType : uint32
{
	Fixed                                    = 0,
	Smart                                    = 1,
	Octree                                   = 2,
	ERelevancyCheckType_MAX                  = 3,
};

// Enum LXR.ETraceTarget
// NumValues: 0x0007
enum class ETraceTarget : uint32
{
	None                                     = 0,
	ActorLocation                            = 1,
	Sockets                                  = 2,
	VectorArray                              = 3,
	ActorBounds                              = 4,
	LightSense                               = 5,
	ETraceTarget_MAX                         = 6,
};

// Enum LXR.ELightArrayType
// NumValues: 0x0007
enum class ELightArrayType : uint8
{
	All                                      = 0,
	SmartFar                                 = 1,
	SmartMid                                 = 2,
	SmartNear                                = 3,
	Octree                                   = 4,
	Relevant                                 = 5,
	ELightArrayType_MAX                      = 6,
};

// Enum LXR.EDominantColor
// NumValues: 0x0005
enum class EDominantColor : uint8
{
	None                                     = 0,
	Red                                      = 1,
	Green                                    = 2,
	Blue                                     = 3,
	EDominantColor_MAX                       = 4,
};

// Enum LXR.ESenseTraceTransform
// NumValues: 0x0005
enum class ESenseTraceTransform : uint32
{
	None                                     = 0,
	Actor                                    = 1,
	ActorEyesViewPoint                       = 2,
	Custom                                   = 3,
	ESenseTraceTransform_MAX                 = 4,
};

// Enum LXR.EMemoryDetectionCheckType
// NumValues: 0x0004
enum class EMemoryDetectionCheckType : uint32
{
	None                                     = 0,
	RelevantAndVisibility                    = 1,
	Visibility                               = 2,
	EMemoryDetectionCheckType_MAX            = 3,
};

// Enum LXR.EMemoryCheckClass
// NumValues: 0x0004
enum class EMemoryCheckClass : uint32
{
	None                                     = 0,
	Detection                                = 1,
	Sense                                    = 2,
	EMemoryCheckClass_MAX                    = 3,
};

// Enum LXR.EMethodToUse
// NumValues: 0x0005
enum class EMethodToUse : uint32
{
	None                                     = 0,
	Class                                    = 1,
	Interface                                = 2,
	UObject                                  = 3,
	EMethodToUse_MAX                         = 4,
};

// ScriptStruct LXR.DominantColor
// 0x0008 (0x0008 - 0x0000)
struct FDominantColor final
{
public:
	EDominantColor                                Color;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ColorValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDominantColor) == 0x000004, "Wrong alignment on FDominantColor");
static_assert(sizeof(FDominantColor) == 0x000008, "Wrong size on FDominantColor");
static_assert(offsetof(FDominantColor, Color) == 0x000000, "Member 'FDominantColor::Color' has a wrong offset!");
static_assert(offsetof(FDominantColor, ColorValue) == 0x000004, "Member 'FDominantColor::ColorValue' has a wrong offset!");

// ScriptStruct LXR.LightSourcePassedData
// 0x0018 (0x0018 - 0x0000)
struct FLightSourcePassedData final
{
public:
	TWeakObjectPtr<class AActor>                  LightSourceActor;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PassedComponents;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightSourcePassedData) == 0x000008, "Wrong alignment on FLightSourcePassedData");
static_assert(sizeof(FLightSourcePassedData) == 0x000018, "Wrong size on FLightSourcePassedData");
static_assert(offsetof(FLightSourcePassedData, LightSourceActor) == 0x000000, "Member 'FLightSourcePassedData::LightSourceActor' has a wrong offset!");
static_assert(offsetof(FLightSourcePassedData, PassedComponents) == 0x000008, "Member 'FLightSourcePassedData::PassedComponents' has a wrong offset!");

// ScriptStruct LXR.LightSourceData
// 0x0030 (0x0030 - 0x0000)
struct FLightSourceData final
{
public:
	struct FComponentReference                    LightComponent;                                    // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	float                                         LightData;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLightSourceData) == 0x000008, "Wrong alignment on FLightSourceData");
static_assert(sizeof(FLightSourceData) == 0x000030, "Wrong size on FLightSourceData");
static_assert(offsetof(FLightSourceData, LightComponent) == 0x000000, "Member 'FLightSourceData::LightComponent' has a wrong offset!");
static_assert(offsetof(FLightSourceData, LightData) == 0x000028, "Member 'FLightSourceData::LightData' has a wrong offset!");

}

