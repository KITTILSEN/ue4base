#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Chemlight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Chemlight.BP_Chemlight_C
// 0x0048 (0x04A8 - 0x0460)
class ABP_Chemlight_C final : public AGBGrenade
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Chemlight;                                      // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnited;                                          // 0x0478(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ChemlightColour;                                   // 0x047C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChemlightGlowIntensity;                            // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             ChemlightColours;                                  // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ChemLightColourRow;                                // 0x0498(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ChemLightMID;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Chemlight(int32 EntryPoint);
	void OnClientsideProxyCreatedEvent(class AGBInvItem* Proxy);
	void CreateMIDsEvent();
	void OnBeingUnequipped();
	void OnRemovedFromInventoryEvent(class AGBCharacter* Character);
	void OnAddedToInventoryEvent(class AGBCharacter* Character);
	void OnPlayerTeamChanged_Event_0(class AGBPlayerState* PlayerState);
	void Update();
	void Multicast_Ignite();
	void OnBeingEquipped();
	void UpdateTeamChemlightColourRow(class AGBPlayerState* InGBPlayerState);
	void OnRep_bIgnited();
	void OnRep_ChemLightColourRow();
	struct FGBUnequipInfo GetUnequipInfo(EHand TargetHand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Chemlight_C">();
	}
	static class ABP_Chemlight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Chemlight_C>();
	}
};
static_assert(alignof(ABP_Chemlight_C) == 0x000008, "Wrong alignment on ABP_Chemlight_C");
static_assert(sizeof(ABP_Chemlight_C) == 0x0004A8, "Wrong size on ABP_Chemlight_C");
static_assert(offsetof(ABP_Chemlight_C, UberGraphFrame) == 0x000460, "Member 'ABP_Chemlight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, PointLight) == 0x000468, "Member 'ABP_Chemlight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, SK_Chemlight) == 0x000470, "Member 'ABP_Chemlight_C::SK_Chemlight' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, bIgnited) == 0x000478, "Member 'ABP_Chemlight_C::bIgnited' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, ChemlightColour) == 0x00047C, "Member 'ABP_Chemlight_C::ChemlightColour' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, ChemlightGlowIntensity) == 0x00048C, "Member 'ABP_Chemlight_C::ChemlightGlowIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, ChemlightColours) == 0x000490, "Member 'ABP_Chemlight_C::ChemlightColours' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, ChemLightColourRow) == 0x000498, "Member 'ABP_Chemlight_C::ChemLightColourRow' has a wrong offset!");
static_assert(offsetof(ABP_Chemlight_C, ChemLightMID) == 0x0004A0, "Member 'ABP_Chemlight_C::ChemLightMID' has a wrong offset!");

}

