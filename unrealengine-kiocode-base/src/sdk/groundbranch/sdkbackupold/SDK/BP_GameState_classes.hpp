#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState.BP_GameState_C
// 0x0120 (0x0908 - 0x07E8)
class ABP_GameState_C final : public AGBGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanStartVote;                                     // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReadyCountdownMessage;                             // 0x0800(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PreRoundWaitMessage;                               // 0x0818(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   InProgressMessage;                                 // 0x0830(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   MatchEndedRoundStageMessage;                       // 0x0848(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PostRoundWaitMessage;                              // 0x0860(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandle_InactiveCheck;                         // 0x0878(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   ScheduledShutdownMessage;                          // 0x0880(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TimeLimitReachedMessage;                           // 0x0898(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 StatusValue;                                       // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUseRounds;                                        // 0x08C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C1[0x7];                                      // 0x08C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimeRemainingMessage;                              // 0x08C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 TimeReminders;                                     // 0x08E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         MOTDSymbolsToClear;                                // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_MissionSummary_C*                  MissionSummaryRef;                                 // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameState(int32 EntryPoint);
	void OnClose_Event_0();
	void LocalOnRoundStageSet();
	void ServerOnRoundStageSet();
	void OnGameMessageEvent(class FName GameMessageId, class FName Type, float Duration, const struct FUInt64& ModID);
	void StopInactiveCheck();
	void StartInactiveCheck();
	void InactiveCheck();
	void OnPlayerControllerStateChanged_Event_0(class FName OldState, class FName NewState);
	void BindToPlayerControllerState();
	void ReceiveBeginPlay();
	void MaybeShowMissionSummary();
	void AddDeathOverlay();
	void RoundStageSet();
	void AllowVotingAgain();
	void OnVoteEndedEvent(bool bPassed, int32 NextVoteDelay);
	void OnVoteCountUpdatedEvent(int32 YesVotes, int32 NoVotes);
	void OnVoteStartedEvent(class APlayerState* VoteStarter, const class FString& Command, const class FString& Params_0, int32 VoteTime);
	void GetSpectatorOptions(TArray<TSoftClassPtr<class UClass>>* OutOptionClasses);
	void GetRoundStageText(class FText* OutText);
	void GetTimeToNextTimeReminder(float CurrentRoundTime, float* TimeToNextTimeReminder);
	void ShowMOTD();
	void RefreshPlayerStats();
	void InternalOnGameMessage(class FName InGameMessageId, class FName InType, float InDuration, const struct FUInt64& InModId);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_C">();
	}
	static class ABP_GameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_C>();
	}
};
static_assert(alignof(ABP_GameState_C) == 0x000008, "Wrong alignment on ABP_GameState_C");
static_assert(sizeof(ABP_GameState_C) == 0x000908, "Wrong size on ABP_GameState_C");
static_assert(offsetof(ABP_GameState_C, UberGraphFrame) == 0x0007E8, "Member 'ABP_GameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, DefaultSceneRoot) == 0x0007F0, "Member 'ABP_GameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, bCanStartVote) == 0x0007F8, "Member 'ABP_GameState_C::bCanStartVote' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, ReadyCountdownMessage) == 0x000800, "Member 'ABP_GameState_C::ReadyCountdownMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, PreRoundWaitMessage) == 0x000818, "Member 'ABP_GameState_C::PreRoundWaitMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, InProgressMessage) == 0x000830, "Member 'ABP_GameState_C::InProgressMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, MatchEndedRoundStageMessage) == 0x000848, "Member 'ABP_GameState_C::MatchEndedRoundStageMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, PostRoundWaitMessage) == 0x000860, "Member 'ABP_GameState_C::PostRoundWaitMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, TimerHandle_InactiveCheck) == 0x000878, "Member 'ABP_GameState_C::TimerHandle_InactiveCheck' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, ScheduledShutdownMessage) == 0x000880, "Member 'ABP_GameState_C::ScheduledShutdownMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, TimeLimitReachedMessage) == 0x000898, "Member 'ABP_GameState_C::TimeLimitReachedMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, StatusValue) == 0x0008B0, "Member 'ABP_GameState_C::StatusValue' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, bUseRounds) == 0x0008C0, "Member 'ABP_GameState_C::bUseRounds' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, TimeRemainingMessage) == 0x0008C8, "Member 'ABP_GameState_C::TimeRemainingMessage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, TimeReminders) == 0x0008E0, "Member 'ABP_GameState_C::TimeReminders' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, MOTDSymbolsToClear) == 0x0008F0, "Member 'ABP_GameState_C::MOTDSymbolsToClear' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, MissionSummaryRef) == 0x000900, "Member 'ABP_GameState_C::MissionSummaryRef' has a wrong offset!");

}

