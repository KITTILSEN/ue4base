#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBTeamPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// Class RBTeamPlugin.RBTeamComponent
// 0x0020 (0x00D0 - 0x00B0)
class URBTeamComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         TeamId;                                            // 0x00B8(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(uint8 OldTeamId, uint8 NewTeamId)> OnTeamIdChanged;                // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnRep_TeamId(uint8 OldTeamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBTeamComponent">();
	}
	static class URBTeamComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBTeamComponent>();
	}
};
static_assert(alignof(URBTeamComponent) == 0x000008, "Wrong alignment on URBTeamComponent");
static_assert(sizeof(URBTeamComponent) == 0x0000D0, "Wrong size on URBTeamComponent");
static_assert(offsetof(URBTeamComponent, TeamId) == 0x0000B8, "Member 'URBTeamComponent::TeamId' has a wrong offset!");
static_assert(offsetof(URBTeamComponent, OnTeamIdChanged) == 0x0000C0, "Member 'URBTeamComponent::OnTeamIdChanged' has a wrong offset!");

// Class RBTeamPlugin.RBTeamFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class URBTeamFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static ETeamAttitude GetTeamAttitude(const class AActor* ActorA, const class AActor* ActorB);
	static uint8 GetTeamId(const class AActor* Actor);
	static bool OnSameTeam(const class AActor* ActorA, const class AActor* ActorB);
	static void SetTeamId(class AActor* Actor, uint8 NewTeamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RBTeamFunctionLibrary">();
	}
	static class URBTeamFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBTeamFunctionLibrary>();
	}
};
static_assert(alignof(URBTeamFunctionLibrary) == 0x000008, "Wrong alignment on URBTeamFunctionLibrary");
static_assert(sizeof(URBTeamFunctionLibrary) == 0x000028, "Wrong size on URBTeamFunctionLibrary");

}

