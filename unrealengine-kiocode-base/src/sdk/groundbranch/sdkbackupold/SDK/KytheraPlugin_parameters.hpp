#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KytheraPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "KytheraPlugin_structs.hpp"


namespace SDK::Params
{

// Function KytheraPlugin.KytCSNComponent.SetPedestrianSpawnDensityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct KytCSNComponent_SetPedestrianSpawnDensityMultiplier final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCSNComponent_SetPedestrianSpawnDensityMultiplier) == 0x000004, "Wrong alignment on KytCSNComponent_SetPedestrianSpawnDensityMultiplier");
static_assert(sizeof(KytCSNComponent_SetPedestrianSpawnDensityMultiplier) == 0x000004, "Wrong size on KytCSNComponent_SetPedestrianSpawnDensityMultiplier");
static_assert(offsetof(KytCSNComponent_SetPedestrianSpawnDensityMultiplier, Multiplier) == 0x000000, "Member 'KytCSNComponent_SetPedestrianSpawnDensityMultiplier::Multiplier' has a wrong offset!");

// Function KytheraPlugin.KytCSNComponent.SetVehicleSpawnDensityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct KytCSNComponent_SetVehicleSpawnDensityMultiplier final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCSNComponent_SetVehicleSpawnDensityMultiplier) == 0x000004, "Wrong alignment on KytCSNComponent_SetVehicleSpawnDensityMultiplier");
static_assert(sizeof(KytCSNComponent_SetVehicleSpawnDensityMultiplier) == 0x000004, "Wrong size on KytCSNComponent_SetVehicleSpawnDensityMultiplier");
static_assert(offsetof(KytCSNComponent_SetVehicleSpawnDensityMultiplier, Multiplier) == 0x000000, "Member 'KytCSNComponent_SetVehicleSpawnDensityMultiplier::Multiplier' has a wrong offset!");

// Function KytheraPlugin.KytBTFunctionLibrary.GetBlackboardValueAsKytBlackBoard
// 0x0038 (0x0038 - 0x0000)
struct KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard) == 0x000008, "Wrong alignment on KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard");
static_assert(sizeof(KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard) == 0x000038, "Wrong size on KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard");
static_assert(offsetof(KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard, NodeOwner) == 0x000000, "Member 'KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard::NodeOwner' has a wrong offset!");
static_assert(offsetof(KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard, Key) == 0x000008, "Member 'KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard::Key' has a wrong offset!");
static_assert(offsetof(KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard, ReturnValue) == 0x000030, "Member 'KytBTFunctionLibrary_GetBlackboardValueAsKytBlackBoard::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytNavOctree.IgnoreMeshForNavigation
// 0x0010 (0x0010 - 0x0000)
struct KytNavOctree_IgnoreMeshForNavigation final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytNavOctree_IgnoreMeshForNavigation) == 0x000008, "Wrong alignment on KytNavOctree_IgnoreMeshForNavigation");
static_assert(sizeof(KytNavOctree_IgnoreMeshForNavigation) == 0x000010, "Wrong size on KytNavOctree_IgnoreMeshForNavigation");
static_assert(offsetof(KytNavOctree_IgnoreMeshForNavigation, Mesh) == 0x000000, "Member 'KytNavOctree_IgnoreMeshForNavigation::Mesh' has a wrong offset!");
static_assert(offsetof(KytNavOctree_IgnoreMeshForNavigation, Ignore) == 0x000008, "Member 'KytNavOctree_IgnoreMeshForNavigation::Ignore' has a wrong offset!");

// Function KytheraPlugin.KytNavOctree.QueryNavigablePointInSphere
// 0x0024 (0x0024 - 0x0000)
struct KytNavOctree_QueryNavigablePointInSphere final
{
public:
	struct FVector                                Result;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavigationRadius;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenAreasOnly;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytNavOctree_QueryNavigablePointInSphere) == 0x000004, "Wrong alignment on KytNavOctree_QueryNavigablePointInSphere");
static_assert(sizeof(KytNavOctree_QueryNavigablePointInSphere) == 0x000024, "Wrong size on KytNavOctree_QueryNavigablePointInSphere");
static_assert(offsetof(KytNavOctree_QueryNavigablePointInSphere, Result) == 0x000000, "Member 'KytNavOctree_QueryNavigablePointInSphere::Result' has a wrong offset!");
static_assert(offsetof(KytNavOctree_QueryNavigablePointInSphere, Center) == 0x00000C, "Member 'KytNavOctree_QueryNavigablePointInSphere::Center' has a wrong offset!");
static_assert(offsetof(KytNavOctree_QueryNavigablePointInSphere, Radius) == 0x000018, "Member 'KytNavOctree_QueryNavigablePointInSphere::Radius' has a wrong offset!");
static_assert(offsetof(KytNavOctree_QueryNavigablePointInSphere, NavigationRadius) == 0x00001C, "Member 'KytNavOctree_QueryNavigablePointInSphere::NavigationRadius' has a wrong offset!");
static_assert(offsetof(KytNavOctree_QueryNavigablePointInSphere, OpenAreasOnly) == 0x000020, "Member 'KytNavOctree_QueryNavigablePointInSphere::OpenAreasOnly' has a wrong offset!");
static_assert(offsetof(KytNavOctree_QueryNavigablePointInSphere, ReturnValue) == 0x000021, "Member 'KytNavOctree_QueryNavigablePointInSphere::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytNavOctree.RegenerateVolume
// 0x0018 (0x0018 - 0x0000)
struct KytNavOctree_RegenerateVolume final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                halfExtent;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytNavOctree_RegenerateVolume) == 0x000004, "Wrong alignment on KytNavOctree_RegenerateVolume");
static_assert(sizeof(KytNavOctree_RegenerateVolume) == 0x000018, "Wrong size on KytNavOctree_RegenerateVolume");
static_assert(offsetof(KytNavOctree_RegenerateVolume, Center) == 0x000000, "Member 'KytNavOctree_RegenerateVolume::Center' has a wrong offset!");
static_assert(offsetof(KytNavOctree_RegenerateVolume, halfExtent) == 0x00000C, "Member 'KytNavOctree_RegenerateVolume::halfExtent' has a wrong offset!");

// Function KytheraPlugin.KytAnimationSupport.IsAnimationSupported
// 0x0020 (0x0020 - 0x0000)
struct KytAnimationSupport_IsAnimationSupported final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UKytBlackboard*                   AnimationParameters;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytAnimationSupport_IsAnimationSupported) == 0x000008, "Wrong alignment on KytAnimationSupport_IsAnimationSupported");
static_assert(sizeof(KytAnimationSupport_IsAnimationSupported) == 0x000020, "Wrong size on KytAnimationSupport_IsAnimationSupported");
static_assert(offsetof(KytAnimationSupport_IsAnimationSupported, AnimationName) == 0x000000, "Member 'KytAnimationSupport_IsAnimationSupported::AnimationName' has a wrong offset!");
static_assert(offsetof(KytAnimationSupport_IsAnimationSupported, AnimationParameters) == 0x000010, "Member 'KytAnimationSupport_IsAnimationSupported::AnimationParameters' has a wrong offset!");
static_assert(offsetof(KytAnimationSupport_IsAnimationSupported, ReturnValue) == 0x000018, "Member 'KytAnimationSupport_IsAnimationSupported::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBTDecorator.ChildNodeEnter
// 0x0001 (0x0001 - 0x0000)
struct KytBTDecorator_ChildNodeEnter final
{
public:
	EKytBTEnterResult                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBTDecorator_ChildNodeEnter) == 0x000001, "Wrong alignment on KytBTDecorator_ChildNodeEnter");
static_assert(sizeof(KytBTDecorator_ChildNodeEnter) == 0x000001, "Wrong size on KytBTDecorator_ChildNodeEnter");
static_assert(offsetof(KytBTDecorator_ChildNodeEnter, ReturnValue) == 0x000000, "Member 'KytBTDecorator_ChildNodeEnter::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBTDecorator.ChildNodeUpdate
// 0x0001 (0x0001 - 0x0000)
struct KytBTDecorator_ChildNodeUpdate final
{
public:
	EKytBTUpdateResult                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBTDecorator_ChildNodeUpdate) == 0x000001, "Wrong alignment on KytBTDecorator_ChildNodeUpdate");
static_assert(sizeof(KytBTDecorator_ChildNodeUpdate) == 0x000001, "Wrong size on KytBTDecorator_ChildNodeUpdate");
static_assert(offsetof(KytBTDecorator_ChildNodeUpdate, ReturnValue) == 0x000000, "Member 'KytBTDecorator_ChildNodeUpdate::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBTDecorator.DoCleanup
// 0x0010 (0x0010 - 0x0000)
struct KytBTDecorator_DoCleanup final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBTDecorator_DoCleanup) == 0x000008, "Wrong alignment on KytBTDecorator_DoCleanup");
static_assert(sizeof(KytBTDecorator_DoCleanup) == 0x000010, "Wrong size on KytBTDecorator_DoCleanup");
static_assert(offsetof(KytBTDecorator_DoCleanup, Controller) == 0x000000, "Member 'KytBTDecorator_DoCleanup::Controller' has a wrong offset!");
static_assert(offsetof(KytBTDecorator_DoCleanup, BehaviorBlackboard) == 0x000008, "Member 'KytBTDecorator_DoCleanup::BehaviorBlackboard' has a wrong offset!");

// Function KytheraPlugin.KytBTDecorator.DoEnter
// 0x0018 (0x0018 - 0x0000)
struct KytBTDecorator_DoEnter final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBTEnterResult                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBTDecorator_DoEnter) == 0x000008, "Wrong alignment on KytBTDecorator_DoEnter");
static_assert(sizeof(KytBTDecorator_DoEnter) == 0x000018, "Wrong size on KytBTDecorator_DoEnter");
static_assert(offsetof(KytBTDecorator_DoEnter, Controller) == 0x000000, "Member 'KytBTDecorator_DoEnter::Controller' has a wrong offset!");
static_assert(offsetof(KytBTDecorator_DoEnter, BehaviorBlackboard) == 0x000008, "Member 'KytBTDecorator_DoEnter::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(KytBTDecorator_DoEnter, ReturnValue) == 0x000010, "Member 'KytBTDecorator_DoEnter::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBTDecorator.DoUpdate
// 0x0018 (0x0018 - 0x0000)
struct KytBTDecorator_DoUpdate final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBTUpdateResult                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBTDecorator_DoUpdate) == 0x000008, "Wrong alignment on KytBTDecorator_DoUpdate");
static_assert(sizeof(KytBTDecorator_DoUpdate) == 0x000018, "Wrong size on KytBTDecorator_DoUpdate");
static_assert(offsetof(KytBTDecorator_DoUpdate, Controller) == 0x000000, "Member 'KytBTDecorator_DoUpdate::Controller' has a wrong offset!");
static_assert(offsetof(KytBTDecorator_DoUpdate, BehaviorBlackboard) == 0x000008, "Member 'KytBTDecorator_DoUpdate::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(KytBTDecorator_DoUpdate, ReturnValue) == 0x000010, "Member 'KytBTDecorator_DoUpdate::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytNavSplineActor.SplinePointPassed
// 0x0020 (0x0020 - 0x0000)
struct KytNavSplineActor_SplinePointPassed final
{
public:
	class APawn*                                  Ship;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytNavSplineActor_SplinePointPassed) == 0x000008, "Wrong alignment on KytNavSplineActor_SplinePointPassed");
static_assert(sizeof(KytNavSplineActor_SplinePointPassed) == 0x000020, "Wrong size on KytNavSplineActor_SplinePointPassed");
static_assert(offsetof(KytNavSplineActor_SplinePointPassed, Ship) == 0x000000, "Member 'KytNavSplineActor_SplinePointPassed::Ship' has a wrong offset!");
static_assert(offsetof(KytNavSplineActor_SplinePointPassed, PointIndex) == 0x000008, "Member 'KytNavSplineActor_SplinePointPassed::PointIndex' has a wrong offset!");
static_assert(offsetof(KytNavSplineActor_SplinePointPassed, PointName) == 0x000010, "Member 'KytNavSplineActor_SplinePointPassed::PointName' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.CreateKytBlackboard
// 0x0008 (0x0008 - 0x0000)
struct KytBlackboard_CreateKytBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_CreateKytBlackboard) == 0x000008, "Wrong alignment on KytBlackboard_CreateKytBlackboard");
static_assert(sizeof(KytBlackboard_CreateKytBlackboard) == 0x000008, "Wrong size on KytBlackboard_CreateKytBlackboard");
static_assert(offsetof(KytBlackboard_CreateKytBlackboard, ReturnValue) == 0x000000, "Member 'KytBlackboard_CreateKytBlackboard::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.ClearBlackboardValue
// 0x0010 (0x0010 - 0x0000)
struct KytBlackboard_ClearBlackboardValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_ClearBlackboardValue) == 0x000008, "Wrong alignment on KytBlackboard_ClearBlackboardValue");
static_assert(sizeof(KytBlackboard_ClearBlackboardValue) == 0x000010, "Wrong size on KytBlackboard_ClearBlackboardValue");
static_assert(offsetof(KytBlackboard_ClearBlackboardValue, Key) == 0x000000, "Member 'KytBlackboard_ClearBlackboardValue::Key' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsActor
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsActor final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsActor) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsActor");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsActor) == 0x000018, "Wrong size on KytBlackboard_GetBlackboardValueAsActor");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsActor, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsActor::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsActor, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsActor::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsBlackboard
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsBlackboard final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsBlackboard) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsBlackboard");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsBlackboard) == 0x000018, "Wrong size on KytBlackboard_GetBlackboardValueAsBlackboard");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsBlackboard, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsBlackboard::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsBlackboard, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsBlackboard::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsBool
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsBool final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsBool) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsBool");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsBool) == 0x000018, "Wrong size on KytBlackboard_GetBlackboardValueAsBool");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsBool, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsBool::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsBool, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsBool::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsFloat final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsFloat) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsFloat");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsFloat) == 0x000018, "Wrong size on KytBlackboard_GetBlackboardValueAsFloat");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsFloat, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsFloat, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsFloat::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsInt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsInt) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsInt");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsInt) == 0x000018, "Wrong size on KytBlackboard_GetBlackboardValueAsInt");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsInt, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsInt, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsInt::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsString
// 0x0020 (0x0020 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsString) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsString");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsString) == 0x000020, "Wrong size on KytBlackboard_GetBlackboardValueAsString");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsString, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsString::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsString, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsString::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetBlackboardValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct KytBlackboard_GetBlackboardValueAsVector final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_GetBlackboardValueAsVector) == 0x000008, "Wrong alignment on KytBlackboard_GetBlackboardValueAsVector");
static_assert(sizeof(KytBlackboard_GetBlackboardValueAsVector) == 0x000020, "Wrong size on KytBlackboard_GetBlackboardValueAsVector");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsVector, Key) == 0x000000, "Member 'KytBlackboard_GetBlackboardValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetBlackboardValueAsVector, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetBlackboardValueAsVector::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.GetOrCreateBlackboardValueAsBlackboard
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_GetOrCreateBlackboardValueAsBlackboard final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_GetOrCreateBlackboardValueAsBlackboard) == 0x000008, "Wrong alignment on KytBlackboard_GetOrCreateBlackboardValueAsBlackboard");
static_assert(sizeof(KytBlackboard_GetOrCreateBlackboardValueAsBlackboard) == 0x000018, "Wrong size on KytBlackboard_GetOrCreateBlackboardValueAsBlackboard");
static_assert(offsetof(KytBlackboard_GetOrCreateBlackboardValueAsBlackboard, Key) == 0x000000, "Member 'KytBlackboard_GetOrCreateBlackboardValueAsBlackboard::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_GetOrCreateBlackboardValueAsBlackboard, ReturnValue) == 0x000010, "Member 'KytBlackboard_GetOrCreateBlackboardValueAsBlackboard::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.HasValue
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_HasValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_HasValue) == 0x000008, "Wrong alignment on KytBlackboard_HasValue");
static_assert(sizeof(KytBlackboard_HasValue) == 0x000018, "Wrong size on KytBlackboard_HasValue");
static_assert(offsetof(KytBlackboard_HasValue, Key) == 0x000000, "Member 'KytBlackboard_HasValue::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_HasValue, ReturnValue) == 0x000010, "Member 'KytBlackboard_HasValue::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsBlackboard
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsBlackboard final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsBlackboard) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsBlackboard");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsBlackboard) == 0x000018, "Wrong size on KytBlackboard_SetBlackboardValueAsBlackboard");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsBlackboard, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsBlackboard::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsBlackboard, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsBlackboard::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsBool
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsBool final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsBool) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsBool");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsBool) == 0x000018, "Wrong size on KytBlackboard_SetBlackboardValueAsBool");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsBool, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsBool::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsBool, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsBool::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsEntityId
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsEntityId final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsEntityId) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsEntityId");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsEntityId) == 0x000018, "Wrong size on KytBlackboard_SetBlackboardValueAsEntityId");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsEntityId, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsEntityId::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsEntityId, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsEntityId::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsFloat final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsFloat) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsFloat");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsFloat) == 0x000018, "Wrong size on KytBlackboard_SetBlackboardValueAsFloat");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsFloat, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsFloat, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsFloat::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsInt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsInt) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsInt");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsInt) == 0x000018, "Wrong size on KytBlackboard_SetBlackboardValueAsInt");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsInt, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsInt, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsInt::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsPosition
// 0x0020 (0x0020 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsPosition final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsPosition) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsPosition");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsPosition) == 0x000020, "Wrong size on KytBlackboard_SetBlackboardValueAsPosition");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsPosition, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsPosition::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsPosition, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsPosition::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsString
// 0x0020 (0x0020 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsString) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsString");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsString) == 0x000020, "Wrong size on KytBlackboard_SetBlackboardValueAsString");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsString, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsString::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsString, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsString::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsStringHash
// 0x0020 (0x0020 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsStringHash final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsStringHash) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsStringHash");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsStringHash) == 0x000020, "Wrong size on KytBlackboard_SetBlackboardValueAsStringHash");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsStringHash, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsStringHash::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsStringHash, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsStringHash::Value' has a wrong offset!");

// Function KytheraPlugin.KytBlackboard.SetBlackboardValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct KytBlackboard_SetBlackboardValueAsVector final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBlackboard_SetBlackboardValueAsVector) == 0x000008, "Wrong alignment on KytBlackboard_SetBlackboardValueAsVector");
static_assert(sizeof(KytBlackboard_SetBlackboardValueAsVector) == 0x000020, "Wrong size on KytBlackboard_SetBlackboardValueAsVector");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsVector, Key) == 0x000000, "Member 'KytBlackboard_SetBlackboardValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(KytBlackboard_SetBlackboardValueAsVector, Value) == 0x000010, "Member 'KytBlackboard_SetBlackboardValueAsVector::Value' has a wrong offset!");

// Function KytheraPlugin.KytController.GetKytController
// 0x0010 (0x0010 - 0x0000)
struct KytController_GetKytController final
{
public:
	class AActor*                                 ControlledActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKytController*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_GetKytController) == 0x000008, "Wrong alignment on KytController_GetKytController");
static_assert(sizeof(KytController_GetKytController) == 0x000010, "Wrong size on KytController_GetKytController");
static_assert(offsetof(KytController_GetKytController, ControlledActor) == 0x000000, "Member 'KytController_GetKytController::ControlledActor' has a wrong offset!");
static_assert(offsetof(KytController_GetKytController, ReturnValue) == 0x000008, "Member 'KytController_GetKytController::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytController.AddTag
// 0x0010 (0x0010 - 0x0000)
struct KytController_AddTag final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_AddTag) == 0x000008, "Wrong alignment on KytController_AddTag");
static_assert(sizeof(KytController_AddTag) == 0x000010, "Wrong size on KytController_AddTag");
static_assert(offsetof(KytController_AddTag, Tag) == 0x000000, "Member 'KytController_AddTag::Tag' has a wrong offset!");

// Function KytheraPlugin.KytController.EraseTag
// 0x0010 (0x0010 - 0x0000)
struct KytController_EraseTag final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_EraseTag) == 0x000008, "Wrong alignment on KytController_EraseTag");
static_assert(sizeof(KytController_EraseTag) == 0x000010, "Wrong size on KytController_EraseTag");
static_assert(offsetof(KytController_EraseTag, Tag) == 0x000000, "Member 'KytController_EraseTag::Tag' has a wrong offset!");

// Function KytheraPlugin.KytController.ForcePerceptionOfActor
// 0x0010 (0x0010 - 0x0000)
struct KytController_ForcePerceptionOfActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytController_ForcePerceptionOfActor) == 0x000008, "Wrong alignment on KytController_ForcePerceptionOfActor");
static_assert(sizeof(KytController_ForcePerceptionOfActor) == 0x000010, "Wrong size on KytController_ForcePerceptionOfActor");
static_assert(offsetof(KytController_ForcePerceptionOfActor, Actor) == 0x000000, "Member 'KytController_ForcePerceptionOfActor::Actor' has a wrong offset!");
static_assert(offsetof(KytController_ForcePerceptionOfActor, Time) == 0x000008, "Member 'KytController_ForcePerceptionOfActor::Time' has a wrong offset!");

// Function KytheraPlugin.KytController.GetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct KytController_GetCurrentTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_GetCurrentTarget) == 0x000008, "Wrong alignment on KytController_GetCurrentTarget");
static_assert(sizeof(KytController_GetCurrentTarget) == 0x000008, "Wrong size on KytController_GetCurrentTarget");
static_assert(offsetof(KytController_GetCurrentTarget, ReturnValue) == 0x000000, "Member 'KytController_GetCurrentTarget::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytController.GetEntityState
// 0x0008 (0x0008 - 0x0000)
struct KytController_GetEntityState final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_GetEntityState) == 0x000008, "Wrong alignment on KytController_GetEntityState");
static_assert(sizeof(KytController_GetEntityState) == 0x000008, "Wrong size on KytController_GetEntityState");
static_assert(offsetof(KytController_GetEntityState, ReturnValue) == 0x000000, "Member 'KytController_GetEntityState::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytController.GetGroup
// 0x0018 (0x0018 - 0x0000)
struct KytController_GetGroup final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKytGroup*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_GetGroup) == 0x000008, "Wrong alignment on KytController_GetGroup");
static_assert(sizeof(KytController_GetGroup) == 0x000018, "Wrong size on KytController_GetGroup");
static_assert(offsetof(KytController_GetGroup, Type) == 0x000000, "Member 'KytController_GetGroup::Type' has a wrong offset!");
static_assert(offsetof(KytController_GetGroup, ReturnValue) == 0x000010, "Member 'KytController_GetGroup::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytController.HasTag
// 0x0018 (0x0018 - 0x0000)
struct KytController_HasTag final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytController_HasTag) == 0x000008, "Wrong alignment on KytController_HasTag");
static_assert(sizeof(KytController_HasTag) == 0x000018, "Wrong size on KytController_HasTag");
static_assert(offsetof(KytController_HasTag, Tag) == 0x000000, "Member 'KytController_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(KytController_HasTag, ReturnValue) == 0x000010, "Member 'KytController_HasTag::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytController.NotifyPerceptionAboutActor
// 0x0008 (0x0008 - 0x0000)
struct KytController_NotifyPerceptionAboutActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_NotifyPerceptionAboutActor) == 0x000008, "Wrong alignment on KytController_NotifyPerceptionAboutActor");
static_assert(sizeof(KytController_NotifyPerceptionAboutActor) == 0x000008, "Wrong size on KytController_NotifyPerceptionAboutActor");
static_assert(offsetof(KytController_NotifyPerceptionAboutActor, Actor) == 0x000000, "Member 'KytController_NotifyPerceptionAboutActor::Actor' has a wrong offset!");

// Function KytheraPlugin.KytController.OverrideTarget
// 0x0008 (0x0008 - 0x0000)
struct KytController_OverrideTarget final
{
public:
	class AActor*                                 Override;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_OverrideTarget) == 0x000008, "Wrong alignment on KytController_OverrideTarget");
static_assert(sizeof(KytController_OverrideTarget) == 0x000008, "Wrong size on KytController_OverrideTarget");
static_assert(offsetof(KytController_OverrideTarget, Override) == 0x000000, "Member 'KytController_OverrideTarget::Override' has a wrong offset!");

// Function KytheraPlugin.KytController.ReplaceTag
// 0x0020 (0x0020 - 0x0000)
struct KytController_ReplaceTag final
{
public:
	class FString                                 oldTag;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 newTag;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_ReplaceTag) == 0x000008, "Wrong alignment on KytController_ReplaceTag");
static_assert(sizeof(KytController_ReplaceTag) == 0x000020, "Wrong size on KytController_ReplaceTag");
static_assert(offsetof(KytController_ReplaceTag, oldTag) == 0x000000, "Member 'KytController_ReplaceTag::oldTag' has a wrong offset!");
static_assert(offsetof(KytController_ReplaceTag, newTag) == 0x000010, "Member 'KytController_ReplaceTag::newTag' has a wrong offset!");

// Function KytheraPlugin.KytController.RunBehavior
// 0x0020 (0x0020 - 0x0000)
struct KytController_RunBehavior final
{
public:
	class FString                                 BehaviorName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         KytBlackboard;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytController_RunBehavior) == 0x000008, "Wrong alignment on KytController_RunBehavior");
static_assert(sizeof(KytController_RunBehavior) == 0x000020, "Wrong size on KytController_RunBehavior");
static_assert(offsetof(KytController_RunBehavior, BehaviorName) == 0x000000, "Member 'KytController_RunBehavior::BehaviorName' has a wrong offset!");
static_assert(offsetof(KytController_RunBehavior, KytBlackboard) == 0x000010, "Member 'KytController_RunBehavior::KytBlackboard' has a wrong offset!");
static_assert(offsetof(KytController_RunBehavior, ReturnValue) == 0x000018, "Member 'KytController_RunBehavior::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytController.SetPerceptionScaleModifiers
// 0x0008 (0x0008 - 0x0000)
struct KytController_SetPerceptionScaleModifiers final
{
public:
	float                                         visualModifier;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         audioModifier;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytController_SetPerceptionScaleModifiers) == 0x000004, "Wrong alignment on KytController_SetPerceptionScaleModifiers");
static_assert(sizeof(KytController_SetPerceptionScaleModifiers) == 0x000008, "Wrong size on KytController_SetPerceptionScaleModifiers");
static_assert(offsetof(KytController_SetPerceptionScaleModifiers, visualModifier) == 0x000000, "Member 'KytController_SetPerceptionScaleModifiers::visualModifier' has a wrong offset!");
static_assert(offsetof(KytController_SetPerceptionScaleModifiers, audioModifier) == 0x000004, "Member 'KytController_SetPerceptionScaleModifiers::audioModifier' has a wrong offset!");

// Function KytheraPlugin.KytShipController.LeadFormation
// 0x0008 (0x0008 - 0x0000)
struct KytShipController_LeadFormation final
{
public:
	class UKytFormation*                          FormationType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytShipController_LeadFormation) == 0x000008, "Wrong alignment on KytShipController_LeadFormation");
static_assert(sizeof(KytShipController_LeadFormation) == 0x000008, "Wrong size on KytShipController_LeadFormation");
static_assert(offsetof(KytShipController_LeadFormation, FormationType) == 0x000000, "Member 'KytShipController_LeadFormation::FormationType' has a wrong offset!");

// Function KytheraPlugin.KytShipController.MoveToActor
// 0x0010 (0x0010 - 0x0000)
struct KytShipController_MoveToActor final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytShipController_MoveToActor) == 0x000008, "Wrong alignment on KytShipController_MoveToActor");
static_assert(sizeof(KytShipController_MoveToActor) == 0x000010, "Wrong size on KytShipController_MoveToActor");
static_assert(offsetof(KytShipController_MoveToActor, Goal) == 0x000000, "Member 'KytShipController_MoveToActor::Goal' has a wrong offset!");
static_assert(offsetof(KytShipController_MoveToActor, EndDistance) == 0x000008, "Member 'KytShipController_MoveToActor::EndDistance' has a wrong offset!");
static_assert(offsetof(KytShipController_MoveToActor, Speed) == 0x00000C, "Member 'KytShipController_MoveToActor::Speed' has a wrong offset!");

// Function KytheraPlugin.KytShipController.MoveToLocation
// 0x0014 (0x0014 - 0x0000)
struct KytShipController_MoveToLocation final
{
public:
	struct FVector                                Dest;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytShipController_MoveToLocation) == 0x000004, "Wrong alignment on KytShipController_MoveToLocation");
static_assert(sizeof(KytShipController_MoveToLocation) == 0x000014, "Wrong size on KytShipController_MoveToLocation");
static_assert(offsetof(KytShipController_MoveToLocation, Dest) == 0x000000, "Member 'KytShipController_MoveToLocation::Dest' has a wrong offset!");
static_assert(offsetof(KytShipController_MoveToLocation, EndDistance) == 0x00000C, "Member 'KytShipController_MoveToLocation::EndDistance' has a wrong offset!");
static_assert(offsetof(KytShipController_MoveToLocation, Speed) == 0x000010, "Member 'KytShipController_MoveToLocation::Speed' has a wrong offset!");

// Function KytheraPlugin.KytShipController.SplinePointPassed
// 0x0020 (0x0020 - 0x0000)
struct KytShipController_SplinePointPassed final
{
public:
	class AKytNavSplineActor*                     SplineActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytShipController_SplinePointPassed) == 0x000008, "Wrong alignment on KytShipController_SplinePointPassed");
static_assert(sizeof(KytShipController_SplinePointPassed) == 0x000020, "Wrong size on KytShipController_SplinePointPassed");
static_assert(offsetof(KytShipController_SplinePointPassed, SplineActor) == 0x000000, "Member 'KytShipController_SplinePointPassed::SplineActor' has a wrong offset!");
static_assert(offsetof(KytShipController_SplinePointPassed, PointIndex) == 0x000008, "Member 'KytShipController_SplinePointPassed::PointIndex' has a wrong offset!");
static_assert(offsetof(KytShipController_SplinePointPassed, PointName) == 0x000010, "Member 'KytShipController_SplinePointPassed::PointName' has a wrong offset!");

// Function KytheraPlugin.KytShipController.TrackActor
// 0x0010 (0x0010 - 0x0000)
struct KytShipController_TrackActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireAtTarget;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytShipController_TrackActor) == 0x000008, "Wrong alignment on KytShipController_TrackActor");
static_assert(sizeof(KytShipController_TrackActor) == 0x000010, "Wrong size on KytShipController_TrackActor");
static_assert(offsetof(KytShipController_TrackActor, Target) == 0x000000, "Member 'KytShipController_TrackActor::Target' has a wrong offset!");
static_assert(offsetof(KytShipController_TrackActor, Distance) == 0x000008, "Member 'KytShipController_TrackActor::Distance' has a wrong offset!");
static_assert(offsetof(KytShipController_TrackActor, FireAtTarget) == 0x00000C, "Member 'KytShipController_TrackActor::FireAtTarget' has a wrong offset!");

// Function KytheraPlugin.KytShipController.TurnToFace
// 0x0008 (0x0008 - 0x0000)
struct KytShipController_TurnToFace final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytShipController_TurnToFace) == 0x000008, "Wrong alignment on KytShipController_TurnToFace");
static_assert(sizeof(KytShipController_TurnToFace) == 0x000008, "Wrong size on KytShipController_TurnToFace");
static_assert(offsetof(KytShipController_TurnToFace, Target) == 0x000000, "Member 'KytShipController_TurnToFace::Target' has a wrong offset!");

// Function KytheraPlugin.KytBTNode.DoCleanup
// 0x0010 (0x0010 - 0x0000)
struct KytBTNode_DoCleanup final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytBTNode_DoCleanup) == 0x000008, "Wrong alignment on KytBTNode_DoCleanup");
static_assert(sizeof(KytBTNode_DoCleanup) == 0x000010, "Wrong size on KytBTNode_DoCleanup");
static_assert(offsetof(KytBTNode_DoCleanup, Controller) == 0x000000, "Member 'KytBTNode_DoCleanup::Controller' has a wrong offset!");
static_assert(offsetof(KytBTNode_DoCleanup, BehaviorBlackboard) == 0x000008, "Member 'KytBTNode_DoCleanup::BehaviorBlackboard' has a wrong offset!");

// Function KytheraPlugin.KytBTNode.DoEnter
// 0x0018 (0x0018 - 0x0000)
struct KytBTNode_DoEnter final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBTEnterResult                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBTNode_DoEnter) == 0x000008, "Wrong alignment on KytBTNode_DoEnter");
static_assert(sizeof(KytBTNode_DoEnter) == 0x000018, "Wrong size on KytBTNode_DoEnter");
static_assert(offsetof(KytBTNode_DoEnter, Controller) == 0x000000, "Member 'KytBTNode_DoEnter::Controller' has a wrong offset!");
static_assert(offsetof(KytBTNode_DoEnter, BehaviorBlackboard) == 0x000008, "Member 'KytBTNode_DoEnter::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(KytBTNode_DoEnter, ReturnValue) == 0x000010, "Member 'KytBTNode_DoEnter::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBTNode.DoUpdate
// 0x0018 (0x0018 - 0x0000)
struct KytBTNode_DoUpdate final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBTUpdateResult                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBTNode_DoUpdate) == 0x000008, "Wrong alignment on KytBTNode_DoUpdate");
static_assert(sizeof(KytBTNode_DoUpdate) == 0x000018, "Wrong size on KytBTNode_DoUpdate");
static_assert(offsetof(KytBTNode_DoUpdate, Controller) == 0x000000, "Member 'KytBTNode_DoUpdate::Controller' has a wrong offset!");
static_assert(offsetof(KytBTNode_DoUpdate, BehaviorBlackboard) == 0x000008, "Member 'KytBTNode_DoUpdate::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(KytBTNode_DoUpdate, ReturnValue) == 0x000010, "Member 'KytBTNode_DoUpdate::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytBTConditional.CheckCondition
// 0x0018 (0x0018 - 0x0000)
struct KytBTConditional_CheckCondition final
{
public:
	class AKytController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytBlackboard*                         BehaviorBlackboard;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytBTConditionResult                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytBTConditional_CheckCondition) == 0x000008, "Wrong alignment on KytBTConditional_CheckCondition");
static_assert(sizeof(KytBTConditional_CheckCondition) == 0x000018, "Wrong size on KytBTConditional_CheckCondition");
static_assert(offsetof(KytBTConditional_CheckCondition, Controller) == 0x000000, "Member 'KytBTConditional_CheckCondition::Controller' has a wrong offset!");
static_assert(offsetof(KytBTConditional_CheckCondition, BehaviorBlackboard) == 0x000008, "Member 'KytBTConditional_CheckCondition::BehaviorBlackboard' has a wrong offset!");
static_assert(offsetof(KytBTConditional_CheckCondition, ReturnValue) == 0x000010, "Member 'KytBTConditional_CheckCondition::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateCancelCommandProxyObject
// 0x0018 (0x0018 - 0x0000)
struct KytCommandBlueprintProxy_CreateCancelCommandProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateCancelCommandProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateCancelCommandProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateCancelCommandProxyObject) == 0x000018, "Wrong size on KytCommandBlueprintProxy_CreateCancelCommandProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateCancelCommandProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateCancelCommandProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateCancelCommandProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateCancelCommandProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateCancelCommandProxyObject, ReturnValue) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateCancelCommandProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateFlyInFormationProxyObject
// 0x0020 (0x0020 - 0x0000)
struct KytCommandBlueprintProxy_CreateFlyInFormationProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Leader;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateFlyInFormationProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateFlyInFormationProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateFlyInFormationProxyObject) == 0x000020, "Wrong size on KytCommandBlueprintProxy_CreateFlyInFormationProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlyInFormationProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateFlyInFormationProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlyInFormationProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateFlyInFormationProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlyInFormationProxyObject, Leader) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateFlyInFormationProxyObject::Leader' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlyInFormationProxyObject, ReturnValue) == 0x000018, "Member 'KytCommandBlueprintProxy_CreateFlyInFormationProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateFlySplineProxyObject
// 0x0028 (0x0028 - 0x0000)
struct KytCommandBlueprintProxy_CreateFlySplineProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKytNavSplineActor*                     Spline;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampToSpline;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackHostiles;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeleportToStart;                                   // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinNearestPoint;                                  // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAvoidance;                                  // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateFlySplineProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateFlySplineProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateFlySplineProxyObject) == 0x000028, "Wrong size on KytCommandBlueprintProxy_CreateFlySplineProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, Spline) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::Spline' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, ClampToSpline) == 0x000018, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::ClampToSpline' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, AttackHostiles) == 0x000019, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::AttackHostiles' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, TeleportToStart) == 0x00001A, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::TeleportToStart' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, JoinNearestPoint) == 0x00001B, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::JoinNearestPoint' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, DisableAvoidance) == 0x00001C, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::DisableAvoidance' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateFlySplineProxyObject, ReturnValue) == 0x000020, "Member 'KytCommandBlueprintProxy_CreateFlySplineProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateHaltProxyObject
// 0x0018 (0x0018 - 0x0000)
struct KytCommandBlueprintProxy_CreateHaltProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateHaltProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateHaltProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateHaltProxyObject) == 0x000018, "Wrong size on KytCommandBlueprintProxy_CreateHaltProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateHaltProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateHaltProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateHaltProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateHaltProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateHaltProxyObject, ReturnValue) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateHaltProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateMoveToProxyObject
// 0x0030 (0x0030 - 0x0000)
struct KytCommandBlueprintProxy_CreateMoveToProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateMoveToProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateMoveToProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateMoveToProxyObject) == 0x000030, "Wrong size on KytCommandBlueprintProxy_CreateMoveToProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateMoveToProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateMoveToProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateMoveToProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateMoveToProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateMoveToProxyObject, TargetActor) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateMoveToProxyObject::TargetActor' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateMoveToProxyObject, Destination) == 0x000018, "Member 'KytCommandBlueprintProxy_CreateMoveToProxyObject::Destination' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateMoveToProxyObject, ReturnValue) == 0x000028, "Member 'KytCommandBlueprintProxy_CreateMoveToProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreatePathToProxyObject
// 0x0030 (0x0030 - 0x0000)
struct KytCommandBlueprintProxy_CreatePathToProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreatePathToProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreatePathToProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreatePathToProxyObject) == 0x000030, "Wrong size on KytCommandBlueprintProxy_CreatePathToProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreatePathToProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreatePathToProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreatePathToProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreatePathToProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreatePathToProxyObject, TargetActor) == 0x000010, "Member 'KytCommandBlueprintProxy_CreatePathToProxyObject::TargetActor' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreatePathToProxyObject, Destination) == 0x000018, "Member 'KytCommandBlueprintProxy_CreatePathToProxyObject::Destination' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreatePathToProxyObject, ReturnValue) == 0x000028, "Member 'KytCommandBlueprintProxy_CreatePathToProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateTrackActorProxyObject
// 0x0028 (0x0028 - 0x0000)
struct KytCommandBlueprintProxy_CreateTrackActorProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireAtTarget;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateTrackActorProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateTrackActorProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateTrackActorProxyObject) == 0x000028, "Wrong size on KytCommandBlueprintProxy_CreateTrackActorProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTrackActorProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateTrackActorProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTrackActorProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateTrackActorProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTrackActorProxyObject, TargetActor) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateTrackActorProxyObject::TargetActor' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTrackActorProxyObject, Distance) == 0x000018, "Member 'KytCommandBlueprintProxy_CreateTrackActorProxyObject::Distance' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTrackActorProxyObject, FireAtTarget) == 0x00001C, "Member 'KytCommandBlueprintProxy_CreateTrackActorProxyObject::FireAtTarget' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTrackActorProxyObject, ReturnValue) == 0x000020, "Member 'KytCommandBlueprintProxy_CreateTrackActorProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateTurnToFaceProxyObject
// 0x0038 (0x0038 - 0x0000)
struct KytCommandBlueprintProxy_CreateTurnToFaceProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateTurnToFaceProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject) == 0x000038, "Wrong size on KytCommandBlueprintProxy_CreateTurnToFaceProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateTurnToFaceProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateTurnToFaceProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject, TargetActor) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateTurnToFaceProxyObject::TargetActor' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject, Rotation) == 0x000018, "Member 'KytCommandBlueprintProxy_CreateTurnToFaceProxyObject::Rotation' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject, position) == 0x000024, "Member 'KytCommandBlueprintProxy_CreateTurnToFaceProxyObject::position' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateTurnToFaceProxyObject, ReturnValue) == 0x000030, "Member 'KytCommandBlueprintProxy_CreateTurnToFaceProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytCommandBlueprintProxy.CreateWaitProxyObject
// 0x0020 (0x0020 - 0x0000)
struct KytCommandBlueprintProxy_CreateWaitProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytCommandBlueprintProxy*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytCommandBlueprintProxy_CreateWaitProxyObject) == 0x000008, "Wrong alignment on KytCommandBlueprintProxy_CreateWaitProxyObject");
static_assert(sizeof(KytCommandBlueprintProxy_CreateWaitProxyObject) == 0x000020, "Wrong size on KytCommandBlueprintProxy_CreateWaitProxyObject");
static_assert(offsetof(KytCommandBlueprintProxy_CreateWaitProxyObject, WorldContextObject) == 0x000000, "Member 'KytCommandBlueprintProxy_CreateWaitProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateWaitProxyObject, Pawn) == 0x000008, "Member 'KytCommandBlueprintProxy_CreateWaitProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateWaitProxyObject, Time) == 0x000010, "Member 'KytCommandBlueprintProxy_CreateWaitProxyObject::Time' has a wrong offset!");
static_assert(offsetof(KytCommandBlueprintProxy_CreateWaitProxyObject, ReturnValue) == 0x000018, "Member 'KytCommandBlueprintProxy_CreateWaitProxyObject::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.ChangeFormation
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_ChangeFormation final
{
public:
	class UKytFormation*                          NewFormation;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Leader;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_ChangeFormation) == 0x000008, "Wrong alignment on KytFunctionLibrary_ChangeFormation");
static_assert(sizeof(KytFunctionLibrary_ChangeFormation) == 0x000018, "Wrong size on KytFunctionLibrary_ChangeFormation");
static_assert(offsetof(KytFunctionLibrary_ChangeFormation, NewFormation) == 0x000000, "Member 'KytFunctionLibrary_ChangeFormation::NewFormation' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ChangeFormation, Leader) == 0x000008, "Member 'KytFunctionLibrary_ChangeFormation::Leader' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ChangeFormation, bSuccess) == 0x000010, "Member 'KytFunctionLibrary_ChangeFormation::bSuccess' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.ChangeFormationByName
// 0x0020 (0x0020 - 0x0000)
struct KytFunctionLibrary_ChangeFormationByName final
{
public:
	class FString                                 FormationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Leader;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_ChangeFormationByName) == 0x000008, "Wrong alignment on KytFunctionLibrary_ChangeFormationByName");
static_assert(sizeof(KytFunctionLibrary_ChangeFormationByName) == 0x000020, "Wrong size on KytFunctionLibrary_ChangeFormationByName");
static_assert(offsetof(KytFunctionLibrary_ChangeFormationByName, FormationName) == 0x000000, "Member 'KytFunctionLibrary_ChangeFormationByName::FormationName' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ChangeFormationByName, Leader) == 0x000010, "Member 'KytFunctionLibrary_ChangeFormationByName::Leader' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ChangeFormationByName, bSuccess) == 0x000018, "Member 'KytFunctionLibrary_ChangeFormationByName::bSuccess' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.Conv_FVectorToKytPosition
// 0x0030 (0x0030 - 0x0000)
struct KytFunctionLibrary_Conv_FVectorToKytPosition final
{
public:
	struct FVector                                position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUKytPosition                          ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_Conv_FVectorToKytPosition) == 0x000008, "Wrong alignment on KytFunctionLibrary_Conv_FVectorToKytPosition");
static_assert(sizeof(KytFunctionLibrary_Conv_FVectorToKytPosition) == 0x000030, "Wrong size on KytFunctionLibrary_Conv_FVectorToKytPosition");
static_assert(offsetof(KytFunctionLibrary_Conv_FVectorToKytPosition, position) == 0x000000, "Member 'KytFunctionLibrary_Conv_FVectorToKytPosition::position' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_Conv_FVectorToKytPosition, ReturnValue) == 0x000010, "Member 'KytFunctionLibrary_Conv_FVectorToKytPosition::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.Conv_KytPositionToFVector
// 0x0030 (0x0030 - 0x0000)
struct KytFunctionLibrary_Conv_KytPositionToFVector final
{
public:
	struct FUKytPosition                          KytPosition;                                       // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_Conv_KytPositionToFVector) == 0x000008, "Wrong alignment on KytFunctionLibrary_Conv_KytPositionToFVector");
static_assert(sizeof(KytFunctionLibrary_Conv_KytPositionToFVector) == 0x000030, "Wrong size on KytFunctionLibrary_Conv_KytPositionToFVector");
static_assert(offsetof(KytFunctionLibrary_Conv_KytPositionToFVector, KytPosition) == 0x000000, "Member 'KytFunctionLibrary_Conv_KytPositionToFVector::KytPosition' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_Conv_KytPositionToFVector, ReturnValue) == 0x000020, "Member 'KytFunctionLibrary_Conv_KytPositionToFVector::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.ConvertKytPosition
// 0x0050 (0x0050 - 0x0000)
struct KytFunctionLibrary_ConvertKytPosition final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUKytPosition                          KytPosition;                                       // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ECoordinateSystem                             CoordSytem;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUKytPosition                          ReturnValue;                                       // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_ConvertKytPosition) == 0x000008, "Wrong alignment on KytFunctionLibrary_ConvertKytPosition");
static_assert(sizeof(KytFunctionLibrary_ConvertKytPosition) == 0x000050, "Wrong size on KytFunctionLibrary_ConvertKytPosition");
static_assert(offsetof(KytFunctionLibrary_ConvertKytPosition, Actor) == 0x000000, "Member 'KytFunctionLibrary_ConvertKytPosition::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ConvertKytPosition, KytPosition) == 0x000008, "Member 'KytFunctionLibrary_ConvertKytPosition::KytPosition' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ConvertKytPosition, CoordSytem) == 0x000028, "Member 'KytFunctionLibrary_ConvertKytPosition::CoordSytem' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ConvertKytPosition, ReturnValue) == 0x000030, "Member 'KytFunctionLibrary_ConvertKytPosition::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.ConvertToKytheraPos
// 0x0038 (0x0038 - 0x0000)
struct KytFunctionLibrary_ConvertToKytheraPos final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UnrealPos;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoordinateSystem                             CoordSytem;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUKytPosition                          ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_ConvertToKytheraPos) == 0x000008, "Wrong alignment on KytFunctionLibrary_ConvertToKytheraPos");
static_assert(sizeof(KytFunctionLibrary_ConvertToKytheraPos) == 0x000038, "Wrong size on KytFunctionLibrary_ConvertToKytheraPos");
static_assert(offsetof(KytFunctionLibrary_ConvertToKytheraPos, Actor) == 0x000000, "Member 'KytFunctionLibrary_ConvertToKytheraPos::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ConvertToKytheraPos, UnrealPos) == 0x000008, "Member 'KytFunctionLibrary_ConvertToKytheraPos::UnrealPos' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ConvertToKytheraPos, CoordSytem) == 0x000014, "Member 'KytFunctionLibrary_ConvertToKytheraPos::CoordSytem' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_ConvertToKytheraPos, ReturnValue) == 0x000018, "Member 'KytFunctionLibrary_ConvertToKytheraPos::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.DebugForceRegenerateNavigationMesh
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_DebugForceRegenerateNavigationMesh final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_DebugForceRegenerateNavigationMesh) == 0x000004, "Wrong alignment on KytFunctionLibrary_DebugForceRegenerateNavigationMesh");
static_assert(sizeof(KytFunctionLibrary_DebugForceRegenerateNavigationMesh) == 0x000018, "Wrong size on KytFunctionLibrary_DebugForceRegenerateNavigationMesh");
static_assert(offsetof(KytFunctionLibrary_DebugForceRegenerateNavigationMesh, Origin) == 0x000000, "Member 'KytFunctionLibrary_DebugForceRegenerateNavigationMesh::Origin' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_DebugForceRegenerateNavigationMesh, Extent) == 0x00000C, "Member 'KytFunctionLibrary_DebugForceRegenerateNavigationMesh::Extent' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.DisableEntityUpdates
// 0x0008 (0x0008 - 0x0000)
struct KytFunctionLibrary_DisableEntityUpdates final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_DisableEntityUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_DisableEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_DisableEntityUpdates) == 0x000008, "Wrong size on KytFunctionLibrary_DisableEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_DisableEntityUpdates, Actor) == 0x000000, "Member 'KytFunctionLibrary_DisableEntityUpdates::Actor' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.DisableMultipleEntityUpdates
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_DisableMultipleEntityUpdates final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_DisableMultipleEntityUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_DisableMultipleEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_DisableMultipleEntityUpdates) == 0x000010, "Wrong size on KytFunctionLibrary_DisableMultipleEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_DisableMultipleEntityUpdates, Actors) == 0x000000, "Member 'KytFunctionLibrary_DisableMultipleEntityUpdates::Actors' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.EnableBehaviourTreeUpdates
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_EnableBehaviourTreeUpdates final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_EnableBehaviourTreeUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_EnableBehaviourTreeUpdates");
static_assert(sizeof(KytFunctionLibrary_EnableBehaviourTreeUpdates) == 0x000010, "Wrong size on KytFunctionLibrary_EnableBehaviourTreeUpdates");
static_assert(offsetof(KytFunctionLibrary_EnableBehaviourTreeUpdates, Actor) == 0x000000, "Member 'KytFunctionLibrary_EnableBehaviourTreeUpdates::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_EnableBehaviourTreeUpdates, bEnable) == 0x000008, "Member 'KytFunctionLibrary_EnableBehaviourTreeUpdates::bEnable' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.FollowFormationLeader
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_FollowFormationLeader final
{
public:
	class APawn*                                  Leader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Follower;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_FollowFormationLeader) == 0x000008, "Wrong alignment on KytFunctionLibrary_FollowFormationLeader");
static_assert(sizeof(KytFunctionLibrary_FollowFormationLeader) == 0x000018, "Wrong size on KytFunctionLibrary_FollowFormationLeader");
static_assert(offsetof(KytFunctionLibrary_FollowFormationLeader, Leader) == 0x000000, "Member 'KytFunctionLibrary_FollowFormationLeader::Leader' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_FollowFormationLeader, Follower) == 0x000008, "Member 'KytFunctionLibrary_FollowFormationLeader::Follower' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_FollowFormationLeader, bSuccess) == 0x000010, "Member 'KytFunctionLibrary_FollowFormationLeader::bSuccess' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.GetGlobalKytheraBlackboard
// 0x0008 (0x0008 - 0x0000)
struct KytFunctionLibrary_GetGlobalKytheraBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_GetGlobalKytheraBlackboard) == 0x000008, "Wrong alignment on KytFunctionLibrary_GetGlobalKytheraBlackboard");
static_assert(sizeof(KytFunctionLibrary_GetGlobalKytheraBlackboard) == 0x000008, "Wrong size on KytFunctionLibrary_GetGlobalKytheraBlackboard");
static_assert(offsetof(KytFunctionLibrary_GetGlobalKytheraBlackboard, ReturnValue) == 0x000000, "Member 'KytFunctionLibrary_GetGlobalKytheraBlackboard::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.GetKytPosition
// 0x0030 (0x0030 - 0x0000)
struct KytFunctionLibrary_GetKytPosition final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoordinateSystem                             CoordSytem;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUKytPosition                          ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_GetKytPosition) == 0x000008, "Wrong alignment on KytFunctionLibrary_GetKytPosition");
static_assert(sizeof(KytFunctionLibrary_GetKytPosition) == 0x000030, "Wrong size on KytFunctionLibrary_GetKytPosition");
static_assert(offsetof(KytFunctionLibrary_GetKytPosition, Actor) == 0x000000, "Member 'KytFunctionLibrary_GetKytPosition::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_GetKytPosition, CoordSytem) == 0x000008, "Member 'KytFunctionLibrary_GetKytPosition::CoordSytem' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_GetKytPosition, ReturnValue) == 0x000010, "Member 'KytFunctionLibrary_GetKytPosition::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.IsNavigationMeshCurrentlyRegenerating
// 0x001C (0x001C - 0x0000)
struct KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating) == 0x000004, "Wrong alignment on KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating");
static_assert(sizeof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating) == 0x00001C, "Wrong size on KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating");
static_assert(offsetof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating, Origin) == 0x000000, "Member 'KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating::Origin' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating, Extent) == 0x00000C, "Member 'KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating::Extent' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating, ReturnValue) == 0x000018, "Member 'KytFunctionLibrary_IsNavigationMeshCurrentlyRegenerating::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.IsNavigationMeshCurrentlyRegeneratingAnywhere
// 0x0001 (0x0001 - 0x0000)
struct KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere) == 0x000001, "Wrong alignment on KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere");
static_assert(sizeof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere) == 0x000001, "Wrong size on KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere");
static_assert(offsetof(KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere, ReturnValue) == 0x000000, "Member 'KytFunctionLibrary_IsNavigationMeshCurrentlyRegeneratingAnywhere::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.LinkMovingNavigationMesh
// 0x0008 (0x0008 - 0x0000)
struct KytFunctionLibrary_LinkMovingNavigationMesh final
{
public:
	const class AActor*                           LinkedActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_LinkMovingNavigationMesh) == 0x000008, "Wrong alignment on KytFunctionLibrary_LinkMovingNavigationMesh");
static_assert(sizeof(KytFunctionLibrary_LinkMovingNavigationMesh) == 0x000008, "Wrong size on KytFunctionLibrary_LinkMovingNavigationMesh");
static_assert(offsetof(KytFunctionLibrary_LinkMovingNavigationMesh, LinkedActor) == 0x000000, "Member 'KytFunctionLibrary_LinkMovingNavigationMesh::LinkedActor' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.PauseAllEntityUpdates
// 0x0001 (0x0001 - 0x0000)
struct KytFunctionLibrary_PauseAllEntityUpdates final
{
public:
	bool                                          bShouldPause;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_PauseAllEntityUpdates) == 0x000001, "Wrong alignment on KytFunctionLibrary_PauseAllEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_PauseAllEntityUpdates) == 0x000001, "Wrong size on KytFunctionLibrary_PauseAllEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_PauseAllEntityUpdates, bShouldPause) == 0x000000, "Member 'KytFunctionLibrary_PauseAllEntityUpdates::bShouldPause' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.PauseEntityUpdates
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_PauseEntityUpdates final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPause;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_PauseEntityUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_PauseEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_PauseEntityUpdates) == 0x000010, "Wrong size on KytFunctionLibrary_PauseEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_PauseEntityUpdates, Actor) == 0x000000, "Member 'KytFunctionLibrary_PauseEntityUpdates::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_PauseEntityUpdates, bShouldPause) == 0x000008, "Member 'KytFunctionLibrary_PauseEntityUpdates::bShouldPause' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.PauseMultipleEntityUpdates
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_PauseMultipleEntityUpdates final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldPause;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_PauseMultipleEntityUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_PauseMultipleEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_PauseMultipleEntityUpdates) == 0x000018, "Wrong size on KytFunctionLibrary_PauseMultipleEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_PauseMultipleEntityUpdates, Actors) == 0x000000, "Member 'KytFunctionLibrary_PauseMultipleEntityUpdates::Actors' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_PauseMultipleEntityUpdates, bShouldPause) == 0x000010, "Member 'KytFunctionLibrary_PauseMultipleEntityUpdates::bShouldPause' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.RegenerateNavigationMesh
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_RegenerateNavigationMesh final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_RegenerateNavigationMesh) == 0x000004, "Wrong alignment on KytFunctionLibrary_RegenerateNavigationMesh");
static_assert(sizeof(KytFunctionLibrary_RegenerateNavigationMesh) == 0x000018, "Wrong size on KytFunctionLibrary_RegenerateNavigationMesh");
static_assert(offsetof(KytFunctionLibrary_RegenerateNavigationMesh, Origin) == 0x000000, "Member 'KytFunctionLibrary_RegenerateNavigationMesh::Origin' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegenerateNavigationMesh, Extent) == 0x00000C, "Member 'KytFunctionLibrary_RegenerateNavigationMesh::Extent' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.RegisterDamage
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_RegisterDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_RegisterDamage) == 0x000008, "Wrong alignment on KytFunctionLibrary_RegisterDamage");
static_assert(sizeof(KytFunctionLibrary_RegisterDamage) == 0x000018, "Wrong size on KytFunctionLibrary_RegisterDamage");
static_assert(offsetof(KytFunctionLibrary_RegisterDamage, Actor) == 0x000000, "Member 'KytFunctionLibrary_RegisterDamage::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterDamage, Damage) == 0x000008, "Member 'KytFunctionLibrary_RegisterDamage::Damage' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterDamage, Instigator) == 0x000010, "Member 'KytFunctionLibrary_RegisterDamage::Instigator' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.RegisterInstantShot
// 0x0028 (0x0028 - 0x0000)
struct KytFunctionLibrary_RegisterInstantShot final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_RegisterInstantShot) == 0x000008, "Wrong alignment on KytFunctionLibrary_RegisterInstantShot");
static_assert(sizeof(KytFunctionLibrary_RegisterInstantShot) == 0x000028, "Wrong size on KytFunctionLibrary_RegisterInstantShot");
static_assert(offsetof(KytFunctionLibrary_RegisterInstantShot, Actor) == 0x000000, "Member 'KytFunctionLibrary_RegisterInstantShot::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterInstantShot, Start) == 0x000008, "Member 'KytFunctionLibrary_RegisterInstantShot::Start' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterInstantShot, End) == 0x000014, "Member 'KytFunctionLibrary_RegisterInstantShot::End' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterInstantShot, Radius) == 0x000020, "Member 'KytFunctionLibrary_RegisterInstantShot::Radius' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.RegisterProjectileShot
// 0x0028 (0x0028 - 0x0000)
struct KytFunctionLibrary_RegisterProjectileShot final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_RegisterProjectileShot) == 0x000008, "Wrong alignment on KytFunctionLibrary_RegisterProjectileShot");
static_assert(sizeof(KytFunctionLibrary_RegisterProjectileShot) == 0x000028, "Wrong size on KytFunctionLibrary_RegisterProjectileShot");
static_assert(offsetof(KytFunctionLibrary_RegisterProjectileShot, Actor) == 0x000000, "Member 'KytFunctionLibrary_RegisterProjectileShot::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterProjectileShot, Start) == 0x000008, "Member 'KytFunctionLibrary_RegisterProjectileShot::Start' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterProjectileShot, End) == 0x000014, "Member 'KytFunctionLibrary_RegisterProjectileShot::End' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_RegisterProjectileShot, Radius) == 0x000020, "Member 'KytFunctionLibrary_RegisterProjectileShot::Radius' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.ResetEntityUpdates
// 0x0008 (0x0008 - 0x0000)
struct KytFunctionLibrary_ResetEntityUpdates final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_ResetEntityUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_ResetEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_ResetEntityUpdates) == 0x000008, "Wrong size on KytFunctionLibrary_ResetEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_ResetEntityUpdates, Actor) == 0x000000, "Member 'KytFunctionLibrary_ResetEntityUpdates::Actor' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.ResetMultipleEntityUpdates
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_ResetMultipleEntityUpdates final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_ResetMultipleEntityUpdates) == 0x000008, "Wrong alignment on KytFunctionLibrary_ResetMultipleEntityUpdates");
static_assert(sizeof(KytFunctionLibrary_ResetMultipleEntityUpdates) == 0x000010, "Wrong size on KytFunctionLibrary_ResetMultipleEntityUpdates");
static_assert(offsetof(KytFunctionLibrary_ResetMultipleEntityUpdates, Actors) == 0x000000, "Member 'KytFunctionLibrary_ResetMultipleEntityUpdates::Actors' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetAllEntityUpdateFrequenciesInFrames
// 0x0004 (0x0004 - 0x0000)
struct KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames final
{
public:
	int32                                         framesPerUpdate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames) == 0x000004, "Wrong alignment on KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames");
static_assert(sizeof(KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames) == 0x000004, "Wrong size on KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames");
static_assert(offsetof(KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames, framesPerUpdate) == 0x000000, "Member 'KytFunctionLibrary_SetAllEntityUpdateFrequenciesInFrames::framesPerUpdate' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetAllEntityUpdateFrequenciesInTime
// 0x0004 (0x0004 - 0x0000)
struct KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime final
{
public:
	float                                         secondsPerUpdate;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime) == 0x000004, "Wrong alignment on KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime");
static_assert(sizeof(KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime) == 0x000004, "Wrong size on KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime");
static_assert(offsetof(KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime, secondsPerUpdate) == 0x000000, "Member 'KytFunctionLibrary_SetAllEntityUpdateFrequenciesInTime::secondsPerUpdate' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetEntityUpdateFrequencyInFrames
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_SetEntityUpdateFrequencyInFrames final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         framesPerUpdate;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_SetEntityUpdateFrequencyInFrames) == 0x000008, "Wrong alignment on KytFunctionLibrary_SetEntityUpdateFrequencyInFrames");
static_assert(sizeof(KytFunctionLibrary_SetEntityUpdateFrequencyInFrames) == 0x000010, "Wrong size on KytFunctionLibrary_SetEntityUpdateFrequencyInFrames");
static_assert(offsetof(KytFunctionLibrary_SetEntityUpdateFrequencyInFrames, Actor) == 0x000000, "Member 'KytFunctionLibrary_SetEntityUpdateFrequencyInFrames::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_SetEntityUpdateFrequencyInFrames, framesPerUpdate) == 0x000008, "Member 'KytFunctionLibrary_SetEntityUpdateFrequencyInFrames::framesPerUpdate' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetEntityUpdateFrequencyInTime
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_SetEntityUpdateFrequencyInTime final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         secondsPerUpdate;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_SetEntityUpdateFrequencyInTime) == 0x000008, "Wrong alignment on KytFunctionLibrary_SetEntityUpdateFrequencyInTime");
static_assert(sizeof(KytFunctionLibrary_SetEntityUpdateFrequencyInTime) == 0x000010, "Wrong size on KytFunctionLibrary_SetEntityUpdateFrequencyInTime");
static_assert(offsetof(KytFunctionLibrary_SetEntityUpdateFrequencyInTime, Actor) == 0x000000, "Member 'KytFunctionLibrary_SetEntityUpdateFrequencyInTime::Actor' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_SetEntityUpdateFrequencyInTime, secondsPerUpdate) == 0x000008, "Member 'KytFunctionLibrary_SetEntityUpdateFrequencyInTime::secondsPerUpdate' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetKytheraDebugOption
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_SetKytheraDebugOption final
{
public:
	class FString                                 OptionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_SetKytheraDebugOption) == 0x000008, "Wrong alignment on KytFunctionLibrary_SetKytheraDebugOption");
static_assert(sizeof(KytFunctionLibrary_SetKytheraDebugOption) == 0x000018, "Wrong size on KytFunctionLibrary_SetKytheraDebugOption");
static_assert(offsetof(KytFunctionLibrary_SetKytheraDebugOption, OptionName) == 0x000000, "Member 'KytFunctionLibrary_SetKytheraDebugOption::OptionName' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_SetKytheraDebugOption, Enabled) == 0x000010, "Member 'KytFunctionLibrary_SetKytheraDebugOption::Enabled' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetMaxAllowedThreat
// 0x0010 (0x0010 - 0x0000)
struct KytFunctionLibrary_SetMaxAllowedThreat final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxThreat;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_SetMaxAllowedThreat) == 0x000008, "Wrong alignment on KytFunctionLibrary_SetMaxAllowedThreat");
static_assert(sizeof(KytFunctionLibrary_SetMaxAllowedThreat) == 0x000010, "Wrong size on KytFunctionLibrary_SetMaxAllowedThreat");
static_assert(offsetof(KytFunctionLibrary_SetMaxAllowedThreat, Target) == 0x000000, "Member 'KytFunctionLibrary_SetMaxAllowedThreat::Target' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_SetMaxAllowedThreat, MaxThreat) == 0x000008, "Member 'KytFunctionLibrary_SetMaxAllowedThreat::MaxThreat' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetMultipleEntityUpdateFrequenciesInFrames
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         framesPerUpdate;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames) == 0x000008, "Wrong alignment on KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames");
static_assert(sizeof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames) == 0x000018, "Wrong size on KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames");
static_assert(offsetof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames, Actors) == 0x000000, "Member 'KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames::Actors' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames, framesPerUpdate) == 0x000010, "Member 'KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInFrames::framesPerUpdate' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.SetMultipleEntityUpdateFrequenciesInTime
// 0x0018 (0x0018 - 0x0000)
struct KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         secondsPerUpdate;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime) == 0x000008, "Wrong alignment on KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime");
static_assert(sizeof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime) == 0x000018, "Wrong size on KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime");
static_assert(offsetof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime, Actors) == 0x000000, "Member 'KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime::Actors' has a wrong offset!");
static_assert(offsetof(KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime, secondsPerUpdate) == 0x000010, "Member 'KytFunctionLibrary_SetMultipleEntityUpdateFrequenciesInTime::secondsPerUpdate' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.UnlinkMovingNavigationMesh
// 0x0008 (0x0008 - 0x0000)
struct KytFunctionLibrary_UnlinkMovingNavigationMesh final
{
public:
	const class AActor*                           LinkedActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_UnlinkMovingNavigationMesh) == 0x000008, "Wrong alignment on KytFunctionLibrary_UnlinkMovingNavigationMesh");
static_assert(sizeof(KytFunctionLibrary_UnlinkMovingNavigationMesh) == 0x000008, "Wrong size on KytFunctionLibrary_UnlinkMovingNavigationMesh");
static_assert(offsetof(KytFunctionLibrary_UnlinkMovingNavigationMesh, LinkedActor) == 0x000000, "Member 'KytFunctionLibrary_UnlinkMovingNavigationMesh::LinkedActor' has a wrong offset!");

// Function KytheraPlugin.KytFunctionLibrary.UpdateRelationship
// 0x0008 (0x0008 - 0x0000)
struct KytFunctionLibrary_UpdateRelationship final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytFunctionLibrary_UpdateRelationship) == 0x000008, "Wrong alignment on KytFunctionLibrary_UpdateRelationship");
static_assert(sizeof(KytFunctionLibrary_UpdateRelationship) == 0x000008, "Wrong size on KytFunctionLibrary_UpdateRelationship");
static_assert(offsetof(KytFunctionLibrary_UpdateRelationship, Actor) == 0x000000, "Member 'KytFunctionLibrary_UpdateRelationship::Actor' has a wrong offset!");

// Function KytheraPlugin.KytGroup.CreateKytGroup
// 0x0020 (0x0020 - 0x0000)
struct KytGroup_CreateKytGroup final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKytGroup*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_CreateKytGroup) == 0x000008, "Wrong alignment on KytGroup_CreateKytGroup");
static_assert(sizeof(KytGroup_CreateKytGroup) == 0x000020, "Wrong size on KytGroup_CreateKytGroup");
static_assert(offsetof(KytGroup_CreateKytGroup, WorldContextObject) == 0x000000, "Member 'KytGroup_CreateKytGroup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytGroup_CreateKytGroup, Type_0) == 0x000008, "Member 'KytGroup_CreateKytGroup::Type_0' has a wrong offset!");
static_assert(offsetof(KytGroup_CreateKytGroup, ReturnValue) == 0x000018, "Member 'KytGroup_CreateKytGroup::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytGroup.GetNamedKytGroup
// 0x0030 (0x0030 - 0x0000)
struct KytGroup_GetNamedKytGroup final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type_0;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKytGroup*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_GetNamedKytGroup) == 0x000008, "Wrong alignment on KytGroup_GetNamedKytGroup");
static_assert(sizeof(KytGroup_GetNamedKytGroup) == 0x000030, "Wrong size on KytGroup_GetNamedKytGroup");
static_assert(offsetof(KytGroup_GetNamedKytGroup, WorldContextObject) == 0x000000, "Member 'KytGroup_GetNamedKytGroup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KytGroup_GetNamedKytGroup, Name_0) == 0x000008, "Member 'KytGroup_GetNamedKytGroup::Name_0' has a wrong offset!");
static_assert(offsetof(KytGroup_GetNamedKytGroup, Type_0) == 0x000018, "Member 'KytGroup_GetNamedKytGroup::Type_0' has a wrong offset!");
static_assert(offsetof(KytGroup_GetNamedKytGroup, ReturnValue) == 0x000028, "Member 'KytGroup_GetNamedKytGroup::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytGroup.Add
// 0x0008 (0x0008 - 0x0000)
struct KytGroup_Add final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_Add) == 0x000008, "Wrong alignment on KytGroup_Add");
static_assert(sizeof(KytGroup_Add) == 0x000008, "Wrong size on KytGroup_Add");
static_assert(offsetof(KytGroup_Add, Actor) == 0x000000, "Member 'KytGroup_Add::Actor' has a wrong offset!");

// Function KytheraPlugin.KytGroup.GetActorsInGroup
// 0x0010 (0x0010 - 0x0000)
struct KytGroup_GetActorsInGroup final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_GetActorsInGroup) == 0x000008, "Wrong alignment on KytGroup_GetActorsInGroup");
static_assert(sizeof(KytGroup_GetActorsInGroup) == 0x000010, "Wrong size on KytGroup_GetActorsInGroup");
static_assert(offsetof(KytGroup_GetActorsInGroup, ReturnValue) == 0x000000, "Member 'KytGroup_GetActorsInGroup::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytGroup.GetGroupBlackboard
// 0x0008 (0x0008 - 0x0000)
struct KytGroup_GetGroupBlackboard final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_GetGroupBlackboard) == 0x000008, "Wrong alignment on KytGroup_GetGroupBlackboard");
static_assert(sizeof(KytGroup_GetGroupBlackboard) == 0x000008, "Wrong size on KytGroup_GetGroupBlackboard");
static_assert(offsetof(KytGroup_GetGroupBlackboard, ReturnValue) == 0x000000, "Member 'KytGroup_GetGroupBlackboard::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytGroup.Remove
// 0x0008 (0x0008 - 0x0000)
struct KytGroup_Remove final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_Remove) == 0x000008, "Wrong alignment on KytGroup_Remove");
static_assert(sizeof(KytGroup_Remove) == 0x000008, "Wrong size on KytGroup_Remove");
static_assert(offsetof(KytGroup_Remove, Actor) == 0x000000, "Member 'KytGroup_Remove::Actor' has a wrong offset!");

// Function KytheraPlugin.KytGroup.SendGroupSignal
// 0x0010 (0x0010 - 0x0000)
struct KytGroup_SendGroupSignal final
{
public:
	class FString                                 SignalName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_SendGroupSignal) == 0x000008, "Wrong alignment on KytGroup_SendGroupSignal");
static_assert(sizeof(KytGroup_SendGroupSignal) == 0x000010, "Wrong size on KytGroup_SendGroupSignal");
static_assert(offsetof(KytGroup_SendGroupSignal, SignalName) == 0x000000, "Member 'KytGroup_SendGroupSignal::SignalName' has a wrong offset!");

// Function KytheraPlugin.KytGroup.GetType
// 0x0010 (0x0010 - 0x0000)
struct KytGroup_GetType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytGroup_GetType) == 0x000008, "Wrong alignment on KytGroup_GetType");
static_assert(sizeof(KytGroup_GetType) == 0x000010, "Wrong size on KytGroup_GetType");
static_assert(offsetof(KytGroup_GetType, ReturnValue) == 0x000000, "Member 'KytGroup_GetType::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytheraPawnComponent.GetCurrentlyPerceivedTargets
// 0x0010 (0x0010 - 0x0000)
struct KytheraPawnComponent_GetCurrentlyPerceivedTargets final
{
public:
	TArray<struct FPerceivedTargetInfo>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytheraPawnComponent_GetCurrentlyPerceivedTargets) == 0x000008, "Wrong alignment on KytheraPawnComponent_GetCurrentlyPerceivedTargets");
static_assert(sizeof(KytheraPawnComponent_GetCurrentlyPerceivedTargets) == 0x000010, "Wrong size on KytheraPawnComponent_GetCurrentlyPerceivedTargets");
static_assert(offsetof(KytheraPawnComponent_GetCurrentlyPerceivedTargets, ReturnValue) == 0x000000, "Member 'KytheraPawnComponent_GetCurrentlyPerceivedTargets::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytheraPawnComponent.GetEntityState
// 0x0008 (0x0008 - 0x0000)
struct KytheraPawnComponent_GetEntityState final
{
public:
	class UKytBlackboard*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytheraPawnComponent_GetEntityState) == 0x000008, "Wrong alignment on KytheraPawnComponent_GetEntityState");
static_assert(sizeof(KytheraPawnComponent_GetEntityState) == 0x000008, "Wrong size on KytheraPawnComponent_GetEntityState");
static_assert(offsetof(KytheraPawnComponent_GetEntityState, ReturnValue) == 0x000000, "Member 'KytheraPawnComponent_GetEntityState::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytheraPawnComponent.SetPerception
// 0x0001 (0x0001 - 0x0000)
struct KytheraPawnComponent_SetPerception final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytheraPawnComponent_SetPerception) == 0x000001, "Wrong alignment on KytheraPawnComponent_SetPerception");
static_assert(sizeof(KytheraPawnComponent_SetPerception) == 0x000001, "Wrong size on KytheraPawnComponent_SetPerception");
static_assert(offsetof(KytheraPawnComponent_SetPerception, bEnable) == 0x000000, "Member 'KytheraPawnComponent_SetPerception::bEnable' has a wrong offset!");

// Function KytheraPlugin.KytheraPawnComponent.SetProfile
// 0x0008 (0x0008 - 0x0000)
struct KytheraPawnComponent_SetProfile final
{
public:
	class UKytProfile*                            NewProfile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytheraPawnComponent_SetProfile) == 0x000008, "Wrong alignment on KytheraPawnComponent_SetProfile");
static_assert(sizeof(KytheraPawnComponent_SetProfile) == 0x000008, "Wrong size on KytheraPawnComponent_SetProfile");
static_assert(offsetof(KytheraPawnComponent_SetProfile, NewProfile) == 0x000000, "Member 'KytheraPawnComponent_SetProfile::NewProfile' has a wrong offset!");

// Function KytheraPlugin.KytNavBounds.GetAllAgentTypes
// 0x0060 (0x0060 - 0x0000)
struct KytNavBounds_GetAllAgentTypes final
{
public:
	class FString                                 OutGroupName;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UKytNavMeshAgentType*> OutAgentTypes;                                  // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytNavBounds_GetAllAgentTypes) == 0x000008, "Wrong alignment on KytNavBounds_GetAllAgentTypes");
static_assert(sizeof(KytNavBounds_GetAllAgentTypes) == 0x000060, "Wrong size on KytNavBounds_GetAllAgentTypes");
static_assert(offsetof(KytNavBounds_GetAllAgentTypes, OutGroupName) == 0x000000, "Member 'KytNavBounds_GetAllAgentTypes::OutGroupName' has a wrong offset!");
static_assert(offsetof(KytNavBounds_GetAllAgentTypes, OutAgentTypes) == 0x000010, "Member 'KytNavBounds_GetAllAgentTypes::OutAgentTypes' has a wrong offset!");

// Function KytheraPlugin.KytNavCostBrush.GetAllAgentTypes
// 0x0060 (0x0060 - 0x0000)
struct KytNavCostBrush_GetAllAgentTypes final
{
public:
	class FString                                 OutGroupName;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UKytNavMeshAgentType*> OutAgentTypes;                                  // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytNavCostBrush_GetAllAgentTypes) == 0x000008, "Wrong alignment on KytNavCostBrush_GetAllAgentTypes");
static_assert(sizeof(KytNavCostBrush_GetAllAgentTypes) == 0x000060, "Wrong size on KytNavCostBrush_GetAllAgentTypes");
static_assert(offsetof(KytNavCostBrush_GetAllAgentTypes, OutGroupName) == 0x000000, "Member 'KytNavCostBrush_GetAllAgentTypes::OutGroupName' has a wrong offset!");
static_assert(offsetof(KytNavCostBrush_GetAllAgentTypes, OutAgentTypes) == 0x000010, "Member 'KytNavCostBrush_GetAllAgentTypes::OutAgentTypes' has a wrong offset!");

// Function KytheraPlugin.KytNavCostStaticMesh.GetAllAgentTypes
// 0x0060 (0x0060 - 0x0000)
struct KytNavCostStaticMesh_GetAllAgentTypes final
{
public:
	class FString                                 OutGroupName;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UKytNavMeshAgentType*> OutAgentTypes;                                  // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytNavCostStaticMesh_GetAllAgentTypes) == 0x000008, "Wrong alignment on KytNavCostStaticMesh_GetAllAgentTypes");
static_assert(sizeof(KytNavCostStaticMesh_GetAllAgentTypes) == 0x000060, "Wrong size on KytNavCostStaticMesh_GetAllAgentTypes");
static_assert(offsetof(KytNavCostStaticMesh_GetAllAgentTypes, OutGroupName) == 0x000000, "Member 'KytNavCostStaticMesh_GetAllAgentTypes::OutGroupName' has a wrong offset!");
static_assert(offsetof(KytNavCostStaticMesh_GetAllAgentTypes, OutAgentTypes) == 0x000010, "Member 'KytNavCostStaticMesh_GetAllAgentTypes::OutAgentTypes' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.AddActorToExclusion
// 0x0008 (0x0008 - 0x0000)
struct Kyt3DPathFollowingComponent_AddActorToExclusion final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_AddActorToExclusion) == 0x000008, "Wrong alignment on Kyt3DPathFollowingComponent_AddActorToExclusion");
static_assert(sizeof(Kyt3DPathFollowingComponent_AddActorToExclusion) == 0x000008, "Wrong size on Kyt3DPathFollowingComponent_AddActorToExclusion");
static_assert(offsetof(Kyt3DPathFollowingComponent_AddActorToExclusion, Actor) == 0x000000, "Member 'Kyt3DPathFollowingComponent_AddActorToExclusion::Actor' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.GetNextCollisionTime
// 0x0004 (0x0004 - 0x0000)
struct Kyt3DPathFollowingComponent_GetNextCollisionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_GetNextCollisionTime) == 0x000004, "Wrong alignment on Kyt3DPathFollowingComponent_GetNextCollisionTime");
static_assert(sizeof(Kyt3DPathFollowingComponent_GetNextCollisionTime) == 0x000004, "Wrong size on Kyt3DPathFollowingComponent_GetNextCollisionTime");
static_assert(offsetof(Kyt3DPathFollowingComponent_GetNextCollisionTime, ReturnValue) == 0x000000, "Member 'Kyt3DPathFollowingComponent_GetNextCollisionTime::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.NextPointOfContact
// 0x000C (0x000C - 0x0000)
struct Kyt3DPathFollowingComponent_NextPointOfContact final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_NextPointOfContact) == 0x000004, "Wrong alignment on Kyt3DPathFollowingComponent_NextPointOfContact");
static_assert(sizeof(Kyt3DPathFollowingComponent_NextPointOfContact) == 0x00000C, "Wrong size on Kyt3DPathFollowingComponent_NextPointOfContact");
static_assert(offsetof(Kyt3DPathFollowingComponent_NextPointOfContact, ReturnValue) == 0x000000, "Member 'Kyt3DPathFollowingComponent_NextPointOfContact::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.RemoveActorFromExclusion
// 0x0008 (0x0008 - 0x0000)
struct Kyt3DPathFollowingComponent_RemoveActorFromExclusion final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_RemoveActorFromExclusion) == 0x000008, "Wrong alignment on Kyt3DPathFollowingComponent_RemoveActorFromExclusion");
static_assert(sizeof(Kyt3DPathFollowingComponent_RemoveActorFromExclusion) == 0x000008, "Wrong size on Kyt3DPathFollowingComponent_RemoveActorFromExclusion");
static_assert(offsetof(Kyt3DPathFollowingComponent_RemoveActorFromExclusion, Actor) == 0x000000, "Member 'Kyt3DPathFollowingComponent_RemoveActorFromExclusion::Actor' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.SetParams
// 0x001C (0x001C - 0x0000)
struct Kyt3DPathFollowingComponent_SetParams final
{
public:
	struct FKyt3DSteeringParams                   SteeringParams;                                    // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_SetParams) == 0x000004, "Wrong alignment on Kyt3DPathFollowingComponent_SetParams");
static_assert(sizeof(Kyt3DPathFollowingComponent_SetParams) == 0x00001C, "Wrong size on Kyt3DPathFollowingComponent_SetParams");
static_assert(offsetof(Kyt3DPathFollowingComponent_SetParams, SteeringParams) == 0x000000, "Member 'Kyt3DPathFollowingComponent_SetParams::SteeringParams' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.CopyParams
// 0x001C (0x001C - 0x0000)
struct Kyt3DPathFollowingComponent_CopyParams final
{
public:
	struct FKyt3DSteeringParams                   ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_CopyParams) == 0x000004, "Wrong alignment on Kyt3DPathFollowingComponent_CopyParams");
static_assert(sizeof(Kyt3DPathFollowingComponent_CopyParams) == 0x00001C, "Wrong size on Kyt3DPathFollowingComponent_CopyParams");
static_assert(offsetof(Kyt3DPathFollowingComponent_CopyParams, ReturnValue) == 0x000000, "Member 'Kyt3DPathFollowingComponent_CopyParams::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.Kyt3DPathFollowingComponent.RelativeSpeedFromAbsolute
// 0x0008 (0x0008 - 0x0000)
struct Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute final
{
public:
	float                                         AbsoluteSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute) == 0x000004, "Wrong alignment on Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute");
static_assert(sizeof(Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute) == 0x000008, "Wrong size on Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute");
static_assert(offsetof(Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute, AbsoluteSpeed) == 0x000000, "Member 'Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute::AbsoluteSpeed' has a wrong offset!");
static_assert(offsetof(Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute, ReturnValue) == 0x000004, "Member 'Kyt3DPathFollowingComponent_RelativeSpeedFromAbsolute::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytPathFollowingComponent.AnimationEnded
// 0x0001 (0x0001 - 0x0000)
struct KytPathFollowingComponent_AnimationEnded final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytPathFollowingComponent_AnimationEnded) == 0x000001, "Wrong alignment on KytPathFollowingComponent_AnimationEnded");
static_assert(sizeof(KytPathFollowingComponent_AnimationEnded) == 0x000001, "Wrong size on KytPathFollowingComponent_AnimationEnded");
static_assert(offsetof(KytPathFollowingComponent_AnimationEnded, Succeeded) == 0x000000, "Member 'KytPathFollowingComponent_AnimationEnded::Succeeded' has a wrong offset!");

// Function KytheraPlugin.KytPathFollowingComponent.MoveToActor
// 0x0018 (0x0018 - 0x0000)
struct KytPathFollowingComponent_MoveToActor final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytPathFollowingComponent_MoveToActor) == 0x000008, "Wrong alignment on KytPathFollowingComponent_MoveToActor");
static_assert(sizeof(KytPathFollowingComponent_MoveToActor) == 0x000018, "Wrong size on KytPathFollowingComponent_MoveToActor");
static_assert(offsetof(KytPathFollowingComponent_MoveToActor, Goal) == 0x000000, "Member 'KytPathFollowingComponent_MoveToActor::Goal' has a wrong offset!");
static_assert(offsetof(KytPathFollowingComponent_MoveToActor, EndDistance) == 0x000008, "Member 'KytPathFollowingComponent_MoveToActor::EndDistance' has a wrong offset!");
static_assert(offsetof(KytPathFollowingComponent_MoveToActor, bStopOnOverlap) == 0x00000C, "Member 'KytPathFollowingComponent_MoveToActor::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(KytPathFollowingComponent_MoveToActor, Speed) == 0x000010, "Member 'KytPathFollowingComponent_MoveToActor::Speed' has a wrong offset!");

// Function KytheraPlugin.KytPathFollowingComponent.MoveToLocation
// 0x0018 (0x0018 - 0x0000)
struct KytPathFollowingComponent_MoveToLocation final
{
public:
	struct FVector                                Dest;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytPathFollowingComponent_MoveToLocation) == 0x000004, "Wrong alignment on KytPathFollowingComponent_MoveToLocation");
static_assert(sizeof(KytPathFollowingComponent_MoveToLocation) == 0x000018, "Wrong size on KytPathFollowingComponent_MoveToLocation");
static_assert(offsetof(KytPathFollowingComponent_MoveToLocation, Dest) == 0x000000, "Member 'KytPathFollowingComponent_MoveToLocation::Dest' has a wrong offset!");
static_assert(offsetof(KytPathFollowingComponent_MoveToLocation, EndDistance) == 0x00000C, "Member 'KytPathFollowingComponent_MoveToLocation::EndDistance' has a wrong offset!");
static_assert(offsetof(KytPathFollowingComponent_MoveToLocation, bStopOnOverlap) == 0x000010, "Member 'KytPathFollowingComponent_MoveToLocation::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(KytPathFollowingComponent_MoveToLocation, Speed) == 0x000014, "Member 'KytPathFollowingComponent_MoveToLocation::Speed' has a wrong offset!");

// Function KytheraPlugin.KytPathFollowingComponent.MulticastAnimRequest
// 0x0058 (0x0058 - 0x0000)
struct KytPathFollowingComponent_MulticastAnimRequest final
{
public:
	struct FKytAnimRequest                        AnimRequest;                                       // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytPathFollowingComponent_MulticastAnimRequest) == 0x000008, "Wrong alignment on KytPathFollowingComponent_MulticastAnimRequest");
static_assert(sizeof(KytPathFollowingComponent_MulticastAnimRequest) == 0x000058, "Wrong size on KytPathFollowingComponent_MulticastAnimRequest");
static_assert(offsetof(KytPathFollowingComponent_MulticastAnimRequest, AnimRequest) == 0x000000, "Member 'KytPathFollowingComponent_MulticastAnimRequest::AnimRequest' has a wrong offset!");

// Function KytheraPlugin.KytPathFollowingComponent.SendCMCSignal
// 0x0010 (0x0010 - 0x0000)
struct KytPathFollowingComponent_SendCMCSignal final
{
public:
	class FString                                 SignalName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytPathFollowingComponent_SendCMCSignal) == 0x000008, "Wrong alignment on KytPathFollowingComponent_SendCMCSignal");
static_assert(sizeof(KytPathFollowingComponent_SendCMCSignal) == 0x000010, "Wrong size on KytPathFollowingComponent_SendCMCSignal");
static_assert(offsetof(KytPathFollowingComponent_SendCMCSignal, SignalName) == 0x000000, "Member 'KytPathFollowingComponent_SendCMCSignal::SignalName' has a wrong offset!");

// Function KytheraPlugin.KytPathFollowingComponent.UpdateComponent
// 0x0004 (0x0004 - 0x0000)
struct KytPathFollowingComponent_UpdateComponent final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytPathFollowingComponent_UpdateComponent) == 0x000004, "Wrong alignment on KytPathFollowingComponent_UpdateComponent");
static_assert(sizeof(KytPathFollowingComponent_UpdateComponent) == 0x000004, "Wrong size on KytPathFollowingComponent_UpdateComponent");
static_assert(offsetof(KytPathFollowingComponent_UpdateComponent, DeltaTime) == 0x000000, "Member 'KytPathFollowingComponent_UpdateComponent::DeltaTime' has a wrong offset!");

// Function KytheraPlugin.KytSignal.CreateKytEntitySignal
// 0x0020 (0x0020 - 0x0000)
struct KytSignal_CreateKytEntitySignal final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Entity;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKytSignal*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytSignal_CreateKytEntitySignal) == 0x000008, "Wrong alignment on KytSignal_CreateKytEntitySignal");
static_assert(sizeof(KytSignal_CreateKytEntitySignal) == 0x000020, "Wrong size on KytSignal_CreateKytEntitySignal");
static_assert(offsetof(KytSignal_CreateKytEntitySignal, Name_0) == 0x000000, "Member 'KytSignal_CreateKytEntitySignal::Name_0' has a wrong offset!");
static_assert(offsetof(KytSignal_CreateKytEntitySignal, Entity) == 0x000010, "Member 'KytSignal_CreateKytEntitySignal::Entity' has a wrong offset!");
static_assert(offsetof(KytSignal_CreateKytEntitySignal, ReturnValue) == 0x000018, "Member 'KytSignal_CreateKytEntitySignal::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytSignal.CreateKytSignal
// 0x0020 (0x0020 - 0x0000)
struct KytSignal_CreateKytSignal final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKytSignalDispatchModeEnum                    DispatchMode;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKytSignal*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytSignal_CreateKytSignal) == 0x000008, "Wrong alignment on KytSignal_CreateKytSignal");
static_assert(sizeof(KytSignal_CreateKytSignal) == 0x000020, "Wrong size on KytSignal_CreateKytSignal");
static_assert(offsetof(KytSignal_CreateKytSignal, Name_0) == 0x000000, "Member 'KytSignal_CreateKytSignal::Name_0' has a wrong offset!");
static_assert(offsetof(KytSignal_CreateKytSignal, DispatchMode) == 0x000010, "Member 'KytSignal_CreateKytSignal::DispatchMode' has a wrong offset!");
static_assert(offsetof(KytSignal_CreateKytSignal, ReturnValue) == 0x000018, "Member 'KytSignal_CreateKytSignal::ReturnValue' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsBool
// 0x0018 (0x0018 - 0x0000)
struct KytSignal_SetSignalValueAsBool final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytSignal_SetSignalValueAsBool) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsBool");
static_assert(sizeof(KytSignal_SetSignalValueAsBool) == 0x000018, "Wrong size on KytSignal_SetSignalValueAsBool");
static_assert(offsetof(KytSignal_SetSignalValueAsBool, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsBool::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsBool, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsBool::Value' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsEntityId
// 0x0018 (0x0018 - 0x0000)
struct KytSignal_SetSignalValueAsEntityId final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Entity;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytSignal_SetSignalValueAsEntityId) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsEntityId");
static_assert(sizeof(KytSignal_SetSignalValueAsEntityId) == 0x000018, "Wrong size on KytSignal_SetSignalValueAsEntityId");
static_assert(offsetof(KytSignal_SetSignalValueAsEntityId, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsEntityId::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsEntityId, Entity) == 0x000010, "Member 'KytSignal_SetSignalValueAsEntityId::Entity' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct KytSignal_SetSignalValueAsFloat final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytSignal_SetSignalValueAsFloat) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsFloat");
static_assert(sizeof(KytSignal_SetSignalValueAsFloat) == 0x000018, "Wrong size on KytSignal_SetSignalValueAsFloat");
static_assert(offsetof(KytSignal_SetSignalValueAsFloat, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsFloat, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsFloat::Value' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct KytSignal_SetSignalValueAsInt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytSignal_SetSignalValueAsInt) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsInt");
static_assert(sizeof(KytSignal_SetSignalValueAsInt) == 0x000018, "Wrong size on KytSignal_SetSignalValueAsInt");
static_assert(offsetof(KytSignal_SetSignalValueAsInt, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsInt, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsInt::Value' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsPosition
// 0x0020 (0x0020 - 0x0000)
struct KytSignal_SetSignalValueAsPosition final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytSignal_SetSignalValueAsPosition) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsPosition");
static_assert(sizeof(KytSignal_SetSignalValueAsPosition) == 0x000020, "Wrong size on KytSignal_SetSignalValueAsPosition");
static_assert(offsetof(KytSignal_SetSignalValueAsPosition, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsPosition::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsPosition, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsPosition::Value' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsString
// 0x0020 (0x0020 - 0x0000)
struct KytSignal_SetSignalValueAsString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytSignal_SetSignalValueAsString) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsString");
static_assert(sizeof(KytSignal_SetSignalValueAsString) == 0x000020, "Wrong size on KytSignal_SetSignalValueAsString");
static_assert(offsetof(KytSignal_SetSignalValueAsString, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsString::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsString, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsString::Value' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsStringHash
// 0x0020 (0x0020 - 0x0000)
struct KytSignal_SetSignalValueAsStringHash final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KytSignal_SetSignalValueAsStringHash) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsStringHash");
static_assert(sizeof(KytSignal_SetSignalValueAsStringHash) == 0x000020, "Wrong size on KytSignal_SetSignalValueAsStringHash");
static_assert(offsetof(KytSignal_SetSignalValueAsStringHash, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsStringHash::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsStringHash, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsStringHash::Value' has a wrong offset!");

// Function KytheraPlugin.KytSignal.SetSignalValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct KytSignal_SetSignalValueAsVector final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KytSignal_SetSignalValueAsVector) == 0x000008, "Wrong alignment on KytSignal_SetSignalValueAsVector");
static_assert(sizeof(KytSignal_SetSignalValueAsVector) == 0x000020, "Wrong size on KytSignal_SetSignalValueAsVector");
static_assert(offsetof(KytSignal_SetSignalValueAsVector, Key) == 0x000000, "Member 'KytSignal_SetSignalValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(KytSignal_SetSignalValueAsVector, Value) == 0x000010, "Member 'KytSignal_SetSignalValueAsVector::Value' has a wrong offset!");

}

