#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModKit

#include "Basic.hpp"

#include "ModKit_classes.hpp"
#include "ModKit_parameters.hpp"


namespace SDK
{

// Function ModKit.ModKitBlueprintLibrary.AddUInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   First                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   Second                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::AddUInt64(const struct FUInt64& First, const struct FUInt64& Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "AddUInt64");

	Params::ModKitBlueprintLibrary_AddUInt64 Parms{};

	Parms.First = std::move(First);
	Parms.Second = std::move(Second);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.GetAppID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UModKitBlueprintLibrary::GetAppID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "GetAppID");

	Params::ModKitBlueprintLibrary_GetAppID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.GetDefaultStagedModPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::GetDefaultStagedModPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "GetDefaultStagedModPath");

	Params::ModKitBlueprintLibrary_GetDefaultStagedModPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.GetEditorModPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::GetEditorModPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "GetEditorModPath");

	Params::ModKitBlueprintLibrary_GetEditorModPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.GetFolderSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::GetFolderSize(const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "GetFolderSize");

	Params::ModKitBlueprintLibrary_GetFolderSize Parms{};

	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.GetStagedModPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::GetStagedModPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "GetStagedModPath");

	Params::ModKitBlueprintLibrary_GetStagedModPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.GetSubscribedMods
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FUInt64>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUInt64> UModKitBlueprintLibrary::GetSubscribedMods()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "GetSubscribedMods");

	Params::ModKitBlueprintLibrary_GetSubscribedMods Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsFileSizeBelowWorkshopPreviewFileLimit
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsFileSizeBelowWorkshopPreviewFileLimit(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsFileSizeBelowWorkshopPreviewFileLimit");

	Params::ModKitBlueprintLibrary_IsFileSizeBelowWorkshopPreviewFileLimit Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsModFullyInstalled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsModFullyInstalled(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsModFullyInstalled");

	Params::ModKitBlueprintLibrary_IsModFullyInstalled Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsModIDForGame
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsModIDForGame(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsModIDForGame");

	Params::ModKitBlueprintLibrary_IsModIDForGame Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsModIDForMod
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsModIDForMod(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsModIDForMod");

	Params::ModKitBlueprintLibrary_IsModIDForMod Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsModIDForModOrStaging
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsModIDForModOrStaging(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsModIDForModOrStaging");

	Params::ModKitBlueprintLibrary_IsModIDForModOrStaging Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsModIDForStaging
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsModIDForStaging(const struct FUInt64& ModID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsModIDForStaging");

	Params::ModKitBlueprintLibrary_IsModIDForStaging Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsModKitEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsModKitEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsModKitEditor");

	Params::ModKitBlueprintLibrary_IsModKitEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsSteamAPIAvailable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsSteamAPIAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsSteamAPIAvailable");

	Params::ModKitBlueprintLibrary_IsSteamAPIAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.IsUInt64ValidID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   Value                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::IsUInt64ValidID(const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "IsUInt64ValidID");

	Params::ModKitBlueprintLibrary_IsUInt64ValidID Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.MakeModIDForGame
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::MakeModIDForGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "MakeModIDForGame");

	Params::ModKitBlueprintLibrary_MakeModIDForGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.MakeModIDForStaging
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::MakeModIDForStaging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "MakeModIDForStaging");

	Params::ModKitBlueprintLibrary_MakeModIDForStaging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.MakeModIDFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    ModIDString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::MakeModIDFromString(const class FString& ModIDString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "MakeModIDFromString");

	Params::ModKitBlueprintLibrary_MakeModIDFromString Parms{};

	Parms.ModIDString = std::move(ModIDString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.MakeZeroUInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::MakeZeroUInt64()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "MakeZeroUInt64");

	Params::ModKitBlueprintLibrary_MakeZeroUInt64 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.ModIDByType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModIDBranchPaths*                      BranchPath                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitBlueprintLibrary::ModIDByType(const struct FUInt64& ModID, EModIDBranchPaths* BranchPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "ModIDByType");

	Params::ModKitBlueprintLibrary_ModIDByType Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BranchPath != nullptr)
		*BranchPath = Parms.BranchPath;
}


// Function ModKit.ModKitBlueprintLibrary.ModIDByTypeSimple
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EModPathBranchPaths*                    BranchPath                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitBlueprintLibrary::ModIDByTypeSimple(const struct FUInt64& ModID, EModPathBranchPaths* BranchPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "ModIDByTypeSimple");

	Params::ModKitBlueprintLibrary_ModIDByTypeSimple Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BranchPath != nullptr)
		*BranchPath = Parms.BranchPath;
}


// Function ModKit.ModKitBlueprintLibrary.ModMetadataWorkshopIDToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FModMetadata&              ModMetadata                                            (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::ModMetadataWorkshopIDToString(const struct FModMetadata& ModMetadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "ModMetadataWorkshopIDToString");

	Params::ModKitBlueprintLibrary_ModMetadataWorkshopIDToString Parms{};

	Parms.ModMetadata = std::move(ModMetadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.ModMetadataWorkshopIDToUInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FModMetadata&              ModMetadata                                            (Parm, NativeAccessSpecifierPublic)
// struct FUInt64                          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUInt64 UModKitBlueprintLibrary::ModMetadataWorkshopIDToUInt64(const struct FModMetadata& ModMetadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "ModMetadataWorkshopIDToUInt64");

	Params::ModKitBlueprintLibrary_ModMetadataWorkshopIDToUInt64 Parms{};

	Parms.ModMetadata = std::move(ModMetadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.SetStagedModFolderPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitBlueprintLibrary::SetStagedModFolderPath(const class FString& NewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "SetStagedModFolderPath");

	Params::ModKitBlueprintLibrary_SetStagedModFolderPath Parms{};

	Parms.NewPath = std::move(NewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64Equals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::UInt64Equals(const struct FUInt64& A, const struct FUInt64& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64Equals");

	Params::ModKitBlueprintLibrary_UInt64Equals Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64NotEquals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitBlueprintLibrary::UInt64NotEquals(const struct FUInt64& A, const struct FUInt64& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64NotEquals");

	Params::ModKitBlueprintLibrary_UInt64NotEquals Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64ToFileSizeString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::UInt64ToFileSizeString(const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64ToFileSizeString");

	Params::ModKitBlueprintLibrary_UInt64ToFileSizeString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64ToFileSizeStringInGb
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::UInt64ToFileSizeStringInGb(const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64ToFileSizeStringInGb");

	Params::ModKitBlueprintLibrary_UInt64ToFileSizeStringInGb Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64ToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModKitBlueprintLibrary::UInt64ToFloat(const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64ToFloat");

	Params::ModKitBlueprintLibrary_UInt64ToFloat Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64ToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   Value                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitBlueprintLibrary::UInt64ToString(const struct FUInt64& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64ToString");

	Params::ModKitBlueprintLibrary_UInt64ToString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitBlueprintLibrary.UInt64ToText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   Value                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysSign                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseGrouping                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinimumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaximumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UModKitBlueprintLibrary::UInt64ToText(const struct FUInt64& Value, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitBlueprintLibrary", "UInt64ToText");

	Params::ModKitBlueprintLibrary_UInt64ToText Parms{};

	Parms.Value = std::move(Value);
	Parms.bAlwaysSign = bAlwaysSign;
	Parms.bUseGrouping = bUseGrouping;
	Parms.MinimumIntegralDigits = MinimumIntegralDigits;
	Parms.MaximumIntegralDigits = MaximumIntegralDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitCreateWorkshopItem.CreateWorkshopItem
// (Final, Native, Public, BlueprintCallable)

void UModKitCreateWorkshopItem::CreateWorkshopItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitCreateWorkshopItem", "CreateWorkshopItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitRuntimeModLibrary.DeleteWorkshopItemFromWorkshop
// (Final, Native, Static, Public)
// Parameters:
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitRuntimeModLibrary::DeleteWorkshopItemFromWorkshop(const struct FUInt64& WorkshopID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitRuntimeModLibrary", "DeleteWorkshopItemFromWorkshop");

	Params::ModKitRuntimeModLibrary_DeleteWorkshopItemFromWorkshop Parms{};

	Parms.WorkshopID = std::move(WorkshopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitRuntimeModLibrary.ShowWorkshopEULA
// (Final, Native, Static, Public)

void UModKitRuntimeModLibrary::ShowWorkshopEULA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitRuntimeModLibrary", "ShowWorkshopEULA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSettings.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UModKitSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UModKitSettings* UModKitSettings::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ModKitSettings", "Get");

	Params::ModKitSettings_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSettings.SetDisabledMods
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUInt64>&           InDisabledModList                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UModKitSettings::SetDisabledMods(const TArray<struct FUInt64>& InDisabledModList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "SetDisabledMods");

	Params::ModKitSettings_SetDisabledMods Parms{};

	Parms.InDisabledModList = std::move(InDisabledModList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSettings.SetModIsDisabled
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bDisabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitSettings::SetModIsDisabled(const struct FUInt64& ModID, const bool bDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "SetModIsDisabled");

	Params::ModKitSettings_SetModIsDisabled Parms{};

	Parms.ModID = std::move(ModID);
	Parms.bDisabled = bDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSettings.SetStagedModFolderPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitSettings::SetStagedModFolderPath(const class FString& NewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "SetStagedModFolderPath");

	Params::ModKitSettings_SetStagedModFolderPath Parms{};

	Parms.NewPath = std::move(NewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSettings.GetDisabledMods
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FUInt64>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUInt64> UModKitSettings::GetDisabledMods() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "GetDisabledMods");

	Params::ModKitSettings_GetDisabledMods Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSettings.GetEnableAutodownloadedModsLocally
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSettings::GetEnableAutodownloadedModsLocally() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "GetEnableAutodownloadedModsLocally");

	Params::ModKitSettings_GetEnableAutodownloadedModsLocally Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSettings.GetModIsDisabled
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   ModID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSettings::GetModIsDisabled(const struct FUInt64& ModID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "GetModIsDisabled");

	Params::ModKitSettings_GetModIsDisabled Parms{};

	Parms.ModID = std::move(ModID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSettings.GetStagedModFolderPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModKitSettings::GetStagedModFolderPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSettings", "GetStagedModFolderPath");

	Params::ModKitSettings_GetStagedModFolderPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.FindAndMountMods
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEditorModsOnly                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitSubsystem::FindAndMountMods(const bool bEditorModsOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "FindAndMountMods");

	Params::ModKitSubsystem_FindAndMountMods Parms{};

	Parms.bEditorModsOnly = bEditorModsOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSubsystem.GetAllAssetsInPackage
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAssetData>*              Assets                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetAllAssetsInPackage(const struct FUInt64& WorkshopID, TArray<struct FAssetData>* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetAllAssetsInPackage");

	Params::ModKitSubsystem_GetAllAssetsInPackage Parms{};

	Parms.WorkshopID = std::move(WorkshopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Assets != nullptr)
		*Assets = std::move(Parms.Assets);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.MountMod
// (Final, Native, Public)
// Parameters:
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bEditorModsOnly                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitSubsystem::MountMod(const struct FUInt64& WorkshopID, const bool bEditorModsOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "MountMod");

	Params::ModKitSubsystem_MountMod Parms{};

	Parms.WorkshopID = std::move(WorkshopID);
	Parms.bEditorModsOnly = bEditorModsOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSubsystem.UnmountMod
// (Final, Native, Public)
// Parameters:
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModKitSubsystem::UnmountMod(const struct FUInt64& WorkshopID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "UnmountMod");

	Params::ModKitSubsystem_UnmountMod Parms{};

	Parms.WorkshopID = std::move(WorkshopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModKit.ModKitSubsystem.GetDirectoryFromWorkshopID
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// class FString*                          DirectoryPath                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForNonAssetFiles                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetDirectoryFromWorkshopID(class FString* DirectoryPath, const struct FUInt64& WorkshopID, const bool bForNonAssetFiles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetDirectoryFromWorkshopID");

	Params::ModKitSubsystem_GetDirectoryFromWorkshopID Parms{};

	Parms.WorkshopID = std::move(WorkshopID);
	Parms.bForNonAssetFiles = bForNonAssetFiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DirectoryPath != nullptr)
		*DirectoryPath = std::move(Parms.DirectoryPath);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.GetMetadataFromWorkshopID
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// struct FModMetadata*                    MetaData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// const struct FUInt64&                   WorkshopID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetMetadataFromWorkshopID(struct FModMetadata* MetaData, const struct FUInt64& WorkshopID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetMetadataFromWorkshopID");

	Params::ModKitSubsystem_GetMetadataFromWorkshopID Parms{};

	Parms.WorkshopID = std::move(WorkshopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MetaData != nullptr)
		*MetaData = std::move(Parms.MetaData);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.GetModAssetWorkshopID
// (Final, Native, Public, HasOutParams, HasDefaults, Const)
// Parameters:
// const struct FAssetData&                AssetData                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64*                         WorkshopID                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetModAssetWorkshopID(const struct FAssetData& AssetData, struct FUInt64* WorkshopID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetModAssetWorkshopID");

	Params::ModKitSubsystem_GetModAssetWorkshopID Parms{};

	Parms.AssetData = std::move(AssetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorkshopID != nullptr)
		*WorkshopID = std::move(Parms.WorkshopID);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.GetModAssetWorkshopIDFromPrimaryAssetId
// (Final, Native, Public, HasOutParams, HasDefaults, Const)
// Parameters:
// const struct FPrimaryAssetId&           PrimaryAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUInt64*                         WorkshopID                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetModAssetWorkshopIDFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId, struct FUInt64* WorkshopID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetModAssetWorkshopIDFromPrimaryAssetId");

	Params::ModKitSubsystem_GetModAssetWorkshopIDFromPrimaryAssetId Parms{};

	Parms.PrimaryAssetId = std::move(PrimaryAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorkshopID != nullptr)
		*WorkshopID = std::move(Parms.WorkshopID);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.GetPakFilenameForMod
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   WorkshopID                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetPakFilenameForMod(const struct FUInt64& WorkshopID, class FString* Filename) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetPakFilenameForMod");

	Params::ModKitSubsystem_GetPakFilenameForMod Parms{};

	Parms.WorkshopID = std::move(WorkshopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.GetWorkshopIDFromPluginName
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// struct FUInt64*                         WorkshopID                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PluginName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::GetWorkshopIDFromPluginName(struct FUInt64* WorkshopID, const class FString& PluginName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "GetWorkshopIDFromPluginName");

	Params::ModKitSubsystem_GetWorkshopIDFromPluginName Parms{};

	Parms.PluginName = std::move(PluginName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorkshopID != nullptr)
		*WorkshopID = std::move(Parms.WorkshopID);

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.IsModMountable
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   WorkshopItemID                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::IsModMountable(const struct FUInt64& WorkshopItemID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "IsModMountable");

	Params::ModKitSubsystem_IsModMountable Parms{};

	Parms.WorkshopItemID = std::move(WorkshopItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitSubsystem.IsModMounted
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUInt64&                   WorkshopItemID                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModKitSubsystem::IsModMounted(const struct FUInt64& WorkshopItemID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitSubsystem", "IsModMounted");

	Params::ModKitSubsystem_IsModMounted Parms{};

	Parms.WorkshopItemID = std::move(WorkshopItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ModKit.ModKitUploadWorkshopItem.UploadWorkshopItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FRuntimeModWorkshopInfo&   RuntimeModWorkshopInfo                                 (Parm, NativeAccessSpecifierPublic)

void UModKitUploadWorkshopItem::UploadWorkshopItem(const struct FRuntimeModWorkshopInfo& RuntimeModWorkshopInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModKitUploadWorkshopItem", "UploadWorkshopItem");

	Params::ModKitUploadWorkshopItem_UploadWorkshopItem Parms{};

	Parms.RuntimeModWorkshopInfo = std::move(RuntimeModWorkshopInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

