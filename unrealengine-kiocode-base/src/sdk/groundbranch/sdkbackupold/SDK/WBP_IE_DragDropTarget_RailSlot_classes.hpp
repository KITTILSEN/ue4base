#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_IE_DragDropTarget_RailSlot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GroundBranch_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_IE_DragDropTarget_RailSlot.WBP_IE_DragDropTarget_RailSlot_C
// 0x06C0 (0x0920 - 0x0260)
class UWBP_IE_DragDropTarget_RailSlot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Throb;                                             // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_Dot;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Interdiction;                                // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USceneComponent*                        Component;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VisualOffset;                                      // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BlockedColour;                                     // 0x0294(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x02A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RecoilSlot;                                        // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisualScale;                                       // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlocked;                                          // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGBInvItem*>                     IgnoreActors;                                      // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	ERailMountValidation                          ValidMountPoints;                                  // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       CameraView;                                        // 0x02E0(0x05F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DistanceFromCamera;                                // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CanvasPoint;                                       // 0x08D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ClosestColour;                                     // 0x08DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FurthestColour;                                    // 0x08EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ClosestSize;                                       // 0x08FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FurthestScale;                                     // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LineEndPoint;                                      // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceLocation;                                    // 0x0910(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_IE_DragDropTarget_RailSlot(int32 EntryPoint);
	void Construct();
	void position();
	void Init(class USceneComponent* SceneComp, class FName SocketName_0, int32 RecoilSlot_0, const struct FVector& VisualOffset_0, float VisualScale_0, const TArray<class AGBInvItem*>& IgnoreAcotrs);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void UpdateAll();
	ESlateVisibility GetDotVis();
	ESlateVisibility GetInterdictionVis();
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);

	void OnPaint(struct FPaintContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_IE_DragDropTarget_RailSlot_C">();
	}
	static class UWBP_IE_DragDropTarget_RailSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_IE_DragDropTarget_RailSlot_C>();
	}
};
static_assert(alignof(UWBP_IE_DragDropTarget_RailSlot_C) == 0x000010, "Wrong alignment on UWBP_IE_DragDropTarget_RailSlot_C");
static_assert(sizeof(UWBP_IE_DragDropTarget_RailSlot_C) == 0x000920, "Wrong size on UWBP_IE_DragDropTarget_RailSlot_C");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, UberGraphFrame) == 0x000260, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, Throb) == 0x000268, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::Throb' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, Image_Dot) == 0x000270, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::Image_Dot' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, Image_Interdiction) == 0x000278, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::Image_Interdiction' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, Component) == 0x000280, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::Component' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, VisualOffset) == 0x000288, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::VisualOffset' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, BlockedColour) == 0x000294, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::BlockedColour' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, SocketName) == 0x0002A4, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::SocketName' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, RecoilSlot) == 0x0002AC, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::RecoilSlot' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, VisualScale) == 0x0002B0, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::VisualScale' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, bBlocked) == 0x0002B4, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::bBlocked' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, WorldLocation) == 0x0002B8, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, IgnoreActors) == 0x0002C8, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::IgnoreActors' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, ValidMountPoints) == 0x0002D8, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::ValidMountPoints' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, CameraView) == 0x0002E0, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::CameraView' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, DistanceFromCamera) == 0x0008D0, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::DistanceFromCamera' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, CanvasPoint) == 0x0008D4, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::CanvasPoint' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, ClosestColour) == 0x0008DC, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::ClosestColour' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, FurthestColour) == 0x0008EC, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::FurthestColour' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, ClosestSize) == 0x0008FC, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::ClosestSize' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, FurthestScale) == 0x000904, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::FurthestScale' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, LineEndPoint) == 0x000908, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::LineEndPoint' has a wrong offset!");
static_assert(offsetof(UWBP_IE_DragDropTarget_RailSlot_C, SourceLocation) == 0x000910, "Member 'UWBP_IE_DragDropTarget_RailSlot_C::SourceLocation' has a wrong offset!");

}

