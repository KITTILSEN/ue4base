#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Detonator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Detonator.BP_Detonator_C
// 0x0020 (0x0468 - 0x0448)
class ABP_Detonator_C final : public AGBInvItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SK_BreachingCharge_Detonator;                      // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_Detonator_C* Detonator)> OnDetonatorUse;                 // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_Detonator(int32 EntryPoint);
	void DetonateBoundCharges();
	bool DecodeKit(class UVaRestJsonObject* ItemAsJson, class AActor* DecodedOwner, class AGBInvItem* DecodedParentItem, const class FName& ProfileName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Detonator_C">();
	}
	static class ABP_Detonator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Detonator_C>();
	}
};
static_assert(alignof(ABP_Detonator_C) == 0x000008, "Wrong alignment on ABP_Detonator_C");
static_assert(sizeof(ABP_Detonator_C) == 0x000468, "Wrong size on ABP_Detonator_C");
static_assert(offsetof(ABP_Detonator_C, UberGraphFrame) == 0x000448, "Member 'ABP_Detonator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Detonator_C, SK_BreachingCharge_Detonator) == 0x000450, "Member 'ABP_Detonator_C::SK_BreachingCharge_Detonator' has a wrong offset!");
static_assert(offsetof(ABP_Detonator_C, OnDetonatorUse) == 0x000458, "Member 'ABP_Detonator_C::OnDetonatorUse' has a wrong offset!");

}

