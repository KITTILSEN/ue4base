#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonLoadingSettings

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "CommonLoadingSettings_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class CommonLoadingSettings.CommonLoadingScreenSettings
// 0x00D8 (0x0110 - 0x0038)
class UCommonLoadingScreenSettings final : public UDeveloperSettings
{
public:
	struct FSoftClassPath                         LoadingScreenWidget;                               // 0x0038(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoadingScreenZOrder;                               // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplashScreenType                             SplashScreenType;                                  // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableSplashLoadingScreen;                       // 0x0055(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTickLoadingScreenEvenInEditor;               // 0x0056(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowLoadingScreenAdditionalSecs;                   // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowSplashScreenAdditionalSecs;                    // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingScreenHeartbeatHangDuration;                // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogLoadingScreenHeartbeatInterval;                 // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BlockedMapNames;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SplashScreenImage;                                 // 0x0078(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStretch                                      SplashScreenStretch;                               // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStretchDirection                             SplashScreenStretchDirection;                      // 0x0091(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SplashScreenLoadingText;                           // 0x0098(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         SplashScreenLoadingFont;                           // 0x00B0(0x0058)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogLoadingScreenReasonEveryFrame;                 // 0x0108(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceLoadingScreenVisible;                        // 0x0109(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLoadingScreenAdditionalSecsEvenInEditor;      // 0x010A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLoadingScreenSettings">();
	}
	static class UCommonLoadingScreenSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLoadingScreenSettings>();
	}
};
static_assert(alignof(UCommonLoadingScreenSettings) == 0x000008, "Wrong alignment on UCommonLoadingScreenSettings");
static_assert(sizeof(UCommonLoadingScreenSettings) == 0x000110, "Wrong size on UCommonLoadingScreenSettings");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenWidget) == 0x000038, "Member 'UCommonLoadingScreenSettings::LoadingScreenWidget' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenZOrder) == 0x000050, "Member 'UCommonLoadingScreenSettings::LoadingScreenZOrder' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, SplashScreenType) == 0x000054, "Member 'UCommonLoadingScreenSettings::SplashScreenType' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, bDisableSplashLoadingScreen) == 0x000055, "Member 'UCommonLoadingScreenSettings::bDisableSplashLoadingScreen' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, bForceTickLoadingScreenEvenInEditor) == 0x000056, "Member 'UCommonLoadingScreenSettings::bForceTickLoadingScreenEvenInEditor' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, ShowLoadingScreenAdditionalSecs) == 0x000058, "Member 'UCommonLoadingScreenSettings::ShowLoadingScreenAdditionalSecs' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, ShowSplashScreenAdditionalSecs) == 0x00005C, "Member 'UCommonLoadingScreenSettings::ShowSplashScreenAdditionalSecs' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenHeartbeatHangDuration) == 0x000060, "Member 'UCommonLoadingScreenSettings::LoadingScreenHeartbeatHangDuration' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LogLoadingScreenHeartbeatInterval) == 0x000064, "Member 'UCommonLoadingScreenSettings::LogLoadingScreenHeartbeatInterval' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, BlockedMapNames) == 0x000068, "Member 'UCommonLoadingScreenSettings::BlockedMapNames' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, SplashScreenImage) == 0x000078, "Member 'UCommonLoadingScreenSettings::SplashScreenImage' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, SplashScreenStretch) == 0x000090, "Member 'UCommonLoadingScreenSettings::SplashScreenStretch' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, SplashScreenStretchDirection) == 0x000091, "Member 'UCommonLoadingScreenSettings::SplashScreenStretchDirection' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, SplashScreenLoadingText) == 0x000098, "Member 'UCommonLoadingScreenSettings::SplashScreenLoadingText' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, SplashScreenLoadingFont) == 0x0000B0, "Member 'UCommonLoadingScreenSettings::SplashScreenLoadingFont' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, bLogLoadingScreenReasonEveryFrame) == 0x000108, "Member 'UCommonLoadingScreenSettings::bLogLoadingScreenReasonEveryFrame' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, bForceLoadingScreenVisible) == 0x000109, "Member 'UCommonLoadingScreenSettings::bForceLoadingScreenVisible' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, bShowLoadingScreenAdditionalSecsEvenInEditor) == 0x00010A, "Member 'UCommonLoadingScreenSettings::bShowLoadingScreenAdditionalSecsEvenInEditor' has a wrong offset!");

}

