#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_NVG_FlipDown

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_NVG_FlipDown.GA_NVG_FlipDown_C.ExecuteUbergraph_GA_NVG_FlipDown
// 0x0250 (0x0250 - 0x0000)
struct GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_Payload;                        // 0x0058(0x00B0)()
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_4; // 0x0108(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x0118(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue;            // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetMontage_OutMontage;                    // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x01E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsProne_ReturnValue;                      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBPlayerController*                    K2Node_DynamicCast_AsGBPlayer_Controller;          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBHUD*                                 CallFunc_GetGBHUD_ReturnValue;                     // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_PlayMontageAndWait*        CallFunc_CreatePlayMontageAndWaitProxy_ReturnValue; // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlledPlayer_ReturnValue;    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1; // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetLooseGameplayTagCount_ReturnValue;     // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown) == 0x000008, "Wrong alignment on GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown");
static_assert(sizeof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown) == 0x000250, "Wrong size on GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, EntryPoint) == 0x000000, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, Temp_bool_Variable) == 0x000044, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, Temp_name_Variable) == 0x000048, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, Temp_name_Variable_1) == 0x000050, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_CustomEvent_Payload) == 0x000058, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_CustomEvent_Payload' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_CreateDelegate_OutputDelegate_4) == 0x000108, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, Temp_struct_Variable) == 0x000118, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_WaitGameplayEvent_ReturnValue) == 0x0001C8, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_WaitGameplayEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_IsValid_ReturnValue) == 0x0001D0, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_GetMontage_OutMontage) == 0x0001D8, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_GetMontage_OutMontage' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x0001E0, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x0001E8, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_DynamicCast_AsGBCharacter) == 0x0001F0, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_GetPlayerController_ReturnValue) == 0x000200, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_IsProne_ReturnValue) == 0x000208, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_IsProne_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_DynamicCast_AsGBPlayer_Controller) == 0x000210, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_DynamicCast_AsGBPlayer_Controller' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_DynamicCast_bSuccess_1) == 0x000218, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_GetGBHUD_ReturnValue) == 0x000220, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_GetGBHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, K2Node_Select_Default) == 0x000228, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_CreatePlayMontageAndWaitProxy_ReturnValue) == 0x000230, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_CreatePlayMontageAndWaitProxy_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_IsLocallyControlledPlayer_ReturnValue) == 0x000238, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_IsLocallyControlledPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_IsValid_ReturnValue_1) == 0x000239, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1) == 0x000240, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_K2_HasAuthority_ReturnValue) == 0x000248, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown, CallFunc_SetLooseGameplayTagCount_ReturnValue) == 0x000249, "Member 'GA_NVG_FlipDown_C_ExecuteUbergraph_GA_NVG_FlipDown::CallFunc_SetLooseGameplayTagCount_ReturnValue' has a wrong offset!");

// Function GA_NVG_FlipDown.GA_NVG_FlipDown_C.EventReceived_C1B1165D12A24742BF35BF82E7775CF9
// 0x00B0 (0x00B0 - 0x0000)
struct GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9) == 0x000008, "Wrong alignment on GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9");
static_assert(sizeof(GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9) == 0x0000B0, "Wrong size on GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9");
static_assert(offsetof(GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9, Payload) == 0x000000, "Member 'GA_NVG_FlipDown_C_EventReceived_C1B1165D12A24742BF35BF82E7775CF9::Payload' has a wrong offset!");

// Function GA_NVG_FlipDown.GA_NVG_FlipDown_C.GetMontage
// 0x0050 (0x0050 - 0x0000)
struct GA_NVG_FlipDown_C_GetMontage final
{
public:
	class UAnimMontage*                           OutMontage;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LocalMontage;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              CallFunc_GetCurrentAnimLayerClass_ReturnValue;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBCharAnimInstance*                    K2Node_DynamicCast_AsGBChar_Anim_Instance;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetMontageFromLinkedLayer_ReturnValue;    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NVG_FlipDown_C_GetMontage) == 0x000008, "Wrong alignment on GA_NVG_FlipDown_C_GetMontage");
static_assert(sizeof(GA_NVG_FlipDown_C_GetMontage) == 0x000050, "Wrong size on GA_NVG_FlipDown_C_GetMontage");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, OutMontage) == 0x000000, "Member 'GA_NVG_FlipDown_C_GetMontage::OutMontage' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, LocalMontage) == 0x000008, "Member 'GA_NVG_FlipDown_C_GetMontage::LocalMontage' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_NVG_FlipDown_C_GetMontage::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, K2Node_DynamicCast_AsGBCharacter) == 0x000018, "Member 'GA_NVG_FlipDown_C_GetMontage::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GA_NVG_FlipDown_C_GetMontage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, CallFunc_GetCurrentAnimLayerClass_ReturnValue) == 0x000028, "Member 'GA_NVG_FlipDown_C_GetMontage::CallFunc_GetCurrentAnimLayerClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'GA_NVG_FlipDown_C_GetMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, K2Node_DynamicCast_AsGBChar_Anim_Instance) == 0x000038, "Member 'GA_NVG_FlipDown_C_GetMontage::K2Node_DynamicCast_AsGBChar_Anim_Instance' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'GA_NVG_FlipDown_C_GetMontage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'GA_NVG_FlipDown_C_GetMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_GetMontage, CallFunc_GetMontageFromLinkedLayer_ReturnValue) == 0x000048, "Member 'GA_NVG_FlipDown_C_GetMontage::CallFunc_GetMontageFromLinkedLayer_ReturnValue' has a wrong offset!");

// Function GA_NVG_FlipDown.GA_NVG_FlipDown_C.K2_CanActivateAbility
// 0x0098 (0x0098 - 0x0000)
struct GA_NVG_FlipDown_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBCharacter*                           K2Node_DynamicCast_AsGBCharacter;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGBInvItem*                             CallFunc_GetFirstInvItemByTags_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_NVG_FlipDown_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_NVG_FlipDown_C_K2_CanActivateAbility");
static_assert(sizeof(GA_NVG_FlipDown_C_K2_CanActivateAbility) == 0x000098, "Wrong size on GA_NVG_FlipDown_C_K2_CanActivateAbility");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, K2Node_DynamicCast_AsGBCharacter) == 0x000078, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::K2Node_DynamicCast_AsGBCharacter' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, CallFunc_GetFirstInvItemByTags_ReturnValue) == 0x000088, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::CallFunc_GetFirstInvItemByTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NVG_FlipDown_C_K2_CanActivateAbility, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'GA_NVG_FlipDown_C_K2_CanActivateAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

