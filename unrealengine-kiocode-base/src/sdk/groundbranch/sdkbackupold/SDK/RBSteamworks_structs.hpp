#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBSteamworks

#include "Basic.hpp"


namespace SDK
{

// Enum RBSteamworks.ESteamServerType
// NumValues: 0x0007
enum class ESteamServerType : uint8
{
	Internet                                 = 0,
	LAN                                      = 1,
	Friends                                  = 2,
	Favorites                                = 3,
	History                                  = 4,
	Spectator                                = 5,
	ESteamServerType_MAX                     = 6,
};

// Enum RBSteamworks.ERBSteamPersonaState
// NumValues: 0x0007
enum class ERBSteamPersonaState : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	Busy                                     = 2,
	Away                                     = 3,
	Snooze                                   = 4,
	Unknown                                  = 5,
	ERBSteamPersonaState_MAX                 = 6,
};

// ScriptStruct RBSteamworks.RBSteamID
// 0x0008 (0x0008 - 0x0000)
struct FRBSteamID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRBSteamID) == 0x000001, "Wrong alignment on FRBSteamID");
static_assert(sizeof(FRBSteamID) == 0x000008, "Wrong size on FRBSteamID");

// ScriptStruct RBSteamworks.RBSteamFriendDetails
// 0x0020 (0x0020 - 0x0000)
struct FRBSteamFriendDetails final
{
public:
	struct FRBSteamID                             SteamID;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PersonaName;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSteamPersonaState                          PersonaState;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRBSteamFriendDetails) == 0x000008, "Wrong alignment on FRBSteamFriendDetails");
static_assert(sizeof(FRBSteamFriendDetails) == 0x000020, "Wrong size on FRBSteamFriendDetails");
static_assert(offsetof(FRBSteamFriendDetails, SteamID) == 0x000000, "Member 'FRBSteamFriendDetails::SteamID' has a wrong offset!");
static_assert(offsetof(FRBSteamFriendDetails, PersonaName) == 0x000008, "Member 'FRBSteamFriendDetails::PersonaName' has a wrong offset!");
static_assert(offsetof(FRBSteamFriendDetails, PersonaState) == 0x000018, "Member 'FRBSteamFriendDetails::PersonaState' has a wrong offset!");

// ScriptStruct RBSteamworks.SteamServerDetails
// 0x0068 (0x0068 - 0x0000)
struct FSteamServerDetails final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassword;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectionString;                                  // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TagArray;                                          // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFavourite;                                      // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModded;                                         // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasKitRestrictions;                               // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamServerDetails) == 0x000008, "Wrong alignment on FSteamServerDetails");
static_assert(sizeof(FSteamServerDetails) == 0x000068, "Wrong size on FSteamServerDetails");
static_assert(offsetof(FSteamServerDetails, ServerName) == 0x000000, "Member 'FSteamServerDetails::ServerName' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, bPassword) == 0x000010, "Member 'FSteamServerDetails::bPassword' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, MapName) == 0x000018, "Member 'FSteamServerDetails::MapName' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, Players) == 0x000028, "Member 'FSteamServerDetails::Players' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, MaxPlayers) == 0x00002C, "Member 'FSteamServerDetails::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, Ping) == 0x000030, "Member 'FSteamServerDetails::Ping' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, ConnectionString) == 0x000038, "Member 'FSteamServerDetails::ConnectionString' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, TagArray) == 0x000048, "Member 'FSteamServerDetails::TagArray' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, bIsFavourite) == 0x000060, "Member 'FSteamServerDetails::bIsFavourite' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, bIsModded) == 0x000061, "Member 'FSteamServerDetails::bIsModded' has a wrong offset!");
static_assert(offsetof(FSteamServerDetails, bHasKitRestrictions) == 0x000062, "Member 'FSteamServerDetails::bHasKitRestrictions' has a wrong offset!");

// ScriptStruct RBSteamworks.ServerNetAddress
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FServerNetAddress final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerNetAddress) == 0x000004, "Wrong alignment on FServerNetAddress");
static_assert(sizeof(FServerNetAddress) == 0x000008, "Wrong size on FServerNetAddress");

// ScriptStruct RBSteamworks.SteamServerDetailedInfo
// 0x0088 (0x0088 - 0x0000)
struct FSteamServerDetailedInfo final
{
public:
	struct FSteamServerDetails                    SteamServerDetails;                                // 0x0000(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   RuleName;                                          // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RuleValue;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidResponse;                                  // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamServerDetailedInfo) == 0x000008, "Wrong alignment on FSteamServerDetailedInfo");
static_assert(sizeof(FSteamServerDetailedInfo) == 0x000088, "Wrong size on FSteamServerDetailedInfo");
static_assert(offsetof(FSteamServerDetailedInfo, SteamServerDetails) == 0x000000, "Member 'FSteamServerDetailedInfo::SteamServerDetails' has a wrong offset!");
static_assert(offsetof(FSteamServerDetailedInfo, RuleName) == 0x000068, "Member 'FSteamServerDetailedInfo::RuleName' has a wrong offset!");
static_assert(offsetof(FSteamServerDetailedInfo, RuleValue) == 0x000070, "Member 'FSteamServerDetailedInfo::RuleValue' has a wrong offset!");
static_assert(offsetof(FSteamServerDetailedInfo, bInvalidResponse) == 0x000080, "Member 'FSteamServerDetailedInfo::bInvalidResponse' has a wrong offset!");

// ScriptStruct RBSteamworks.SteamWebAPIResponse_ModInfo
// 0x0040 (0x0040 - 0x0000)
struct FSteamWebAPIResponse_ModInfo final
{
public:
	uint64                                        RawWorkshopID;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamWebAPIResponse_ModInfo) == 0x000008, "Wrong alignment on FSteamWebAPIResponse_ModInfo");
static_assert(sizeof(FSteamWebAPIResponse_ModInfo) == 0x000040, "Wrong size on FSteamWebAPIResponse_ModInfo");
static_assert(offsetof(FSteamWebAPIResponse_ModInfo, RawWorkshopID) == 0x000000, "Member 'FSteamWebAPIResponse_ModInfo::RawWorkshopID' has a wrong offset!");
static_assert(offsetof(FSteamWebAPIResponse_ModInfo, Title) == 0x000008, "Member 'FSteamWebAPIResponse_ModInfo::Title' has a wrong offset!");
static_assert(offsetof(FSteamWebAPIResponse_ModInfo, Description) == 0x000018, "Member 'FSteamWebAPIResponse_ModInfo::Description' has a wrong offset!");
static_assert(offsetof(FSteamWebAPIResponse_ModInfo, CreatedBy) == 0x000028, "Member 'FSteamWebAPIResponse_ModInfo::CreatedBy' has a wrong offset!");

// ScriptStruct RBSteamworks.SteamServerFavourite
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSteamServerFavourite final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteamServerFavourite) == 0x000004, "Wrong alignment on FSteamServerFavourite");
static_assert(sizeof(FSteamServerFavourite) == 0x000010, "Wrong size on FSteamServerFavourite");

}

