#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_G33_Magnifier

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GroundBranch_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_G33_Magnifier.BP_G33_Magnifier_C
// 0x00B8 (0x0530 - 0x0478)
class ABP_G33_Magnifier_C final : public AGBRailAttachment
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          RootCollision;                                     // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FlippedDownCollision;                              // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FlippedUpCollision;                                // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               MagnifierSceneCaptureComp;                         // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBSightComponent*                      MagnifierSightComp;                                // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPoseableMeshComponent*                 PoseableMesh;                                      // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGBRailMountComponent*                  GBRailMount;                                       // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlippedUp;                                        // 0x04C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGBSightComponent*                      PreviousActiveSightComp;                           // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   MagnifierText;                                     // 0x04D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              MagnifierIcon;                                     // 0x04E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   BracketBoneName;                                   // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownRotation;                                      // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpRotation;                                        // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimatedOffset;                                    // 0x0520(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_G33_Magnifier(int32 EntryPoint);
	void NotifyStateTickName(class FName InName, float FrameDeltaTime);
	void NotifyStateEndName(class FName InName);
	void NotifyStateBeginName(class FName InName, float TotalDuration);
	void OnBeingEquipped();
	void EditItemSetup(class AGBCharacter* UICharacter);
	void ReceiveBeginPlay();
	void UpdateBoneRotation();
	void OnSelected_Magnifier(int32 Index_0);
	void AddMagnifierEntry(class UWBP_RadialMenu_C* UsageMenu);
	void AddAttachedUseMenuEntries(class UUserWidget* UsageMenu);
	void UpdateActiveSightStatus();
	void NotifyStateTickEnum(uint8 InEnumAsByte, float FrameDeltaTime);
	void NotifyStateEndEnum(uint8 InEnumAsByte);
	void NotifyStateBeginEnum(uint8 InEnumAsByte, float TotalDuration);
	void NotifyName(class FName InName);
	void NotifyEnum(uint8 InEnumAsByte);
	void UserConstructionScript();
	bool AllowUsageWhileAttached();
	void OnRep_Alpha();
	void OnRep_bFlippedUp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_G33_Magnifier_C">();
	}
	static class ABP_G33_Magnifier_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_G33_Magnifier_C>();
	}
};
static_assert(alignof(ABP_G33_Magnifier_C) == 0x000008, "Wrong alignment on ABP_G33_Magnifier_C");
static_assert(sizeof(ABP_G33_Magnifier_C) == 0x000530, "Wrong size on ABP_G33_Magnifier_C");
static_assert(offsetof(ABP_G33_Magnifier_C, UberGraphFrame) == 0x000478, "Member 'ABP_G33_Magnifier_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, RootCollision) == 0x000480, "Member 'ABP_G33_Magnifier_C::RootCollision' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, FlippedDownCollision) == 0x000488, "Member 'ABP_G33_Magnifier_C::FlippedDownCollision' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, FlippedUpCollision) == 0x000490, "Member 'ABP_G33_Magnifier_C::FlippedUpCollision' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, MagnifierSceneCaptureComp) == 0x000498, "Member 'ABP_G33_Magnifier_C::MagnifierSceneCaptureComp' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, Arrow) == 0x0004A0, "Member 'ABP_G33_Magnifier_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, MagnifierSightComp) == 0x0004A8, "Member 'ABP_G33_Magnifier_C::MagnifierSightComp' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, PoseableMesh) == 0x0004B0, "Member 'ABP_G33_Magnifier_C::PoseableMesh' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, GBRailMount) == 0x0004B8, "Member 'ABP_G33_Magnifier_C::GBRailMount' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, bFlippedUp) == 0x0004C0, "Member 'ABP_G33_Magnifier_C::bFlippedUp' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, Alpha) == 0x0004C4, "Member 'ABP_G33_Magnifier_C::Alpha' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, PreviousActiveSightComp) == 0x0004C8, "Member 'ABP_G33_Magnifier_C::PreviousActiveSightComp' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, MagnifierText) == 0x0004D0, "Member 'ABP_G33_Magnifier_C::MagnifierText' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, MagnifierIcon) == 0x0004E8, "Member 'ABP_G33_Magnifier_C::MagnifierIcon' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, BracketBoneName) == 0x000510, "Member 'ABP_G33_Magnifier_C::BracketBoneName' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, DownRotation) == 0x000518, "Member 'ABP_G33_Magnifier_C::DownRotation' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, UpRotation) == 0x00051C, "Member 'ABP_G33_Magnifier_C::UpRotation' has a wrong offset!");
static_assert(offsetof(ABP_G33_Magnifier_C, AnimatedOffset) == 0x000520, "Member 'ABP_G33_Magnifier_C::AnimatedOffset' has a wrong offset!");

}

