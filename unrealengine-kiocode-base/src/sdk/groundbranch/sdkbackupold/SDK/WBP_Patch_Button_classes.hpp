#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Patch_Button

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "FMModdingPlugin_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Patch_Button.WBP_Patch_Button_C
// 0x01F8 (0x0458 - 0x0260)
class UWBP_Patch_Button_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_CensorPatch;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Broken;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_CensorPatch;                                 // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PatchThumbnail;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   OptionalPlacementNameTooltip;                      // 0x0288(0x0018)(Edit, BlueprintVisible)
	struct FGameplayTag                           PatchNameTag;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFallback;                                       // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVaRestJsonObject*                      PatchJson;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PatchPath;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FPrimaryAssetId                        PatchTintSkinId;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 PatchFilename;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture2D*                             LoadedPatchTexture;                                // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             DefaultPatchTexture;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      DefaultPatchMaterial;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FailedLoadPatchTexture;                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FailedLoadPatchMaterial;                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        DefaultPatchTint;                                  // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        OriginaPatchTint;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 OriginalPatchFilename;                             // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnTintMaterialLoaded;                              // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 CurrentHash;                                       // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PresetHash;                                        // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   ThumbnailTooltipText;                              // 0x0370(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ThumbnailTooltipTextNoPatch;                       // 0x0388(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ToolTipCensored;                                   // 0x03A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsCensored;                                       // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPatchNotVisible;                                  // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipTextCensored;                               // 0x03C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ToolTipTextPatchNotVisible;                        // 0x03D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bDidNotLoad;                                       // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipTextBroken;                                 // 0x03F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bInactiveMod;                                      // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipTextInactiveMod;                            // 0x0418(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           LoadBundles;                                       // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInterface*                     PatchTintMaterial;                                 // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnPostRefreshThumbnail;                            // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_WBP_Patch_Button(int32 EntryPoint);
	void OnTintMaterialLoaded_Event_0();
	void PreloadTintMaterial();
	void SetThumbnailToBrokenPatch();
	void UpdateThumbnailTooltip();
	void UpdateCensoredState();
	void UpdatePathFilename(const class FString& PatchFilename_0);
	void UpdatePatchTint(const struct FPrimaryAssetId& PatchTintSkinId_0);
	void RefreshThumbail();
	void Update(class UVaRestJsonObject* JsonObj, bool bFromPreset);
	void UpdatePatchThumbnailImage(class UMaterialInterface* InPatchMaterial, class UTexture* InPatchTexture);
	void Completed_23443E4010E34067B8CD8DADACF9126E(class UObject* Loaded);
	void GetPathField(class FString* OutFieldName);
	void GetTintField(class FString* OutFieldName);
	bool HasBeenChanged();
	class UWidget* Get_PatchThumbnail_ToolTipWidget_0();
	class UWidget* Get_CheckBox_CensorPatch_ToolTipWidget_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Patch_Button_C">();
	}
	static class UWBP_Patch_Button_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Patch_Button_C>();
	}
};
static_assert(alignof(UWBP_Patch_Button_C) == 0x000008, "Wrong alignment on UWBP_Patch_Button_C");
static_assert(sizeof(UWBP_Patch_Button_C) == 0x000458, "Wrong size on UWBP_Patch_Button_C");
static_assert(offsetof(UWBP_Patch_Button_C, UberGraphFrame) == 0x000260, "Member 'UWBP_Patch_Button_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, Border_CensorPatch) == 0x000268, "Member 'UWBP_Patch_Button_C::Border_CensorPatch' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, Image_Broken) == 0x000270, "Member 'UWBP_Patch_Button_C::Image_Broken' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, Image_CensorPatch) == 0x000278, "Member 'UWBP_Patch_Button_C::Image_CensorPatch' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchThumbnail) == 0x000280, "Member 'UWBP_Patch_Button_C::PatchThumbnail' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, OptionalPlacementNameTooltip) == 0x000288, "Member 'UWBP_Patch_Button_C::OptionalPlacementNameTooltip' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchNameTag) == 0x0002A0, "Member 'UWBP_Patch_Button_C::PatchNameTag' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, bIsFallback) == 0x0002A8, "Member 'UWBP_Patch_Button_C::bIsFallback' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchJson) == 0x0002B0, "Member 'UWBP_Patch_Button_C::PatchJson' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchPath) == 0x0002B8, "Member 'UWBP_Patch_Button_C::PatchPath' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchTintSkinId) == 0x0002C8, "Member 'UWBP_Patch_Button_C::PatchTintSkinId' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchFilename) == 0x0002D8, "Member 'UWBP_Patch_Button_C::PatchFilename' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, LoadedPatchTexture) == 0x0002E8, "Member 'UWBP_Patch_Button_C::LoadedPatchTexture' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, DefaultPatchTexture) == 0x0002F0, "Member 'UWBP_Patch_Button_C::DefaultPatchTexture' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, DefaultPatchMaterial) == 0x0002F8, "Member 'UWBP_Patch_Button_C::DefaultPatchMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, FailedLoadPatchTexture) == 0x000300, "Member 'UWBP_Patch_Button_C::FailedLoadPatchTexture' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, FailedLoadPatchMaterial) == 0x000308, "Member 'UWBP_Patch_Button_C::FailedLoadPatchMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, DefaultPatchTint) == 0x000310, "Member 'UWBP_Patch_Button_C::DefaultPatchTint' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, OriginaPatchTint) == 0x000320, "Member 'UWBP_Patch_Button_C::OriginaPatchTint' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, OriginalPatchFilename) == 0x000330, "Member 'UWBP_Patch_Button_C::OriginalPatchFilename' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, OnTintMaterialLoaded) == 0x000340, "Member 'UWBP_Patch_Button_C::OnTintMaterialLoaded' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, CurrentHash) == 0x000350, "Member 'UWBP_Patch_Button_C::CurrentHash' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PresetHash) == 0x000360, "Member 'UWBP_Patch_Button_C::PresetHash' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ThumbnailTooltipText) == 0x000370, "Member 'UWBP_Patch_Button_C::ThumbnailTooltipText' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ThumbnailTooltipTextNoPatch) == 0x000388, "Member 'UWBP_Patch_Button_C::ThumbnailTooltipTextNoPatch' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ToolTipCensored) == 0x0003A0, "Member 'UWBP_Patch_Button_C::ToolTipCensored' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, bIsCensored) == 0x0003B8, "Member 'UWBP_Patch_Button_C::bIsCensored' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, bPatchNotVisible) == 0x0003B9, "Member 'UWBP_Patch_Button_C::bPatchNotVisible' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ToolTipTextCensored) == 0x0003C0, "Member 'UWBP_Patch_Button_C::ToolTipTextCensored' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ToolTipTextPatchNotVisible) == 0x0003D8, "Member 'UWBP_Patch_Button_C::ToolTipTextPatchNotVisible' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, bDidNotLoad) == 0x0003F0, "Member 'UWBP_Patch_Button_C::bDidNotLoad' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ToolTipTextBroken) == 0x0003F8, "Member 'UWBP_Patch_Button_C::ToolTipTextBroken' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, bInactiveMod) == 0x000410, "Member 'UWBP_Patch_Button_C::bInactiveMod' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, ToolTipTextInactiveMod) == 0x000418, "Member 'UWBP_Patch_Button_C::ToolTipTextInactiveMod' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, LoadBundles) == 0x000430, "Member 'UWBP_Patch_Button_C::LoadBundles' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, PatchTintMaterial) == 0x000440, "Member 'UWBP_Patch_Button_C::PatchTintMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_Patch_Button_C, OnPostRefreshThumbnail) == 0x000448, "Member 'UWBP_Patch_Button_C::OnPostRefreshThumbnail' has a wrong offset!");

}

