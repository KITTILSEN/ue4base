#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GrenadeImpact_Master

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GrenadeImpact_Master.BP_GrenadeImpact_Master_C
// 0x00D8 (0x02F8 - 0x0220)
class ABP_GrenadeImpact_Master_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           AkGrenadeImpactComp;                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DefaultImpactParticleFX;                           // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleFXScale;                                   // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ImpactSound;                                       // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactNormal;                                      // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Impact_Speed;                                      // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalisedRangeMin;                                // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalisedRangeMax;                                // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SenseHearingLoudness;                              // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SenseTag;                                          // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkGrenadeCompRef;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Grenade_Master_C*                   GrenadeMasterRef;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      ImpactPhysMat;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UPhysicalMaterial*, class UParticleSystem*> PhysMat2ParticleFXMap;                    // 0x02A8(0x0050)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_GrenadeImpact_Master(int32 EntryPoint);
	void K2_OnReset();
	void ReportSenseEvents();
	void SpawnImpactSound();
	void SpawnImpactParticleFX();
	void SetHitResult(class UObject* InHitResultSource, const struct FHitResult& InHitResult);
	void ReceiveBeginPlay();
	void SetPhysicCollisionInfo(class AActor* InSourceActor, class UPrimitiveComponent* InSourceComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& InContactPosition, const struct FVector& InContactNormal);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GrenadeImpact_Master_C">();
	}
	static class ABP_GrenadeImpact_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GrenadeImpact_Master_C>();
	}
};
static_assert(alignof(ABP_GrenadeImpact_Master_C) == 0x000008, "Wrong alignment on ABP_GrenadeImpact_Master_C");
static_assert(sizeof(ABP_GrenadeImpact_Master_C) == 0x0002F8, "Wrong size on ABP_GrenadeImpact_Master_C");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, UberGraphFrame) == 0x000220, "Member 'ABP_GrenadeImpact_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, AkGrenadeImpactComp) == 0x000228, "Member 'ABP_GrenadeImpact_Master_C::AkGrenadeImpactComp' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_GrenadeImpact_Master_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, DefaultImpactParticleFX) == 0x000238, "Member 'ABP_GrenadeImpact_Master_C::DefaultImpactParticleFX' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, ParticleFXScale) == 0x000240, "Member 'ABP_GrenadeImpact_Master_C::ParticleFXScale' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, ImpactSound) == 0x000250, "Member 'ABP_GrenadeImpact_Master_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, ImpactPoint) == 0x000258, "Member 'ABP_GrenadeImpact_Master_C::ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, ImpactNormal) == 0x000264, "Member 'ABP_GrenadeImpact_Master_C::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, Impact_Speed) == 0x000270, "Member 'ABP_GrenadeImpact_Master_C::Impact_Speed' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, NormalisedRangeMin) == 0x000274, "Member 'ABP_GrenadeImpact_Master_C::NormalisedRangeMin' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, NormalisedRangeMax) == 0x000278, "Member 'ABP_GrenadeImpact_Master_C::NormalisedRangeMax' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, SenseHearingLoudness) == 0x00027C, "Member 'ABP_GrenadeImpact_Master_C::SenseHearingLoudness' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, SenseTag) == 0x000280, "Member 'ABP_GrenadeImpact_Master_C::SenseTag' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, AkEvent) == 0x000288, "Member 'ABP_GrenadeImpact_Master_C::AkEvent' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, AkGrenadeCompRef) == 0x000290, "Member 'ABP_GrenadeImpact_Master_C::AkGrenadeCompRef' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, GrenadeMasterRef) == 0x000298, "Member 'ABP_GrenadeImpact_Master_C::GrenadeMasterRef' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, ImpactPhysMat) == 0x0002A0, "Member 'ABP_GrenadeImpact_Master_C::ImpactPhysMat' has a wrong offset!");
static_assert(offsetof(ABP_GrenadeImpact_Master_C, PhysMat2ParticleFXMap) == 0x0002A8, "Member 'ABP_GrenadeImpact_Master_C::PhysMat2ParticleFXMap' has a wrong offset!");

}

