#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_G33_FlipDown

#include "Basic.hpp"


namespace SDK::Params
{

// Function GA_G33_FlipDown.GA_G33_FlipDown_C.CanChangeMagnificationLevel
// 0x0028 (0x0028 - 0x0000)
struct GA_G33_FlipDown_C_CanChangeMagnificationLevel final
{
public:
	class UGBSightComponent*                      InSightComp;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOutCanChange;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_G33_Magnifier_C*                    K2Node_DynamicCast_AsBP_G33_Magnifier;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_G33_FlipDown_C_CanChangeMagnificationLevel) == 0x000008, "Wrong alignment on GA_G33_FlipDown_C_CanChangeMagnificationLevel");
static_assert(sizeof(GA_G33_FlipDown_C_CanChangeMagnificationLevel) == 0x000028, "Wrong size on GA_G33_FlipDown_C_CanChangeMagnificationLevel");
static_assert(offsetof(GA_G33_FlipDown_C_CanChangeMagnificationLevel, InSightComp) == 0x000000, "Member 'GA_G33_FlipDown_C_CanChangeMagnificationLevel::InSightComp' has a wrong offset!");
static_assert(offsetof(GA_G33_FlipDown_C_CanChangeMagnificationLevel, bOutCanChange) == 0x000008, "Member 'GA_G33_FlipDown_C_CanChangeMagnificationLevel::bOutCanChange' has a wrong offset!");
static_assert(offsetof(GA_G33_FlipDown_C_CanChangeMagnificationLevel, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'GA_G33_FlipDown_C_CanChangeMagnificationLevel::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_G33_FlipDown_C_CanChangeMagnificationLevel, K2Node_DynamicCast_AsBP_G33_Magnifier) == 0x000018, "Member 'GA_G33_FlipDown_C_CanChangeMagnificationLevel::K2Node_DynamicCast_AsBP_G33_Magnifier' has a wrong offset!");
static_assert(offsetof(GA_G33_FlipDown_C_CanChangeMagnificationLevel, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GA_G33_FlipDown_C_CanChangeMagnificationLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_G33_FlipDown_C_CanChangeMagnificationLevel, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'GA_G33_FlipDown_C_CanChangeMagnificationLevel::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

