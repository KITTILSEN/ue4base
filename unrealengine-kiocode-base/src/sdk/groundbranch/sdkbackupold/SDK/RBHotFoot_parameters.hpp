#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBHotFoot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RBHotFoot_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RBHotFoot.HFActorInterface.GetCustomDetailWidgets
// 0x0010 (0x0010 - 0x0000)
struct HFActorInterface_GetCustomDetailWidgets final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFActorInterface_GetCustomDetailWidgets) == 0x000008, "Wrong alignment on HFActorInterface_GetCustomDetailWidgets");
static_assert(sizeof(HFActorInterface_GetCustomDetailWidgets) == 0x000010, "Wrong size on HFActorInterface_GetCustomDetailWidgets");
static_assert(offsetof(HFActorInterface_GetCustomDetailWidgets, ReturnValue) == 0x000000, "Member 'HFActorInterface_GetCustomDetailWidgets::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFActorInterface.GetCustomPropertyWidget
// 0x0038 (0x0038 - 0x0000)
struct HFActorInterface_GetCustomPropertyWidget final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFActorInterface_GetCustomPropertyWidget) == 0x000008, "Wrong alignment on HFActorInterface_GetCustomPropertyWidget");
static_assert(sizeof(HFActorInterface_GetCustomPropertyWidget) == 0x000038, "Wrong size on HFActorInterface_GetCustomPropertyWidget");
static_assert(offsetof(HFActorInterface_GetCustomPropertyWidget, PropertyName) == 0x000000, "Member 'HFActorInterface_GetCustomPropertyWidget::PropertyName' has a wrong offset!");
static_assert(offsetof(HFActorInterface_GetCustomPropertyWidget, ReturnValue) == 0x000010, "Member 'HFActorInterface_GetCustomPropertyWidget::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFActorInterface.GetPlacementTranslate
// 0x000C (0x000C - 0x0000)
struct HFActorInterface_GetPlacementTranslate final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFActorInterface_GetPlacementTranslate) == 0x000004, "Wrong alignment on HFActorInterface_GetPlacementTranslate");
static_assert(sizeof(HFActorInterface_GetPlacementTranslate) == 0x00000C, "Wrong size on HFActorInterface_GetPlacementTranslate");
static_assert(offsetof(HFActorInterface_GetPlacementTranslate, ReturnValue) == 0x000000, "Member 'HFActorInterface_GetPlacementTranslate::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFActorInterface.PostEditProperty
// 0x0020 (0x0020 - 0x0000)
struct HFActorInterface_PostEditProperty final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyValue;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFActorInterface_PostEditProperty) == 0x000008, "Wrong alignment on HFActorInterface_PostEditProperty");
static_assert(sizeof(HFActorInterface_PostEditProperty) == 0x000020, "Wrong size on HFActorInterface_PostEditProperty");
static_assert(offsetof(HFActorInterface_PostEditProperty, PropertyName) == 0x000000, "Member 'HFActorInterface_PostEditProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(HFActorInterface_PostEditProperty, PropertyValue) == 0x000010, "Member 'HFActorInterface_PostEditProperty::PropertyValue' has a wrong offset!");

// Function RBHotFoot.HFActorInterface.PreEditProperty
// 0x0020 (0x0020 - 0x0000)
struct HFActorInterface_PreEditProperty final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyValue;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFActorInterface_PreEditProperty) == 0x000008, "Wrong alignment on HFActorInterface_PreEditProperty");
static_assert(sizeof(HFActorInterface_PreEditProperty) == 0x000020, "Wrong size on HFActorInterface_PreEditProperty");
static_assert(offsetof(HFActorInterface_PreEditProperty, PropertyName) == 0x000000, "Member 'HFActorInterface_PreEditProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(HFActorInterface_PreEditProperty, PropertyValue) == 0x000010, "Member 'HFActorInterface_PreEditProperty::PropertyValue' has a wrong offset!");

// Function RBHotFoot.HFDragDropOperation.GetViewportPosition
// 0x0008 (0x0008 - 0x0000)
struct HFDragDropOperation_GetViewportPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFDragDropOperation_GetViewportPosition) == 0x000004, "Wrong alignment on HFDragDropOperation_GetViewportPosition");
static_assert(sizeof(HFDragDropOperation_GetViewportPosition) == 0x000008, "Wrong size on HFDragDropOperation_GetViewportPosition");
static_assert(offsetof(HFDragDropOperation_GetViewportPosition, ReturnValue) == 0x000000, "Member 'HFDragDropOperation_GetViewportPosition::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.AsyncSave
// 0x0038 (0x0038 - 0x0000)
struct HFFunctionLibrary_AsyncSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHFSave*                                SaveObject;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                SavedDelegate;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_AsyncSave) == 0x000008, "Wrong alignment on HFFunctionLibrary_AsyncSave");
static_assert(sizeof(HFFunctionLibrary_AsyncSave) == 0x000038, "Wrong size on HFFunctionLibrary_AsyncSave");
static_assert(offsetof(HFFunctionLibrary_AsyncSave, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_AsyncSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_AsyncSave, SaveObject) == 0x000008, "Member 'HFFunctionLibrary_AsyncSave::SaveObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_AsyncSave, Filename) == 0x000010, "Member 'HFFunctionLibrary_AsyncSave::Filename' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_AsyncSave, ActorTag) == 0x000020, "Member 'HFFunctionLibrary_AsyncSave::ActorTag' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_AsyncSave, SavedDelegate) == 0x000028, "Member 'HFFunctionLibrary_AsyncSave::SavedDelegate' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.ClearActors
// 0x0010 (0x0010 - 0x0000)
struct HFFunctionLibrary_ClearActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_ClearActors) == 0x000008, "Wrong alignment on HFFunctionLibrary_ClearActors");
static_assert(sizeof(HFFunctionLibrary_ClearActors) == 0x000010, "Wrong size on HFFunctionLibrary_ClearActors");
static_assert(offsetof(HFFunctionLibrary_ClearActors, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_ClearActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_ClearActors, ActorTag) == 0x000008, "Member 'HFFunctionLibrary_ClearActors::ActorTag' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.DebugGameViewportClient
// 0x0008 (0x0008 - 0x0000)
struct HFFunctionLibrary_DebugGameViewportClient final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_DebugGameViewportClient) == 0x000008, "Wrong alignment on HFFunctionLibrary_DebugGameViewportClient");
static_assert(sizeof(HFFunctionLibrary_DebugGameViewportClient) == 0x000008, "Wrong size on HFFunctionLibrary_DebugGameViewportClient");
static_assert(offsetof(HFFunctionLibrary_DebugGameViewportClient, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_DebugGameViewportClient::WorldContextObject' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.DirectSave
// 0x0020 (0x0020 - 0x0000)
struct HFFunctionLibrary_DirectSave final
{
public:
	class UHFSave*                                SaveObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFFunctionLibrary_DirectSave) == 0x000008, "Wrong alignment on HFFunctionLibrary_DirectSave");
static_assert(sizeof(HFFunctionLibrary_DirectSave) == 0x000020, "Wrong size on HFFunctionLibrary_DirectSave");
static_assert(offsetof(HFFunctionLibrary_DirectSave, SaveObject) == 0x000000, "Member 'HFFunctionLibrary_DirectSave::SaveObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DirectSave, Filename) == 0x000008, "Member 'HFFunctionLibrary_DirectSave::Filename' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DirectSave, ReturnValue) == 0x000018, "Member 'HFFunctionLibrary_DirectSave::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.DrawArrow
// 0x0038 (0x0038 - 0x0000)
struct HFFunctionLibrary_DrawArrow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowSize;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_DrawArrow) == 0x000008, "Wrong alignment on HFFunctionLibrary_DrawArrow");
static_assert(sizeof(HFFunctionLibrary_DrawArrow) == 0x000038, "Wrong size on HFFunctionLibrary_DrawArrow");
static_assert(offsetof(HFFunctionLibrary_DrawArrow, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_DrawArrow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawArrow, Start) == 0x000008, "Member 'HFFunctionLibrary_DrawArrow::Start' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawArrow, End) == 0x000014, "Member 'HFFunctionLibrary_DrawArrow::End' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawArrow, Color) == 0x000020, "Member 'HFFunctionLibrary_DrawArrow::Color' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawArrow, ArrowSize) == 0x000030, "Member 'HFFunctionLibrary_DrawArrow::ArrowSize' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawArrow, Thickness) == 0x000034, "Member 'HFFunctionLibrary_DrawArrow::Thickness' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.DrawLine
// 0x0038 (0x0038 - 0x0000)
struct HFFunctionLibrary_DrawLine final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFFunctionLibrary_DrawLine) == 0x000008, "Wrong alignment on HFFunctionLibrary_DrawLine");
static_assert(sizeof(HFFunctionLibrary_DrawLine) == 0x000038, "Wrong size on HFFunctionLibrary_DrawLine");
static_assert(offsetof(HFFunctionLibrary_DrawLine, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_DrawLine::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLine, Start) == 0x000008, "Member 'HFFunctionLibrary_DrawLine::Start' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLine, End) == 0x000014, "Member 'HFFunctionLibrary_DrawLine::End' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLine, Color) == 0x000020, "Member 'HFFunctionLibrary_DrawLine::Color' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLine, Thickness) == 0x000030, "Member 'HFFunctionLibrary_DrawLine::Thickness' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.DrawLines
// 0x0040 (0x0040 - 0x0000)
struct HFFunctionLibrary_DrawLines final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Starts;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Ends;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFFunctionLibrary_DrawLines) == 0x000008, "Wrong alignment on HFFunctionLibrary_DrawLines");
static_assert(sizeof(HFFunctionLibrary_DrawLines) == 0x000040, "Wrong size on HFFunctionLibrary_DrawLines");
static_assert(offsetof(HFFunctionLibrary_DrawLines, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_DrawLines::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLines, Starts) == 0x000008, "Member 'HFFunctionLibrary_DrawLines::Starts' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLines, Ends) == 0x000018, "Member 'HFFunctionLibrary_DrawLines::Ends' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLines, Color) == 0x000028, "Member 'HFFunctionLibrary_DrawLines::Color' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawLines, Thickness) == 0x000038, "Member 'HFFunctionLibrary_DrawLines::Thickness' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.DrawSolidBox
// 0x0030 (0x0030 - 0x0000)
struct HFFunctionLibrary_DrawSolidBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x002C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_DrawSolidBox) == 0x000008, "Wrong alignment on HFFunctionLibrary_DrawSolidBox");
static_assert(sizeof(HFFunctionLibrary_DrawSolidBox) == 0x000030, "Wrong size on HFFunctionLibrary_DrawSolidBox");
static_assert(offsetof(HFFunctionLibrary_DrawSolidBox, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_DrawSolidBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawSolidBox, Center) == 0x000008, "Member 'HFFunctionLibrary_DrawSolidBox::Center' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawSolidBox, Extent) == 0x000014, "Member 'HFFunctionLibrary_DrawSolidBox::Extent' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawSolidBox, Rotation) == 0x000020, "Member 'HFFunctionLibrary_DrawSolidBox::Rotation' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_DrawSolidBox, Color) == 0x00002C, "Member 'HFFunctionLibrary_DrawSolidBox::Color' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.LoadFile
// 0x0020 (0x0020 - 0x0000)
struct HFFunctionLibrary_LoadFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSaveGameVersion;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHFSave*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_LoadFile) == 0x000008, "Wrong alignment on HFFunctionLibrary_LoadFile");
static_assert(sizeof(HFFunctionLibrary_LoadFile) == 0x000020, "Wrong size on HFFunctionLibrary_LoadFile");
static_assert(offsetof(HFFunctionLibrary_LoadFile, Filename) == 0x000000, "Member 'HFFunctionLibrary_LoadFile::Filename' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_LoadFile, bIgnoreSaveGameVersion) == 0x000010, "Member 'HFFunctionLibrary_LoadFile::bIgnoreSaveGameVersion' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_LoadFile, ReturnValue) == 0x000018, "Member 'HFFunctionLibrary_LoadFile::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.MakeUniqueActorName
// 0x0028 (0x0028 - 0x0000)
struct HFFunctionLibrary_MakeUniqueActorName final
{
public:
	class FString                                 BaseActorName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExistingActorNames;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_MakeUniqueActorName) == 0x000008, "Wrong alignment on HFFunctionLibrary_MakeUniqueActorName");
static_assert(sizeof(HFFunctionLibrary_MakeUniqueActorName) == 0x000028, "Wrong size on HFFunctionLibrary_MakeUniqueActorName");
static_assert(offsetof(HFFunctionLibrary_MakeUniqueActorName, BaseActorName) == 0x000000, "Member 'HFFunctionLibrary_MakeUniqueActorName::BaseActorName' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_MakeUniqueActorName, ExistingActorNames) == 0x000010, "Member 'HFFunctionLibrary_MakeUniqueActorName::ExistingActorNames' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_MakeUniqueActorName, ReturnValue) == 0x000020, "Member 'HFFunctionLibrary_MakeUniqueActorName::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.SetShapeColour
// 0x0010 (0x0010 - 0x0000)
struct HFFunctionLibrary_SetShapeColour final
{
public:
	class UShapeComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NewColour;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFFunctionLibrary_SetShapeColour) == 0x000008, "Wrong alignment on HFFunctionLibrary_SetShapeColour");
static_assert(sizeof(HFFunctionLibrary_SetShapeColour) == 0x000010, "Wrong size on HFFunctionLibrary_SetShapeColour");
static_assert(offsetof(HFFunctionLibrary_SetShapeColour, Target) == 0x000000, "Member 'HFFunctionLibrary_SetShapeColour::Target' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SetShapeColour, NewColour) == 0x000008, "Member 'HFFunctionLibrary_SetShapeColour::NewColour' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.SetShapeDrawOnlyIfSelected
// 0x0010 (0x0010 - 0x0000)
struct HFFunctionLibrary_SetShapeDrawOnlyIfSelected final
{
public:
	class UShapeComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewDrawOnlyIfSelected;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFFunctionLibrary_SetShapeDrawOnlyIfSelected) == 0x000008, "Wrong alignment on HFFunctionLibrary_SetShapeDrawOnlyIfSelected");
static_assert(sizeof(HFFunctionLibrary_SetShapeDrawOnlyIfSelected) == 0x000010, "Wrong size on HFFunctionLibrary_SetShapeDrawOnlyIfSelected");
static_assert(offsetof(HFFunctionLibrary_SetShapeDrawOnlyIfSelected, Target) == 0x000000, "Member 'HFFunctionLibrary_SetShapeDrawOnlyIfSelected::Target' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SetShapeDrawOnlyIfSelected, bNewDrawOnlyIfSelected) == 0x000008, "Member 'HFFunctionLibrary_SetShapeDrawOnlyIfSelected::bNewDrawOnlyIfSelected' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.SortActorArray
// 0x0028 (0x0028 - 0x0000)
struct HFFunctionLibrary_SortActorArray final
{
public:
	TArray<class AActor*>                         ActorArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAscendingOrder;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bByClass;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorArrayRef;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_SortActorArray) == 0x000008, "Wrong alignment on HFFunctionLibrary_SortActorArray");
static_assert(sizeof(HFFunctionLibrary_SortActorArray) == 0x000028, "Wrong size on HFFunctionLibrary_SortActorArray");
static_assert(offsetof(HFFunctionLibrary_SortActorArray, ActorArray) == 0x000000, "Member 'HFFunctionLibrary_SortActorArray::ActorArray' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SortActorArray, bAscendingOrder) == 0x000010, "Member 'HFFunctionLibrary_SortActorArray::bAscendingOrder' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SortActorArray, bByClass) == 0x000011, "Member 'HFFunctionLibrary_SortActorArray::bByClass' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SortActorArray, ActorArrayRef) == 0x000018, "Member 'HFFunctionLibrary_SortActorArray::ActorArrayRef' has a wrong offset!");

// Function RBHotFoot.HFFunctionLibrary.SpawnActorsFromFile
// 0x0030 (0x0030 - 0x0000)
struct HFFunctionLibrary_SpawnActorsFromFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHFSave*                                SaveFile;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     OnlySpawnThisClass;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFFunctionLibrary_SpawnActorsFromFile) == 0x000008, "Wrong alignment on HFFunctionLibrary_SpawnActorsFromFile");
static_assert(sizeof(HFFunctionLibrary_SpawnActorsFromFile) == 0x000030, "Wrong size on HFFunctionLibrary_SpawnActorsFromFile");
static_assert(offsetof(HFFunctionLibrary_SpawnActorsFromFile, WorldContextObject) == 0x000000, "Member 'HFFunctionLibrary_SpawnActorsFromFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SpawnActorsFromFile, SaveFile) == 0x000008, "Member 'HFFunctionLibrary_SpawnActorsFromFile::SaveFile' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SpawnActorsFromFile, ActorTag) == 0x000010, "Member 'HFFunctionLibrary_SpawnActorsFromFile::ActorTag' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SpawnActorsFromFile, OnlySpawnThisClass) == 0x000018, "Member 'HFFunctionLibrary_SpawnActorsFromFile::OnlySpawnThisClass' has a wrong offset!");
static_assert(offsetof(HFFunctionLibrary_SpawnActorsFromFile, ReturnValue) == 0x000020, "Member 'HFFunctionLibrary_SpawnActorsFromFile::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.AddSelectedActor
// 0x0008 (0x0008 - 0x0000)
struct HFManager_AddSelectedActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_AddSelectedActor) == 0x000008, "Wrong alignment on HFManager_AddSelectedActor");
static_assert(sizeof(HFManager_AddSelectedActor) == 0x000008, "Wrong size on HFManager_AddSelectedActor");
static_assert(offsetof(HFManager_AddSelectedActor, Actor) == 0x000000, "Member 'HFManager_AddSelectedActor::Actor' has a wrong offset!");

// Function RBHotFoot.HFManager.EnablePlayerInput
// 0x0001 (0x0001 - 0x0000)
struct HFManager_EnablePlayerInput final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_EnablePlayerInput) == 0x000001, "Wrong alignment on HFManager_EnablePlayerInput");
static_assert(sizeof(HFManager_EnablePlayerInput) == 0x000001, "Wrong size on HFManager_EnablePlayerInput");
static_assert(offsetof(HFManager_EnablePlayerInput, bNewValue) == 0x000000, "Member 'HFManager_EnablePlayerInput::bNewValue' has a wrong offset!");

// Function RBHotFoot.HFManager.GetGridSize
// 0x0004 (0x0004 - 0x0000)
struct HFManager_GetGridSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_GetGridSize) == 0x000004, "Wrong alignment on HFManager_GetGridSize");
static_assert(sizeof(HFManager_GetGridSize) == 0x000004, "Wrong size on HFManager_GetGridSize");
static_assert(offsetof(HFManager_GetGridSize, ReturnValue) == 0x000000, "Member 'HFManager_GetGridSize::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.GetSelectedActors
// 0x0010 (0x0010 - 0x0000)
struct HFManager_GetSelectedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_GetSelectedActors) == 0x000008, "Wrong alignment on HFManager_GetSelectedActors");
static_assert(sizeof(HFManager_GetSelectedActors) == 0x000010, "Wrong size on HFManager_GetSelectedActors");
static_assert(offsetof(HFManager_GetSelectedActors, ReturnValue) == 0x000000, "Member 'HFManager_GetSelectedActors::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.GetSharedCustomDetailWidgets
// 0x0010 (0x0010 - 0x0000)
struct HFManager_GetSharedCustomDetailWidgets final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_GetSharedCustomDetailWidgets) == 0x000008, "Wrong alignment on HFManager_GetSharedCustomDetailWidgets");
static_assert(sizeof(HFManager_GetSharedCustomDetailWidgets) == 0x000010, "Wrong size on HFManager_GetSharedCustomDetailWidgets");
static_assert(offsetof(HFManager_GetSharedCustomDetailWidgets, ReturnValue) == 0x000000, "Member 'HFManager_GetSharedCustomDetailWidgets::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.GetSharedProperties
// 0x0010 (0x0010 - 0x0000)
struct HFManager_GetSharedProperties final
{
public:
	TArray<struct FHFSharedProperty>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_GetSharedProperties) == 0x000008, "Wrong alignment on HFManager_GetSharedProperties");
static_assert(sizeof(HFManager_GetSharedProperties) == 0x000010, "Wrong size on HFManager_GetSharedProperties");
static_assert(offsetof(HFManager_GetSharedProperties, ReturnValue) == 0x000000, "Member 'HFManager_GetSharedProperties::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.GetSnapToWorldGrid
// 0x0001 (0x0001 - 0x0000)
struct HFManager_GetSnapToWorldGrid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_GetSnapToWorldGrid) == 0x000001, "Wrong alignment on HFManager_GetSnapToWorldGrid");
static_assert(sizeof(HFManager_GetSnapToWorldGrid) == 0x000001, "Wrong size on HFManager_GetSnapToWorldGrid");
static_assert(offsetof(HFManager_GetSnapToWorldGrid, ReturnValue) == 0x000000, "Member 'HFManager_GetSnapToWorldGrid::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.InputPasteSelectedActors
// 0x0001 (0x0001 - 0x0000)
struct HFManager_InputPasteSelectedActors final
{
public:
	bool                                          bAtLocation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_InputPasteSelectedActors) == 0x000001, "Wrong alignment on HFManager_InputPasteSelectedActors");
static_assert(sizeof(HFManager_InputPasteSelectedActors) == 0x000001, "Wrong size on HFManager_InputPasteSelectedActors");
static_assert(offsetof(HFManager_InputPasteSelectedActors, bAtLocation) == 0x000000, "Member 'HFManager_InputPasteSelectedActors::bAtLocation' has a wrong offset!");

// Function RBHotFoot.HFManager.OnInputAxis
// 0x0070 (0x0070 - 0x0000)
struct HFManager_OnInputAxis final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_OnInputAxis) == 0x000008, "Wrong alignment on HFManager_OnInputAxis");
static_assert(sizeof(HFManager_OnInputAxis) == 0x000070, "Wrong size on HFManager_OnInputAxis");
static_assert(offsetof(HFManager_OnInputAxis, PointerEvent) == 0x000000, "Member 'HFManager_OnInputAxis::PointerEvent' has a wrong offset!");

// Function RBHotFoot.HFManager.OnInputKey
// 0x0040 (0x0040 - 0x0000)
struct HFManager_OnInputKey final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EInputEvent                                   Event;                                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFManager_OnInputKey) == 0x000008, "Wrong alignment on HFManager_OnInputKey");
static_assert(sizeof(HFManager_OnInputKey) == 0x000040, "Wrong size on HFManager_OnInputKey");
static_assert(offsetof(HFManager_OnInputKey, KeyEvent) == 0x000000, "Member 'HFManager_OnInputKey::KeyEvent' has a wrong offset!");
static_assert(offsetof(HFManager_OnInputKey, Event) == 0x000038, "Member 'HFManager_OnInputKey::Event' has a wrong offset!");
static_assert(offsetof(HFManager_OnInputKey, ReturnValue) == 0x000039, "Member 'HFManager_OnInputKey::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.OnMouseButtonInput
// 0x0078 (0x0078 - 0x0000)
struct HFManager_OnMouseButtonInput final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EInputEvent                                   Event;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0071(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFManager_OnMouseButtonInput) == 0x000008, "Wrong alignment on HFManager_OnMouseButtonInput");
static_assert(sizeof(HFManager_OnMouseButtonInput) == 0x000078, "Wrong size on HFManager_OnMouseButtonInput");
static_assert(offsetof(HFManager_OnMouseButtonInput, PointerEvent) == 0x000000, "Member 'HFManager_OnMouseButtonInput::PointerEvent' has a wrong offset!");
static_assert(offsetof(HFManager_OnMouseButtonInput, Event) == 0x000070, "Member 'HFManager_OnMouseButtonInput::Event' has a wrong offset!");
static_assert(offsetof(HFManager_OnMouseButtonInput, ReturnValue) == 0x000071, "Member 'HFManager_OnMouseButtonInput::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.RefreshLoadedActors
// 0x0008 (0x0008 - 0x0000)
struct HFManager_RefreshLoadedActors final
{
public:
	class FName                                   ActorTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_RefreshLoadedActors) == 0x000004, "Wrong alignment on HFManager_RefreshLoadedActors");
static_assert(sizeof(HFManager_RefreshLoadedActors) == 0x000008, "Wrong size on HFManager_RefreshLoadedActors");
static_assert(offsetof(HFManager_RefreshLoadedActors, ActorTag) == 0x000000, "Member 'HFManager_RefreshLoadedActors::ActorTag' has a wrong offset!");

// Function RBHotFoot.HFManager.RemoveSelectedActor
// 0x0008 (0x0008 - 0x0000)
struct HFManager_RemoveSelectedActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_RemoveSelectedActor) == 0x000008, "Wrong alignment on HFManager_RemoveSelectedActor");
static_assert(sizeof(HFManager_RemoveSelectedActor) == 0x000008, "Wrong size on HFManager_RemoveSelectedActor");
static_assert(offsetof(HFManager_RemoveSelectedActor, Actor) == 0x000000, "Member 'HFManager_RemoveSelectedActor::Actor' has a wrong offset!");

// Function RBHotFoot.HFManager.RenameSelected
// 0x0028 (0x0028 - 0x0000)
struct HFManager_RenameSelected final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutError;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFManager_RenameSelected) == 0x000008, "Wrong alignment on HFManager_RenameSelected");
static_assert(sizeof(HFManager_RenameSelected) == 0x000028, "Wrong size on HFManager_RenameSelected");
static_assert(offsetof(HFManager_RenameSelected, NewName) == 0x000000, "Member 'HFManager_RenameSelected::NewName' has a wrong offset!");
static_assert(offsetof(HFManager_RenameSelected, OutError) == 0x000010, "Member 'HFManager_RenameSelected::OutError' has a wrong offset!");
static_assert(offsetof(HFManager_RenameSelected, ReturnValue) == 0x000020, "Member 'HFManager_RenameSelected::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFManager.SetActorClassToSpawn
// 0x0008 (0x0008 - 0x0000)
struct HFManager_SetActorClassToSpawn final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetActorClassToSpawn) == 0x000008, "Wrong alignment on HFManager_SetActorClassToSpawn");
static_assert(sizeof(HFManager_SetActorClassToSpawn) == 0x000008, "Wrong size on HFManager_SetActorClassToSpawn");
static_assert(offsetof(HFManager_SetActorClassToSpawn, ActorClass) == 0x000000, "Member 'HFManager_SetActorClassToSpawn::ActorClass' has a wrong offset!");

// Function RBHotFoot.HFManager.SetAxisScreenPos
// 0x0008 (0x0008 - 0x0000)
struct HFManager_SetAxisScreenPos final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetAxisScreenPos) == 0x000004, "Wrong alignment on HFManager_SetAxisScreenPos");
static_assert(sizeof(HFManager_SetAxisScreenPos) == 0x000008, "Wrong size on HFManager_SetAxisScreenPos");
static_assert(offsetof(HFManager_SetAxisScreenPos, Pos) == 0x000000, "Member 'HFManager_SetAxisScreenPos::Pos' has a wrong offset!");

// Function RBHotFoot.HFManager.SetFlyingSpeed
// 0x0004 (0x0004 - 0x0000)
struct HFManager_SetFlyingSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetFlyingSpeed) == 0x000004, "Wrong alignment on HFManager_SetFlyingSpeed");
static_assert(sizeof(HFManager_SetFlyingSpeed) == 0x000004, "Wrong size on HFManager_SetFlyingSpeed");
static_assert(offsetof(HFManager_SetFlyingSpeed, NewSpeed) == 0x000000, "Member 'HFManager_SetFlyingSpeed::NewSpeed' has a wrong offset!");

// Function RBHotFoot.HFManager.SetGizmoMethod
// 0x0001 (0x0001 - 0x0000)
struct HFManager_SetGizmoMethod final
{
public:
	EHGGizmoMethod                                Method;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetGizmoMethod) == 0x000001, "Wrong alignment on HFManager_SetGizmoMethod");
static_assert(sizeof(HFManager_SetGizmoMethod) == 0x000001, "Wrong size on HFManager_SetGizmoMethod");
static_assert(offsetof(HFManager_SetGizmoMethod, Method) == 0x000000, "Member 'HFManager_SetGizmoMethod::Method' has a wrong offset!");

// Function RBHotFoot.HFManager.SetGridSize
// 0x0004 (0x0004 - 0x0000)
struct HFManager_SetGridSize final
{
public:
	float                                         NewGridSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetGridSize) == 0x000004, "Wrong alignment on HFManager_SetGridSize");
static_assert(sizeof(HFManager_SetGridSize) == 0x000004, "Wrong size on HFManager_SetGridSize");
static_assert(offsetof(HFManager_SetGridSize, NewGridSize) == 0x000000, "Member 'HFManager_SetGridSize::NewGridSize' has a wrong offset!");

// Function RBHotFoot.HFManager.SetLocalCoordinateSystem
// 0x0001 (0x0001 - 0x0000)
struct HFManager_SetLocalCoordinateSystem final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetLocalCoordinateSystem) == 0x000001, "Wrong alignment on HFManager_SetLocalCoordinateSystem");
static_assert(sizeof(HFManager_SetLocalCoordinateSystem) == 0x000001, "Wrong size on HFManager_SetLocalCoordinateSystem");
static_assert(offsetof(HFManager_SetLocalCoordinateSystem, bEnable) == 0x000000, "Member 'HFManager_SetLocalCoordinateSystem::bEnable' has a wrong offset!");

// Function RBHotFoot.HFManager.SetSelectActorEnabled
// 0x0001 (0x0001 - 0x0000)
struct HFManager_SetSelectActorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetSelectActorEnabled) == 0x000001, "Wrong alignment on HFManager_SetSelectActorEnabled");
static_assert(sizeof(HFManager_SetSelectActorEnabled) == 0x000001, "Wrong size on HFManager_SetSelectActorEnabled");
static_assert(offsetof(HFManager_SetSelectActorEnabled, bEnabled) == 0x000000, "Member 'HFManager_SetSelectActorEnabled::bEnabled' has a wrong offset!");

// Function RBHotFoot.HFManager.SetSelectedActor
// 0x0008 (0x0008 - 0x0000)
struct HFManager_SetSelectedActor final
{
public:
	class AActor*                                 NewSelectedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetSelectedActor) == 0x000008, "Wrong alignment on HFManager_SetSelectedActor");
static_assert(sizeof(HFManager_SetSelectedActor) == 0x000008, "Wrong size on HFManager_SetSelectedActor");
static_assert(offsetof(HFManager_SetSelectedActor, NewSelectedActor) == 0x000000, "Member 'HFManager_SetSelectedActor::NewSelectedActor' has a wrong offset!");

// Function RBHotFoot.HFManager.SetSelectedActorsSharedPropertyValue
// 0x0020 (0x0020 - 0x0000)
struct HFManager_SetSelectedActorsSharedPropertyValue final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyValue;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetSelectedActorsSharedPropertyValue) == 0x000008, "Wrong alignment on HFManager_SetSelectedActorsSharedPropertyValue");
static_assert(sizeof(HFManager_SetSelectedActorsSharedPropertyValue) == 0x000020, "Wrong size on HFManager_SetSelectedActorsSharedPropertyValue");
static_assert(offsetof(HFManager_SetSelectedActorsSharedPropertyValue, PropertyName) == 0x000000, "Member 'HFManager_SetSelectedActorsSharedPropertyValue::PropertyName' has a wrong offset!");
static_assert(offsetof(HFManager_SetSelectedActorsSharedPropertyValue, PropertyValue) == 0x000010, "Member 'HFManager_SetSelectedActorsSharedPropertyValue::PropertyValue' has a wrong offset!");

// Function RBHotFoot.HFManager.SetShowBlockalls
// 0x0001 (0x0001 - 0x0000)
struct HFManager_SetShowBlockalls final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetShowBlockalls) == 0x000001, "Wrong alignment on HFManager_SetShowBlockalls");
static_assert(sizeof(HFManager_SetShowBlockalls) == 0x000001, "Wrong size on HFManager_SetShowBlockalls");
static_assert(offsetof(HFManager_SetShowBlockalls, bShow) == 0x000000, "Member 'HFManager_SetShowBlockalls::bShow' has a wrong offset!");

// Function RBHotFoot.HFManager.SetSnapToWorldGrid
// 0x0001 (0x0001 - 0x0000)
struct HFManager_SetSnapToWorldGrid final
{
public:
	bool                                          bNewSnapToWorldGrid;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFManager_SetSnapToWorldGrid) == 0x000001, "Wrong alignment on HFManager_SetSnapToWorldGrid");
static_assert(sizeof(HFManager_SetSnapToWorldGrid) == 0x000001, "Wrong size on HFManager_SetSnapToWorldGrid");
static_assert(offsetof(HFManager_SetSnapToWorldGrid, bNewSnapToWorldGrid) == 0x000000, "Member 'HFManager_SetSnapToWorldGrid::bNewSnapToWorldGrid' has a wrong offset!");

// Function RBHotFoot.HFManager.SpawnPlaceableActorAt
// 0x0020 (0x0020 - 0x0000)
struct HFManager_SpawnPlaceableActorAt final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HFManager_SpawnPlaceableActorAt) == 0x000008, "Wrong alignment on HFManager_SpawnPlaceableActorAt");
static_assert(sizeof(HFManager_SpawnPlaceableActorAt) == 0x000020, "Wrong size on HFManager_SpawnPlaceableActorAt");
static_assert(offsetof(HFManager_SpawnPlaceableActorAt, ActorClass) == 0x000000, "Member 'HFManager_SpawnPlaceableActorAt::ActorClass' has a wrong offset!");
static_assert(offsetof(HFManager_SpawnPlaceableActorAt, ScreenPosition) == 0x000008, "Member 'HFManager_SpawnPlaceableActorAt::ScreenPosition' has a wrong offset!");
static_assert(offsetof(HFManager_SpawnPlaceableActorAt, ActorTag) == 0x000010, "Member 'HFManager_SpawnPlaceableActorAt::ActorTag' has a wrong offset!");
static_assert(offsetof(HFManager_SpawnPlaceableActorAt, ReturnValue) == 0x000018, "Member 'HFManager_SpawnPlaceableActorAt::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFSave.OnPostSave
// 0x0001 (0x0001 - 0x0000)
struct HFSave_OnPostSave final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFSave_OnPostSave) == 0x000001, "Wrong alignment on HFSave_OnPostSave");
static_assert(sizeof(HFSave_OnPostSave) == 0x000001, "Wrong size on HFSave_OnPostSave");
static_assert(offsetof(HFSave_OnPostSave, bSuccess) == 0x000000, "Member 'HFSave_OnPostSave::bSuccess' has a wrong offset!");

// Function RBHotFoot.HFSave.GetLatestSaveGameVersion
// 0x0004 (0x0004 - 0x0000)
struct HFSave_GetLatestSaveGameVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFSave_GetLatestSaveGameVersion) == 0x000004, "Wrong alignment on HFSave_GetLatestSaveGameVersion");
static_assert(sizeof(HFSave_GetLatestSaveGameVersion) == 0x000004, "Wrong size on HFSave_GetLatestSaveGameVersion");
static_assert(offsetof(HFSave_GetLatestSaveGameVersion, ReturnValue) == 0x000000, "Member 'HFSave_GetLatestSaveGameVersion::ReturnValue' has a wrong offset!");

// Function RBHotFoot.HFSave.GetSaveGameVersion
// 0x0004 (0x0004 - 0x0000)
struct HFSave_GetSaveGameVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HFSave_GetSaveGameVersion) == 0x000004, "Wrong alignment on HFSave_GetSaveGameVersion");
static_assert(sizeof(HFSave_GetSaveGameVersion) == 0x000004, "Wrong size on HFSave_GetSaveGameVersion");
static_assert(offsetof(HFSave_GetSaveGameVersion, ReturnValue) == 0x000000, "Member 'HFSave_GetSaveGameVersion::ReturnValue' has a wrong offset!");

}

