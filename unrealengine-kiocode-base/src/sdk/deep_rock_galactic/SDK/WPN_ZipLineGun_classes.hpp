#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_ZipLineGun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WPN_ZipLineGun.WPN_ZipLineGun_C
// 0x0060 (0x0838 - 0x07D8)
class AWPN_ZipLineGun_C final : public AZipLineItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonWidgetComponent*            FirstPersonWidget;                                 // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonStaticMeshComponent*        FirstPersonStaticMesh;                             // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Muzzle_Light;                                      // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UZiplineLauncherComponent*              ZiplineLauncher;                                   // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Beam;                                              // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_t;                                           // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51FA[0x4];                                     // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_ZiplineGun_C*            Crosshair;                                         // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamDelay;                                         // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x0834(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TooFar;                                            // 0x0835(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TooClose;                                          // 0x0836(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeaponFired;                                       // 0x0837(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetGrounded(bool* OutGrounded);
	struct FVector CalcFirstPersonMuzzleLocation();
	bool CanFireWeapon(class FText* FailMsg, class UDialogDataAsset** FailShout);
	void GetCrosshair(class UHUD_Crosshair_ZiplineGun_C** Result);
	void Update_Line_Of_Sight(const struct FVector& Direction, const struct FVector& End, bool DidHit);
	void Negate(float Value, float* Result);
	void Between(float Value, float Min, float Max, bool* IsBetween);
	void Can_Fire(class FText* FailMsg, class UDialogDataAsset** FailShout, bool* CanShoot);
	struct FVector GetStartLocation();
	void LineTrace(struct FHitResult* OutHit, struct FVector* Direction, float* Distance, bool* HitAny);
	void ReceiveTick(float DeltaSeconds);
	void RecieveStopUsing();
	void RecieveEquipped();
	void AddedToInventory(class APlayerCharacter* ItemOwner);
	void ReceiveBeginPlay();
	void BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature(class UUserWidget* Param_Crosshair);
	void RecieveUnequipped();
	void BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature(const struct FVector& Location);
	void ExecuteUbergraph_WPN_ZipLineGun(int32 EntryPoint);

	void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>& Stats) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WPN_ZipLineGun_C">();
	}
	static class AWPN_ZipLineGun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWPN_ZipLineGun_C>();
	}
};
static_assert(alignof(AWPN_ZipLineGun_C) == 0x000008, "Wrong alignment on AWPN_ZipLineGun_C");
static_assert(sizeof(AWPN_ZipLineGun_C) == 0x000838, "Wrong size on AWPN_ZipLineGun_C");
static_assert(offsetof(AWPN_ZipLineGun_C, UberGraphFrame) == 0x0007D8, "Member 'AWPN_ZipLineGun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, PointLight) == 0x0007E0, "Member 'AWPN_ZipLineGun_C::PointLight' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, SpotLight) == 0x0007E8, "Member 'AWPN_ZipLineGun_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, FirstPersonWidget) == 0x0007F0, "Member 'AWPN_ZipLineGun_C::FirstPersonWidget' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, FirstPersonStaticMesh) == 0x0007F8, "Member 'AWPN_ZipLineGun_C::FirstPersonStaticMesh' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, Muzzle_Light) == 0x000800, "Member 'AWPN_ZipLineGun_C::Muzzle_Light' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, ZiplineLauncher) == 0x000808, "Member 'AWPN_ZipLineGun_C::ZiplineLauncher' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, Beam) == 0x000810, "Member 'AWPN_ZipLineGun_C::Beam' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, CrosshairAggregator) == 0x000818, "Member 'AWPN_ZipLineGun_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, Debug_t) == 0x000820, "Member 'AWPN_ZipLineGun_C::Debug_t' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, Crosshair) == 0x000828, "Member 'AWPN_ZipLineGun_C::Crosshair' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, BeamDelay) == 0x000830, "Member 'AWPN_ZipLineGun_C::BeamDelay' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, InRange) == 0x000834, "Member 'AWPN_ZipLineGun_C::InRange' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, TooFar) == 0x000835, "Member 'AWPN_ZipLineGun_C::TooFar' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, TooClose) == 0x000836, "Member 'AWPN_ZipLineGun_C::TooClose' has a wrong offset!");
static_assert(offsetof(AWPN_ZipLineGun_C, WeaponFired) == 0x000837, "Member 'AWPN_ZipLineGun_C::WeaponFired' has a wrong offset!");

}

