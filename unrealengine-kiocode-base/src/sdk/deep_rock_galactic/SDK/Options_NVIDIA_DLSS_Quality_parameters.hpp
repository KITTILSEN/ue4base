#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Options_NVIDIA_DLSS_Quality

#include "Basic.hpp"

#include "DLSSBlueprint_structs.hpp"


namespace SDK::Params
{

// Function Options_NVIDIA_DLSS_Quality.Options_NVIDIA_DLSS_Quality_C.ExecuteUbergraph_Options_NVIDIA_DLSS_Quality
// 0x00A0 (0x00A0 - 0x0000)
struct Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1064[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameUserSettings*                   CallFunc_GetFSDGameUserSettings_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDLSSMode                                    CallFunc_GetNvidiaDlssMode_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1065[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ModeToIndex_Index;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1066[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameInstance*                       CallFunc_GetFSDGameInstance_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EUDLSSMode>                            CallFunc_GetSupportedDLSSModes_ReturnValue;        // 0x0030(0x0010)(ReferenceParm)
	EUDLSSMode                                    CallFunc_Array_Get_Item;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1067[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1068[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_ComponentBoundEvent_Value;                  // 0x0050(0x0018)()
	int32                                         K2Node_ComponentBoundEvent_Index;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1069[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameInstance*                       CallFunc_GetFSDGameInstance_ReturnValue_1;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDLSSMode                                    CallFunc_IndexToMode_Mode;                         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106A[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameUserSettings*                   CallFunc_GetFSDGameUserSettings_ReturnValue_1;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	class UFSDGameUserSettings*                   CallFunc_GetFSDGameUserSettings_ReturnValue_2;     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality) == 0x000008, "Wrong alignment on Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality");
static_assert(sizeof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality) == 0x0000A0, "Wrong size on Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, EntryPoint) == 0x000000, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::EntryPoint' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetFSDGameUserSettings_ReturnValue) == 0x000008, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetFSDGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetNvidiaDlssMode_ReturnValue) == 0x000010, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetNvidiaDlssMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, Temp_int_Array_Index_Variable) == 0x000014, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_ModeToIndex_Index) == 0x000018, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_ModeToIndex_Index' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetFSDGameInstance_ReturnValue) == 0x000028, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetFSDGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetSupportedDLSSModes_ReturnValue) == 0x000030, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetSupportedDLSSModes_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_Array_Get_Item) == 0x000040, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000048, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00004A, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_BooleanAND_ReturnValue) == 0x00004B, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, K2Node_ComponentBoundEvent_Value) == 0x000050, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, K2Node_ComponentBoundEvent_Index) == 0x000068, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::K2Node_ComponentBoundEvent_Index' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetFSDGameInstance_ReturnValue_1) == 0x000070, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetFSDGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_IndexToMode_Mode) == 0x000078, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_IndexToMode_Mode' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetFSDGameUserSettings_ReturnValue_1) == 0x000080, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetFSDGameUserSettings_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, K2Node_CreateDelegate_OutputDelegate) == 0x000088, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality, CallFunc_GetFSDGameUserSettings_ReturnValue_2) == 0x000098, "Member 'Options_NVIDIA_DLSS_Quality_C_ExecuteUbergraph_Options_NVIDIA_DLSS_Quality::CallFunc_GetFSDGameUserSettings_ReturnValue_2' has a wrong offset!");

// Function Options_NVIDIA_DLSS_Quality.Options_NVIDIA_DLSS_Quality_C.BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Param_Index;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature) == 0x000008, "Wrong alignment on Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature");
static_assert(sizeof(Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature) == 0x000020, "Wrong size on Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature, Value) == 0x000000, "Member 'Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature::Value' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature, Param_Index) == 0x000018, "Member 'Options_NVIDIA_DLSS_Quality_C_BndEvt__Options_NVIDIA_DLSS_Quality_Basic_OptionSwitcher_K2Node_ComponentBoundEvent_0_OnSelectionChanged__DelegateSignature::Param_Index' has a wrong offset!");

// Function Options_NVIDIA_DLSS_Quality.Options_NVIDIA_DLSS_Quality_C.GetDLSSModeName
// 0x0100 (0x0100 - 0x0000)
struct Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName final
{
public:
	EUDLSSMode                                    Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Param_Name;                                        // 0x0008(0x0018)(Parm, OutParm)
	EUDLSSMode                                    Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00B8(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D0(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00E8(0x0018)()
};
static_assert(alignof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName) == 0x000008, "Wrong alignment on Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName");
static_assert(sizeof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName) == 0x000100, "Wrong size on Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Mode) == 0x000000, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Mode' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Param_Name) == 0x000008, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Param_Name' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_byte_Variable) == 0x000020, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable) == 0x000028, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_1) == 0x000040, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_2) == 0x000058, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_3) == 0x000070, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_4) == 0x000088, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_5) == 0x0000A0, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_6) == 0x0000B8, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, Temp_text_Variable_7) == 0x0000D0, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName, K2Node_Select_Default) == 0x0000E8, "Member 'Options_NVIDIA_DLSS_Quality_C_GetDLSSModeName::K2Node_Select_Default' has a wrong offset!");

// Function Options_NVIDIA_DLSS_Quality.Options_NVIDIA_DLSS_Quality_C.IndexToMode
// 0x0010 (0x0010 - 0x0000)
struct Options_NVIDIA_DLSS_Quality_C_IndexToMode final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDLSSMode                                    Mode;                                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDLSSMode                                    CallFunc_Array_Get_Item;                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_NVIDIA_DLSS_Quality_C_IndexToMode) == 0x000004, "Wrong alignment on Options_NVIDIA_DLSS_Quality_C_IndexToMode");
static_assert(sizeof(Options_NVIDIA_DLSS_Quality_C_IndexToMode) == 0x000010, "Wrong size on Options_NVIDIA_DLSS_Quality_C_IndexToMode");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_IndexToMode, Param_Index) == 0x000000, "Member 'Options_NVIDIA_DLSS_Quality_C_IndexToMode::Param_Index' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_IndexToMode, Mode) == 0x000004, "Member 'Options_NVIDIA_DLSS_Quality_C_IndexToMode::Mode' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_IndexToMode, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'Options_NVIDIA_DLSS_Quality_C_IndexToMode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_IndexToMode, CallFunc_Array_Get_Item) == 0x00000C, "Member 'Options_NVIDIA_DLSS_Quality_C_IndexToMode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_IndexToMode, CallFunc_Less_IntInt_ReturnValue) == 0x00000D, "Member 'Options_NVIDIA_DLSS_Quality_C_IndexToMode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Options_NVIDIA_DLSS_Quality.Options_NVIDIA_DLSS_Quality_C.ModeToIndex
// 0x001C (0x001C - 0x0000)
struct Options_NVIDIA_DLSS_Quality_C_ModeToIndex final
{
public:
	EUDLSSMode                                    Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDLSSMode                                    CallFunc_Array_Get_Item;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex) == 0x000004, "Wrong alignment on Options_NVIDIA_DLSS_Quality_C_ModeToIndex");
static_assert(sizeof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex) == 0x00001C, "Wrong size on Options_NVIDIA_DLSS_Quality_C_ModeToIndex");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, Mode) == 0x000000, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::Mode' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, Param_Index) == 0x000004, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, CallFunc_Array_Get_Item) == 0x000018, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000019, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_ModeToIndex, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'Options_NVIDIA_DLSS_Quality_C_ModeToIndex::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function Options_NVIDIA_DLSS_Quality.Options_NVIDIA_DLSS_Quality_C.Add Index
// 0x0028 (0x0028 - 0x0000)
struct Options_NVIDIA_DLSS_Quality_C_Add_Index final
{
public:
	EUDLSSMode                                    Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDLSSModeName_Name;                     // 0x0008(0x0018)()
	int32                                         CallFunc_Add_Option_Index;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Options_NVIDIA_DLSS_Quality_C_Add_Index) == 0x000008, "Wrong alignment on Options_NVIDIA_DLSS_Quality_C_Add_Index");
static_assert(sizeof(Options_NVIDIA_DLSS_Quality_C_Add_Index) == 0x000028, "Wrong size on Options_NVIDIA_DLSS_Quality_C_Add_Index");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_Add_Index, Mode) == 0x000000, "Member 'Options_NVIDIA_DLSS_Quality_C_Add_Index::Mode' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_Add_Index, CallFunc_GetDLSSModeName_Name) == 0x000008, "Member 'Options_NVIDIA_DLSS_Quality_C_Add_Index::CallFunc_GetDLSSModeName_Name' has a wrong offset!");
static_assert(offsetof(Options_NVIDIA_DLSS_Quality_C_Add_Index, CallFunc_Add_Option_Index) == 0x000020, "Member 'Options_NVIDIA_DLSS_Quality_C_Add_Index::CallFunc_Add_Option_Index' has a wrong offset!");

}

