#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PRJ_NormalBlasterShot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PRJ_NormalBlasterShot.PRJ_NormalBlasterShot_C
// 0x0040 (0x0380 - 0x0340)
class APRJ_NormalBlasterShot_C final : public AProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UProjectileExplosion*                   ProjectileExplosionSplash;                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileExplosion*                   BurningPlasmaProjectileExplosion;                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileExplosion*                   ProjectileExplosion;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       Damage;                                            // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxBounces;                                        // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HotPlasma;                                         // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnImpacted(bool PredictedImpact, const struct FHitResult& HitResult);
	void MakeBouncy();
	void BndEvt__MovementComponent_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void DoEffects(const struct FVector& Location, const struct FVector& Normal);
	void CustomEvent(const class UItemUpgrade* Event);
	void BndEvt__CollisionComponent_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_PRJ_NormalBlasterShot(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PRJ_NormalBlasterShot_C">();
	}
	static class APRJ_NormalBlasterShot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APRJ_NormalBlasterShot_C>();
	}
};
static_assert(alignof(APRJ_NormalBlasterShot_C) == 0x000008, "Wrong alignment on APRJ_NormalBlasterShot_C");
static_assert(sizeof(APRJ_NormalBlasterShot_C) == 0x000380, "Wrong size on APRJ_NormalBlasterShot_C");
static_assert(offsetof(APRJ_NormalBlasterShot_C, UberGraphFrame) == 0x000340, "Member 'APRJ_NormalBlasterShot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, ProjectileExplosionSplash) == 0x000348, "Member 'APRJ_NormalBlasterShot_C::ProjectileExplosionSplash' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, BurningPlasmaProjectileExplosion) == 0x000350, "Member 'APRJ_NormalBlasterShot_C::BurningPlasmaProjectileExplosion' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, ProjectileExplosion) == 0x000358, "Member 'APRJ_NormalBlasterShot_C::ProjectileExplosion' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, Damage) == 0x000360, "Member 'APRJ_NormalBlasterShot_C::Damage' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, PointLight) == 0x000368, "Member 'APRJ_NormalBlasterShot_C::PointLight' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, StaticMesh) == 0x000370, "Member 'APRJ_NormalBlasterShot_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, MaxBounces) == 0x000378, "Member 'APRJ_NormalBlasterShot_C::MaxBounces' has a wrong offset!");
static_assert(offsetof(APRJ_NormalBlasterShot_C, HotPlasma) == 0x00037C, "Member 'APRJ_NormalBlasterShot_C::HotPlasma' has a wrong offset!");

}

