#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITM_DragRotateCharacterShowroom

#include "Basic.hpp"

#include "ITM_DragRotateCharacterShowroom_classes.hpp"
#include "ITM_DragRotateCharacterShowroom_parameters.hpp"


namespace SDK
{

// Function ITM_DragRotateCharacterShowroom.ITM_DragRotateCharacterShowroom_C.ExecuteUbergraph_ITM_DragRotateCharacterShowroom
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UITM_DragRotateCharacterShowroom_C::ExecuteUbergraph_ITM_DragRotateCharacterShowroom(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ITM_DragRotateCharacterShowroom_C", "ExecuteUbergraph_ITM_DragRotateCharacterShowroom");

	Params::ITM_DragRotateCharacterShowroom_C_ExecuteUbergraph_ITM_DragRotateCharacterShowroom Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ITM_DragRotateCharacterShowroom.ITM_DragRotateCharacterShowroom_C.OnShowCharacterSelectorRotate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UITM_DragRotateCharacterShowroom_C::OnShowCharacterSelectorRotate(float Pitch, float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ITM_DragRotateCharacterShowroom_C", "OnShowCharacterSelectorRotate");

	Params::ITM_DragRotateCharacterShowroom_C_OnShowCharacterSelectorRotate Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ITM_DragRotateCharacterShowroom.ITM_DragRotateCharacterShowroom_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UITM_DragRotateCharacterShowroom_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ITM_DragRotateCharacterShowroom_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ITM_DragRotateCharacterShowroom.ITM_DragRotateCharacterShowroom_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UITM_DragRotateCharacterShowroom_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ITM_DragRotateCharacterShowroom_C", "OnMouseMove");

	Params::ITM_DragRotateCharacterShowroom_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ITM_DragRotateCharacterShowroom.ITM_DragRotateCharacterShowroom_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UITM_DragRotateCharacterShowroom_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ITM_DragRotateCharacterShowroom_C", "OnMouseButtonDown");

	Params::ITM_DragRotateCharacterShowroom_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ITM_DragRotateCharacterShowroom.ITM_DragRotateCharacterShowroom_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UITM_DragRotateCharacterShowroom_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ITM_DragRotateCharacterShowroom_C", "OnMouseButtonUp");

	Params::ITM_DragRotateCharacterShowroom_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

