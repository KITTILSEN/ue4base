#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_LockOnRifle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WPN_LockOnRifle.WPN_LockOnRifle_C
// 0x0078 (0x09D0 - 0x0958)
class AWPN_LockOnRifle_C final : public ALockOnWeapon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0958(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFirstPersonStaticMeshComponent*        Mag_FP;                                            // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mag_TP;                                            // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BeamStart;                                         // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LockOnRifleHUDDeActivated_Cue;                     // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LockOnRifleHUDActivated_Cue;                       // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LockOnRifleLocked_Cue;                             // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       Damage;                                            // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHitscanComponent*                      HitScan;                                           // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonWidgetComponent*            FirstPersonWidget;                                 // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UABP_LockOnRifle_A_C*>           ABPs;                                              // 0x09B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          WideAngle;                                         // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpeedBoost;                                        // 0x09C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3236[0x6];                                     // 0x09C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SpeedBoostSTE;                                     // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void LockingStarted_Event();
	void LockingStopped_Event();
	void CustomEvent1(const class UItemUpgrade* Event);
	void Recieve_UpdateMeshses(bool Param_IsFirstPerson);
	void RecieveEquipped();
	void OnSkinChanged(class USkinEffect* Skin);
	void Receive_ReloadBegin();
	void Receive_ReloadEnd();
	void ExecuteUbergraph_WPN_LockOnRifle(int32 EntryPoint);

	void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>& Stats) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WPN_LockOnRifle_C">();
	}
	static class AWPN_LockOnRifle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWPN_LockOnRifle_C>();
	}
};
static_assert(alignof(AWPN_LockOnRifle_C) == 0x000008, "Wrong alignment on AWPN_LockOnRifle_C");
static_assert(sizeof(AWPN_LockOnRifle_C) == 0x0009D0, "Wrong size on AWPN_LockOnRifle_C");
static_assert(offsetof(AWPN_LockOnRifle_C, UberGraphFrame) == 0x000958, "Member 'AWPN_LockOnRifle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, Mag_FP) == 0x000960, "Member 'AWPN_LockOnRifle_C::Mag_FP' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, Mag_TP) == 0x000968, "Member 'AWPN_LockOnRifle_C::Mag_TP' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, BeamStart) == 0x000970, "Member 'AWPN_LockOnRifle_C::BeamStart' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, LockOnRifleHUDDeActivated_Cue) == 0x000978, "Member 'AWPN_LockOnRifle_C::LockOnRifleHUDDeActivated_Cue' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, LockOnRifleHUDActivated_Cue) == 0x000980, "Member 'AWPN_LockOnRifle_C::LockOnRifleHUDActivated_Cue' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, LockOnRifleLocked_Cue) == 0x000988, "Member 'AWPN_LockOnRifle_C::LockOnRifleLocked_Cue' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, CrosshairAggregator) == 0x000990, "Member 'AWPN_LockOnRifle_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, Damage) == 0x000998, "Member 'AWPN_LockOnRifle_C::Damage' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, HitScan) == 0x0009A0, "Member 'AWPN_LockOnRifle_C::HitScan' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, FirstPersonWidget) == 0x0009A8, "Member 'AWPN_LockOnRifle_C::FirstPersonWidget' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, ABPs) == 0x0009B0, "Member 'AWPN_LockOnRifle_C::ABPs' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, WideAngle) == 0x0009C0, "Member 'AWPN_LockOnRifle_C::WideAngle' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, SpeedBoost) == 0x0009C1, "Member 'AWPN_LockOnRifle_C::SpeedBoost' has a wrong offset!");
static_assert(offsetof(AWPN_LockOnRifle_C, SpeedBoostSTE) == 0x0009C8, "Member 'AWPN_LockOnRifle_C::SpeedBoostSTE' has a wrong offset!");

}

