#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_MicroMissileLauncher

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WeaponDisplay_Base_AmmoCount_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponDisplay_MicroMissileLauncher.WeaponDisplay_MicroMissileLauncher_C
// 0x00C0 (0x0340 - 0x0280)
class UWeaponDisplay_MicroMissileLauncher_C final : public UWeaponDisplay_Base_AmmoCount_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WeaponDisplay_MicroMissileLauncher_C; // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             AmmoCount;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ChargeBox;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_88;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MaxAmmo;                                           // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge;                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_1;                  // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_2;                  // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_3;                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_4;                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_5;                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_6;                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_7;                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_8;                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_9;                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_10;                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MicroMissileLauncher_Charge_C*      UI_MicroMissileLauncher_Charge_11;                 // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AMicroMissileLauncher*                  MissileLauncherItem;                               // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUI_MicroMissileLauncher_Charge_C*> ChargeIcons;                                       // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTimerHandle                           ChargingHandle;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCharge;                                     // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ClipCount;                                         // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Charging;                                          // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43A0[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        PingAudio;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetCurrentChargeWithAudio(int32 InCharge);
	void SetTotalCount(int32 Value);
	void SetClipCount(int32 Value);
	void InitializeAmmoWidget(class AItem* OwningItem, class UWidgetComponent* WidgetComp);
	void OnStartCharging();
	void OnEndCharging();
	void OnUpdateCharging();
	void Construct();
	void ResetChargingUI(bool InHideIcons);
	void ExecuteUbergraph_WeaponDisplay_MicroMissileLauncher(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponDisplay_MicroMissileLauncher_C">();
	}
	static class UWeaponDisplay_MicroMissileLauncher_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponDisplay_MicroMissileLauncher_C>();
	}
};
static_assert(alignof(UWeaponDisplay_MicroMissileLauncher_C) == 0x000008, "Wrong alignment on UWeaponDisplay_MicroMissileLauncher_C");
static_assert(sizeof(UWeaponDisplay_MicroMissileLauncher_C) == 0x000340, "Wrong size on UWeaponDisplay_MicroMissileLauncher_C");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UberGraphFrame_WeaponDisplay_MicroMissileLauncher_C) == 0x000280, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UberGraphFrame_WeaponDisplay_MicroMissileLauncher_C' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, AmmoCount) == 0x000288, "Member 'UWeaponDisplay_MicroMissileLauncher_C::AmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, ChargeBox) == 0x000290, "Member 'UWeaponDisplay_MicroMissileLauncher_C::ChargeBox' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, Image_88) == 0x000298, "Member 'UWeaponDisplay_MicroMissileLauncher_C::Image_88' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, MaxAmmo) == 0x0002A0, "Member 'UWeaponDisplay_MicroMissileLauncher_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge) == 0x0002A8, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_1) == 0x0002B0, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_1' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_2) == 0x0002B8, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_2' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_3) == 0x0002C0, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_3' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_4) == 0x0002C8, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_4' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_5) == 0x0002D0, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_5' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_6) == 0x0002D8, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_6' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_7) == 0x0002E0, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_7' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_8) == 0x0002E8, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_8' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_9) == 0x0002F0, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_9' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_10) == 0x0002F8, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_10' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, UI_MicroMissileLauncher_Charge_11) == 0x000300, "Member 'UWeaponDisplay_MicroMissileLauncher_C::UI_MicroMissileLauncher_Charge_11' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, MissileLauncherItem) == 0x000308, "Member 'UWeaponDisplay_MicroMissileLauncher_C::MissileLauncherItem' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, ChargeIcons) == 0x000310, "Member 'UWeaponDisplay_MicroMissileLauncher_C::ChargeIcons' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, ChargingHandle) == 0x000320, "Member 'UWeaponDisplay_MicroMissileLauncher_C::ChargingHandle' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, CurrentCharge) == 0x000328, "Member 'UWeaponDisplay_MicroMissileLauncher_C::CurrentCharge' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, ClipCount) == 0x00032C, "Member 'UWeaponDisplay_MicroMissileLauncher_C::ClipCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, Charging) == 0x000330, "Member 'UWeaponDisplay_MicroMissileLauncher_C::Charging' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_MicroMissileLauncher_C, PingAudio) == 0x000338, "Member 'UWeaponDisplay_MicroMissileLauncher_C::PingAudio' has a wrong offset!");

}

