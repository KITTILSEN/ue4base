#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_AvailablePerkPoints

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_AvailablePerkPoints.UI_AvailablePerkPoints_C
// 0x0040 (0x02A0 - 0x0260)
class UUI_AvailablePerkPoints_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       PingAnim;                                          // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             AmountText;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                IconSpacer;                                        // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PerkIcon;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         FontSize;                                          // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Image_Size;                                        // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spacing;                                           // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPerkPoints;                                 // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetPerkPoints;                                  // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoCountAnimation;                                  // 0x029C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CountPerkPoints(float DeltaTime);
	void SetPerkPointsText(int32 Points);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void OnPerkPointsChanged(int32 PerkPoints, int32 Change);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnPingAnimFinished();
	void ExecuteUbergraph_UI_AvailablePerkPoints(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_AvailablePerkPoints_C">();
	}
	static class UUI_AvailablePerkPoints_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_AvailablePerkPoints_C>();
	}
};
static_assert(alignof(UUI_AvailablePerkPoints_C) == 0x000008, "Wrong alignment on UUI_AvailablePerkPoints_C");
static_assert(sizeof(UUI_AvailablePerkPoints_C) == 0x0002A0, "Wrong size on UUI_AvailablePerkPoints_C");
static_assert(offsetof(UUI_AvailablePerkPoints_C, UberGraphFrame) == 0x000260, "Member 'UUI_AvailablePerkPoints_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, PingAnim) == 0x000268, "Member 'UUI_AvailablePerkPoints_C::PingAnim' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, AmountText) == 0x000270, "Member 'UUI_AvailablePerkPoints_C::AmountText' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, IconSpacer) == 0x000278, "Member 'UUI_AvailablePerkPoints_C::IconSpacer' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, PerkIcon) == 0x000280, "Member 'UUI_AvailablePerkPoints_C::PerkIcon' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, FontSize) == 0x000288, "Member 'UUI_AvailablePerkPoints_C::FontSize' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, Image_Size) == 0x00028C, "Member 'UUI_AvailablePerkPoints_C::Image_Size' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, Spacing) == 0x000290, "Member 'UUI_AvailablePerkPoints_C::Spacing' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, CurrentPerkPoints) == 0x000294, "Member 'UUI_AvailablePerkPoints_C::CurrentPerkPoints' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, TargetPerkPoints) == 0x000298, "Member 'UUI_AvailablePerkPoints_C::TargetPerkPoints' has a wrong offset!");
static_assert(offsetof(UUI_AvailablePerkPoints_C, DoCountAnimation) == 0x00029C, "Member 'UUI_AvailablePerkPoints_C::DoCountAnimation' has a wrong offset!");

}

