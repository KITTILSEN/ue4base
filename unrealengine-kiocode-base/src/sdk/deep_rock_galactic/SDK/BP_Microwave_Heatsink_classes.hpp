#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Microwave_Heatsink

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FSD_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Microwave_Heatsink.BP_Microwave_Heatsink_C
// 0x0078 (0x0298 - 0x0220)
class ABP_Microwave_Heatsink_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UExplosionComponent*                    Explosion;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       Damage;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USimpleHealthComponent*                 SimpleHealth;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Steam;                                           // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HeatRadius;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Collision;                                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Brightness_5A2B78D649E3C1F0338A2C84B8669952; // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_5A2B78D649E3C1F0338A2C84B8669952; // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5474[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeoutTime;                                       // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5475[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParamEmmisiveMultiplier;                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void TurnOff();
	void BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature(class UHealthComponentBase* HealthComponent);
	void ExecuteUbergraph_BP_Microwave_Heatsink(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Microwave_Heatsink_C">();
	}
	static class ABP_Microwave_Heatsink_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Microwave_Heatsink_C>();
	}
};
static_assert(alignof(ABP_Microwave_Heatsink_C) == 0x000008, "Wrong alignment on ABP_Microwave_Heatsink_C");
static_assert(sizeof(ABP_Microwave_Heatsink_C) == 0x000298, "Wrong size on ABP_Microwave_Heatsink_C");
static_assert(offsetof(ABP_Microwave_Heatsink_C, UberGraphFrame) == 0x000220, "Member 'ABP_Microwave_Heatsink_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, Explosion) == 0x000228, "Member 'ABP_Microwave_Heatsink_C::Explosion' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, Damage) == 0x000230, "Member 'ABP_Microwave_Heatsink_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, SimpleHealth) == 0x000238, "Member 'ABP_Microwave_Heatsink_C::SimpleHealth' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, PointLight) == 0x000240, "Member 'ABP_Microwave_Heatsink_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, P_Steam) == 0x000248, "Member 'ABP_Microwave_Heatsink_C::P_Steam' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, HeatRadius) == 0x000250, "Member 'ABP_Microwave_Heatsink_C::HeatRadius' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, StaticMesh) == 0x000258, "Member 'ABP_Microwave_Heatsink_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, Collision) == 0x000260, "Member 'ABP_Microwave_Heatsink_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, Timeline_0_Brightness_5A2B78D649E3C1F0338A2C84B8669952) == 0x000268, "Member 'ABP_Microwave_Heatsink_C::Timeline_0_Brightness_5A2B78D649E3C1F0338A2C84B8669952' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, Timeline_0__Direction_5A2B78D649E3C1F0338A2C84B8669952) == 0x00026C, "Member 'ABP_Microwave_Heatsink_C::Timeline_0__Direction_5A2B78D649E3C1F0338A2C84B8669952' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, Timeline_0) == 0x000270, "Member 'ABP_Microwave_Heatsink_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, TimeoutTime) == 0x000278, "Member 'ABP_Microwave_Heatsink_C::TimeoutTime' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, DynamicMaterial) == 0x000280, "Member 'ABP_Microwave_Heatsink_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, ParamEmmisiveMultiplier) == 0x000288, "Member 'ABP_Microwave_Heatsink_C::ParamEmmisiveMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Microwave_Heatsink_C, IsActive) == 0x000290, "Member 'ABP_Microwave_Heatsink_C::IsActive' has a wrong offset!");

}

