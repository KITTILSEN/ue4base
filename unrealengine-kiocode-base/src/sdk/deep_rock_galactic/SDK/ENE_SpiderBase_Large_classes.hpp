#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ENE_SpiderBase_Large

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "Spider_DeathType_structs.hpp"
#include "ENE_PF_SpiderBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ENE_SpiderBase_Large.ENE_SpiderBase_Large_C
// 0x0078 (0x04E0 - 0x0468)
class AENE_SpiderBase_Large_C : public AENE_PF_SpiderBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ENE_SpiderBase_Large_C;             // 0x0468(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        GlyphidPraetorianIdle_Cue;                         // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DropShadow;                                        // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollImpulseSpeed;                               // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4824[0x4];                                     // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         HeadshotParticle;                                  // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FrontLegGib;                                       // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HeadGibSound;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpider_DeathType                             DeathType;                                         // 0x04A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4825[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   HeadGoreMesh;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DissolveDelay;                                     // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4826[0x4];                                     // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         GibParticles;                                      // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULimbDismembermentList*                 LimbDismemberment;                                 // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemAsset*                         ChemExplosionParticles;                            // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdolEnabled;                                     // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4827[0x7];                                     // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RagdollTimer;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CalcDissolveDelay(float* Delay);
	void FindChemicalArrow(class ACrossbowProjectileStuck** ChemicalArrow);
	void GetFXMeshScale(float* Scale);
	void HandleWeapointDeath(struct FDamageData& DamageData, TArray<class UDamageTag*>& Param_Tags);
	void HandleNormalDeath(struct FDamageData& DamageData, TArray<class UDamageTag*>& Param_Tags);
	struct FVector GetImpactImpulse(EImpulseDirectionSource Selection, struct FDamageData& DamageData, float UpForceScale);
	void SetDeathAnimationCategory(ESpiderDeathAnimationCategory Category);
	void SetCookMaterialSettings();
	void SetBurnMaterialSettings();
	void FindClosestBone(const struct FVector& Location, class FName* Bone);
	int32 DismemberLegs(const struct FVector& Location);
	bool ShouldMelt(const TArray<class UDamageTag*>& TargetArray, class UDamageClass* DamageClass);
	void IsWeakPointDeath(class UFSDPhysicalMaterial* Material, bool* IsWeakPoint);
	void GetEnemySpawnedCount(int32* SpawnCount);
	void SetAnimatedDeathType(int32 AnimationIndex);
	void TrySelectDeathAnimation(bool WasWeakpoint, int32* AnimationIndex, bool* HasSelectedAnimation);
	void SetDeathType(ESpider_DeathType Param_DeathType);
	void OnRep_DeathType();
	void SpawnLeg(class FName InSocketName);
	void SetRagdollImpulse(struct FDamageData& DamageData, TArray<class UDamageTag*>& Param_Tags);
	void UserConstructionScript();
	void OnUnFrozen();
	void Play_Burn_Death();
	void StartDissolve();
	void Play_Frozen_Death();
	void StartBurn();
	void OnFrozen(class AActor* Source);
	void Play_Body_Death_Effects();
	void SpawnLegGib_Local();
	void SendRagdollImpulse(const struct FVector_NetQuantize& Impulse, uint8 BoneIndex);
	void PlayAnimatedDeath(int32 AnimationIndex);
	void ExplodedDeath();
	void StartFadeBody();
	void TrySpawnEnemies();
	void BurrowingEscape();
	void GibbedDeath();
	void DeathDetailedBase(float Amount, const struct FDamageData& DamageData, const TArray<class UDamageTag*>& Param_Tags);
	void MakeElite();
	void CorrosiveDeath();
	void SpawnLegGib();
	void StartCorrosiveDissovle();
	void Cooked_Death();
	void All_Ragdoll(const struct FVector_NetQuantize& Impulse, const struct FVector_NetQuantize& Location, uint8 BoneIndex, uint8 LimbIndex);
	void BreakLimb(uint8 BoneIndex);
	void BndEvt__ENE_SpiderBase_Large_HealthComponent_K2Node_ComponentBoundEvent_0_DeathSigDetailed__DelegateSignature(class UHealthComponent* Param_HealthComponent, float DamageAmount, const struct FDamageData& DamageData, const TArray<class UDamageTag*>& Param_Tags);
	void ChangeVisibility(bool bNewVisibility);
	void Spawn_Headshot_Gibs(ESpider_DeathType Param_DeathType);
	void OnRagdoll();
	void ChemicalExplosionDeath();
	void OnDeathBase();
	void PlasmaExplosionDeath();
	void OnTriggerFadeRagdoll();
	void DissolveAfterRagdoll();
	void TriggerDissolve();
	void ExecuteUbergraph_ENE_SpiderBase_Large(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ENE_SpiderBase_Large_C">();
	}
	static class AENE_SpiderBase_Large_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AENE_SpiderBase_Large_C>();
	}
};
static_assert(alignof(AENE_SpiderBase_Large_C) == 0x000008, "Wrong alignment on AENE_SpiderBase_Large_C");
static_assert(sizeof(AENE_SpiderBase_Large_C) == 0x0004E0, "Wrong size on AENE_SpiderBase_Large_C");
static_assert(offsetof(AENE_SpiderBase_Large_C, UberGraphFrame_ENE_SpiderBase_Large_C) == 0x000468, "Member 'AENE_SpiderBase_Large_C::UberGraphFrame_ENE_SpiderBase_Large_C' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, GlyphidPraetorianIdle_Cue) == 0x000470, "Member 'AENE_SpiderBase_Large_C::GlyphidPraetorianIdle_Cue' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, DropShadow) == 0x000478, "Member 'AENE_SpiderBase_Large_C::DropShadow' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, RagdollImpulseSpeed) == 0x000480, "Member 'AENE_SpiderBase_Large_C::RagdollImpulseSpeed' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, HeadshotParticle) == 0x000488, "Member 'AENE_SpiderBase_Large_C::HeadshotParticle' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, FrontLegGib) == 0x000490, "Member 'AENE_SpiderBase_Large_C::FrontLegGib' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, HeadGibSound) == 0x000498, "Member 'AENE_SpiderBase_Large_C::HeadGibSound' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, DeathType) == 0x0004A0, "Member 'AENE_SpiderBase_Large_C::DeathType' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, HeadGoreMesh) == 0x0004A8, "Member 'AENE_SpiderBase_Large_C::HeadGoreMesh' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, DissolveDelay) == 0x0004B0, "Member 'AENE_SpiderBase_Large_C::DissolveDelay' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, GibParticles) == 0x0004B8, "Member 'AENE_SpiderBase_Large_C::GibParticles' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, LimbDismemberment) == 0x0004C0, "Member 'AENE_SpiderBase_Large_C::LimbDismemberment' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, ChemExplosionParticles) == 0x0004C8, "Member 'AENE_SpiderBase_Large_C::ChemExplosionParticles' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, RagdolEnabled) == 0x0004D0, "Member 'AENE_SpiderBase_Large_C::RagdolEnabled' has a wrong offset!");
static_assert(offsetof(AENE_SpiderBase_Large_C, RagdollTimer) == 0x0004D8, "Member 'AENE_SpiderBase_Large_C::RagdollTimer' has a wrong offset!");

}

