#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Zhukov_IceMines

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Zhukov_IceMines.BP_Zhukov_IceMines_C
// 0x0070 (0x0290 - 0x0220)
class ABP_Zhukov_IceMines_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExplosionComponent*                    Explosion;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Area_Trigger;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       Damage;                                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Triggered;                                         // 0x0258(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Exploded;                                          // 0x0259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_357B[0x6];                                     // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ExplosionSound;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ExplosionParticles;                                // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundMix*                              ExplosionMixModifier;                              // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionDuckMinDistance;                          // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionDuckMaxDistance;                          // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionDuckingTime;                              // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ready;                                             // 0x0284(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_357C[0x3];                                     // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmingDelay;                                       // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnRep_Ready();
	void OnRep_Triggered();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void BndEvt__Area_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void TriggerExplosion();
	void GetArmed();
	void ExecuteUbergraph_BP_Zhukov_IceMines(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Zhukov_IceMines_C">();
	}
	static class ABP_Zhukov_IceMines_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Zhukov_IceMines_C>();
	}
};
static_assert(alignof(ABP_Zhukov_IceMines_C) == 0x000008, "Wrong alignment on ABP_Zhukov_IceMines_C");
static_assert(sizeof(ABP_Zhukov_IceMines_C) == 0x000290, "Wrong size on ABP_Zhukov_IceMines_C");
static_assert(offsetof(ABP_Zhukov_IceMines_C, UberGraphFrame) == 0x000220, "Member 'ABP_Zhukov_IceMines_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, PointLight) == 0x000228, "Member 'ABP_Zhukov_IceMines_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Explosion) == 0x000230, "Member 'ABP_Zhukov_IceMines_C::Explosion' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Area_Trigger) == 0x000238, "Member 'ABP_Zhukov_IceMines_C::Area_Trigger' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Damage) == 0x000240, "Member 'ABP_Zhukov_IceMines_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Sphere) == 0x000248, "Member 'ABP_Zhukov_IceMines_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_Zhukov_IceMines_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Triggered) == 0x000258, "Member 'ABP_Zhukov_IceMines_C::Triggered' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Exploded) == 0x000259, "Member 'ABP_Zhukov_IceMines_C::Exploded' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ExplosionSound) == 0x000260, "Member 'ABP_Zhukov_IceMines_C::ExplosionSound' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ExplosionParticles) == 0x000268, "Member 'ABP_Zhukov_IceMines_C::ExplosionParticles' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ExplosionMixModifier) == 0x000270, "Member 'ABP_Zhukov_IceMines_C::ExplosionMixModifier' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ExplosionDuckMinDistance) == 0x000278, "Member 'ABP_Zhukov_IceMines_C::ExplosionDuckMinDistance' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ExplosionDuckMaxDistance) == 0x00027C, "Member 'ABP_Zhukov_IceMines_C::ExplosionDuckMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ExplosionDuckingTime) == 0x000280, "Member 'ABP_Zhukov_IceMines_C::ExplosionDuckingTime' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, Ready) == 0x000284, "Member 'ABP_Zhukov_IceMines_C::Ready' has a wrong offset!");
static_assert(offsetof(ABP_Zhukov_IceMines_C, ArmingDelay) == 0x000288, "Member 'ABP_Zhukov_IceMines_C::ArmingDelay' has a wrong offset!");

}

