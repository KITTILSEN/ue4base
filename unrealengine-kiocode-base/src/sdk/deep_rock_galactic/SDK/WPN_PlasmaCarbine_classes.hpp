#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_PlasmaCarbine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WPN_PlasmaCarbine.WPN_PlasmaCarbine_C
// 0x0088 (0x0878 - 0x07F0)
class AWPN_PlasmaCarbine_C final : public APlasmaCarbine
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHeatMaterialComponent*                 HeatMaterial;                                      // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       AoEDamageComponent;                                // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OverHeatSound;                                     // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonWidgetComponent*            FirstPersonWidget_Ammo;                            // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileLauncherComponent*           ProjectileLauncher;                                // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Overheat_Ammo_Regen_Effect_6788C26846C5EA00DB58E08FBF311673; // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Overheat_Ammo_Regen__Direction_6788C26846C5EA00DB58E08FBF311673; // 0x082C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4271[0x3];                                     // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Overheat_Ammo_Regen;                               // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverHeat;                                          // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasOverheated;                                     // 0x083C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RegenAmmoOnOverheat;                               // 0x083D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AoeOnOverheat;                                     // 0x083E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4272[0x1];                                     // 0x083F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmmoResupplyProgress;                              // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpeedBoostOnOverheat;                              // 0x0844(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4273[0x3];                                     // 0x0845(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SpeedBoostOnOverheatSTE;                           // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverheatAoEMaxDMG;                                 // 0x0850(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverheatAoEDamageRadius;                           // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldRoF;                                            // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TermalFeedbackLoop;                                // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4274[0x3];                                     // 0x085D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeatAtRegenTrigger;                                // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExplosiveReload;                                   // 0x0864(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverheatOnReload;                                  // 0x0865(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4275[0x2];                                     // 0x0866(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosiveReloadDelay;                              // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4276[0x4];                                     // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCharacter*                       OwningPlayer;                                      // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetAmmoWidget(class UWeaponDisplay_PlasmaCarbine_AmmoCounter_C** AsWeapon_Display_Plasma_Carbine_Ammo_Counter);
	void SetUpgradesAndOverclocks(class UItemUpgrade* ItemUpgrade);
	void UserConstructionScript();
	void Overheat_Ammo_Regen__FinishedFunc();
	void Overheat_Ammo_Regen__UpdateFunc();
	void ReceiveBeginPlay();
	void CustomEvent1(const class UItemUpgrade* Event);
	void OnTemperatureChanged(float Temperature, bool Param_Overheated);
	void Receive_IsFiringChanged(bool NewValue);
	void Receive_Overheated();
	void RecieveStartUsing();
	void Server_Trigger_Aoe();
	void Trigger_Aoe_Effects();
	void ServerPushSpeedBoost();
	void OnSkinChanged(class USkinEffect* Skin);
	void ExecuteUbergraph_WPN_PlasmaCarbine(int32 EntryPoint);

	void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>& Stats) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WPN_PlasmaCarbine_C">();
	}
	static class AWPN_PlasmaCarbine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWPN_PlasmaCarbine_C>();
	}
};
static_assert(alignof(AWPN_PlasmaCarbine_C) == 0x000008, "Wrong alignment on AWPN_PlasmaCarbine_C");
static_assert(sizeof(AWPN_PlasmaCarbine_C) == 0x000878, "Wrong size on AWPN_PlasmaCarbine_C");
static_assert(offsetof(AWPN_PlasmaCarbine_C, UberGraphFrame) == 0x0007F0, "Member 'AWPN_PlasmaCarbine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, HeatMaterial) == 0x0007F8, "Member 'AWPN_PlasmaCarbine_C::HeatMaterial' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, AoEDamageComponent) == 0x000800, "Member 'AWPN_PlasmaCarbine_C::AoEDamageComponent' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OverHeatSound) == 0x000808, "Member 'AWPN_PlasmaCarbine_C::OverHeatSound' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, FirstPersonWidget_Ammo) == 0x000810, "Member 'AWPN_PlasmaCarbine_C::FirstPersonWidget_Ammo' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, CrosshairAggregator) == 0x000818, "Member 'AWPN_PlasmaCarbine_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, ProjectileLauncher) == 0x000820, "Member 'AWPN_PlasmaCarbine_C::ProjectileLauncher' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, Overheat_Ammo_Regen_Effect_6788C26846C5EA00DB58E08FBF311673) == 0x000828, "Member 'AWPN_PlasmaCarbine_C::Overheat_Ammo_Regen_Effect_6788C26846C5EA00DB58E08FBF311673' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, Overheat_Ammo_Regen__Direction_6788C26846C5EA00DB58E08FBF311673) == 0x00082C, "Member 'AWPN_PlasmaCarbine_C::Overheat_Ammo_Regen__Direction_6788C26846C5EA00DB58E08FBF311673' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, Overheat_Ammo_Regen) == 0x000830, "Member 'AWPN_PlasmaCarbine_C::Overheat_Ammo_Regen' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OverHeat) == 0x000838, "Member 'AWPN_PlasmaCarbine_C::OverHeat' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, HasOverheated) == 0x00083C, "Member 'AWPN_PlasmaCarbine_C::HasOverheated' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, RegenAmmoOnOverheat) == 0x00083D, "Member 'AWPN_PlasmaCarbine_C::RegenAmmoOnOverheat' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, AoeOnOverheat) == 0x00083E, "Member 'AWPN_PlasmaCarbine_C::AoeOnOverheat' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, AmmoResupplyProgress) == 0x000840, "Member 'AWPN_PlasmaCarbine_C::AmmoResupplyProgress' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, SpeedBoostOnOverheat) == 0x000844, "Member 'AWPN_PlasmaCarbine_C::SpeedBoostOnOverheat' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, SpeedBoostOnOverheatSTE) == 0x000848, "Member 'AWPN_PlasmaCarbine_C::SpeedBoostOnOverheatSTE' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OverheatAoEMaxDMG) == 0x000850, "Member 'AWPN_PlasmaCarbine_C::OverheatAoEMaxDMG' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OverheatAoEDamageRadius) == 0x000854, "Member 'AWPN_PlasmaCarbine_C::OverheatAoEDamageRadius' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OldRoF) == 0x000858, "Member 'AWPN_PlasmaCarbine_C::OldRoF' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, TermalFeedbackLoop) == 0x00085C, "Member 'AWPN_PlasmaCarbine_C::TermalFeedbackLoop' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, HeatAtRegenTrigger) == 0x000860, "Member 'AWPN_PlasmaCarbine_C::HeatAtRegenTrigger' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, ExplosiveReload) == 0x000864, "Member 'AWPN_PlasmaCarbine_C::ExplosiveReload' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OverheatOnReload) == 0x000865, "Member 'AWPN_PlasmaCarbine_C::OverheatOnReload' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, ExplosiveReloadDelay) == 0x000868, "Member 'AWPN_PlasmaCarbine_C::ExplosiveReloadDelay' has a wrong offset!");
static_assert(offsetof(AWPN_PlasmaCarbine_C, OwningPlayer) == 0x000870, "Member 'AWPN_PlasmaCarbine_C::OwningPlayer' has a wrong offset!");

}

