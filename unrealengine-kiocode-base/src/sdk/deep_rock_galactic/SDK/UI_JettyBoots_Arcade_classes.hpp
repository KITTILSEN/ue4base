#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_JettyBoots_Arcade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_JettyBoots_GameState_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_JettyBoots_Arcade.UI_JettyBoots_Arcade_C
// 0x0160 (0x03C0 - 0x0260)
class UUI_JettyBoots_Arcade_C final : public UJettyBootsArcadeWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUI_JettyBoots_Announcement_C*          Behind_Announce_UI;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Event_Overlay;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_JettyBoots_Announcement_C*          Front_Announce_UI;                                 // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_JettyBoots_Game_C*                  Game_UI;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_JettyBoot_Score_C*                  HighScore_Label;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBasic_Label_C*                         Level_Label;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_JettyBoots_Lives_C*                 LivesUI;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_JettyBoot_Score_C*                  PlayerScore_Label;                                 // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBasic_Label_C*                         PlayerScoreHeader;                                 // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Screen_Game;                                       // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_JettyBoots_StartScreen_C*           Screen_Start;                                      // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Screen_Switcher;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USceneComponent*                        Audio_Scene_Component;                             // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJettyBootSettings*                     LevelSettings;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLives;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_460D[0x4];                                     // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        MusicComponent;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReplayStarted;                                     // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LocalGameStarted;                                  // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_460E[0x6];                                     // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCharacter*                       CurrentUser;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AJettyBootsArcadeActor*                 Arcade;                                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_JettyBoots_GameState                     PreviousState;                                     // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_460F[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Seed;                                              // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Attempts;                                          // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalScore;                                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4610[0x4];                                     // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRestartingLevel;                                 // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLevelCompleted;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnReplayRecorded;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnGameOver;                                        // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnGameEnded;                                       // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FJettyBootsScore>               High_Scores;                                       // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FJettyBootsReplay                      LastReplay;                                        // 0x0378(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         CurrentHighScore;                                  // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   EventWidgetPreview;                                // 0x0398(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void OnGameEnded__DelegateSignature(const struct FJettyBootsScore& InScore, bool InOnHighScoreList, int32 InIHighScoreIndex, class APlayerCharacter* InPlayer);
	void OnReplayRecorded__DelegateSignature(const struct FJettyBootsReplay& InReplay);
	void OnGameOver__DelegateSignature(const struct FJettyBootsScore& InScore, bool InOnHighScoreList, int32 InHighScoreIndex, class APlayerCharacter* InPlayer);
	void OnRestartingLevel__DelegateSignature(class APlayerCharacter* InPlayer);
	void OnLevelCompleted__DelegateSignature(class APlayerCharacter* InPlayer);
	void ExecuteUbergraph_UI_JettyBoots_Arcade(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void GameOverAudio();
	void Setup_FSD_Events();
	void Construct();
	void BndEvt__UI_JettyBoots_Arcade_Game_UI_K2Node_ComponentBoundEvent_2_OnPointsGathered__DelegateSignature(int32 OutPoints);
	void BndEvt__UI_JettyBoots_Arcade_Game_UI_K2Node_ComponentBoundEvent_1_OnGateCleared__DelegateSignature();
	void BndEvt__UI_JettyBoots_Arcade_GameUI_K2Node_ComponentBoundEvent_0_OnReplayStateChanged__DelegateSignature(ENUM_JettyBoots_GameState InGameState);
	void BndEvt__UI_JettyBoots_Arcade_GameUI_K2Node_ComponentBoundEvent_3_OnGameStateChanged__DelegateSignature(ENUM_JettyBoots_GameState InState, ENUM_JettyBoots_GameState InPreviousState);
	void BndEvt__UI_JettyBoots_Arcade_GameUI_K2Node_ComponentBoundEvent_4_OnGameTicked__DelegateSignature(int32 InLevelSeed, const struct FVector2D& InCharacterPosition, ENUM_JettyBoots_GameState InGameState);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetAudioSceneComponent(class USceneComponent* Param_Audio_Scene_Component);
	void Display_State(int32 InLevel, int32 InScore, int32 InLives);
	void Display_HighScore(int32 InHighscore);
	void Display_Score(int32 InValue);
	void Display_Lives(int32 InValue, bool* OutGameOver);
	void Display_Level(int32 InValue);
	void SetHighScores(TArray<struct FJettyBootsScore>& InHighScores, int32 InLastIndex);
	void StartGame(class APlayerCharacter* InUser, class AJettyBootsArcadeActor* InArcade);
	void GetUserName(class FString* OutName);
	void StopGame();
	void ReplayGame(const struct FJettyBootsReplay& InReplay);
	void UpdateMusic(ENUM_JettyBoots_GameState InGameState, ENUM_JettyBoots_GameState* OutGameState);
	void GetScoreStatus(int32 InNewScore, bool* OutOnList, int32* OutIndex);
	void StartNextLevel();
	void Check_FSDEvents();

	void IsJumpPressed(bool* OutPressed) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_JettyBoots_Arcade_C">();
	}
	static class UUI_JettyBoots_Arcade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_JettyBoots_Arcade_C>();
	}
};
static_assert(alignof(UUI_JettyBoots_Arcade_C) == 0x000008, "Wrong alignment on UUI_JettyBoots_Arcade_C");
static_assert(sizeof(UUI_JettyBoots_Arcade_C) == 0x0003C0, "Wrong size on UUI_JettyBoots_Arcade_C");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, UberGraphFrame) == 0x000260, "Member 'UUI_JettyBoots_Arcade_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Behind_Announce_UI) == 0x000268, "Member 'UUI_JettyBoots_Arcade_C::Behind_Announce_UI' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Event_Overlay) == 0x000270, "Member 'UUI_JettyBoots_Arcade_C::Event_Overlay' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Front_Announce_UI) == 0x000278, "Member 'UUI_JettyBoots_Arcade_C::Front_Announce_UI' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Game_UI) == 0x000280, "Member 'UUI_JettyBoots_Arcade_C::Game_UI' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, HighScore_Label) == 0x000288, "Member 'UUI_JettyBoots_Arcade_C::HighScore_Label' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Level_Label) == 0x000290, "Member 'UUI_JettyBoots_Arcade_C::Level_Label' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, LivesUI) == 0x000298, "Member 'UUI_JettyBoots_Arcade_C::LivesUI' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, PlayerScore_Label) == 0x0002A0, "Member 'UUI_JettyBoots_Arcade_C::PlayerScore_Label' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, PlayerScoreHeader) == 0x0002A8, "Member 'UUI_JettyBoots_Arcade_C::PlayerScoreHeader' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Screen_Game) == 0x0002B0, "Member 'UUI_JettyBoots_Arcade_C::Screen_Game' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Screen_Start) == 0x0002B8, "Member 'UUI_JettyBoots_Arcade_C::Screen_Start' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Screen_Switcher) == 0x0002C0, "Member 'UUI_JettyBoots_Arcade_C::Screen_Switcher' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Audio_Scene_Component) == 0x0002C8, "Member 'UUI_JettyBoots_Arcade_C::Audio_Scene_Component' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, LevelSettings) == 0x0002D0, "Member 'UUI_JettyBoots_Arcade_C::LevelSettings' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, MaxLives) == 0x0002D8, "Member 'UUI_JettyBoots_Arcade_C::MaxLives' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, MusicComponent) == 0x0002E0, "Member 'UUI_JettyBoots_Arcade_C::MusicComponent' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, ReplayStarted) == 0x0002E8, "Member 'UUI_JettyBoots_Arcade_C::ReplayStarted' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, LocalGameStarted) == 0x0002E9, "Member 'UUI_JettyBoots_Arcade_C::LocalGameStarted' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, CurrentUser) == 0x0002F0, "Member 'UUI_JettyBoots_Arcade_C::CurrentUser' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Arcade) == 0x0002F8, "Member 'UUI_JettyBoots_Arcade_C::Arcade' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, PreviousState) == 0x000300, "Member 'UUI_JettyBoots_Arcade_C::PreviousState' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Seed) == 0x000304, "Member 'UUI_JettyBoots_Arcade_C::Seed' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Level) == 0x000308, "Member 'UUI_JettyBoots_Arcade_C::Level' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, Attempts) == 0x00030C, "Member 'UUI_JettyBoots_Arcade_C::Attempts' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, TotalScore) == 0x000310, "Member 'UUI_JettyBoots_Arcade_C::TotalScore' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, OnRestartingLevel) == 0x000318, "Member 'UUI_JettyBoots_Arcade_C::OnRestartingLevel' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, OnLevelCompleted) == 0x000328, "Member 'UUI_JettyBoots_Arcade_C::OnLevelCompleted' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, OnReplayRecorded) == 0x000338, "Member 'UUI_JettyBoots_Arcade_C::OnReplayRecorded' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, OnGameOver) == 0x000348, "Member 'UUI_JettyBoots_Arcade_C::OnGameOver' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, OnGameEnded) == 0x000358, "Member 'UUI_JettyBoots_Arcade_C::OnGameEnded' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, High_Scores) == 0x000368, "Member 'UUI_JettyBoots_Arcade_C::High_Scores' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, LastReplay) == 0x000378, "Member 'UUI_JettyBoots_Arcade_C::LastReplay' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, CurrentHighScore) == 0x000394, "Member 'UUI_JettyBoots_Arcade_C::CurrentHighScore' has a wrong offset!");
static_assert(offsetof(UUI_JettyBoots_Arcade_C, EventWidgetPreview) == 0x000398, "Member 'UUI_JettyBoots_Arcade_C::EventWidgetPreview' has a wrong offset!");

}

