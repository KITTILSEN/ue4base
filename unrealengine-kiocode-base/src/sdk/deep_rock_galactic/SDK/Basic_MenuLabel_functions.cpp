#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Basic_MenuLabel

#include "Basic.hpp"

#include "Basic_MenuLabel_classes.hpp"
#include "Basic_MenuLabel_parameters.hpp"


namespace SDK
{

// Function Basic_MenuLabel.Basic_MenuLabel_C.ExecuteUbergraph_Basic_MenuLabel
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_MenuLabel_C::ExecuteUbergraph_Basic_MenuLabel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_MenuLabel_C", "ExecuteUbergraph_Basic_MenuLabel");

	Params::Basic_MenuLabel_C_ExecuteUbergraph_Basic_MenuLabel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_MenuLabel.Basic_MenuLabel_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBasic_MenuLabel_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_MenuLabel_C", "PreConstruct");

	Params::Basic_MenuLabel_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_MenuLabel.Basic_MenuLabel_C.SetText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             NewText                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBasic_MenuLabel_C::SetText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_MenuLabel_C", "SetText");

	Params::Basic_MenuLabel_C_SetText Parms{};

	Parms.NewText = std::move(NewText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_MenuLabel.Basic_MenuLabel_C.SetFontSize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InFontSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_MenuLabel_C::SetFontSize(int32 InFontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_MenuLabel_C", "SetFontSize");

	Params::Basic_MenuLabel_C_SetFontSize Parms{};

	Parms.InFontSize = InFontSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_MenuLabel.Basic_MenuLabel_C.SetTypeFace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_CarbonTypeface                     Param_Typeface                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_MenuLabel_C::SetTypeFace(ENUM_CarbonTypeface Param_Typeface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_MenuLabel_C", "SetTypeFace");

	Params::Basic_MenuLabel_C_SetTypeFace Parms{};

	Parms.Param_Typeface = Param_Typeface;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Basic_MenuLabel.Basic_MenuLabel_C.SetJustification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextJustify                            InJustification                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBasic_MenuLabel_C::SetJustification(ETextJustify InJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Basic_MenuLabel_C", "SetJustification");

	Params::Basic_MenuLabel_C_SetJustification Parms{};

	Parms.InJustification = InJustification;

	UObject::ProcessEvent(Func, &Parms);
}

}

