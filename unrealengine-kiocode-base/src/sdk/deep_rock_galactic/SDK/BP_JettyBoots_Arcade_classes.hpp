#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JettyBoots_Arcade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JettyBoots_Arcade.BP_JettyBoots_Arcade_C
// 0x0060 (0x0310 - 0x02B0)
class ABP_JettyBoots_Arcade_C final : public AJettyBootsArcadeActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        IdleAudio;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Plug;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          UsableCollider;                                    // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ClearHighScores_Button;                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         GameCost;                                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FF1[0x4];                                     // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_JettyBoots_Arcade(int32 EntryPoint);
	void MissionShout_GameStart();
	void Shout_LevelCompleted(class APlayerCharacter* InPlayer);
	void Shout_RestartingLevel(class APlayerCharacter* InPlayer);
	void Shout_OnStartGame(class APlayerCharacter* User, EInputKeys Key);
	void Shout_OnGameOver(const struct FJettyBootsScore& InScore, bool InOnHighScoreList, int32 InHighScoreIndex, class APlayerCharacter* InPlayer);
	void Setup_Shouts();
	void BndEvt__BP_JettyBoots_Arcade_StartGameUsable_K2Node_ComponentBoundEvent_0_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void ReceiveBeginPlay();
	void ReceivePlayerChanged();
	void OnReplayRecorded(const struct FJettyBootsReplay& InReplay);
	void Setup_Replay();
	void Setup_Game_Ended();
	void ReceiveReplayPackage(const struct FJettyBootsReplay& InPackage);
	void RefreshHighScores();
	void ReceiveHighScoreChanged();
	void Server_GameEnded(const struct FJettyBootsScore& OutScore);
	void OnGameEnded_Event(const struct FJettyBootsScore& InScore, bool InOnHighScoreList, int32 InIHighScoreIndex, class APlayerCharacter* InPlayer);
	void GetGameWidget(class UUI_JettyBoots_Arcade_C** OutWidget);
	bool GetIsActiveUser();
	void UpdateActivePlayer();
	void SetButtonLightsActive(bool InLightsActive);
	bool GetIsReplayUser();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JettyBoots_Arcade_C">();
	}
	static class ABP_JettyBoots_Arcade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_JettyBoots_Arcade_C>();
	}
};
static_assert(alignof(ABP_JettyBoots_Arcade_C) == 0x000008, "Wrong alignment on ABP_JettyBoots_Arcade_C");
static_assert(sizeof(ABP_JettyBoots_Arcade_C) == 0x000310, "Wrong size on ABP_JettyBoots_Arcade_C");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_JettyBoots_Arcade_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, IdleAudio) == 0x0002B8, "Member 'ABP_JettyBoots_Arcade_C::IdleAudio' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, SM_Plug) == 0x0002C0, "Member 'ABP_JettyBoots_Arcade_C::SM_Plug' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, UsableCollider) == 0x0002C8, "Member 'ABP_JettyBoots_Arcade_C::UsableCollider' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, ClearHighScores_Button) == 0x0002D0, "Member 'ABP_JettyBoots_Arcade_C::ClearHighScores_Button' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, Widget) == 0x0002D8, "Member 'ABP_JettyBoots_Arcade_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, Scene) == 0x0002E0, "Member 'ABP_JettyBoots_Arcade_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, StaticMesh) == 0x0002E8, "Member 'ABP_JettyBoots_Arcade_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, DefaultSceneRoot) == 0x0002F0, "Member 'ABP_JettyBoots_Arcade_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, GameCost) == 0x0002F8, "Member 'ABP_JettyBoots_Arcade_C::GameCost' has a wrong offset!");
static_assert(offsetof(ABP_JettyBoots_Arcade_C, Materials) == 0x000300, "Member 'ABP_JettyBoots_Arcade_C::Materials' has a wrong offset!");

}

