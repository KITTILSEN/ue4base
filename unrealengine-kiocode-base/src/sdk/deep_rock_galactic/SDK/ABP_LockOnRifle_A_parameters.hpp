#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_LockOnRifle_A

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_LockOnRifle_A.ABP_LockOnRifle_A_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_LockOnRifle_A_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_LockOnRifle_A_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_LockOnRifle_A_C_AnimGraph");
static_assert(sizeof(ABP_LockOnRifle_A_C_AnimGraph) == 0x000010, "Wrong size on ABP_LockOnRifle_A_C_AnimGraph");
static_assert(offsetof(ABP_LockOnRifle_A_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_LockOnRifle_A_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_LockOnRifle_A.ABP_LockOnRifle_A_C.SetHasLockedTarget
// 0x0001 (0x0001 - 0x0000)
struct ABP_LockOnRifle_A_C_SetHasLockedTarget final
{
public:
	bool                                          Param_HasLockedTarget;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_LockOnRifle_A_C_SetHasLockedTarget) == 0x000001, "Wrong alignment on ABP_LockOnRifle_A_C_SetHasLockedTarget");
static_assert(sizeof(ABP_LockOnRifle_A_C_SetHasLockedTarget) == 0x000001, "Wrong size on ABP_LockOnRifle_A_C_SetHasLockedTarget");
static_assert(offsetof(ABP_LockOnRifle_A_C_SetHasLockedTarget, Param_HasLockedTarget) == 0x000000, "Member 'ABP_LockOnRifle_A_C_SetHasLockedTarget::Param_HasLockedTarget' has a wrong offset!");

// Function ABP_LockOnRifle_A.ABP_LockOnRifle_A_C.SetRotation
// 0x000C (0x000C - 0x0000)
struct ABP_LockOnRifle_A_C_SetRotation final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_LockOnRifle_A_C_SetRotation) == 0x000004, "Wrong alignment on ABP_LockOnRifle_A_C_SetRotation");
static_assert(sizeof(ABP_LockOnRifle_A_C_SetRotation) == 0x00000C, "Wrong size on ABP_LockOnRifle_A_C_SetRotation");
static_assert(offsetof(ABP_LockOnRifle_A_C_SetRotation, WorldRotation) == 0x000000, "Member 'ABP_LockOnRifle_A_C_SetRotation::WorldRotation' has a wrong offset!");

// Function ABP_LockOnRifle_A.ABP_LockOnRifle_A_C.OnRotationUpdated
// 0x0010 (0x0010 - 0x0000)
struct ABP_LockOnRifle_A_C_OnRotationUpdated final
{
public:
	bool                                          HasTargetLockon;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SocketRotation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_LockOnRifle_A_C_OnRotationUpdated) == 0x000004, "Wrong alignment on ABP_LockOnRifle_A_C_OnRotationUpdated");
static_assert(sizeof(ABP_LockOnRifle_A_C_OnRotationUpdated) == 0x000010, "Wrong size on ABP_LockOnRifle_A_C_OnRotationUpdated");
static_assert(offsetof(ABP_LockOnRifle_A_C_OnRotationUpdated, HasTargetLockon) == 0x000000, "Member 'ABP_LockOnRifle_A_C_OnRotationUpdated::HasTargetLockon' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_OnRotationUpdated, SocketRotation) == 0x000004, "Member 'ABP_LockOnRifle_A_C_OnRotationUpdated::SocketRotation' has a wrong offset!");

// Function ABP_LockOnRifle_A.ABP_LockOnRifle_A_C.ExecuteUbergraph_ABP_LockOnRifle_A
// 0x0058 (0x0058 - 0x0000)
struct ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool HasTargetLockon, const struct FRotator& SocketRotation)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_hasTargetLockon;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_socketRotation;                 // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ALockOnWeapon*                          K2Node_DynamicCast_AsLock_on_Weapon;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A) == 0x000008, "Wrong alignment on ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A");
static_assert(sizeof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A) == 0x000058, "Wrong size on ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, EntryPoint) == 0x000000, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, CallFunc_MakeRotator_ReturnValue) == 0x000020, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, CallFunc_GetOwningActor_ReturnValue) == 0x000030, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, K2Node_CustomEvent_hasTargetLockon) == 0x000038, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::K2Node_CustomEvent_hasTargetLockon' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, K2Node_CustomEvent_socketRotation) == 0x00003C, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::K2Node_CustomEvent_socketRotation' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, K2Node_DynamicCast_AsLock_on_Weapon) == 0x000048, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::K2Node_DynamicCast_AsLock_on_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'ABP_LockOnRifle_A_C_ExecuteUbergraph_ABP_LockOnRifle_A::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

