#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_PlasmaCarbine_AmmoCounter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetProgressColor
// 0x0034 (0x0034 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5339[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor) == 0x000034, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor, InColor) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor::InColor' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor, Temp_bool_Variable) == 0x000010, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor, Temp_struct_Variable) == 0x000014, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor, K2Node_Select_Default) == 0x000024, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor::K2Node_Select_Default' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.Scrub Animation
// 0x0020 (0x0020 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InProgress;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetStartTime_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation) == 0x000008, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation) == 0x000020, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation, InAnimation) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation::InAnimation' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation, InProgress) == 0x000008, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation::InProgress' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation, CallFunc_GetEndTime_ReturnValue) == 0x00000C, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation, CallFunc_GetStartTime_ReturnValue) == 0x000010, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation::CallFunc_GetStartTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation, CallFunc_Lerp_ReturnValue) == 0x000014, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.OverheatStatus
// 0x0018 (0x0018 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_533A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SelectVisibility_IsVisible_1;             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged_1;     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility_1;        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus) == 0x000008, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus) == 0x000018, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, Condition) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::Condition' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_SelectVisibility_IsVisible) == 0x000010, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_SelectVisibility_VisibilityChanged) == 0x000011, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_SelectVisibility_New_Visibility) == 0x000012, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_SelectVisibility_IsVisible_1) == 0x000013, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_SelectVisibility_IsVisible_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_SelectVisibility_VisibilityChanged_1) == 0x000014, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_SelectVisibility_VisibilityChanged_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_SelectVisibility_New_Visibility_1) == 0x000015, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_SelectVisibility_New_Visibility_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetProgress
// 0x0038 (0x0038 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisualProgress;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisualMaxProgress;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_533B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_533C[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ToggleAnimationLooping_OutPlayingChanged; // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ToggleAnimationLooping_OutIsPlaying;      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress) == 0x000008, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress) == 0x000038, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, Value) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::Value' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, VisualProgress) == 0x000004, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::VisualProgress' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, VisualMaxProgress) == 0x000008, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::VisualMaxProgress' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, Temp_bool_Variable) == 0x00000C, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, Temp_float_Variable) == 0x000010, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, Temp_float_Variable_1) == 0x000014, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_BooleanOR_ReturnValue) == 0x000029, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_ToggleAnimationLooping_OutPlayingChanged) == 0x00002A, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_ToggleAnimationLooping_OutPlayingChanged' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_ToggleAnimationLooping_OutIsPlaying) == 0x00002B, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_ToggleAnimationLooping_OutIsPlaying' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, K2Node_Select_Default) == 0x00002C, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_SelectVisibility_IsVisible) == 0x000030, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_SelectVisibility_VisibilityChanged) == 0x000031, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress, CallFunc_SelectVisibility_New_Visibility) == 0x000032, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.UpdateAmount
// 0x0028 (0x0028 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_533D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount) == 0x000008, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount) == 0x000028, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount, Value) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount::Value' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetTotalCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount) == 0x000004, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount, Value) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount::Value' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.Max Ammo Changed
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed) == 0x000004, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed, Amount) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed::Amount' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.Total Ammo left changed
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed) == 0x000004, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed, Amount) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed::Amount' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetClipCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount) == 0x000004, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount, Value) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount::Value' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct) == 0x000001, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct) == 0x000001, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetHeatValue
// 0x000C (0x000C - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue final
{
public:
	float                                         HeatPercentage;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Overheated;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_533E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThermalFeedbackLevel;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue) == 0x00000C, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue, HeatPercentage) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue::HeatPercentage' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue, Overheated) == 0x000004, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue::Overheated' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue, ThermalFeedbackLevel) == 0x000008, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue::ThermalFeedbackLevel' has a wrong offset!");

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter
// 0x0024 (0x0024 - 0x0000)
struct WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_amount_1;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_amount;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Value;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_533F[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_HeatPercentage;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_overHeated;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5340[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_ThermalFeedbackLevel;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Value_1;                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter) == 0x000004, "Wrong alignment on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter");
static_assert(sizeof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter) == 0x000024, "Wrong size on WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, EntryPoint) == 0x000000, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_Event_amount_1) == 0x000004, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_Event_amount_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_Event_amount) == 0x000008, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_Event_amount' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_Event_Value) == 0x00000C, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_Event_IsDesignTime) == 0x000010, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_CustomEvent_HeatPercentage) == 0x000014, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_CustomEvent_HeatPercentage' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_CustomEvent_overHeated) == 0x000018, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_CustomEvent_overHeated' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_CustomEvent_ThermalFeedbackLevel) == 0x00001C, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_CustomEvent_ThermalFeedbackLevel' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter, K2Node_Event_Value_1) == 0x000020, "Member 'WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter::K2Node_Event_Value_1' has a wrong offset!");

}

