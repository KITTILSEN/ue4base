#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageTriggerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DamageTriggerComponent.BP_DamageTriggerComponent_C
// 0x0048 (0x00F8 - 0x00B0)
class UBP_DamageTriggerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UHealthComponent*>               ActorsInRange;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CanOnlyHurtPlayers;                                // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F95[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ActorEntered;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ActorExited;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CheckOnClient;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool IsEmpty();
	void ReceiveBeginPlay();
	void OnActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void ExecuteUbergraph_BP_DamageTriggerComponent(int32 EntryPoint);
	void ActorExited__DelegateSignature(class UHealthComponent* OtherHealthComponent);
	void ActorEntered__DelegateSignature(class UHealthComponent* OtherHealthComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageTriggerComponent_C">();
	}
	static class UBP_DamageTriggerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DamageTriggerComponent_C>();
	}
};
static_assert(alignof(UBP_DamageTriggerComponent_C) == 0x000008, "Wrong alignment on UBP_DamageTriggerComponent_C");
static_assert(sizeof(UBP_DamageTriggerComponent_C) == 0x0000F8, "Wrong size on UBP_DamageTriggerComponent_C");
static_assert(offsetof(UBP_DamageTriggerComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_DamageTriggerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DamageTriggerComponent_C, ActorsInRange) == 0x0000B8, "Member 'UBP_DamageTriggerComponent_C::ActorsInRange' has a wrong offset!");
static_assert(offsetof(UBP_DamageTriggerComponent_C, CanOnlyHurtPlayers) == 0x0000C8, "Member 'UBP_DamageTriggerComponent_C::CanOnlyHurtPlayers' has a wrong offset!");
static_assert(offsetof(UBP_DamageTriggerComponent_C, ActorEntered) == 0x0000D0, "Member 'UBP_DamageTriggerComponent_C::ActorEntered' has a wrong offset!");
static_assert(offsetof(UBP_DamageTriggerComponent_C, ActorExited) == 0x0000E0, "Member 'UBP_DamageTriggerComponent_C::ActorExited' has a wrong offset!");
static_assert(offsetof(UBP_DamageTriggerComponent_C, CheckOnClient) == 0x0000F0, "Member 'UBP_DamageTriggerComponent_C::CheckOnClient' has a wrong offset!");

}

