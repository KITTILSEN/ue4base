#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PickaxeRandomizer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PickaxeRandomizer.BP_PickaxeRandomizer_C
// 0x00E8 (0x0308 - 0x0220)
class ABP_PickaxeRandomizer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Mesh_BladeFront;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Shaft;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Pommel;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Head;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Handle;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_BladeBack;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UStaticMesh>>     MeshesToLoad;                                      // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     BladesFront;                                       // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     BladesBack;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     Heads;                                             // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     Shafts;                                            // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     Handles;                                           // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     Pommels;                                           // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UMaterialInstance>> Materials;                                         // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UMaterialInstance>       ChosenMaterial;                                    // 0x02E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void SetStaticMesh(class UStaticMeshComponent* MeshComponent, int32 Param_Index);
	void SelectRandomMesh(TArray<TSoftObjectPtr<class UStaticMesh>>& Array);
	void ReceiveBeginPlay();
	void Loaded();
	void LoadedMaterial();
	void ExecuteUbergraph_BP_PickaxeRandomizer(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PickaxeRandomizer_C">();
	}
	static class ABP_PickaxeRandomizer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PickaxeRandomizer_C>();
	}
};
static_assert(alignof(ABP_PickaxeRandomizer_C) == 0x000008, "Wrong alignment on ABP_PickaxeRandomizer_C");
static_assert(sizeof(ABP_PickaxeRandomizer_C) == 0x000308, "Wrong size on ABP_PickaxeRandomizer_C");
static_assert(offsetof(ABP_PickaxeRandomizer_C, UberGraphFrame) == 0x000220, "Member 'ABP_PickaxeRandomizer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Mesh_BladeFront) == 0x000228, "Member 'ABP_PickaxeRandomizer_C::Mesh_BladeFront' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Mesh_Shaft) == 0x000230, "Member 'ABP_PickaxeRandomizer_C::Mesh_Shaft' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Mesh_Pommel) == 0x000238, "Member 'ABP_PickaxeRandomizer_C::Mesh_Pommel' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Mesh_Head) == 0x000240, "Member 'ABP_PickaxeRandomizer_C::Mesh_Head' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Mesh_Handle) == 0x000248, "Member 'ABP_PickaxeRandomizer_C::Mesh_Handle' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Mesh_BladeBack) == 0x000250, "Member 'ABP_PickaxeRandomizer_C::Mesh_BladeBack' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Scene) == 0x000258, "Member 'ABP_PickaxeRandomizer_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, MeshesToLoad) == 0x000260, "Member 'ABP_PickaxeRandomizer_C::MeshesToLoad' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, BladesFront) == 0x000270, "Member 'ABP_PickaxeRandomizer_C::BladesFront' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, BladesBack) == 0x000280, "Member 'ABP_PickaxeRandomizer_C::BladesBack' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Heads) == 0x000290, "Member 'ABP_PickaxeRandomizer_C::Heads' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Shafts) == 0x0002A0, "Member 'ABP_PickaxeRandomizer_C::Shafts' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Handles) == 0x0002B0, "Member 'ABP_PickaxeRandomizer_C::Handles' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Pommels) == 0x0002C0, "Member 'ABP_PickaxeRandomizer_C::Pommels' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, Materials) == 0x0002D0, "Member 'ABP_PickaxeRandomizer_C::Materials' has a wrong offset!");
static_assert(offsetof(ABP_PickaxeRandomizer_C, ChosenMaterial) == 0x0002E0, "Member 'ABP_PickaxeRandomizer_C::ChosenMaterial' has a wrong offset!");

}

