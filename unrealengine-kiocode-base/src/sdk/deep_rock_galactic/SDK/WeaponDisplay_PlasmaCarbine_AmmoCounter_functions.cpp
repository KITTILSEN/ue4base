#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_PlasmaCarbine_AmmoCounter

#include "Basic.hpp"

#include "WeaponDisplay_PlasmaCarbine_AmmoCounter_classes.hpp"
#include "WeaponDisplay_PlasmaCarbine_AmmoCounter_parameters.hpp"


namespace SDK
{

// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetProgressColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     InColor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::SetProgressColor(const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "SetProgressColor");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgressColor Parms{};

	Parms.InColor = std::move(InColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.Scrub Animation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidgetAnimation*                 InAnimation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InProgress                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Scrub_Animation(class UWidgetAnimation* InAnimation, float InProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "Scrub Animation");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Scrub_Animation Parms{};

	Parms.InAnimation = InAnimation;
	Parms.InProgress = InProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.OverheatStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::OverheatStatus(bool Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "OverheatStatus");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_OverheatStatus Parms{};

	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::SetProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "SetProgress");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetProgress Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.UpdateAmount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::UpdateAmount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "UpdateAmount");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_UpdateAmount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetTotalCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::SetTotalCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "SetTotalCount");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetTotalCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.Max Ammo Changed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Max_Ammo_Changed(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "Max Ammo Changed");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Max_Ammo_Changed Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.Total Ammo left changed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Total_Ammo_left_changed(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "Total Ammo left changed");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_Total_Ammo_left_changed Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetClipCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::SetClipCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "SetClipCount");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetClipCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "PreConstruct");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.SetHeatValue
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HeatPercentage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Overheated                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ThermalFeedbackLevel                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::SetHeatValue(float HeatPercentage, bool Overheated, float ThermalFeedbackLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "SetHeatValue");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_SetHeatValue Parms{};

	Parms.HeatPercentage = HeatPercentage;
	Parms.Overheated = Overheated;
	Parms.ThermalFeedbackLevel = ThermalFeedbackLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C.ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponDisplay_PlasmaCarbine_AmmoCounter_C", "ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter");

	Params::WeaponDisplay_PlasmaCarbine_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

