#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hud_LockOnTarget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Hud_LockOnTarget.Hud_LockOnTarget_C
// 0x0060 (0x0310 - 0x02B0)
class UHud_LockOnTarget_C final : public ULockOnTrackingWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SavedAmmoOutro;                                    // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TargetLocked;                                      // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Arrow;                                             // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrossHair_Base;                                    // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrossHair_Glow;                                    // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrossHair_Glow_1;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               CrosshairSize;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_LockOnCount;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Crosshair;                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         ArrowRadius;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArrowRotation;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArrowAngle;                                        // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnTargetDistanceChanged(float Distance);
	void OnInViewChanged(bool InView, float Angle);
	void PreConstruct(bool IsDesignTime);
	void UpdateArrow(bool InView, float Angle);
	void OnLockOn(int32 NumberOfLockOnsOnThisTarget, int32 TotalNumberOfLockOns);
	void OnFireComplete(int32 NumberOfLockOnsOnThisTarget);
	void UpdateCount(int32 NewCount);
	void OnShow();
	void CleanUpWidget(bool ShowFade);
	void Construct();
	void OutroFinished();
	void ExecuteUbergraph_Hud_LockOnTarget(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Hud_LockOnTarget_C">();
	}
	static class UHud_LockOnTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHud_LockOnTarget_C>();
	}
};
static_assert(alignof(UHud_LockOnTarget_C) == 0x000008, "Wrong alignment on UHud_LockOnTarget_C");
static_assert(sizeof(UHud_LockOnTarget_C) == 0x000310, "Wrong size on UHud_LockOnTarget_C");
static_assert(offsetof(UHud_LockOnTarget_C, UberGraphFrame) == 0x0002B0, "Member 'UHud_LockOnTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, SavedAmmoOutro) == 0x0002B8, "Member 'UHud_LockOnTarget_C::SavedAmmoOutro' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, TargetLocked) == 0x0002C0, "Member 'UHud_LockOnTarget_C::TargetLocked' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, Arrow) == 0x0002C8, "Member 'UHud_LockOnTarget_C::Arrow' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, CrossHair_Base) == 0x0002D0, "Member 'UHud_LockOnTarget_C::CrossHair_Base' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, CrossHair_Glow) == 0x0002D8, "Member 'UHud_LockOnTarget_C::CrossHair_Glow' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, CrossHair_Glow_1) == 0x0002E0, "Member 'UHud_LockOnTarget_C::CrossHair_Glow_1' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, CrosshairSize) == 0x0002E8, "Member 'UHud_LockOnTarget_C::CrosshairSize' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, Text_LockOnCount) == 0x0002F0, "Member 'UHud_LockOnTarget_C::Text_LockOnCount' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, VerticalBox_Crosshair) == 0x0002F8, "Member 'UHud_LockOnTarget_C::VerticalBox_Crosshair' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, ArrowRadius) == 0x000300, "Member 'UHud_LockOnTarget_C::ArrowRadius' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, ArrowRotation) == 0x000304, "Member 'UHud_LockOnTarget_C::ArrowRotation' has a wrong offset!");
static_assert(offsetof(UHud_LockOnTarget_C, ArrowAngle) == 0x000308, "Member 'UHud_LockOnTarget_C::ArrowAngle' has a wrong offset!");

}

