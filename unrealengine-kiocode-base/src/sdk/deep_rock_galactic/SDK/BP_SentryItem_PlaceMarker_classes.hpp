#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SentryItem_PlaceMarker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SentryItem_PlaceMarker.BP_SentryItem_PlaceMarker_C
// 0x0070 (0x0298 - 0x0228)
class ABP_SentryItem_PlaceMarker_C final : public AItemMarker
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   ArcIndicator;                                      // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightLine;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftLine;                                          // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AimScene;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Material;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ColorName;                                         // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ValidColor;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecallableSentryGunItem*               Item;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetAngleRestriction(float AngleRestriction);
	void SetMaterials(class UMeshComponent* Mesh, class UMaterialInterface* ParentMaterial, class UMaterialInstanceDynamic** DynamicMaterial);
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void OnMarkerValidChanged(bool Valid);
	void SetArcIndicatorActive(bool Active);
	void ExecuteUbergraph_BP_SentryItem_PlaceMarker(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SentryItem_PlaceMarker_C">();
	}
	static class ABP_SentryItem_PlaceMarker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SentryItem_PlaceMarker_C>();
	}
};
static_assert(alignof(ABP_SentryItem_PlaceMarker_C) == 0x000008, "Wrong alignment on ABP_SentryItem_PlaceMarker_C");
static_assert(sizeof(ABP_SentryItem_PlaceMarker_C) == 0x000298, "Wrong size on ABP_SentryItem_PlaceMarker_C");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, UberGraphFrame) == 0x000228, "Member 'ABP_SentryItem_PlaceMarker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, ArcIndicator) == 0x000230, "Member 'ABP_SentryItem_PlaceMarker_C::ArcIndicator' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, SkeletalMesh) == 0x000238, "Member 'ABP_SentryItem_PlaceMarker_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, Scene) == 0x000240, "Member 'ABP_SentryItem_PlaceMarker_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, RightLine) == 0x000248, "Member 'ABP_SentryItem_PlaceMarker_C::RightLine' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, LeftLine) == 0x000250, "Member 'ABP_SentryItem_PlaceMarker_C::LeftLine' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, AimScene) == 0x000258, "Member 'ABP_SentryItem_PlaceMarker_C::AimScene' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, Arrow) == 0x000260, "Member 'ABP_SentryItem_PlaceMarker_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, DefaultSceneRoot) == 0x000268, "Member 'ABP_SentryItem_PlaceMarker_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, Material) == 0x000270, "Member 'ABP_SentryItem_PlaceMarker_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, ColorName) == 0x000278, "Member 'ABP_SentryItem_PlaceMarker_C::ColorName' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, ValidColor) == 0x000280, "Member 'ABP_SentryItem_PlaceMarker_C::ValidColor' has a wrong offset!");
static_assert(offsetof(ABP_SentryItem_PlaceMarker_C, Item) == 0x000290, "Member 'ABP_SentryItem_PlaceMarker_C::Item' has a wrong offset!");

}

