#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SER_GetEnemyTarget_Chance

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SER_GetEnemyTarget_Chance.SER_GetEnemyTarget_Chance_C
// 0x00B8 (0x0150 - 0x0098)
class USER_GetEnemyTarget_Chance_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Range;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF1[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 Target;                                            // 0x00A8(0x0028)(Edit, BlueprintVisible)
	bool                                          Require_LoS;                                       // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FF2[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      Query;                                             // 0x00D8(0x0048)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 FromKey;                                           // 0x0120(0x0028)(Edit, BlueprintVisible)
	bool                                          UseFromActor;                                      // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FF3[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkipChance;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetEnemyTargetChance(class AActor* FromAcor);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ExecuteUbergraph_SER_GetEnemyTarget_Chance(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SER_GetEnemyTarget_Chance_C">();
	}
	static class USER_GetEnemyTarget_Chance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USER_GetEnemyTarget_Chance_C>();
	}
};
static_assert(alignof(USER_GetEnemyTarget_Chance_C) == 0x000008, "Wrong alignment on USER_GetEnemyTarget_Chance_C");
static_assert(sizeof(USER_GetEnemyTarget_Chance_C) == 0x000150, "Wrong size on USER_GetEnemyTarget_Chance_C");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, UberGraphFrame) == 0x000098, "Member 'USER_GetEnemyTarget_Chance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, Range) == 0x0000A0, "Member 'USER_GetEnemyTarget_Chance_C::Range' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, Target) == 0x0000A8, "Member 'USER_GetEnemyTarget_Chance_C::Target' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, Require_LoS) == 0x0000D0, "Member 'USER_GetEnemyTarget_Chance_C::Require_LoS' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, Query) == 0x0000D8, "Member 'USER_GetEnemyTarget_Chance_C::Query' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, FromKey) == 0x000120, "Member 'USER_GetEnemyTarget_Chance_C::FromKey' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, UseFromActor) == 0x000148, "Member 'USER_GetEnemyTarget_Chance_C::UseFromActor' has a wrong offset!");
static_assert(offsetof(USER_GetEnemyTarget_Chance_C, SkipChance) == 0x00014C, "Member 'USER_GetEnemyTarget_Chance_C::SkipChance' has a wrong offset!");

}

