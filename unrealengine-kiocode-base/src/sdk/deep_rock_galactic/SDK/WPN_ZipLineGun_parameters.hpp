#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_ZipLineGun

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FSD_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.GetGrounded
// 0x0088 (0x0088 - 0x0000)
struct WPN_ZipLineGun_C_GetGrounded final
{
public:
	bool                                          OutGrounded;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51FB[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51FC[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActorMatchesTagQuery_ReturnValue;         // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_GetGrounded) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_GetGrounded");
static_assert(sizeof(WPN_ZipLineGun_C_GetGrounded) == 0x000088, "Wrong size on WPN_ZipLineGun_C_GetGrounded");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, OutGrounded) == 0x000000, "Member 'WPN_ZipLineGun_C_GetGrounded::OutGrounded' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_bBlockingHit) == 0x000001, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_bInitialOverlap) == 0x000002, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_Time) == 0x000004, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_Distance) == 0x000008, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_Location) == 0x00000C, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_ImpactPoint) == 0x000018, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_Normal) == 0x000024, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_ImpactNormal) == 0x000030, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_PhysMat) == 0x000040, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_HitActor) == 0x000048, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_HitComponent) == 0x000050, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_HitBoneName) == 0x000058, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_HitItem) == 0x000060, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_ElementIndex) == 0x000064, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_FaceIndex) == 0x000068, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_TraceStart) == 0x00006C, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_BreakHitResult_TraceEnd) == 0x000078, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_IsMovingOnGround_ReturnValue) == 0x000084, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_Not_PreBool_ReturnValue) == 0x000085, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGrounded, CallFunc_ActorMatchesTagQuery_ReturnValue) == 0x000086, "Member 'WPN_ZipLineGun_C_GetGrounded::CallFunc_ActorMatchesTagQuery_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.CalcFirstPersonMuzzleLocation
// 0x0030 (0x0030 - 0x0000)
struct WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51FD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcFirstPersonFOVPositionCorrection_ReturnValue; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation");
static_assert(sizeof(WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation) == 0x000030, "Wrong size on WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation");
static_assert(offsetof(WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation, ReturnValue) == 0x000000, "Member 'WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation, CallFunc_CalcFirstPersonFOVPositionCorrection_ReturnValue) == 0x000024, "Member 'WPN_ZipLineGun_C_CalcFirstPersonMuzzleLocation::CallFunc_CalcFirstPersonFOVPositionCorrection_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.CanFireWeapon
// 0x0068 (0x0068 - 0x0000)
struct WPN_ZipLineGun_C_CanFireWeapon final
{
public:
	class FText                                   FailMsg;                                           // 0x0000(0x0018)(Parm, OutParm)
	class UDialogDataAsset*                       FailShout;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51FE[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogDataAsset*                       Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDialogDataAsset*                       Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDialogDataAsset*                       K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Can_Fire_FailMsg;                         // 0x0040(0x0018)()
	class UDialogDataAsset*                       CallFunc_Can_Fire_FailShout;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Can_Fire_CanShoot;                        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_CanFireWeapon) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_CanFireWeapon");
static_assert(sizeof(WPN_ZipLineGun_C_CanFireWeapon) == 0x000068, "Wrong size on WPN_ZipLineGun_C_CanFireWeapon");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, FailMsg) == 0x000000, "Member 'WPN_ZipLineGun_C_CanFireWeapon::FailMsg' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, FailShout) == 0x000018, "Member 'WPN_ZipLineGun_C_CanFireWeapon::FailShout' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, ReturnValue) == 0x000020, "Member 'WPN_ZipLineGun_C_CanFireWeapon::ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, Temp_bool_Variable) == 0x000021, "Member 'WPN_ZipLineGun_C_CanFireWeapon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, Temp_object_Variable) == 0x000028, "Member 'WPN_ZipLineGun_C_CanFireWeapon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, Temp_object_Variable_1) == 0x000030, "Member 'WPN_ZipLineGun_C_CanFireWeapon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, K2Node_Select_Default) == 0x000038, "Member 'WPN_ZipLineGun_C_CanFireWeapon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, CallFunc_Can_Fire_FailMsg) == 0x000040, "Member 'WPN_ZipLineGun_C_CanFireWeapon::CallFunc_Can_Fire_FailMsg' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, CallFunc_Can_Fire_FailShout) == 0x000058, "Member 'WPN_ZipLineGun_C_CanFireWeapon::CallFunc_Can_Fire_FailShout' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_CanFireWeapon, CallFunc_Can_Fire_CanShoot) == 0x000060, "Member 'WPN_ZipLineGun_C_CanFireWeapon::CallFunc_Can_Fire_CanShoot' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.GetCrosshair
// 0x0020 (0x0020 - 0x0000)
struct WPN_ZipLineGun_C_GetCrosshair final
{
public:
	class UHUD_Crosshair_ZiplineGun_C*            Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51FF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_ZiplineGun_C*            K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_GetCrosshair) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_GetCrosshair");
static_assert(sizeof(WPN_ZipLineGun_C_GetCrosshair) == 0x000020, "Wrong size on WPN_ZipLineGun_C_GetCrosshair");
static_assert(offsetof(WPN_ZipLineGun_C_GetCrosshair, Result) == 0x000000, "Member 'WPN_ZipLineGun_C_GetCrosshair::Result' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetCrosshair, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WPN_ZipLineGun_C_GetCrosshair::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetCrosshair, K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun) == 0x000010, "Member 'WPN_ZipLineGun_C_GetCrosshair::K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetCrosshair, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WPN_ZipLineGun_C_GetCrosshair::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.Update Line Of Sight
// 0x00BC (0x00BC - 0x0000)
struct WPN_ZipLineGun_C_Update_Line_Of_Sight final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DidHit;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5200[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_Update_Line_Of_Sight) == 0x000004, "Wrong alignment on WPN_ZipLineGun_C_Update_Line_Of_Sight");
static_assert(sizeof(WPN_ZipLineGun_C_Update_Line_Of_Sight) == 0x0000BC, "Wrong size on WPN_ZipLineGun_C_Update_Line_Of_Sight");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, Direction) == 0x000000, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::Direction' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, End) == 0x00000C, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::End' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, DidHit) == 0x000018, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::DidHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00001C, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000024, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000030, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Update_Line_Of_Sight, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B8, "Member 'WPN_ZipLineGun_C_Update_Line_Of_Sight::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.Negate
// 0x0010 (0x0010 - 0x0000)
struct WPN_ZipLineGun_C_Negate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_Negate) == 0x000004, "Wrong alignment on WPN_ZipLineGun_C_Negate");
static_assert(sizeof(WPN_ZipLineGun_C_Negate) == 0x000010, "Wrong size on WPN_ZipLineGun_C_Negate");
static_assert(offsetof(WPN_ZipLineGun_C_Negate, Value) == 0x000000, "Member 'WPN_ZipLineGun_C_Negate::Value' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Negate, Result) == 0x000004, "Member 'WPN_ZipLineGun_C_Negate::Result' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Negate, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'WPN_ZipLineGun_C_Negate::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Negate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'WPN_ZipLineGun_C_Negate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.Between
// 0x0010 (0x0010 - 0x0000)
struct WPN_ZipLineGun_C_Between final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBetween;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_Between) == 0x000004, "Wrong alignment on WPN_ZipLineGun_C_Between");
static_assert(sizeof(WPN_ZipLineGun_C_Between) == 0x000010, "Wrong size on WPN_ZipLineGun_C_Between");
static_assert(offsetof(WPN_ZipLineGun_C_Between, Value) == 0x000000, "Member 'WPN_ZipLineGun_C_Between::Value' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Between, Min) == 0x000004, "Member 'WPN_ZipLineGun_C_Between::Min' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Between, Max) == 0x000008, "Member 'WPN_ZipLineGun_C_Between::Max' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Between, IsBetween) == 0x00000C, "Member 'WPN_ZipLineGun_C_Between::IsBetween' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Between, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'WPN_ZipLineGun_C_Between::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Between, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000E, "Member 'WPN_ZipLineGun_C_Between::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Between, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'WPN_ZipLineGun_C_Between::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.Can Fire
// 0x0050 (0x0050 - 0x0000)
struct WPN_ZipLineGun_C_Can_Fire final
{
public:
	class FText                                   FailMsg;                                           // 0x0000(0x0018)(Parm, OutParm)
	class UDialogDataAsset*                       FailShout;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanShoot;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetGrounded_OutGrounded;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Negate_Result;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Between_IsBetween;                        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_Can_Fire) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_Can_Fire");
static_assert(sizeof(WPN_ZipLineGun_C_Can_Fire) == 0x000050, "Wrong size on WPN_ZipLineGun_C_Can_Fire");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, FailMsg) == 0x000000, "Member 'WPN_ZipLineGun_C_Can_Fire::FailMsg' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, FailShout) == 0x000018, "Member 'WPN_ZipLineGun_C_Can_Fire::FailShout' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CanShoot) == 0x000020, "Member 'WPN_ZipLineGun_C_Can_Fire::CanShoot' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_GetGrounded_OutGrounded) == 0x000021, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_GetGrounded_OutGrounded' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000023, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_Negate_Result) == 0x000024, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_Negate_Result' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000028, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000029, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_IsValid_ReturnValue) == 0x00002B, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_GetActorForwardVector_ReturnValue) == 0x00002C, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_GetForwardVector_ReturnValue) == 0x000038, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_Dot_VectorVector_ReturnValue) == 0x000044, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_DegAcos_ReturnValue) == 0x000048, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_Between_IsBetween) == 0x00004C, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_Between_IsBetween' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_Can_Fire, CallFunc_Not_PreBool_ReturnValue_1) == 0x00004D, "Member 'WPN_ZipLineGun_C_Can_Fire::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.GetStartLocation
// 0x0024 (0x0024 - 0x0000)
struct WPN_ZipLineGun_C_GetStartLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_GetStartLocation) == 0x000004, "Wrong alignment on WPN_ZipLineGun_C_GetStartLocation");
static_assert(sizeof(WPN_ZipLineGun_C_GetStartLocation) == 0x000024, "Wrong size on WPN_ZipLineGun_C_GetStartLocation");
static_assert(offsetof(WPN_ZipLineGun_C_GetStartLocation, ReturnValue) == 0x000000, "Member 'WPN_ZipLineGun_C_GetStartLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetStartLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'WPN_ZipLineGun_C_GetStartLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetStartLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'WPN_ZipLineGun_C_GetStartLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.LineTrace
// 0x0820 (0x0820 - 0x0000)
struct WPN_ZipLineGun_C_LineTrace final
{
public:
	struct FHitResult                             OutHit;                                            // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Direction;                                         // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitAny;                                            // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5201[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndLocation;                                       // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5202[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ConstParm, ReferenceParm)
	struct FMinimalViewInfo                       CallFunc_GetCameraView_DesiredView;                // 0x00E0(0x05F0)()
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x06D0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x06E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5203[0x3];                                     // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x076C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0778(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0779(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5204[0x2];                                     // 0x077A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x077C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0784(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0790(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x079C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x07A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5205[0x4];                                     // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x07C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x07DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x07E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x07E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x07F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x07FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0808(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_LineTrace) == 0x000010, "Wrong alignment on WPN_ZipLineGun_C_LineTrace");
static_assert(sizeof(WPN_ZipLineGun_C_LineTrace) == 0x000820, "Wrong size on WPN_ZipLineGun_C_LineTrace");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, OutHit) == 0x000000, "Member 'WPN_ZipLineGun_C_LineTrace::OutHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, Direction) == 0x000088, "Member 'WPN_ZipLineGun_C_LineTrace::Direction' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, Distance) == 0x000094, "Member 'WPN_ZipLineGun_C_LineTrace::Distance' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, HitAny) == 0x000098, "Member 'WPN_ZipLineGun_C_LineTrace::HitAny' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, EndLocation) == 0x00009C, "Member 'WPN_ZipLineGun_C_LineTrace::EndLocation' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, StartLocation) == 0x0000A8, "Member 'WPN_ZipLineGun_C_LineTrace::StartLocation' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000B4, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_Normal_ReturnValue) == 0x0000C0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, K2Node_MakeArray_Array) == 0x0000D0, "Member 'WPN_ZipLineGun_C_LineTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_GetCameraView_DesiredView) == 0x0000E0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_GetCameraView_DesiredView' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, K2Node_MakeArray_Array_1) == 0x0006D0, "Member 'WPN_ZipLineGun_C_LineTrace::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0006E0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000768, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_GetForwardVector_ReturnValue) == 0x00076C, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000778, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000779, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_Time) == 0x00077C, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_Distance) == 0x000780, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_Location) == 0x000784, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000790, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_Normal) == 0x00079C, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x0007A8, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_PhysMat) == 0x0007B8, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_HitActor) == 0x0007C0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_HitComponent) == 0x0007C8, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0007D0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_HitItem) == 0x0007D8, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0007DC, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0007E0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_TraceStart) == 0x0007E4, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0007F0, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0007FC, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_LineTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x000808, "Member 'WPN_ZipLineGun_C_LineTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct WPN_ZipLineGun_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_ReceiveTick) == 0x000004, "Wrong alignment on WPN_ZipLineGun_C_ReceiveTick");
static_assert(sizeof(WPN_ZipLineGun_C_ReceiveTick) == 0x000004, "Wrong size on WPN_ZipLineGun_C_ReceiveTick");
static_assert(offsetof(WPN_ZipLineGun_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'WPN_ZipLineGun_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.AddedToInventory
// 0x0008 (0x0008 - 0x0000)
struct WPN_ZipLineGun_C_AddedToInventory final
{
public:
	class APlayerCharacter*                       ItemOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_AddedToInventory) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_AddedToInventory");
static_assert(sizeof(WPN_ZipLineGun_C_AddedToInventory) == 0x000008, "Wrong size on WPN_ZipLineGun_C_AddedToInventory");
static_assert(offsetof(WPN_ZipLineGun_C_AddedToInventory, ItemOwner) == 0x000000, "Member 'WPN_ZipLineGun_C_AddedToInventory::ItemOwner' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature final
{
public:
	class UUserWidget*                            Param_Crosshair;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature");
static_assert(sizeof(WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature) == 0x000008, "Wrong size on WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature");
static_assert(offsetof(WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature, Param_Crosshair) == 0x000000, "Member 'WPN_ZipLineGun_C_BndEvt__CrosshairAggregator_K2Node_ComponentBoundEvent_0_CrosshairCreated__DelegateSignature::Param_Crosshair' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature) == 0x000004, "Wrong alignment on WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature");
static_assert(sizeof(WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature) == 0x00000C, "Wrong size on WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature");
static_assert(offsetof(WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature, Location) == 0x000000, "Member 'WPN_ZipLineGun_C_BndEvt__ZiplineLauncher_K2Node_ComponentBoundEvent_2_WeaponFiredDelegate__DelegateSignature::Location' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.ExecuteUbergraph_WPN_ZipLineGun
// 0x0218 (0x0218 - 0x0000)
struct WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_Event_ItemOwner;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5206[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Can_Fire_FailMsg;                         // 0x0020(0x0018)()
	class UDialogDataAsset*                       CallFunc_Can_Fire_FailShout;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Can_Fire_CanShoot;                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5207[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_ZiplineGun_C*            CallFunc_GetCrosshair_Result;                      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5208[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_ZiplineGun_C*            CallFunc_GetCrosshair_Result_1;                    // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5209[0x5];                                     // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_ZiplineGun_C*            CallFunc_GetCrosshair_Result_2;                    // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_520A[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_ComponentBoundEvent_Crosshair;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponDisplay_Base_AmmoCount_C*        K2Node_DynamicCast_AsWeapon_Display_Base_Ammo_Count; // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_520B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_ZiplineGun_C*            K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun;    // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_520C[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUD_Crosshair_ZiplineGun_C*            K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun_1;  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_520D[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_ComponentBoundEvent_location;               // 0x00BC(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_520E[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameUserSettings*                   CallFunc_GetFSDGameUserSettings_ReturnValue;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetZiplineGunAutoSwitch_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_LineTrace_OutHit;                         // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_LineTrace_Direction;                      // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LineTrace_Distance;                       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LineTrace_HitAny;                         // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_520F[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5210[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5211[0x3];                                     // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun");
static_assert(sizeof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun) == 0x000218, "Wrong size on WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, EntryPoint) == 0x000000, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::EntryPoint' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_Event_ItemOwner) == 0x000010, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_Event_ItemOwner' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsLocallyControlled_ReturnValue) == 0x000018, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Can_Fire_FailMsg) == 0x000020, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Can_Fire_FailMsg' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Can_Fire_FailShout) == 0x000038, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Can_Fire_FailShout' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Can_Fire_CanShoot) == 0x000040, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Can_Fire_CanShoot' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_GetCrosshair_Result) == 0x000048, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_GetCrosshair_Result' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_GetCrosshair_Result_1) == 0x000058, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_GetCrosshair_Result_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsValid_ReturnValue_2) == 0x000061, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000062, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_GetCrosshair_Result_2) == 0x000068, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_GetCrosshair_Result_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsValid_ReturnValue_3) == 0x000070, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000078, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_ComponentBoundEvent_Crosshair) == 0x000080, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_ComponentBoundEvent_Crosshair' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_DynamicCast_AsWeapon_Display_Base_Ammo_Count) == 0x000088, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_DynamicCast_AsWeapon_Display_Base_Ammo_Count' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun) == 0x000098, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Abs_ReturnValue) == 0x0000A4, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000AC, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun_1) == 0x0000B0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_DynamicCast_AsHUD_Crosshair_Zipline_Gun_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, K2Node_ComponentBoundEvent_location) == 0x0000BC, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::K2Node_ComponentBoundEvent_location' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x0000C8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C9, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_GetFSDGameUserSettings_ReturnValue) == 0x0000D0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_GetFSDGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_GetZiplineGunAutoSwitch_ReturnValue) == 0x0000D8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_GetZiplineGunAutoSwitch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BooleanAND_ReturnValue_2) == 0x0000D9, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BooleanOR_ReturnValue) == 0x0000DA, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Not_PreBool_ReturnValue) == 0x0000DB, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_LineTrace_OutHit) == 0x0000DC, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_LineTrace_OutHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_LineTrace_Direction) == 0x000164, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_LineTrace_Direction' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_LineTrace_Distance) == 0x000170, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_LineTrace_Distance' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_LineTrace_HitAny) == 0x000174, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_LineTrace_HitAny' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Not_PreBool_ReturnValue_1) == 0x000175, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000176, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_bBlockingHit) == 0x000177, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_bInitialOverlap) == 0x000178, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_Time) == 0x00017C, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_Distance) == 0x000180, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_Location) == 0x000184, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_ImpactPoint) == 0x000190, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_Normal) == 0x00019C, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_HitItem) == 0x0001D8, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_ElementIndex) == 0x0001DC, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_FaceIndex) == 0x0001E0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_TraceStart) == 0x0001E4, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BreakHitResult_TraceEnd) == 0x0001F0, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_BooleanOR_ReturnValue_1) == 0x0001FC, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000200, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_VSize_ReturnValue) == 0x00020C, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000210, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun, CallFunc_Less_FloatFloat_ReturnValue) == 0x000214, "Member 'WPN_ZipLineGun_C_ExecuteUbergraph_WPN_ZipLineGun::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function WPN_ZipLineGun.WPN_ZipLineGun_C.GetGearStatEntry
// 0x02D8 (0x02D8 - 0x0000)
struct WPN_ZipLineGun_C_GetGearStatEntry final
{
public:
	class AFSDPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGearStatEntry>                 Stats;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGearStatEntry                         CallFunc_UPGDESC_ZiplineGun_GearStatEntry;         // 0x0020(0x0068)()
	bool                                          CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5212[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGearStatEntry                         CallFunc_UPGDESC_ZiplineGun_GearStatEntry_1;       // 0x0090(0x0068)()
	bool                                          CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_1;    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5213[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5214[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGearStatEntry                         CallFunc_UPGDESC_ZiplineGun_GearStatEntry_2;       // 0x0108(0x0068)()
	bool                                          CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_2;    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5215[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGearStatEntry                         CallFunc_UPGDESC_AmmoDriven_GearStatEntry;         // 0x0178(0x0068)()
	bool                                          CallFunc_UPGDESC_AmmoDriven_HasAnyUpgrades;        // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5216[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5217[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGearStatEntry                         CallFunc_UPGDESC_AmmoDriven_GearStatEntry_1;       // 0x01F0(0x0068)()
	bool                                          CallFunc_UPGDESC_AmmoDriven_HasAnyUpgrades_1;      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5218[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGearStatEntry                         CallFunc_UPGDESC_ZiplineGun_GearStatEntry_3;       // 0x0260(0x0068)()
	bool                                          CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_3;    // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5219[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_ZipLineGun_C_GetGearStatEntry) == 0x000008, "Wrong alignment on WPN_ZipLineGun_C_GetGearStatEntry");
static_assert(sizeof(WPN_ZipLineGun_C_GetGearStatEntry) == 0x0002D8, "Wrong size on WPN_ZipLineGun_C_GetGearStatEntry");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, PlayerState) == 0x000000, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, Stats) == 0x000008, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::Stats' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_GearStatEntry) == 0x000020, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_GearStatEntry' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue) == 0x000088, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_GearStatEntry_1) == 0x000090, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_GearStatEntry_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_1) == 0x0000F8, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_Array_Add_ReturnValue) == 0x0000FC, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_Array_Add_ReturnValue_1) == 0x000100, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_GearStatEntry_2) == 0x000108, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_GearStatEntry_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_2) == 0x000170, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_AmmoDriven_GearStatEntry) == 0x000178, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_AmmoDriven_GearStatEntry' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_AmmoDriven_HasAnyUpgrades) == 0x0001E0, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_AmmoDriven_HasAnyUpgrades' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_Array_Add_ReturnValue_2) == 0x0001E4, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_Array_Add_ReturnValue_3) == 0x0001E8, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_AmmoDriven_GearStatEntry_1) == 0x0001F0, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_AmmoDriven_GearStatEntry_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_AmmoDriven_HasAnyUpgrades_1) == 0x000258, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_AmmoDriven_HasAnyUpgrades_1' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_GearStatEntry_3) == 0x000260, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_GearStatEntry_3' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_3) == 0x0002C8, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_UPGDESC_ZiplineGun_HasUpgradedValue_3' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_Array_Add_ReturnValue_4) == 0x0002CC, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WPN_ZipLineGun_C_GetGearStatEntry, CallFunc_Array_Add_ReturnValue_5) == 0x0002D0, "Member 'WPN_ZipLineGun_C_GetGearStatEntry::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");

}

