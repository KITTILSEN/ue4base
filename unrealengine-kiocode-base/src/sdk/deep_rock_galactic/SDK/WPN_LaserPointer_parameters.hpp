#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_LaserPointer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FSD_structs.hpp"


namespace SDK::Params
{

// Function WPN_LaserPointer.WPN_LaserPointer_C.SetLaserBeamMaterial
// 0x0030 (0x0030 - 0x0000)
struct WPN_LaserPointer_C_SetLaserBeamMaterial final
{
public:
	class APlayerCharacter*                       InCharacter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryList*                         CallFunc_GetInventoryList_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5087[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_LaserPointer_C_SetLaserBeamMaterial) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_SetLaserBeamMaterial");
static_assert(sizeof(WPN_LaserPointer_C_SetLaserBeamMaterial) == 0x000030, "Wrong size on WPN_LaserPointer_C_SetLaserBeamMaterial");
static_assert(offsetof(WPN_LaserPointer_C_SetLaserBeamMaterial, InCharacter) == 0x000000, "Member 'WPN_LaserPointer_C_SetLaserBeamMaterial::InCharacter' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetLaserBeamMaterial, CallFunc_GetInventoryList_ReturnValue) == 0x000008, "Member 'WPN_LaserPointer_C_SetLaserBeamMaterial::CallFunc_GetInventoryList_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetLaserBeamMaterial, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000010, "Member 'WPN_LaserPointer_C_SetLaserBeamMaterial::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetLaserBeamMaterial, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000018, "Member 'WPN_LaserPointer_C_SetLaserBeamMaterial::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetLaserBeamMaterial, K2Node_DynamicCast_AsMaterial_Interface) == 0x000020, "Member 'WPN_LaserPointer_C_SetLaserBeamMaterial::K2Node_DynamicCast_AsMaterial_Interface' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetLaserBeamMaterial, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WPN_LaserPointer_C_SetLaserBeamMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.SetBeamVisibility
// 0x0018 (0x0018 - 0x0000)
struct WPN_LaserPointer_C_SetBeamVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5088[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUD_Crosshair_LaserPointer_C*          K2Node_DynamicCast_AsHUD_Crosshair_Laser_Pointer;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_LaserPointer_C_SetBeamVisibility) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_SetBeamVisibility");
static_assert(sizeof(WPN_LaserPointer_C_SetBeamVisibility) == 0x000018, "Wrong size on WPN_LaserPointer_C_SetBeamVisibility");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, bNewVisibility) == 0x000000, "Member 'WPN_LaserPointer_C_SetBeamVisibility::bNewVisibility' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'WPN_LaserPointer_C_SetBeamVisibility::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'WPN_LaserPointer_C_SetBeamVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, CallFunc_BooleanAND_ReturnValue_1) == 0x000003, "Member 'WPN_LaserPointer_C_SetBeamVisibility::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WPN_LaserPointer_C_SetBeamVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, K2Node_DynamicCast_AsHUD_Crosshair_Laser_Pointer) == 0x000008, "Member 'WPN_LaserPointer_C_SetBeamVisibility::K2Node_DynamicCast_AsHUD_Crosshair_Laser_Pointer' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_SetBeamVisibility, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WPN_LaserPointer_C_SetBeamVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.CanPlacePOI
// 0x0060 (0x0060 - 0x0000)
struct WPN_LaserPointer_C_CanPlacePOI final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5089[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Icon;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Place;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_508A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_508B[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PointOfInterest_C*                  CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_508C[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_LaserPointer_C_CanPlacePOI) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_CanPlacePOI");
static_assert(sizeof(WPN_LaserPointer_C_CanPlacePOI) == 0x000060, "Wrong size on WPN_LaserPointer_C_CanPlacePOI");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, Location) == 0x000000, "Member 'WPN_LaserPointer_C_CanPlacePOI::Location' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, Icon) == 0x000010, "Member 'WPN_LaserPointer_C_CanPlacePOI::Icon' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, Can_Place) == 0x000018, "Member 'WPN_LaserPointer_C_CanPlacePOI::Can_Place' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'WPN_LaserPointer_C_CanPlacePOI::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'WPN_LaserPointer_C_CanPlacePOI::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_Array_Get_Item) == 0x000030, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_VSizeSquared_ReturnValue) == 0x000054, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_Less_FloatFloat_ReturnValue) == 0x000059, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_CanPlacePOI, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'WPN_LaserPointer_C_CanPlacePOI::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.UpdateBackgroundColor
// 0x0001 (0x0001 - 0x0000)
struct WPN_LaserPointer_C_UpdateBackgroundColor final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_LaserPointer_C_UpdateBackgroundColor) == 0x000001, "Wrong alignment on WPN_LaserPointer_C_UpdateBackgroundColor");
static_assert(sizeof(WPN_LaserPointer_C_UpdateBackgroundColor) == 0x000001, "Wrong size on WPN_LaserPointer_C_UpdateBackgroundColor");
static_assert(offsetof(WPN_LaserPointer_C_UpdateBackgroundColor, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'WPN_LaserPointer_C_UpdateBackgroundColor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct WPN_LaserPointer_C_SetBackgroundColor final
{
public:
	struct FLinearColor                           Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_SetBackgroundColor) == 0x000004, "Wrong alignment on WPN_LaserPointer_C_SetBackgroundColor");
static_assert(sizeof(WPN_LaserPointer_C_SetBackgroundColor) == 0x000010, "Wrong size on WPN_LaserPointer_C_SetBackgroundColor");
static_assert(offsetof(WPN_LaserPointer_C_SetBackgroundColor, Value) == 0x000000, "Member 'WPN_LaserPointer_C_SetBackgroundColor::Value' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.Adjust Beam
// 0x01C0 (0x01C0 - 0x0000)
struct WPN_LaserPointer_C_Adjust_Beam final
{
public:
	struct FTransform                             CallFunc_GetPointTransform_PointTransform;         // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0088(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x012C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WPN_LaserPointer_C_Adjust_Beam) == 0x000010, "Wrong alignment on WPN_LaserPointer_C_Adjust_Beam");
static_assert(sizeof(WPN_LaserPointer_C_Adjust_Beam) == 0x0001C0, "Wrong size on WPN_LaserPointer_C_Adjust_Beam");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_GetPointTransform_PointTransform) == 0x000000, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_GetPointTransform_PointTransform' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_BreakTransform_Location) == 0x000030, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_BreakTransform_Rotation) == 0x00003C, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_BreakTransform_Scale) == 0x000048, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000054, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00006C, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000078, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_VSize_ReturnValue) == 0x000084, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000088, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000110, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_MakeRotFromX_ReturnValue) == 0x000114, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_MakeVector_ReturnValue) == 0x000120, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_Adjust_Beam, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x00012C, "Member 'WPN_LaserPointer_C_Adjust_Beam::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.GetPointTransform
// 0x0070 (0x0070 - 0x0000)
struct WPN_LaserPointer_C_GetPointTransform final
{
public:
	struct FTransform                             PointTransform;                                    // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_508D[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_LaserPointer_C_GetPointTransform) == 0x000010, "Wrong alignment on WPN_LaserPointer_C_GetPointTransform");
static_assert(sizeof(WPN_LaserPointer_C_GetPointTransform) == 0x000070, "Wrong size on WPN_LaserPointer_C_GetPointTransform");
static_assert(offsetof(WPN_LaserPointer_C_GetPointTransform, PointTransform) == 0x000000, "Member 'WPN_LaserPointer_C_GetPointTransform::PointTransform' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_GetPointTransform, Temp_bool_Variable) == 0x000030, "Member 'WPN_LaserPointer_C_GetPointTransform::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_GetPointTransform, CallFunc_IsLocallyControlled_ReturnValue) == 0x000031, "Member 'WPN_LaserPointer_C_GetPointTransform::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_GetPointTransform, K2Node_Select_Default) == 0x000038, "Member 'WPN_LaserPointer_C_GetPointTransform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_GetPointTransform, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000040, "Member 'WPN_LaserPointer_C_GetPointTransform::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct WPN_LaserPointer_C_UserConstructionScript final
{
public:
	struct FLinearColor                           CallFunc_K2_GetVectorParameterValue_ReturnValue;   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_UserConstructionScript) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_UserConstructionScript");
static_assert(sizeof(WPN_LaserPointer_C_UserConstructionScript) == 0x000018, "Wrong size on WPN_LaserPointer_C_UserConstructionScript");
static_assert(offsetof(WPN_LaserPointer_C_UserConstructionScript, CallFunc_K2_GetVectorParameterValue_ReturnValue) == 0x000000, "Member 'WPN_LaserPointer_C_UserConstructionScript::CallFunc_K2_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WPN_LaserPointer_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.OnPointOfInterest
// 0x0020 (0x0020 - 0x0000)
struct WPN_LaserPointer_C_OnPointOfInterest final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_508E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             TargetIcon;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_OnPointOfInterest) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_OnPointOfInterest");
static_assert(sizeof(WPN_LaserPointer_C_OnPointOfInterest) == 0x000020, "Wrong size on WPN_LaserPointer_C_OnPointOfInterest");
static_assert(offsetof(WPN_LaserPointer_C_OnPointOfInterest, TargetActor) == 0x000000, "Member 'WPN_LaserPointer_C_OnPointOfInterest::TargetActor' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_OnPointOfInterest, TargetLocation) == 0x000008, "Member 'WPN_LaserPointer_C_OnPointOfInterest::TargetLocation' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_OnPointOfInterest, TargetIcon) == 0x000018, "Member 'WPN_LaserPointer_C_OnPointOfInterest::TargetIcon' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.AddedToInventory
// 0x0008 (0x0008 - 0x0000)
struct WPN_LaserPointer_C_AddedToInventory final
{
public:
	class APlayerCharacter*                       ItemOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_AddedToInventory) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_AddedToInventory");
static_assert(sizeof(WPN_LaserPointer_C_AddedToInventory) == 0x000008, "Wrong size on WPN_LaserPointer_C_AddedToInventory");
static_assert(offsetof(WPN_LaserPointer_C_AddedToInventory, ItemOwner) == 0x000000, "Member 'WPN_LaserPointer_C_AddedToInventory::ItemOwner' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.OnMarkerPlaced_Event
// 0x0048 (0x0048 - 0x0000)
struct WPN_LaserPointer_C_OnMarkerPlaced_Event final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_508F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Param_Name;                                        // 0x0010(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Color;                                             // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELaserPointerTargetType                       TypeOfTarget;                                      // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_OnMarkerPlaced_Event) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_OnMarkerPlaced_Event");
static_assert(sizeof(WPN_LaserPointer_C_OnMarkerPlaced_Event) == 0x000048, "Wrong size on WPN_LaserPointer_C_OnMarkerPlaced_Event");
static_assert(offsetof(WPN_LaserPointer_C_OnMarkerPlaced_Event, Location) == 0x000000, "Member 'WPN_LaserPointer_C_OnMarkerPlaced_Event::Location' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_OnMarkerPlaced_Event, Param_Name) == 0x000010, "Member 'WPN_LaserPointer_C_OnMarkerPlaced_Event::Param_Name' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_OnMarkerPlaced_Event, Color) == 0x000028, "Member 'WPN_LaserPointer_C_OnMarkerPlaced_Event::Color' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_OnMarkerPlaced_Event, Target) == 0x000038, "Member 'WPN_LaserPointer_C_OnMarkerPlaced_Event::Target' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_OnMarkerPlaced_Event, TypeOfTarget) == 0x000040, "Member 'WPN_LaserPointer_C_OnMarkerPlaced_Event::TypeOfTarget' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.ToggleLaserVisible
// 0x0001 (0x0001 - 0x0000)
struct WPN_LaserPointer_C_ToggleLaserVisible final
{
public:
	bool                                          AVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WPN_LaserPointer_C_ToggleLaserVisible) == 0x000001, "Wrong alignment on WPN_LaserPointer_C_ToggleLaserVisible");
static_assert(sizeof(WPN_LaserPointer_C_ToggleLaserVisible) == 0x000001, "Wrong size on WPN_LaserPointer_C_ToggleLaserVisible");
static_assert(offsetof(WPN_LaserPointer_C_ToggleLaserVisible, AVisible) == 0x000000, "Member 'WPN_LaserPointer_C_ToggleLaserVisible::AVisible' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.OnPOIDestroyed
// 0x0008 (0x0008 - 0x0000)
struct WPN_LaserPointer_C_OnPOIDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_OnPOIDestroyed) == 0x000008, "Wrong alignment on WPN_LaserPointer_C_OnPOIDestroyed");
static_assert(sizeof(WPN_LaserPointer_C_OnPOIDestroyed) == 0x000008, "Wrong size on WPN_LaserPointer_C_OnPOIDestroyed");
static_assert(offsetof(WPN_LaserPointer_C_OnPOIDestroyed, DestroyedActor) == 0x000000, "Member 'WPN_LaserPointer_C_OnPOIDestroyed::DestroyedActor' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct WPN_LaserPointer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_ReceiveTick) == 0x000004, "Wrong alignment on WPN_LaserPointer_C_ReceiveTick");
static_assert(sizeof(WPN_LaserPointer_C_ReceiveTick) == 0x000004, "Wrong size on WPN_LaserPointer_C_ReceiveTick");
static_assert(offsetof(WPN_LaserPointer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'WPN_LaserPointer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function WPN_LaserPointer.WPN_LaserPointer_C.ExecuteUbergraph_WPN_LaserPointer
// 0x0170 (0x0170 - 0x0000)
struct WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5090[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUD_LaserPointerDisplay_C*             K2Node_DynamicCast_AsHUD_Laser_Pointer_Display;    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5091[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_TargetActor;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_TargetLocation;                       // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5092[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Event_TargetIcon;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5093[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5094[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_Event_ItemOwner;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFSDSaveGame*                           CallFunc_GetFSDSaveGame_ReturnValue;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInMinersManual_ReturnValue;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5095[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_Name;                           // 0x00D8(0x0018)(ConstParm)
	struct FLinearColor                           K2Node_CustomEvent_Color;                          // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Target;                         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELaserPointerTargetType                       K2Node_CustomEvent_TypeOfTarget;                   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_GuidGuid_ReturnValue;            // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_Guid_ReturnValue;                 // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_aVisible;                             // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x010F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PointOfInterest_C*                  K2Node_DynamicCast_AsBP_Point_Of_Interest;         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5096[0x1];                                     // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5097[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FVector& Location, class FText& Name, const struct FLinearColor& Color, class AActor* Target, ELaserPointerTargetType TypeOfTarget)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0130(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5098[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5099[0x5];                                     // 0x0153(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PointOfInterest_C*                  CallFunc_FinishSpawningActor_ReturnValue;          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer) == 0x000010, "Wrong alignment on WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer");
static_assert(sizeof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer) == 0x000170, "Wrong size on WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, EntryPoint) == 0x000000, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000020, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000030, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_DynamicCast_AsHUD_Laser_Pointer_Display) == 0x000038, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_DynamicCast_AsHUD_Laser_Pointer_Display' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_Event_TargetActor) == 0x000048, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_Event_TargetActor' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_Event_TargetLocation) == 0x000050, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_Event_TargetLocation' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_Event_TargetIcon) == 0x000060, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_Event_TargetIcon' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000070, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000A0, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsValid_ReturnValue) == 0x0000AC, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_SpawnSoundAttached_ReturnValue) == 0x0000B0, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_Event_ItemOwner) == 0x0000B8, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_Event_ItemOwner' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_GetFSDSaveGame_ReturnValue) == 0x0000C0, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_GetFSDSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsInMinersManual_ReturnValue) == 0x0000C8, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsInMinersManual_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_Not_PreBool_ReturnValue) == 0x0000C9, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CustomEvent_Location) == 0x0000CC, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CustomEvent_Name) == 0x0000D8, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CustomEvent_Name' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CustomEvent_Color) == 0x0000F0, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CustomEvent_Target) == 0x000100, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CustomEvent_TypeOfTarget) == 0x000108, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CustomEvent_TypeOfTarget' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_NotEqual_GuidGuid_ReturnValue) == 0x000109, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_NotEqual_GuidGuid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsValid_Guid_ReturnValue) == 0x00010A, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsValid_Guid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_Event_aVisible) == 0x00010B, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_Event_aVisible' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsVisible_ReturnValue) == 0x00010C, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsVisible_ReturnValue_1) == 0x00010D, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_BooleanOR_ReturnValue) == 0x00010E, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00010F, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CustomEvent_DestroyedActor) == 0x000110, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_DynamicCast_AsBP_Point_Of_Interest) == 0x000118, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_DynamicCast_AsBP_Point_Of_Interest' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_DynamicCast_bSuccess_1) == 0x000120, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_Array_RemoveItem_ReturnValue) == 0x000121, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsLocallyControlled_ReturnValue) == 0x000122, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_Event_DeltaSeconds) == 0x000124, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000128, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_IsValid_ReturnValue_1) == 0x00012C, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, K2Node_CreateDelegate_OutputDelegate_1) == 0x000130, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000140, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x000144, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000148, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_BooleanAND_ReturnValue) == 0x000149, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00014C, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000150, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000151, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_BooleanOR_ReturnValue_1) == 0x000152, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000158, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer, CallFunc_FinishSpawningActor_ReturnValue) == 0x000160, "Member 'WPN_LaserPointer_C_ExecuteUbergraph_WPN_LaserPointer::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

}

