#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Filter_ServerGameType

#include "Basic.hpp"

#include "FSD_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Filter_ServerGameType.Filter_ServerGameType_C.VerifyOnlyModded
// 0x0006 (0x0006 - 0x0000)
struct Filter_ServerGameType_C_VerifyOnlyModded final
{
public:
	EGameType                                     LastClicked;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsChecked_Checked;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsChecked_Checked_1;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsChecked_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_VerifyOnlyModded) == 0x000001, "Wrong alignment on Filter_ServerGameType_C_VerifyOnlyModded");
static_assert(sizeof(Filter_ServerGameType_C_VerifyOnlyModded) == 0x000006, "Wrong size on Filter_ServerGameType_C_VerifyOnlyModded");
static_assert(offsetof(Filter_ServerGameType_C_VerifyOnlyModded, LastClicked) == 0x000000, "Member 'Filter_ServerGameType_C_VerifyOnlyModded::LastClicked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyOnlyModded, CallFunc_GetIsChecked_Checked) == 0x000001, "Member 'Filter_ServerGameType_C_VerifyOnlyModded::CallFunc_GetIsChecked_Checked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyOnlyModded, CallFunc_GetIsChecked_Checked_1) == 0x000002, "Member 'Filter_ServerGameType_C_VerifyOnlyModded::CallFunc_GetIsChecked_Checked_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyOnlyModded, CallFunc_GetIsChecked_ReturnValue) == 0x000003, "Member 'Filter_ServerGameType_C_VerifyOnlyModded::CallFunc_GetIsChecked_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyOnlyModded, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'Filter_ServerGameType_C_VerifyOnlyModded::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyOnlyModded, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'Filter_ServerGameType_C_VerifyOnlyModded::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.VerifyRules
// 0x0040 (0x0040 - 0x0000)
struct Filter_ServerGameType_C_VerifyRules final
{
public:
	TArray<EGameType>                             Selected;                                          // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55A0[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGameType>                             CallFunc_GetSelectedGameTypes_Gametypes;           // 0x0020(0x0010)(ReferenceParm)
	class UCheck_ServerGameType_C*                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_VerifyRules) == 0x000008, "Wrong alignment on Filter_ServerGameType_C_VerifyRules");
static_assert(sizeof(Filter_ServerGameType_C_VerifyRules) == 0x000040, "Wrong size on Filter_ServerGameType_C_VerifyRules");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, Selected) == 0x000000, "Member 'Filter_ServerGameType_C_VerifyRules::Selected' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Filter_ServerGameType_C_VerifyRules::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'Filter_ServerGameType_C_VerifyRules::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Filter_ServerGameType_C_VerifyRules::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, CallFunc_GetSelectedGameTypes_Gametypes) == 0x000020, "Member 'Filter_ServerGameType_C_VerifyRules::CallFunc_GetSelectedGameTypes_Gametypes' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, CallFunc_Array_Get_Item) == 0x000030, "Member 'Filter_ServerGameType_C_VerifyRules::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'Filter_ServerGameType_C_VerifyRules::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_VerifyRules, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'Filter_ServerGameType_C_VerifyRules::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.IsSandBoxMode
// 0x0020 (0x0020 - 0x0000)
struct Filter_ServerGameType_C_IsSandBoxMode final
{
public:
	bool                                          SandboxMode;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDSaveGame*                           CallFunc_GetFSDSaveGame_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUGCRegistry*                           CallFunc_GetUGCRegistry_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsModded_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AreModsInstalled_ReturnValue;             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_IsSandBoxMode) == 0x000008, "Wrong alignment on Filter_ServerGameType_C_IsSandBoxMode");
static_assert(sizeof(Filter_ServerGameType_C_IsSandBoxMode) == 0x000020, "Wrong size on Filter_ServerGameType_C_IsSandBoxMode");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, SandboxMode) == 0x000000, "Member 'Filter_ServerGameType_C_IsSandBoxMode::SandboxMode' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, CallFunc_GetFSDSaveGame_ReturnValue) == 0x000008, "Member 'Filter_ServerGameType_C_IsSandBoxMode::CallFunc_GetFSDSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, CallFunc_GetUGCRegistry_ReturnValue) == 0x000010, "Member 'Filter_ServerGameType_C_IsSandBoxMode::CallFunc_GetUGCRegistry_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, CallFunc_GetIsModded_ReturnValue) == 0x000018, "Member 'Filter_ServerGameType_C_IsSandBoxMode::CallFunc_GetIsModded_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'Filter_ServerGameType_C_IsSandBoxMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, CallFunc_AreModsInstalled_ReturnValue) == 0x00001A, "Member 'Filter_ServerGameType_C_IsSandBoxMode::CallFunc_AreModsInstalled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_IsSandBoxMode, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'Filter_ServerGameType_C_IsSandBoxMode::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.CreateEntries
// 0x0060 (0x0060 - 0x0000)
struct Filter_ServerGameType_C_CreateEntries final
{
public:
	class UCheck_ServerGameType_C*                Entry;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55A2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheck_ServerGameType_C*                CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A3[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool IsChecked, EGameType Gametype)> K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsSandBoxMode_SandboxMode;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A4[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCheck_ServerGameType_C*>        K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UUGCRegistry*                           CallFunc_GetUGCRegistry_ReturnValue;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Filter_ServerGameType_C_CreateEntries) == 0x000008, "Wrong alignment on Filter_ServerGameType_C_CreateEntries");
static_assert(sizeof(Filter_ServerGameType_C_CreateEntries) == 0x000060, "Wrong size on Filter_ServerGameType_C_CreateEntries");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, Entry) == 0x000000, "Member 'Filter_ServerGameType_C_CreateEntries::Entry' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Filter_ServerGameType_C_CreateEntries::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'Filter_ServerGameType_C_CreateEntries::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_Array_Get_Item) == 0x000018, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'Filter_ServerGameType_C_CreateEntries::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_IsSandBoxMode_SandboxMode) == 0x000038, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_IsSandBoxMode_SandboxMode' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, K2Node_MakeArray_Array) == 0x000040, "Member 'Filter_ServerGameType_C_CreateEntries::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_GetUGCRegistry_ReturnValue) == 0x000050, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_GetUGCRegistry_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_SelectVisibility_IsVisible) == 0x000059, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_SelectVisibility_VisibilityChanged) == 0x00005A, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_CreateEntries, CallFunc_SelectVisibility_New_Visibility) == 0x00005B, "Member 'Filter_ServerGameType_C_CreateEntries::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.Reset
// 0x0040 (0x0040 - 0x0000)
struct Filter_ServerGameType_C_Reset final
{
public:
	TArray<EGameType>                             Selected;                                          // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSandBoxMode_SandboxMode;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A5[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUGCRegistry*                           CallFunc_GetUGCRegistry_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCheck_ServerGameType_C*                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_Reset) == 0x000008, "Wrong alignment on Filter_ServerGameType_C_Reset");
static_assert(sizeof(Filter_ServerGameType_C_Reset) == 0x000040, "Wrong size on Filter_ServerGameType_C_Reset");
static_assert(offsetof(Filter_ServerGameType_C_Reset, Selected) == 0x000000, "Member 'Filter_ServerGameType_C_Reset::Selected' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Filter_ServerGameType_C_Reset::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'Filter_ServerGameType_C_Reset::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Filter_ServerGameType_C_Reset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_IsSandBoxMode_SandboxMode) == 0x00001C, "Member 'Filter_ServerGameType_C_Reset::CallFunc_IsSandBoxMode_SandboxMode' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_GetUGCRegistry_ReturnValue) == 0x000020, "Member 'Filter_ServerGameType_C_Reset::CallFunc_GetUGCRegistry_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'Filter_ServerGameType_C_Reset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_SelectVisibility_IsVisible) == 0x000029, "Member 'Filter_ServerGameType_C_Reset::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_SelectVisibility_VisibilityChanged) == 0x00002A, "Member 'Filter_ServerGameType_C_Reset::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_SelectVisibility_New_Visibility) == 0x00002B, "Member 'Filter_ServerGameType_C_Reset::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'Filter_ServerGameType_C_Reset::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_Array_Get_Item) == 0x000030, "Member 'Filter_ServerGameType_C_Reset::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_Reset, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'Filter_ServerGameType_C_Reset::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.GetSelectedGameTypes
// 0x0098 (0x0098 - 0x0000)
struct Filter_ServerGameType_C_GetSelectedGameTypes final
{
public:
	TArray<EGameType>                             GameTypes;                                         // 0x0000(0x0010)(Parm, OutParm)
	class UCheck_ServerGameType_C*                Entry;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EGameType>                             Result;                                            // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsChecked_Checked;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A6[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGameType>                             K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	TArray<EGameType>                             K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_GetIsChecked_ReturnValue;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A7[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EGameType>                             K2Node_MakeArray_Array_2;                          // 0x0060(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A8[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUGCRegistry*                           CallFunc_GetUGCRegistry_ReturnValue;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A9[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCheck_ServerGameType_C*                CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_GetSelectedGameTypes) == 0x000008, "Wrong alignment on Filter_ServerGameType_C_GetSelectedGameTypes");
static_assert(sizeof(Filter_ServerGameType_C_GetSelectedGameTypes) == 0x000098, "Wrong size on Filter_ServerGameType_C_GetSelectedGameTypes");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, GameTypes) == 0x000000, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::GameTypes' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, Entry) == 0x000010, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::Entry' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, Result) == 0x000018, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::Result' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, Temp_int_Array_Index_Variable) == 0x000030, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_GetIsChecked_Checked) == 0x000034, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_GetIsChecked_Checked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, K2Node_MakeArray_Array) == 0x000038, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, K2Node_MakeArray_Array_1) == 0x000048, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_GetIsChecked_ReturnValue) == 0x000058, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_GetIsChecked_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, K2Node_MakeArray_Array_2) == 0x000060, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_GetUGCRegistry_ReturnValue) == 0x000078, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_GetUGCRegistry_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_Array_AddUnique_ReturnValue) == 0x000084, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_Array_Get_Item) == 0x000088, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_GetSelectedGameTypes, CallFunc_Less_IntInt_ReturnValue) == 0x000094, "Member 'Filter_ServerGameType_C_GetSelectedGameTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.OpenMenu
// 0x0001 (0x0001 - 0x0000)
struct Filter_ServerGameType_C_OpenMenu final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_OpenMenu) == 0x000001, "Wrong alignment on Filter_ServerGameType_C_OpenMenu");
static_assert(sizeof(Filter_ServerGameType_C_OpenMenu) == 0x000001, "Wrong size on Filter_ServerGameType_C_OpenMenu");
static_assert(offsetof(Filter_ServerGameType_C_OpenMenu, Open) == 0x000000, "Member 'Filter_ServerGameType_C_OpenMenu::Open' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.UpdateSubheader
// 0x0208 (0x0208 - 0x0000)
struct Filter_ServerGameType_C_UpdateSubheader final
{
public:
	int32                                         CheckedCount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55AA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheck_ServerGameType_C*                Entry;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   HeaderText;                                        // 0x0010(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AC[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0068(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AD[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_3;                              // 0x0090(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AE[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheck_ServerGameType_C*                CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55AF[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55B0[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00C8(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B1[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x00E8(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x0100(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0118(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0158(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GetIsChecked_Checked;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55B2[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x01A0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01E0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01F0(0x0018)()
};
static_assert(alignof(Filter_ServerGameType_C_UpdateSubheader) == 0x000008, "Wrong alignment on Filter_ServerGameType_C_UpdateSubheader");
static_assert(sizeof(Filter_ServerGameType_C_UpdateSubheader) == 0x000208, "Wrong size on Filter_ServerGameType_C_UpdateSubheader");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CheckedCount) == 0x000000, "Member 'Filter_ServerGameType_C_UpdateSubheader::CheckedCount' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Entry) == 0x000008, "Member 'Filter_ServerGameType_C_UpdateSubheader::Entry' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, HeaderText) == 0x000010, "Member 'Filter_ServerGameType_C_UpdateSubheader::HeaderText' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_bool_Variable) == 0x000028, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_text_Variable) == 0x000030, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_text_Variable_1) == 0x000048, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_int_Variable) == 0x000060, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_bool_Variable_1) == 0x000064, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_text_Variable_2) == 0x000068, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_bool_Variable_2) == 0x000080, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, Temp_text_Variable_3) == 0x000090, "Member 'Filter_ServerGameType_C_UpdateSubheader::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000AC, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000AD, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Array_Length_ReturnValue_1) == 0x0000B8, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Less_IntInt_ReturnValue) == 0x0000BC, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C0, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_Select_Default) == 0x0000C8, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_TextIsEmpty_ReturnValue) == 0x0000E0, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_Select_Default_1) == 0x0000E8, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_Select_Default_2) == 0x000100, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_MakeStruct_FormatArgumentData) == 0x000118, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_MakeStruct_FormatArgumentData_1) == 0x000158, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_GetIsChecked_Checked) == 0x000198, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_GetIsChecked_Checked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_MakeStruct_FormatArgumentData_2) == 0x0001A0, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, K2Node_MakeArray_Array) == 0x0001E0, "Member 'Filter_ServerGameType_C_UpdateSubheader::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_UpdateSubheader, CallFunc_Format_ReturnValue) == 0x0001F0, "Member 'Filter_ServerGameType_C_UpdateSubheader::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Filter_ServerGameType_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_PreConstruct) == 0x000001, "Wrong alignment on Filter_ServerGameType_C_PreConstruct");
static_assert(sizeof(Filter_ServerGameType_C_PreConstruct) == 0x000001, "Wrong size on Filter_ServerGameType_C_PreConstruct");
static_assert(offsetof(Filter_ServerGameType_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Filter_ServerGameType_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.OnGameTypeChanged
// 0x0002 (0x0002 - 0x0000)
struct Filter_ServerGameType_C_OnGameTypeChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameType                                     Gametype;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Filter_ServerGameType_C_OnGameTypeChanged) == 0x000001, "Wrong alignment on Filter_ServerGameType_C_OnGameTypeChanged");
static_assert(sizeof(Filter_ServerGameType_C_OnGameTypeChanged) == 0x000002, "Wrong size on Filter_ServerGameType_C_OnGameTypeChanged");
static_assert(offsetof(Filter_ServerGameType_C_OnGameTypeChanged, IsChecked) == 0x000000, "Member 'Filter_ServerGameType_C_OnGameTypeChanged::IsChecked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_OnGameTypeChanged, Gametype) == 0x000001, "Member 'Filter_ServerGameType_C_OnGameTypeChanged::Gametype' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature");
static_assert(sizeof(Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature) == 0x000001, "Wrong size on Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature");
static_assert(offsetof(Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature, IsChecked) == 0x000000, "Member 'Filter_ServerGameType_C_BndEvt__Basic_BoolUserSetting_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature::IsChecked' has a wrong offset!");

// Function Filter_ServerGameType.Filter_ServerGameType_C.ExecuteUbergraph_Filter_ServerGameType
// 0x0008 (0x0008 - 0x0000)
struct Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IsChecked;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsChecked;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameType                                     K2Node_CustomEvent_Gametype;                       // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType) == 0x000004, "Wrong alignment on Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType");
static_assert(sizeof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType) == 0x000008, "Wrong size on Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType");
static_assert(offsetof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType, EntryPoint) == 0x000000, "Member 'Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType::EntryPoint' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType, K2Node_ComponentBoundEvent_IsChecked) == 0x000004, "Member 'Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType::K2Node_ComponentBoundEvent_IsChecked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType, K2Node_Event_IsDesignTime) == 0x000005, "Member 'Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType, K2Node_CustomEvent_IsChecked) == 0x000006, "Member 'Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType::K2Node_CustomEvent_IsChecked' has a wrong offset!");
static_assert(offsetof(Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType, K2Node_CustomEvent_Gametype) == 0x000007, "Member 'Filter_ServerGameType_C_ExecuteUbergraph_Filter_ServerGameType::K2Node_CustomEvent_Gametype' has a wrong offset!");

}

