#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HUD_Crosshair_MicrowaveGun

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_PreConstruct) == 0x000001, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_PreConstruct");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_PreConstruct) == 0x000001, "Wrong size on HUD_Crosshair_MicrowaveGun_C_PreConstruct");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.OnDamagedEnemy_Event
// 0x0020 (0x0020 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event final
{
public:
	TScriptInterface<class IHealth>               EnemyHealth;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper)
	float                                         Damage;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageModifier;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthRemaining;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeakPoint;                                       // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsRadial;                                          // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event) == 0x000008, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event) == 0x000020, "Wrong size on HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event, EnemyHealth) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event::EnemyHealth' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event, Damage) == 0x000010, "Member 'HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event::Damage' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event, DamageModifier) == 0x000014, "Member 'HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event::DamageModifier' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event, HealthRemaining) == 0x000018, "Member 'HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event::HealthRemaining' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event, IsWeakPoint) == 0x00001C, "Member 'HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event::IsWeakPoint' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event, IsRadial) == 0x00001D, "Member 'HUD_Crosshair_MicrowaveGun_C_OnDamagedEnemy_Event::IsRadial' has a wrong offset!");

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.SetData
// 0x0008 (0x0008 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_SetData final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_SetData) == 0x000008, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_SetData");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_SetData) == 0x000008, "Wrong size on HUD_Crosshair_MicrowaveGun_C_SetData");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_SetData, Item) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_SetData::Item' has a wrong offset!");

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.OnLenseActivated
// 0x0001 (0x0001 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_OnLenseActivated final
{
public:
	bool                                          IsWideLens;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_OnLenseActivated) == 0x000001, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_OnLenseActivated");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_OnLenseActivated) == 0x000001, "Wrong size on HUD_Crosshair_MicrowaveGun_C_OnLenseActivated");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnLenseActivated, IsWideLens) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_OnLenseActivated::IsWideLens' has a wrong offset!");

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.OnLenseDeactivated
// 0x0001 (0x0001 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated final
{
public:
	bool                                          IsWideLens;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated) == 0x000001, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated) == 0x000001, "Wrong size on HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated, IsWideLens) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_OnLenseDeactivated::IsWideLens' has a wrong offset!");

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.SetSize
// 0x0004 (0x0004 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_SetSize final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_SetSize) == 0x000004, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_SetSize");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_SetSize) == 0x000004, "Wrong size on HUD_Crosshair_MicrowaveGun_C_SetSize");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_SetSize, Multiplier) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_SetSize::Multiplier' has a wrong offset!");

// Function HUD_Crosshair_MicrowaveGun.HUD_Crosshair_MicrowaveGun_C.ExecuteUbergraph_HUD_Crosshair_MicrowaveGun
// 0x0130 (0x0130 - 0x0000)
struct HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_437E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IHealth>               K2Node_CustomEvent_EnemyHealth;                    // 0x0008(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	float                                         K2Node_CustomEvent_Damage;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DamageModifier;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_HealthRemaining;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsWeakpoint;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsRadial;                       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_437F[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MenuColors_OutputColor;                   // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4380[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4381[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem*                                  K2Node_Event_item;                                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsWideLens_1;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4382[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMicrowaveWeapon*                       K2Node_DynamicCast_AsMicrowave_Weapon;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4383[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsWideLens;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4384[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsWideLens)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool IsWideLens)>              K2Node_CreateDelegate_OutputDelegate_1;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	TArray<class USizeBox*>                       K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4385[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Multiplier;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DFloat_ReturnValue;            // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USizeBox*                               CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DFloat_ReturnValue_1;          // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DFloat_ReturnValue_2;          // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DFloat_ReturnValue_3;          // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TScriptInterface<class IHealth>& EnemyHealth, float Damage, float DamageModifier, float HealthRemaining, bool IsWeakPoint, bool IsRadial)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x011C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun) == 0x000008, "Wrong alignment on HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun");
static_assert(sizeof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun) == 0x000130, "Wrong size on HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, EntryPoint) == 0x000000, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_EnemyHealth) == 0x000008, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_EnemyHealth' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_Damage) == 0x000018, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_DamageModifier) == 0x00001C, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_DamageModifier' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_HealthRemaining) == 0x000020, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_HealthRemaining' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_IsWeakpoint) == 0x000024, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_IsWeakpoint' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_IsRadial) == 0x000025, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_IsRadial' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000028, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_MenuColors_OutputColor) == 0x000030, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_MenuColors_OutputColor' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_DynamicCast_AsPlayer_Character) == 0x000040, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_MakeStruct_LinearColor) == 0x00004C, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_Event_item) == 0x000068, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_Event_item' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_IsWideLens_1) == 0x000070, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_IsWideLens_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_DynamicCast_AsMicrowave_Weapon) == 0x000078, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_DynamicCast_AsMicrowave_Weapon' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_SelectFloat_ReturnValue) == 0x000084, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_IsWideLens) == 0x000088, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_IsWideLens' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_SelectFloat_ReturnValue_1) == 0x00008C, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CreateDelegate_OutputDelegate) == 0x000090, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000A0, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_MakeArray_Array) == 0x0000B0, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_Event_IsDesignTime) == 0x0000C5, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CustomEvent_Multiplier) == 0x0000C8, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CustomEvent_Multiplier' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_Vector2DFloat_ReturnValue) == 0x0000CC, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, Temp_int_Array_Index_Variable) == 0x0000D4, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E0, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000E4, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_MakeStruct_LinearColor_1) == 0x0000E8, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_SelectFloat_ReturnValue_2) == 0x0000F8, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_Vector2DFloat_ReturnValue_1) == 0x0000FC, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_Vector2DFloat_ReturnValue_2) == 0x000104, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_Vector2DFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00010C, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_SelectFloat_ReturnValue_3) == 0x000110, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, CallFunc_Add_Vector2DFloat_ReturnValue_3) == 0x000114, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::CallFunc_Add_Vector2DFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun, K2Node_CreateDelegate_OutputDelegate_2) == 0x00011C, "Member 'HUD_Crosshair_MicrowaveGun_C_ExecuteUbergraph_HUD_Crosshair_MicrowaveGun::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

}

