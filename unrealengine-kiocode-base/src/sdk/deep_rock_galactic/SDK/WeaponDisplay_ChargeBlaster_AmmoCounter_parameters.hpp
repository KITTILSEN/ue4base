#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_ChargeBlaster_AmmoCounter

#include "Basic.hpp"


namespace SDK::Params
{

// Function WeaponDisplay_ChargeBlaster_AmmoCounter.WeaponDisplay_ChargeBlaster_AmmoCounter_C.UpdateAmount
// 0x0028 (0x0028 - 0x0000)
struct WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4924[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
};
static_assert(alignof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount) == 0x000008, "Wrong alignment on WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount");
static_assert(sizeof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount) == 0x000028, "Wrong size on WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount, Value) == 0x000000, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount::Value' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_UpdateAmount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WeaponDisplay_ChargeBlaster_AmmoCounter.WeaponDisplay_ChargeBlaster_AmmoCounter_C.SetTotalCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount) == 0x000004, "Wrong alignment on WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount");
static_assert(sizeof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount) == 0x000004, "Wrong size on WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount, Value) == 0x000000, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetTotalCount::Value' has a wrong offset!");

// Function WeaponDisplay_ChargeBlaster_AmmoCounter.WeaponDisplay_ChargeBlaster_AmmoCounter_C.Max Ammo Changed
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed) == 0x000004, "Wrong alignment on WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed");
static_assert(sizeof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed) == 0x000004, "Wrong size on WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed, Amount) == 0x000000, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_Max_Ammo_Changed::Amount' has a wrong offset!");

// Function WeaponDisplay_ChargeBlaster_AmmoCounter.WeaponDisplay_ChargeBlaster_AmmoCounter_C.Total Ammo left changed
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed) == 0x000004, "Wrong alignment on WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed");
static_assert(sizeof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed) == 0x000004, "Wrong size on WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed, Amount) == 0x000000, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_Total_Ammo_left_changed::Amount' has a wrong offset!");

// Function WeaponDisplay_ChargeBlaster_AmmoCounter.WeaponDisplay_ChargeBlaster_AmmoCounter_C.SetClipCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount) == 0x000004, "Wrong alignment on WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount");
static_assert(sizeof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount) == 0x000004, "Wrong size on WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount, Value) == 0x000000, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_SetClipCount::Value' has a wrong offset!");

// Function WeaponDisplay_ChargeBlaster_AmmoCounter.WeaponDisplay_ChargeBlaster_AmmoCounter_C.ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter
// 0x0014 (0x0014 - 0x0000)
struct WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Value;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Value_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_amount_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_amount;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter) == 0x000004, "Wrong alignment on WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter");
static_assert(sizeof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter) == 0x000014, "Wrong size on WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter, EntryPoint) == 0x000000, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter, K2Node_Event_Value) == 0x000004, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter, K2Node_Event_Value_1) == 0x000008, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter::K2Node_Event_Value_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter, K2Node_Event_amount_1) == 0x00000C, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter::K2Node_Event_amount_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter, K2Node_Event_amount) == 0x000010, "Member 'WeaponDisplay_ChargeBlaster_AmmoCounter_C_ExecuteUbergraph_WeaponDisplay_ChargeBlaster_AmmoCounter::K2Node_Event_amount' has a wrong offset!");

}

