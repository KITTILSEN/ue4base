#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SER_GetEnemyTarget_Chance

#include "Basic.hpp"


namespace SDK::Params
{

// Function SER_GetEnemyTarget_Chance.SER_GetEnemyTarget_Chance_C.GetEnemyTargetChance
// 0x0038 (0x0038 - 0x0000)
struct SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance final
{
public:
	class AActor*                                 FromAcor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 From;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FF4[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FindClosestEnemyFromActorWithSkipChance_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FindClosestEnemyFromActorWithSkipChance_ReturnValue_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance) == 0x000008, "Wrong alignment on SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance");
static_assert(sizeof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance) == 0x000038, "Wrong size on SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, FromAcor) == 0x000000, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::FromAcor' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, From) == 0x000008, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::From' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, Temp_bool_Variable) == 0x000010, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, K2Node_Select_Default) == 0x000018, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, CallFunc_FindClosestEnemyFromActorWithSkipChance_ReturnValue) == 0x000020, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::CallFunc_FindClosestEnemyFromActorWithSkipChance_ReturnValue' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, CallFunc_FindClosestEnemyFromActorWithSkipChance_ReturnValue_1) == 0x000028, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::CallFunc_FindClosestEnemyFromActorWithSkipChance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000030, "Member 'SER_GetEnemyTarget_Chance_C_GetEnemyTargetChance::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");

// Function SER_GetEnemyTarget_Chance.SER_GetEnemyTarget_Chance_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct SER_GetEnemyTarget_Chance_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SER_GetEnemyTarget_Chance_C_ReceiveTickAI) == 0x000008, "Wrong alignment on SER_GetEnemyTarget_Chance_C_ReceiveTickAI");
static_assert(sizeof(SER_GetEnemyTarget_Chance_C_ReceiveTickAI) == 0x000018, "Wrong size on SER_GetEnemyTarget_Chance_C_ReceiveTickAI");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'SER_GetEnemyTarget_Chance_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'SER_GetEnemyTarget_Chance_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'SER_GetEnemyTarget_Chance_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function SER_GetEnemyTarget_Chance.SER_GetEnemyTarget_Chance_C.ExecuteUbergraph_SER_GetEnemyTarget_Chance
// 0x0020 (0x0020 - 0x0000)
struct SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance) == 0x000008, "Wrong alignment on SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance");
static_assert(sizeof(SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance) == 0x000020, "Wrong size on SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance, EntryPoint) == 0x000000, "Member 'SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance::EntryPoint' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance, K2Node_Event_OwnerController) == 0x000008, "Member 'SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance, K2Node_Event_ControlledPawn) == 0x000010, "Member 'SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'SER_GetEnemyTarget_Chance_C_ExecuteUbergraph_SER_GetEnemyTarget_Chance::K2Node_Event_DeltaSeconds' has a wrong offset!");

}

