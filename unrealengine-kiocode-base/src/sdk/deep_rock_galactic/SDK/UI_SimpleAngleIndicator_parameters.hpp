#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_SimpleAngleIndicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_SimpleAngleIndicator.UI_SimpleAngleIndicator_C.SetAngle
// 0x0028 (0x0028 - 0x0000)
struct UI_SimpleAngleIndicator_C_SetAngle final
{
public:
	float                                         AngleDegrees;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngle_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SimpleAngleIndicator_C_SetAngle) == 0x000008, "Wrong alignment on UI_SimpleAngleIndicator_C_SetAngle");
static_assert(sizeof(UI_SimpleAngleIndicator_C_SetAngle) == 0x000028, "Wrong size on UI_SimpleAngleIndicator_C_SetAngle");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, AngleDegrees) == 0x000000, "Member 'UI_SimpleAngleIndicator_C_SetAngle::AngleDegrees' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_ClampAngle_ReturnValue) == 0x000004, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_SetAngle, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'UI_SimpleAngleIndicator_C_SetAngle::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function UI_SimpleAngleIndicator.UI_SimpleAngleIndicator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_SimpleAngleIndicator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_SimpleAngleIndicator_C_PreConstruct) == 0x000001, "Wrong alignment on UI_SimpleAngleIndicator_C_PreConstruct");
static_assert(sizeof(UI_SimpleAngleIndicator_C_PreConstruct) == 0x000001, "Wrong size on UI_SimpleAngleIndicator_C_PreConstruct");
static_assert(offsetof(UI_SimpleAngleIndicator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_SimpleAngleIndicator_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_SimpleAngleIndicator.UI_SimpleAngleIndicator_C.Tick
// 0x003C (0x003C - 0x0000)
struct UI_SimpleAngleIndicator_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SimpleAngleIndicator_C_Tick) == 0x000004, "Wrong alignment on UI_SimpleAngleIndicator_C_Tick");
static_assert(sizeof(UI_SimpleAngleIndicator_C_Tick) == 0x00003C, "Wrong size on UI_SimpleAngleIndicator_C_Tick");
static_assert(offsetof(UI_SimpleAngleIndicator_C_Tick, MyGeometry) == 0x000000, "Member 'UI_SimpleAngleIndicator_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_Tick, InDeltaTime) == 0x000038, "Member 'UI_SimpleAngleIndicator_C_Tick::InDeltaTime' has a wrong offset!");

// Function UI_SimpleAngleIndicator.UI_SimpleAngleIndicator_C.ExecuteUbergraph_UI_SimpleAngleIndicator
// 0x00D0 (0x00D0 - 0x0000)
struct UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5461[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5462[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5463[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5464[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameInstance*                       CallFunc_GetFSDGameInstance_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5465[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0090(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator) == 0x000008, "Wrong alignment on UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator");
static_assert(sizeof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator) == 0x0000D0, "Wrong size on UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, EntryPoint) == 0x000000, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_BreakVector2D_X) == 0x000018, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_MakeVector2D_ReturnValue) == 0x000024, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000030, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000040, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_MakeVector2D_ReturnValue_1) == 0x000048, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000050, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_GetFSDGameInstance_ReturnValue) == 0x000058, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_GetFSDGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_MakeVector2D_ReturnValue_2) == 0x000060, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x00006C, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x000078, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, K2Node_Event_MyGeometry) == 0x000090, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator, K2Node_Event_InDeltaTime) == 0x0000C8, "Member 'UI_SimpleAngleIndicator_C_ExecuteUbergraph_UI_SimpleAngleIndicator::K2Node_Event_InDeltaTime' has a wrong offset!");

}

