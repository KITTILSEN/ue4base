#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_MicroMissileLauncher

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WPN_MicroMissileLauncher.WPN_MicroMissileLauncher_C
// 0x0078 (0x08D0 - 0x0858)
class AWPN_MicroMissileLauncher_C final : public AMicroMissileLauncher
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChargedProjectileLauncherComponent*    ChargedProjectileLauncher;                         // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HomingTarget;                                      // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonWidgetComponent*            FirstPersonWidget_Ammo;                            // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      LineTraceTargets;                                  // 0x0880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TraceDistance;                                     // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0894(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoHoming;                                          // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          JetFuelChosen;                                     // 0x08A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318F[0x6];                                     // 0x08A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HomingTargetIgnoreList;                            // 0x08A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         LongestLifetime;                                   // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3190[0x4];                                     // 0x08BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APRJ_MicroMissile_C*                    OldestMissile;                                     // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextClusterProjectileDelay;                        // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetUpgradeModifiers(class UItemUpgrade* ItemUpgrade);
	void ReceiveBeginPlay();
	void CustomEvent1(const class UItemUpgrade* Event);
	void SetHomingTarget();
	void ReceiveTick(float DeltaSeconds);
	void Server_SetHomingLocation(const struct FVector_NetQuantize& HomingLocation);
	void All_SetHomingLocation(const struct FVector_NetQuantize& HomingLocation);
	void TriggerCluster();
	void OnProjectileSpawned_Event(class AProjectileBase* Projectile);
	void OnTriggerCluster();
	void ExecuteUbergraph_WPN_MicroMissileLauncher(int32 EntryPoint);

	void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>& Stats) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WPN_MicroMissileLauncher_C">();
	}
	static class AWPN_MicroMissileLauncher_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWPN_MicroMissileLauncher_C>();
	}
};
static_assert(alignof(AWPN_MicroMissileLauncher_C) == 0x000008, "Wrong alignment on AWPN_MicroMissileLauncher_C");
static_assert(sizeof(AWPN_MicroMissileLauncher_C) == 0x0008D0, "Wrong size on AWPN_MicroMissileLauncher_C");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, UberGraphFrame) == 0x000858, "Member 'AWPN_MicroMissileLauncher_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, ChargedProjectileLauncher) == 0x000860, "Member 'AWPN_MicroMissileLauncher_C::ChargedProjectileLauncher' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, HomingTarget) == 0x000868, "Member 'AWPN_MicroMissileLauncher_C::HomingTarget' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, FirstPersonWidget_Ammo) == 0x000870, "Member 'AWPN_MicroMissileLauncher_C::FirstPersonWidget_Ammo' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, CrosshairAggregator) == 0x000878, "Member 'AWPN_MicroMissileLauncher_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, LineTraceTargets) == 0x000880, "Member 'AWPN_MicroMissileLauncher_C::LineTraceTargets' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, TraceDistance) == 0x000890, "Member 'AWPN_MicroMissileLauncher_C::TraceDistance' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, TargetLocation) == 0x000894, "Member 'AWPN_MicroMissileLauncher_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, NoHoming) == 0x0008A0, "Member 'AWPN_MicroMissileLauncher_C::NoHoming' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, JetFuelChosen) == 0x0008A1, "Member 'AWPN_MicroMissileLauncher_C::JetFuelChosen' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, HomingTargetIgnoreList) == 0x0008A8, "Member 'AWPN_MicroMissileLauncher_C::HomingTargetIgnoreList' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, LongestLifetime) == 0x0008B8, "Member 'AWPN_MicroMissileLauncher_C::LongestLifetime' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, OldestMissile) == 0x0008C0, "Member 'AWPN_MicroMissileLauncher_C::OldestMissile' has a wrong offset!");
static_assert(offsetof(AWPN_MicroMissileLauncher_C, NextClusterProjectileDelay) == 0x0008C8, "Member 'AWPN_MicroMissileLauncher_C::NextClusterProjectileDelay' has a wrong offset!");

}

