#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Phys_Newsstand_FreeBeer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Phys_Newsstand_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Phys_Newsstand_FreeBeer.BP_Phys_Newsstand_FreeBeer_C
// 0x0110 (0x0388 - 0x0278)
class ABP_Phys_Newsstand_FreeBeer_C final : public ABP_Phys_Newsstand_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Phys_Newsstand_FreeBeer_C;       // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ShouldUseEventTexture;                             // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54EE[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      AnniversaryText;                                   // 0x0288(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      EasterText;                                        // 0x02B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      LunarFestivalText;                                 // 0x02D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      XmasText;                                          // 0x0300(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OktoberfestV1Text;                                 // 0x0328(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UseV2Material;                                     // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54EF[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      OktoberFestV2Text;                                 // 0x0358(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          QueuedActivation;                                  // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ReceiveBeginPlay();
	void SetEventMaterial(TSoftObjectPtr<class UMaterialInterface> Material);
	void TrySetupEventText();
	void ExecuteUbergraph_BP_Phys_Newsstand_FreeBeer(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Phys_Newsstand_FreeBeer_C">();
	}
	static class ABP_Phys_Newsstand_FreeBeer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Phys_Newsstand_FreeBeer_C>();
	}
};
static_assert(alignof(ABP_Phys_Newsstand_FreeBeer_C) == 0x000008, "Wrong alignment on ABP_Phys_Newsstand_FreeBeer_C");
static_assert(sizeof(ABP_Phys_Newsstand_FreeBeer_C) == 0x000388, "Wrong size on ABP_Phys_Newsstand_FreeBeer_C");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, UberGraphFrame_BP_Phys_Newsstand_FreeBeer_C) == 0x000278, "Member 'ABP_Phys_Newsstand_FreeBeer_C::UberGraphFrame_BP_Phys_Newsstand_FreeBeer_C' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, ShouldUseEventTexture) == 0x000280, "Member 'ABP_Phys_Newsstand_FreeBeer_C::ShouldUseEventTexture' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, AnniversaryText) == 0x000288, "Member 'ABP_Phys_Newsstand_FreeBeer_C::AnniversaryText' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, EasterText) == 0x0002B0, "Member 'ABP_Phys_Newsstand_FreeBeer_C::EasterText' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, LunarFestivalText) == 0x0002D8, "Member 'ABP_Phys_Newsstand_FreeBeer_C::LunarFestivalText' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, XmasText) == 0x000300, "Member 'ABP_Phys_Newsstand_FreeBeer_C::XmasText' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, OktoberfestV1Text) == 0x000328, "Member 'ABP_Phys_Newsstand_FreeBeer_C::OktoberfestV1Text' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, UseV2Material) == 0x000350, "Member 'ABP_Phys_Newsstand_FreeBeer_C::UseV2Material' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, OktoberFestV2Text) == 0x000358, "Member 'ABP_Phys_Newsstand_FreeBeer_C::OktoberFestV2Text' has a wrong offset!");
static_assert(offsetof(ABP_Phys_Newsstand_FreeBeer_C, QueuedActivation) == 0x000380, "Member 'ABP_Phys_Newsstand_FreeBeer_C::QueuedActivation' has a wrong offset!");

}

