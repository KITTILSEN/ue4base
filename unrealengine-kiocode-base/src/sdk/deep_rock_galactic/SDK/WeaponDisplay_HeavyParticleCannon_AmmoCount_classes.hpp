#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_HeavyParticleCannon_AmmoCount

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponDisplay_HeavyParticleCannon_AmmoCount.WeaponDisplay_HeavyParticleCannon_AmmoCount_C
// 0x00B8 (0x0340 - 0x0288)
class UWeaponDisplay_HeavyParticleCannon_AmmoCount_C final : public UAmmoCountWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Fire;                                              // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Idle;                                              // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_4;                                           // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_114;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Reload;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Outline;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_Clip;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_Total;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_ClipCount;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_TotalPercent;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_1;                                       // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_2;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         ClipSize;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAmmo;                                           // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReserveAmmo;                                       // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadDuration;                                    // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrClipAmmo;                                      // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeCounting;                               // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E33[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ChargingAudioComp;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FullyChargedAudioComp;                             // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MappedAlpha;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E34[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem*                                  Particle_Weapon;                                   // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetData(int32 Param_ClipSize, float Param_ReloadDuration, int32 Param_MaxAmmo);
	void Construct();
	void OnReloadTimeChanged_Event(float Amount);
	void OnAmountChanged(int32 Count);
	void OnTotalChanged(int32 Total);
	void DoItemEquipped();
	void UpdateTotalInfo(float Percent);
	void UpdateClipInfo(float Percent);
	void Init(class AItem* ParticleWeapon);
	void OnUnEquipped();
	void OnEquipped();
	void ExecuteUbergraph_WeaponDisplay_HeavyParticleCannon_AmmoCount(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponDisplay_HeavyParticleCannon_AmmoCount_C">();
	}
	static class UWeaponDisplay_HeavyParticleCannon_AmmoCount_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponDisplay_HeavyParticleCannon_AmmoCount_C>();
	}
};
static_assert(alignof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C) == 0x000008, "Wrong alignment on UWeaponDisplay_HeavyParticleCannon_AmmoCount_C");
static_assert(sizeof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C) == 0x000340, "Wrong size on UWeaponDisplay_HeavyParticleCannon_AmmoCount_C");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, UberGraphFrame) == 0x000288, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Fire) == 0x000290, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Fire' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Idle) == 0x000298, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Idle' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Image) == 0x0002A0, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Image' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Image_1) == 0x0002A8, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Image_1' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Image_4) == 0x0002B0, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Image_4' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Image_114) == 0x0002B8, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Image_114' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Image_Reload) == 0x0002C0, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Image_Reload' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Outline) == 0x0002C8, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Outline' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, ProgressBar_Clip) == 0x0002D0, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::ProgressBar_Clip' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, ProgressBar_Total) == 0x0002D8, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::ProgressBar_Total' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Text_ClipCount) == 0x0002E0, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Text_ClipCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Text_TotalPercent) == 0x0002E8, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Text_TotalPercent' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, TextBlock_1) == 0x0002F0, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::TextBlock_1' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, TextBlock_2) == 0x0002F8, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::TextBlock_2' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, ClipSize) == 0x000300, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::ClipSize' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, MaxAmmo) == 0x000304, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, ReserveAmmo) == 0x000308, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::ReserveAmmo' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, ReloadDuration) == 0x00030C, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::ReloadDuration' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, CurrClipAmmo) == 0x000310, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::CurrClipAmmo' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Alpha) == 0x000314, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Alpha' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, DelayBeforeCounting) == 0x000318, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::DelayBeforeCounting' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, ChargingAudioComp) == 0x000320, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::ChargingAudioComp' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, FullyChargedAudioComp) == 0x000328, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::FullyChargedAudioComp' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, MappedAlpha) == 0x000330, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::MappedAlpha' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_HeavyParticleCannon_AmmoCount_C, Particle_Weapon) == 0x000338, "Member 'UWeaponDisplay_HeavyParticleCannon_AmmoCount_C::Particle_Weapon' has a wrong offset!");

}

