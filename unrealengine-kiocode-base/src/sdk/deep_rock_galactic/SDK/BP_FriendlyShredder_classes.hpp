#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FriendlyShredder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENE_Shredder_Base_classes.hpp"
#include "FSD_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FriendlyShredder.BP_FriendlyShredder_C
// 0x00A0 (0x04D0 - 0x0430)
class ABP_FriendlyShredder_C final : public AENE_Shredder_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FriendlyShredder_C;              // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USimpleObjectInfoComponent*             SimpleObjectInfo;                                  // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFSDAudioComponent*                     AccelerationSound;                                 // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFSDAudioComponent*                     MoveSound;                                         // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFSDAudioComponent*                     FriendlyShredderStandingDown;                      // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFSDAudioComponent*                     FriendlyShredderEngagedWithTarget;                 // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFSDAudioComponent*                     FriendlyShredderTargetFound;                       // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SlapCollision;                                     // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstantUsable*                         InstantUsable;                                     // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDamageBeforeDeath;                              // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAcceleration;                                   // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeMeshTime;                                     // 0x0488(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3583[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ShredderGlowDynaMatRef;                            // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpAlpha;                                         // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastRotationToTarget;                              // 0x049C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotationRange;                                     // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3584[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GrenadeInstance;                                   // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MovementSampleTimer;                               // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastVelocity;                                      // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CutoffDiff;                                        // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLifeDuration;                                   // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentSFXState;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__HealthComponent_K2Node_ComponentBoundEvent_0_DeathSig__DelegateSignature(class UHealthComponentBase* Param_HealthComponent);
	void BndEvt__BP_FriendlyShredder_InstantUsable_K2Node_ComponentBoundEvent_0_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void BndEvt__BP_FriendlyShredder_MeleeAttack_K2Node_ComponentBoundEvent_1_MeleeAttackDelegate__DelegateSignature();
	void GiveSpeedBoost();
	void RemoveSpeedBoost();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void HandleRotationToTarget(float DeltaTime);
	void Destroy(class AActor* DestroyedActor);
	void PlayAccelerationSound();
	void OnMessageAI(class FName TriggerName);
	void ExecuteUbergraph_BP_FriendlyShredder(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FriendlyShredder_C">();
	}
	static class ABP_FriendlyShredder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FriendlyShredder_C>();
	}
};
static_assert(alignof(ABP_FriendlyShredder_C) == 0x000008, "Wrong alignment on ABP_FriendlyShredder_C");
static_assert(sizeof(ABP_FriendlyShredder_C) == 0x0004D0, "Wrong size on ABP_FriendlyShredder_C");
static_assert(offsetof(ABP_FriendlyShredder_C, UberGraphFrame_BP_FriendlyShredder_C) == 0x000430, "Member 'ABP_FriendlyShredder_C::UberGraphFrame_BP_FriendlyShredder_C' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, SimpleObjectInfo) == 0x000438, "Member 'ABP_FriendlyShredder_C::SimpleObjectInfo' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, AccelerationSound) == 0x000440, "Member 'ABP_FriendlyShredder_C::AccelerationSound' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, MoveSound) == 0x000448, "Member 'ABP_FriendlyShredder_C::MoveSound' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, FriendlyShredderStandingDown) == 0x000450, "Member 'ABP_FriendlyShredder_C::FriendlyShredderStandingDown' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, FriendlyShredderEngagedWithTarget) == 0x000458, "Member 'ABP_FriendlyShredder_C::FriendlyShredderEngagedWithTarget' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, FriendlyShredderTargetFound) == 0x000460, "Member 'ABP_FriendlyShredder_C::FriendlyShredderTargetFound' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, PointLight) == 0x000468, "Member 'ABP_FriendlyShredder_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, SlapCollision) == 0x000470, "Member 'ABP_FriendlyShredder_C::SlapCollision' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, InstantUsable) == 0x000478, "Member 'ABP_FriendlyShredder_C::InstantUsable' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, MaxDamageBeforeDeath) == 0x000480, "Member 'ABP_FriendlyShredder_C::MaxDamageBeforeDeath' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, MaxAcceleration) == 0x000484, "Member 'ABP_FriendlyShredder_C::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, ShakeMeshTime) == 0x000488, "Member 'ABP_FriendlyShredder_C::ShakeMeshTime' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, ShredderGlowDynaMatRef) == 0x000490, "Member 'ABP_FriendlyShredder_C::ShredderGlowDynaMatRef' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, LerpAlpha) == 0x000498, "Member 'ABP_FriendlyShredder_C::LerpAlpha' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, LastRotationToTarget) == 0x00049C, "Member 'ABP_FriendlyShredder_C::LastRotationToTarget' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, RotationRange) == 0x0004A8, "Member 'ABP_FriendlyShredder_C::RotationRange' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, GrenadeInstance) == 0x0004B0, "Member 'ABP_FriendlyShredder_C::GrenadeInstance' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, MovementSampleTimer) == 0x0004B8, "Member 'ABP_FriendlyShredder_C::MovementSampleTimer' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, LastVelocity) == 0x0004BC, "Member 'ABP_FriendlyShredder_C::LastVelocity' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, CutoffDiff) == 0x0004C0, "Member 'ABP_FriendlyShredder_C::CutoffDiff' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, MaxLifeDuration) == 0x0004C4, "Member 'ABP_FriendlyShredder_C::MaxLifeDuration' has a wrong offset!");
static_assert(offsetof(ABP_FriendlyShredder_C, CurrentSFXState) == 0x0004C8, "Member 'ABP_FriendlyShredder_C::CurrentSFXState' has a wrong offset!");

}

