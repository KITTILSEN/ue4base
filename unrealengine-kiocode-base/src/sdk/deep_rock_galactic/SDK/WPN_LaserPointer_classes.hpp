#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_LaserPointer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WPN_LaserPointer.WPN_LaserPointer_C
// 0x00A8 (0x0630 - 0x0588)
class AWPN_LaserPointer_C final : public ALaserPointerItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0588(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFirstPersonWidgetComponent*            FirstPersonWidget;                                 // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FPTransform;                                       // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightBeam_Cylinder;                                // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightBeam;                                         // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LaserLight_On_Cue;                                 // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TPTransform;                                       // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHUD_LaserPointerDisplay_C*             HUD;                                               // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay;                                             // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5085[0x4];                                     // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BackgroundMaterial;                                // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BackgroundDefaultColor;                            // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PointOfInterest_C*>          PointsOfInterest;                                  // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UTexture2D*                             PreviousPOI;                                       // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousPOITime;                                   // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5086[0x4];                                     // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        StartStop;                                         // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  PreviousLookAtID;                                  // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggledVisible;                                    // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SetLaserBeamMaterial(class APlayerCharacter* InCharacter);
	void SetBeamVisibility(bool bNewVisibility);
	void CanPlacePOI(const struct FVector& Location, class UTexture* Icon, bool* Can_Place);
	void UpdateBackgroundColor();
	void SetBackgroundColor(const struct FLinearColor& Value);
	void Adjust_Beam();
	void GetPointTransform(struct FTransform* PointTransform);
	void UserConstructionScript();
	void RecieveUnequipped();
	void OnPointOfInterest(class AActor* TargetActor, const struct FVector& TargetLocation, class UTexture2D* TargetIcon);
	void ReceiveBeginPlay();
	void AddedToInventory(class APlayerCharacter* ItemOwner);
	void OnScanComplete();
	void OnMarkerPlaced_Event(const struct FVector& Location, const class FText& Param_Name, const struct FLinearColor& Color, class AActor* Target, ELaserPointerTargetType TypeOfTarget);
	void ToggleLaserVisible(bool AVisible);
	void RecieveEquipped();
	void OnPOIDestroyed(class AActor* DestroyedActor);
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_WPN_LaserPointer(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WPN_LaserPointer_C">();
	}
	static class AWPN_LaserPointer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWPN_LaserPointer_C>();
	}
};
static_assert(alignof(AWPN_LaserPointer_C) == 0x000008, "Wrong alignment on AWPN_LaserPointer_C");
static_assert(sizeof(AWPN_LaserPointer_C) == 0x000630, "Wrong size on AWPN_LaserPointer_C");
static_assert(offsetof(AWPN_LaserPointer_C, UberGraphFrame) == 0x000588, "Member 'AWPN_LaserPointer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, FirstPersonWidget) == 0x000590, "Member 'AWPN_LaserPointer_C::FirstPersonWidget' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, FPTransform) == 0x000598, "Member 'AWPN_LaserPointer_C::FPTransform' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, LightBeam_Cylinder) == 0x0005A0, "Member 'AWPN_LaserPointer_C::LightBeam_Cylinder' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, LightBeam) == 0x0005A8, "Member 'AWPN_LaserPointer_C::LightBeam' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, LaserLight_On_Cue) == 0x0005B0, "Member 'AWPN_LaserPointer_C::LaserLight_On_Cue' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, CrosshairAggregator) == 0x0005B8, "Member 'AWPN_LaserPointer_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, TPTransform) == 0x0005C0, "Member 'AWPN_LaserPointer_C::TPTransform' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, HUD) == 0x0005C8, "Member 'AWPN_LaserPointer_C::HUD' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, Delay) == 0x0005D0, "Member 'AWPN_LaserPointer_C::Delay' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, BackgroundMaterial) == 0x0005D8, "Member 'AWPN_LaserPointer_C::BackgroundMaterial' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, BackgroundDefaultColor) == 0x0005E0, "Member 'AWPN_LaserPointer_C::BackgroundDefaultColor' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, PointsOfInterest) == 0x0005F0, "Member 'AWPN_LaserPointer_C::PointsOfInterest' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, PreviousPOI) == 0x000600, "Member 'AWPN_LaserPointer_C::PreviousPOI' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, PreviousPOITime) == 0x000608, "Member 'AWPN_LaserPointer_C::PreviousPOITime' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, StartStop) == 0x000610, "Member 'AWPN_LaserPointer_C::StartStop' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, PreviousLookAtID) == 0x000618, "Member 'AWPN_LaserPointer_C::PreviousLookAtID' has a wrong offset!");
static_assert(offsetof(AWPN_LaserPointer_C, ToggledVisible) == 0x000628, "Member 'AWPN_LaserPointer_C::ToggledVisible' has a wrong offset!");

}

