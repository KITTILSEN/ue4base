#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Options_Gamepad_KeyCapture

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "FSD_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.OnCapturingChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature final
{
public:
	bool                                          InCapturing;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature) == 0x000001, "Wrong alignment on Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature) == 0x000001, "Wrong size on Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature, InCapturing) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_OnCapturingChanged__DelegateSignature::InCapturing' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.ExecuteUbergraph_Options_Gamepad_KeyCapture
// 0x00D8 (0x00D8 - 0x0000)
struct Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA8[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_InCapturing;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Event_InKey_1;                              // 0x0020(0x0018)(HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CAA[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFSDGameUserSettings*                   CallFunc_GetFSDGameUserSettings_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_GetCurrentBinding_ReturnValue;            // 0x0048(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_InKey;                                // 0x0060(0x0018)(HasGetValueTypeHash)
	struct FCustomKeySetting                      CallFunc_FindCurrentSettingsForKey_OutSettings;    // 0x0078(0x0038)()
	bool                                          CallFunc_FindCurrentSettingsForKey_ReturnValue;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAB[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetCurrentBinding_ReturnValue_1;          // 0x00B8(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture) == 0x000008, "Wrong alignment on Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture) == 0x0000D8, "Wrong size on Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, EntryPoint) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::EntryPoint' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, Temp_bool_Variable) == 0x000004, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, Temp_byte_Variable) == 0x000005, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, Temp_byte_Variable_1) == 0x000006, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, K2Node_Event_InCapturing) == 0x000018, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::K2Node_Event_InCapturing' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, K2Node_Event_InKey_1) == 0x000020, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::K2Node_Event_InKey_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, K2Node_Select_Default) == 0x000038, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, CallFunc_GetFSDGameUserSettings_ReturnValue) == 0x000040, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::CallFunc_GetFSDGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, CallFunc_GetCurrentBinding_ReturnValue) == 0x000048, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::CallFunc_GetCurrentBinding_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, K2Node_Event_InKey) == 0x000060, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::K2Node_Event_InKey' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, CallFunc_FindCurrentSettingsForKey_OutSettings) == 0x000078, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::CallFunc_FindCurrentSettingsForKey_OutSettings' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, CallFunc_FindCurrentSettingsForKey_ReturnValue) == 0x0000B0, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::CallFunc_FindCurrentSettingsForKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, CallFunc_GetCurrentBinding_ReturnValue_1) == 0x0000B8, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::CallFunc_GetCurrentBinding_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture, K2Node_Event_IsDesignTime) == 0x0000D0, "Member 'Options_Gamepad_KeyCapture_C_ExecuteUbergraph_Options_Gamepad_KeyCapture::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Options_Gamepad_KeyCapture_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_PreConstruct) == 0x000001, "Wrong alignment on Options_Gamepad_KeyCapture_C_PreConstruct");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_PreConstruct) == 0x000001, "Wrong size on Options_Gamepad_KeyCapture_C_PreConstruct");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.ReceiveKeyCaptured
// 0x0018 (0x0018 - 0x0000)
struct Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured) == 0x000008, "Wrong alignment on Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured) == 0x000018, "Wrong size on Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured, InKey) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_ReceiveKeyCaptured::InKey' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.ReceiveKeyChanged
// 0x0018 (0x0018 - 0x0000)
struct Options_Gamepad_KeyCapture_C_ReceiveKeyChanged final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_ReceiveKeyChanged) == 0x000008, "Wrong alignment on Options_Gamepad_KeyCapture_C_ReceiveKeyChanged");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_ReceiveKeyChanged) == 0x000018, "Wrong size on Options_Gamepad_KeyCapture_C_ReceiveKeyChanged");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ReceiveKeyChanged, InKey) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_ReceiveKeyChanged::InKey' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.ReceiveCapturingChanged
// 0x0001 (0x0001 - 0x0000)
struct Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged final
{
public:
	bool                                          InCapturing;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged) == 0x000001, "Wrong alignment on Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged) == 0x000001, "Wrong size on Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged, InCapturing) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_ReceiveCapturingChanged::InCapturing' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.UpdateKeyDisplay
// 0x00A8 (0x00A8 - 0x0000)
struct Options_Gamepad_KeyCapture_C_UpdateKeyDisplay final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          HasIcon;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAC[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionIconMapping                     IconMapping;                                       // 0x0020(0x0028)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CAD[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SelectVisibility_IsVisible_1;             // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged_1;     // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility_1;        // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CAE[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetKeyName_ReturnValue;                   // 0x0060(0x0018)()
	struct FActionIconMapping                     CallFunc_FindControllerKeyIcon_KeyIcon;            // 0x0078(0x0028)()
	bool                                          CallFunc_FindControllerKeyIcon_ReturnValue;        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay) == 0x000008, "Wrong alignment on Options_Gamepad_KeyCapture_C_UpdateKeyDisplay");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay) == 0x0000A8, "Wrong size on Options_Gamepad_KeyCapture_C_UpdateKeyDisplay");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, InKey) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::InKey' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, HasIcon) == 0x000018, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::HasIcon' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, IconMapping) == 0x000020, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::IconMapping' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, Temp_bool_Variable) == 0x000048, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, Temp_int_Variable) == 0x00004C, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, Temp_int_Variable_1) == 0x000050, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, K2Node_Select_Default) == 0x000054, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_SelectVisibility_IsVisible) == 0x000058, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_SelectVisibility_VisibilityChanged) == 0x000059, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_SelectVisibility_New_Visibility) == 0x00005A, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_SelectVisibility_IsVisible_1) == 0x00005B, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_SelectVisibility_IsVisible_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_SelectVisibility_VisibilityChanged_1) == 0x00005C, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_SelectVisibility_VisibilityChanged_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_SelectVisibility_New_Visibility_1) == 0x00005D, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_SelectVisibility_New_Visibility_1' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_GetKeyName_ReturnValue) == 0x000060, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_GetKeyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_FindControllerKeyIcon_KeyIcon) == 0x000078, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_FindControllerKeyIcon_KeyIcon' has a wrong offset!");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_UpdateKeyDisplay, CallFunc_FindControllerKeyIcon_ReturnValue) == 0x0000A0, "Member 'Options_Gamepad_KeyCapture_C_UpdateKeyDisplay::CallFunc_FindControllerKeyIcon_ReturnValue' has a wrong offset!");

// Function Options_Gamepad_KeyCapture.Options_Gamepad_KeyCapture_C.IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct Options_Gamepad_KeyCapture_C_IsInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Options_Gamepad_KeyCapture_C_IsInteractable) == 0x000001, "Wrong alignment on Options_Gamepad_KeyCapture_C_IsInteractable");
static_assert(sizeof(Options_Gamepad_KeyCapture_C_IsInteractable) == 0x000001, "Wrong size on Options_Gamepad_KeyCapture_C_IsInteractable");
static_assert(offsetof(Options_Gamepad_KeyCapture_C_IsInteractable, ReturnValue) == 0x000000, "Member 'Options_Gamepad_KeyCapture_C_IsInteractable::ReturnValue' has a wrong offset!");

}

