#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WPN_MicrowaveGun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WPN_MicrowaveGun.WPN_MicrowaveGun_C
// 0x0068 (0x0A28 - 0x09C0)
class AWPN_MicrowaveGun_C final : public AMicrowaveWeapon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFirstPersonNiagaraComponent*           HeatSmoke;                                         // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileLauncherComponent*           ProjectileLauncher;                                // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonWidgetComponent*            Widget_HeatNew;                                    // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonStaticMeshComponent*        FirstPersonStaticMesh;                             // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonWidgetComponent*            FirstPersonWidget;                                 // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   MuzzlePointLight;                                  // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCrosshairAggregator*                   CrosshairAggregator;                               // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWeaponDisplay_MicrowaveGun_Heat_C*     OverheatUI;                                        // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve_HeatColor;                                   // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ParticleImpactSoundLoop;                           // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastClosestHit;                                    // 0x0A18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastHitEnemy;                                      // 0x0A24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void AddedToInventory(class APlayerCharacter* ItemOwner);
	void OnTemperatureChanged(float Temperature, bool Param_Overheated);
	void CustomEvent1(const class UItemUpgrade* Event);
	void Receive_IsFiringChanged(bool NewValue);
	void HeatUpdated(float SmoothedTemperature);
	void RecieveStopUsing();
	void BndEvt__WPN_MicrowaveGun_CapsuleHitscanComp_K2Node_ComponentBoundEvent_0_OnClosestHitDelegate__DelegateSignature(const struct FVector& Location, const struct FVector& Normal, bool bHitEnemy);
	void OnStartCharacterOverheat_Event();
	void RecieveUnequipped();
	void ExecuteUbergraph_WPN_MicrowaveGun(int32 EntryPoint);

	void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>& Stats) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WPN_MicrowaveGun_C">();
	}
	static class AWPN_MicrowaveGun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWPN_MicrowaveGun_C>();
	}
};
static_assert(alignof(AWPN_MicrowaveGun_C) == 0x000008, "Wrong alignment on AWPN_MicrowaveGun_C");
static_assert(sizeof(AWPN_MicrowaveGun_C) == 0x000A28, "Wrong size on AWPN_MicrowaveGun_C");
static_assert(offsetof(AWPN_MicrowaveGun_C, UberGraphFrame) == 0x0009C0, "Member 'AWPN_MicrowaveGun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, HeatSmoke) == 0x0009C8, "Member 'AWPN_MicrowaveGun_C::HeatSmoke' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, ProjectileLauncher) == 0x0009D0, "Member 'AWPN_MicrowaveGun_C::ProjectileLauncher' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, Widget_HeatNew) == 0x0009D8, "Member 'AWPN_MicrowaveGun_C::Widget_HeatNew' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, FirstPersonStaticMesh) == 0x0009E0, "Member 'AWPN_MicrowaveGun_C::FirstPersonStaticMesh' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, FirstPersonWidget) == 0x0009E8, "Member 'AWPN_MicrowaveGun_C::FirstPersonWidget' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, MuzzlePointLight) == 0x0009F0, "Member 'AWPN_MicrowaveGun_C::MuzzlePointLight' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, CrosshairAggregator) == 0x0009F8, "Member 'AWPN_MicrowaveGun_C::CrosshairAggregator' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, OverheatUI) == 0x000A00, "Member 'AWPN_MicrowaveGun_C::OverheatUI' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, Curve_HeatColor) == 0x000A08, "Member 'AWPN_MicrowaveGun_C::Curve_HeatColor' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, ParticleImpactSoundLoop) == 0x000A10, "Member 'AWPN_MicrowaveGun_C::ParticleImpactSoundLoop' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, LastClosestHit) == 0x000A18, "Member 'AWPN_MicrowaveGun_C::LastClosestHit' has a wrong offset!");
static_assert(offsetof(AWPN_MicrowaveGun_C, LastHitEnemy) == 0x000A24, "Member 'AWPN_MicrowaveGun_C::LastHitEnemy' has a wrong offset!");

}

