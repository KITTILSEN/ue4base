#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Grenade_Axe

#include "Basic.hpp"

#include "ITM_Grenade_Base_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Grenade_Axe.Grenade_Axe_C
// 0x0018 (0x0378 - 0x0360)
class AGrenade_Axe_C final : public AITM_Grenade_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Grenade_Axe_C;                      // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDamageComponent*                       BluntDamage;                                       // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BladeExtentionDelay;                               // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_Grenade_Axe(int32 EntryPoint);

	void AddGearStateEntries(class AFSDPlayerState* PlayerState, TArray<struct FGearStatEntry>& Stats) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Grenade_Axe_C">();
	}
	static class AGrenade_Axe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGrenade_Axe_C>();
	}
};
static_assert(alignof(AGrenade_Axe_C) == 0x000008, "Wrong alignment on AGrenade_Axe_C");
static_assert(sizeof(AGrenade_Axe_C) == 0x000378, "Wrong size on AGrenade_Axe_C");
static_assert(offsetof(AGrenade_Axe_C, UberGraphFrame_Grenade_Axe_C) == 0x000360, "Member 'AGrenade_Axe_C::UberGraphFrame_Grenade_Axe_C' has a wrong offset!");
static_assert(offsetof(AGrenade_Axe_C, BluntDamage) == 0x000368, "Member 'AGrenade_Axe_C::BluntDamage' has a wrong offset!");
static_assert(offsetof(AGrenade_Axe_C, BladeExtentionDelay) == 0x000370, "Member 'AGrenade_Axe_C::BladeExtentionDelay' has a wrong offset!");

}

