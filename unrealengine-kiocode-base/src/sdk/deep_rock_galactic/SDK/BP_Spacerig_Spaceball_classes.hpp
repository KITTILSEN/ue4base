#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Spacerig_Spaceball

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Spacerig_Spaceball.BP_Spacerig_Spaceball_C
// 0x00F8 (0x0360 - 0x0268)
class ABP_Spacerig_Spaceball_C final : public ASpaceBall
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFSDAudioComponent*                     Spaceballimpact;                                   // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USingleUsableComponent*                 SingleUsable;                                      // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight12;                                       // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight11;                                       // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight10;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight9;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight8;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight7;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight6;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight5;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight4;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight3;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight2;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       UseSphere;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_spaceball_01;                                   // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Collision;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCarriableComponent*                    Carriable;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       KickedBy;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactNormal;                                      // 0x0308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceDirection;                                    // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449D[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ImpactSound;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowForce;                                        // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasShowedTutorial;                                 // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449E[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        LastBounce;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastUseKey;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTriggerSound;                                   // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Test;                                              // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Spacerig_Spaceball(int32 EntryPoint);
	void Throw(const struct FVector& Force);
	void ShootBall(float ChipValue);
	void BndEvt__SingleUsable_K2Node_ComponentBoundEvent_8_UsableChangedSignature__DelegateSignature(bool CanUse);
	void BndEvt__SingleUsable_K2Node_ComponentBoundEvent_7_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void BndEvt__SingleUsable_K2Node_ComponentBoundEvent_6_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void BndEvt__SingleUsable_K2Node_ComponentBoundEvent_2_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void BndEvt__Collision_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Collision_K2Node_ComponentBoundEvent_10_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Carriable_K2Node_ComponentBoundEvent_1_CarriableEvent__DelegateSignature();
	void BndEvt__Carriable_K2Node_ComponentBoundEvent_4_CarriableEvent__DelegateSignature();
	void PlayKickAnim(class APlayerCharacter* Kicker);
	void UsedByClient(EInputKeys Key, class APlayerCharacter* Param_KickedBy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Spacerig_Spaceball_C">();
	}
	static class ABP_Spacerig_Spaceball_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Spacerig_Spaceball_C>();
	}
};
static_assert(alignof(ABP_Spacerig_Spaceball_C) == 0x000008, "Wrong alignment on ABP_Spacerig_Spaceball_C");
static_assert(sizeof(ABP_Spacerig_Spaceball_C) == 0x000360, "Wrong size on ABP_Spacerig_Spaceball_C");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, UberGraphFrame) == 0x000268, "Member 'ABP_Spacerig_Spaceball_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, Spaceballimpact) == 0x000270, "Member 'ABP_Spacerig_Spaceball_C::Spaceballimpact' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SingleUsable) == 0x000278, "Member 'ABP_Spacerig_Spaceball_C::SingleUsable' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight12) == 0x000280, "Member 'ABP_Spacerig_Spaceball_C::SpotLight12' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight11) == 0x000288, "Member 'ABP_Spacerig_Spaceball_C::SpotLight11' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight10) == 0x000290, "Member 'ABP_Spacerig_Spaceball_C::SpotLight10' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight9) == 0x000298, "Member 'ABP_Spacerig_Spaceball_C::SpotLight9' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight8) == 0x0002A0, "Member 'ABP_Spacerig_Spaceball_C::SpotLight8' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight7) == 0x0002A8, "Member 'ABP_Spacerig_Spaceball_C::SpotLight7' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight6) == 0x0002B0, "Member 'ABP_Spacerig_Spaceball_C::SpotLight6' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight5) == 0x0002B8, "Member 'ABP_Spacerig_Spaceball_C::SpotLight5' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight4) == 0x0002C0, "Member 'ABP_Spacerig_Spaceball_C::SpotLight4' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight3) == 0x0002C8, "Member 'ABP_Spacerig_Spaceball_C::SpotLight3' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight1) == 0x0002D0, "Member 'ABP_Spacerig_Spaceball_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SpotLight2) == 0x0002D8, "Member 'ABP_Spacerig_Spaceball_C::SpotLight2' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, UseSphere) == 0x0002E0, "Member 'ABP_Spacerig_Spaceball_C::UseSphere' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, SM_spaceball_01) == 0x0002E8, "Member 'ABP_Spacerig_Spaceball_C::SM_spaceball_01' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, Collision) == 0x0002F0, "Member 'ABP_Spacerig_Spaceball_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, Carriable) == 0x0002F8, "Member 'ABP_Spacerig_Spaceball_C::Carriable' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, KickedBy) == 0x000300, "Member 'ABP_Spacerig_Spaceball_C::KickedBy' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, ImpactNormal) == 0x000308, "Member 'ABP_Spacerig_Spaceball_C::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, ImpactPoint) == 0x000314, "Member 'ABP_Spacerig_Spaceball_C::ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, TraceDirection) == 0x000320, "Member 'ABP_Spacerig_Spaceball_C::TraceDirection' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, ImpactSound) == 0x000330, "Member 'ABP_Spacerig_Spaceball_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, ThrowForce) == 0x000338, "Member 'ABP_Spacerig_Spaceball_C::ThrowForce' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, HasShowedTutorial) == 0x000344, "Member 'ABP_Spacerig_Spaceball_C::HasShowedTutorial' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, LastBounce) == 0x000348, "Member 'ABP_Spacerig_Spaceball_C::LastBounce' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, LastUseKey) == 0x000350, "Member 'ABP_Spacerig_Spaceball_C::LastUseKey' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, CanTriggerSound) == 0x000358, "Member 'ABP_Spacerig_Spaceball_C::CanTriggerSound' has a wrong offset!");
static_assert(offsetof(ABP_Spacerig_Spaceball_C, Test) == 0x000359, "Member 'ABP_Spacerig_Spaceball_C::Test' has a wrong offset!");

}

