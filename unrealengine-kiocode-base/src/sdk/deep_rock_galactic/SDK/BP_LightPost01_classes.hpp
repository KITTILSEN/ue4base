#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightPost01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightPost01.BP_LightPost01_C
// 0x0070 (0x0290 - 0x0220)
class ABP_LightPost01_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Static_Mesh;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color;                                       // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Intensity;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Attenuation;                                 // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    Mesh;                                              // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Mesh_to_use;                                       // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialGlow;                                      // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flicker;                                           // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F10[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimesToFlash;                                      // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Casts_Shadows;                                     // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F11[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Light_Offset;                                      // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_LightPost01(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightPost01_C">();
	}
	static class ABP_LightPost01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightPost01_C>();
	}
};
static_assert(alignof(ABP_LightPost01_C) == 0x000008, "Wrong alignment on ABP_LightPost01_C");
static_assert(sizeof(ABP_LightPost01_C) == 0x000290, "Wrong size on ABP_LightPost01_C");
static_assert(offsetof(ABP_LightPost01_C, UberGraphFrame) == 0x000220, "Member 'ABP_LightPost01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Static_Mesh) == 0x000228, "Member 'ABP_LightPost01_C::Static_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Scene) == 0x000230, "Member 'ABP_LightPost01_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, PointLight) == 0x000238, "Member 'ABP_LightPost01_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Light_Color) == 0x000240, "Member 'ABP_LightPost01_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Light_Intensity) == 0x000250, "Member 'ABP_LightPost01_C::Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Light_Attenuation) == 0x000254, "Member 'ABP_LightPost01_C::Light_Attenuation' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Mesh) == 0x000258, "Member 'ABP_LightPost01_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Mesh_to_use) == 0x000268, "Member 'ABP_LightPost01_C::Mesh_to_use' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, MaterialGlow) == 0x00026C, "Member 'ABP_LightPost01_C::MaterialGlow' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Flicker) == 0x000270, "Member 'ABP_LightPost01_C::Flicker' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, TimesToFlash) == 0x000274, "Member 'ABP_LightPost01_C::TimesToFlash' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Casts_Shadows) == 0x000278, "Member 'ABP_LightPost01_C::Casts_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, Light_Offset) == 0x00027C, "Member 'ABP_LightPost01_C::Light_Offset' has a wrong offset!");
static_assert(offsetof(ABP_LightPost01_C, DynamicMaterial) == 0x000288, "Member 'ABP_LightPost01_C::DynamicMaterial' has a wrong offset!");

}

