#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_Base_AmmoCount

#include "Basic.hpp"


namespace SDK::Params
{

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.ExecuteUbergraph_WeaponDisplay_Base_AmmoCount
// 0x0128 (0x0128 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 Amount)>                 K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         K2Node_CustomEvent_Amount_6;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Amount_5;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Amount_4;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Amount)>                 K2Node_CreateDelegate_OutputDelegate_3;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         K2Node_CustomEvent_Amount_3;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44F0[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapacityBasedItemAggregator*           CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClipBasedItemAggregator*               CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetClipAmount_ReturnValue;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalAmount_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalAmount_ReturnValue_1;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetClipAmount_ReturnValue_1;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44F1[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxAmount_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentAmount_ReturnValue;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentAmount_ReturnValue_1;           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxAmount_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44F2[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem*                                  K2Node_CustomEvent_OwningItem;                     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       K2Node_CustomEvent_WidgetComp;                     // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Amount)>                 K2Node_CreateDelegate_OutputDelegate_4;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         K2Node_CustomEvent_Amount_2;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Amount_1;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Amount;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Amount)>                 K2Node_CreateDelegate_OutputDelegate_5;            // 0x00C4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 Amount)>                 K2Node_CreateDelegate_OutputDelegate_8;            // 0x00F4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 Amount)>                 K2Node_CreateDelegate_OutputDelegate_9;            // 0x0104(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 Amount)>                 K2Node_CreateDelegate_OutputDelegate_10;           // 0x0114(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount) == 0x000008, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount) == 0x000128, "Wrong size on WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, EntryPoint) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::EntryPoint' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount_6) == 0x000034, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount_6' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount_5) == 0x000038, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount_5' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount_4) == 0x00003C, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount_4' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_3) == 0x000040, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount_3) == 0x000050, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount_3' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000060, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetClipAmount_ReturnValue) == 0x000068, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetClipAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetTotalAmount_ReturnValue) == 0x00006C, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetTotalAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetTotalAmount_ReturnValue_1) == 0x000070, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetTotalAmount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetClipAmount_ReturnValue_1) == 0x000078, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetClipAmount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetMaxAmount_ReturnValue) == 0x000080, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetMaxAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetCurrentAmount_ReturnValue) == 0x000084, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetCurrentAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetCurrentAmount_ReturnValue_1) == 0x000088, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetCurrentAmount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_GetMaxAmount_ReturnValue_1) == 0x000090, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_GetMaxAmount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, CallFunc_IsValid_ReturnValue_1) == 0x000094, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_OwningItem) == 0x000098, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_OwningItem' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_WidgetComp) == 0x0000A0, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_WidgetComp' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000A8, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount_2) == 0x0000B8, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount_2' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount_1) == 0x0000BC, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount_1' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CustomEvent_Amount) == 0x0000C0, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CustomEvent_Amount' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000C4, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000D4, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000E4, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_8) == 0x0000F4, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_9) == 0x000104, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount, K2Node_CreateDelegate_OutputDelegate_10) == 0x000114, "Member 'WeaponDisplay_Base_AmmoCount_C_ExecuteUbergraph_WeaponDisplay_Base_AmmoCount::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.Reload Time Tick
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_Reload_Time_Tick::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.Total Ammo left changed
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_Total_Ammo_left_changed::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.Max Ammo Changed
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_Max_Ammo_Changed::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.InitializeAmmoWidget
// 0x0010 (0x0010 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget final
{
public:
	class AItem*                                  OwningItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WidgetComp;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget) == 0x000008, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget) == 0x000010, "Wrong size on WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget, OwningItem) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget::OwningItem' has a wrong offset!");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget, WidgetComp) == 0x000008, "Member 'WeaponDisplay_Base_AmmoCount_C_InitializeAmmoWidget::WidgetComp' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.OnTotalAmountChange
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChange::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.OnCarriedAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_OnCarriedAmountChanged::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.OnClipAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_OnClipAmountChanged::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.OnTotalAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged, Amount) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_OnTotalAmountChanged::Amount' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.SetClipCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_SetClipCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_SetClipCount) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_SetClipCount");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_SetClipCount) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_SetClipCount");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_SetClipCount, Value) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_SetClipCount::Value' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.SetTotalCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_SetTotalCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_SetTotalCount) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_SetTotalCount");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_SetTotalCount) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_SetTotalCount");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_SetTotalCount, Value) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_SetTotalCount::Value' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.RequestRedraw
// 0x0001 (0x0001 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_RequestRedraw final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_RequestRedraw) == 0x000001, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_RequestRedraw");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_RequestRedraw) == 0x000001, "Wrong size on WeaponDisplay_Base_AmmoCount_C_RequestRedraw");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_RequestRedraw, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_RequestRedraw::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WeaponDisplay_Base_AmmoCount.WeaponDisplay_Base_AmmoCount_C.SetMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo) == 0x000004, "Wrong alignment on WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo");
static_assert(sizeof(WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo) == 0x000004, "Wrong size on WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo");
static_assert(offsetof(WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo, Value) == 0x000000, "Member 'WeaponDisplay_Base_AmmoCount_C_SetMaxAmmo::Value' has a wrong offset!");

}

