#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_PlasmaCarbine_AmmoCounter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WeaponDisplay_Base_AmmoCount_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponDisplay_PlasmaCarbine_AmmoCounter.WeaponDisplay_PlasmaCarbine_AmmoCounter_C
// 0x0070 (0x02F0 - 0x0280)
class UWeaponDisplay_PlasmaCarbine_AmmoCounter_C final : public UWeaponDisplay_Base_AmmoCount_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WeaponDisplay_PlasmaCarbine_AmmoCounter_C; // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ProgressColor;                                // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_LowerBlink;                                   // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Overheat;                                     // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_AmmoCritical;                                 // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             DATA_AmmoCount;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DATA_AmmoLow;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Progress;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ProgressLowerBit;                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_AmmoLow;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Overheat;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Overheating;                                       // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5338[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ProgressColor;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void SetProgressColor(const struct FLinearColor& InColor);
	void Scrub_Animation(class UWidgetAnimation* InAnimation, float InProgress);
	void OverheatStatus(bool Condition);
	void SetProgress(float Value);
	void UpdateAmount(int32 Value);
	void SetTotalCount(int32 Value);
	void Max_Ammo_Changed(int32 Amount);
	void Total_Ammo_left_changed(int32 Amount);
	void SetClipCount(int32 Value);
	void PreConstruct(bool IsDesignTime);
	void SetHeatValue(float HeatPercentage, bool Overheated, float ThermalFeedbackLevel);
	void ExecuteUbergraph_WeaponDisplay_PlasmaCarbine_AmmoCounter(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponDisplay_PlasmaCarbine_AmmoCounter_C">();
	}
	static class UWeaponDisplay_PlasmaCarbine_AmmoCounter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponDisplay_PlasmaCarbine_AmmoCounter_C>();
	}
};
static_assert(alignof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C) == 0x000008, "Wrong alignment on UWeaponDisplay_PlasmaCarbine_AmmoCounter_C");
static_assert(sizeof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C) == 0x0002F0, "Wrong size on UWeaponDisplay_PlasmaCarbine_AmmoCounter_C");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, UberGraphFrame_WeaponDisplay_PlasmaCarbine_AmmoCounter_C) == 0x000280, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::UberGraphFrame_WeaponDisplay_PlasmaCarbine_AmmoCounter_C' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Anim_ProgressColor) == 0x000288, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Anim_ProgressColor' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Anim_LowerBlink) == 0x000290, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Anim_LowerBlink' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Anim_Overheat) == 0x000298, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Anim_Overheat' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Anim_AmmoCritical) == 0x0002A0, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Anim_AmmoCritical' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, DATA_AmmoCount) == 0x0002A8, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::DATA_AmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, DATA_AmmoLow) == 0x0002B0, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::DATA_AmmoLow' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Image_Progress) == 0x0002B8, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Image_Progress' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Image_ProgressLowerBit) == 0x0002C0, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Image_ProgressLowerBit' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Overlay_AmmoLow) == 0x0002C8, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Overlay_AmmoLow' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Overlay_Overheat) == 0x0002D0, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Overlay_Overheat' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Progress) == 0x0002D8, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Progress' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, Overheating) == 0x0002DC, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::Overheating' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_PlasmaCarbine_AmmoCounter_C, ProgressColor) == 0x0002E0, "Member 'UWeaponDisplay_PlasmaCarbine_AmmoCounter_C::ProgressColor' has a wrong offset!");

}

