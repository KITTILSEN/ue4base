#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_LockOnRifle_A

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_LockOnRifle_A.ABP_LockOnRifle_A_C
// 0x0320 (0x05E0 - 0x02C0)
class UABP_LockOnRifle_A_C final : public UAnimInstance
{
public:
	uint8                                         Pad_426A[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x02F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0320(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0348(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0368(0x0108)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0470(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x04A0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x04D0(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0580(0x0048)()
	struct FRotator                               FrontRotation;                                     // 0x05C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasLockedTarget;                                   // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426B[0x3];                                     // 0x05D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ALockOnWeapon*                          Test;                                              // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void SetHasLockedTarget(bool Param_HasLockedTarget);
	void SetRotation(const struct FRotator& WorldRotation);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LockOnRifle_A_AnimGraphNode_ModifyBone_74E00D924E9336DBFBD36EA357389206();
	void BlueprintBeginPlay();
	void OnRotationUpdated(bool HasTargetLockon, const struct FRotator& SocketRotation);
	void ExecuteUbergraph_ABP_LockOnRifle_A(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_LockOnRifle_A_C">();
	}
	static class UABP_LockOnRifle_A_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_LockOnRifle_A_C>();
	}
};
static_assert(alignof(UABP_LockOnRifle_A_C) == 0x000010, "Wrong alignment on UABP_LockOnRifle_A_C");
static_assert(sizeof(UABP_LockOnRifle_A_C) == 0x0005E0, "Wrong size on UABP_LockOnRifle_A_C");
static_assert(offsetof(UABP_LockOnRifle_A_C, UberGraphFrame) == 0x0002C0, "Member 'UABP_LockOnRifle_A_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_TransitionResult_1) == 0x0002F8, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_TransitionResult) == 0x000320, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_ComponentToLocalSpace) == 0x000348, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_ModifyBone) == 0x000368, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_StateResult_1) == 0x000470, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_StateResult) == 0x0004A0, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_StateMachine) == 0x0004D0, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, AnimGraphNode_Slot) == 0x000580, "Member 'UABP_LockOnRifle_A_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, FrontRotation) == 0x0005C8, "Member 'UABP_LockOnRifle_A_C::FrontRotation' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, HasLockedTarget) == 0x0005D4, "Member 'UABP_LockOnRifle_A_C::HasLockedTarget' has a wrong offset!");
static_assert(offsetof(UABP_LockOnRifle_A_C, Test) == 0x0005D8, "Member 'UABP_LockOnRifle_A_C::Test' has a wrong offset!");

}

