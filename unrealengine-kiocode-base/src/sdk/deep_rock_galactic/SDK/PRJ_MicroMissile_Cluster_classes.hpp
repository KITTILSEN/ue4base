#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PRJ_MicroMissile_Cluster

#include "Basic.hpp"

#include "PRJ_MicroMissile_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PRJ_MicroMissile_Cluster.PRJ_MicroMissile_Cluster_C
// 0x0040 (0x0420 - 0x03E0)
class APRJ_MicroMissile_Cluster_C final : public APRJ_MicroMissile_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PRJ_MicroMissile_Cluster_C;         // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClusterbombSpawner*                    ClusterbombSpawner;                                // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MicroMissile_Cluster;                           // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Locationindicator;                                 // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           IndicatorTimer;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         IndicatorUpdateTime;                               // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCluster;                                        // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_538C[0x3];                                     // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnInitialized();
	void CalculateClusterTrajectory(float RealDeltaTime, float ProjectileSpeed, struct FVector* ClusterHitCenter);
	void SpawnClusters(const struct FVector& InVector, float ClusterDelay);
	void CalculateIndicatorPos();
	void OnImpacted(bool PredictedImpact, const struct FHitResult& HitResult);
	void Cleanup();
	void ExecuteUbergraph_PRJ_MicroMissile_Cluster(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PRJ_MicroMissile_Cluster_C">();
	}
	static class APRJ_MicroMissile_Cluster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APRJ_MicroMissile_Cluster_C>();
	}
};
static_assert(alignof(APRJ_MicroMissile_Cluster_C) == 0x000008, "Wrong alignment on APRJ_MicroMissile_Cluster_C");
static_assert(sizeof(APRJ_MicroMissile_Cluster_C) == 0x000420, "Wrong size on APRJ_MicroMissile_Cluster_C");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, UberGraphFrame_PRJ_MicroMissile_Cluster_C) == 0x0003E0, "Member 'APRJ_MicroMissile_Cluster_C::UberGraphFrame_PRJ_MicroMissile_Cluster_C' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, ClusterbombSpawner) == 0x0003E8, "Member 'APRJ_MicroMissile_Cluster_C::ClusterbombSpawner' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, SM_MicroMissile_Cluster) == 0x0003F0, "Member 'APRJ_MicroMissile_Cluster_C::SM_MicroMissile_Cluster' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, Locationindicator) == 0x0003F8, "Member 'APRJ_MicroMissile_Cluster_C::Locationindicator' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, IndicatorTimer) == 0x000400, "Member 'APRJ_MicroMissile_Cluster_C::IndicatorTimer' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, IndicatorUpdateTime) == 0x000408, "Member 'APRJ_MicroMissile_Cluster_C::IndicatorUpdateTime' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, CanCluster) == 0x00040C, "Member 'APRJ_MicroMissile_Cluster_C::CanCluster' has a wrong offset!");
static_assert(offsetof(APRJ_MicroMissile_Cluster_C, HitLocation) == 0x000410, "Member 'APRJ_MicroMissile_Cluster_C::HitLocation' has a wrong offset!");

}

