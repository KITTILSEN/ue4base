#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Check_ServerGameType

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Check_ServerGameType.Check_ServerGameType_C
// 0x0040 (0x02A0 - 0x0260)
class UCheck_ServerGameType_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBasic_CheckBox_C*                      CheckBox;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnCheckedChanged;                                  // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EGameType                                     Gametype;                                          // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SandboxMode;                                       // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_4181[0x6];                                     // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name_Check_ServerGameType_C;                       // 0x0288(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Verify(const TArray<EGameType>& InSelectedGameTypes);
	void Reset(bool InSandbox);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__CheckBox_K2Node_ComponentBoundEvent_0_OnCheckStateChanged__DelegateSignature(bool IsChecked);
	void Construct();
	void ExecuteUbergraph_Check_ServerGameType(int32 EntryPoint);
	void OnCheckedChanged__DelegateSignature(bool IsChecked, EGameType Param_Gametype);

	bool IsInteractable() const;
	void GetIsChecked(bool* Checked) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Check_ServerGameType_C">();
	}
	static class UCheck_ServerGameType_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheck_ServerGameType_C>();
	}
};
static_assert(alignof(UCheck_ServerGameType_C) == 0x000008, "Wrong alignment on UCheck_ServerGameType_C");
static_assert(sizeof(UCheck_ServerGameType_C) == 0x0002A0, "Wrong size on UCheck_ServerGameType_C");
static_assert(offsetof(UCheck_ServerGameType_C, UberGraphFrame) == 0x000260, "Member 'UCheck_ServerGameType_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCheck_ServerGameType_C, CheckBox) == 0x000268, "Member 'UCheck_ServerGameType_C::CheckBox' has a wrong offset!");
static_assert(offsetof(UCheck_ServerGameType_C, OnCheckedChanged) == 0x000270, "Member 'UCheck_ServerGameType_C::OnCheckedChanged' has a wrong offset!");
static_assert(offsetof(UCheck_ServerGameType_C, Gametype) == 0x000280, "Member 'UCheck_ServerGameType_C::Gametype' has a wrong offset!");
static_assert(offsetof(UCheck_ServerGameType_C, SandboxMode) == 0x000281, "Member 'UCheck_ServerGameType_C::SandboxMode' has a wrong offset!");
static_assert(offsetof(UCheck_ServerGameType_C, Name_Check_ServerGameType_C) == 0x000288, "Member 'UCheck_ServerGameType_C::Name_Check_ServerGameType_C' has a wrong offset!");

}

