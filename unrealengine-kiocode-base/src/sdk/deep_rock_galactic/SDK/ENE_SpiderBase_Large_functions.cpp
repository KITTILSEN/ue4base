#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ENE_SpiderBase_Large

#include "Basic.hpp"

#include "ENE_SpiderBase_Large_classes.hpp"
#include "ENE_SpiderBase_Large_parameters.hpp"


namespace SDK
{

// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.CalcDissolveDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Delay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::CalcDissolveDelay(float* Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "CalcDissolveDelay");

	Params::ENE_SpiderBase_Large_C_CalcDissolveDelay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Delay != nullptr)
		*Delay = Parms.Delay;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.FindChemicalArrow
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACrossbowProjectileStuck*         ChemicalArrow                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::FindChemicalArrow(class ACrossbowProjectileStuck** ChemicalArrow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "FindChemicalArrow");

	Params::ENE_SpiderBase_Large_C_FindChemicalArrow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChemicalArrow != nullptr)
		*ChemicalArrow = Parms.ChemicalArrow;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.GetFXMeshScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::GetFXMeshScale(float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "GetFXMeshScale");

	Params::ENE_SpiderBase_Large_C_GetFXMeshScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.HandleWeapointDeath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDamageData                      DamageData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// TArray<class UDamageTag*>               Param_Tags                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AENE_SpiderBase_Large_C::HandleWeapointDeath(struct FDamageData& DamageData, TArray<class UDamageTag*>& Param_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "HandleWeapointDeath");

	Params::ENE_SpiderBase_Large_C_HandleWeapointDeath Parms{};

	Parms.DamageData = std::move(DamageData);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);

	DamageData = std::move(Parms.DamageData);
	Param_Tags = std::move(Parms.Param_Tags);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.HandleNormalDeath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDamageData                      DamageData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// TArray<class UDamageTag*>               Param_Tags                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AENE_SpiderBase_Large_C::HandleNormalDeath(struct FDamageData& DamageData, TArray<class UDamageTag*>& Param_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "HandleNormalDeath");

	Params::ENE_SpiderBase_Large_C_HandleNormalDeath Parms{};

	Parms.DamageData = std::move(DamageData);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);

	DamageData = std::move(Parms.DamageData);
	Param_Tags = std::move(Parms.Param_Tags);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.GetImpactImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EImpulseDirectionSource                 Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageData                      DamageData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// float                                   UpForceScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AENE_SpiderBase_Large_C::GetImpactImpulse(EImpulseDirectionSource Selection, struct FDamageData& DamageData, float UpForceScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "GetImpactImpulse");

	Params::ENE_SpiderBase_Large_C_GetImpactImpulse Parms{};

	Parms.Selection = Selection;
	Parms.DamageData = std::move(DamageData);
	Parms.UpForceScale = UpForceScale;

	UObject::ProcessEvent(Func, &Parms);

	DamageData = std::move(Parms.DamageData);

	return Parms.ReturnValue;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SetDeathAnimationCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESpiderDeathAnimationCategory           Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::SetDeathAnimationCategory(ESpiderDeathAnimationCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SetDeathAnimationCategory");

	Params::ENE_SpiderBase_Large_C_SetDeathAnimationCategory Parms{};

	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SetCookMaterialSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::SetCookMaterialSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SetCookMaterialSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SetBurnMaterialSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::SetBurnMaterialSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SetBurnMaterialSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.FindClosestBone
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Bone                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::FindClosestBone(const struct FVector& Location, class FName* Bone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "FindClosestBone");

	Params::ENE_SpiderBase_Large_C_FindClosestBone Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Bone != nullptr)
		*Bone = Parms.Bone;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.DismemberLegs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 AENE_SpiderBase_Large_C::DismemberLegs(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "DismemberLegs");

	Params::ENE_SpiderBase_Large_C_DismemberLegs Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.ShouldMelt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UDamageTag*>               TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDamageClass*                     DamageClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AENE_SpiderBase_Large_C::ShouldMelt(const TArray<class UDamageTag*>& TargetArray, class UDamageClass* DamageClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "ShouldMelt");

	Params::ENE_SpiderBase_Large_C_ShouldMelt Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.DamageClass = DamageClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.IsWeakPointDeath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UFSDPhysicalMaterial*             Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWeakPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AENE_SpiderBase_Large_C::IsWeakPointDeath(class UFSDPhysicalMaterial* Material, bool* IsWeakPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "IsWeakPointDeath");

	Params::ENE_SpiderBase_Large_C_IsWeakPointDeath Parms{};

	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);

	if (IsWeakPoint != nullptr)
		*IsWeakPoint = Parms.IsWeakPoint;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.GetEnemySpawnedCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SpawnCount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::GetEnemySpawnedCount(int32* SpawnCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "GetEnemySpawnedCount");

	Params::ENE_SpiderBase_Large_C_GetEnemySpawnedCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnCount != nullptr)
		*SpawnCount = Parms.SpawnCount;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SetAnimatedDeathType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AnimationIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::SetAnimatedDeathType(int32 AnimationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SetAnimatedDeathType");

	Params::ENE_SpiderBase_Large_C_SetAnimatedDeathType Parms{};

	Parms.AnimationIndex = AnimationIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.TrySelectDeathAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WasWeakpoint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   AnimationIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasSelectedAnimation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AENE_SpiderBase_Large_C::TrySelectDeathAnimation(bool WasWeakpoint, int32* AnimationIndex, bool* HasSelectedAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "TrySelectDeathAnimation");

	Params::ENE_SpiderBase_Large_C_TrySelectDeathAnimation Parms{};

	Parms.WasWeakpoint = WasWeakpoint;

	UObject::ProcessEvent(Func, &Parms);

	if (AnimationIndex != nullptr)
		*AnimationIndex = Parms.AnimationIndex;

	if (HasSelectedAnimation != nullptr)
		*HasSelectedAnimation = Parms.HasSelectedAnimation;
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SetDeathType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESpider_DeathType                       Param_DeathType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::SetDeathType(ESpider_DeathType Param_DeathType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SetDeathType");

	Params::ENE_SpiderBase_Large_C_SetDeathType Parms{};

	Parms.Param_DeathType = Param_DeathType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.OnRep_DeathType
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::OnRep_DeathType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "OnRep_DeathType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SpawnLeg
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InSocketName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::SpawnLeg(class FName InSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SpawnLeg");

	Params::ENE_SpiderBase_Large_C_SpawnLeg Parms{};

	Parms.InSocketName = InSocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SetRagdollImpulse
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDamageData                      DamageData                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// TArray<class UDamageTag*>               Param_Tags                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AENE_SpiderBase_Large_C::SetRagdollImpulse(struct FDamageData& DamageData, TArray<class UDamageTag*>& Param_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SetRagdollImpulse");

	Params::ENE_SpiderBase_Large_C_SetRagdollImpulse Parms{};

	Parms.DamageData = std::move(DamageData);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);

	DamageData = std::move(Parms.DamageData);
	Param_Tags = std::move(Parms.Param_Tags);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.OnUnFrozen
// (Event, Protected, BlueprintEvent)

void AENE_SpiderBase_Large_C::OnUnFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "OnUnFrozen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.Play Burn Death
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::Play_Burn_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "Play Burn Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.StartDissolve
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::StartDissolve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "StartDissolve");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.Play Frozen Death
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::Play_Frozen_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "Play Frozen Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.StartBurn
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::StartBurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "StartBurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.OnFrozen
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::OnFrozen(class AActor* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "OnFrozen");

	Params::ENE_SpiderBase_Large_C_OnFrozen Parms{};

	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.Play Body Death Effects
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::Play_Body_Death_Effects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "Play Body Death Effects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SpawnLegGib_Local
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::SpawnLegGib_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SpawnLegGib_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SendRagdollImpulse
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector_NetQuantize              Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// uint8                                   BoneIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::SendRagdollImpulse(const struct FVector_NetQuantize& Impulse, uint8 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SendRagdollImpulse");

	Params::ENE_SpiderBase_Large_C_SendRagdollImpulse Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.BoneIndex = BoneIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.PlayAnimatedDeath
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AnimationIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::PlayAnimatedDeath(int32 AnimationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "PlayAnimatedDeath");

	Params::ENE_SpiderBase_Large_C_PlayAnimatedDeath Parms{};

	Parms.AnimationIndex = AnimationIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.ExplodedDeath
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::ExplodedDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "ExplodedDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.StartFadeBody
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::StartFadeBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "StartFadeBody");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.TrySpawnEnemies
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::TrySpawnEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "TrySpawnEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.BurrowingEscape
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::BurrowingEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "BurrowingEscape");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.GibbedDeath
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::GibbedDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "GibbedDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.DeathDetailedBase
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageData                      DamageData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// TArray<class UDamageTag*>               Param_Tags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AENE_SpiderBase_Large_C::DeathDetailedBase(float Amount, const struct FDamageData& DamageData, const TArray<class UDamageTag*>& Param_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "DeathDetailedBase");

	Params::ENE_SpiderBase_Large_C_DeathDetailedBase Parms{};

	Parms.Amount = Amount;
	Parms.DamageData = std::move(DamageData);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.MakeElite
// (Event, Public, BlueprintEvent)

void AENE_SpiderBase_Large_C::MakeElite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "MakeElite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.CorrosiveDeath
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::CorrosiveDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "CorrosiveDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.SpawnLegGib
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::SpawnLegGib()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "SpawnLegGib");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.StartCorrosiveDissovle
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::StartCorrosiveDissovle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "StartCorrosiveDissovle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.Cooked Death
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::Cooked_Death()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "Cooked Death");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.All_Ragdoll
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector_NetQuantize              Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// uint8                                   BoneIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   LimbIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::All_Ragdoll(const struct FVector_NetQuantize& Impulse, const struct FVector_NetQuantize& Location, uint8 BoneIndex, uint8 LimbIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "All_Ragdoll");

	Params::ENE_SpiderBase_Large_C_All_Ragdoll Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.Location = std::move(Location);
	Parms.BoneIndex = BoneIndex;
	Parms.LimbIndex = LimbIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.BreakLimb
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   BoneIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::BreakLimb(uint8 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "BreakLimb");

	Params::ENE_SpiderBase_Large_C_BreakLimb Parms{};

	Parms.BoneIndex = BoneIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.BndEvt__ENE_SpiderBase_Large_HealthComponent_K2Node_ComponentBoundEvent_0_DeathSigDetailed__DelegateSignature
// (BlueprintAuthorityOnly, HasOutParams, BlueprintEvent)
// Parameters:
// class UHealthComponent*                 Param_HealthComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageData                      DamageData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// TArray<class UDamageTag*>               Param_Tags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AENE_SpiderBase_Large_C::BndEvt__ENE_SpiderBase_Large_HealthComponent_K2Node_ComponentBoundEvent_0_DeathSigDetailed__DelegateSignature(class UHealthComponent* Param_HealthComponent, float DamageAmount, const struct FDamageData& DamageData, const TArray<class UDamageTag*>& Param_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "BndEvt__ENE_SpiderBase_Large_HealthComponent_K2Node_ComponentBoundEvent_0_DeathSigDetailed__DelegateSignature");

	Params::ENE_SpiderBase_Large_C_BndEvt__ENE_SpiderBase_Large_HealthComponent_K2Node_ComponentBoundEvent_0_DeathSigDetailed__DelegateSignature Parms{};

	Parms.Param_HealthComponent = Param_HealthComponent;
	Parms.DamageAmount = DamageAmount;
	Parms.DamageData = std::move(DamageData);
	Parms.Param_Tags = std::move(Param_Tags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.ChangeVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AENE_SpiderBase_Large_C::ChangeVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "ChangeVisibility");

	Params::ENE_SpiderBase_Large_C_ChangeVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.Spawn Headshot Gibs
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESpider_DeathType                       Param_DeathType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::Spawn_Headshot_Gibs(ESpider_DeathType Param_DeathType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "Spawn Headshot Gibs");

	Params::ENE_SpiderBase_Large_C_Spawn_Headshot_Gibs Parms{};

	Parms.Param_DeathType = Param_DeathType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.OnRagdoll
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::OnRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "OnRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.ChemicalExplosionDeath
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::ChemicalExplosionDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "ChemicalExplosionDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.OnDeathBase
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::OnDeathBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "OnDeathBase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.PlasmaExplosionDeath
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::PlasmaExplosionDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "PlasmaExplosionDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.OnTriggerFadeRagdoll
// (Event, Protected, BlueprintEvent)

void AENE_SpiderBase_Large_C::OnTriggerFadeRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "OnTriggerFadeRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.DissolveAfterRagdoll
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::DissolveAfterRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "DissolveAfterRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.TriggerDissolve
// (BlueprintCallable, BlueprintEvent)

void AENE_SpiderBase_Large_C::TriggerDissolve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "TriggerDissolve");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ENE_SpiderBase_Large.ENE_SpiderBase_Large_C.ExecuteUbergraph_ENE_SpiderBase_Large
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AENE_SpiderBase_Large_C::ExecuteUbergraph_ENE_SpiderBase_Large(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ENE_SpiderBase_Large_C", "ExecuteUbergraph_ENE_SpiderBase_Large");

	Params::ENE_SpiderBase_Large_C_ExecuteUbergraph_ENE_SpiderBase_Large Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

