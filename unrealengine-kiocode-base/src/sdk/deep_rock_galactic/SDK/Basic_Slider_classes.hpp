#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Basic_Slider

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Basic_Slider.Basic_Slider_C
// 0x0088 (0x02E8 - 0x0260)
class UBasic_Slider_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                ColorOverlay;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DATA_Percentage;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_0;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_1;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider;                                            // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnValueChanged;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MinValue;                                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPercentChanged;                                  // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   TextFormat;                                        // 0x02B8(0x0018)(Edit, BlueprintVisible)
	int32                                         MaxFractionalDigits;                               // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDesiredWidth;                                   // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinFractionalDigits;                               // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MappedMinValue;                                    // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MappedMaxValue;                                    // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviewPercent;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnValueChanged__DelegateSignature(float Value);
	void OnPercentChanged__DelegateSignature(float Percent);
	void ExecuteUbergraph_Basic_Slider(int32 EntryPoint);
	void Update_Text();
	void PreConstruct(bool IsDesignTime);
	void BndEvt__Slider_K2Node_ComponentBoundEvent_6_OnMouseCaptureEndEvent__DelegateSignature();
	void BndEvt__Slider_K2Node_ComponentBoundEvent_5_OnMouseCaptureBeginEvent__DelegateSignature();
	void BndEvt__Slider_K2Node_ComponentBoundEvent_4_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void Set_Percent(float New_Percent);
	void Set_Value(float Value);
	void Get_Percent(float* Percent);
	void Get_Value(float* Value);
	void Set_Text(const class FText& New_Text);
	void SetMinTextWidth(float InMinDesiredWidth);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Basic_Slider_C">();
	}
	static class UBasic_Slider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasic_Slider_C>();
	}
};
static_assert(alignof(UBasic_Slider_C) == 0x000008, "Wrong alignment on UBasic_Slider_C");
static_assert(sizeof(UBasic_Slider_C) == 0x0002E8, "Wrong size on UBasic_Slider_C");
static_assert(offsetof(UBasic_Slider_C, UberGraphFrame) == 0x000260, "Member 'UBasic_Slider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, ColorOverlay) == 0x000268, "Member 'UBasic_Slider_C::ColorOverlay' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, DATA_Percentage) == 0x000270, "Member 'UBasic_Slider_C::DATA_Percentage' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, ProgressBar_0) == 0x000278, "Member 'UBasic_Slider_C::ProgressBar_0' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, SizeBox_1) == 0x000280, "Member 'UBasic_Slider_C::SizeBox_1' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, Slider) == 0x000288, "Member 'UBasic_Slider_C::Slider' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, OnValueChanged) == 0x000290, "Member 'UBasic_Slider_C::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MinValue) == 0x0002A0, "Member 'UBasic_Slider_C::MinValue' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MaxValue) == 0x0002A4, "Member 'UBasic_Slider_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, OnPercentChanged) == 0x0002A8, "Member 'UBasic_Slider_C::OnPercentChanged' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, TextFormat) == 0x0002B8, "Member 'UBasic_Slider_C::TextFormat' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MaxFractionalDigits) == 0x0002D0, "Member 'UBasic_Slider_C::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MinDesiredWidth) == 0x0002D4, "Member 'UBasic_Slider_C::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MinFractionalDigits) == 0x0002D8, "Member 'UBasic_Slider_C::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MappedMinValue) == 0x0002DC, "Member 'UBasic_Slider_C::MappedMinValue' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, MappedMaxValue) == 0x0002E0, "Member 'UBasic_Slider_C::MappedMaxValue' has a wrong offset!");
static_assert(offsetof(UBasic_Slider_C, PreviewPercent) == 0x0002E4, "Member 'UBasic_Slider_C::PreviewPercent' has a wrong offset!");

}

