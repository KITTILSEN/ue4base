#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LockOnRifle_AoE

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_LockOnRifle_AoE.BP_LockOnRifle_AoE_C.ExecuteUbergraph_BP_LockOnRifle_AoE
// 0x0014 (0x0014 - 0x0000)
struct BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE) == 0x000004, "Wrong alignment on BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE");
static_assert(sizeof(BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE) == 0x000014, "Wrong size on BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE");
static_assert(offsetof(BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE, EntryPoint) == 0x000000, "Member 'BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'BP_LockOnRifle_AoE_C_ExecuteUbergraph_BP_LockOnRifle_AoE::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

}

