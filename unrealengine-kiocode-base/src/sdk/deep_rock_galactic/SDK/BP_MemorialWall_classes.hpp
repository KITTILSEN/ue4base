#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MemorialWall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MemorialWall.BP_MemorialWall_C
// 0x0048 (0x0268 - 0x0220)
class ABP_MemorialWall_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DanceSphere;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsControlled;                                      // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F8E[0x3];                                     // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FastSpeed;                                         // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowSpeed;                                         // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MemorialWall(int32 EntryPoint);
	void BndEvt__DanceSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__DanceSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void SetIsControlled();
	void SetFastScrollSpeed(bool Flag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MemorialWall_C">();
	}
	static class ABP_MemorialWall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MemorialWall_C>();
	}
};
static_assert(alignof(ABP_MemorialWall_C) == 0x000008, "Wrong alignment on ABP_MemorialWall_C");
static_assert(sizeof(ABP_MemorialWall_C) == 0x000268, "Wrong size on ABP_MemorialWall_C");
static_assert(offsetof(ABP_MemorialWall_C, UberGraphFrame) == 0x000220, "Member 'ABP_MemorialWall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, Audio) == 0x000228, "Member 'ABP_MemorialWall_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, Sphere) == 0x000230, "Member 'ABP_MemorialWall_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, DanceSphere) == 0x000238, "Member 'ABP_MemorialWall_C::DanceSphere' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, Cube) == 0x000240, "Member 'ABP_MemorialWall_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, Widget) == 0x000248, "Member 'ABP_MemorialWall_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_MemorialWall_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, IsControlled) == 0x000258, "Member 'ABP_MemorialWall_C::IsControlled' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, FastSpeed) == 0x00025C, "Member 'ABP_MemorialWall_C::FastSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MemorialWall_C, SlowSpeed) == 0x000260, "Member 'ABP_MemorialWall_C::SlowSpeed' has a wrong offset!");

}

