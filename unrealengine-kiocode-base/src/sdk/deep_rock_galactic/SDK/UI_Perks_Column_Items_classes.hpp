#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Perks_Column_Items

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "ENUM_MenuColors_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Perks_Column_Items.UI_Perks_Column_Items_C
// 0x0058 (0x02B8 - 0x0260)
class UUI_Perks_Column_Items_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUniformGridPanel*                      PerksGrid;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                TierBorder;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_Perks_Column_Unlocks_C*             UI_Perks_Column_Unlocks;                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Tier;                                              // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_41D2[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_Perks_Item_C*>               PerkWidgets;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         PerkRows;                                          // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_41D3[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPerkClicked;                                     // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TierUnLocked;                                      // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void RefreshTier();
	void AddPerk(class UPerkAsset* Perk, class UPerkAsset** OutPerk, class UUI_Perks_Item_C** OutWidget);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void OnPerkClicked_Event(class UUI_Perks_Item_C* Widget);
	void OnPerkClaimed_Event(class UPerkAsset* Perk, int32 ClaimedTier);
	void SetPerks(TArray<class UPerkAsset*>& Array);
	void ExecuteUbergraph_UI_Perks_Column_Items(int32 EntryPoint);
	void OnPerkClicked__DelegateSignature(class UUI_Perks_Item_C* PerkWidget);

	bool IsInteractable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Perks_Column_Items_C">();
	}
	static class UUI_Perks_Column_Items_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Perks_Column_Items_C>();
	}
};
static_assert(alignof(UUI_Perks_Column_Items_C) == 0x000008, "Wrong alignment on UUI_Perks_Column_Items_C");
static_assert(sizeof(UUI_Perks_Column_Items_C) == 0x0002B8, "Wrong size on UUI_Perks_Column_Items_C");
static_assert(offsetof(UUI_Perks_Column_Items_C, UberGraphFrame) == 0x000260, "Member 'UUI_Perks_Column_Items_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, PerksGrid) == 0x000268, "Member 'UUI_Perks_Column_Items_C::PerksGrid' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, TierBorder) == 0x000270, "Member 'UUI_Perks_Column_Items_C::TierBorder' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, UI_Perks_Column_Unlocks) == 0x000278, "Member 'UUI_Perks_Column_Items_C::UI_Perks_Column_Unlocks' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, Tier) == 0x000280, "Member 'UUI_Perks_Column_Items_C::Tier' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, PerkWidgets) == 0x000288, "Member 'UUI_Perks_Column_Items_C::PerkWidgets' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, PerkRows) == 0x000298, "Member 'UUI_Perks_Column_Items_C::PerkRows' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, OnPerkClicked) == 0x0002A0, "Member 'UUI_Perks_Column_Items_C::OnPerkClicked' has a wrong offset!");
static_assert(offsetof(UUI_Perks_Column_Items_C, TierUnLocked) == 0x0002B0, "Member 'UUI_Perks_Column_Items_C::TierUnLocked' has a wrong offset!");

}

