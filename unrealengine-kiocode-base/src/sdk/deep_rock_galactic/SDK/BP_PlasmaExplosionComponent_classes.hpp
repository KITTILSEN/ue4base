#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlasmaExplosionComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlasmaExplosionComponent.BP_PlasmaExplosionComponent_C
// 0x0058 (0x0108 - 0x00B0)
class UBP_PlasmaExplosionComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFSDPawn*                               OwningPawn;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 VictimMesh;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionDelay;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtraRadiusPerBullet;                              // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseRadius;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseExplosionDamage;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtraDamagePerBullet;                              // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4800[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class APlasmaCarbine>          Weapon;                                            // 0x00E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void FindOrCreateDamageComponent(class AActor* Actor, class UDamageComponent** DamageComponent);
	void GetFXMeshScale(float* Scale);
	void ReceiveBeginPlay();
	void InitializeEffect(class UStatusEffect* Effect, class AActor* EffectOwner);
	void OnDeathEvent(class UHealthComponentBase* HealthComponent);
	void BindReload(class AActor* Effect_Owner);
	void ReloadEvent();
	void ExplosionEffects(const struct FVector& Location, float ExplosionRadius, class AFSDPawn* TargetPawn);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ResetComponent();
	void TrackHealth(float Health);
	void CalculateDeadBugWalking(float Health);
	void ExecuteUbergraph_BP_PlasmaExplosionComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlasmaExplosionComponent_C">();
	}
	static class UBP_PlasmaExplosionComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlasmaExplosionComponent_C>();
	}
};
static_assert(alignof(UBP_PlasmaExplosionComponent_C) == 0x000008, "Wrong alignment on UBP_PlasmaExplosionComponent_C");
static_assert(sizeof(UBP_PlasmaExplosionComponent_C) == 0x000108, "Wrong size on UBP_PlasmaExplosionComponent_C");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_PlasmaExplosionComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, OwningPawn) == 0x0000B8, "Member 'UBP_PlasmaExplosionComponent_C::OwningPawn' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, VictimMesh) == 0x0000C0, "Member 'UBP_PlasmaExplosionComponent_C::VictimMesh' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, ExplosionDelay) == 0x0000C8, "Member 'UBP_PlasmaExplosionComponent_C::ExplosionDelay' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, ExtraRadiusPerBullet) == 0x0000CC, "Member 'UBP_PlasmaExplosionComponent_C::ExtraRadiusPerBullet' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, BaseRadius) == 0x0000D0, "Member 'UBP_PlasmaExplosionComponent_C::BaseRadius' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, BaseExplosionDamage) == 0x0000D4, "Member 'UBP_PlasmaExplosionComponent_C::BaseExplosionDamage' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, ExtraDamagePerBullet) == 0x0000D8, "Member 'UBP_PlasmaExplosionComponent_C::ExtraDamagePerBullet' has a wrong offset!");
static_assert(offsetof(UBP_PlasmaExplosionComponent_C, Weapon) == 0x0000E0, "Member 'UBP_PlasmaExplosionComponent_C::Weapon' has a wrong offset!");

}

