#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Microwave_Heatsink

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FSD_structs.hpp"


namespace SDK::Params
{

// Function BP_Microwave_Heatsink.BP_Microwave_Heatsink_C.BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_Microwave_Heatsink.BP_Microwave_Heatsink_C.BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5476[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Microwave_Heatsink.BP_Microwave_Heatsink_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Microwave_Heatsink_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Microwave_Heatsink_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Microwave_Heatsink_C_ReceiveTick");
static_assert(sizeof(BP_Microwave_Heatsink_C_ReceiveTick) == 0x000004, "Wrong size on BP_Microwave_Heatsink_C_ReceiveTick");
static_assert(offsetof(BP_Microwave_Heatsink_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Microwave_Heatsink_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Microwave_Heatsink.BP_Microwave_Heatsink_C.BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_Microwave_Heatsink_HeatRadius_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Microwave_Heatsink.BP_Microwave_Heatsink_C.BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature final
{
public:
	class UHealthComponentBase*                   HealthComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature) == 0x000008, "Wrong alignment on BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature");
static_assert(sizeof(BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature) == 0x000008, "Wrong size on BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature");
static_assert(offsetof(BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature, HealthComponent) == 0x000000, "Member 'BP_Microwave_Heatsink_C_BndEvt__BP_ExplosiveBoil_SimpleHealth_K2Node_ComponentBoundEvent_2_DeathSig__DelegateSignature::HealthComponent' has a wrong offset!");

// Function BP_Microwave_Heatsink.BP_Microwave_Heatsink_C.ExecuteUbergraph_BP_Microwave_Heatsink
// 0x0218 (0x0218 - 0x0000)
struct BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5477[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5478[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0034(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_5479[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADeepCSGSection*                        K2Node_DynamicCast_AsDeep_CSGSection;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_547A[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_547B[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00F0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_547C[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFSDPawn*                               K2Node_DynamicCast_AsFSDPawn;                      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPushActiveStatusEffect_ReturnValue;    // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_547D[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPawnAttitude                                 CallFunc_GetAttitude_ReturnValue;                  // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_547E[0x6];                                     // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_547F[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFSDPawn*                               K2Node_DynamicCast_AsFSDPawn_1;                    // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPopActiveStatusEffect_ReturnValue;     // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPawnAttitude                                 CallFunc_GetAttitude_ReturnValue_1;                // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5480[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHealthComponentBase*                   K2Node_ComponentBoundEvent_HealthComponent;        // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5481[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink) == 0x000008, "Wrong alignment on BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink");
static_assert(sizeof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink) == 0x000218, "Wrong size on BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, EntryPoint) == 0x000000, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_Less_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_HasAuthority_ReturnValue) == 0x00000C, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_HitComponent) == 0x000010, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000018, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000020, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000028, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_Hit) == 0x000034, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_DynamicCast_AsDeep_CSGSection) == 0x0000C0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_DynamicCast_AsDeep_CSGSection' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000D0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0000D8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0000E0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0000E8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000EC, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_SweepResult) == 0x0000F0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_Event_DeltaSeconds) == 0x000178, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_DynamicCast_AsFSDPawn) == 0x000180, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_DynamicCast_AsFSDPawn' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_DynamicCast_bSuccess_1) == 0x000188, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_TryPushActiveStatusEffect_ReturnValue) == 0x000189, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_TryPushActiveStatusEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00018C, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_GetAttitude_ReturnValue) == 0x000190, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_GetAttitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000191, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000198, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherActor) == 0x0001A0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherComp) == 0x0001A8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0001B0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_DynamicCast_AsFSDPawn_1) == 0x0001B8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_DynamicCast_AsFSDPawn_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_DynamicCast_bSuccess_2) == 0x0001C0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_TryPopActiveStatusEffect_ReturnValue) == 0x0001C1, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_TryPopActiveStatusEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_GetAttitude_ReturnValue_1) == 0x0001C2, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_GetAttitude_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001C3, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0001C8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, K2Node_ComponentBoundEvent_HealthComponent) == 0x0001D0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::K2Node_ComponentBoundEvent_HealthComponent' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001D8, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0001E4, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0001F0, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000200, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000208, "Member 'BP_Microwave_Heatsink_C_ExecuteUbergraph_BP_Microwave_Heatsink::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");

}

