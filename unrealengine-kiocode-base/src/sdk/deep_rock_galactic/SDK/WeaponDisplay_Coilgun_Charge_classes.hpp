#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_Coilgun_Charge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WeaponDisplay_Base_AmmoCount_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponDisplay_Coilgun_Charge.WeaponDisplay_Coilgun_Charge_C
// 0x00E0 (0x0360 - 0x0280)
class UWeaponDisplay_Coilgun_Charge_C final : public UWeaponDisplay_Base_AmmoCount_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WeaponDisplay_Coilgun_Charge_C;     // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AmmoCountDownBlink;                                // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AmmoCountDown;                                     // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TextFadeIn;                                        // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Block1;                                            // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Block2;                                            // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Block3;                                            // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Block4;                                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_12;                                         // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_13;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_14;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_15;                                         // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_16;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DATA_AmmoCount;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DATA_AmmoCount_1;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_2;                                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_88;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Text;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WarningOverlay;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           ChargeColorOff;                                    // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ChargeColor1;                                      // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LowAmmoThreshold;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x4];                                       // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       AmmoCritical;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChargeUIVisible;                                 // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x3];                                       // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetAmmoCount;                                   // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldAmmoCount;                                      // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Charge_Value;                                      // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SequenceEvent__ENTRYPOINTWeaponDisplay_Coilgun_Charge_1();
	void SequenceEvent__ENTRYPOINTWeaponDisplay_Coilgun_Charge_0();
	void AmmoCountDownTick();
	void SetChargeValue(float ChargeValue, bool Overheated, bool Ready, bool FullCharge);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void Total_Ammo_left_changed(int32 Amount);
	void WidgetAnimationEvt_AmmoCountDown_K2Node_WidgetAnimationEvent_0();
	void ExecuteUbergraph_WeaponDisplay_Coilgun_Charge(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponDisplay_Coilgun_Charge_C">();
	}
	static class UWeaponDisplay_Coilgun_Charge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponDisplay_Coilgun_Charge_C>();
	}
};
static_assert(alignof(UWeaponDisplay_Coilgun_Charge_C) == 0x000008, "Wrong alignment on UWeaponDisplay_Coilgun_Charge_C");
static_assert(sizeof(UWeaponDisplay_Coilgun_Charge_C) == 0x000360, "Wrong size on UWeaponDisplay_Coilgun_Charge_C");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, UberGraphFrame_WeaponDisplay_Coilgun_Charge_C) == 0x000280, "Member 'UWeaponDisplay_Coilgun_Charge_C::UberGraphFrame_WeaponDisplay_Coilgun_Charge_C' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, AmmoCountDownBlink) == 0x000288, "Member 'UWeaponDisplay_Coilgun_Charge_C::AmmoCountDownBlink' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, AmmoCountDown) == 0x000290, "Member 'UWeaponDisplay_Coilgun_Charge_C::AmmoCountDown' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, TextFadeIn) == 0x000298, "Member 'UWeaponDisplay_Coilgun_Charge_C::TextFadeIn' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Block1) == 0x0002A0, "Member 'UWeaponDisplay_Coilgun_Charge_C::Block1' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Block2) == 0x0002A8, "Member 'UWeaponDisplay_Coilgun_Charge_C::Block2' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Block3) == 0x0002B0, "Member 'UWeaponDisplay_Coilgun_Charge_C::Block3' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Block4) == 0x0002B8, "Member 'UWeaponDisplay_Coilgun_Charge_C::Block4' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Border_12) == 0x0002C0, "Member 'UWeaponDisplay_Coilgun_Charge_C::Border_12' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Border_13) == 0x0002C8, "Member 'UWeaponDisplay_Coilgun_Charge_C::Border_13' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Border_14) == 0x0002D0, "Member 'UWeaponDisplay_Coilgun_Charge_C::Border_14' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Border_15) == 0x0002D8, "Member 'UWeaponDisplay_Coilgun_Charge_C::Border_15' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Border_16) == 0x0002E0, "Member 'UWeaponDisplay_Coilgun_Charge_C::Border_16' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, DATA_AmmoCount) == 0x0002E8, "Member 'UWeaponDisplay_Coilgun_Charge_C::DATA_AmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, DATA_AmmoCount_1) == 0x0002F0, "Member 'UWeaponDisplay_Coilgun_Charge_C::DATA_AmmoCount_1' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Image) == 0x0002F8, "Member 'UWeaponDisplay_Coilgun_Charge_C::Image' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Image_2) == 0x000300, "Member 'UWeaponDisplay_Coilgun_Charge_C::Image_2' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Image_88) == 0x000308, "Member 'UWeaponDisplay_Coilgun_Charge_C::Image_88' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, VerticalBox_Text) == 0x000310, "Member 'UWeaponDisplay_Coilgun_Charge_C::VerticalBox_Text' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, WarningOverlay) == 0x000318, "Member 'UWeaponDisplay_Coilgun_Charge_C::WarningOverlay' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, ChargeColorOff) == 0x000320, "Member 'UWeaponDisplay_Coilgun_Charge_C::ChargeColorOff' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, ChargeColor1) == 0x000330, "Member 'UWeaponDisplay_Coilgun_Charge_C::ChargeColor1' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, LowAmmoThreshold) == 0x000340, "Member 'UWeaponDisplay_Coilgun_Charge_C::LowAmmoThreshold' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, AmmoCritical) == 0x000348, "Member 'UWeaponDisplay_Coilgun_Charge_C::AmmoCritical' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, IsChargeUIVisible) == 0x000350, "Member 'UWeaponDisplay_Coilgun_Charge_C::IsChargeUIVisible' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, TargetAmmoCount) == 0x000354, "Member 'UWeaponDisplay_Coilgun_Charge_C::TargetAmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, OldAmmoCount) == 0x000358, "Member 'UWeaponDisplay_Coilgun_Charge_C::OldAmmoCount' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_Coilgun_Charge_C, Charge_Value) == 0x00035C, "Member 'UWeaponDisplay_Coilgun_Charge_C::Charge_Value' has a wrong offset!");

}

