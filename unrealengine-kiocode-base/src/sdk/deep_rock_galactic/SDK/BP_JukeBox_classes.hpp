#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JukeBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FSD_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JukeBox.BP_JukeBox_C
// 0x00E0 (0x0300 - 0x0220)
class ABP_JukeBox_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_SpaceRig_Jukebox_B;                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget5;                                           // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget4;                                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget3;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget2;                                           // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget1;                                           // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_Display;                                    // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Jukebox;                                           // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DanceSphere;                                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Speaker1;                                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Speaker;                                        // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        JukeBox_Random_Cue;                                // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstantUsable*                         InstantUsable;                                     // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Scale_Transform_97D3E280454882350654EE88E83F3CA7; // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_97D3E280454882350654EE88E83F3CA7; // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_456C[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Use;                                           // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_456D[0x3];                                     // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MusicIndex;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x02BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USoundBase>>      MusicList;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFSDAchievement*                        PartyTimeAchievement;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartyTimeDwarves;                                  // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_456E[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USoundBase>>      SafeMusicList;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LocalMusicIndex;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_JukeBox(int32 EntryPoint);
	void OnSaluteEvent_Event_0();
	void OnStreamerModeChanged(bool NewValue);
	void SetupDisableJukeboxMusic();
	void StopJukebox();
	void Stop_Juke_Box();
	void LoadAndPlay(TSoftObjectPtr<class USoundBase> Music);
	void BndEvt__DanceSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__DanceSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ToggleSpeakerRocking();
	void ReceiveBeginPlay();
	void BndEvt__InstantUsable_K2Node_ComponentBoundEvent_0_UsedBySignature__DelegateSignature(class APlayerCharacter* User, EInputKeys Key);
	void OnLoaded_C15A19DC4718016F57823CA232EE5860(class UObject* Loaded);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void OnRep_MusicIndex();
	void PayCredits(class APlayerCharacter* User, int32 Amount, bool* Purchased);
	void GetAvailableMusic(TArray<TSoftObjectPtr<class USoundBase>>* OutMusicList);
	void UpdateCurrentMusic();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JukeBox_C">();
	}
	static class ABP_JukeBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_JukeBox_C>();
	}
};
static_assert(alignof(ABP_JukeBox_C) == 0x000008, "Wrong alignment on ABP_JukeBox_C");
static_assert(sizeof(ABP_JukeBox_C) == 0x000300, "Wrong size on ABP_JukeBox_C");
static_assert(offsetof(ABP_JukeBox_C, UberGraphFrame) == 0x000220, "Member 'ABP_JukeBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, SM_SpaceRig_Jukebox_B) == 0x000228, "Member 'ABP_JukeBox_C::SM_SpaceRig_Jukebox_B' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Widget5) == 0x000230, "Member 'ABP_JukeBox_C::Widget5' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Widget4) == 0x000238, "Member 'ABP_JukeBox_C::Widget4' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Widget3) == 0x000240, "Member 'ABP_JukeBox_C::Widget3' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Widget2) == 0x000248, "Member 'ABP_JukeBox_C::Widget2' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Widget1) == 0x000250, "Member 'ABP_JukeBox_C::Widget1' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Widget_Display) == 0x000258, "Member 'ABP_JukeBox_C::Widget_Display' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Jukebox) == 0x000260, "Member 'ABP_JukeBox_C::Jukebox' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, DanceSphere) == 0x000268, "Member 'ABP_JukeBox_C::DanceSphere' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, SM_Speaker1) == 0x000270, "Member 'ABP_JukeBox_C::SM_Speaker1' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, SM_Speaker) == 0x000278, "Member 'ABP_JukeBox_C::SM_Speaker' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Box) == 0x000280, "Member 'ABP_JukeBox_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, JukeBox_Random_Cue) == 0x000288, "Member 'ABP_JukeBox_C::JukeBox_Random_Cue' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, InstantUsable) == 0x000290, "Member 'ABP_JukeBox_C::InstantUsable' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_JukeBox_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Timeline_0_Scale_Transform_97D3E280454882350654EE88E83F3CA7) == 0x0002A0, "Member 'ABP_JukeBox_C::Timeline_0_Scale_Transform_97D3E280454882350654EE88E83F3CA7' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Timeline_0__Direction_97D3E280454882350654EE88E83F3CA7) == 0x0002A4, "Member 'ABP_JukeBox_C::Timeline_0__Direction_97D3E280454882350654EE88E83F3CA7' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Timeline_0) == 0x0002A8, "Member 'ABP_JukeBox_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, RotationSpeed) == 0x0002B0, "Member 'ABP_JukeBox_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Can_Use) == 0x0002B4, "Member 'ABP_JukeBox_C::Can_Use' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, MusicIndex) == 0x0002B8, "Member 'ABP_JukeBox_C::MusicIndex' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, Scale) == 0x0002BC, "Member 'ABP_JukeBox_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, MusicList) == 0x0002C8, "Member 'ABP_JukeBox_C::MusicList' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, PartyTimeAchievement) == 0x0002D8, "Member 'ABP_JukeBox_C::PartyTimeAchievement' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, PartyTimeDwarves) == 0x0002E0, "Member 'ABP_JukeBox_C::PartyTimeDwarves' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, SafeMusicList) == 0x0002E8, "Member 'ABP_JukeBox_C::SafeMusicList' has a wrong offset!");
static_assert(offsetof(ABP_JukeBox_C, LocalMusicIndex) == 0x0002F8, "Member 'ABP_JukeBox_C::LocalMusicIndex' has a wrong offset!");

}

