#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ENE_Spider_Boss_Heavy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Spider_Boss_Heavy_State_structs.hpp"
#include "ENE_Spider_Boss_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ENE_Spider_Boss_Heavy.ENE_Spider_Boss_Heavy_C
// 0x00A8 (0x0618 - 0x0570)
class AENE_Spider_Boss_Heavy_C final : public AENE_Spider_Boss_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ENE_Spider_Boss_Heavy_C;            // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      Capsule;                                           // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeleeAttackComponent*                  CarveAttack;                                       // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWeakpointGlowComponent*                WeakpointGlow;                                     // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Weakspot_C;                                        // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Weakspot_L;                                        // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Weakspot_R;                                        // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileAttackComponent*             ProjectileFireball;                                // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeleeAttackComponent*                  MeleeAttack1;                                      // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageComponent*                       SpecialAttackAoE;                                  // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEnemyTemperatureReplicatorComponent*   EnemyTemperatureReplicator;                        // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHealthDamageTracker*                   HealthDamageTracker;                               // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleSubHealthComponent*        WeakspotHealth_L;                                  // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpawnActorWithDebrisPosComponent*      SpecialAttackSpawn;                                // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleSubHealthComponent*        WeakspotHealth_C;                                  // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleSubHealthComponent*        WeakspotHealth_R;                                  // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAlignEnemyComponent*                   AlignEnemy;                                        // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ESpider_Boss_Heavy_State                      HeavyTankState;                                    // 0x05F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BCB[0x7];                                     // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      WhirlwindParticles;                                // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnStateChanged;                                    // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void SetupWeakspotGlow();
	void TrySelectDeathAnimation(bool WasWeakpoint, int32* AnimationIndex, bool* HasSelectedAnimation);
	void SetArmorMeshState(bool ArmorOpen);
	bool ShouldExplode(TArray<class UDamageTag*>& Param_Tags);
	void OnRep_HeavyTankState();
	bool IsArmorIntact();
	void SetWeakpointVisibility(bool Visible, class UDestructibleSubHealthComponent* Health);
	void ReceiveBeginPlay();
	void BndEvt__DestructibleSubHealth_K2Node_ComponentBoundEvent_0_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* SubHealth);
	void BndEvt__DestructibleSubHealth1_K2Node_ComponentBoundEvent_1_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* SubHealth);
	void StartSpecialAttack();
	void ForceVulnerable();
	void BndEvt__DestructibleSubHealth2_K2Node_ComponentBoundEvent_2_SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* SubHealth);
	void OnMessageAI(class FName TriggerName);
	void OnRagdoll();
	void BndEvt__HealthDamageTracker_K2Node_ComponentBoundEvent_3_DamageSig__DelegateSignature(float Amount);
	void GrowWeakpoints();
	void PlayAnimatedDeath(int32 AnimationIndex);
	void ForceEnraged();
	void OnDeathBase();
	void SpawnProjectile(TSubclassOf<class AActor> Actor, const struct FTransform& Transform);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset);
	void ExecuteUbergraph_ENE_Spider_Boss_Heavy(int32 EntryPoint);
	void OnStateChanged__DelegateSignature(ESpider_Boss_Heavy_State State);

	bool GetIsTargetable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ENE_Spider_Boss_Heavy_C">();
	}
	static class AENE_Spider_Boss_Heavy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AENE_Spider_Boss_Heavy_C>();
	}
};
static_assert(alignof(AENE_Spider_Boss_Heavy_C) == 0x000008, "Wrong alignment on AENE_Spider_Boss_Heavy_C");
static_assert(sizeof(AENE_Spider_Boss_Heavy_C) == 0x000618, "Wrong size on AENE_Spider_Boss_Heavy_C");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, UberGraphFrame_ENE_Spider_Boss_Heavy_C) == 0x000570, "Member 'AENE_Spider_Boss_Heavy_C::UberGraphFrame_ENE_Spider_Boss_Heavy_C' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, Capsule) == 0x000578, "Member 'AENE_Spider_Boss_Heavy_C::Capsule' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, CarveAttack) == 0x000580, "Member 'AENE_Spider_Boss_Heavy_C::CarveAttack' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, WeakpointGlow) == 0x000588, "Member 'AENE_Spider_Boss_Heavy_C::WeakpointGlow' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, Weakspot_C) == 0x000590, "Member 'AENE_Spider_Boss_Heavy_C::Weakspot_C' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, Weakspot_L) == 0x000598, "Member 'AENE_Spider_Boss_Heavy_C::Weakspot_L' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, Weakspot_R) == 0x0005A0, "Member 'AENE_Spider_Boss_Heavy_C::Weakspot_R' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, ProjectileFireball) == 0x0005A8, "Member 'AENE_Spider_Boss_Heavy_C::ProjectileFireball' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, MeleeAttack1) == 0x0005B0, "Member 'AENE_Spider_Boss_Heavy_C::MeleeAttack1' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, SpecialAttackAoE) == 0x0005B8, "Member 'AENE_Spider_Boss_Heavy_C::SpecialAttackAoE' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, EnemyTemperatureReplicator) == 0x0005C0, "Member 'AENE_Spider_Boss_Heavy_C::EnemyTemperatureReplicator' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, HealthDamageTracker) == 0x0005C8, "Member 'AENE_Spider_Boss_Heavy_C::HealthDamageTracker' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, WeakspotHealth_L) == 0x0005D0, "Member 'AENE_Spider_Boss_Heavy_C::WeakspotHealth_L' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, SpecialAttackSpawn) == 0x0005D8, "Member 'AENE_Spider_Boss_Heavy_C::SpecialAttackSpawn' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, WeakspotHealth_C) == 0x0005E0, "Member 'AENE_Spider_Boss_Heavy_C::WeakspotHealth_C' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, WeakspotHealth_R) == 0x0005E8, "Member 'AENE_Spider_Boss_Heavy_C::WeakspotHealth_R' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, AlignEnemy) == 0x0005F0, "Member 'AENE_Spider_Boss_Heavy_C::AlignEnemy' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, HeavyTankState) == 0x0005F8, "Member 'AENE_Spider_Boss_Heavy_C::HeavyTankState' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, WhirlwindParticles) == 0x000600, "Member 'AENE_Spider_Boss_Heavy_C::WhirlwindParticles' has a wrong offset!");
static_assert(offsetof(AENE_Spider_Boss_Heavy_C, OnStateChanged) == 0x000608, "Member 'AENE_Spider_Boss_Heavy_C::OnStateChanged' has a wrong offset!");

}

