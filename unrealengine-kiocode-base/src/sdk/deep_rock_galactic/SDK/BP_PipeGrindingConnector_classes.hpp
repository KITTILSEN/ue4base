#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PipeGrindingConnector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FSD_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PipeGrindingConnector.BP_PipeGrindingConnector_C
// 0x0040 (0x0290 - 0x0250)
class ABP_PipeGrindingConnector_C final : public AZipLineConnector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight2;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BalancingBoard_01;                              // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_ZipLine_Connect;                                 // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Zipline_Sparks;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ConnectorMesh;                                     // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PipeGrindingConnector(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UpdateLocation(const struct FVector& Location, const struct FVector& Direction);
	void ReceiveUpdateZipLinePoint(const struct FVector& WorldLocation, const struct FVector& Directioy, bool Speeding);
	void ReceiveDisconnected();
	void ReceiveConnected(const struct FVector& WorldLocation, const struct FVector& Direction);
	void SetConnectorVisible(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PipeGrindingConnector_C">();
	}
	static class ABP_PipeGrindingConnector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PipeGrindingConnector_C>();
	}
};
static_assert(alignof(ABP_PipeGrindingConnector_C) == 0x000008, "Wrong alignment on ABP_PipeGrindingConnector_C");
static_assert(sizeof(ABP_PipeGrindingConnector_C) == 0x000290, "Wrong size on ABP_PipeGrindingConnector_C");
static_assert(offsetof(ABP_PipeGrindingConnector_C, UberGraphFrame) == 0x000250, "Member 'ABP_PipeGrindingConnector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, SpotLight2) == 0x000258, "Member 'ABP_PipeGrindingConnector_C::SpotLight2' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, SpotLight1) == 0x000260, "Member 'ABP_PipeGrindingConnector_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, SM_BalancingBoard_01) == 0x000268, "Member 'ABP_PipeGrindingConnector_C::SM_BalancingBoard_01' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, P_ZipLine_Connect) == 0x000270, "Member 'ABP_PipeGrindingConnector_C::P_ZipLine_Connect' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, P_Zipline_Sparks) == 0x000278, "Member 'ABP_PipeGrindingConnector_C::P_Zipline_Sparks' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, ConnectorMesh) == 0x000280, "Member 'ABP_PipeGrindingConnector_C::ConnectorMesh' has a wrong offset!");
static_assert(offsetof(ABP_PipeGrindingConnector_C, DefaultSceneRoot) == 0x000288, "Member 'ABP_PipeGrindingConnector_C::DefaultSceneRoot' has a wrong offset!");

}

