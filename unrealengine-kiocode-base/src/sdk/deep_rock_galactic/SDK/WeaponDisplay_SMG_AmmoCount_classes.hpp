#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponDisplay_SMG_AmmoCount

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WeaponDisplay_Base_AmmoCount_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WeaponDisplay_SMG_AmmoCount.WeaponDisplay_SMG_AmmoCount_C
// 0x0028 (0x02A8 - 0x0280)
class UWeaponDisplay_SMG_AmmoCount_C final : public UWeaponDisplay_Base_AmmoCount_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WeaponDisplay_SMG_AmmoCount_C;      // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Fire;                                              // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             DATA_AmmoCurrent;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DATA_AmmoTotal;                                    // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Loading;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void SetTotalCount(int32 Value);
	void SetClipCount(int32 Value);
	void Construct();
	void ExecuteUbergraph_WeaponDisplay_SMG_AmmoCount(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WeaponDisplay_SMG_AmmoCount_C">();
	}
	static class UWeaponDisplay_SMG_AmmoCount_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponDisplay_SMG_AmmoCount_C>();
	}
};
static_assert(alignof(UWeaponDisplay_SMG_AmmoCount_C) == 0x000008, "Wrong alignment on UWeaponDisplay_SMG_AmmoCount_C");
static_assert(sizeof(UWeaponDisplay_SMG_AmmoCount_C) == 0x0002A8, "Wrong size on UWeaponDisplay_SMG_AmmoCount_C");
static_assert(offsetof(UWeaponDisplay_SMG_AmmoCount_C, UberGraphFrame_WeaponDisplay_SMG_AmmoCount_C) == 0x000280, "Member 'UWeaponDisplay_SMG_AmmoCount_C::UberGraphFrame_WeaponDisplay_SMG_AmmoCount_C' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_SMG_AmmoCount_C, Fire) == 0x000288, "Member 'UWeaponDisplay_SMG_AmmoCount_C::Fire' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_SMG_AmmoCount_C, DATA_AmmoCurrent) == 0x000290, "Member 'UWeaponDisplay_SMG_AmmoCount_C::DATA_AmmoCurrent' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_SMG_AmmoCount_C, DATA_AmmoTotal) == 0x000298, "Member 'UWeaponDisplay_SMG_AmmoCount_C::DATA_AmmoTotal' has a wrong offset!");
static_assert(offsetof(UWeaponDisplay_SMG_AmmoCount_C, TXT_Loading) == 0x0002A0, "Member 'UWeaponDisplay_SMG_AmmoCount_C::TXT_Loading' has a wrong offset!");

}

