#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ProgressBar

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_ProgressBar.UI_ProgressBar_C.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct UI_ProgressBar_C_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ProgressBar_C_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on UI_ProgressBar_C_SetFillColorAndOpacity");
static_assert(sizeof(UI_ProgressBar_C_SetFillColorAndOpacity) == 0x000010, "Wrong size on UI_ProgressBar_C_SetFillColorAndOpacity");
static_assert(offsetof(UI_ProgressBar_C_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'UI_ProgressBar_C_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function UI_ProgressBar.UI_ProgressBar_C.SetStyle
// 0x01A0 (0x01A0 - 0x0000)
struct UI_ProgressBar_C_SetStyle final
{
public:
	struct FProgressBarStyle                      InStyle;                                           // 0x0000(0x01A0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(UI_ProgressBar_C_SetStyle) == 0x000008, "Wrong alignment on UI_ProgressBar_C_SetStyle");
static_assert(sizeof(UI_ProgressBar_C_SetStyle) == 0x0001A0, "Wrong size on UI_ProgressBar_C_SetStyle");
static_assert(offsetof(UI_ProgressBar_C_SetStyle, InStyle) == 0x000000, "Member 'UI_ProgressBar_C_SetStyle::InStyle' has a wrong offset!");

// Function UI_ProgressBar.UI_ProgressBar_C.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct UI_ProgressBar_C_GetPercent final
{
public:
	float                                         OutPercent;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ProgressBar_C_GetPercent) == 0x000004, "Wrong alignment on UI_ProgressBar_C_GetPercent");
static_assert(sizeof(UI_ProgressBar_C_GetPercent) == 0x000004, "Wrong size on UI_ProgressBar_C_GetPercent");
static_assert(offsetof(UI_ProgressBar_C_GetPercent, OutPercent) == 0x000000, "Member 'UI_ProgressBar_C_GetPercent::OutPercent' has a wrong offset!");

// Function UI_ProgressBar.UI_ProgressBar_C.SetPercent
// 0x0038 (0x0038 - 0x0000)
struct UI_ProgressBar_C_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InEaseDuration;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceEase;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D0F[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Diff;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D10[0x2];                                      // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D11[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ProgressBar_C_SetPercent) == 0x000008, "Wrong alignment on UI_ProgressBar_C_SetPercent");
static_assert(sizeof(UI_ProgressBar_C_SetPercent) == 0x000038, "Wrong size on UI_ProgressBar_C_SetPercent");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, InPercent) == 0x000000, "Member 'UI_ProgressBar_C_SetPercent::InPercent' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, InEaseDuration) == 0x000004, "Member 'UI_ProgressBar_C_SetPercent::InEaseDuration' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, ForceEase) == 0x000008, "Member 'UI_ProgressBar_C_SetPercent::ForceEase' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, Diff) == 0x00000C, "Member 'UI_ProgressBar_C_SetPercent::Diff' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, Temp_bool_Variable) == 0x000010, "Member 'UI_ProgressBar_C_SetPercent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000011, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, K2Node_Select_Default) == 0x000020, "Member 'UI_ProgressBar_C_SetPercent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_PlayAnimationForward_ReturnValue) == 0x000028, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000031, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetPercent, CallFunc_BooleanOR_ReturnValue) == 0x000033, "Member 'UI_ProgressBar_C_SetPercent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function UI_ProgressBar.UI_ProgressBar_C.SetAnimationProgress
// 0x0008 (0x0008 - 0x0000)
struct UI_ProgressBar_C_SetAnimationProgress final
{
public:
	float                                         Param_AnimationProgress;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ProgressBar_C_SetAnimationProgress) == 0x000004, "Wrong alignment on UI_ProgressBar_C_SetAnimationProgress");
static_assert(sizeof(UI_ProgressBar_C_SetAnimationProgress) == 0x000008, "Wrong size on UI_ProgressBar_C_SetAnimationProgress");
static_assert(offsetof(UI_ProgressBar_C_SetAnimationProgress, Param_AnimationProgress) == 0x000000, "Member 'UI_ProgressBar_C_SetAnimationProgress::Param_AnimationProgress' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_SetAnimationProgress, CallFunc_Ease_ReturnValue) == 0x000004, "Member 'UI_ProgressBar_C_SetAnimationProgress::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function UI_ProgressBar.UI_ProgressBar_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_ProgressBar_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ProgressBar_C_PreConstruct) == 0x000001, "Wrong alignment on UI_ProgressBar_C_PreConstruct");
static_assert(sizeof(UI_ProgressBar_C_PreConstruct) == 0x000001, "Wrong size on UI_ProgressBar_C_PreConstruct");
static_assert(offsetof(UI_ProgressBar_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_ProgressBar_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_ProgressBar.UI_ProgressBar_C.ExecuteUbergraph_UI_ProgressBar
// 0x0008 (0x0008 - 0x0000)
struct UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar) == 0x000004, "Wrong alignment on UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar");
static_assert(sizeof(UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar) == 0x000008, "Wrong size on UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar");
static_assert(offsetof(UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar, EntryPoint) == 0x000000, "Member 'UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_ProgressBar_C_ExecuteUbergraph_UI_ProgressBar::K2Node_Event_IsDesignTime' has a wrong offset!");

}

