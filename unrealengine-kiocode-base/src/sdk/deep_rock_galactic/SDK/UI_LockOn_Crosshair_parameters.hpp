#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_LockOn_Crosshair

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UI_LockOn_Crosshair.UI_LockOn_Crosshair_C.SetCircleVisible
// 0x0004 (0x0004 - 0x0000)
struct UI_LockOn_Crosshair_C_SetCircleVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_IsVisible;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SelectVisibility_VisibilityChanged;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_SelectVisibility_New_Visibility;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_LockOn_Crosshair_C_SetCircleVisible) == 0x000001, "Wrong alignment on UI_LockOn_Crosshair_C_SetCircleVisible");
static_assert(sizeof(UI_LockOn_Crosshair_C_SetCircleVisible) == 0x000004, "Wrong size on UI_LockOn_Crosshair_C_SetCircleVisible");
static_assert(offsetof(UI_LockOn_Crosshair_C_SetCircleVisible, InVisible) == 0x000000, "Member 'UI_LockOn_Crosshair_C_SetCircleVisible::InVisible' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_SetCircleVisible, CallFunc_SelectVisibility_IsVisible) == 0x000001, "Member 'UI_LockOn_Crosshair_C_SetCircleVisible::CallFunc_SelectVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_SetCircleVisible, CallFunc_SelectVisibility_VisibilityChanged) == 0x000002, "Member 'UI_LockOn_Crosshair_C_SetCircleVisible::CallFunc_SelectVisibility_VisibilityChanged' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_SetCircleVisible, CallFunc_SelectVisibility_New_Visibility) == 0x000003, "Member 'UI_LockOn_Crosshair_C_SetCircleVisible::CallFunc_SelectVisibility_New_Visibility' has a wrong offset!");

// Function UI_LockOn_Crosshair.UI_LockOn_Crosshair_C.SetAngle
// 0x0008 (0x0008 - 0x0000)
struct UI_LockOn_Crosshair_C_SetAngle final
{
public:
	float                                         Param_Angle;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_LockOn_Crosshair_C_SetAngle) == 0x000004, "Wrong alignment on UI_LockOn_Crosshair_C_SetAngle");
static_assert(sizeof(UI_LockOn_Crosshair_C_SetAngle) == 0x000008, "Wrong size on UI_LockOn_Crosshair_C_SetAngle");
static_assert(offsetof(UI_LockOn_Crosshair_C_SetAngle, Param_Angle) == 0x000000, "Member 'UI_LockOn_Crosshair_C_SetAngle::Param_Angle' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_SetAngle, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'UI_LockOn_Crosshair_C_SetAngle::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function UI_LockOn_Crosshair.UI_LockOn_Crosshair_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_LockOn_Crosshair_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_LockOn_Crosshair_C_PreConstruct) == 0x000001, "Wrong alignment on UI_LockOn_Crosshair_C_PreConstruct");
static_assert(sizeof(UI_LockOn_Crosshair_C_PreConstruct) == 0x000001, "Wrong size on UI_LockOn_Crosshair_C_PreConstruct");
static_assert(offsetof(UI_LockOn_Crosshair_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_LockOn_Crosshair_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_LockOn_Crosshair.UI_LockOn_Crosshair_C.Ping
// 0x0004 (0x0004 - 0x0000)
struct UI_LockOn_Crosshair_C_Ping final
{
public:
	float                                         PlaybackSpeed;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_LockOn_Crosshair_C_Ping) == 0x000004, "Wrong alignment on UI_LockOn_Crosshair_C_Ping");
static_assert(sizeof(UI_LockOn_Crosshair_C_Ping) == 0x000004, "Wrong size on UI_LockOn_Crosshair_C_Ping");
static_assert(offsetof(UI_LockOn_Crosshair_C_Ping, PlaybackSpeed) == 0x000000, "Member 'UI_LockOn_Crosshair_C_Ping::PlaybackSpeed' has a wrong offset!");

// Function UI_LockOn_Crosshair.UI_LockOn_Crosshair_C.ExecuteUbergraph_UI_LockOn_Crosshair
// 0x0018 (0x0018 - 0x0000)
struct UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E38[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_PlaybackSpeed;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E39[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair) == 0x000008, "Wrong alignment on UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair");
static_assert(sizeof(UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair) == 0x000018, "Wrong size on UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair");
static_assert(offsetof(UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair, EntryPoint) == 0x000000, "Member 'UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair, K2Node_CustomEvent_PlaybackSpeed) == 0x000008, "Member 'UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair::K2Node_CustomEvent_PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'UI_LockOn_Crosshair_C_ExecuteUbergraph_UI_LockOn_Crosshair::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

}

