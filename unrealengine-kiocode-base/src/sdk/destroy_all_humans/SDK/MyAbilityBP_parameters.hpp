#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MyAbilityBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MyAbilityBP.MyAbilityBP_C.DecreasCooldown
// 0x0008 (0x0008 - 0x0000)
struct MyAbilityBP_C_DecreasCooldown final
{
public:
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_DecreasCooldown) == 0x000004, "Wrong alignment on MyAbilityBP_C_DecreasCooldown");
static_assert(sizeof(MyAbilityBP_C_DecreasCooldown) == 0x000008, "Wrong size on MyAbilityBP_C_DecreasCooldown");
static_assert(offsetof(MyAbilityBP_C_DecreasCooldown, CallFunc_Greater_IntInt_ReturnValue) == 0x000000, "Member 'MyAbilityBP_C_DecreasCooldown::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_DecreasCooldown, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'MyAbilityBP_C_DecreasCooldown::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.ExecuteUbergraph_MyAbilityBP
// 0x0004 (0x0004 - 0x0000)
struct MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP) == 0x000004, "Wrong alignment on MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP");
static_assert(sizeof(MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP) == 0x000004, "Wrong size on MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP");
static_assert(offsetof(MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP, EntryPoint) == 0x000000, "Member 'MyAbilityBP_C_ExecuteUbergraph_MyAbilityBP::EntryPoint' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.GetCooldown
// 0x0004 (0x0004 - 0x0000)
struct MyAbilityBP_C_GetCooldown final
{
public:
	int32                                         Output;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_GetCooldown) == 0x000004, "Wrong alignment on MyAbilityBP_C_GetCooldown");
static_assert(sizeof(MyAbilityBP_C_GetCooldown) == 0x000004, "Wrong size on MyAbilityBP_C_GetCooldown");
static_assert(offsetof(MyAbilityBP_C_GetCooldown, Output) == 0x000000, "Member 'MyAbilityBP_C_GetCooldown::Output' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.OnEnd
// 0x0038 (0x0038 - 0x0000)
struct MyAbilityBP_C_OnEnd final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         K2Node_DynamicCast_AsMy_Character;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHUDWIdget_C*                           CallFunc_GetHUD_HUD;                               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AAlliedCharacter_C*                     K2Node_DynamicCast_AsAllied_Character;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_OnEnd) == 0x000008, "Wrong alignment on MyAbilityBP_C_OnEnd");
static_assert(sizeof(MyAbilityBP_C_OnEnd) == 0x000038, "Wrong size on MyAbilityBP_C_OnEnd");
static_assert(offsetof(MyAbilityBP_C_OnEnd, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'MyAbilityBP_C_OnEnd::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_OnEnd, CallFunc_GetRefMgr_RefMgr) == 0x000008, "Member 'MyAbilityBP_C_OnEnd::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_OnEnd, K2Node_DynamicCast_AsMy_Character) == 0x000010, "Member 'MyAbilityBP_C_OnEnd::K2Node_DynamicCast_AsMy_Character' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_OnEnd, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'MyAbilityBP_C_OnEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_OnEnd, CallFunc_GetHUD_HUD) == 0x000020, "Member 'MyAbilityBP_C_OnEnd::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_OnEnd, K2Node_DynamicCast_AsAllied_Character) == 0x000028, "Member 'MyAbilityBP_C_OnEnd::K2Node_DynamicCast_AsAllied_Character' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_OnEnd, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'MyAbilityBP_C_OnEnd::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.PreDisplayTarget
// 0x0018 (0x0018 - 0x0000)
struct MyAbilityBP_C_PreDisplayTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_PreDisplayTarget) == 0x000008, "Wrong alignment on MyAbilityBP_C_PreDisplayTarget");
static_assert(sizeof(MyAbilityBP_C_PreDisplayTarget) == 0x000018, "Wrong size on MyAbilityBP_C_PreDisplayTarget");
static_assert(offsetof(MyAbilityBP_C_PreDisplayTarget, Target) == 0x000000, "Member 'MyAbilityBP_C_PreDisplayTarget::Target' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.SetCooldown
// 0x0004 (0x0004 - 0x0000)
struct MyAbilityBP_C_SetCooldown final
{
public:
	int32                                         Input;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_SetCooldown) == 0x000004, "Wrong alignment on MyAbilityBP_C_SetCooldown");
static_assert(sizeof(MyAbilityBP_C_SetCooldown) == 0x000004, "Wrong size on MyAbilityBP_C_SetCooldown");
static_assert(offsetof(MyAbilityBP_C_SetCooldown, Input) == 0x000000, "Member 'MyAbilityBP_C_SetCooldown::Input' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.Unselect
// 0x0010 (0x0010 - 0x0000)
struct MyAbilityBP_C_Unselect final
{
public:
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHUDWIdget_C*                           CallFunc_GetHUD_HUD;                               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_Unselect) == 0x000008, "Wrong alignment on MyAbilityBP_C_Unselect");
static_assert(sizeof(MyAbilityBP_C_Unselect) == 0x000010, "Wrong size on MyAbilityBP_C_Unselect");
static_assert(offsetof(MyAbilityBP_C_Unselect, CallFunc_GetRefMgr_RefMgr) == 0x000000, "Member 'MyAbilityBP_C_Unselect::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_Unselect, CallFunc_GetHUD_HUD) == 0x000008, "Member 'MyAbilityBP_C_Unselect::CallFunc_GetHUD_HUD' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.UpdateCooldownHUD
// 0x0028 (0x0028 - 0x0000)
struct MyAbilityBP_C_UpdateCooldownHUD final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAlliedCharacter_C*                     K2Node_DynamicCast_AsAllied_Character;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25CA[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHUDWIdget_C*                           CallFunc_GetHUD_HUD;                               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_UpdateCooldownHUD) == 0x000008, "Wrong alignment on MyAbilityBP_C_UpdateCooldownHUD");
static_assert(sizeof(MyAbilityBP_C_UpdateCooldownHUD) == 0x000028, "Wrong size on MyAbilityBP_C_UpdateCooldownHUD");
static_assert(offsetof(MyAbilityBP_C_UpdateCooldownHUD, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'MyAbilityBP_C_UpdateCooldownHUD::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_UpdateCooldownHUD, K2Node_DynamicCast_AsAllied_Character) == 0x000008, "Member 'MyAbilityBP_C_UpdateCooldownHUD::K2Node_DynamicCast_AsAllied_Character' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_UpdateCooldownHUD, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'MyAbilityBP_C_UpdateCooldownHUD::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_UpdateCooldownHUD, CallFunc_GetRefMgr_RefMgr) == 0x000018, "Member 'MyAbilityBP_C_UpdateCooldownHUD::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_UpdateCooldownHUD, CallFunc_GetHUD_HUD) == 0x000020, "Member 'MyAbilityBP_C_UpdateCooldownHUD::CallFunc_GetHUD_HUD' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.Use
// 0x0030 (0x0030 - 0x0000)
struct MyAbilityBP_C_Use final
{
public:
	struct FVector                                AbilityTarget;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         K2Node_DynamicCast_AsMy_Character;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_Use) == 0x000008, "Wrong alignment on MyAbilityBP_C_Use");
static_assert(sizeof(MyAbilityBP_C_Use) == 0x000030, "Wrong size on MyAbilityBP_C_Use");
static_assert(offsetof(MyAbilityBP_C_Use, AbilityTarget) == 0x000000, "Member 'MyAbilityBP_C_Use::AbilityTarget' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_Use, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'MyAbilityBP_C_Use::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_Use, K2Node_DynamicCast_AsMy_Character) == 0x000020, "Member 'MyAbilityBP_C_Use::K2Node_DynamicCast_AsMy_Character' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_Use, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'MyAbilityBP_C_Use::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function MyAbilityBP.MyAbilityBP_C.ValidateTarget
// 0x0020 (0x0020 - 0x0000)
struct MyAbilityBP_C_ValidateTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyAbilityBP_C_ValidateTarget) == 0x000008, "Wrong alignment on MyAbilityBP_C_ValidateTarget");
static_assert(sizeof(MyAbilityBP_C_ValidateTarget) == 0x000020, "Wrong size on MyAbilityBP_C_ValidateTarget");
static_assert(offsetof(MyAbilityBP_C_ValidateTarget, Target) == 0x000000, "Member 'MyAbilityBP_C_ValidateTarget::Target' has a wrong offset!");
static_assert(offsetof(MyAbilityBP_C_ValidateTarget, Valid_) == 0x000018, "Member 'MyAbilityBP_C_ValidateTarget::Valid_' has a wrong offset!");

}

