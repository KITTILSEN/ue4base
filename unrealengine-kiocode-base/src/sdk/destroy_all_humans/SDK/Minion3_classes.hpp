#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minion3

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AlliedCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Minion3.Minion3_C
// 0x0068 (0x0460 - 0x03F8)
class AMinion3_C final : public AAlliedCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Minion3_C;                          // 0x03F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   ProjectileSpawnLocation;                           // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CauldronBloodParticles;                            // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CauldronOverflow_FX;                               // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAreaHealAbility_C*                     AreaHealAbility;                                   // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHealAbility_C*                         HealAbility;                                       // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CauldronSpoon_002;                              // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStandardAttack_C*                      StandardAttack;                                    // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayOverflow;                                 // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2698[0x3];                                     // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PassiveHeal;                                       // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayHeal;                                     // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2699[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MyMat;                                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeathTimer;                                        // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToStartDesintegrating;                          // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Minion3(int32 EntryPoint);
	void GetDeselected();
	void GetSelected();
	void HideAvailableActions();
	void LaunchProjectile();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ShowAvailableActions();
	void UsePassive();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Minion3_C">();
	}
	static class AMinion3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinion3_C>();
	}
};
static_assert(alignof(AMinion3_C) == 0x000008, "Wrong alignment on AMinion3_C");
static_assert(sizeof(AMinion3_C) == 0x000460, "Wrong size on AMinion3_C");
static_assert(offsetof(AMinion3_C, UberGraphFrame_Minion3_C) == 0x0003F8, "Member 'AMinion3_C::UberGraphFrame_Minion3_C' has a wrong offset!");
static_assert(offsetof(AMinion3_C, ProjectileSpawnLocation) == 0x000400, "Member 'AMinion3_C::ProjectileSpawnLocation' has a wrong offset!");
static_assert(offsetof(AMinion3_C, CauldronBloodParticles) == 0x000408, "Member 'AMinion3_C::CauldronBloodParticles' has a wrong offset!");
static_assert(offsetof(AMinion3_C, CauldronOverflow_FX) == 0x000410, "Member 'AMinion3_C::CauldronOverflow_FX' has a wrong offset!");
static_assert(offsetof(AMinion3_C, AreaHealAbility) == 0x000418, "Member 'AMinion3_C::AreaHealAbility' has a wrong offset!");
static_assert(offsetof(AMinion3_C, HealAbility) == 0x000420, "Member 'AMinion3_C::HealAbility' has a wrong offset!");
static_assert(offsetof(AMinion3_C, SM_CauldronSpoon_002) == 0x000428, "Member 'AMinion3_C::SM_CauldronSpoon_002' has a wrong offset!");
static_assert(offsetof(AMinion3_C, StandardAttack) == 0x000430, "Member 'AMinion3_C::StandardAttack' has a wrong offset!");
static_assert(offsetof(AMinion3_C, HasToPlayOverflow) == 0x000438, "Member 'AMinion3_C::HasToPlayOverflow' has a wrong offset!");
static_assert(offsetof(AMinion3_C, PassiveHeal) == 0x00043C, "Member 'AMinion3_C::PassiveHeal' has a wrong offset!");
static_assert(offsetof(AMinion3_C, HasToPlayHeal) == 0x000440, "Member 'AMinion3_C::HasToPlayHeal' has a wrong offset!");
static_assert(offsetof(AMinion3_C, MyMat) == 0x000448, "Member 'AMinion3_C::MyMat' has a wrong offset!");
static_assert(offsetof(AMinion3_C, DeathTimer) == 0x000450, "Member 'AMinion3_C::DeathTimer' has a wrong offset!");
static_assert(offsetof(AMinion3_C, HasToStartDesintegrating) == 0x000458, "Member 'AMinion3_C::HasToStartDesintegrating' has a wrong offset!");

}

