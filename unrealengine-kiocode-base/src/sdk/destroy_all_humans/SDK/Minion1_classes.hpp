#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minion1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AlliedCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Minion1.Minion1_C
// 0x0070 (0x0468 - 0x03F8)
class AMinion1_C final : public AAlliedCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Minion1_C;                          // 0x03F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Passive_FX;                                        // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TauntedStatusParticles;                            // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKnifeThrowAbility_C*                   KnifeThrowAbility;                                 // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      BloodParticles;                                    // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      ShadowstepSmokeEnd;                                // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      ShadowstepSmoke_Start;                             // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Dagger;                                            // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDashAttack_C*                          ShadowStep;                                        // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStandardAttack_C*                      StandardAttack;                                    // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayShadowStep;                               // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayKnifeThrow;                               // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MHasPasiveActivated;                               // 0x044A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2766[0x5];                                     // 0x044B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MyMat;                                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeathTimer;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToStartDesintegrate;                            // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Minion1(int32 EntryPoint);
	void GetDeselected();
	void GetSelected();
	void HideAvailableActions();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetPassive();
	void ShowAvailableActions();
	void UsePassive();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Minion1_C">();
	}
	static class AMinion1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinion1_C>();
	}
};
static_assert(alignof(AMinion1_C) == 0x000008, "Wrong alignment on AMinion1_C");
static_assert(sizeof(AMinion1_C) == 0x000468, "Wrong size on AMinion1_C");
static_assert(offsetof(AMinion1_C, UberGraphFrame_Minion1_C) == 0x0003F8, "Member 'AMinion1_C::UberGraphFrame_Minion1_C' has a wrong offset!");
static_assert(offsetof(AMinion1_C, Passive_FX) == 0x000400, "Member 'AMinion1_C::Passive_FX' has a wrong offset!");
static_assert(offsetof(AMinion1_C, TauntedStatusParticles) == 0x000408, "Member 'AMinion1_C::TauntedStatusParticles' has a wrong offset!");
static_assert(offsetof(AMinion1_C, KnifeThrowAbility) == 0x000410, "Member 'AMinion1_C::KnifeThrowAbility' has a wrong offset!");
static_assert(offsetof(AMinion1_C, BloodParticles) == 0x000418, "Member 'AMinion1_C::BloodParticles' has a wrong offset!");
static_assert(offsetof(AMinion1_C, ShadowstepSmokeEnd) == 0x000420, "Member 'AMinion1_C::ShadowstepSmokeEnd' has a wrong offset!");
static_assert(offsetof(AMinion1_C, ShadowstepSmoke_Start) == 0x000428, "Member 'AMinion1_C::ShadowstepSmoke_Start' has a wrong offset!");
static_assert(offsetof(AMinion1_C, Dagger) == 0x000430, "Member 'AMinion1_C::Dagger' has a wrong offset!");
static_assert(offsetof(AMinion1_C, ShadowStep) == 0x000438, "Member 'AMinion1_C::ShadowStep' has a wrong offset!");
static_assert(offsetof(AMinion1_C, StandardAttack) == 0x000440, "Member 'AMinion1_C::StandardAttack' has a wrong offset!");
static_assert(offsetof(AMinion1_C, HasToPlayShadowStep) == 0x000448, "Member 'AMinion1_C::HasToPlayShadowStep' has a wrong offset!");
static_assert(offsetof(AMinion1_C, HasToPlayKnifeThrow) == 0x000449, "Member 'AMinion1_C::HasToPlayKnifeThrow' has a wrong offset!");
static_assert(offsetof(AMinion1_C, MHasPasiveActivated) == 0x00044A, "Member 'AMinion1_C::MHasPasiveActivated' has a wrong offset!");
static_assert(offsetof(AMinion1_C, MyMat) == 0x000450, "Member 'AMinion1_C::MyMat' has a wrong offset!");
static_assert(offsetof(AMinion1_C, DeathTimer) == 0x000458, "Member 'AMinion1_C::DeathTimer' has a wrong offset!");
static_assert(offsetof(AMinion1_C, HasToStartDesintegrate) == 0x000460, "Member 'AMinion1_C::HasToStartDesintegrate' has a wrong offset!");

}

