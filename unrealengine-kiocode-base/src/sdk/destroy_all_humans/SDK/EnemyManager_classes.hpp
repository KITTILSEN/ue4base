#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnemyManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "MissionTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EnemyManager.EnemyManager_C
// 0x00C0 (0x0350 - 0x0290)
class AEnemyManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          MMyTurn;                                           // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2653[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         MEnemies;                                          // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AStandardEnemy_C*>               MStandardEnemies;                                  // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ARangedEnemy_C*>                 MRangedEnemies;                                    // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AExplosiveEnemy_C*>              MExplosiveEnemies;                                 // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Timer;                                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTimer;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SpawnerPositions;                                  // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TurnsSinceLastSpawn;                               // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTurnsToSpawn;                                   // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnerActive;                                     // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTutorial;                                        // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReachedExit;                                       // 0x0312(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMissionTypes                                 MissionType;                                       // 0x0313(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2654[0x4];                                     // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelID_C*                             LevelIDRef;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnsToSurvive;                                    // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2655[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASpawner_C*>                     SpawnerObjects;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        InitialEggGlowFreq;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStandardEnemy_C*                       FinalEnemy;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AKnoM_C*                                KnoM;                                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddSpawnerPosition(int32 X, int32 Y);
	class AExplosiveEnemy_C* CreateExplosiveEnemy(const struct FVector& Pos, int32 StartX, int32 StartY);
	class ARangedEnemy_C* CreateRangedEnemy(const struct FVector& Pos, int32 Start0X, int32 Start0Y);
	class AStandardEnemy_C* CreateStandardEnemy(const struct FVector& Pos, int32 Start0X, int32 Start0Y);
	void EndEnemyTurn();
	void ExecuteUbergraph_EnemyManager(int32 EntryPoint);
	void FinishedTheGame_();
	void IsMissionComplete();
	void OnTick(bool* End);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveSpawner(const struct FVector& Pos);
	void Reset_Enemies_Already_Acted();
	void SpawnNewEnemies();
	void Start_Of_Enemy_Turn();
	void UpdateSpawnerMaterials();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EnemyManager_C">();
	}
	static class AEnemyManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnemyManager_C>();
	}
};
static_assert(alignof(AEnemyManager_C) == 0x000008, "Wrong alignment on AEnemyManager_C");
static_assert(sizeof(AEnemyManager_C) == 0x000350, "Wrong size on AEnemyManager_C");
static_assert(offsetof(AEnemyManager_C, UberGraphFrame) == 0x000290, "Member 'AEnemyManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, DefaultSceneRoot) == 0x000298, "Member 'AEnemyManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MMyTurn) == 0x0002A0, "Member 'AEnemyManager_C::MMyTurn' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MEnemies) == 0x0002A8, "Member 'AEnemyManager_C::MEnemies' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MStandardEnemies) == 0x0002B8, "Member 'AEnemyManager_C::MStandardEnemies' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MRangedEnemies) == 0x0002C8, "Member 'AEnemyManager_C::MRangedEnemies' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MExplosiveEnemies) == 0x0002D8, "Member 'AEnemyManager_C::MExplosiveEnemies' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, Timer) == 0x0002E8, "Member 'AEnemyManager_C::Timer' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MaxTimer) == 0x0002F0, "Member 'AEnemyManager_C::MaxTimer' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, SpawnerPositions) == 0x0002F8, "Member 'AEnemyManager_C::SpawnerPositions' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, TurnsSinceLastSpawn) == 0x000308, "Member 'AEnemyManager_C::TurnsSinceLastSpawn' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MaxTurnsToSpawn) == 0x00030C, "Member 'AEnemyManager_C::MaxTurnsToSpawn' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, SpawnerActive) == 0x000310, "Member 'AEnemyManager_C::SpawnerActive' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, IsTutorial) == 0x000311, "Member 'AEnemyManager_C::IsTutorial' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, ReachedExit) == 0x000312, "Member 'AEnemyManager_C::ReachedExit' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, MissionType) == 0x000313, "Member 'AEnemyManager_C::MissionType' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, LevelIDRef) == 0x000318, "Member 'AEnemyManager_C::LevelIDRef' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, TurnsToSurvive) == 0x000320, "Member 'AEnemyManager_C::TurnsToSurvive' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, SpawnerObjects) == 0x000328, "Member 'AEnemyManager_C::SpawnerObjects' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, InitialEggGlowFreq) == 0x000338, "Member 'AEnemyManager_C::InitialEggGlowFreq' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, FinalEnemy) == 0x000340, "Member 'AEnemyManager_C::FinalEnemy' has a wrong offset!");
static_assert(offsetof(AEnemyManager_C, KnoM) == 0x000348, "Member 'AEnemyManager_C::KnoM' has a wrong offset!");

}

