#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HealAbility

#include "Basic.hpp"

#include "MyAbilityBP_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass HealAbility.HealAbility_C
// 0x0038 (0x0130 - 0x00F8)
class UHealAbility_C final : public UMyAbilityBP_C
{
public:
	int32                                         Range;                                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5E[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Timer;                                             // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealPower;                                         // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5F[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Target;                                            // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealthCost;                                        // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ContinueAction();
	void OnAbilitySelected();
	void OnEnd();
	void PreDisplayTarget(const struct FVector& Param_Target);
	void Use(const struct FVector& AbilityTarget);
	void ValidateTarget(const struct FVector& Param_Target, bool* Valid_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HealAbility_C">();
	}
	static class UHealAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealAbility_C>();
	}
};
static_assert(alignof(UHealAbility_C) == 0x000008, "Wrong alignment on UHealAbility_C");
static_assert(sizeof(UHealAbility_C) == 0x000130, "Wrong size on UHealAbility_C");
static_assert(offsetof(UHealAbility_C, Range) == 0x0000F8, "Member 'UHealAbility_C::Range' has a wrong offset!");
static_assert(offsetof(UHealAbility_C, Timer) == 0x000100, "Member 'UHealAbility_C::Timer' has a wrong offset!");
static_assert(offsetof(UHealAbility_C, HealPower) == 0x000108, "Member 'UHealAbility_C::HealPower' has a wrong offset!");
static_assert(offsetof(UHealAbility_C, Target) == 0x000110, "Member 'UHealAbility_C::Target' has a wrong offset!");
static_assert(offsetof(UHealAbility_C, HealthCost) == 0x000128, "Member 'UHealAbility_C::HealthCost' has a wrong offset!");

}

