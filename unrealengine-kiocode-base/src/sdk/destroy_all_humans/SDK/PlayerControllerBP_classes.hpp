#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerControllerBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "PlayerStates_structs.hpp"
#include "AbilitySlots_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ScriptedStages_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerControllerBP.PlayerControllerBP_C
// 0x00F8 (0x0410 - 0x0318)
class APlayerControllerBP_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SPArm_0;                                           // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        MoveSpeed;                                         // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerStates                                 CurrentState;                                      // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerStates                                 NextState;                                         // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251B[0x6];                                     // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMyCharacter_C*                         SelectedCharacter;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AAlliedCharacter_C*>             MyCharacters;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	EAbilitySlots                                 SelectedAbility;                                   // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251C[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastHoveredCell;                                   // 0x0370(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HighlightedCell;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MouseWheelprevPos;                                 // 0x0390(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackTarget;                                      // 0x03A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraMin;                                         // 0x03C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraMax;                                         // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar;                                            // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          boolHasJustFinishedCinematic;                      // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScriptedStages                               ScriptedStage;                                     // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251D[0x5];                                     // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPauseMenuWidget_C*                     PauseMenu;                                         // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          WasCharSelected;                                   // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251E[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_whichbuttoncharacter;                            // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstTab;                                          // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActionFinished();
	void CameraShake();
	void CanISelectACharacter(bool* YesOrNo);
	void ChangeState(EPlayerStates State);
	void ClampCamToMaxMin();
	void CreateCharacters();
	void ExecuteUbergraph_PlayerControllerBP(int32 EntryPoint);
	void GetCamBoundariesFromLevel();
	void InpActEvt_Action_1_K2Node_EnhancedInputActionEvent_13(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_2_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_C_1_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_C_2_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_C_3_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_C_4_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Camera_Movement_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Click_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_EndTurn_K2Node_EnhancedInputActionEvent_12(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Esc_K2Node_EnhancedInputActionEvent_17(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_Esc_K2Node_EnhancedInputActionEvent_18(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_SpeedUp_K2Node_EnhancedInputActionEvent_14(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_SpeedUp_K2Node_EnhancedInputActionEvent_15(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Action_SpeedUp_K2Node_EnhancedInputActionEvent_16(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_FocusCamera_K2Node_EnhancedInputActionEvent_11(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_MouseWheelClick_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_MouseWheelClick_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_MouseWheelRelease_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_TabToSelectChars_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void MoveCameraToMainPlayer();
	void PlaceCharacters();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Select_Target(class AMyCharacter_C* Target);
	void Select_Target_By_Index(int32 Param_Index);
	void SelectAbility(EAbilitySlots Ability);
	bool SelectingTargetForAbility();
	void SelectSkillTarget(const struct FVector& Target, const struct FVector& AbilityTarget);
	void StateMachineUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerControllerBP_C">();
	}
	static class APlayerControllerBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerControllerBP_C>();
	}
};
static_assert(alignof(APlayerControllerBP_C) == 0x000008, "Wrong alignment on APlayerControllerBP_C");
static_assert(sizeof(APlayerControllerBP_C) == 0x000410, "Wrong size on APlayerControllerBP_C");
static_assert(offsetof(APlayerControllerBP_C, UberGraphFrame) == 0x000318, "Member 'APlayerControllerBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, Camera) == 0x000320, "Member 'APlayerControllerBP_C::Camera' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, SpringArm) == 0x000328, "Member 'APlayerControllerBP_C::SpringArm' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, SPArm_0) == 0x000330, "Member 'APlayerControllerBP_C::SPArm_0' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, DefaultSceneRoot) == 0x000338, "Member 'APlayerControllerBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, MoveSpeed) == 0x000340, "Member 'APlayerControllerBP_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, CurrentState) == 0x000348, "Member 'APlayerControllerBP_C::CurrentState' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, NextState) == 0x000349, "Member 'APlayerControllerBP_C::NextState' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, SelectedCharacter) == 0x000350, "Member 'APlayerControllerBP_C::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, MyCharacters) == 0x000358, "Member 'APlayerControllerBP_C::MyCharacters' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, SelectedAbility) == 0x000368, "Member 'APlayerControllerBP_C::SelectedAbility' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, LastHoveredCell) == 0x000370, "Member 'APlayerControllerBP_C::LastHoveredCell' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, HighlightedCell) == 0x000388, "Member 'APlayerControllerBP_C::HighlightedCell' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, MouseWheelprevPos) == 0x000390, "Member 'APlayerControllerBP_C::MouseWheelprevPos' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, AttackTarget) == 0x0003A8, "Member 'APlayerControllerBP_C::AttackTarget' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, CameraMin) == 0x0003C0, "Member 'APlayerControllerBP_C::CameraMin' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, CameraMax) == 0x0003D8, "Member 'APlayerControllerBP_C::CameraMax' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, NewVar) == 0x0003F0, "Member 'APlayerControllerBP_C::NewVar' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, boolHasJustFinishedCinematic) == 0x0003F1, "Member 'APlayerControllerBP_C::boolHasJustFinishedCinematic' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, ScriptedStage) == 0x0003F2, "Member 'APlayerControllerBP_C::ScriptedStage' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, PauseMenu) == 0x0003F8, "Member 'APlayerControllerBP_C::PauseMenu' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, WasCharSelected) == 0x000400, "Member 'APlayerControllerBP_C::WasCharSelected' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, L_whichbuttoncharacter) == 0x000404, "Member 'APlayerControllerBP_C::L_whichbuttoncharacter' has a wrong offset!");
static_assert(offsetof(APlayerControllerBP_C, FirstTab) == 0x000408, "Member 'APlayerControllerBP_C::FirstTab' has a wrong offset!");

}

