#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ExplosiveAttack

#include "Basic.hpp"

#include "ExplosiveAttack_classes.hpp"
#include "ExplosiveAttack_parameters.hpp"


namespace SDK
{

// Function ExplosiveAttack.ExplosiveAttack_C.ActuallyDamage
// (Public, BlueprintCallable, BlueprintEvent)

void UExplosiveAttack_C::ActuallyDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveAttack_C", "ActuallyDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveAttack.ExplosiveAttack_C.IsACharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UExplosiveAttack_C::IsACharacter(const struct FVector& WorldPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveAttack_C", "IsACharacter");

	Params::ExplosiveAttack_C_IsACharacter Parms{};

	Parms.WorldPos = std::move(WorldPos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ExplosiveAttack.ExplosiveAttack_C.Use
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          AbilityTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UExplosiveAttack_C::Use(const struct FVector& AbilityTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveAttack_C", "Use");

	Params::ExplosiveAttack_C_Use Parms{};

	Parms.AbilityTarget = std::move(AbilityTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveAttack.ExplosiveAttack_C.ValidateTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UExplosiveAttack_C::ValidateTarget(const struct FVector& Target, bool* Valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveAttack_C", "ValidateTarget");

	Params::ExplosiveAttack_C_ValidateTarget Parms{};

	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);

	if (Valid_ != nullptr)
		*Valid_ = Parms.Valid_;
}

}

