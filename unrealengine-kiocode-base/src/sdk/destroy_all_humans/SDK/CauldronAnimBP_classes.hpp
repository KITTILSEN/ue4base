#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CauldronAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass CauldronAnimBP.CauldronAnimBP_C
// 0x06C0 (0x0A10 - 0x0350)
class UCauldronAnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_26E7[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0400(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0428(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0450(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0478(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x04A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x04C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x04F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0518(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0540(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0568(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x0590(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x05D8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x05F8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x0640(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0660(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x06A8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x06C8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0710(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0730(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0778(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0798(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x07E0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0800(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0848(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0868(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x08B0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x08D0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0918(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0938(0x00C8)()
	bool                                          IsWalking;                                         // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayDamageAnim;                               // 0x0A01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hastoplaydeathanim;                                // 0x0A02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hastoplayattack;                                   // 0x0A03(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayOverflow;                                 // 0x0A04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayHeal;                                     // 0x0A05(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_AttackAnimFinished();
	void AnimNotify_attackCharge();
	void AnimNotify_attackMovement();
	void AnimNotify_attackSpash();
	void AnimNotify_boilingWater();
	void AnimNotify_cauldronDamage();
	void AnimNotify_CauldronWalk_01();
	void AnimNotify_CauldronWalk_02();
	void AnimNotify_Desintegrate();
	void AnimNotify_Die();
	void AnimNotify_GetDamaged();
	void AnimNotify_LaunchProjectile();
	void AnimNotify_OverflowFinished();
	void AnimNotify_OverflowStart();
	void AnimNotify_SpinLoop();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_314475E24425C2849B5526B01D8940BE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_3237736C4CFD983249AAAABCF3D90ABC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_34BCA6154B56A5884ABE6993303A7BBB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_3C958E2B46180FE04BC82EAE2AE62CF6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_A656DD9C41D9BCCE7F20E38B18C7E8B2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_B91FA0AB44593D76DD549597FF5B2158();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CauldronAnimBP_AnimGraphNode_TransitionResult_E5797AD44C7846CE3D81A998F1A9A34C();
	void ExecuteUbergraph_CauldronAnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CauldronAnimBP_C">();
	}
	static class UCauldronAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCauldronAnimBP_C>();
	}
};
static_assert(alignof(UCauldronAnimBP_C) == 0x000010, "Wrong alignment on UCauldronAnimBP_C");
static_assert(sizeof(UCauldronAnimBP_C) == 0x000A10, "Wrong size on UCauldronAnimBP_C");
static_assert(offsetof(UCauldronAnimBP_C, UberGraphFrame) == 0x000350, "Member 'UCauldronAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UCauldronAnimBP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UCauldronAnimBP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_Root) == 0x000368, "Member 'UCauldronAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_12) == 0x000388, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_11) == 0x0003B0, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_10) == 0x0003D8, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_9) == 0x000400, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_8) == 0x000428, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_7) == 0x000450, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000478, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x0004A0, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x0004C8, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0004F0, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000518, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000540, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_TransitionResult) == 0x000568, "Member 'UCauldronAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_8) == 0x000590, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_8) == 0x0005D8, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_7) == 0x0005F8, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_7) == 0x000640, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_6) == 0x000660, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_6) == 0x0006A8, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x0006C8, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_5) == 0x000710, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x000730, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_4) == 0x000778, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000798, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_3) == 0x0007E0, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000800, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_2) == 0x000848, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000868, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult_1) == 0x0008B0, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_SequencePlayer) == 0x0008D0, "Member 'UCauldronAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateResult) == 0x000918, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, AnimGraphNode_StateMachine) == 0x000938, "Member 'UCauldronAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, IsWalking) == 0x000A00, "Member 'UCauldronAnimBP_C::IsWalking' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, HasToPlayDamageAnim) == 0x000A01, "Member 'UCauldronAnimBP_C::HasToPlayDamageAnim' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, Hastoplaydeathanim) == 0x000A02, "Member 'UCauldronAnimBP_C::Hastoplaydeathanim' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, Hastoplayattack) == 0x000A03, "Member 'UCauldronAnimBP_C::Hastoplayattack' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, HasToPlayOverflow) == 0x000A04, "Member 'UCauldronAnimBP_C::HasToPlayOverflow' has a wrong offset!");
static_assert(offsetof(UCauldronAnimBP_C, HasToPlayHeal) == 0x000A05, "Member 'UCauldronAnimBP_C::HasToPlayHeal' has a wrong offset!");

}

