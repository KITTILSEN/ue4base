#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindAbilityBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "StrategyGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WindAbilityBP.WindAbilityBP_C.ContinueAction
// 0x01C0 (0x01C0 - 0x0000)
struct WindAbilityBP_C_ContinueAction final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMainCharacter_C*                       K2Node_DynamicCast_AsMain_Character;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGridManagerBP_C*                       CallFunc_GetGridMgr_GM;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPosFromCellXY_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDeltaTime_DT;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         CallFunc_Array_Get_Item_1;                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2740[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2741[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00D0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2742[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_ContinueAction) == 0x000008, "Wrong alignment on WindAbilityBP_C_ContinueAction");
static_assert(sizeof(WindAbilityBP_C_ContinueAction) == 0x0001C0, "Wrong size on WindAbilityBP_C_ContinueAction");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WindAbilityBP_C_ContinueAction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WindAbilityBP_C_ContinueAction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, K2Node_DynamicCast_AsMain_Character) == 0x000018, "Member 'WindAbilityBP_C_ContinueAction::K2Node_DynamicCast_AsMain_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WindAbilityBP_C_ContinueAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Array_Get_Item) == 0x000028, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_GetGridMgr_GM) == 0x000040, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_GetGridMgr_GM' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_GetWorldPosFromCellXY_ReturnValue) == 0x000048, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_GetWorldPosFromCellXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_GetRefMgr_RefMgr) == 0x000060, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_GetDeltaTime_DT) == 0x000068, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_GetDeltaTime_DT' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000070, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_VLerp_ReturnValue) == 0x0000B0, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_Less_IntInt_ReturnValue) == 0x0000C8, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000D0, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0001B8, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ContinueAction, CallFunc_VLerp_Alpha_ImplicitCast) == 0x0001BC, "Member 'WindAbilityBP_C_ContinueAction::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.ExecuteUbergraph_WindAbilityBP
// 0x0020 (0x0020 - 0x0000)
struct WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2743[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         K2Node_DynamicCast_AsMy_Character;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP) == 0x000008, "Wrong alignment on WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP");
static_assert(sizeof(WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP) == 0x000020, "Wrong size on WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP");
static_assert(offsetof(WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP, EntryPoint) == 0x000000, "Member 'WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP, K2Node_DynamicCast_AsMy_Character) == 0x000010, "Member 'WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP::K2Node_DynamicCast_AsMy_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WindAbilityBP_C_ExecuteUbergraph_WindAbilityBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.MoveEntities
// 0x01A8 (0x01A8 - 0x0000)
struct WindAbilityBP_C_MoveEntities final
{
public:
	struct FVector                                CurrentCharPos;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2744[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGridManagerBP_C*                       CallFunc_GetGridMgr_GM;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2745[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetWorldPosFromCellXY_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGridManagerBP_C*                       CallFunc_GetGridMgr_GM_1;                          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCellXYFromWorldPos_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2746[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2747[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2748[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCellWalkableFromGridXY_ReturnValue;     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2749[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGridManagerBP_C*                       CallFunc_GetGridMgr_GM_2;                          // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGridCellModifier                             CallFunc_GetCellModifierFromXY_ReturnValue;        // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274A[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274B[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCellXYFromWorldPos_ReturnValue_1;      // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetEntityFromWorldPos_ReturnValue;        // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMyCharacter_C*                         K2Node_DynamicCast_AsMy_Character;                 // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274C[0x6];                                     // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274D[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainCharacter_C*                       K2Node_DynamicCast_AsMain_Character;               // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274E[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetEntityFromXY_ReturnValue;              // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_MoveEntities) == 0x000008, "Wrong alignment on WindAbilityBP_C_MoveEntities");
static_assert(sizeof(WindAbilityBP_C_MoveEntities) == 0x0001A8, "Wrong size on WindAbilityBP_C_MoveEntities");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CurrentCharPos) == 0x000000, "Member 'WindAbilityBP_C_MoveEntities::CurrentCharPos' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'WindAbilityBP_C_MoveEntities::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetGridMgr_GM) == 0x000020, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetGridMgr_GM' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetWorldPosFromCellXY_ReturnValue) == 0x000030, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetWorldPosFromCellXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_MakeLiteralDouble_ReturnValue) == 0x000048, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetGridMgr_GM_1) == 0x000050, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetGridMgr_GM_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000058, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetCellXYFromWorldPos_ReturnValue) == 0x000088, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetCellXYFromWorldPos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, Temp_int_Array_Index_Variable) == 0x0000C0, "Member 'WindAbilityBP_C_MoveEntities::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Vector_Distance_ReturnValue) == 0x0000C8, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x0000D0, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_BreakVector2D_X) == 0x0000E8, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_BreakVector2D_Y) == 0x0000F0, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_FTrunc_ReturnValue) == 0x0000F8, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_FTrunc_ReturnValue_1) == 0x0000FC, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_IsCellWalkableFromGridXY_ReturnValue) == 0x000100, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_IsCellWalkableFromGridXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetGridMgr_GM_2) == 0x000108, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetGridMgr_GM_2' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetCellModifierFromXY_ReturnValue) == 0x000110, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetCellModifierFromXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Array_Get_Item) == 0x000118, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, K2Node_SwitchEnum_CmpSuccess) == 0x000130, "Member 'WindAbilityBP_C_MoveEntities::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetCellXYFromWorldPos_ReturnValue_1) == 0x000138, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetCellXYFromWorldPos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetEntityFromWorldPos_ReturnValue) == 0x000150, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetEntityFromWorldPos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, K2Node_DynamicCast_AsMy_Character) == 0x000158, "Member 'WindAbilityBP_C_MoveEntities::K2Node_DynamicCast_AsMy_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'WindAbilityBP_C_MoveEntities::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_IsValid_ReturnValue) == 0x000161, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000168, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Array_Add_ReturnValue_1) == 0x000180, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, K2Node_DynamicCast_AsMain_Character) == 0x000188, "Member 'WindAbilityBP_C_MoveEntities::K2Node_DynamicCast_AsMain_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, K2Node_DynamicCast_bSuccess_1) == 0x000190, "Member 'WindAbilityBP_C_MoveEntities::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Array_Length_ReturnValue) == 0x000194, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_GetEntityFromXY_ReturnValue) == 0x000198, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_GetEntityFromXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_Less_IntInt_ReturnValue) == 0x0001A0, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_MoveEntities, CallFunc_IsValid_ReturnValue_1) == 0x0001A1, "Member 'WindAbilityBP_C_MoveEntities::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.OnAbilitySelected
// 0x01C8 (0x01C8 - 0x0000)
struct WindAbilityBP_C_OnAbilitySelected final
{
public:
	TArray<struct FVector>                        Directions;                                        // 0x0000(0x0010)(Edit, BlueprintVisible)
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr_1;                       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADisplayManager_C*                      CallFunc_GetDisplayManager_NewParam;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADisplayManager_C*                      CallFunc_GetDisplayManager_NewParam_1;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr_2;                       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGridManagerBP_C*                       CallFunc_GetGridManager_grid;                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274F[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCellXYFromWorldPos_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2750[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2751[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2752[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2753[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue_1;           // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2754[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             CallFunc_FTruncVector_ReturnValue;                 // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntVectorToVector_ReturnValue;       // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2755[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPosFromCellXY_ReturnValue;        // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_OnAbilitySelected) == 0x000008, "Wrong alignment on WindAbilityBP_C_OnAbilitySelected");
static_assert(sizeof(WindAbilityBP_C_OnAbilitySelected) == 0x0001C8, "Wrong size on WindAbilityBP_C_OnAbilitySelected");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, Directions) == 0x000000, "Member 'WindAbilityBP_C_OnAbilitySelected::Directions' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetRefMgr_RefMgr) == 0x000010, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetRefMgr_RefMgr_1) == 0x000018, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetRefMgr_RefMgr_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetDisplayManager_NewParam) == 0x000020, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetDisplayManager_NewParam' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetDisplayManager_NewParam_1) == 0x000028, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetDisplayManager_NewParam_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetRefMgr_RefMgr_2) == 0x000030, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetRefMgr_RefMgr_2' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetGridManager_grid) == 0x000038, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetGridManager_grid' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000040, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetCellXYFromWorldPos_ReturnValue) == 0x000060, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetCellXYFromWorldPos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, K2Node_MakeArray_Array) == 0x000078, "Member 'WindAbilityBP_C_OnAbilitySelected::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Cross_VectorVector_ReturnValue) == 0x000088, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, Temp_int_Variable) == 0x0000A0, "Member 'WindAbilityBP_C_OnAbilitySelected::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000A4, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Conv_IntToVector_ReturnValue) == 0x0000A8, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Conv_IntToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000C0, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Add_IntInt_ReturnValue) == 0x0000D8, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000DC, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, Temp_int_Loop_Counter_Variable) == 0x0000E0, "Member 'WindAbilityBP_C_OnAbilitySelected::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Less_IntInt_ReturnValue) == 0x0000E4, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000E8, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, Temp_int_Array_Index_Variable) == 0x0000EC, "Member 'WindAbilityBP_C_OnAbilitySelected::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, Temp_int_Variable_1) == 0x0000F0, "Member 'WindAbilityBP_C_OnAbilitySelected::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Subtract_IntInt_ReturnValue) == 0x000110, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Conv_IntToVector_ReturnValue_1) == 0x000118, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Conv_IntToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000130, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000148, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_FTruncVector_ReturnValue) == 0x00014C, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_FTruncVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Conv_IntVectorToVector_ReturnValue) == 0x000158, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Conv_IntVectorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Add_IntInt_ReturnValue_2) == 0x000170, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Add_VectorVector_ReturnValue) == 0x000178, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000190, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_GetWorldPosFromCellXY_ReturnValue) == 0x0001A8, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_GetWorldPosFromCellXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnAbilitySelected, CallFunc_Array_Add_ReturnValue) == 0x0001C0, "Member 'WindAbilityBP_C_OnAbilitySelected::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.OnEnd
// 0x0028 (0x0028 - 0x0000)
struct WindAbilityBP_C_OnEnd final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMainCharacter_C*                       K2Node_DynamicCast_AsMain_Character;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2756[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerBP_C*                  CallFunc_GetPlayerController_PC;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_OnEnd) == 0x000008, "Wrong alignment on WindAbilityBP_C_OnEnd");
static_assert(sizeof(WindAbilityBP_C_OnEnd) == 0x000028, "Wrong size on WindAbilityBP_C_OnEnd");
static_assert(offsetof(WindAbilityBP_C_OnEnd, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'WindAbilityBP_C_OnEnd::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnEnd, K2Node_DynamicCast_AsMain_Character) == 0x000008, "Member 'WindAbilityBP_C_OnEnd::K2Node_DynamicCast_AsMain_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnEnd, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WindAbilityBP_C_OnEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnEnd, CallFunc_GetRefMgr_RefMgr) == 0x000018, "Member 'WindAbilityBP_C_OnEnd::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_OnEnd, CallFunc_GetPlayerController_PC) == 0x000020, "Member 'WindAbilityBP_C_OnEnd::CallFunc_GetPlayerController_PC' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.PreDisplayTarget
// 0x0278 (0x0278 - 0x0000)
struct WindAbilityBP_C_PreDisplayTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CellsToShow;                                       // 0x0018(0x0010)(Edit, BlueprintVisible)
	struct FVector                                TargetL;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2757[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2758[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2759[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGridManagerBP_C*                       CallFunc_GetGridManager_grid;                      // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADisplayManager_C*                      CallFunc_GetDisplayManager_NewParam;               // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue_1;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_FTruncVector_ReturnValue;                 // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275A[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntVectorToVector_ReturnValue;       // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275B[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275C[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue_1;           // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275D[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275E[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCellXYFromWorldPos_ReturnValue;        // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCellXYFromWorldPos_ReturnValue_1;      // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCellXYFromWorldPos_ReturnValue_2;      // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPosFromCellXY_ReturnValue;        // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_PreDisplayTarget) == 0x000008, "Wrong alignment on WindAbilityBP_C_PreDisplayTarget");
static_assert(sizeof(WindAbilityBP_C_PreDisplayTarget) == 0x000278, "Wrong size on WindAbilityBP_C_PreDisplayTarget");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, Target) == 0x000000, "Member 'WindAbilityBP_C_PreDisplayTarget::Target' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CellsToShow) == 0x000018, "Member 'WindAbilityBP_C_PreDisplayTarget::CellsToShow' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, TargetL) == 0x000028, "Member 'WindAbilityBP_C_PreDisplayTarget::TargetL' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Abs_Int_ReturnValue) == 0x000040, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Divide_IntInt_ReturnValue) == 0x000044, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, Temp_int_Variable) == 0x000048, "Member 'WindAbilityBP_C_PreDisplayTarget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000050, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetRefMgr_RefMgr) == 0x000078, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Subtract_IntInt_ReturnValue) == 0x000080, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetGridManager_grid) == 0x000088, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetGridManager_grid' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Conv_IntToVector_ReturnValue) == 0x000090, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Conv_IntToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetDisplayManager_NewParam) == 0x0000A8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetDisplayManager_NewParam' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Abs_Int_ReturnValue_1) == 0x0000B0, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Abs_Int_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Divide_IntInt_ReturnValue_1) == 0x0000B4, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000B8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000D0, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_FTruncVector_ReturnValue) == 0x0000D8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_FTruncVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_MakeVector_ReturnValue_1) == 0x0000E8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Conv_IntVectorToVector_ReturnValue) == 0x000100, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Conv_IntVectorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Cross_VectorVector_ReturnValue) == 0x000118, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000130, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Multiply_IntInt_ReturnValue) == 0x000134, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, Temp_int_Variable_1) == 0x000138, "Member 'WindAbilityBP_C_PreDisplayTarget::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Conv_IntToVector_ReturnValue_1) == 0x000140, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Conv_IntToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000158, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000160, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000178, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Add_IntInt_ReturnValue_1) == 0x00017C, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetCellXYFromWorldPos_ReturnValue) == 0x000180, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetCellXYFromWorldPos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_BreakVector_X) == 0x000198, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_BreakVector_Y) == 0x0001A0, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_BreakVector_Z) == 0x0001A8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001B0, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetCellXYFromWorldPos_ReturnValue_1) == 0x0001C8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetCellXYFromWorldPos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetCellXYFromWorldPos_ReturnValue_2) == 0x0001E0, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetCellXYFromWorldPos_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x0001F8, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_BreakVector_X_1) == 0x000210, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_BreakVector_Y_1) == 0x000218, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_BreakVector_Z_1) == 0x000220, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000228, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000240, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_GetWorldPosFromCellXY_ReturnValue) == 0x000248, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_GetWorldPosFromCellXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_FTrunc_ReturnValue) == 0x000260, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Array_Add_ReturnValue) == 0x000264, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000268, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_PreDisplayTarget, CallFunc_FTrunc_ReturnValue_1) == 0x000270, "Member 'WindAbilityBP_C_PreDisplayTarget::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.Use
// 0x00D0 (0x00D0 - 0x0000)
struct WindAbilityBP_C_Use final
{
public:
	struct FVector                                AbilityTarget;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocalVar;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275F[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMainCharacter_C*                       K2Node_DynamicCast_AsMain_Character;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2760[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2761[0x2];                                     // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2762[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2763[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetEntityFromWorldPos_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2764[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMyCharacter_C*                         K2Node_DynamicCast_AsMy_Character;                 // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2765[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_Use) == 0x000008, "Wrong alignment on WindAbilityBP_C_Use");
static_assert(sizeof(WindAbilityBP_C_Use) == 0x0000D0, "Wrong size on WindAbilityBP_C_Use");
static_assert(offsetof(WindAbilityBP_C_Use, AbilityTarget) == 0x000000, "Member 'WindAbilityBP_C_Use::AbilityTarget' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, NewLocalVar) == 0x000018, "Member 'WindAbilityBP_C_Use::NewLocalVar' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'WindAbilityBP_C_Use::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'WindAbilityBP_C_Use::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, Temp_int_Loop_Counter_Variable_1) == 0x000038, "Member 'WindAbilityBP_C_Use::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'WindAbilityBP_C_Use::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'WindAbilityBP_C_Use::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'WindAbilityBP_C_Use::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'WindAbilityBP_C_Use::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'WindAbilityBP_C_Use::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, K2Node_DynamicCast_AsMain_Character) == 0x000058, "Member 'WindAbilityBP_C_Use::K2Node_DynamicCast_AsMain_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'WindAbilityBP_C_Use::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Array_Get_Item) == 0x000068, "Member 'WindAbilityBP_C_Use::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'WindAbilityBP_C_Use::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'WindAbilityBP_C_Use::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Array_RemoveItem_ReturnValue) == 0x000085, "Member 'WindAbilityBP_C_Use::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Array_Length_ReturnValue_2) == 0x000088, "Member 'WindAbilityBP_C_Use::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_GetRefMgr_RefMgr) == 0x000090, "Member 'WindAbilityBP_C_Use::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_Less_IntInt_ReturnValue_1) == 0x000098, "Member 'WindAbilityBP_C_Use::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_GetEntityFromWorldPos_ReturnValue) == 0x0000A0, "Member 'WindAbilityBP_C_Use::CallFunc_GetEntityFromWorldPos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'WindAbilityBP_C_Use::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, K2Node_DynamicCast_AsMy_Character) == 0x0000B0, "Member 'WindAbilityBP_C_Use::K2Node_DynamicCast_AsMy_Character' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'WindAbilityBP_C_Use::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_Use, CallFunc_GetDisplayName_ReturnValue) == 0x0000C0, "Member 'WindAbilityBP_C_Use::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");

// Function WindAbilityBP.WindAbilityBP_C.ValidateTarget
// 0x0020 (0x0020 - 0x0000)
struct WindAbilityBP_C_ValidateTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid_;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ValidateTarget_valid_;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindAbilityBP_C_ValidateTarget) == 0x000008, "Wrong alignment on WindAbilityBP_C_ValidateTarget");
static_assert(sizeof(WindAbilityBP_C_ValidateTarget) == 0x000020, "Wrong size on WindAbilityBP_C_ValidateTarget");
static_assert(offsetof(WindAbilityBP_C_ValidateTarget, Target) == 0x000000, "Member 'WindAbilityBP_C_ValidateTarget::Target' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ValidateTarget, Valid_) == 0x000018, "Member 'WindAbilityBP_C_ValidateTarget::Valid_' has a wrong offset!");
static_assert(offsetof(WindAbilityBP_C_ValidateTarget, CallFunc_ValidateTarget_valid_) == 0x000019, "Member 'WindAbilityBP_C_ValidateTarget::CallFunc_ValidateTarget_valid_' has a wrong offset!");

}

