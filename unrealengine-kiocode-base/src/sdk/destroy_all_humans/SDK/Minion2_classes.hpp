#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Minion2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AlliedCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Minion2.Minion2_C
// 0x0068 (0x0460 - 0x03F8)
class AMinion2_C final : public AAlliedCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Minion2_C;                          // 0x03F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Bananas_GroundSlam;                                // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Passive_FX;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TauntParticles;                                    // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTauntAbility_C*                        TauntAbility;                                      // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      BloodParticles;                                    // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroundSlamAbilityBP_C*                 GroundSlamAbilityBP;                               // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mace;                                              // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStandardAttack_C*                      StandardAttack;                                    // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayGroundSlam;                               // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToPlayTaunt;                                    // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25BD[0x2];                                     // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PassiveHeal;                                       // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MyMat;                                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeathTimer;                                        // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasToStartDesintegrating;                          // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Minion2(int32 EntryPoint);
	void GetDeselected();
	void GetSelected();
	void HideAvailableActions();
	void ReceiveBeginPlay();
	void ReceiveDamage(int32 Damage, class AActor* Attacker);
	void ReceiveTick(float DeltaSeconds);
	void ShowAvailableActions();
	void UsePassive();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Minion2_C">();
	}
	static class AMinion2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinion2_C>();
	}
};
static_assert(alignof(AMinion2_C) == 0x000008, "Wrong alignment on AMinion2_C");
static_assert(sizeof(AMinion2_C) == 0x000460, "Wrong size on AMinion2_C");
static_assert(offsetof(AMinion2_C, UberGraphFrame_Minion2_C) == 0x0003F8, "Member 'AMinion2_C::UberGraphFrame_Minion2_C' has a wrong offset!");
static_assert(offsetof(AMinion2_C, Bananas_GroundSlam) == 0x000400, "Member 'AMinion2_C::Bananas_GroundSlam' has a wrong offset!");
static_assert(offsetof(AMinion2_C, Passive_FX) == 0x000408, "Member 'AMinion2_C::Passive_FX' has a wrong offset!");
static_assert(offsetof(AMinion2_C, TauntParticles) == 0x000410, "Member 'AMinion2_C::TauntParticles' has a wrong offset!");
static_assert(offsetof(AMinion2_C, TauntAbility) == 0x000418, "Member 'AMinion2_C::TauntAbility' has a wrong offset!");
static_assert(offsetof(AMinion2_C, BloodParticles) == 0x000420, "Member 'AMinion2_C::BloodParticles' has a wrong offset!");
static_assert(offsetof(AMinion2_C, GroundSlamAbilityBP) == 0x000428, "Member 'AMinion2_C::GroundSlamAbilityBP' has a wrong offset!");
static_assert(offsetof(AMinion2_C, Mace) == 0x000430, "Member 'AMinion2_C::Mace' has a wrong offset!");
static_assert(offsetof(AMinion2_C, StandardAttack) == 0x000438, "Member 'AMinion2_C::StandardAttack' has a wrong offset!");
static_assert(offsetof(AMinion2_C, HasToPlayGroundSlam) == 0x000440, "Member 'AMinion2_C::HasToPlayGroundSlam' has a wrong offset!");
static_assert(offsetof(AMinion2_C, HasToPlayTaunt) == 0x000441, "Member 'AMinion2_C::HasToPlayTaunt' has a wrong offset!");
static_assert(offsetof(AMinion2_C, PassiveHeal) == 0x000444, "Member 'AMinion2_C::PassiveHeal' has a wrong offset!");
static_assert(offsetof(AMinion2_C, MyMat) == 0x000448, "Member 'AMinion2_C::MyMat' has a wrong offset!");
static_assert(offsetof(AMinion2_C, DeathTimer) == 0x000450, "Member 'AMinion2_C::DeathTimer' has a wrong offset!");
static_assert(offsetof(AMinion2_C, HasToStartDesintegrating) == 0x000458, "Member 'AMinion2_C::HasToStartDesintegrating' has a wrong offset!");

}

