#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StrategyGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "StrategyGame_structs.hpp"


namespace SDK::Params
{

// Function StrategyGame.GameFocus.GetViewportFocus
// 0x0001 (0x0001 - 0x0000)
struct GameFocus_GetViewportFocus final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameFocus_GetViewportFocus) == 0x000001, "Wrong alignment on GameFocus_GetViewportFocus");
static_assert(sizeof(GameFocus_GetViewportFocus) == 0x000001, "Wrong size on GameFocus_GetViewportFocus");
static_assert(offsetof(GameFocus_GetViewportFocus, IsFocused) == 0x000000, "Member 'GameFocus_GetViewportFocus::IsFocused' has a wrong offset!");

// Function StrategyGame.GridManager.CellExistsFromIndex
// 0x0008 (0x0008 - 0x0000)
struct GridManager_CellExistsFromIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF9[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_CellExistsFromIndex) == 0x000004, "Wrong alignment on GridManager_CellExistsFromIndex");
static_assert(sizeof(GridManager_CellExistsFromIndex) == 0x000008, "Wrong size on GridManager_CellExistsFromIndex");
static_assert(offsetof(GridManager_CellExistsFromIndex, Param_Index) == 0x000000, "Member 'GridManager_CellExistsFromIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(GridManager_CellExistsFromIndex, ReturnValue) == 0x000004, "Member 'GridManager_CellExistsFromIndex::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.CellExistsFromWorldPos
// 0x0020 (0x0020 - 0x0000)
struct GridManager_CellExistsFromWorldPos final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_CellExistsFromWorldPos) == 0x000008, "Wrong alignment on GridManager_CellExistsFromWorldPos");
static_assert(sizeof(GridManager_CellExistsFromWorldPos) == 0x000020, "Wrong size on GridManager_CellExistsFromWorldPos");
static_assert(offsetof(GridManager_CellExistsFromWorldPos, WorldPos) == 0x000000, "Member 'GridManager_CellExistsFromWorldPos::WorldPos' has a wrong offset!");
static_assert(offsetof(GridManager_CellExistsFromWorldPos, ReturnValue) == 0x000018, "Member 'GridManager_CellExistsFromWorldPos::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.CellExistsFromXY
// 0x000C (0x000C - 0x0000)
struct GridManager_CellExistsFromXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFB[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_CellExistsFromXY) == 0x000004, "Wrong alignment on GridManager_CellExistsFromXY");
static_assert(sizeof(GridManager_CellExistsFromXY) == 0x00000C, "Wrong size on GridManager_CellExistsFromXY");
static_assert(offsetof(GridManager_CellExistsFromXY, X) == 0x000000, "Member 'GridManager_CellExistsFromXY::X' has a wrong offset!");
static_assert(offsetof(GridManager_CellExistsFromXY, Y) == 0x000004, "Member 'GridManager_CellExistsFromXY::Y' has a wrong offset!");
static_assert(offsetof(GridManager_CellExistsFromXY, ReturnValue) == 0x000008, "Member 'GridManager_CellExistsFromXY::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.CellHasModifier
// 0x000C (0x000C - 0x0000)
struct GridManager_CellHasModifier final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridCellModifier                             Mod;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFC[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_CellHasModifier) == 0x000004, "Wrong alignment on GridManager_CellHasModifier");
static_assert(sizeof(GridManager_CellHasModifier) == 0x00000C, "Wrong size on GridManager_CellHasModifier");
static_assert(offsetof(GridManager_CellHasModifier, X) == 0x000000, "Member 'GridManager_CellHasModifier::X' has a wrong offset!");
static_assert(offsetof(GridManager_CellHasModifier, Y) == 0x000004, "Member 'GridManager_CellHasModifier::Y' has a wrong offset!");
static_assert(offsetof(GridManager_CellHasModifier, Mod) == 0x000008, "Member 'GridManager_CellHasModifier::Mod' has a wrong offset!");
static_assert(offsetof(GridManager_CellHasModifier, ReturnValue) == 0x000009, "Member 'GridManager_CellHasModifier::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.FindFullPath
// 0x0048 (0x0048 - 0x0000)
struct GridManager_FindFullPath final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEnemies;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFD[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_FindFullPath) == 0x000008, "Wrong alignment on GridManager_FindFullPath");
static_assert(sizeof(GridManager_FindFullPath) == 0x000048, "Wrong size on GridManager_FindFullPath");
static_assert(offsetof(GridManager_FindFullPath, Start) == 0x000000, "Member 'GridManager_FindFullPath::Start' has a wrong offset!");
static_assert(offsetof(GridManager_FindFullPath, End) == 0x000018, "Member 'GridManager_FindFullPath::End' has a wrong offset!");
static_assert(offsetof(GridManager_FindFullPath, IgnoreEnemies) == 0x000030, "Member 'GridManager_FindFullPath::IgnoreEnemies' has a wrong offset!");
static_assert(offsetof(GridManager_FindFullPath, ReturnValue) == 0x000038, "Member 'GridManager_FindFullPath::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellArea
// 0x0030 (0x0030 - 0x0000)
struct GridManager_GetCellArea final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WithVision;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreNotWalkable;                                 // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFE[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetCellArea) == 0x000008, "Wrong alignment on GridManager_GetCellArea");
static_assert(sizeof(GridManager_GetCellArea) == 0x000030, "Wrong size on GridManager_GetCellArea");
static_assert(offsetof(GridManager_GetCellArea, Center) == 0x000000, "Member 'GridManager_GetCellArea::Center' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellArea, Radius) == 0x000018, "Member 'GridManager_GetCellArea::Radius' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellArea, WithVision) == 0x00001C, "Member 'GridManager_GetCellArea::WithVision' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellArea, IgnoreNotWalkable) == 0x00001D, "Member 'GridManager_GetCellArea::IgnoreNotWalkable' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellArea, ReturnValue) == 0x000020, "Member 'GridManager_GetCellArea::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellDistanceActor
// 0x0018 (0x0018 - 0x0000)
struct GridManager_GetCellDistanceActor final
{
public:
	class AActor*                                 Start;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 End;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_GetCellDistanceActor) == 0x000008, "Wrong alignment on GridManager_GetCellDistanceActor");
static_assert(sizeof(GridManager_GetCellDistanceActor) == 0x000018, "Wrong size on GridManager_GetCellDistanceActor");
static_assert(offsetof(GridManager_GetCellDistanceActor, Start) == 0x000000, "Member 'GridManager_GetCellDistanceActor::Start' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellDistanceActor, End) == 0x000008, "Member 'GridManager_GetCellDistanceActor::End' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellDistanceActor, ReturnValue) == 0x000010, "Member 'GridManager_GetCellDistanceActor::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellDistanceVec
// 0x0038 (0x0038 - 0x0000)
struct GridManager_GetCellDistanceVec final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C00[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_GetCellDistanceVec) == 0x000008, "Wrong alignment on GridManager_GetCellDistanceVec");
static_assert(sizeof(GridManager_GetCellDistanceVec) == 0x000038, "Wrong size on GridManager_GetCellDistanceVec");
static_assert(offsetof(GridManager_GetCellDistanceVec, Start) == 0x000000, "Member 'GridManager_GetCellDistanceVec::Start' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellDistanceVec, End) == 0x000018, "Member 'GridManager_GetCellDistanceVec::End' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellDistanceVec, ReturnValue) == 0x000030, "Member 'GridManager_GetCellDistanceVec::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellModifierFromIndex
// 0x0008 (0x0008 - 0x0000)
struct GridManager_GetCellModifierFromIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridCellModifier                             ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C01[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_GetCellModifierFromIndex) == 0x000004, "Wrong alignment on GridManager_GetCellModifierFromIndex");
static_assert(sizeof(GridManager_GetCellModifierFromIndex) == 0x000008, "Wrong size on GridManager_GetCellModifierFromIndex");
static_assert(offsetof(GridManager_GetCellModifierFromIndex, Param_Index) == 0x000000, "Member 'GridManager_GetCellModifierFromIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellModifierFromIndex, ReturnValue) == 0x000004, "Member 'GridManager_GetCellModifierFromIndex::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellModifierFromWorlPos
// 0x0020 (0x0020 - 0x0000)
struct GridManager_GetCellModifierFromWorlPos final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridCellModifier                             ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C02[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_GetCellModifierFromWorlPos) == 0x000008, "Wrong alignment on GridManager_GetCellModifierFromWorlPos");
static_assert(sizeof(GridManager_GetCellModifierFromWorlPos) == 0x000020, "Wrong size on GridManager_GetCellModifierFromWorlPos");
static_assert(offsetof(GridManager_GetCellModifierFromWorlPos, Pos) == 0x000000, "Member 'GridManager_GetCellModifierFromWorlPos::Pos' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellModifierFromWorlPos, ReturnValue) == 0x000018, "Member 'GridManager_GetCellModifierFromWorlPos::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellModifierFromXY
// 0x000C (0x000C - 0x0000)
struct GridManager_GetCellModifierFromXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridCellModifier                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C03[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_GetCellModifierFromXY) == 0x000004, "Wrong alignment on GridManager_GetCellModifierFromXY");
static_assert(sizeof(GridManager_GetCellModifierFromXY) == 0x00000C, "Wrong size on GridManager_GetCellModifierFromXY");
static_assert(offsetof(GridManager_GetCellModifierFromXY, X) == 0x000000, "Member 'GridManager_GetCellModifierFromXY::X' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellModifierFromXY, Y) == 0x000004, "Member 'GridManager_GetCellModifierFromXY::Y' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellModifierFromXY, ReturnValue) == 0x000008, "Member 'GridManager_GetCellModifierFromXY::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellSize
// 0x0004 (0x0004 - 0x0000)
struct GridManager_GetCellSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetCellSize) == 0x000004, "Wrong alignment on GridManager_GetCellSize");
static_assert(sizeof(GridManager_GetCellSize) == 0x000004, "Wrong size on GridManager_GetCellSize");
static_assert(offsetof(GridManager_GetCellSize, ReturnValue) == 0x000000, "Member 'GridManager_GetCellSize::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetCellXYFromWorldPos
// 0x0030 (0x0030 - 0x0000)
struct GridManager_GetCellXYFromWorldPos final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetCellXYFromWorldPos) == 0x000008, "Wrong alignment on GridManager_GetCellXYFromWorldPos");
static_assert(sizeof(GridManager_GetCellXYFromWorldPos) == 0x000030, "Wrong size on GridManager_GetCellXYFromWorldPos");
static_assert(offsetof(GridManager_GetCellXYFromWorldPos, WorldPos) == 0x000000, "Member 'GridManager_GetCellXYFromWorldPos::WorldPos' has a wrong offset!");
static_assert(offsetof(GridManager_GetCellXYFromWorldPos, ReturnValue) == 0x000018, "Member 'GridManager_GetCellXYFromWorldPos::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetEntitiesAroundWordPos
// 0x0030 (0x0030 - 0x0000)
struct GridManager_GetEntitiesAroundWordPos final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C04[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetEntitiesAroundWordPos) == 0x000008, "Wrong alignment on GridManager_GetEntitiesAroundWordPos");
static_assert(sizeof(GridManager_GetEntitiesAroundWordPos) == 0x000030, "Wrong size on GridManager_GetEntitiesAroundWordPos");
static_assert(offsetof(GridManager_GetEntitiesAroundWordPos, Pos) == 0x000000, "Member 'GridManager_GetEntitiesAroundWordPos::Pos' has a wrong offset!");
static_assert(offsetof(GridManager_GetEntitiesAroundWordPos, Range) == 0x000018, "Member 'GridManager_GetEntitiesAroundWordPos::Range' has a wrong offset!");
static_assert(offsetof(GridManager_GetEntitiesAroundWordPos, ReturnValue) == 0x000020, "Member 'GridManager_GetEntitiesAroundWordPos::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetEntityFromWorldPos
// 0x0020 (0x0020 - 0x0000)
struct GridManager_GetEntityFromWorldPos final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetEntityFromWorldPos) == 0x000008, "Wrong alignment on GridManager_GetEntityFromWorldPos");
static_assert(sizeof(GridManager_GetEntityFromWorldPos) == 0x000020, "Wrong size on GridManager_GetEntityFromWorldPos");
static_assert(offsetof(GridManager_GetEntityFromWorldPos, WorldPos) == 0x000000, "Member 'GridManager_GetEntityFromWorldPos::WorldPos' has a wrong offset!");
static_assert(offsetof(GridManager_GetEntityFromWorldPos, ReturnValue) == 0x000018, "Member 'GridManager_GetEntityFromWorldPos::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetEntityFromXY
// 0x0020 (0x0020 - 0x0000)
struct GridManager_GetEntityFromXY final
{
public:
	struct FVector                                Cell;                                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetEntityFromXY) == 0x000008, "Wrong alignment on GridManager_GetEntityFromXY");
static_assert(sizeof(GridManager_GetEntityFromXY) == 0x000020, "Wrong size on GridManager_GetEntityFromXY");
static_assert(offsetof(GridManager_GetEntityFromXY, Cell) == 0x000000, "Member 'GridManager_GetEntityFromXY::Cell' has a wrong offset!");
static_assert(offsetof(GridManager_GetEntityFromXY, ReturnValue) == 0x000018, "Member 'GridManager_GetEntityFromXY::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetIdxFromCell
// 0x0020 (0x0020 - 0x0000)
struct GridManager_GetIdxFromCell final
{
public:
	struct FVector                                Cell;                                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C05[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_GetIdxFromCell) == 0x000008, "Wrong alignment on GridManager_GetIdxFromCell");
static_assert(sizeof(GridManager_GetIdxFromCell) == 0x000020, "Wrong size on GridManager_GetIdxFromCell");
static_assert(offsetof(GridManager_GetIdxFromCell, Cell) == 0x000000, "Member 'GridManager_GetIdxFromCell::Cell' has a wrong offset!");
static_assert(offsetof(GridManager_GetIdxFromCell, ReturnValue) == 0x000018, "Member 'GridManager_GetIdxFromCell::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetIdxFromXY
// 0x000C (0x000C - 0x0000)
struct GridManager_GetIdxFromXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetIdxFromXY) == 0x000004, "Wrong alignment on GridManager_GetIdxFromXY");
static_assert(sizeof(GridManager_GetIdxFromXY) == 0x00000C, "Wrong size on GridManager_GetIdxFromXY");
static_assert(offsetof(GridManager_GetIdxFromXY, X) == 0x000000, "Member 'GridManager_GetIdxFromXY::X' has a wrong offset!");
static_assert(offsetof(GridManager_GetIdxFromXY, Y) == 0x000004, "Member 'GridManager_GetIdxFromXY::Y' has a wrong offset!");
static_assert(offsetof(GridManager_GetIdxFromXY, ReturnValue) == 0x000008, "Member 'GridManager_GetIdxFromXY::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetMapSize
// 0x0018 (0x0018 - 0x0000)
struct GridManager_GetMapSize final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetMapSize) == 0x000008, "Wrong alignment on GridManager_GetMapSize");
static_assert(sizeof(GridManager_GetMapSize) == 0x000018, "Wrong size on GridManager_GetMapSize");
static_assert(offsetof(GridManager_GetMapSize, ReturnValue) == 0x000000, "Member 'GridManager_GetMapSize::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetOccupiedCells
// 0x0010 (0x0010 - 0x0000)
struct GridManager_GetOccupiedCells final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetOccupiedCells) == 0x000008, "Wrong alignment on GridManager_GetOccupiedCells");
static_assert(sizeof(GridManager_GetOccupiedCells) == 0x000010, "Wrong size on GridManager_GetOccupiedCells");
static_assert(offsetof(GridManager_GetOccupiedCells, ReturnValue) == 0x000000, "Member 'GridManager_GetOccupiedCells::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.GetWorldPosFromCellXY
// 0x0030 (0x0030 - 0x0000)
struct GridManager_GetWorldPosFromCellXY final
{
public:
	struct FVector                                CellXY;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_GetWorldPosFromCellXY) == 0x000008, "Wrong alignment on GridManager_GetWorldPosFromCellXY");
static_assert(sizeof(GridManager_GetWorldPosFromCellXY) == 0x000030, "Wrong size on GridManager_GetWorldPosFromCellXY");
static_assert(offsetof(GridManager_GetWorldPosFromCellXY, CellXY) == 0x000000, "Member 'GridManager_GetWorldPosFromCellXY::CellXY' has a wrong offset!");
static_assert(offsetof(GridManager_GetWorldPosFromCellXY, ReturnValue) == 0x000018, "Member 'GridManager_GetWorldPosFromCellXY::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.IsCellWalkableFromGridXY
// 0x000C (0x000C - 0x0000)
struct GridManager_IsCellWalkableFromGridXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C06[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_IsCellWalkableFromGridXY) == 0x000004, "Wrong alignment on GridManager_IsCellWalkableFromGridXY");
static_assert(sizeof(GridManager_IsCellWalkableFromGridXY) == 0x00000C, "Wrong size on GridManager_IsCellWalkableFromGridXY");
static_assert(offsetof(GridManager_IsCellWalkableFromGridXY, X) == 0x000000, "Member 'GridManager_IsCellWalkableFromGridXY::X' has a wrong offset!");
static_assert(offsetof(GridManager_IsCellWalkableFromGridXY, Y) == 0x000004, "Member 'GridManager_IsCellWalkableFromGridXY::Y' has a wrong offset!");
static_assert(offsetof(GridManager_IsCellWalkableFromGridXY, ReturnValue) == 0x000008, "Member 'GridManager_IsCellWalkableFromGridXY::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.IsCellWalkableFromIndex
// 0x0008 (0x0008 - 0x0000)
struct GridManager_IsCellWalkableFromIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C07[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_IsCellWalkableFromIndex) == 0x000004, "Wrong alignment on GridManager_IsCellWalkableFromIndex");
static_assert(sizeof(GridManager_IsCellWalkableFromIndex) == 0x000008, "Wrong size on GridManager_IsCellWalkableFromIndex");
static_assert(offsetof(GridManager_IsCellWalkableFromIndex, Param_Index) == 0x000000, "Member 'GridManager_IsCellWalkableFromIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(GridManager_IsCellWalkableFromIndex, ReturnValue) == 0x000004, "Member 'GridManager_IsCellWalkableFromIndex::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.IsCellWalkableFromWorldPos
// 0x0020 (0x0020 - 0x0000)
struct GridManager_IsCellWalkableFromWorldPos final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C08[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_IsCellWalkableFromWorldPos) == 0x000008, "Wrong alignment on GridManager_IsCellWalkableFromWorldPos");
static_assert(sizeof(GridManager_IsCellWalkableFromWorldPos) == 0x000020, "Wrong size on GridManager_IsCellWalkableFromWorldPos");
static_assert(offsetof(GridManager_IsCellWalkableFromWorldPos, Pos) == 0x000000, "Member 'GridManager_IsCellWalkableFromWorldPos::Pos' has a wrong offset!");
static_assert(offsetof(GridManager_IsCellWalkableFromWorldPos, ReturnValue) == 0x000018, "Member 'GridManager_IsCellWalkableFromWorldPos::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.IsClearPath
// 0x0014 (0x0014 - 0x0000)
struct GridManager_IsClearPath final
{
public:
	int32                                         X0;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y0;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X1;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y1;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C09[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_IsClearPath) == 0x000004, "Wrong alignment on GridManager_IsClearPath");
static_assert(sizeof(GridManager_IsClearPath) == 0x000014, "Wrong size on GridManager_IsClearPath");
static_assert(offsetof(GridManager_IsClearPath, X0) == 0x000000, "Member 'GridManager_IsClearPath::X0' has a wrong offset!");
static_assert(offsetof(GridManager_IsClearPath, Y0) == 0x000004, "Member 'GridManager_IsClearPath::Y0' has a wrong offset!");
static_assert(offsetof(GridManager_IsClearPath, X1) == 0x000008, "Member 'GridManager_IsClearPath::X1' has a wrong offset!");
static_assert(offsetof(GridManager_IsClearPath, Y1) == 0x00000C, "Member 'GridManager_IsClearPath::Y1' has a wrong offset!");
static_assert(offsetof(GridManager_IsClearPath, ReturnValue) == 0x000010, "Member 'GridManager_IsClearPath::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.IsEmpty
// 0x0020 (0x0020 - 0x0000)
struct GridManager_IsEmpty final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_IsEmpty) == 0x000008, "Wrong alignment on GridManager_IsEmpty");
static_assert(sizeof(GridManager_IsEmpty) == 0x000020, "Wrong size on GridManager_IsEmpty");
static_assert(offsetof(GridManager_IsEmpty, WorldPos) == 0x000000, "Member 'GridManager_IsEmpty::WorldPos' has a wrong offset!");
static_assert(offsetof(GridManager_IsEmpty, ReturnValue) == 0x000018, "Member 'GridManager_IsEmpty::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.IsEmptyFromXy
// 0x0020 (0x0020 - 0x0000)
struct GridManager_IsEmptyFromXy final
{
public:
	struct FVector                                Cell;                                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_IsEmptyFromXy) == 0x000008, "Wrong alignment on GridManager_IsEmptyFromXy");
static_assert(sizeof(GridManager_IsEmptyFromXy) == 0x000020, "Wrong size on GridManager_IsEmptyFromXy");
static_assert(offsetof(GridManager_IsEmptyFromXy, Cell) == 0x000000, "Member 'GridManager_IsEmptyFromXy::Cell' has a wrong offset!");
static_assert(offsetof(GridManager_IsEmptyFromXy, ReturnValue) == 0x000018, "Member 'GridManager_IsEmptyFromXy::ReturnValue' has a wrong offset!");

// Function StrategyGame.GridManager.MoveEntityFromWorldPos
// 0x0038 (0x0038 - 0x0000)
struct GridManager_MoveEntityFromWorldPos final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Dest;                                              // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Entity;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_MoveEntityFromWorldPos) == 0x000008, "Wrong alignment on GridManager_MoveEntityFromWorldPos");
static_assert(sizeof(GridManager_MoveEntityFromWorldPos) == 0x000038, "Wrong size on GridManager_MoveEntityFromWorldPos");
static_assert(offsetof(GridManager_MoveEntityFromWorldPos, Start) == 0x000000, "Member 'GridManager_MoveEntityFromWorldPos::Start' has a wrong offset!");
static_assert(offsetof(GridManager_MoveEntityFromWorldPos, Dest) == 0x000018, "Member 'GridManager_MoveEntityFromWorldPos::Dest' has a wrong offset!");
static_assert(offsetof(GridManager_MoveEntityFromWorldPos, Entity) == 0x000030, "Member 'GridManager_MoveEntityFromWorldPos::Entity' has a wrong offset!");

// Function StrategyGame.GridManager.SetCellModifierFromXY
// 0x000C (0x000C - 0x0000)
struct GridManager_SetCellModifierFromXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridCellModifier                             Modifier;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_SetCellModifierFromXY) == 0x000004, "Wrong alignment on GridManager_SetCellModifierFromXY");
static_assert(sizeof(GridManager_SetCellModifierFromXY) == 0x00000C, "Wrong size on GridManager_SetCellModifierFromXY");
static_assert(offsetof(GridManager_SetCellModifierFromXY, X) == 0x000000, "Member 'GridManager_SetCellModifierFromXY::X' has a wrong offset!");
static_assert(offsetof(GridManager_SetCellModifierFromXY, Y) == 0x000004, "Member 'GridManager_SetCellModifierFromXY::Y' has a wrong offset!");
static_assert(offsetof(GridManager_SetCellModifierFromXY, Modifier) == 0x000008, "Member 'GridManager_SetCellModifierFromXY::Modifier' has a wrong offset!");

// Function StrategyGame.GridManager.SetCellSize
// 0x0004 (0x0004 - 0x0000)
struct GridManager_SetCellSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_SetCellSize) == 0x000004, "Wrong alignment on GridManager_SetCellSize");
static_assert(sizeof(GridManager_SetCellSize) == 0x000004, "Wrong size on GridManager_SetCellSize");
static_assert(offsetof(GridManager_SetCellSize, Size) == 0x000000, "Member 'GridManager_SetCellSize::Size' has a wrong offset!");

// Function StrategyGame.GridManager.SetCellWalkableFromGridXY
// 0x000C (0x000C - 0x0000)
struct GridManager_SetCellWalkableFromGridXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Walkable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_SetCellWalkableFromGridXY) == 0x000004, "Wrong alignment on GridManager_SetCellWalkableFromGridXY");
static_assert(sizeof(GridManager_SetCellWalkableFromGridXY) == 0x00000C, "Wrong size on GridManager_SetCellWalkableFromGridXY");
static_assert(offsetof(GridManager_SetCellWalkableFromGridXY, X) == 0x000000, "Member 'GridManager_SetCellWalkableFromGridXY::X' has a wrong offset!");
static_assert(offsetof(GridManager_SetCellWalkableFromGridXY, Y) == 0x000004, "Member 'GridManager_SetCellWalkableFromGridXY::Y' has a wrong offset!");
static_assert(offsetof(GridManager_SetCellWalkableFromGridXY, Walkable) == 0x000008, "Member 'GridManager_SetCellWalkableFromGridXY::Walkable' has a wrong offset!");

// Function StrategyGame.GridManager.SetEntityFromWorldPos
// 0x0010 (0x0010 - 0x0000)
struct GridManager_SetEntityFromWorldPos final
{
public:
	class AActor*                                 Entity;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Walkable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridManager_SetEntityFromWorldPos) == 0x000008, "Wrong alignment on GridManager_SetEntityFromWorldPos");
static_assert(sizeof(GridManager_SetEntityFromWorldPos) == 0x000010, "Wrong size on GridManager_SetEntityFromWorldPos");
static_assert(offsetof(GridManager_SetEntityFromWorldPos, Entity) == 0x000000, "Member 'GridManager_SetEntityFromWorldPos::Entity' has a wrong offset!");
static_assert(offsetof(GridManager_SetEntityFromWorldPos, Walkable) == 0x000008, "Member 'GridManager_SetEntityFromWorldPos::Walkable' has a wrong offset!");

// Function StrategyGame.GridManager.SetEntityNullFromWorldPos
// 0x0018 (0x0018 - 0x0000)
struct GridManager_SetEntityNullFromWorldPos final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_SetEntityNullFromWorldPos) == 0x000008, "Wrong alignment on GridManager_SetEntityNullFromWorldPos");
static_assert(sizeof(GridManager_SetEntityNullFromWorldPos) == 0x000018, "Wrong size on GridManager_SetEntityNullFromWorldPos");
static_assert(offsetof(GridManager_SetEntityNullFromWorldPos, Pos) == 0x000000, "Member 'GridManager_SetEntityNullFromWorldPos::Pos' has a wrong offset!");

// Function StrategyGame.GridManager.SetMapSize
// 0x0008 (0x0008 - 0x0000)
struct GridManager_SetMapSize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridManager_SetMapSize) == 0x000004, "Wrong alignment on GridManager_SetMapSize");
static_assert(sizeof(GridManager_SetMapSize) == 0x000008, "Wrong size on GridManager_SetMapSize");
static_assert(offsetof(GridManager_SetMapSize, Width) == 0x000000, "Member 'GridManager_SetMapSize::Width' has a wrong offset!");
static_assert(offsetof(GridManager_SetMapSize, Height) == 0x000004, "Member 'GridManager_SetMapSize::Height' has a wrong offset!");

}

