#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KnoMAnim

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass knoMAnim.knoMAnim_C
// 0x0410 (0x0760 - 0x0350)
class UKnoMAnim_C final : public UAnimInstance
{
public:
	uint8                                         Pad_239A[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0400(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0428(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0470(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0490(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x04D8(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x04F8(0x00E0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x05D8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0620(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0668(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0688(0x00C8)()
	bool                                          PlaySpawn;                                         // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayDie;                                           // 0x0751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_knoMDeath();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_knoMAnim_AnimGraphNode_TransitionResult_1C24F4824F2027C48E2C19A951C6FEDB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_knoMAnim_AnimGraphNode_TransitionResult_607D72B64BB7E0C8048F6197206E26AC();
	void ExecuteUbergraph_knoMAnim(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"knoMAnim_C">();
	}
	static class UKnoMAnim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKnoMAnim_C>();
	}
};
static_assert(alignof(UKnoMAnim_C) == 0x000010, "Wrong alignment on UKnoMAnim_C");
static_assert(sizeof(UKnoMAnim_C) == 0x000760, "Wrong size on UKnoMAnim_C");
static_assert(offsetof(UKnoMAnim_C, UberGraphFrame) == 0x000350, "Member 'UKnoMAnim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UKnoMAnim_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UKnoMAnim_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_Root) == 0x000368, "Member 'UKnoMAnim_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_TransitionResult_3) == 0x000388, "Member 'UKnoMAnim_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_TransitionResult_2) == 0x0003B0, "Member 'UKnoMAnim_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_TransitionResult_1) == 0x0003D8, "Member 'UKnoMAnim_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_TransitionResult) == 0x000400, "Member 'UKnoMAnim_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_SequencePlayer_3) == 0x000428, "Member 'UKnoMAnim_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_StateResult_2) == 0x000470, "Member 'UKnoMAnim_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_SequencePlayer_2) == 0x000490, "Member 'UKnoMAnim_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_StateResult_1) == 0x0004D8, "Member 'UKnoMAnim_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_LayeredBoneBlend) == 0x0004F8, "Member 'UKnoMAnim_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_SequencePlayer_1) == 0x0005D8, "Member 'UKnoMAnim_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_SequencePlayer) == 0x000620, "Member 'UKnoMAnim_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_StateResult) == 0x000668, "Member 'UKnoMAnim_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, AnimGraphNode_StateMachine) == 0x000688, "Member 'UKnoMAnim_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, PlaySpawn) == 0x000750, "Member 'UKnoMAnim_C::PlaySpawn' has a wrong offset!");
static_assert(offsetof(UKnoMAnim_C, PlayDie) == 0x000751, "Member 'UKnoMAnim_C::PlayDie' has a wrong offset!");

}

