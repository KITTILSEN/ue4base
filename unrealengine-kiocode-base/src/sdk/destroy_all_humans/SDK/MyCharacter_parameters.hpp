#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MyCharacter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AbilitySlots_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function MyCharacter.MyCharacter_C.ContinueAction
// 0x0010 (0x0010 - 0x0000)
struct MyCharacter_C_ContinueAction final
{
public:
	EAbilitySlots                                 AbilityIdx;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_248E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMyAbilityBP_C*                         CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_ContinueAction) == 0x000008, "Wrong alignment on MyCharacter_C_ContinueAction");
static_assert(sizeof(MyCharacter_C_ContinueAction) == 0x000010, "Wrong size on MyCharacter_C_ContinueAction");
static_assert(offsetof(MyCharacter_C_ContinueAction, AbilityIdx) == 0x000000, "Member 'MyCharacter_C_ContinueAction::AbilityIdx' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ContinueAction, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'MyCharacter_C_ContinueAction::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ContinueAction, CallFunc_Array_Get_Item) == 0x000008, "Member 'MyCharacter_C_ContinueAction::CallFunc_Array_Get_Item' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.Die
// 0x0670 (0x0670 - 0x0000)
struct MyCharacter_C_Die final
{
public:
	struct FVector                                ElCuloDelMundo;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_248F[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMinion2_C*                             K2Node_DynamicCast_AsMinion_2;                     // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2490[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2491[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00A0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGridManagerBP_C*                       CallFunc_GetGridManager_grid;                      // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHUDWIdget_C*                           CallFunc_GetHUD_HUD;                               // 0x0150(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2492[0x8];                                     // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0160(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMinion1_C*                             K2Node_DynamicCast_AsMinion_1;                     // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2493[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x01D0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0230(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x02D8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2494[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_1;    // 0x03C8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_1;       // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2495[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMinion3_C*                             K2Node_DynamicCast_AsMinion_3;                     // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2496[0x7];                                     // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_2;    // 0x04C8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_2;       // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2497[0xF];                                     // 0x05B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x05C0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0620(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0638(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0650(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_Die) == 0x000010, "Wrong alignment on MyCharacter_C_Die");
static_assert(sizeof(MyCharacter_C_Die) == 0x000670, "Wrong size on MyCharacter_C_Die");
static_assert(offsetof(MyCharacter_C_Die, ElCuloDelMundo) == 0x000000, "Member 'MyCharacter_C_Die::ElCuloDelMundo' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'MyCharacter_C_Die::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, K2Node_DynamicCast_AsMinion_2) == 0x000080, "Member 'MyCharacter_C_Die::K2Node_DynamicCast_AsMinion_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'MyCharacter_C_Die::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_GetRefMgr_RefMgr) == 0x000090, "Member 'MyCharacter_C_Die::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_GetTransform_ReturnValue) == 0x0000A0, "Member 'MyCharacter_C_Die::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_GetGridManager_grid) == 0x000100, "Member 'MyCharacter_C_Die::CallFunc_GetGridManager_grid' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Location) == 0x000108, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Rotation) == 0x000120, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Scale) == 0x000138, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_GetHUD_HUD) == 0x000150, "Member 'MyCharacter_C_Die::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_MakeTransform_ReturnValue_1) == 0x000160, "Member 'MyCharacter_C_Die::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, K2Node_DynamicCast_AsMinion_1) == 0x0001C0, "Member 'MyCharacter_C_Die::K2Node_DynamicCast_AsMinion_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, K2Node_DynamicCast_bSuccess_1) == 0x0001C8, "Member 'MyCharacter_C_Die::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_GetTransform_ReturnValue_1) == 0x0001D0, "Member 'MyCharacter_C_Die::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_MakeTransform_ReturnValue_2) == 0x000230, "Member 'MyCharacter_C_Die::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Location_1) == 0x000290, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Rotation_1) == 0x0002A8, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Scale_1) == 0x0002C0, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0002D8, "Member 'MyCharacter_C_Die::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0003C0, "Member 'MyCharacter_C_Die::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_K2_SetActorTransform_SweepHitResult_1) == 0x0003C8, "Member 'MyCharacter_C_Die::CallFunc_K2_SetActorTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_K2_SetActorTransform_ReturnValue_1) == 0x0004B0, "Member 'MyCharacter_C_Die::CallFunc_K2_SetActorTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, K2Node_DynamicCast_AsMinion_3) == 0x0004B8, "Member 'MyCharacter_C_Die::K2Node_DynamicCast_AsMinion_3' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, K2Node_DynamicCast_bSuccess_2) == 0x0004C0, "Member 'MyCharacter_C_Die::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_K2_SetActorTransform_SweepHitResult_2) == 0x0004C8, "Member 'MyCharacter_C_Die::CallFunc_K2_SetActorTransform_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_K2_SetActorTransform_ReturnValue_2) == 0x0005B0, "Member 'MyCharacter_C_Die::CallFunc_K2_SetActorTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_GetTransform_ReturnValue_2) == 0x0005C0, "Member 'MyCharacter_C_Die::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Location_2) == 0x000620, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Rotation_2) == 0x000638, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Die, CallFunc_BreakTransform_Scale_2) == 0x000650, "Member 'MyCharacter_C_Die::CallFunc_BreakTransform_Scale_2' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.DieAndDelete
// 0x00A0 (0x00A0 - 0x0000)
struct MyCharacter_C_DieAndDelete final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2498[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHUDWIdget_C*                           CallFunc_GetHUD_HUD;                               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AMinion3_C*                             K2Node_DynamicCast_AsMinion_3;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2499[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMinion2_C*                             K2Node_DynamicCast_AsMinion_2;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249A[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMinion1_C*                             K2Node_DynamicCast_AsMinion_1;                     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249B[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr_1;                       // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerBP_C*                  CallFunc_GetPlayerController_PC;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGridManagerBP_C*                       CallFunc_GetGridManager_grid;                      // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAlliedCharacter_C*                     CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249C[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMinion3_C*                             K2Node_DynamicCast_AsMinion_3_1;                   // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_DieAndDelete) == 0x000008, "Wrong alignment on MyCharacter_C_DieAndDelete");
static_assert(sizeof(MyCharacter_C_DieAndDelete) == 0x0000A0, "Wrong size on MyCharacter_C_DieAndDelete");
static_assert(offsetof(MyCharacter_C_DieAndDelete, Temp_int_Array_Index_Variable) == 0x000000, "Member 'MyCharacter_C_DieAndDelete::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'MyCharacter_C_DieAndDelete::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'MyCharacter_C_DieAndDelete::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_GetRefMgr_RefMgr) == 0x000010, "Member 'MyCharacter_C_DieAndDelete::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_GetHUD_HUD) == 0x000018, "Member 'MyCharacter_C_DieAndDelete::CallFunc_GetHUD_HUD' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_AsMinion_3) == 0x000020, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_AsMinion_3' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_AsMinion_2) == 0x000030, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_AsMinion_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_AsMinion_1) == 0x000040, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_AsMinion_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_GetRefMgr_RefMgr_1) == 0x000050, "Member 'MyCharacter_C_DieAndDelete::CallFunc_GetRefMgr_RefMgr_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000058, "Member 'MyCharacter_C_DieAndDelete::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_GetPlayerController_PC) == 0x000070, "Member 'MyCharacter_C_DieAndDelete::CallFunc_GetPlayerController_PC' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_GetGridManager_grid) == 0x000078, "Member 'MyCharacter_C_DieAndDelete::CallFunc_GetGridManager_grid' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_Array_Get_Item) == 0x000080, "Member 'MyCharacter_C_DieAndDelete::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'MyCharacter_C_DieAndDelete::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_AsMinion_3_1) == 0x000090, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_AsMinion_3_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, K2Node_DynamicCast_bSuccess_3) == 0x000098, "Member 'MyCharacter_C_DieAndDelete::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_DieAndDelete, CallFunc_Less_IntInt_ReturnValue) == 0x000099, "Member 'MyCharacter_C_DieAndDelete::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.ExecuteUbergraph_MyCharacter
// 0x00F0 (0x00F0 - 0x0000)
struct MyCharacter_C_ExecuteUbergraph_MyCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0008(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(MyCharacter_C_ExecuteUbergraph_MyCharacter) == 0x000008, "Wrong alignment on MyCharacter_C_ExecuteUbergraph_MyCharacter");
static_assert(sizeof(MyCharacter_C_ExecuteUbergraph_MyCharacter) == 0x0000F0, "Wrong size on MyCharacter_C_ExecuteUbergraph_MyCharacter");
static_assert(offsetof(MyCharacter_C_ExecuteUbergraph_MyCharacter, EntryPoint) == 0x000000, "Member 'MyCharacter_C_ExecuteUbergraph_MyCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ExecuteUbergraph_MyCharacter, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'MyCharacter_C_ExecuteUbergraph_MyCharacter::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ExecuteUbergraph_MyCharacter, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000008, "Member 'MyCharacter_C_ExecuteUbergraph_MyCharacter::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.PreDisplayTarget
// 0x0028 (0x0028 - 0x0000)
struct MyCharacter_C_PreDisplayTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilitySlots                                 Whichability;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMyAbilityBP_C*                         CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_PreDisplayTarget) == 0x000008, "Wrong alignment on MyCharacter_C_PreDisplayTarget");
static_assert(sizeof(MyCharacter_C_PreDisplayTarget) == 0x000028, "Wrong size on MyCharacter_C_PreDisplayTarget");
static_assert(offsetof(MyCharacter_C_PreDisplayTarget, Target) == 0x000000, "Member 'MyCharacter_C_PreDisplayTarget::Target' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_PreDisplayTarget, Whichability) == 0x000018, "Member 'MyCharacter_C_PreDisplayTarget::Whichability' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_PreDisplayTarget, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'MyCharacter_C_PreDisplayTarget::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_PreDisplayTarget, CallFunc_Array_Get_Item) == 0x000020, "Member 'MyCharacter_C_PreDisplayTarget::CallFunc_Array_Get_Item' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.ReceiveDamage
// 0x0078 (0x0078 - 0x0000)
struct MyCharacter_C_ReceiveDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AStandardEnemy_C*                       K2Node_DynamicCast_AsStandard_Enemy;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A0[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyManager_C*                        CallFunc_GetEnemyManager_EnemyManager;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A1[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_ReceiveDamage) == 0x000008, "Wrong alignment on MyCharacter_C_ReceiveDamage");
static_assert(sizeof(MyCharacter_C_ReceiveDamage) == 0x000078, "Wrong size on MyCharacter_C_ReceiveDamage");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, Damage) == 0x000000, "Member 'MyCharacter_C_ReceiveDamage::Damage' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, Attacker) == 0x000008, "Member 'MyCharacter_C_ReceiveDamage::Attacker' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_GetRefMgr_RefMgr) == 0x000030, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, K2Node_DynamicCast_AsStandard_Enemy) == 0x000038, "Member 'MyCharacter_C_ReceiveDamage::K2Node_DynamicCast_AsStandard_Enemy' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'MyCharacter_C_ReceiveDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_GetEnemyManager_EnemyManager) == 0x000048, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_GetEnemyManager_EnemyManager' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000050, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, K2Node_SwitchEnum_CmpSuccess) == 0x000051, "Member 'MyCharacter_C_ReceiveDamage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000052, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_Subtract_IntInt_ReturnValue) == 0x000054, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_Conv_IntToString_ReturnValue) == 0x000058, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ReceiveDamage, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'MyCharacter_C_ReceiveDamage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct MyCharacter_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_ReceiveTick) == 0x000004, "Wrong alignment on MyCharacter_C_ReceiveTick");
static_assert(sizeof(MyCharacter_C_ReceiveTick) == 0x000004, "Wrong size on MyCharacter_C_ReceiveTick");
static_assert(offsetof(MyCharacter_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'MyCharacter_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.Remove from Grid
// 0x0100 (0x0100 - 0x0000)
struct MyCharacter_C_Remove_from_Grid final
{
public:
	class AReferenceManager_C*                    CallFunc_GetRefMgr_RefMgr;                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AExplosiveEnemy_C*                      K2Node_DynamicCast_AsExplosive_Enemy;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A2[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARangedEnemy_C*                         K2Node_DynamicCast_AsRanged_Enemy;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A3[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AStandardEnemy_C*                       K2Node_DynamicCast_AsStandard_Enemy;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A4[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGridManagerBP_C*                       CallFunc_GetGridMgr_GM;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_2;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A5[0xF];                                     // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0050(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_Remove_from_Grid) == 0x000010, "Wrong alignment on MyCharacter_C_Remove_from_Grid");
static_assert(sizeof(MyCharacter_C_Remove_from_Grid) == 0x000100, "Wrong size on MyCharacter_C_Remove_from_Grid");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_GetRefMgr_RefMgr) == 0x000000, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_GetRefMgr_RefMgr' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, K2Node_DynamicCast_AsExplosive_Enemy) == 0x000008, "Member 'MyCharacter_C_Remove_from_Grid::K2Node_DynamicCast_AsExplosive_Enemy' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'MyCharacter_C_Remove_from_Grid::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, K2Node_DynamicCast_AsRanged_Enemy) == 0x000018, "Member 'MyCharacter_C_Remove_from_Grid::K2Node_DynamicCast_AsRanged_Enemy' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'MyCharacter_C_Remove_from_Grid::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_Array_RemoveItem_ReturnValue) == 0x000021, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000022, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, K2Node_DynamicCast_AsStandard_Enemy) == 0x000028, "Member 'MyCharacter_C_Remove_from_Grid::K2Node_DynamicCast_AsStandard_Enemy' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, K2Node_DynamicCast_bSuccess_2) == 0x000030, "Member 'MyCharacter_C_Remove_from_Grid::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_GetGridMgr_GM) == 0x000038, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_GetGridMgr_GM' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_Array_RemoveItem_ReturnValue_2) == 0x000040, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_Array_RemoveItem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_GetTransform_ReturnValue) == 0x000050, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_BreakTransform_Location) == 0x0000B0, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_BreakTransform_Rotation) == 0x0000C8, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_Remove_from_Grid, CallFunc_BreakTransform_Scale) == 0x0000E0, "Member 'MyCharacter_C_Remove_from_Grid::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.RotateTowards
// 0x00D0 (0x00D0 - 0x0000)
struct MyCharacter_C_RotateTowards final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A6[0x8];                                     // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               CallFunc_MakeVector4_ReturnValue;                  // 0x0080(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Vector4_Size_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_RotateTowards) == 0x000010, "Wrong alignment on MyCharacter_C_RotateTowards");
static_assert(sizeof(MyCharacter_C_RotateTowards) == 0x0000D0, "Wrong size on MyCharacter_C_RotateTowards");
static_assert(offsetof(MyCharacter_C_RotateTowards, A) == 0x000000, "Member 'MyCharacter_C_RotateTowards::A' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'MyCharacter_C_RotateTowards::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'MyCharacter_C_RotateTowards::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_BreakVector_X) == 0x000048, "Member 'MyCharacter_C_RotateTowards::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_BreakVector_Y) == 0x000050, "Member 'MyCharacter_C_RotateTowards::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_BreakVector_Z) == 0x000058, "Member 'MyCharacter_C_RotateTowards::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'MyCharacter_C_RotateTowards::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_MakeVector4_ReturnValue) == 0x000080, "Member 'MyCharacter_C_RotateTowards::CallFunc_MakeVector4_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000A0, "Member 'MyCharacter_C_RotateTowards::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_Vector4_Size_ReturnValue) == 0x0000B8, "Member 'MyCharacter_C_RotateTowards::CallFunc_Vector4_Size_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000C0, "Member 'MyCharacter_C_RotateTowards::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_RotateTowards, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000C1, "Member 'MyCharacter_C_RotateTowards::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.SetAbilityArray
// 0x0038 (0x0038 - 0x0000)
struct MyCharacter_C_SetAbilityArray final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMyAbilityBP_C*>                 CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A8[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMyAbilityBP_C*                         CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A9[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_SetAbilityArray) == 0x000008, "Wrong alignment on MyCharacter_C_SetAbilityArray");
static_assert(sizeof(MyCharacter_C_SetAbilityArray) == 0x000038, "Wrong size on MyCharacter_C_SetAbilityArray");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, Temp_int_Array_Index_Variable) == 0x000000, "Member 'MyCharacter_C_SetAbilityArray::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'MyCharacter_C_SetAbilityArray::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'MyCharacter_C_SetAbilityArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'MyCharacter_C_SetAbilityArray::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'MyCharacter_C_SetAbilityArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, CallFunc_Array_Get_Item) == 0x000028, "Member 'MyCharacter_C_SetAbilityArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'MyCharacter_C_SetAbilityArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_SetAbilityArray, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000034, "Member 'MyCharacter_C_SetAbilityArray::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.UpdateAbilityCooldowns
// 0x0020 (0x0020 - 0x0000)
struct MyCharacter_C_UpdateAbilityCooldowns final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMyAbilityBP_C*                         CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_UpdateAbilityCooldowns) == 0x000008, "Wrong alignment on MyCharacter_C_UpdateAbilityCooldowns");
static_assert(sizeof(MyCharacter_C_UpdateAbilityCooldowns) == 0x000020, "Wrong size on MyCharacter_C_UpdateAbilityCooldowns");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, Temp_int_Array_Index_Variable) == 0x000000, "Member 'MyCharacter_C_UpdateAbilityCooldowns::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'MyCharacter_C_UpdateAbilityCooldowns::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'MyCharacter_C_UpdateAbilityCooldowns::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'MyCharacter_C_UpdateAbilityCooldowns::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, CallFunc_Array_Get_Item) == 0x000010, "Member 'MyCharacter_C_UpdateAbilityCooldowns::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'MyCharacter_C_UpdateAbilityCooldowns::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateAbilityCooldowns, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'MyCharacter_C_UpdateAbilityCooldowns::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.UpdateHealthBar
// 0x0030 (0x0030 - 0x0000)
struct MyCharacter_C_UpdateHealthBar final
{
public:
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHealthBar_C*                           K2Node_DynamicCast_AsHealth_Bar;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24AA[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_UpdateHealthBar) == 0x000008, "Wrong alignment on MyCharacter_C_UpdateHealthBar");
static_assert(sizeof(MyCharacter_C_UpdateHealthBar) == 0x000030, "Wrong size on MyCharacter_C_UpdateHealthBar");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000000, "Member 'MyCharacter_C_UpdateHealthBar::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000008, "Member 'MyCharacter_C_UpdateHealthBar::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'MyCharacter_C_UpdateHealthBar::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, CallFunc_GetWidget_ReturnValue) == 0x000018, "Member 'MyCharacter_C_UpdateHealthBar::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, K2Node_DynamicCast_AsHealth_Bar) == 0x000020, "Member 'MyCharacter_C_UpdateHealthBar::K2Node_DynamicCast_AsHealth_Bar' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'MyCharacter_C_UpdateHealthBar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UpdateHealthBar, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x00002C, "Member 'MyCharacter_C_UpdateHealthBar::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.UseAbility
// 0x0038 (0x0038 - 0x0000)
struct MyCharacter_C_UseAbility final
{
public:
	EAbilitySlots                                 AbilityIdx;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24AB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AbilityTarget;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24AC[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMyAbilityBP_C*                         CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCooldown_Output;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_UseAbility) == 0x000008, "Wrong alignment on MyCharacter_C_UseAbility");
static_assert(sizeof(MyCharacter_C_UseAbility) == 0x000038, "Wrong size on MyCharacter_C_UseAbility");
static_assert(offsetof(MyCharacter_C_UseAbility, AbilityIdx) == 0x000000, "Member 'MyCharacter_C_UseAbility::AbilityIdx' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UseAbility, AbilityTarget) == 0x000008, "Member 'MyCharacter_C_UseAbility::AbilityTarget' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UseAbility, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'MyCharacter_C_UseAbility::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UseAbility, CallFunc_Array_Get_Item) == 0x000028, "Member 'MyCharacter_C_UseAbility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UseAbility, CallFunc_GetCooldown_Output) == 0x000030, "Member 'MyCharacter_C_UseAbility::CallFunc_GetCooldown_Output' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_UseAbility, CallFunc_Greater_IntInt_ReturnValue) == 0x000034, "Member 'MyCharacter_C_UseAbility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function MyCharacter.MyCharacter_C.ValidateTarget
// 0x0038 (0x0038 - 0x0000)
struct MyCharacter_C_ValidateTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilitySlots                                 Which_ability;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24AD[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMyAbilityBP_C*                         CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ValidateTarget_valid_;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24AE[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCooldown_Output;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MyCharacter_C_ValidateTarget) == 0x000008, "Wrong alignment on MyCharacter_C_ValidateTarget");
static_assert(sizeof(MyCharacter_C_ValidateTarget) == 0x000038, "Wrong size on MyCharacter_C_ValidateTarget");
static_assert(offsetof(MyCharacter_C_ValidateTarget, Target) == 0x000000, "Member 'MyCharacter_C_ValidateTarget::Target' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, Which_ability) == 0x000018, "Member 'MyCharacter_C_ValidateTarget::Which_ability' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, Return) == 0x000019, "Member 'MyCharacter_C_ValidateTarget::Return' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'MyCharacter_C_ValidateTarget::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, CallFunc_Array_Get_Item) == 0x000020, "Member 'MyCharacter_C_ValidateTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, CallFunc_ValidateTarget_valid_) == 0x000028, "Member 'MyCharacter_C_ValidateTarget::CallFunc_ValidateTarget_valid_' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, CallFunc_GetCooldown_Output) == 0x00002C, "Member 'MyCharacter_C_ValidateTarget::CallFunc_GetCooldown_Output' has a wrong offset!");
static_assert(offsetof(MyCharacter_C_ValidateTarget, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'MyCharacter_C_ValidateTarget::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

}

