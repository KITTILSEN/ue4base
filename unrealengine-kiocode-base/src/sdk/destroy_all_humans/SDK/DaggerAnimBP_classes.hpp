#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaggerAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass DaggerAnimBP.DaggerAnimBP_C
// 0x03A0 (0x06F0 - 0x0350)
class UDaggerAnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_24CE[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0400(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0428(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0450(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0478(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x04C0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x04E0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0528(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0548(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0590(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x05B0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x05F8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0618(0x00C8)()
	bool                                          HasToPlayTakeDamageAnim;                           // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hastoplaydieanim;                                  // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_to_Play_Attack_Anim;                           // 0x06E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWalking;                                         // 0x06E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24CF[0x4];                                     // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMyCharacter_C*                         MyCharacter;                                       // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_DaggerAnimBP_AnimGraphNode_TransitionResult_4789D4354F12008D1EAB2D8D4F689C11();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_DaggerAnimBP_AnimGraphNode_TransitionResult_FC6AF41A4A12F0753C4E4C8991E69A2B();
	void ExecuteUbergraph_DaggerAnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DaggerAnimBP_C">();
	}
	static class UDaggerAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaggerAnimBP_C>();
	}
};
static_assert(alignof(UDaggerAnimBP_C) == 0x000010, "Wrong alignment on UDaggerAnimBP_C");
static_assert(sizeof(UDaggerAnimBP_C) == 0x0006F0, "Wrong size on UDaggerAnimBP_C");
static_assert(offsetof(UDaggerAnimBP_C, UberGraphFrame) == 0x000350, "Member 'UDaggerAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UDaggerAnimBP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UDaggerAnimBP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_Root) == 0x000368, "Member 'UDaggerAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000388, "Member 'UDaggerAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x0003B0, "Member 'UDaggerAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0003D8, "Member 'UDaggerAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000400, "Member 'UDaggerAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000428, "Member 'UDaggerAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_TransitionResult) == 0x000450, "Member 'UDaggerAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000478, "Member 'UDaggerAnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_StateResult_3) == 0x0004C0, "Member 'UDaggerAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x0004E0, "Member 'UDaggerAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_StateResult_2) == 0x000528, "Member 'UDaggerAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000548, "Member 'UDaggerAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_StateResult_1) == 0x000590, "Member 'UDaggerAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_SequencePlayer) == 0x0005B0, "Member 'UDaggerAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_StateResult) == 0x0005F8, "Member 'UDaggerAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, AnimGraphNode_StateMachine) == 0x000618, "Member 'UDaggerAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, HasToPlayTakeDamageAnim) == 0x0006E0, "Member 'UDaggerAnimBP_C::HasToPlayTakeDamageAnim' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, Hastoplaydieanim) == 0x0006E1, "Member 'UDaggerAnimBP_C::Hastoplaydieanim' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, Has_to_Play_Attack_Anim) == 0x0006E2, "Member 'UDaggerAnimBP_C::Has_to_Play_Attack_Anim' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, IsWalking) == 0x0006E3, "Member 'UDaggerAnimBP_C::IsWalking' has a wrong offset!");
static_assert(offsetof(UDaggerAnimBP_C, MyCharacter) == 0x0006E8, "Member 'UDaggerAnimBP_C::MyCharacter' has a wrong offset!");

}

